templete code 
import React, { useState, useEffect, useRef } from 'react';
import Moveable from 'react-moveable';
import { splitPDF } from './PdfLibOwn/GetPages';
import { pdfToBase64 } from './PdfLibOwn/PDFtoBase64';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import 'pdfjs-dist/build/pdf.worker.js';
// import './Template.css';

interface ComponentData {
  id: number;
  type: 'text' | 'image';
  content?: string;
  value: string;
  position: { top: number; left: number };
  size: { width: number; height: number };
  name: string;
  fontSize?: number;
  assign?: string[];
}

const Templete: React.FC = () => {
  const [base64PDF, setBase64PDF] = useState<string | null>(null);
  const [pages, setPages] = useState<Array<{ page: number; data: string }> | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [zoomLevel, setZoomLevel] = useState<number>(1);
  const [components, setComponents] = useState<ComponentData[]>([]);
  const [selectedId, setSelectedId] = useState<number | null>(null);
  const [target, setTarget] = useState<HTMLElement | null>(null);
  const [textFieldValue, setTextFieldValue] = useState<string>('');
  const [userInput, setUserInput] = useState<string>('');

  const pageRefs = useRef<Array<HTMLDivElement | null>>([]);
  const borderDivRef = useRef<HTMLDivElement | null>(null);
  const workspaceRef = useRef<HTMLDivElement | null>(null);
  const textInputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    if (pages) {
      renderPage(pages[currentPage - 1].data, pageRefs.current[currentPage - 1]);
    }
  }, [pages, currentPage, zoomLevel]);

  useEffect(() => {
    if (selectedId !== null) {
      const selectedElement = document.querySelector(`[data-id="${selectedId}"]`);
      setTarget(selectedElement as HTMLElement);
      const selectedComponent = components.find((c) => c.id === selectedId);
      if (selectedComponent?.type === 'text') {
        setTextFieldValue(selectedComponent.content || '');
        textInputRef.current?.focus();
      }
    }
  }, [selectedId, components]);

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const base64String = await pdfToBase64(file);
      setBase64PDF(base64String);
      const result = await splitPDF(base64String);
      setPages(result);
      setCurrentPage(1);
    }
  };

  const renderPage = async (pageData: string, container: HTMLDivElement | null) => {
    if (container) {
      const pdf = await pdfjsLib.getDocument({ data: atob(pageData) }).promise;
      const page = await pdf.getPage(1);
      const viewport = page.getViewport({ scale: zoomLevel });

      container.innerHTML = '';

      container.style.width = `${viewport.width}px`;
      container.style.height = `${viewport.height}px`;
      container.style.position = 'relative';

      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      if (context) {
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        container.appendChild(canvas);

        const renderContext = {
          canvasContext: context,
          viewport: viewport,
        };
        await page.render(renderContext).promise;

        const borderDiv = document.createElement('div');
        borderDiv.style.position = 'absolute';
        borderDiv.style.top = '0';
        borderDiv.style.left = '0';
        borderDiv.style.width = `${viewport.width}px`;
        borderDiv.style.height = `${viewport.height}px`;
        borderDiv.style.border = '2px solid green';
        borderDivRef.current = borderDiv;
        container.appendChild(borderDiv);
      }
    }
  };

  const goToPreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };
  const goToNextPage = () => {
    if (pages && currentPage < pages.length) {
      setCurrentPage(currentPage + 1);
    }
  };

  const zoomIn = () => {
    setZoomLevel((prevZoomLevel) => prevZoomLevel + 0.2);
  };

  const zoomOut = () => {
    setZoomLevel((prevZoomLevel) => Math.max(0.2, prevZoomLevel - 0.2));
  };

  const addComponent = (type: 'text' | 'image') => {
    const newComponent: ComponentData = {
      id: Date.now(),
      type,
      name: `${type}-${Date.now()}`,
      position: { top: 50, left: 50 },
      size: { width: 100, height: 100 },
      fontSize: 16,
      value: '',
      assign: [],
      content: type === 'text' ? '' : undefined,
    }; 
    setComponents([...components, newComponent]);
  };

  const updateComponentPosition = (id: number, top: number, left: number) => {
    setComponents((prevComponents) =>
      prevComponents.map((component) =>
        component.id === id
          ? { ...component, position: { top, left } }
          : component
      )
    );
  };

  const updateComponentSize = (id: number, width: number, height: number) => {
    setComponents((prevComponents) =>
      prevComponents.map((component) =>
        component.id === id
          ? { ...component, size: { width, height } }
          : component
      )
    );
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newText = e.target.value;
    setTextFieldValue(newText);
    if (selectedId !== null) {
      setComponents((prevComponents) =>
        prevComponents.map((component) =>
          component.id === selectedId ? { ...component, content: newText, value: newText } : component
        )
      );
    }
  };

  const handleDeselect = (e: React.MouseEvent) => {
    if (!(e.target as HTMLElement).closest('.component')) {
      setSelectedId(null);
    }
  };

  const changeTextSize = (increment: boolean) => {
    if (selectedId !== null) {
      setComponents((prevComponents) =>
        prevComponents.map((component) =>
          component.id === selectedId
            ? {
                ...component,
                fontSize: (component.fontSize || 16) + (increment ? 2 : -2),
              }
            : component
        )
      );
    }
  };

  const deleteComponent = () => {
    if (selectedId !== null) {
      setComponents((prevComponents) =>
        prevComponents.filter((component) => component.id !== selectedId)
      );
      setSelectedId(null);
    }
  };

  const logComponentData = () => {
    const data = components.map(({ id, type, content, value, position, size, name, fontSize, assign }) => ({
      id,
      type,
      content,
      value,
      position,
      size,
      name,
      fontSize,
      assign
    }));
    console.log(JSON.stringify(data, null, 2));
  };

  return (
    <div className="h-screen w-full flex flex-col items-center justify-center">
      <div className="control-buttons">
        <button onClick={() => addComponent('text')}>Add Text</button>
        <button onClick={() => addComponent('image')}>Add Image</button>
        {selectedId && (
          <>
            <button onClick={() => changeTextSize(true)}>Increase Text Size</button>
            <button onClick={() => changeTextSize(false)}>Decrease Text Size</button>
            <button onClick={deleteComponent}>Delete Component</button>
          </>
        )}
        <button onClick={logComponentData}>Log Component Data</button>
      </div>
      {selectedId && (
        <input
          ref={textInputRef}
          type="text"
          value={textFieldValue}
          onChange={handleTextChange}
          placeholder="Edit text here"
        />
      )}
      <div className="flex flex-row w-full h-full">
        <div id="editorDivArea" className="flex flex-col items-center justify-center gap-2 p-3 min-w-[100vh] max-w-[100vh] h-full border border-blue-500">
          {!pages && (
            <div className="flex flex-col items-center">
              <input
                type="file"
                accept="application/pdf"
                onChange={handleFileChange}
                className="bg-gray-100 text-[#283C42] border-1 border-[#283C42] px-4 py-2 rounded hover:bg-[#283C42] hover:text-white hover:border-white transition-colors duration-300 mb-4"
              />
            </div>
          )}
          {pages && (
            <>
              <div id="pdf-renderer" className="relative w-full h-full">
                {pages.map((page, index) => (
                  <div
                    key={index}
                    ref={(el) => (pageRefs.current[index] = el)}
                    style={{
                      display: index + 1 === currentPage ? 'block' : 'none',
                    }}
                  />
                ))}
                {components.map((component) => (
                  <div
                    key={component.id}
                    data-id={component.id}
                    className={`component absolute ${
                      selectedId === component.id ? 'selected' : ''
                    }`}
                    style={{
                      top: component.position.top,
                      left: component.position.left,
                      width: component.size.width,
                      height: component.size.height,
                      fontSize: component.fontSize,
                      cursor: 'move',
                    }}
                    onMouseDown={() => setSelectedId(component.id)}
                  >
                    {component.type === 'text' && (
                      <input
                        type="text"
                        value={component.value}
                        onChange={(e) => setUserInput(e.target.value)}
                        style={{
                          width: '100%',
                          height: '100%',
                          fontSize: component.fontSize,
                          border: '1px solid transparent',
                          backgroundColor: 'transparent',
                        }}
                      />
                    )}
                    {component.type === 'image' && (
                      <img
                        src={component.content}
                        alt="Uploaded"
                        style={{ width: '100%', height: '100%' }}
                      />
                    )}
                  </div>
                ))}
              </div>
              <Moveable
                target={target}
                draggable
                resizable
                onDrag={({ target, left, top }) => {
                  if (target) {
                    const id = parseInt(target.getAttribute('data-id')!, 10);
                    updateComponentPosition(id, top, left);
                  }
                }}
                onResize={({ target, width, height }) => {
                  if (target) {
                    const id = parseInt(target.getAttribute('data-id')!, 10);
                    updateComponentSize(id, width, height);
                  }
                }}
              />
              <div className="flex justify-center space-x-4 mt-4">
                <button
                  onClick={goToPreviousPage}
                  disabled={currentPage === 1}
                  className={`px-4 py-2 rounded ${
                    currentPage === 1
                      ? 'bg-gray-300 cursor-not-allowed'
                      : 'bg-blue-500 text-white hover:bg-blue-700'
                  }`}
                >
                  Previous Page
                </button>
                <button
                  onClick={goToNextPage}
                  disabled={pages && currentPage === pages.length}
                  className={`px-4 py-2 rounded ${
                    pages && currentPage === pages.length
                      ? 'bg-gray-300 cursor-not-allowed'
                      : 'bg-blue-500 text-white hover:bg-blue-700'
                  }`}
                >
                  Next Page
                </button>
                <button
                  onClick={zoomOut}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                >
                  Zoom Out
                </button>
                <button
                  onClick={zoomIn}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                >
                  Zoom In
                </button>
              </div>
            </>
          )}
        </div>
        <div id="currentPDFDiv" className="flex flex-col items-center justify-center gap-2 p-3 min-w-[100vh] max-w-[100vh] h-full border border-blue-500">
          {pages && (
            <>
              <div id="pdf-renderer" className="relative w-full h-full">
                {pages.map((page, index) => (
                  <div
                    key={index}
                    ref={(el) => (pageRefs.current[index] = el)}
                    style={{
                      display: index + 1 === currentPage ? 'block' : 'none',
                    }}
                  />
                ))}
                {components.map((component) => (
                  <div
                    key={component.id}
                    data-id={component.id}
                    className={`component absolute ${
                      selectedId === component.id ? 'selected' : ''
                    }`}
                    style={{
                      top: component.position.top,
                      left: component.position.left,
                      width: component.size.width,
                      height: component.size.height,
                      fontSize: component.fontSize,
                      cursor: 'move',
                    }}
                    onMouseDown={() => setSelectedId(component.id)}
                  >
                    {component.type === 'text' && (
                      <input
                        type="text"
                        value={component.value}
                        onChange={(e) => setUserInput(e.target.value)}
                        style={{
                          width: '100%',
                          height: '100%',
                          fontSize: component.fontSize,
                          border: '1px solid transparent',
                          backgroundColor: 'transparent',
                        }}
                      />
                    )}
                    {component.type === 'image' && (
                      <img
                        src={component.content}
                        alt="Uploaded"
                        style={{ width: '100%', height: '100%' }}
                      />
                    )}
                  </div>
                ))}
              </div>
              <Moveable
                target={target}
                draggable
                resizable
                onDrag={({ target, left, top }) => {
                  if (target) {
                    const id = parseInt(target.getAttribute('data-id')!, 10);
                    updateComponentPosition(id, top, left);
                  }
                }}
                onResize={({ target, width, height }) => {
                  if (target) {
                    const id = parseInt(target.getAttribute('data-id')!, 10);
                    updateComponentSize(id, width, height);
                  }
                }}
              />
              <div className="flex justify-center space-x-4 mt-4">
                <button
                  onClick={goToPreviousPage}
                  disabled={currentPage === 1}
                  className={`px-4 py-2 rounded ${
                    currentPage === 1
                      ? 'bg-gray-300 cursor-not-allowed'
                      : 'bg-blue-500 text-white hover:bg-blue-700'
                  }`}
                >
                  Previous Page
                </button>
                <button
                  onClick={goToNextPage}
                  disabled={pages && currentPage === pages.length}
                  className={`px-4 py-2 rounded ${
                    pages && currentPage === pages.length
                      ? 'bg-gray-300 cursor-not-allowed'
                      : 'bg-blue-500 text-white hover:bg-blue-700'
                  }`}
                >
                  Next Page
                </button>
                <button
                  onClick={zoomOut}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                >
                  Zoom Out
                </button>
                <button
                  onClick={zoomIn}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                >
                  Zoom In
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Templete;

