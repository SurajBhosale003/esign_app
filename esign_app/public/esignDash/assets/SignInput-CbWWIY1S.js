var rs=Object.defineProperty,os=Object.defineProperties;var cs=Object.getOwnPropertyDescriptors;var da=Object.getOwnPropertySymbols,ls=Object.getPrototypeOf,us=Object.prototype.hasOwnProperty,hs=Object.prototype.propertyIsEnumerable,ds=Reflect.get;var kn=(it,qe)=>(qe=Symbol[it])?qe:Symbol.for("Symbol."+it),Gt=Math.pow,bn=(it,qe,Qe)=>qe in it?rs(it,qe,{enumerable:!0,configurable:!0,writable:!0,value:Qe}):it[qe]=Qe,Bi=(it,qe)=>{for(var Qe in qe||(qe={}))us.call(qe,Qe)&&bn(it,Qe,qe[Qe]);if(da)for(var Qe of da(qe))hs.call(qe,Qe)&&bn(it,Qe,qe[Qe]);return it},Ji=(it,qe)=>os(it,cs(qe));var jt=(it,qe,Qe)=>(bn(it,typeof qe!="symbol"?qe+"":qe,Qe),Qe),In=(it,qe,Qe)=>{if(!qe.has(it))throw TypeError("Cannot "+Qe)};var he=(it,qe,Qe)=>(In(it,qe,"read from private field"),Qe?Qe.call(it):qe.get(it)),De=(it,qe,Qe)=>{if(qe.has(it))throw TypeError("Cannot add the same private member more than once");qe instanceof WeakSet?qe.add(it):qe.set(it,Qe)},Ne=(it,qe,Qe,ye)=>(In(it,qe,"write to private field"),ye?ye.call(it,Qe):qe.set(it,Qe),Qe);var wi=(it,qe,Qe,ye)=>({set _(Ue){Ne(it,qe,Ue,Qe)},get _(){return he(it,qe,ye)}}),Re=(it,qe,Qe)=>(In(it,qe,"access private method"),Qe),ci=(it,qe,Qe)=>ds(ls(it),Qe,qe);var rt=(it,qe,Qe)=>new Promise((ye,Ue)=>{var Xe=se=>{try{D(Qe.next(se))}catch(i){Ue(i)}},Fe=se=>{try{D(Qe.throw(se))}catch(i){Ue(i)}},D=se=>se.done?ye(se.value):Promise.resolve(se.value).then(Xe,Fe);D((Qe=Qe.apply(it,qe)).next())}),As=function(it,qe){this[0]=it,this[1]=qe};var ai=it=>{var qe=it[kn("asyncIterator")],Qe=!1,ye,Ue={};return qe==null?(qe=it[kn("iterator")](),ye=Xe=>Ue[Xe]=Fe=>qe[Xe](Fe)):(qe=qe.call(it),ye=Xe=>Ue[Xe]=Fe=>{if(Qe){if(Qe=!1,Xe==="throw")throw Fe;return Fe}return Qe=!0,{done:!1,value:new As(new Promise(D=>{var se=qe[Xe](Fe);if(!(se instanceof Object))throw TypeError("Object expected");D(se)}),1)}}),Ue[kn("iterator")]=()=>Ue,ye("next"),"throw"in qe?ye("throw"):Ue.throw=Xe=>{throw Xe},"return"in qe&&ye("return"),Ue};import{l as getAugmentedNamespace,r as reactExports,j as jsxRuntimeExports,c as useSelector,e as selectEmail,h as selectFullName}from"./index-DIjc9gFd.js";import{S as SignPad}from"./SignPad-NT20Ia7p.js";import{B,Y}from"./react-toastify.esm-BD3mGDdm.js";import{M as Modal}from"./index-BhjCMKpx.js";import{T as Tabs}from"./index-CN1wDC8h.js";function commonjsRequire(it){throw new Error('Could not dynamically require "'+it+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var pdf={exports:{}};const __viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$5=getAugmentedNamespace(__viteBrowserExternal$1);(function(module,exports){(function(qe,Qe){module.exports=qe.pdfjsLib=Qe()})(globalThis,()=>(()=>{var __webpack_modules__=[,(it,qe)=>{var me;Object.defineProperty(qe,"__esModule",{value:!0}),qe.VerbosityLevel=qe.Util=qe.UnknownErrorException=qe.UnexpectedResponseException=qe.TextRenderingMode=qe.RenderingIntentFlag=qe.PromiseCapability=qe.PermissionFlag=qe.PasswordResponses=qe.PasswordException=qe.PageActionEventType=qe.OPS=qe.MissingPDFException=qe.MAX_IMAGE_SIZE_TO_CACHE=qe.LINE_FACTOR=qe.LINE_DESCENT_FACTOR=qe.InvalidPDFException=qe.ImageKind=qe.IDENTITY_MATRIX=qe.FormatError=qe.FeatureTest=qe.FONT_IDENTITY_MATRIX=qe.DocumentActionEventType=qe.CMapCompressionType=qe.BaseException=qe.BASELINE_FACTOR=qe.AnnotationType=qe.AnnotationReplyType=qe.AnnotationPrefix=qe.AnnotationMode=qe.AnnotationFlag=qe.AnnotationFieldFlag=qe.AnnotationEditorType=qe.AnnotationEditorPrefix=qe.AnnotationEditorParamsType=qe.AnnotationBorderStyleType=qe.AnnotationActionEventType=qe.AbortException=void 0,qe.assert=h,qe.bytesToString=J,qe.createValidAbsoluteUrl=N,qe.getModificationDate=re,qe.getUuid=ge,qe.getVerbosityLevel=l,qe.info=x,qe.isArrayBuffer=ne,qe.isArrayEqual=X,qe.isNodeJS=void 0,qe.normalizeUnicode=ue,qe.objectFromMap=_,qe.objectSize=ce,qe.setVerbosityLevel=V,qe.shadow=U,qe.string32=W,qe.stringToBytes=G,qe.stringToPDFString=$,qe.stringToUTF8String=Z,qe.unreachable=s,qe.utf8StringToString=te,qe.warn=H;const Qe=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");qe.isNodeJS=Qe;const ye=[1,0,0,1,0,0];qe.IDENTITY_MATRIX=ye;const Ue=[.001,0,0,.001,0,0];qe.FONT_IDENTITY_MATRIX=Ue;const Xe=1e7;qe.MAX_IMAGE_SIZE_TO_CACHE=Xe;const Fe=1.35;qe.LINE_FACTOR=Fe;const D=.35;qe.LINE_DESCENT_FACTOR=D;const se=D/Fe;qe.BASELINE_FACTOR=se;const i={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};qe.RenderingIntentFlag=i;const w={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};qe.AnnotationMode=w;const P="pdfjs_internal_editor_";qe.AnnotationEditorPrefix=P;const e={DISABLE:-1,NONE:0,FREETEXT:3,STAMP:13,INK:15};qe.AnnotationEditorType=e;const t={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23};qe.AnnotationEditorParamsType=t;const o={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};qe.PermissionFlag=o;const K={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};qe.TextRenderingMode=K;const j={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};qe.ImageKind=j;const C={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};qe.AnnotationType=C;const O={GROUP:"Group",REPLY:"R"};qe.AnnotationReplyType=O;const d={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};qe.AnnotationFlag=d;const A={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};qe.AnnotationFieldFlag=A;const n={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};qe.AnnotationBorderStyleType=n;const I={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};qe.AnnotationActionEventType=I;const k={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};qe.DocumentActionEventType=k;const y={O:"PageOpen",C:"PageClose"};qe.PageActionEventType=y;const f={ERRORS:0,WARNINGS:1,INFOS:5};qe.VerbosityLevel=f;const R={NONE:0,BINARY:1};qe.CMapCompressionType=R;const E={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};qe.OPS=E;const M={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};qe.PasswordResponses=M;let b=f.WARNINGS;function V(fe){Number.isInteger(fe)&&(b=fe)}function l(){return b}function x(fe){b>=f.INFOS&&console.log(`Info: ${fe}`)}function H(fe){b>=f.WARNINGS&&console.log(`Warning: ${fe}`)}function s(fe){throw new Error(fe)}function h(fe,xe){fe||s(xe)}function F(fe){switch(fe==null?void 0:fe.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function N(fe,xe=null,pe=null){if(!fe)return null;try{if(pe&&typeof fe=="string"){if(pe.addDefaultProtocol&&fe.startsWith("www.")){const Oe=fe.match(/\./g);(Oe==null?void 0:Oe.length)>=2&&(fe=`http://${fe}`)}if(pe.tryConvertEncoding)try{fe=Z(fe)}catch(Oe){}}const we=xe?new URL(fe,xe):new URL(fe);if(F(we))return we}catch(we){}return null}function U(fe,xe,pe,we=!1){return Object.defineProperty(fe,xe,{value:pe,enumerable:!we,configurable:!0,writable:!1}),pe}const g=function(){function xe(pe,we){this.constructor===xe&&s("Cannot initialize BaseException."),this.message=pe,this.name=we}return xe.prototype=new Error,xe.constructor=xe,xe}();qe.BaseException=g;class S extends g{constructor(xe,pe){super(xe,"PasswordException"),this.code=pe}}qe.PasswordException=S;class m extends g{constructor(xe,pe){super(xe,"UnknownErrorException"),this.details=pe}}qe.UnknownErrorException=m;class r extends g{constructor(xe){super(xe,"InvalidPDFException")}}qe.InvalidPDFException=r;class p extends g{constructor(xe){super(xe,"MissingPDFException")}}qe.MissingPDFException=p;class c extends g{constructor(xe,pe){super(xe,"UnexpectedResponseException"),this.status=pe}}qe.UnexpectedResponseException=c;class u extends g{constructor(xe){super(xe,"FormatError")}}qe.FormatError=u;class q extends g{constructor(xe){super(xe,"AbortException")}}qe.AbortException=q;function J(fe){(typeof fe!="object"||(fe==null?void 0:fe.length)===void 0)&&s("Invalid argument for bytesToString");const xe=fe.length,pe=8192;if(xe<pe)return String.fromCharCode.apply(null,fe);const we=[];for(let Oe=0;Oe<xe;Oe+=pe){const Te=Math.min(Oe+pe,xe),Ce=fe.subarray(Oe,Te);we.push(String.fromCharCode.apply(null,Ce))}return we.join("")}function G(fe){typeof fe!="string"&&s("Invalid argument for stringToBytes");const xe=fe.length,pe=new Uint8Array(xe);for(let we=0;we<xe;++we)pe[we]=fe.charCodeAt(we)&255;return pe}function W(fe){return String.fromCharCode(fe>>24&255,fe>>16&255,fe>>8&255,fe&255)}function ce(fe){return Object.keys(fe).length}function _(fe){const xe=Object.create(null);for(const[pe,we]of fe)xe[pe]=we;return xe}function ie(){const fe=new Uint8Array(4);return fe[0]=1,new Uint32Array(fe.buffer,0,1)[0]===1}function L(){try{return new Function(""),!0}catch(fe){return!1}}class oe{static get isLittleEndian(){return U(this,"isLittleEndian",ie())}static get isEvalSupported(){return U(this,"isEvalSupported",L())}static get isOffscreenCanvasSupported(){return U(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas!="undefined")}static get platform(){return typeof navigator=="undefined"?U(this,"platform",{isWin:!1,isMac:!1}):U(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}static get isCSSRoundSupported(){var xe,pe;return U(this,"isCSSRoundSupported",(pe=(xe=globalThis.CSS)==null?void 0:xe.supports)==null?void 0:pe.call(xe,"width: round(1.5px, 1px)"))}}qe.FeatureTest=oe;const T=[...Array(256).keys()].map(fe=>fe.toString(16).padStart(2,"0"));class Q{static makeHexColor(xe,pe,we){return`#${T[xe]}${T[pe]}${T[we]}`}static scaleMinMax(xe,pe){let we;xe[0]?(xe[0]<0&&(we=pe[0],pe[0]=pe[1],pe[1]=we),pe[0]*=xe[0],pe[1]*=xe[0],xe[3]<0&&(we=pe[2],pe[2]=pe[3],pe[3]=we),pe[2]*=xe[3],pe[3]*=xe[3]):(we=pe[0],pe[0]=pe[2],pe[2]=we,we=pe[1],pe[1]=pe[3],pe[3]=we,xe[1]<0&&(we=pe[2],pe[2]=pe[3],pe[3]=we),pe[2]*=xe[1],pe[3]*=xe[1],xe[2]<0&&(we=pe[0],pe[0]=pe[1],pe[1]=we),pe[0]*=xe[2],pe[1]*=xe[2]),pe[0]+=xe[4],pe[1]+=xe[4],pe[2]+=xe[5],pe[3]+=xe[5]}static transform(xe,pe){return[xe[0]*pe[0]+xe[2]*pe[1],xe[1]*pe[0]+xe[3]*pe[1],xe[0]*pe[2]+xe[2]*pe[3],xe[1]*pe[2]+xe[3]*pe[3],xe[0]*pe[4]+xe[2]*pe[5]+xe[4],xe[1]*pe[4]+xe[3]*pe[5]+xe[5]]}static applyTransform(xe,pe){const we=xe[0]*pe[0]+xe[1]*pe[2]+pe[4],Oe=xe[0]*pe[1]+xe[1]*pe[3]+pe[5];return[we,Oe]}static applyInverseTransform(xe,pe){const we=pe[0]*pe[3]-pe[1]*pe[2],Oe=(xe[0]*pe[3]-xe[1]*pe[2]+pe[2]*pe[5]-pe[4]*pe[3])/we,Te=(-xe[0]*pe[1]+xe[1]*pe[0]+pe[4]*pe[1]-pe[5]*pe[0])/we;return[Oe,Te]}static getAxialAlignedBoundingBox(xe,pe){const we=this.applyTransform(xe,pe),Oe=this.applyTransform(xe.slice(2,4),pe),Te=this.applyTransform([xe[0],xe[3]],pe),Ce=this.applyTransform([xe[2],xe[1]],pe);return[Math.min(we[0],Oe[0],Te[0],Ce[0]),Math.min(we[1],Oe[1],Te[1],Ce[1]),Math.max(we[0],Oe[0],Te[0],Ce[0]),Math.max(we[1],Oe[1],Te[1],Ce[1])]}static inverseTransform(xe){const pe=xe[0]*xe[3]-xe[1]*xe[2];return[xe[3]/pe,-xe[1]/pe,-xe[2]/pe,xe[0]/pe,(xe[2]*xe[5]-xe[4]*xe[3])/pe,(xe[4]*xe[1]-xe[5]*xe[0])/pe]}static singularValueDecompose2dScale(xe){const pe=[xe[0],xe[2],xe[1],xe[3]],we=xe[0]*pe[0]+xe[1]*pe[2],Oe=xe[0]*pe[1]+xe[1]*pe[3],Te=xe[2]*pe[0]+xe[3]*pe[2],Ce=xe[2]*pe[1]+xe[3]*pe[3],Ae=(we+Ce)/2,Se=Math.sqrt(Gt(we+Ce,2)-4*(we*Ce-Te*Oe))/2,He=Ae+Se||1,Ve=Ae-Se||1;return[Math.sqrt(He),Math.sqrt(Ve)]}static normalizeRect(xe){const pe=xe.slice(0);return xe[0]>xe[2]&&(pe[0]=xe[2],pe[2]=xe[0]),xe[1]>xe[3]&&(pe[1]=xe[3],pe[3]=xe[1]),pe}static intersect(xe,pe){const we=Math.max(Math.min(xe[0],xe[2]),Math.min(pe[0],pe[2])),Oe=Math.min(Math.max(xe[0],xe[2]),Math.max(pe[0],pe[2]));if(we>Oe)return null;const Te=Math.max(Math.min(xe[1],xe[3]),Math.min(pe[1],pe[3])),Ce=Math.min(Math.max(xe[1],xe[3]),Math.max(pe[1],pe[3]));return Te>Ce?null:[we,Te,Oe,Ce]}static bezierBoundingBox(xe,pe,we,Oe,Te,Ce,Ae,Se){const He=[],Ve=[[],[]];let Le,Ye,lt,Ee,ut,_e,Ie,de;for(let je=0;je<2;++je){if(je===0?(Ye=6*xe-12*we+6*Te,Le=-3*xe+9*we-9*Te+3*Ae,lt=3*we-3*xe):(Ye=6*pe-12*Oe+6*Ce,Le=-3*pe+9*Oe-9*Ce+3*Se,lt=3*Oe-3*pe),Math.abs(Le)<1e-12){if(Math.abs(Ye)<1e-12)continue;Ee=-lt/Ye,0<Ee&&Ee<1&&He.push(Ee);continue}Ie=Ye*Ye-4*lt*Le,de=Math.sqrt(Ie),!(Ie<0)&&(ut=(-Ye+de)/(2*Le),0<ut&&ut<1&&He.push(ut),_e=(-Ye-de)/(2*Le),0<_e&&_e<1&&He.push(_e))}let be=He.length,Be;const Pe=be;for(;be--;)Ee=He[be],Be=1-Ee,Ve[0][be]=Be*Be*Be*xe+3*Be*Be*Ee*we+3*Be*Ee*Ee*Te+Ee*Ee*Ee*Ae,Ve[1][be]=Be*Be*Be*pe+3*Be*Be*Ee*Oe+3*Be*Ee*Ee*Ce+Ee*Ee*Ee*Se;return Ve[0][Pe]=xe,Ve[1][Pe]=pe,Ve[0][Pe+1]=Ae,Ve[1][Pe+1]=Se,Ve[0].length=Ve[1].length=Pe+2,[Math.min(...Ve[0]),Math.min(...Ve[1]),Math.max(...Ve[0]),Math.max(...Ve[1])]}}qe.Util=Q;const v=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function $(fe){if(fe[0]>="ï"){let pe;if(fe[0]==="þ"&&fe[1]==="ÿ"?pe="utf-16be":fe[0]==="ÿ"&&fe[1]==="þ"?pe="utf-16le":fe[0]==="ï"&&fe[1]==="»"&&fe[2]==="¿"&&(pe="utf-8"),pe)try{const we=new TextDecoder(pe,{fatal:!0}),Oe=G(fe);return we.decode(Oe)}catch(we){H(`stringToPDFString: "${we}".`)}}const xe=[];for(let pe=0,we=fe.length;pe<we;pe++){const Oe=v[fe.charCodeAt(pe)];xe.push(Oe?String.fromCharCode(Oe):fe.charAt(pe))}return xe.join("")}function Z(fe){return decodeURIComponent(escape(fe))}function te(fe){return unescape(encodeURIComponent(fe))}function ne(fe){return typeof fe=="object"&&(fe==null?void 0:fe.byteLength)!==void 0}function X(fe,xe){if(fe.length!==xe.length)return!1;for(let pe=0,we=fe.length;pe<we;pe++)if(fe[pe]!==xe[pe])return!1;return!0}function re(fe=new Date){return[fe.getUTCFullYear().toString(),(fe.getUTCMonth()+1).toString().padStart(2,"0"),fe.getUTCDate().toString().padStart(2,"0"),fe.getUTCHours().toString().padStart(2,"0"),fe.getUTCMinutes().toString().padStart(2,"0"),fe.getUTCSeconds().toString().padStart(2,"0")].join("")}class ae{constructor(){De(this,me,!1);this.promise=new Promise((xe,pe)=>{this.resolve=we=>{Ne(this,me,!0),xe(we)},this.reject=we=>{Ne(this,me,!0),pe(we)}})}get settled(){return he(this,me)}}me=new WeakMap,qe.PromiseCapability=ae;let z=null,le=null;function ue(fe){return z||(z=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,le=new Map([["ﬅ","ſt"]])),fe.replaceAll(z,(xe,pe,we)=>pe?pe.normalize("NFKC"):le.get(we))}function ge(){if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const fe=new Uint8Array(32);if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(fe);else for(let xe=0;xe<32;xe++)fe[xe]=Math.floor(Math.random()*255);return J(fe)}const ke="pdfjs_internal_id_";qe.AnnotationPrefix=ke},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var it,Qe,ye,Ue,Ai,Fe,Ti,se,i,w,P,e,t,o,K,j,Ki,O,d,yn,n,I;Object.defineProperty(exports,"__esModule",{value:!0}),exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,Object.defineProperty(exports,"SVGGraphics",{enumerable:!0,get:function(){return _displaySvg.SVGGraphics}}),exports.build=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_displayNode_utils=__w_pdfjs_require__(10),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_displayFetch_stream=__w_pdfjs_require__(19),_displayNetwork=__w_pdfjs_require__(22),_displayNode_stream=__w_pdfjs_require__(23),_displaySvg=__w_pdfjs_require__(24),_xfa_text=__w_pdfjs_require__(25);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3,DefaultCanvasFactory=_util.isNodeJS?_displayNode_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;const DefaultCMapReaderFactory=_util.isNodeJS?_displayNode_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;const DefaultFilterFactory=_util.isNodeJS?_displayNode_utils.NodeFilterFactory:_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;const DefaultStandardFontDataFactory=_util.isNodeJS?_displayNode_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory;exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;function getDocument(y){var ae,z;if(typeof y=="string"||y instanceof URL?y={url:y}:(0,_util.isArrayBuffer)(y)&&(y={data:y}),typeof y!="object")throw new Error("Invalid parameter in getDocument, need parameter object.");if(!y.url&&!y.data&&!y.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const f=new PDFDocumentLoadingTask,{docId:R}=f,E=y.url?getUrlProp(y.url):null,M=y.data?getDataProp(y.data):null,b=y.httpHeaders||null,V=y.withCredentials===!0,l=(ae=y.password)!=null?ae:null,x=y.range instanceof PDFDataRangeTransport?y.range:null,H=Number.isInteger(y.rangeChunkSize)&&y.rangeChunkSize>0?y.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let s=y.worker instanceof PDFWorker?y.worker:null;const h=y.verbosity,F=typeof y.docBaseUrl=="string"&&!(0,_display_utils.isDataScheme)(y.docBaseUrl)?y.docBaseUrl:null,N=typeof y.cMapUrl=="string"?y.cMapUrl:null,U=y.cMapPacked!==!1,g=y.CMapReaderFactory||DefaultCMapReaderFactory,S=typeof y.standardFontDataUrl=="string"?y.standardFontDataUrl:null,m=y.StandardFontDataFactory||DefaultStandardFontDataFactory,r=y.stopAtErrors!==!0,p=Number.isInteger(y.maxImageSize)&&y.maxImageSize>-1?y.maxImageSize:-1,c=y.isEvalSupported!==!1,u=typeof y.isOffscreenCanvasSupported=="boolean"?y.isOffscreenCanvasSupported:!_util.isNodeJS,q=Number.isInteger(y.canvasMaxAreaInBytes)?y.canvasMaxAreaInBytes:-1,J=typeof y.disableFontFace=="boolean"?y.disableFontFace:_util.isNodeJS,G=y.fontExtraProperties===!0,W=y.enableXfa===!0,ce=y.ownerDocument||globalThis.document,_=y.disableRange===!0,ie=y.disableStream===!0,L=y.disableAutoFetch===!0,oe=y.pdfBug===!0,T=x?x.length:(z=y.length)!=null?z:NaN,Q=typeof y.useSystemFonts=="boolean"?y.useSystemFonts:!_util.isNodeJS&&!J,v=typeof y.useWorkerFetch=="boolean"?y.useWorkerFetch:g===_display_utils.DOMCMapReaderFactory&&m===_display_utils.DOMStandardFontDataFactory&&N&&S&&(0,_display_utils.isValidFetchUrl)(N,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(S,document.baseURI),$=y.canvasFactory||new DefaultCanvasFactory({ownerDocument:ce}),Z=y.filterFactory||new DefaultFilterFactory({docId:R,ownerDocument:ce}),te=null;(0,_util.setVerbosityLevel)(h);const ne={canvasFactory:$,filterFactory:Z};if(v||(ne.cMapReaderFactory=new g({baseUrl:N,isCompressed:U}),ne.standardFontDataFactory=new m({baseUrl:S})),!s){const le={verbosity:h,port:_worker_options.GlobalWorkerOptions.workerPort};s=le.port?PDFWorker.fromPort(le):new PDFWorker(le),f._worker=s}const X={docId:R,apiVersion:"3.11.174",data:M,password:l,disableAutoFetch:L,rangeChunkSize:H,length:T,docBaseUrl:F,enableXfa:W,evaluatorOptions:{maxImageSize:p,disableFontFace:J,ignoreErrors:r,isEvalSupported:c,isOffscreenCanvasSupported:u,canvasMaxAreaInBytes:q,fontExtraProperties:G,useSystemFonts:Q,cMapUrl:v?N:null,standardFontDataUrl:v?S:null}},re={ignoreErrors:r,isEvalSupported:c,disableFontFace:J,fontExtraProperties:G,enableXfa:W,ownerDocument:ce,disableAutoFetch:L,pdfBug:oe,styleElement:te};return s.promise.then(function(){if(f.destroyed)throw new Error("Loading aborted");const le=_fetchDocument(s,X),ue=new Promise(function(ge){let ke;x?ke=new _transport_stream.PDFDataTransportStream({length:T,initialData:x.initialData,progressiveDone:x.progressiveDone,contentDispositionFilename:x.contentDispositionFilename,disableRange:_,disableStream:ie},x):M||(ke=(fe=>_util.isNodeJS?new _displayNode_stream.PDFNodeStream(fe):(0,_display_utils.isValidFetchUrl)(fe.url)?new _displayFetch_stream.PDFFetchStream(fe):new _displayNetwork.PDFNetworkStream(fe))({url:E,length:T,httpHeaders:b,withCredentials:V,rangeChunkSize:H,disableRange:_,disableStream:ie})),ge(ke)});return Promise.all([le,ue]).then(function([ge,ke]){if(f.destroyed)throw new Error("Loading aborted");const me=new _message_handler.MessageHandler(R,ge,s.port),fe=new WorkerTransport(me,f,ke,re,ne);f._transport=fe,me.send("Ready",null)})}).catch(f._capability.reject),f}function _fetchDocument(y,f){return rt(this,null,function*(){if(y.destroyed)throw new Error("Worker was destroyed");const R=yield y.messageHandler.sendWithPromise("GetDocRequest",f,f.data?[f.data.buffer]:null);if(y.destroyed)throw new Error("Worker was destroyed");return R})}function getUrlProp(y){if(y instanceof URL)return y.href;try{return new URL(y,window.location).href}catch(f){if(_util.isNodeJS&&typeof y=="string")return y}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(y){if(_util.isNodeJS&&typeof Buffer!="undefined"&&y instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(y instanceof Uint8Array&&y.byteLength===y.buffer.byteLength)return y;if(typeof y=="string")return(0,_util.stringToBytes)(y);if(typeof y=="object"&&!isNaN(y==null?void 0:y.length)||(0,_util.isArrayBuffer)(y))return new Uint8Array(y);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}const qe=class qe{constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId=`d${wi(qe,it)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}destroy(){return rt(this,null,function*(){var f,R,E;this.destroyed=!0;try{(f=this._worker)!=null&&f.port&&(this._worker._pendingDestroy=!0),yield(R=this._transport)==null?void 0:R.destroy()}catch(M){throw(E=this._worker)!=null&&E.port&&delete this._worker._pendingDestroy,M}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)})}};it=new WeakMap,De(qe,it,0);let PDFDocumentLoadingTask=qe;exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(f,R,E=!1,M=null){this.length=f,this.initialData=R,this.progressiveDone=E,this.contentDispositionFilename=M,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(f){this._rangeListeners.push(f)}addProgressListener(f){this._progressListeners.push(f)}addProgressiveReadListener(f){this._progressiveReadListeners.push(f)}addProgressiveDoneListener(f){this._progressiveDoneListeners.push(f)}onDataRange(f,R){for(const E of this._rangeListeners)E(f,R)}onDataProgress(f,R){this._readyCapability.promise.then(()=>{for(const E of this._progressListeners)E(f,R)})}onDataProgressiveRead(f){this._readyCapability.promise.then(()=>{for(const R of this._progressiveReadListeners)R(f)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const f of this._progressiveDoneListeners)f()})}transportReady(){this._readyCapability.resolve()}requestDataRange(f,R){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(f,R){this._pdfInfo=f,this._transport=R,Object.defineProperty(this,"getJavaScript",{value:()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead."),this.getJSActions().then(E=>{if(!E)return E;const M=[];for(const b in E)M.push(...E[b]);return M}))})}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(f){return this._transport.getPage(f)}getPageIndex(f){return this._transport.getPageIndex(f)}getDestinations(){return this._transport.getDestinations()}getDestination(f){return this._transport.getDestination(f)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(f=!1){return this._transport.startCleanup(f||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(f,R,E,M=!1){De(this,Ue);De(this,Fe);De(this,Qe,null);De(this,ye,!1);this._pageIndex=f,this._pageInfo=R,this._transport=E,this._stats=M?new _display_utils.StatTimer:null,this._pdfBug=M,this.commonObjs=E.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:f,rotation:R=this.rotate,offsetX:E=0,offsetY:M=0,dontFlip:b=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:f,rotation:R,offsetX:E,offsetY:M,dontFlip:b})}getAnnotations({intent:f="display"}={}){const R=this._transport.getRenderingIntent(f);return this._transport.getAnnotations(this._pageIndex,R.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}getXfa(){return rt(this,null,function*(){var f;return((f=this._transport._htmlForXfa)==null?void 0:f.children[this._pageIndex])||null})}render({canvasContext:f,viewport:R,intent:E="display",annotationMode:M=_util.AnnotationMode.ENABLE,transform:b=null,background:V=null,optionalContentConfigPromise:l=null,annotationCanvasMap:x=null,pageColors:H=null,printAnnotationStorage:s=null}){var m,r;(m=this._stats)==null||m.time("Overall");const h=this._transport.getRenderingIntent(E,M,s);Ne(this,ye,!1),Re(this,Fe,Ti).call(this),l||(l=this._transport.getOptionalContentConfig());let F=this._intentStates.get(h.cacheKey);F||(F=Object.create(null),this._intentStates.set(h.cacheKey,F)),F.streamReaderCancelTimeout&&(clearTimeout(F.streamReaderCancelTimeout),F.streamReaderCancelTimeout=null);const N=!!(h.renderingIntent&_util.RenderingIntentFlag.PRINT);F.displayReadyCapability||(F.displayReadyCapability=new _util.PromiseCapability,F.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(r=this._stats)==null||r.time("Page Request"),this._pumpOperatorList(h));const U=p=>{var c,u;F.renderTasks.delete(g),(this._maybeCleanupAfterRender||N)&&Ne(this,ye,!0),Re(this,Ue,Ai).call(this,!N),p?(g.capability.reject(p),this._abortOperatorList({intentState:F,reason:p instanceof Error?p:new Error(p)})):g.capability.resolve(),(c=this._stats)==null||c.timeEnd("Rendering"),(u=this._stats)==null||u.timeEnd("Overall")},g=new InternalRenderTask({callback:U,params:{canvasContext:f,viewport:R,transform:b,background:V},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:x,operatorList:F.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!N,pdfBug:this._pdfBug,pageColors:H});(F.renderTasks||(F.renderTasks=new Set)).add(g);const S=g.task;return Promise.all([F.displayReadyCapability.promise,l]).then(([p,c])=>{var u;if(this.destroyed){U();return}(u=this._stats)==null||u.time("Rendering"),g.initializeGraphics({transparency:p,optionalContentConfig:c}),g.operatorListChanged()}).catch(U),S}getOperatorList({intent:f="display",annotationMode:R=_util.AnnotationMode.ENABLE,printAnnotationStorage:E=null}={}){var x;function M(){V.operatorList.lastChunk&&(V.opListReadCapability.resolve(V.operatorList),V.renderTasks.delete(l))}const b=this._transport.getRenderingIntent(f,R,E,!0);let V=this._intentStates.get(b.cacheKey);V||(V=Object.create(null),this._intentStates.set(b.cacheKey,V));let l;return V.opListReadCapability||(l=Object.create(null),l.operatorListChanged=M,V.opListReadCapability=new _util.PromiseCapability,(V.renderTasks||(V.renderTasks=new Set)).add(l),V.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(x=this._stats)==null||x.time("Page Request"),this._pumpOperatorList(b)),V.opListReadCapability.promise}streamTextContent({includeMarkedContent:f=!1,disableNormalization:R=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:f===!0,disableNormalization:R===!0},{highWaterMark:100,size(M){return M.items.length}})}getTextContent(f={}){if(this._transport._htmlForXfa)return this.getXfa().then(E=>_xfa_text.XfaText.textContent(E));const R=this.streamTextContent(f);return new Promise(function(E,M){function b(){V.read().then(function({value:x,done:H}){if(H){E(l);return}Object.assign(l.styles,x.styles),l.items.push(...x.items),b()},M)}const V=R.getReader(),l={items:[],styles:Object.create(null)};b()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const f=[];for(const R of this._intentStates.values())if(this._abortOperatorList({intentState:R,reason:new Error("Page was destroyed."),force:!0}),!R.opListReadCapability)for(const E of R.renderTasks)f.push(E.completed),E.cancel();return this.objs.clear(),Ne(this,ye,!1),Re(this,Fe,Ti).call(this),Promise.all(f)}cleanup(f=!1){Ne(this,ye,!0);const R=Re(this,Ue,Ai).call(this,!1);return f&&R&&this._stats&&(this._stats=new _display_utils.StatTimer),R}_startRenderPage(f,R){var M,b;const E=this._intentStates.get(R);E&&((M=this._stats)==null||M.timeEnd("Page Request"),(b=E.displayReadyCapability)==null||b.resolve(f))}_renderPageChunk(f,R){for(let E=0,M=f.length;E<M;E++)R.operatorList.fnArray.push(f.fnArray[E]),R.operatorList.argsArray.push(f.argsArray[E]);R.operatorList.lastChunk=f.lastChunk,R.operatorList.separateAnnots=f.separateAnnots;for(const E of R.renderTasks)E.operatorListChanged();f.lastChunk&&Re(this,Ue,Ai).call(this,!0)}_pumpOperatorList({renderingIntent:f,cacheKey:R,annotationStorageSerializable:E}){const{map:M,transfers:b}=E,l=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:f,cacheKey:R,annotationStorage:M},b).getReader(),x=this._intentStates.get(R);x.streamReader=l;const H=()=>{l.read().then(({value:s,done:h})=>{if(h){x.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(s,x),H())},s=>{if(x.streamReader=null,!this._transport.destroyed){if(x.operatorList){x.operatorList.lastChunk=!0;for(const h of x.renderTasks)h.operatorListChanged();Re(this,Ue,Ai).call(this,!0)}if(x.displayReadyCapability)x.displayReadyCapability.reject(s);else if(x.opListReadCapability)x.opListReadCapability.reject(s);else throw s}})};H()}_abortOperatorList({intentState:f,reason:R,force:E=!1}){if(f.streamReader){if(f.streamReaderCancelTimeout&&(clearTimeout(f.streamReaderCancelTimeout),f.streamReaderCancelTimeout=null),!E){if(f.renderTasks.size>0)return;if(R instanceof _display_utils.RenderingCancelledException){let M=RENDERING_CANCELLED_TIMEOUT;R.extraDelay>0&&R.extraDelay<1e3&&(M+=R.extraDelay),f.streamReaderCancelTimeout=setTimeout(()=>{f.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:f,reason:R,force:!0})},M);return}}if(f.streamReader.cancel(new _util.AbortException(R.message)).catch(()=>{}),f.streamReader=null,!this._transport.destroyed){for(const[M,b]of this._intentStates)if(b===f){this._intentStates.delete(M);break}this.cleanup()}}}get stats(){return this._stats}}Qe=new WeakMap,ye=new WeakMap,Ue=new WeakSet,Ai=function(f=!1){if(Re(this,Fe,Ti).call(this),!he(this,ye)||this.destroyed)return!1;if(f)return Ne(this,Qe,setTimeout(()=>{Ne(this,Qe,null),Re(this,Ue,Ai).call(this,!1)},DELAYED_CLEANUP_TIMEOUT)),!1;for(const{renderTasks:R,operatorList:E}of this._intentStates.values())if(R.size>0||!E.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),Ne(this,ye,!1),!0},Fe=new WeakSet,Ti=function(){he(this,Qe)&&(clearTimeout(he(this,Qe)),Ne(this,Qe,null))},exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){De(this,se,new Set);De(this,i,Promise.resolve())}postMessage(f,R){const E={data:structuredClone(f,R?{transfer:R}:null)};he(this,i).then(()=>{for(const M of he(this,se))M.call(this,E)})}addEventListener(f,R){he(this,se).add(R)}removeEventListener(f,R){he(this,se).delete(R)}terminate(){he(this,se).clear()}}se=new WeakMap,i=new WeakMap,exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_util.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const y=(w=document==null?void 0:document.currentScript)==null?void 0:w.src;y&&(PDFWorkerUtil.fallbackWorkerSrc=y.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(y,f){let R;try{if(R=new URL(y),!R.origin||R.origin==="null")return!1}catch(M){return!1}const E=new URL(f,R);return R.origin===E.origin},PDFWorkerUtil.createCDNWrapper=function(y){const f=`importScripts("${y}");`;return URL.createObjectURL(new Blob([f]))}}const _PDFWorker=class _PDFWorker{constructor({name:y=null,port:f=null,verbosity:R=(0,_util.getVerbosityLevel)()}={}){var E;if(this.name=y,this.destroyed=!1,this.verbosity=R,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,f){if((E=he(_PDFWorker,P))!=null&&E.has(f))throw new Error("Cannot use more than one PDFWorker per port.");(he(_PDFWorker,P)||Ne(_PDFWorker,P,new WeakMap)).set(f,this),this._initializeFromPort(f);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(y){this._port=y,this._messageHandler=new _message_handler.MessageHandler("main","worker",y),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:y}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,y)||(y=PDFWorkerUtil.createCDNWrapper(new URL(y,window.location).href));const f=new Worker(y),R=new _message_handler.MessageHandler("main","worker",f),E=()=>{f.removeEventListener("error",M),R.destroy(),f.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},M=()=>{this._webWorker||E()};f.addEventListener("error",M),R.on("test",V=>{if(f.removeEventListener("error",M),this.destroyed){E();return}V?(this._messageHandler=R,this._port=f,this._webWorker=f,this._readyCapability.resolve(),R.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),R.destroy(),f.terminate())}),R.on("ready",V=>{if(f.removeEventListener("error",M),this.destroyed){E();return}try{b()}catch(l){this._setupFakeWorker()}});const b=()=>{const V=new Uint8Array;R.send("test",V,[V.buffer])};b();return}catch(f){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(y=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const f=new LoopbackPort;this._port=f;const R=`fake${PDFWorkerUtil.fakeWorkerId++}`,E=new _message_handler.MessageHandler(R+"_worker",R,f);y.setup(E,f);const M=new _message_handler.MessageHandler(R,R+"_worker",f);this._messageHandler=M,this._readyCapability.resolve(),M.send("configure",{verbosity:this.verbosity})}).catch(y=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${y.message}".`))})}destroy(){var y;this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),(y=he(_PDFWorker,P))==null||y.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(y){var R;if(!(y!=null&&y.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const f=(R=he(this,P))==null?void 0:R.get(y.port);if(f){if(f._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return f}return new _PDFWorker(y)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _util.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var y;try{return((y=globalThis.pdfjsWorker)==null?void 0:y.WorkerMessageHandler)||null}catch(f){return null}}static get _setupFakeWorkerGlobal(){const loader=()=>rt(this,null,function*(){const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_util.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return yield(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler});return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};P=new WeakMap,De(_PDFWorker,P,void 0);let PDFWorker=_PDFWorker;exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(f,R,E,M,b){De(this,j);De(this,e,new Map);De(this,t,new Map);De(this,o,new Map);De(this,K,null);this.messageHandler=f,this.loadingTask=R,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:M.ownerDocument,styleElement:M.styleElement}),this._params=M,this.canvasFactory=b.canvasFactory,this.filterFactory=b.filterFactory,this.cMapReaderFactory=b.cMapReaderFactory,this.standardFontDataFactory=b.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=E,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(f,R=_util.AnnotationMode.ENABLE,E=null,M=!1){let b=_util.RenderingIntentFlag.DISPLAY,V=_annotation_storage.SerializableEmpty;switch(f){case"any":b=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":b=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${f}`)}switch(R){case _util.AnnotationMode.DISABLE:b+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:b+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:b+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,V=(b&_util.RenderingIntentFlag.PRINT&&E instanceof _annotation_storage.PrintAnnotationStorage?E:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${R}`)}return M&&(b+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:b,cacheKey:`${b}_${V.hash}`,annotationStorageSerializable:V}}destroy(){var E;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,(E=he(this,K))==null||E.reject(new Error("Worker was destroyed during onPassword callback"));const f=[];for(const M of he(this,t).values())f.push(M._destroy());he(this,t).clear(),he(this,o).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const R=this.messageHandler.sendWithPromise("Terminate",null);return f.push(R),Promise.all(f).then(()=>{var M;this.commonObjs.clear(),this.fontLoader.clear(),he(this,e).clear(),this.filterFactory.destroy(),(M=this._networkStream)==null||M.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:f,loadingTask:R}=this;f.on("GetReader",(E,M)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=b=>{this._lastProgress={loaded:b.loaded,total:b.total}},M.onPull=()=>{this._fullReader.read().then(function({value:b,done:V}){if(V){M.close();return}(0,_util.assert)(b instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),M.enqueue(new Uint8Array(b),1,[b])}).catch(b=>{M.error(b)})},M.onCancel=b=>{this._fullReader.cancel(b),M.ready.catch(V=>{if(!this.destroyed)throw V})}}),f.on("ReaderHeadersReady",E=>{const M=new _util.PromiseCapability,b=this._fullReader;return b.headersReady.then(()=>{var V;(!b.isStreamingSupported||!b.isRangeSupported)&&(this._lastProgress&&((V=R.onProgress)==null||V.call(R,this._lastProgress)),b.onProgress=l=>{var x;(x=R.onProgress)==null||x.call(R,{loaded:l.loaded,total:l.total})}),M.resolve({isStreamingSupported:b.isStreamingSupported,isRangeSupported:b.isRangeSupported,contentLength:b.contentLength})},M.reject),M.promise}),f.on("GetRangeReader",(E,M)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const b=this._networkStream.getRangeReader(E.begin,E.end);if(!b){M.close();return}M.onPull=()=>{b.read().then(function({value:V,done:l}){if(l){M.close();return}(0,_util.assert)(V instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),M.enqueue(new Uint8Array(V),1,[V])}).catch(V=>{M.error(V)})},M.onCancel=V=>{b.cancel(V),M.ready.catch(l=>{if(!this.destroyed)throw l})}}),f.on("GetDoc",({pdfInfo:E})=>{this._numPages=E.numPages,this._htmlForXfa=E.htmlForXfa,delete E.htmlForXfa,R._capability.resolve(new PDFDocumentProxy(E,this))}),f.on("DocException",function(E){let M;switch(E.name){case"PasswordException":M=new _util.PasswordException(E.message,E.code);break;case"InvalidPDFException":M=new _util.InvalidPDFException(E.message);break;case"MissingPDFException":M=new _util.MissingPDFException(E.message);break;case"UnexpectedResponseException":M=new _util.UnexpectedResponseException(E.message,E.status);break;case"UnknownErrorException":M=new _util.UnknownErrorException(E.message,E.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}R._capability.reject(M)}),f.on("PasswordRequest",E=>{if(Ne(this,K,new _util.PromiseCapability),R.onPassword){const M=b=>{b instanceof Error?he(this,K).reject(b):he(this,K).resolve({password:b})};try{R.onPassword(M,E.code)}catch(b){he(this,K).reject(b)}}else he(this,K).reject(new _util.PasswordException(E.message,E.code));return he(this,K).promise}),f.on("DataLoaded",E=>{var M;(M=R.onProgress)==null||M.call(R,{loaded:E.length,total:E.length}),this.downloadInfoCapability.resolve(E)}),f.on("StartRenderPage",E=>{if(this.destroyed)return;he(this,t).get(E.pageIndex)._startRenderPage(E.transparency,E.cacheKey)}),f.on("commonobj",([E,M,b])=>{var V;if(!this.destroyed&&!this.commonObjs.has(E))switch(M){case"Font":const l=this._params;if("error"in b){const s=b.error;(0,_util.warn)(`Error during font loading: ${s}`),this.commonObjs.resolve(E,s);break}const x=l.pdfBug&&((V=globalThis.FontInspector)!=null&&V.enabled)?(s,h)=>globalThis.FontInspector.fontAdded(s,h):null,H=new _font_loader.FontFaceObject(b,{isEvalSupported:l.isEvalSupported,disableFontFace:l.disableFontFace,ignoreErrors:l.ignoreErrors,inspectFont:x});this.fontLoader.bind(H).catch(s=>f.sendWithPromise("FontFallback",{id:E})).finally(()=>{!l.fontExtraProperties&&H.data&&(H.data=null),this.commonObjs.resolve(E,H)});break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(E,b);break;default:throw new Error(`Got unknown common object type ${M}`)}}),f.on("obj",([E,M,b,V])=>{var x;if(this.destroyed)return;const l=he(this,t).get(M);if(!l.objs.has(E))switch(b){case"Image":if(l.objs.resolve(E,V),V){let H;if(V.bitmap){const{width:s,height:h}=V;H=s*h*4}else H=((x=V.data)==null?void 0:x.length)||0;H>_util.MAX_IMAGE_SIZE_TO_CACHE&&(l._maybeCleanupAfterRender=!0)}break;case"Pattern":l.objs.resolve(E,V);break;default:throw new Error(`Got unknown object type ${b}`)}}),f.on("DocProgress",E=>{var M;this.destroyed||(M=R.onProgress)==null||M.call(R,{loaded:E.loaded,total:E.total})}),f.on("FetchBuiltInCMap",E=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(E):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),f.on("FetchStandardFontData",E=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(E):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var E,M;this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:f,transfers:R}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:f,filename:(M=(E=this._fullReader)==null?void 0:E.filename)!=null?M:null},R).finally(()=>{this.annotationStorage.resetModified()})}getPage(f){if(!Number.isInteger(f)||f<=0||f>this._numPages)return Promise.reject(new Error("Invalid page request."));const R=f-1,E=he(this,o).get(R);if(E)return E;const M=this.messageHandler.sendWithPromise("GetPage",{pageIndex:R}).then(b=>{if(this.destroyed)throw new Error("Transport destroyed");const V=new PDFPageProxy(R,b,this,this._params.pdfBug);return he(this,t).set(R,V),V});return he(this,o).set(R,M),M}getPageIndex(f){return typeof f!="object"||f===null||!Number.isInteger(f.num)||f.num<0||!Number.isInteger(f.gen)||f.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:f.num,gen:f.gen})}getAnnotations(f,R){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:f,intent:R})}getFieldObjects(){return Re(this,j,Ki).call(this,"GetFieldObjects")}hasJSActions(){return Re(this,j,Ki).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(f){return typeof f!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:f})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return Re(this,j,Ki).call(this,"GetDocJSActions")}getPageJSActions(f){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:f})}getStructTree(f){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:f})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(f=>new _optional_content_config.OptionalContentConfig(f))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const f="GetMetadata",R=he(this,e).get(f);if(R)return R;const E=this.messageHandler.sendWithPromise(f,null).then(M=>{var b,V,l,x;return{info:M[0],metadata:M[1]?new _metadata.Metadata(M[1]):null,contentDispositionFilename:(V=(b=this._fullReader)==null?void 0:b.filename)!=null?V:null,contentLength:(x=(l=this._fullReader)==null?void 0:l.contentLength)!=null?x:null}});return he(this,e).set(f,E),E}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}startCleanup(f=!1){return rt(this,null,function*(){if(!this.destroyed){yield this.messageHandler.sendWithPromise("Cleanup",null);for(const R of he(this,t).values())if(!R.cleanup())throw new Error(`startCleanup: Page ${R.pageNumber} is currently rendering.`);this.commonObjs.clear(),f||this.fontLoader.clear(),he(this,e).clear(),this.filterFactory.destroy(!0)}})}get loadingParams(){const{disableAutoFetch:f,enableXfa:R}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:f,enableXfa:R})}}e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakSet,Ki=function(f,R=null){const E=he(this,e).get(f);if(E)return E;const M=this.messageHandler.sendWithPromise(f,R);return he(this,e).set(f,M),M};class PDFObjects{constructor(){De(this,d);De(this,O,Object.create(null))}get(f,R=null){if(R){const M=Re(this,d,yn).call(this,f);return M.capability.promise.then(()=>R(M.data)),null}const E=he(this,O)[f];if(!(E!=null&&E.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${f}.`);return E.data}has(f){const R=he(this,O)[f];return(R==null?void 0:R.capability.settled)||!1}resolve(f,R=null){const E=Re(this,d,yn).call(this,f);E.data=R,E.capability.resolve()}clear(){var f;for(const R in he(this,O)){const{data:E}=he(this,O)[R];(f=E==null?void 0:E.bitmap)==null||f.close()}Ne(this,O,Object.create(null))}}O=new WeakMap,d=new WeakSet,yn=function(f){var R;return(R=he(this,O))[f]||(R[f]={capability:new _util.PromiseCapability,data:null})};class RenderTask{constructor(f){De(this,n,null);Ne(this,n,f),this.onContinue=null}get promise(){return he(this,n).capability.promise}cancel(f=0){he(this,n).cancel(null,f)}get separateAnnots(){const{separateAnnots:f}=he(this,n).operatorList;if(!f)return!1;const{annotationCanvasMap:R}=he(this,n);return f.form||f.canvas&&(R==null?void 0:R.size)>0}}n=new WeakMap,exports.RenderTask=RenderTask;const k=class k{constructor({callback:f,params:R,objs:E,commonObjs:M,annotationCanvasMap:b,operatorList:V,pageIndex:l,canvasFactory:x,filterFactory:H,useRequestAnimationFrame:s=!1,pdfBug:h=!1,pageColors:F=null}){this.callback=f,this.params=R,this.objs=E,this.commonObjs=M,this.annotationCanvasMap=b,this.operatorListIdx=null,this.operatorList=V,this._pageIndex=l,this.canvasFactory=x,this.filterFactory=H,this._pdfBug=h,this.pageColors=F,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=s===!0&&typeof window!="undefined",this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=R.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:f=!1,optionalContentConfig:R}){var l,x;if(this.cancelled)return;if(this._canvas){if(he(k,I).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");he(k,I).add(this._canvas)}this._pdfBug&&((l=globalThis.StepperManager)!=null&&l.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:E,viewport:M,transform:b,background:V}=this.params;this.gfx=new _canvas.CanvasGraphics(E,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:R},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:b,viewport:M,transparency:f,background:V}),this.operatorListIdx=0,this.graphicsReady=!0,(x=this.graphicsReadyCallback)==null||x.call(this)}cancel(f=null,R=0){var E;this.running=!1,this.cancelled=!0,(E=this.gfx)==null||E.endDrawing(),he(k,I).delete(this._canvas),this.callback(f||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,R))}operatorListChanged(){var f;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(f=this.stepper)==null||f.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}_next(){return rt(this,null,function*(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),he(k,I).delete(this._canvas),this.callback())))})}};I=new WeakMap,De(k,I,new WeakSet);let InternalRenderTask=k;const version="3.11.174";exports.version=version;const build="ce8716743";exports.build=build},(it,qe,Qe)=>{var i,w,P,Aa,t;Object.defineProperty(qe,"__esModule",{value:!0}),qe.SerializableEmpty=qe.PrintAnnotationStorage=qe.AnnotationStorage=void 0;var ye=Qe(1),Ue=Qe(4),Xe=Qe(8);const Fe=Object.freeze({map:null,hash:"",transfers:void 0});qe.SerializableEmpty=Fe;class D{constructor(){De(this,P);De(this,i,!1);De(this,w,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(K,j){const C=he(this,w).get(K);return C===void 0?j:Object.assign(j,C)}getRawValue(K){return he(this,w).get(K)}remove(K){if(he(this,w).delete(K),he(this,w).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const j of he(this,w).values())if(j instanceof Ue.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(K,j){const C=he(this,w).get(K);let O=!1;if(C!==void 0)for(const[d,A]of Object.entries(j))C[d]!==A&&(O=!0,C[d]=A);else O=!0,he(this,w).set(K,j);O&&Re(this,P,Aa).call(this),j instanceof Ue.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(j.constructor._type)}has(K){return he(this,w).has(K)}getAll(){return he(this,w).size>0?(0,ye.objectFromMap)(he(this,w)):null}setAll(K){for(const[j,C]of Object.entries(K))this.setValue(j,C)}get size(){return he(this,w).size}resetModified(){he(this,i)&&(Ne(this,i,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new se(this)}get serializable(){if(he(this,w).size===0)return Fe;const K=new Map,j=new Xe.MurmurHash3_64,C=[],O=Object.create(null);let d=!1;for(const[A,n]of he(this,w)){const I=n instanceof Ue.AnnotationEditor?n.serialize(!1,O):n;I&&(K.set(A,I),j.update(`${A}:${JSON.stringify(I)}`),d||(d=!!I.bitmap))}if(d)for(const A of K.values())A.bitmap&&C.push(A.bitmap);return K.size>0?{map:K,hash:j.hexdigest(),transfers:C}:Fe}}i=new WeakMap,w=new WeakMap,P=new WeakSet,Aa=function(){he(this,i)||(Ne(this,i,!0),typeof this.onSetModified=="function"&&this.onSetModified())},qe.AnnotationStorage=D;class se extends D{constructor(j){super();De(this,t,void 0);const{map:C,hash:O,transfers:d}=j.serializable,A=structuredClone(C,d?{transfer:d}:null);Ne(this,t,{map:A,hash:O,transfers:d})}get print(){(0,ye.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return he(this,t)}}t=new WeakMap,qe.PrintAnnotationStorage=se},(it,qe,Qe)=>{var se,i,w,P,e,t,o,K,j,C,O,d,A,n,I,qn,y,Bn,R,wn,M,On,V,ga,x,pa,s,fa,F,Fn,U,xa;Object.defineProperty(qe,"__esModule",{value:!0}),qe.AnnotationEditor=void 0;var ye=Qe(5),Ue=Qe(1),Xe=Qe(6);const S=class S{constructor(r){De(this,I);De(this,y);De(this,M);De(this,V);De(this,x);De(this,s);De(this,F);De(this,U);De(this,se,"");De(this,i,!1);De(this,w,null);De(this,P,null);De(this,e,null);De(this,t,!1);De(this,o,null);De(this,K,this.focusin.bind(this));De(this,j,this.focusout.bind(this));De(this,C,!1);De(this,O,!1);De(this,d,!1);jt(this,"_initialOptions",Object.create(null));jt(this,"_uiManager",null);jt(this,"_focusEventsAllowed",!0);jt(this,"_l10nPromise",null);De(this,A,!1);De(this,n,S._zIndex++);this.constructor===S&&(0,Ue.unreachable)("Cannot initialize AnnotationEditor."),this.parent=r.parent,this.id=r.id,this.width=this.height=null,this.pageIndex=r.parent.pageIndex,this.name=r.name,this.div=null,this._uiManager=r.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=r.isCentered,this._structTreeParentId=null;const{rotation:p,rawDims:{pageWidth:c,pageHeight:u,pageX:q,pageY:J}}=this.parent.viewport;this.rotation=p,this.pageRotation=(360+p-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[c,u],this.pageTranslation=[q,J];const[G,W]=this.parentDimensions;this.x=r.x/G,this.y=r.y/W,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,Ue.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(r){const p=new D({id:r.parent.getNextId(),parent:r.parent,uiManager:r._uiManager});p.annotationElementId=r.annotationElementId,p.deleted=!0,p._uiManager.addToAnnotationStorage(p)}static initialize(r,p=null){if(S._l10nPromise||(S._l10nPromise=new Map(["editor_alt_text_button_label","editor_alt_text_edit_button_label","editor_alt_text_decorative_tooltip"].map(u=>[u,r.get(u)]))),p!=null&&p.strings)for(const u of p.strings)S._l10nPromise.set(u,r.get(u));if(S._borderLineWidth!==-1)return;const c=getComputedStyle(document.documentElement);S._borderLineWidth=parseFloat(c.getPropertyValue("--outline-width"))||0}static updateDefaultParams(r,p){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(r){return!1}static paste(r,p){(0,Ue.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return he(this,A)}set _isDraggable(r){var p;Ne(this,A,r),(p=this.div)==null||p.classList.toggle("draggable",r)}center(){const[r,p]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*p/(r*2),this.y+=this.width*r/(p*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*p/(r*2),this.y-=this.width*r/(p*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(r){this._uiManager.addCommands(r)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=he(this,n)}setParent(r){r!==null&&(this.pageIndex=r.pageIndex,this.pageDimensions=r.pageDimensions),this.parent=r}focusin(r){this._focusEventsAllowed&&(he(this,C)?Ne(this,C,!1):this.parent.setSelected(this))}focusout(r){var c;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const p=r.relatedTarget;p!=null&&p.closest(`#${this.id}`)||(r.preventDefault(),(c=this.parent)!=null&&c.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(r,p,c,u){const[q,J]=this.parentDimensions;[c,u]=this.screenToPageTranslation(c,u),this.x=(r+c)/q,this.y=(p+u)/J,this.fixAndSetPosition()}translate(r,p){Re(this,I,qn).call(this,this.parentDimensions,r,p)}translateInPage(r,p){Re(this,I,qn).call(this,this.pageDimensions,r,p),this.div.scrollIntoView({block:"nearest"})}drag(r,p){const[c,u]=this.parentDimensions;if(this.x+=r/c,this.y+=p/u,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:ce,y:_}=this.div.getBoundingClientRect();this.parent.findNewParent(this,ce,_)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:q,y:J}=this;const[G,W]=Re(this,y,Bn).call(this);q+=G,J+=W,this.div.style.left=`${(100*q).toFixed(2)}%`,this.div.style.top=`${(100*J).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}fixAndSetPosition(){const[r,p]=this.pageDimensions;let{x:c,y:u,width:q,height:J}=this;switch(q*=r,J*=p,c*=r,u*=p,this.rotation){case 0:c=Math.max(0,Math.min(r-q,c)),u=Math.max(0,Math.min(p-J,u));break;case 90:c=Math.max(0,Math.min(r-J,c)),u=Math.min(p,Math.max(q,u));break;case 180:c=Math.min(r,Math.max(q,c)),u=Math.min(p,Math.max(J,u));break;case 270:c=Math.min(r,Math.max(J,c)),u=Math.max(0,Math.min(p-q,u));break}this.x=c/=r,this.y=u/=p;const[G,W]=Re(this,y,Bn).call(this);c+=G,u+=W;const{style:ce}=this.div;ce.left=`${(100*c).toFixed(2)}%`,ce.top=`${(100*u).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(r,p){var c;return Re(c=S,R,wn).call(c,r,p,this.parentRotation)}pageTranslationToScreen(r,p){var c;return Re(c=S,R,wn).call(c,r,p,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:r,pageDimensions:[p,c]}=this,u=p*r,q=c*r;return Ue.FeatureTest.isCSSRoundSupported?[Math.round(u),Math.round(q)]:[u,q]}setDims(r,p){var q;const[c,u]=this.parentDimensions;this.div.style.width=`${(100*r/c).toFixed(2)}%`,he(this,t)||(this.div.style.height=`${(100*p/u).toFixed(2)}%`),(q=he(this,w))==null||q.classList.toggle("small",r<S.SMALL_EDITOR_SIZE||p<S.SMALL_EDITOR_SIZE)}fixDims(){const{style:r}=this.div,{height:p,width:c}=r,u=c.endsWith("%"),q=!he(this,t)&&p.endsWith("%");if(u&&q)return;const[J,G]=this.parentDimensions;u||(r.width=`${(100*parseFloat(c)/J).toFixed(2)}%`),!he(this,t)&&!q&&(r.height=`${(100*parseFloat(p)/G).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}addAltTextButton(){return rt(this,null,function*(){if(he(this,w))return;const r=Ne(this,w,document.createElement("button"));r.className="altText";const p=yield S._l10nPromise.get("editor_alt_text_button_label");r.textContent=p,r.setAttribute("aria-label",p),r.tabIndex="0",r.addEventListener("contextmenu",Xe.noContextMenu),r.addEventListener("pointerdown",c=>c.stopPropagation()),r.addEventListener("click",c=>{c.preventDefault(),this._uiManager.editAltText(this)},{capture:!0}),r.addEventListener("keydown",c=>{c.target===r&&c.key==="Enter"&&(c.preventDefault(),this._uiManager.editAltText(this))}),Re(this,F,Fn).call(this),this.div.append(r),S.SMALL_EDITOR_SIZE||(S.SMALL_EDITOR_SIZE=Math.min(128,Math.round(r.getBoundingClientRect().width*1.4)))})}getClientDimensions(){return this.div.getBoundingClientRect()}get altTextData(){return{altText:he(this,se),decorative:he(this,i)}}set altTextData({altText:r,decorative:p}){he(this,se)===r&&he(this,i)===p||(Ne(this,se,r),Ne(this,i,p),Re(this,F,Fn).call(this))}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",he(this,K)),this.div.addEventListener("focusout",he(this,j));const[r,p]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*p/r).toFixed(2)}%`,this.div.style.maxHeight=`${(100*r/p).toFixed(2)}%`);const[c,u]=this.getInitialTranslation();return this.translate(c,u),(0,ye.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(r){const{isMac:p}=Ue.FeatureTest.platform;if(r.button!==0||r.ctrlKey&&p){r.preventDefault();return}Ne(this,C,!0),Re(this,U,xa).call(this,r)}moveInDOM(){var r;(r=this.parent)==null||r.moveEditorInDOM(this)}_setParentAndPosition(r,p,c){r.changeParent(this),this.x=p,this.y=c,this.fixAndSetPosition()}getRect(r,p){const c=this.parentScale,[u,q]=this.pageDimensions,[J,G]=this.pageTranslation,W=r/c,ce=p/c,_=this.x*u,ie=this.y*q,L=this.width*u,oe=this.height*q;switch(this.rotation){case 0:return[_+W+J,q-ie-ce-oe+G,_+W+L+J,q-ie-ce+G];case 90:return[_+ce+J,q-ie+W+G,_+ce+oe+J,q-ie+W+L+G];case 180:return[_-W-L+J,q-ie+ce+G,_-W+J,q-ie+ce+oe+G];case 270:return[_-ce-oe+J,q-ie-W-L+G,_-ce+J,q-ie-W+G];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(r,p){const[c,u,q,J]=r,G=q-c,W=J-u;switch(this.rotation){case 0:return[c,p-J,G,W];case 90:return[c,p-u,W,G];case 180:return[q,p-u,G,W];case 270:return[q,p-J,W,G];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){Ne(this,d,!0)}disableEditMode(){Ne(this,d,!1)}isInEditMode(){return he(this,d)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var r,p;(r=this.div)==null||r.addEventListener("focusin",he(this,K)),(p=this.div)==null||p.addEventListener("focusout",he(this,j))}serialize(r=!1,p=null){(0,Ue.unreachable)("An editor must be serializable")}static deserialize(r,p,c){const u=new this.prototype.constructor({parent:p,id:p.getNextId(),uiManager:c});u.rotation=r.rotation;const[q,J]=u.pageDimensions,[G,W,ce,_]=u.getRectInCurrentCoords(r.rect,J);return u.x=G/q,u.y=W/J,u.width=ce/q,u.height=_/J,u}remove(){var r;this.div.removeEventListener("focusin",he(this,K)),this.div.removeEventListener("focusout",he(this,j)),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),(r=he(this,w))==null||r.remove(),Ne(this,w,null),Ne(this,P,null)}get isResizable(){return!1}makeResizable(){this.isResizable&&(Re(this,V,ga).call(this),he(this,o).classList.remove("hidden"))}select(){var r;this.makeResizable(),(r=this.div)==null||r.classList.add("selectedEditor")}unselect(){var r,p,c;(r=he(this,o))==null||r.classList.add("hidden"),(p=this.div)==null||p.classList.remove("selectedEditor"),(c=this.div)!=null&&c.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus()}updateParams(r,p){}disableEditing(){he(this,w)&&(he(this,w).hidden=!0)}enableEditing(){he(this,w)&&(he(this,w).hidden=!1)}enterInEditMode(){}get contentDiv(){return this.div}get isEditing(){return he(this,O)}set isEditing(r){Ne(this,O,r),this.parent&&(r?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(r,p){Ne(this,t,!0);const c=r/p,{style:u}=this.div;u.aspectRatio=c,u.height="auto"}static get MIN_SIZE(){return 16}};se=new WeakMap,i=new WeakMap,w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakMap,O=new WeakMap,d=new WeakMap,A=new WeakMap,n=new WeakMap,I=new WeakSet,qn=function([r,p],c,u){[c,u]=this.screenToPageTranslation(c,u),this.x+=c/r,this.y+=u/p,this.fixAndSetPosition()},y=new WeakSet,Bn=function(){const[r,p]=this.parentDimensions,{_borderLineWidth:c}=S,u=c/r,q=c/p;switch(this.rotation){case 90:return[-u,q];case 180:return[u,q];case 270:return[u,-q];default:return[-u,-q]}},R=new WeakSet,wn=function(r,p,c){switch(c){case 90:return[p,-r];case 180:return[-r,-p];case 270:return[-p,r];default:return[r,p]}},M=new WeakSet,On=function(r){switch(r){case 90:{const[p,c]=this.pageDimensions;return[0,-p/c,c/p,0]}case 180:return[-1,0,0,-1];case 270:{const[p,c]=this.pageDimensions;return[0,p/c,-c/p,0]}default:return[1,0,0,1]}},V=new WeakSet,ga=function(){if(he(this,o))return;Ne(this,o,document.createElement("div")),he(this,o).classList.add("resizers");const r=["topLeft","topRight","bottomRight","bottomLeft"];this._willKeepAspectRatio||r.push("topMiddle","middleRight","bottomMiddle","middleLeft");for(const p of r){const c=document.createElement("div");he(this,o).append(c),c.classList.add("resizer",p),c.addEventListener("pointerdown",Re(this,x,pa).bind(this,p)),c.addEventListener("contextmenu",Xe.noContextMenu)}this.div.prepend(he(this,o))},x=new WeakSet,pa=function(r,p){p.preventDefault();const{isMac:c}=Ue.FeatureTest.platform;if(p.button!==0||p.ctrlKey&&c)return;const u=Re(this,s,fa).bind(this,r),q=this._isDraggable;this._isDraggable=!1;const J={passive:!0,capture:!0};window.addEventListener("pointermove",u,J);const G=this.x,W=this.y,ce=this.width,_=this.height,ie=this.parent.div.style.cursor,L=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(p.target).cursor;const oe=()=>{this._isDraggable=q,window.removeEventListener("pointerup",oe),window.removeEventListener("blur",oe),window.removeEventListener("pointermove",u,J),this.parent.div.style.cursor=ie,this.div.style.cursor=L;const T=this.x,Q=this.y,v=this.width,$=this.height;T===G&&Q===W&&v===ce&&$===_||this.addCommands({cmd:()=>{this.width=v,this.height=$,this.x=T,this.y=Q;const[Z,te]=this.parentDimensions;this.setDims(Z*v,te*$),this.fixAndSetPosition()},undo:()=>{this.width=ce,this.height=_,this.x=G,this.y=W;const[Z,te]=this.parentDimensions;this.setDims(Z*ce,te*_),this.fixAndSetPosition()},mustExec:!0})};window.addEventListener("pointerup",oe),window.addEventListener("blur",oe)},s=new WeakSet,fa=function(r,p){const[c,u]=this.parentDimensions,q=this.x,J=this.y,G=this.width,W=this.height,ce=S.MIN_SIZE/c,_=S.MIN_SIZE/u,ie=we=>Math.round(we*1e4)/1e4,L=Re(this,M,On).call(this,this.rotation),oe=(we,Oe)=>[L[0]*we+L[2]*Oe,L[1]*we+L[3]*Oe],T=Re(this,M,On).call(this,360-this.rotation),Q=(we,Oe)=>[T[0]*we+T[2]*Oe,T[1]*we+T[3]*Oe];let v,$,Z=!1,te=!1;switch(r){case"topLeft":Z=!0,v=(we,Oe)=>[0,0],$=(we,Oe)=>[we,Oe];break;case"topMiddle":v=(we,Oe)=>[we/2,0],$=(we,Oe)=>[we/2,Oe];break;case"topRight":Z=!0,v=(we,Oe)=>[we,0],$=(we,Oe)=>[0,Oe];break;case"middleRight":te=!0,v=(we,Oe)=>[we,Oe/2],$=(we,Oe)=>[0,Oe/2];break;case"bottomRight":Z=!0,v=(we,Oe)=>[we,Oe],$=(we,Oe)=>[0,0];break;case"bottomMiddle":v=(we,Oe)=>[we/2,Oe],$=(we,Oe)=>[we/2,0];break;case"bottomLeft":Z=!0,v=(we,Oe)=>[0,Oe],$=(we,Oe)=>[we,0];break;case"middleLeft":te=!0,v=(we,Oe)=>[0,Oe/2],$=(we,Oe)=>[we,Oe/2];break}const ne=v(G,W),X=$(G,W);let re=oe(...X);const ae=ie(q+re[0]),z=ie(J+re[1]);let le=1,ue=1,[ge,ke]=this.screenToPageTranslation(p.movementX,p.movementY);if([ge,ke]=Q(ge/c,ke/u),Z){const we=Math.hypot(G,W);le=ue=Math.max(Math.min(Math.hypot(X[0]-ne[0]-ge,X[1]-ne[1]-ke)/we,1/G,1/W),ce/G,_/W)}else te?le=Math.max(ce,Math.min(1,Math.abs(X[0]-ne[0]-ge)))/G:ue=Math.max(_,Math.min(1,Math.abs(X[1]-ne[1]-ke)))/W;const me=ie(G*le),fe=ie(W*ue);re=oe(...$(me,fe));const xe=ae-re[0],pe=z-re[1];this.width=me,this.height=fe,this.x=xe,this.y=pe,this.setDims(c*me,u*fe),this.fixAndSetPosition()},F=new WeakSet,Fn=function(){return rt(this,null,function*(){var c;const r=he(this,w);if(!r)return;if(!he(this,se)&&!he(this,i)){r.classList.remove("done"),(c=he(this,P))==null||c.remove();return}S._l10nPromise.get("editor_alt_text_edit_button_label").then(u=>{r.setAttribute("aria-label",u)});let p=he(this,P);if(!p){Ne(this,P,p=document.createElement("span")),p.className="tooltip",p.setAttribute("role","tooltip");const u=p.id=`alt-text-tooltip-${this.id}`;r.setAttribute("aria-describedby",u);const q=100;r.addEventListener("mouseenter",()=>{Ne(this,e,setTimeout(()=>{Ne(this,e,null),he(this,P).classList.add("show"),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"alt_text_tooltip"}}})},q))}),r.addEventListener("mouseleave",()=>{var J;clearTimeout(he(this,e)),Ne(this,e,null),(J=he(this,P))==null||J.classList.remove("show")})}r.classList.add("done"),p.innerText=he(this,i)?yield S._l10nPromise.get("editor_alt_text_decorative_tooltip"):he(this,se),p.parentNode||r.append(p)})},U=new WeakSet,xa=function(r){if(!this._isDraggable)return;const p=this._uiManager.isSelected(this);this._uiManager.setUpDragSession();let c,u;p&&(c={passive:!0,capture:!0},u=J=>{const[G,W]=this.screenToPageTranslation(J.movementX,J.movementY);this._uiManager.dragSelectedEditors(G,W)},window.addEventListener("pointermove",u,c));const q=()=>{if(window.removeEventListener("pointerup",q),window.removeEventListener("blur",q),p&&window.removeEventListener("pointermove",u,c),Ne(this,C,!1),!this._uiManager.endDragSession()){const{isMac:J}=Ue.FeatureTest.platform;r.ctrlKey&&!J||r.shiftKey||r.metaKey&&J?this.parent.toggleSelected(this):this.parent.setSelected(this)}};window.addEventListener("pointerup",q),window.addEventListener("blur",q)},De(S,R),jt(S,"_borderLineWidth",-1),jt(S,"_colorManager",new ye.ColorManager),jt(S,"_zIndex",1),jt(S,"SMALL_EDITOR_SIZE",0);let Fe=S;qe.AnnotationEditor=Fe;class D extends Fe{constructor(r){super(r),this.annotationElementId=r.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},(it,qe,Qe)=>{var t,o,K,j,C,Vn,A,n,I,k,y,Sa,E,M,b,V,l,x,H,s,h,F,N,U,g,S,m,r,p,c,u,q,J,G,W,ce,_,ie,L,oe,T,Q,v,$,Z,te,ne,ma,re,Cn,z,Dn,ue,Ni,ke,Un,fe,Rn,pe,ti,Oe,Oi,Ce,ka,Se,ba,Ve,En,Ye,Fi,Ee,Pn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.KeyboardManager=qe.CommandManager=qe.ColorManager=qe.AnnotationEditorUIManager=void 0,qe.bindEvents=Xe,qe.opacityToHex=Fe;var ye=Qe(1),Ue=Qe(6);function Xe(Ie,de,be){for(const Be of be)de.addEventListener(Be,Ie[Be].bind(Ie))}function Fe(Ie){return Math.round(Math.min(255,Math.max(1,255*Ie))).toString(16).padStart(2,"0")}class D{constructor(){De(this,t,0)}getId(){return`${ye.AnnotationEditorPrefix}${wi(this,t)._++}`}}t=new WeakMap;const d=class d{constructor(){De(this,C);De(this,o,(0,ye.getUuid)());De(this,K,0);De(this,j,null)}static get _isSVGFittingCanvas(){const de='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',Be=new OffscreenCanvas(1,3).getContext("2d"),Pe=new Image;Pe.src=de;const je=Pe.decode().then(()=>(Be.drawImage(Pe,0,0,1,1,0,0,1,3),new Uint32Array(Be.getImageData(0,0,1,1).data.buffer)[0]===0));return(0,ye.shadow)(this,"_isSVGFittingCanvas",je)}getFromFile(de){return rt(this,null,function*(){const{lastModified:be,name:Be,size:Pe,type:je}=de;return Re(this,C,Vn).call(this,`${be}_${Be}_${Pe}_${je}`,de)})}getFromUrl(de){return rt(this,null,function*(){return Re(this,C,Vn).call(this,de,de)})}getFromId(de){return rt(this,null,function*(){he(this,j)||Ne(this,j,new Map);const be=he(this,j).get(de);return be?be.bitmap?(be.refCounter+=1,be):be.file?this.getFromFile(be.file):this.getFromUrl(be.url):null})}getSvgUrl(de){const be=he(this,j).get(de);return be!=null&&be.isSvg?be.svgUrl:null}deleteId(de){he(this,j)||Ne(this,j,new Map);const be=he(this,j).get(de);be&&(be.refCounter-=1,be.refCounter===0&&(be.bitmap=null))}isValidId(de){return de.startsWith(`image_${he(this,o)}_`)}};o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakSet,Vn=function(de,be){return rt(this,null,function*(){he(this,j)||Ne(this,j,new Map);let Be=he(this,j).get(de);if(Be===null)return null;if(Be!=null&&Be.bitmap)return Be.refCounter+=1,Be;try{Be||(Be={bitmap:null,id:`image_${he(this,o)}_${wi(this,K)._++}`,refCounter:0,isSvg:!1});let Pe;if(typeof be=="string"){Be.url=be;const je=yield fetch(be);if(!je.ok)throw new Error(je.statusText);Pe=yield je.blob()}else Pe=Be.file=be;if(Pe.type==="image/svg+xml"){const je=d._isSVGFittingCanvas,Je=new FileReader,$e=new Image,ve=new Promise((We,tt)=>{$e.onload=()=>{Be.bitmap=$e,Be.isSvg=!0,We()},Je.onload=()=>rt(this,null,function*(){const at=Be.svgUrl=Je.result;$e.src=(yield je)?`${at}#svgView(preserveAspectRatio(none))`:at}),$e.onerror=Je.onerror=tt});Je.readAsDataURL(Pe),yield ve}else Be.bitmap=yield createImageBitmap(Pe);Be.refCounter=1}catch(Pe){console.error(Pe),Be=null}return he(this,j).set(de,Be),Be&&he(this,j).set(Be.id,Be),Be})};let se=d;class i{constructor(de=128){De(this,A,[]);De(this,n,!1);De(this,I,void 0);De(this,k,-1);Ne(this,I,de)}add({cmd:de,undo:be,mustExec:Be,type:Pe=NaN,overwriteIfSameType:je=!1,keepUndo:Je=!1}){if(Be&&de(),he(this,n))return;const $e={cmd:de,undo:be,type:Pe};if(he(this,k)===-1){he(this,A).length>0&&(he(this,A).length=0),Ne(this,k,0),he(this,A).push($e);return}if(je&&he(this,A)[he(this,k)].type===Pe){Je&&($e.undo=he(this,A)[he(this,k)].undo),he(this,A)[he(this,k)]=$e;return}const ve=he(this,k)+1;ve===he(this,I)?he(this,A).splice(0,1):(Ne(this,k,ve),ve<he(this,A).length&&he(this,A).splice(ve)),he(this,A).push($e)}undo(){he(this,k)!==-1&&(Ne(this,n,!0),he(this,A)[he(this,k)].undo(),Ne(this,n,!1),Ne(this,k,he(this,k)-1))}redo(){he(this,k)<he(this,A).length-1&&(Ne(this,k,he(this,k)+1),Ne(this,n,!0),he(this,A)[he(this,k)].cmd(),Ne(this,n,!1))}hasSomethingToUndo(){return he(this,k)!==-1}hasSomethingToRedo(){return he(this,k)<he(this,A).length-1}destroy(){Ne(this,A,null)}}A=new WeakMap,n=new WeakMap,I=new WeakMap,k=new WeakMap,qe.CommandManager=i;class w{constructor(de){De(this,y);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:be}=ye.FeatureTest.platform;for(const[Be,Pe,je={}]of de)for(const Je of Be){const $e=Je.startsWith("mac+");be&&$e?(this.callbacks.set(Je.slice(4),{callback:Pe,options:je}),this.allKeys.add(Je.split("+").at(-1))):!be&&!$e&&(this.callbacks.set(Je,{callback:Pe,options:je}),this.allKeys.add(Je.split("+").at(-1)))}}exec(de,be){if(!this.allKeys.has(be.key))return;const Be=this.callbacks.get(Re(this,y,Sa).call(this,be));if(!Be)return;const{callback:Pe,options:{bubbles:je=!1,args:Je=[],checker:$e=null}}=Be;$e&&!$e(de,be)||(Pe.bind(de,...Je)(),je||(be.stopPropagation(),be.preventDefault()))}}y=new WeakSet,Sa=function(de){de.altKey&&this.buffer.push("alt"),de.ctrlKey&&this.buffer.push("ctrl"),de.metaKey&&this.buffer.push("meta"),de.shiftKey&&this.buffer.push("shift"),this.buffer.push(de.key);const be=this.buffer.join("+");return this.buffer.length=0,be},qe.KeyboardManager=w;const R=class R{get _colors(){const de=new Map([["CanvasText",null],["Canvas",null]]);return(0,Ue.getColorValues)(de),(0,ye.shadow)(this,"_colors",de)}convert(de){const be=(0,Ue.getRGB)(de);if(!window.matchMedia("(forced-colors: active)").matches)return be;for(const[Be,Pe]of this._colors)if(Pe.every((je,Je)=>je===be[Je]))return R._colorsMapping.get(Be);return be}getHexCode(de){const be=this._colors.get(de);return be?ye.Util.makeHexColor(...be):de}};jt(R,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let P=R;qe.ColorManager=P;const _e=class _e{constructor(de,be,Be,Pe,je,Je){De(this,ne);De(this,re);De(this,z);De(this,ue);De(this,ke);De(this,fe);De(this,pe);De(this,Oe);De(this,Ce);De(this,Se);De(this,Ve);De(this,Ye);De(this,Ee);De(this,E,null);De(this,M,new Map);De(this,b,new Map);De(this,V,null);De(this,l,null);De(this,x,new i);De(this,H,0);De(this,s,new Set);De(this,h,null);De(this,F,null);De(this,N,new Set);De(this,U,null);De(this,g,new D);De(this,S,!1);De(this,m,!1);De(this,r,null);De(this,p,ye.AnnotationEditorType.NONE);De(this,c,new Set);De(this,u,null);De(this,q,this.blur.bind(this));De(this,J,this.focus.bind(this));De(this,G,this.copy.bind(this));De(this,W,this.cut.bind(this));De(this,ce,this.paste.bind(this));De(this,_,this.keydown.bind(this));De(this,ie,this.onEditingAction.bind(this));De(this,L,this.onPageChanging.bind(this));De(this,oe,this.onScaleChanging.bind(this));De(this,T,this.onRotationChanging.bind(this));De(this,Q,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});De(this,v,[0,0]);De(this,$,null);De(this,Z,null);De(this,te,null);Ne(this,Z,de),Ne(this,te,be),Ne(this,V,Be),this._eventBus=Pe,this._eventBus._on("editingaction",he(this,ie)),this._eventBus._on("pagechanging",he(this,L)),this._eventBus._on("scalechanging",he(this,oe)),this._eventBus._on("rotationchanging",he(this,T)),Ne(this,l,je.annotationStorage),Ne(this,U,je.filterFactory),Ne(this,u,Je),this.viewParameters={realScale:Ue.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}static get _keyboardManager(){const de=_e.prototype,be=je=>{const{activeElement:Je}=document;return Je&&he(je,Z).contains(Je)&&je.hasSomethingToControl()},Be=this.TRANSLATE_SMALL,Pe=this.TRANSLATE_BIG;return(0,ye.shadow)(this,"_keyboardManager",new w([[["ctrl+a","mac+meta+a"],de.selectAll],[["ctrl+z","mac+meta+z"],de.undo],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],de.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],de.delete],[["Escape","mac+Escape"],de.unselectAll],[["ArrowLeft","mac+ArrowLeft"],de.translateSelectedEditors,{args:[-Be,0],checker:be}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],de.translateSelectedEditors,{args:[-Pe,0],checker:be}],[["ArrowRight","mac+ArrowRight"],de.translateSelectedEditors,{args:[Be,0],checker:be}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],de.translateSelectedEditors,{args:[Pe,0],checker:be}],[["ArrowUp","mac+ArrowUp"],de.translateSelectedEditors,{args:[0,-Be],checker:be}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],de.translateSelectedEditors,{args:[0,-Pe],checker:be}],[["ArrowDown","mac+ArrowDown"],de.translateSelectedEditors,{args:[0,Be],checker:be}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],de.translateSelectedEditors,{args:[0,Pe],checker:be}]]))}destroy(){Re(this,ue,Ni).call(this),Re(this,re,Cn).call(this),this._eventBus._off("editingaction",he(this,ie)),this._eventBus._off("pagechanging",he(this,L)),this._eventBus._off("scalechanging",he(this,oe)),this._eventBus._off("rotationchanging",he(this,T));for(const de of he(this,b).values())de.destroy();he(this,b).clear(),he(this,M).clear(),he(this,N).clear(),Ne(this,E,null),he(this,c).clear(),he(this,x).destroy(),he(this,V).destroy()}get hcmFilter(){return(0,ye.shadow)(this,"hcmFilter",he(this,u)?he(this,U).addHCMFilter(he(this,u).foreground,he(this,u).background):"none")}get direction(){return(0,ye.shadow)(this,"direction",getComputedStyle(he(this,Z)).direction)}editAltText(de){var be;(be=he(this,V))==null||be.editAltText(this,de)}onPageChanging({pageNumber:de}){Ne(this,H,de-1)}focusMainContainer(){he(this,Z).focus()}findParent(de,be){for(const Be of he(this,b).values()){const{x:Pe,y:je,width:Je,height:$e}=Be.div.getBoundingClientRect();if(de>=Pe&&de<=Pe+Je&&be>=je&&be<=je+$e)return Be}return null}disableUserSelect(de=!1){he(this,te).classList.toggle("noUserSelect",de)}addShouldRescale(de){he(this,N).add(de)}removeShouldRescale(de){he(this,N).delete(de)}onScaleChanging({scale:de}){this.commitOrRemove(),this.viewParameters.realScale=de*Ue.PixelsPerInch.PDF_TO_CSS_UNITS;for(const be of he(this,N))be.onScaleChanging()}onRotationChanging({pagesRotation:de}){this.commitOrRemove(),this.viewParameters.rotation=de}addToAnnotationStorage(de){!de.isEmpty()&&he(this,l)&&!he(this,l).has(de.id)&&he(this,l).setValue(de.id,de)}blur(){if(!this.hasSelection)return;const{activeElement:de}=document;for(const be of he(this,c))if(be.div.contains(de)){Ne(this,r,[be,de]),be._focusEventsAllowed=!1;break}}focus(){if(!he(this,r))return;const[de,be]=he(this,r);Ne(this,r,null),be.addEventListener("focusin",()=>{de._focusEventsAllowed=!0},{once:!0}),be.focus()}addEditListeners(){Re(this,z,Dn).call(this),Re(this,ke,Un).call(this)}removeEditListeners(){Re(this,ue,Ni).call(this),Re(this,fe,Rn).call(this)}copy(de){var Be;if(de.preventDefault(),(Be=he(this,E))==null||Be.commitOrRemove(),!this.hasSelection)return;const be=[];for(const Pe of he(this,c)){const je=Pe.serialize(!0);je&&be.push(je)}be.length!==0&&de.clipboardData.setData("application/pdfjs",JSON.stringify(be))}cut(de){this.copy(de),this.delete()}paste(de){de.preventDefault();const{clipboardData:be}=de;for(const je of be.items)for(const Je of he(this,F))if(Je.isHandlingMimeForPasting(je.type)){Je.paste(je,this.currentLayer);return}let Be=be.getData("application/pdfjs");if(!Be)return;try{Be=JSON.parse(Be)}catch(je){(0,ye.warn)(`paste: "${je.message}".`);return}if(!Array.isArray(Be))return;this.unselectAll();const Pe=this.currentLayer;try{const je=[];for(const ve of Be){const We=Pe.deserialize(ve);if(!We)return;je.push(We)}const Je=()=>{for(const ve of je)Re(this,Ve,En).call(this,ve);Re(this,Ee,Pn).call(this,je)},$e=()=>{for(const ve of je)ve.remove()};this.addCommands({cmd:Je,undo:$e,mustExec:!0})}catch(je){(0,ye.warn)(`paste: "${je.message}".`)}}keydown(de){var be;(be=this.getActive())!=null&&be.shouldGetKeyboardEvents()||_e._keyboardManager.exec(this,de)}onEditingAction(de){["undo","redo","delete","selectAll"].includes(de.name)&&this[de.name]()}setEditingState(de){de?(Re(this,ne,ma).call(this),Re(this,z,Dn).call(this),Re(this,ke,Un).call(this),Re(this,pe,ti).call(this,{isEditing:he(this,p)!==ye.AnnotationEditorType.NONE,isEmpty:Re(this,Ye,Fi).call(this),hasSomethingToUndo:he(this,x).hasSomethingToUndo(),hasSomethingToRedo:he(this,x).hasSomethingToRedo(),hasSelectedEditor:!1})):(Re(this,re,Cn).call(this),Re(this,ue,Ni).call(this),Re(this,fe,Rn).call(this),Re(this,pe,ti).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(de){if(!he(this,F)){Ne(this,F,de);for(const be of he(this,F))Re(this,Oe,Oi).call(this,be.defaultPropertiesToUpdate)}}getId(){return he(this,g).getId()}get currentLayer(){return he(this,b).get(he(this,H))}getLayer(de){return he(this,b).get(de)}get currentPageIndex(){return he(this,H)}addLayer(de){he(this,b).set(de.pageIndex,de),he(this,S)?de.enable():de.disable()}removeLayer(de){he(this,b).delete(de.pageIndex)}updateMode(de,be=null){if(he(this,p)!==de){if(Ne(this,p,de),de===ye.AnnotationEditorType.NONE){this.setEditingState(!1),Re(this,Se,ba).call(this);return}this.setEditingState(!0),Re(this,Ce,ka).call(this),this.unselectAll();for(const Be of he(this,b).values())Be.updateMode(de);if(be){for(const Be of he(this,M).values())if(Be.annotationElementId===be){this.setSelected(Be),Be.enterInEditMode();break}}}}updateToolbar(de){de!==he(this,p)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:de})}updateParams(de,be){if(he(this,F)){if(de===ye.AnnotationEditorParamsType.CREATE){this.currentLayer.addNewEditor(de);return}for(const Be of he(this,c))Be.updateParams(de,be);for(const Be of he(this,F))Be.updateDefaultParams(de,be)}}enableWaiting(de=!1){if(he(this,m)!==de){Ne(this,m,de);for(const be of he(this,b).values())de?be.disableClick():be.enableClick(),be.div.classList.toggle("waiting",de)}}getEditors(de){const be=[];for(const Be of he(this,M).values())Be.pageIndex===de&&be.push(Be);return be}getEditor(de){return he(this,M).get(de)}addEditor(de){he(this,M).set(de.id,de)}removeEditor(de){var be;he(this,M).delete(de.id),this.unselect(de),(!de.annotationElementId||!he(this,s).has(de.annotationElementId))&&((be=he(this,l))==null||be.remove(de.id))}addDeletedAnnotationElement(de){he(this,s).add(de.annotationElementId),de.deleted=!0}isDeletedAnnotationElement(de){return he(this,s).has(de)}removeDeletedAnnotationElement(de){he(this,s).delete(de.annotationElementId),de.deleted=!1}setActiveEditor(de){he(this,E)!==de&&(Ne(this,E,de),de&&Re(this,Oe,Oi).call(this,de.propertiesToUpdate))}toggleSelected(de){if(he(this,c).has(de)){he(this,c).delete(de),de.unselect(),Re(this,pe,ti).call(this,{hasSelectedEditor:this.hasSelection});return}he(this,c).add(de),de.select(),Re(this,Oe,Oi).call(this,de.propertiesToUpdate),Re(this,pe,ti).call(this,{hasSelectedEditor:!0})}setSelected(de){for(const be of he(this,c))be!==de&&be.unselect();he(this,c).clear(),he(this,c).add(de),de.select(),Re(this,Oe,Oi).call(this,de.propertiesToUpdate),Re(this,pe,ti).call(this,{hasSelectedEditor:!0})}isSelected(de){return he(this,c).has(de)}unselect(de){de.unselect(),he(this,c).delete(de),Re(this,pe,ti).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return he(this,c).size!==0}undo(){he(this,x).undo(),Re(this,pe,ti).call(this,{hasSomethingToUndo:he(this,x).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:Re(this,Ye,Fi).call(this)})}redo(){he(this,x).redo(),Re(this,pe,ti).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:he(this,x).hasSomethingToRedo(),isEmpty:Re(this,Ye,Fi).call(this)})}addCommands(de){he(this,x).add(de),Re(this,pe,ti).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:Re(this,Ye,Fi).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const de=[...he(this,c)],be=()=>{for(const Pe of de)Pe.remove()},Be=()=>{for(const Pe of de)Re(this,Ve,En).call(this,Pe)};this.addCommands({cmd:be,undo:Be,mustExec:!0})}commitOrRemove(){var de;(de=he(this,E))==null||de.commitOrRemove()}hasSomethingToControl(){return he(this,E)||this.hasSelection}selectAll(){for(const de of he(this,c))de.commit();Re(this,Ee,Pn).call(this,he(this,M).values())}unselectAll(){if(he(this,E)){he(this,E).commitOrRemove();return}if(this.hasSelection){for(const de of he(this,c))de.unselect();he(this,c).clear(),Re(this,pe,ti).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(de,be,Be=!1){if(Be||this.commitOrRemove(),!this.hasSelection)return;he(this,v)[0]+=de,he(this,v)[1]+=be;const[Pe,je]=he(this,v),Je=[...he(this,c)],$e=1e3;he(this,$)&&clearTimeout(he(this,$)),Ne(this,$,setTimeout(()=>{Ne(this,$,null),he(this,v)[0]=he(this,v)[1]=0,this.addCommands({cmd:()=>{for(const ve of Je)he(this,M).has(ve.id)&&ve.translateInPage(Pe,je)},undo:()=>{for(const ve of Je)he(this,M).has(ve.id)&&ve.translateInPage(-Pe,-je)},mustExec:!1})},$e));for(const ve of Je)ve.translateInPage(de,be)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),Ne(this,h,new Map);for(const de of he(this,c))he(this,h).set(de,{savedX:de.x,savedY:de.y,savedPageIndex:de.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!he(this,h))return!1;this.disableUserSelect(!1);const de=he(this,h);Ne(this,h,null);let be=!1;for(const[{x:Pe,y:je,pageIndex:Je},$e]of de)$e.newX=Pe,$e.newY=je,$e.newPageIndex=Je,be||(be=Pe!==$e.savedX||je!==$e.savedY||Je!==$e.savedPageIndex);if(!be)return!1;const Be=(Pe,je,Je,$e)=>{if(he(this,M).has(Pe.id)){const ve=he(this,b).get($e);ve?Pe._setParentAndPosition(ve,je,Je):(Pe.pageIndex=$e,Pe.x=je,Pe.y=Je)}};return this.addCommands({cmd:()=>{for(const[Pe,{newX:je,newY:Je,newPageIndex:$e}]of de)Be(Pe,je,Je,$e)},undo:()=>{for(const[Pe,{savedX:je,savedY:Je,savedPageIndex:$e}]of de)Be(Pe,je,Je,$e)},mustExec:!0}),!0}dragSelectedEditors(de,be){if(he(this,h))for(const Be of he(this,h).keys())Be.drag(de,be)}rebuild(de){if(de.parent===null){const be=this.getLayer(de.pageIndex);be?(be.changeParent(de),be.addOrRebuild(de)):(this.addEditor(de),this.addToAnnotationStorage(de),de.rebuild())}else de.parent.addOrRebuild(de)}isActive(de){return he(this,E)===de}getActive(){return he(this,E)}getMode(){return he(this,p)}get imageManager(){return(0,ye.shadow)(this,"imageManager",new se)}};E=new WeakMap,M=new WeakMap,b=new WeakMap,V=new WeakMap,l=new WeakMap,x=new WeakMap,H=new WeakMap,s=new WeakMap,h=new WeakMap,F=new WeakMap,N=new WeakMap,U=new WeakMap,g=new WeakMap,S=new WeakMap,m=new WeakMap,r=new WeakMap,p=new WeakMap,c=new WeakMap,u=new WeakMap,q=new WeakMap,J=new WeakMap,G=new WeakMap,W=new WeakMap,ce=new WeakMap,_=new WeakMap,ie=new WeakMap,L=new WeakMap,oe=new WeakMap,T=new WeakMap,Q=new WeakMap,v=new WeakMap,$=new WeakMap,Z=new WeakMap,te=new WeakMap,ne=new WeakSet,ma=function(){window.addEventListener("focus",he(this,J)),window.addEventListener("blur",he(this,q))},re=new WeakSet,Cn=function(){window.removeEventListener("focus",he(this,J)),window.removeEventListener("blur",he(this,q))},z=new WeakSet,Dn=function(){window.addEventListener("keydown",he(this,_),{capture:!0})},ue=new WeakSet,Ni=function(){window.removeEventListener("keydown",he(this,_),{capture:!0})},ke=new WeakSet,Un=function(){document.addEventListener("copy",he(this,G)),document.addEventListener("cut",he(this,W)),document.addEventListener("paste",he(this,ce))},fe=new WeakSet,Rn=function(){document.removeEventListener("copy",he(this,G)),document.removeEventListener("cut",he(this,W)),document.removeEventListener("paste",he(this,ce))},pe=new WeakSet,ti=function(de){Object.entries(de).some(([Be,Pe])=>he(this,Q)[Be]!==Pe)&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(he(this,Q),de)})},Oe=new WeakSet,Oi=function(de){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:de})},Ce=new WeakSet,ka=function(){if(!he(this,S)){Ne(this,S,!0);for(const de of he(this,b).values())de.enable()}},Se=new WeakSet,ba=function(){if(this.unselectAll(),he(this,S)){Ne(this,S,!1);for(const de of he(this,b).values())de.disable()}},Ve=new WeakSet,En=function(de){const be=he(this,b).get(de.pageIndex);be?be.addOrRebuild(de):this.addEditor(de)},Ye=new WeakSet,Fi=function(){if(he(this,M).size===0)return!0;if(he(this,M).size===1)for(const de of he(this,M).values())return de.isEmpty();return!1},Ee=new WeakSet,Pn=function(de){he(this,c).clear();for(const be of de)be.isEmpty()||(he(this,c).add(be),be.select());Re(this,pe,ti).call(this,{hasSelectedEditor:!0})},jt(_e,"TRANSLATE_SMALL",1),jt(_e,"TRANSLATE_BIG",10);let e=_e;qe.AnnotationEditorUIManager=e},(it,qe,Qe)=>{var H,s,h,F,N,U,g,S,m,r,p,c,gi,q,pi,G,Hn,ce,Qi,ie,Mi,oe,Vi,Q,Ci;Object.defineProperty(qe,"__esModule",{value:!0}),qe.StatTimer=qe.RenderingCancelledException=qe.PixelsPerInch=qe.PageViewport=qe.PDFDateString=qe.DOMStandardFontDataFactory=qe.DOMSVGFactory=qe.DOMFilterFactory=qe.DOMCanvasFactory=qe.DOMCMapReaderFactory=void 0,qe.deprecated=k,qe.getColorValues=M,qe.getCurrentTransform=b,qe.getCurrentTransformInverse=V,qe.getFilenameFromUrl=C,qe.getPdfFilenameFromUrl=O,qe.getRGB=E,qe.getXfaPageViewport=R,qe.isDataScheme=K,qe.isPdfFile=j,qe.isValidFetchUrl=A,qe.loadScript=I,qe.noContextMenu=n,qe.setLayerDimensions=l;var ye=Qe(7),Ue=Qe(1);const Xe="http://www.w3.org/2000/svg",x=class x{};jt(x,"CSS",96),jt(x,"PDF",72),jt(x,"PDF_TO_CSS_UNITS",x.CSS/x.PDF);let Fe=x;qe.PixelsPerInch=Fe;class D extends ye.BaseFilterFactory{constructor({docId:te,ownerDocument:ne=globalThis.document}={}){super();De(this,c);De(this,q);De(this,G);De(this,ce);De(this,ie);De(this,oe);De(this,Q);De(this,H,void 0);De(this,s,void 0);De(this,h,void 0);De(this,F,void 0);De(this,N,void 0);De(this,U,void 0);De(this,g,void 0);De(this,S,void 0);De(this,m,void 0);De(this,r,void 0);De(this,p,0);Ne(this,h,te),Ne(this,F,ne)}addFilter(te){if(!te)return"none";let ne=he(this,c,gi).get(te);if(ne)return ne;let X,re,ae,z;if(te.length===1){const ke=te[0],me=new Array(256);for(let fe=0;fe<256;fe++)me[fe]=ke[fe]/255;z=X=re=ae=me.join(",")}else{const[ke,me,fe]=te,xe=new Array(256),pe=new Array(256),we=new Array(256);for(let Oe=0;Oe<256;Oe++)xe[Oe]=ke[Oe]/255,pe[Oe]=me[Oe]/255,we[Oe]=fe[Oe]/255;X=xe.join(","),re=pe.join(","),ae=we.join(","),z=`${X}${re}${ae}`}if(ne=he(this,c,gi).get(z),ne)return he(this,c,gi).set(te,ne),ne;const le=`g_${he(this,h)}_transfer_map_${wi(this,p)._++}`,ue=`url(#${le})`;he(this,c,gi).set(te,ue),he(this,c,gi).set(z,ue);const ge=Re(this,ce,Qi).call(this,le);return Re(this,oe,Vi).call(this,X,re,ae,ge),ue}addHCMFilter(te,ne){var me;const X=`${te}-${ne}`;if(he(this,U)===X)return he(this,g);if(Ne(this,U,X),Ne(this,g,"none"),(me=he(this,N))==null||me.remove(),!te||!ne)return he(this,g);const re=Re(this,Q,Ci).call(this,te);te=Ue.Util.makeHexColor(...re);const ae=Re(this,Q,Ci).call(this,ne);if(ne=Ue.Util.makeHexColor(...ae),he(this,q,pi).style.color="",te==="#000000"&&ne==="#ffffff"||te===ne)return he(this,g);const z=new Array(256);for(let fe=0;fe<=255;fe++){const xe=fe/255;z[fe]=xe<=.03928?xe/12.92:Gt((xe+.055)/1.055,2.4)}const le=z.join(","),ue=`g_${he(this,h)}_hcm_filter`,ge=Ne(this,S,Re(this,ce,Qi).call(this,ue));Re(this,oe,Vi).call(this,le,le,le,ge),Re(this,G,Hn).call(this,ge);const ke=(fe,xe)=>{const pe=re[fe]/255,we=ae[fe]/255,Oe=new Array(xe+1);for(let Te=0;Te<=xe;Te++)Oe[Te]=pe+Te/xe*(we-pe);return Oe.join(",")};return Re(this,oe,Vi).call(this,ke(0,5),ke(1,5),ke(2,5),ge),Ne(this,g,`url(#${ue})`),he(this,g)}addHighlightHCMFilter(te,ne,X,re){var we;const ae=`${te}-${ne}-${X}-${re}`;if(he(this,m)===ae)return he(this,r);if(Ne(this,m,ae),Ne(this,r,"none"),(we=he(this,S))==null||we.remove(),!te||!ne)return he(this,r);const[z,le]=[te,ne].map(Re(this,Q,Ci).bind(this));let ue=Math.round(.2126*z[0]+.7152*z[1]+.0722*z[2]),ge=Math.round(.2126*le[0]+.7152*le[1]+.0722*le[2]),[ke,me]=[X,re].map(Re(this,Q,Ci).bind(this));ge<ue&&([ue,ge,ke,me]=[ge,ue,me,ke]),he(this,q,pi).style.color="";const fe=(Oe,Te,Ce)=>{const Ae=new Array(256),Se=(ge-ue)/Ce,He=Oe/255,Ve=(Te-Oe)/(255*Ce);let Le=0;for(let Ye=0;Ye<=Ce;Ye++){const lt=Math.round(ue+Ye*Se),Ee=He+Ye*Ve;for(let ut=Le;ut<=lt;ut++)Ae[ut]=Ee;Le=lt+1}for(let Ye=Le;Ye<256;Ye++)Ae[Ye]=Ae[Le-1];return Ae.join(",")},xe=`g_${he(this,h)}_hcm_highlight_filter`,pe=Ne(this,S,Re(this,ce,Qi).call(this,xe));return Re(this,G,Hn).call(this,pe),Re(this,oe,Vi).call(this,fe(ke[0],me[0],5),fe(ke[1],me[1],5),fe(ke[2],me[2],5),pe),Ne(this,r,`url(#${xe})`),he(this,r)}destroy(te=!1){te&&(he(this,g)||he(this,r))||(he(this,s)&&(he(this,s).parentNode.parentNode.remove(),Ne(this,s,null)),he(this,H)&&(he(this,H).clear(),Ne(this,H,null)),Ne(this,p,0))}}H=new WeakMap,s=new WeakMap,h=new WeakMap,F=new WeakMap,N=new WeakMap,U=new WeakMap,g=new WeakMap,S=new WeakMap,m=new WeakMap,r=new WeakMap,p=new WeakMap,c=new WeakSet,gi=function(){return he(this,H)||Ne(this,H,new Map)},q=new WeakSet,pi=function(){if(!he(this,s)){const te=he(this,F).createElement("div"),{style:ne}=te;ne.visibility="hidden",ne.contain="strict",ne.width=ne.height=0,ne.position="absolute",ne.top=ne.left=0,ne.zIndex=-1;const X=he(this,F).createElementNS(Xe,"svg");X.setAttribute("width",0),X.setAttribute("height",0),Ne(this,s,he(this,F).createElementNS(Xe,"defs")),te.append(X),X.append(he(this,s)),he(this,F).body.append(te)}return he(this,s)},G=new WeakSet,Hn=function(te){const ne=he(this,F).createElementNS(Xe,"feColorMatrix");ne.setAttribute("type","matrix"),ne.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),te.append(ne)},ce=new WeakSet,Qi=function(te){const ne=he(this,F).createElementNS(Xe,"filter");return ne.setAttribute("color-interpolation-filters","sRGB"),ne.setAttribute("id",te),he(this,q,pi).append(ne),ne},ie=new WeakSet,Mi=function(te,ne,X){const re=he(this,F).createElementNS(Xe,ne);re.setAttribute("type","discrete"),re.setAttribute("tableValues",X),te.append(re)},oe=new WeakSet,Vi=function(te,ne,X,re){const ae=he(this,F).createElementNS(Xe,"feComponentTransfer");re.append(ae),Re(this,ie,Mi).call(this,ae,"feFuncR",te),Re(this,ie,Mi).call(this,ae,"feFuncG",ne),Re(this,ie,Mi).call(this,ae,"feFuncB",X)},Q=new WeakSet,Ci=function(te){return he(this,q,pi).style.color=te,E(getComputedStyle(he(this,q,pi)).getPropertyValue("color"))},qe.DOMFilterFactory=D;class se extends ye.BaseCanvasFactory{constructor({ownerDocument:Z=globalThis.document}={}){super(),this._document=Z}_createCanvas(Z,te){const ne=this._document.createElement("canvas");return ne.width=Z,ne.height=te,ne}}qe.DOMCanvasFactory=se;function i($,Z=!1){return rt(this,null,function*(){if(A($,document.baseURI)){const te=yield fetch($);if(!te.ok)throw new Error(te.statusText);return Z?new Uint8Array(yield te.arrayBuffer()):(0,Ue.stringToBytes)(yield te.text())}return new Promise((te,ne)=>{const X=new XMLHttpRequest;X.open("GET",$,!0),Z&&(X.responseType="arraybuffer"),X.onreadystatechange=()=>{if(X.readyState===XMLHttpRequest.DONE){if(X.status===200||X.status===0){let re;if(Z&&X.response?re=new Uint8Array(X.response):!Z&&X.responseText&&(re=(0,Ue.stringToBytes)(X.responseText)),re){te(re);return}}ne(new Error(X.statusText))}},X.send(null)})})}class w extends ye.BaseCMapReaderFactory{_fetchData(Z,te){return i(Z,this.isCompressed).then(ne=>({cMapData:ne,compressionType:te}))}}qe.DOMCMapReaderFactory=w;class P extends ye.BaseStandardFontDataFactory{_fetchData(Z){return i(Z,!0)}}qe.DOMStandardFontDataFactory=P;class e extends ye.BaseSVGFactory{_createSVG(Z){return document.createElementNS(Xe,Z)}}qe.DOMSVGFactory=e;class t{constructor({viewBox:Z,scale:te,rotation:ne,offsetX:X=0,offsetY:re=0,dontFlip:ae=!1}){this.viewBox=Z,this.scale=te,this.rotation=ne,this.offsetX=X,this.offsetY=re;const z=(Z[2]+Z[0])/2,le=(Z[3]+Z[1])/2;let ue,ge,ke,me;switch(ne%=360,ne<0&&(ne+=360),ne){case 180:ue=-1,ge=0,ke=0,me=1;break;case 90:ue=0,ge=1,ke=1,me=0;break;case 270:ue=0,ge=-1,ke=-1,me=0;break;case 0:ue=1,ge=0,ke=0,me=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}ae&&(ke=-ke,me=-me);let fe,xe,pe,we;ue===0?(fe=Math.abs(le-Z[1])*te+X,xe=Math.abs(z-Z[0])*te+re,pe=(Z[3]-Z[1])*te,we=(Z[2]-Z[0])*te):(fe=Math.abs(z-Z[0])*te+X,xe=Math.abs(le-Z[1])*te+re,pe=(Z[2]-Z[0])*te,we=(Z[3]-Z[1])*te),this.transform=[ue*te,ge*te,ke*te,me*te,fe-ue*te*z-ke*te*le,xe-ge*te*z-me*te*le],this.width=pe,this.height=we}get rawDims(){const{viewBox:Z}=this;return(0,Ue.shadow)(this,"rawDims",{pageWidth:Z[2]-Z[0],pageHeight:Z[3]-Z[1],pageX:Z[0],pageY:Z[1]})}clone({scale:Z=this.scale,rotation:te=this.rotation,offsetX:ne=this.offsetX,offsetY:X=this.offsetY,dontFlip:re=!1}={}){return new t({viewBox:this.viewBox.slice(),scale:Z,rotation:te,offsetX:ne,offsetY:X,dontFlip:re})}convertToViewportPoint(Z,te){return Ue.Util.applyTransform([Z,te],this.transform)}convertToViewportRectangle(Z){const te=Ue.Util.applyTransform([Z[0],Z[1]],this.transform),ne=Ue.Util.applyTransform([Z[2],Z[3]],this.transform);return[te[0],te[1],ne[0],ne[1]]}convertToPdfPoint(Z,te){return Ue.Util.applyInverseTransform([Z,te],this.transform)}}qe.PageViewport=t;class o extends Ue.BaseException{constructor(Z,te=0){super(Z,"RenderingCancelledException"),this.extraDelay=te}}qe.RenderingCancelledException=o;function K($){const Z=$.length;let te=0;for(;te<Z&&$[te].trim()==="";)te++;return $.substring(te,te+5).toLowerCase()==="data:"}function j($){return typeof $=="string"&&/\.pdf$/i.test($)}function C($,Z=!1){return Z||([$]=$.split(/[#?]/,1)),$.substring($.lastIndexOf("/")+1)}function O($,Z="document.pdf"){if(typeof $!="string")return Z;if(K($))return(0,Ue.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),Z;const te=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,ne=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,X=te.exec($);let re=ne.exec(X[1])||ne.exec(X[2])||ne.exec(X[3]);if(re&&(re=re[0],re.includes("%")))try{re=ne.exec(decodeURIComponent(re))[0]}catch(ae){}return re||Z}class d{constructor(){jt(this,"started",Object.create(null));jt(this,"times",[])}time(Z){Z in this.started&&(0,Ue.warn)(`Timer is already running for ${Z}`),this.started[Z]=Date.now()}timeEnd(Z){Z in this.started||(0,Ue.warn)(`Timer has not been started for ${Z}`),this.times.push({name:Z,start:this.started[Z],end:Date.now()}),delete this.started[Z]}toString(){const Z=[];let te=0;for(const{name:ne}of this.times)te=Math.max(ne.length,te);for(const{name:ne,start:X,end:re}of this.times)Z.push(`${ne.padEnd(te)} ${re-X}ms
`);return Z.join("")}}qe.StatTimer=d;function A($,Z){try{const{protocol:te}=Z?new URL($,Z):new URL($);return te==="http:"||te==="https:"}catch(te){return!1}}function n($){$.preventDefault()}function I($,Z=!1){return new Promise((te,ne)=>{const X=document.createElement("script");X.src=$,X.onload=function(re){Z&&X.remove(),te(re)},X.onerror=function(){ne(new Error(`Cannot load script at: ${X.src}`))},(document.head||document.documentElement).append(X)})}function k($){console.log("Deprecated API usage: "+$)}let y;class f{static toDateObject(Z){if(!Z||typeof Z!="string")return null;y||(y=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const te=y.exec(Z);if(!te)return null;const ne=parseInt(te[1],10);let X=parseInt(te[2],10);X=X>=1&&X<=12?X-1:0;let re=parseInt(te[3],10);re=re>=1&&re<=31?re:1;let ae=parseInt(te[4],10);ae=ae>=0&&ae<=23?ae:0;let z=parseInt(te[5],10);z=z>=0&&z<=59?z:0;let le=parseInt(te[6],10);le=le>=0&&le<=59?le:0;const ue=te[7]||"Z";let ge=parseInt(te[8],10);ge=ge>=0&&ge<=23?ge:0;let ke=parseInt(te[9],10)||0;return ke=ke>=0&&ke<=59?ke:0,ue==="-"?(ae+=ge,z+=ke):ue==="+"&&(ae-=ge,z-=ke),new Date(Date.UTC(ne,X,re,ae,z,le))}}qe.PDFDateString=f;function R($,{scale:Z=1,rotation:te=0}){const{width:ne,height:X}=$.attributes.style,re=[0,0,parseInt(ne),parseInt(X)];return new t({viewBox:re,scale:Z,rotation:te})}function E($){if($.startsWith("#")){const Z=parseInt($.slice(1),16);return[(Z&16711680)>>16,(Z&65280)>>8,Z&255]}return $.startsWith("rgb(")?$.slice(4,-1).split(",").map(Z=>parseInt(Z)):$.startsWith("rgba(")?$.slice(5,-1).split(",").map(Z=>parseInt(Z)).slice(0,3):((0,Ue.warn)(`Not a valid color format: "${$}"`),[0,0,0])}function M($){const Z=document.createElement("span");Z.style.visibility="hidden",document.body.append(Z);for(const te of $.keys()){Z.style.color=te;const ne=window.getComputedStyle(Z).color;$.set(te,E(ne))}Z.remove()}function b($){const{a:Z,b:te,c:ne,d:X,e:re,f:ae}=$.getTransform();return[Z,te,ne,X,re,ae]}function V($){const{a:Z,b:te,c:ne,d:X,e:re,f:ae}=$.getTransform().invertSelf();return[Z,te,ne,X,re,ae]}function l($,Z,te=!1,ne=!0){if(Z instanceof t){const{pageWidth:X,pageHeight:re}=Z.rawDims,{style:ae}=$,z=Ue.FeatureTest.isCSSRoundSupported,le=`var(--scale-factor) * ${X}px`,ue=`var(--scale-factor) * ${re}px`,ge=z?`round(${le}, 1px)`:`calc(${le})`,ke=z?`round(${ue}, 1px)`:`calc(${ue})`;!te||Z.rotation%180===0?(ae.width=ge,ae.height=ke):(ae.width=ke,ae.height=ge)}ne&&$.setAttribute("data-main-rotation",Z.rotation)}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.BaseStandardFontDataFactory=qe.BaseSVGFactory=qe.BaseFilterFactory=qe.BaseCanvasFactory=qe.BaseCMapReaderFactory=void 0;var ye=Qe(1);class Ue{constructor(){this.constructor===Ue&&(0,ye.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(w){return"none"}addHCMFilter(w,P){return"none"}addHighlightHCMFilter(w,P,e,t){return"none"}destroy(w=!1){}}qe.BaseFilterFactory=Ue;class Xe{constructor(){this.constructor===Xe&&(0,ye.unreachable)("Cannot initialize BaseCanvasFactory.")}create(w,P){if(w<=0||P<=0)throw new Error("Invalid canvas size");const e=this._createCanvas(w,P);return{canvas:e,context:e.getContext("2d")}}reset(w,P,e){if(!w.canvas)throw new Error("Canvas is not specified");if(P<=0||e<=0)throw new Error("Invalid canvas size");w.canvas.width=P,w.canvas.height=e}destroy(w){if(!w.canvas)throw new Error("Canvas is not specified");w.canvas.width=0,w.canvas.height=0,w.canvas=null,w.context=null}_createCanvas(w,P){(0,ye.unreachable)("Abstract method `_createCanvas` called.")}}qe.BaseCanvasFactory=Xe;class Fe{constructor({baseUrl:w=null,isCompressed:P=!0}){this.constructor===Fe&&(0,ye.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=w,this.isCompressed=P}fetch(P){return rt(this,arguments,function*({name:w}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!w)throw new Error("CMap name must be specified.");const e=this.baseUrl+w+(this.isCompressed?".bcmap":""),t=this.isCompressed?ye.CMapCompressionType.BINARY:ye.CMapCompressionType.NONE;return this._fetchData(e,t).catch(o=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${e}`)})})}_fetchData(w,P){(0,ye.unreachable)("Abstract method `_fetchData` called.")}}qe.BaseCMapReaderFactory=Fe;class D{constructor({baseUrl:w=null}){this.constructor===D&&(0,ye.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=w}fetch(P){return rt(this,arguments,function*({filename:w}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!w)throw new Error("Font filename must be specified.");const e=`${this.baseUrl}${w}`;return this._fetchData(e).catch(t=>{throw new Error(`Unable to load font data at: ${e}`)})})}_fetchData(w){(0,ye.unreachable)("Abstract method `_fetchData` called.")}}qe.BaseStandardFontDataFactory=D;class se{constructor(){this.constructor===se&&(0,ye.unreachable)("Cannot initialize BaseSVGFactory.")}create(w,P,e=!1){if(w<=0||P<=0)throw new Error("Invalid SVG dimensions");const t=this._createSVG("svg:svg");return t.setAttribute("version","1.1"),e||(t.setAttribute("width",`${w}px`),t.setAttribute("height",`${P}px`)),t.setAttribute("preserveAspectRatio","none"),t.setAttribute("viewBox",`0 0 ${w} ${P}`),t}createElement(w){if(typeof w!="string")throw new Error("Invalid SVG element type");return this._createSVG(w)}_createSVG(w){(0,ye.unreachable)("Abstract method `_createSVG` called.")}}qe.BaseSVGFactory=se},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.MurmurHash3_64=void 0;var ye=Qe(1);const Ue=3285377520,Xe=4294901760,Fe=65535;class D{constructor(i){this.h1=i?i&4294967295:Ue,this.h2=i?i&4294967295:Ue}update(i){let w,P;if(typeof i=="string"){w=new Uint8Array(i.length*2),P=0;for(let k=0,y=i.length;k<y;k++){const f=i.charCodeAt(k);f<=255?w[P++]=f:(w[P++]=f>>>8,w[P++]=f&255)}}else if((0,ye.isArrayBuffer)(i))w=i.slice(),P=w.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const e=P>>2,t=P-e*4,o=new Uint32Array(w.buffer,0,e);let K=0,j=0,C=this.h1,O=this.h2;const d=3432918353,A=461845907,n=d&Fe,I=A&Fe;for(let k=0;k<e;k++)k&1?(K=o[k],K=K*d&Xe|K*n&Fe,K=K<<15|K>>>17,K=K*A&Xe|K*I&Fe,C^=K,C=C<<13|C>>>19,C=C*5+3864292196):(j=o[k],j=j*d&Xe|j*n&Fe,j=j<<15|j>>>17,j=j*A&Xe|j*I&Fe,O^=j,O=O<<13|O>>>19,O=O*5+3864292196);switch(K=0,t){case 3:K^=w[e*4+2]<<16;case 2:K^=w[e*4+1]<<8;case 1:K^=w[e*4],K=K*d&Xe|K*n&Fe,K=K<<15|K>>>17,K=K*A&Xe|K*I&Fe,e&1?C^=K:O^=K}this.h1=C,this.h2=O}hexdigest(){let i=this.h1,w=this.h2;return i^=w>>>1,i=i*3981806797&Xe|i*36045&Fe,w=w*4283543511&Xe|((w<<16|i>>>16)*2950163797&Xe)>>>16,i^=w>>>1,i=i*444984403&Xe|i*60499&Fe,w=w*3301882366&Xe|((w<<16|i>>>16)*3120437893&Xe)>>>16,i^=w>>>1,(i>>>0).toString(16).padStart(8,"0")+(w>>>0).toString(16).padStart(8,"0")}}qe.MurmurHash3_64=D},(it,qe,Qe)=>{var Fe;Object.defineProperty(qe,"__esModule",{value:!0}),qe.FontLoader=qe.FontFaceObject=void 0;var ye=Qe(1);class Ue{constructor({ownerDocument:se=globalThis.document,styleElement:i=null}){De(this,Fe,new Set);this._document=se,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(se){this.nativeFontFaces.add(se),this._document.fonts.add(se)}removeNativeFontFace(se){this.nativeFontFaces.delete(se),this._document.fonts.delete(se)}insertRule(se){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const i=this.styleElement.sheet;i.insertRule(se,i.cssRules.length)}clear(){for(const se of this.nativeFontFaces)this._document.fonts.delete(se);this.nativeFontFaces.clear(),he(this,Fe).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}loadSystemFont(se){return rt(this,null,function*(){if(!(!se||he(this,Fe).has(se.loadedName))){if((0,ye.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:i,src:w,style:P}=se,e=new FontFace(i,w,P);this.addNativeFontFace(e);try{yield e.load(),he(this,Fe).add(i)}catch(t){(0,ye.warn)(`Cannot load system font: ${se.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(e)}return}(0,ye.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}})}bind(se){return rt(this,null,function*(){if(se.attached||se.missingFile&&!se.systemFontInfo)return;if(se.attached=!0,se.systemFontInfo){yield this.loadSystemFont(se.systemFontInfo);return}if(this.isFontLoadingAPISupported){const w=se.createNativeFontFace();if(w){this.addNativeFontFace(w);try{yield w.loaded}catch(P){throw(0,ye.warn)(`Failed to load font '${w.family}': '${P}'.`),se.disableFontFace=!0,P}}return}const i=se.createFontFaceRule();if(i){if(this.insertRule(i),this.isSyncFontLoadingSupported)return;yield new Promise(w=>{const P=this._queueLoadingCallback(w);this._prepareFontLoadEvent(se,P)})}})}get isFontLoadingAPISupported(){var i;const se=!!((i=this._document)!=null&&i.fonts);return(0,ye.shadow)(this,"isFontLoadingAPISupported",se)}get isSyncFontLoadingSupported(){let se=!1;return(ye.isNodeJS||typeof navigator!="undefined"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(se=!0),(0,ye.shadow)(this,"isSyncFontLoadingSupported",se)}_queueLoadingCallback(se){function i(){for((0,ye.assert)(!P.done,"completeRequest() cannot be called twice."),P.done=!0;w.length>0&&w[0].done;){const e=w.shift();setTimeout(e.callback,0)}}const{loadingRequests:w}=this,P={done:!1,complete:i,callback:se};return w.push(P),P}get _loadTestFont(){const se=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,ye.shadow)(this,"_loadTestFont",se)}_prepareFontLoadEvent(se,i){function w(E,M){return E.charCodeAt(M)<<24|E.charCodeAt(M+1)<<16|E.charCodeAt(M+2)<<8|E.charCodeAt(M+3)&255}function P(E,M,b,V){const l=E.substring(0,M),x=E.substring(M+b);return l+V+x}let e,t;const o=this._document.createElement("canvas");o.width=1,o.height=1;const K=o.getContext("2d");let j=0;function C(E,M){if(++j>30){(0,ye.warn)("Load test font never loaded."),M();return}if(K.font="30px "+E,K.fillText(".",0,20),K.getImageData(0,0,1,1).data[3]>0){M();return}setTimeout(C.bind(null,E,M))}const O=`lt${Date.now()}${this.loadTestFontId++}`;let d=this._loadTestFont;d=P(d,976,O.length,O);const n=16,I=1482184792;let k=w(d,n);for(e=0,t=O.length-3;e<t;e+=4)k=k-I+w(O,e)|0;e<O.length&&(k=k-I+w(O+"XXX",e)|0),d=P(d,n,4,(0,ye.string32)(k));const y=`url(data:font/opentype;base64,${btoa(d)});`,f=`@font-face {font-family:"${O}";src:${y}}`;this.insertRule(f);const R=this._document.createElement("div");R.style.visibility="hidden",R.style.width=R.style.height="10px",R.style.position="absolute",R.style.top=R.style.left="0px";for(const E of[se.loadedName,O]){const M=this._document.createElement("span");M.textContent="Hi",M.style.fontFamily=E,R.append(M)}this._document.body.append(R),C(O,()=>{R.remove(),i.complete()})}}Fe=new WeakMap,qe.FontLoader=Ue;class Xe{constructor(se,{isEvalSupported:i=!0,disableFontFace:w=!1,ignoreErrors:P=!1,inspectFont:e=null}){this.compiledGlyphs=Object.create(null);for(const t in se)this[t]=se[t];this.isEvalSupported=i!==!1,this.disableFontFace=w===!0,this.ignoreErrors=P===!0,this._inspectFont=e}createNativeFontFace(){var i;if(!this.data||this.disableFontFace)return null;let se;if(!this.cssFontInfo)se=new FontFace(this.loadedName,this.data,{});else{const w={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(w.style=`oblique ${this.cssFontInfo.italicAngle}deg`),se=new FontFace(this.cssFontInfo.fontFamily,this.data,w)}return(i=this._inspectFont)==null||i.call(this,this),se}createFontFaceRule(){var P;if(!this.data||this.disableFontFace)return null;const se=(0,ye.bytesToString)(this.data),i=`url(data:${this.mimetype};base64,${btoa(se)});`;let w;if(!this.cssFontInfo)w=`@font-face {font-family:"${this.loadedName}";src:${i}}`;else{let e=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(e+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),w=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${e}src:${i}}`}return(P=this._inspectFont)==null||P.call(this,this,i),w}getPathGenerator(se,i){if(this.compiledGlyphs[i]!==void 0)return this.compiledGlyphs[i];let w;try{w=se.get(this.loadedName+"_path_"+i)}catch(P){if(!this.ignoreErrors)throw P;return(0,ye.warn)(`getPathGenerator - ignoring character: "${P}".`),this.compiledGlyphs[i]=function(e,t){}}if(this.isEvalSupported&&ye.FeatureTest.isEvalSupported){const P=[];for(const e of w){const t=e.args!==void 0?e.args.join(","):"";P.push("c.",e.cmd,"(",t,`);
`)}return this.compiledGlyphs[i]=new Function("c","size",P.join(""))}return this.compiledGlyphs[i]=function(P,e){for(const t of w)t.cmd==="scale"&&(t.args=[e,-e]),P[t.cmd].apply(P,t.args)}}}qe.FontFaceObject=Xe},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.NodeStandardFontDataFactory=qe.NodeFilterFactory=qe.NodeCanvasFactory=qe.NodeCMapReaderFactory=void 0;var ye=Qe(7);Qe(1);const Ue=function(i){return new Promise((w,P)=>{require$$5.readFile(i,(t,o)=>{if(t||!o){P(new Error(t));return}w(new Uint8Array(o))})})};class Xe extends ye.BaseFilterFactory{}qe.NodeFilterFactory=Xe;class Fe extends ye.BaseCanvasFactory{_createCanvas(w,P){return require$$5.createCanvas(w,P)}}qe.NodeCanvasFactory=Fe;class D extends ye.BaseCMapReaderFactory{_fetchData(w,P){return Ue(w).then(e=>({cMapData:e,compressionType:P}))}}qe.NodeCMapReaderFactory=D;class se extends ye.BaseStandardFontDataFactory{_fetchData(w){return Ue(w)}}qe.NodeStandardFontDataFactory=se},(it,qe,Qe)=>{var s,jn,F,Jn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.CanvasGraphics=void 0;var ye=Qe(1),Ue=Qe(6),Xe=Qe(12),Fe=Qe(13);const D=16,se=100,i=4096,w=15,P=10,e=1e3,t=16;function o(g,S){if(g._removeMirroring)throw new Error("Context is already forwarding operations.");g.__originalSave=g.save,g.__originalRestore=g.restore,g.__originalRotate=g.rotate,g.__originalScale=g.scale,g.__originalTranslate=g.translate,g.__originalTransform=g.transform,g.__originalSetTransform=g.setTransform,g.__originalResetTransform=g.resetTransform,g.__originalClip=g.clip,g.__originalMoveTo=g.moveTo,g.__originalLineTo=g.lineTo,g.__originalBezierCurveTo=g.bezierCurveTo,g.__originalRect=g.rect,g.__originalClosePath=g.closePath,g.__originalBeginPath=g.beginPath,g._removeMirroring=()=>{g.save=g.__originalSave,g.restore=g.__originalRestore,g.rotate=g.__originalRotate,g.scale=g.__originalScale,g.translate=g.__originalTranslate,g.transform=g.__originalTransform,g.setTransform=g.__originalSetTransform,g.resetTransform=g.__originalResetTransform,g.clip=g.__originalClip,g.moveTo=g.__originalMoveTo,g.lineTo=g.__originalLineTo,g.bezierCurveTo=g.__originalBezierCurveTo,g.rect=g.__originalRect,g.closePath=g.__originalClosePath,g.beginPath=g.__originalBeginPath,delete g._removeMirroring},g.save=function(){S.save(),this.__originalSave()},g.restore=function(){S.restore(),this.__originalRestore()},g.translate=function(r,p){S.translate(r,p),this.__originalTranslate(r,p)},g.scale=function(r,p){S.scale(r,p),this.__originalScale(r,p)},g.transform=function(r,p,c,u,q,J){S.transform(r,p,c,u,q,J),this.__originalTransform(r,p,c,u,q,J)},g.setTransform=function(r,p,c,u,q,J){S.setTransform(r,p,c,u,q,J),this.__originalSetTransform(r,p,c,u,q,J)},g.resetTransform=function(){S.resetTransform(),this.__originalResetTransform()},g.rotate=function(r){S.rotate(r),this.__originalRotate(r)},g.clip=function(r){S.clip(r),this.__originalClip(r)},g.moveTo=function(m,r){S.moveTo(m,r),this.__originalMoveTo(m,r)},g.lineTo=function(m,r){S.lineTo(m,r),this.__originalLineTo(m,r)},g.bezierCurveTo=function(m,r,p,c,u,q){S.bezierCurveTo(m,r,p,c,u,q),this.__originalBezierCurveTo(m,r,p,c,u,q)},g.rect=function(m,r,p,c){S.rect(m,r,p,c),this.__originalRect(m,r,p,c)},g.closePath=function(){S.closePath(),this.__originalClosePath()},g.beginPath=function(){S.beginPath(),this.__originalBeginPath()}}class K{constructor(S){this.canvasFactory=S,this.cache=Object.create(null)}getCanvas(S,m,r){let p;return this.cache[S]!==void 0?(p=this.cache[S],this.canvasFactory.reset(p,m,r)):(p=this.canvasFactory.create(m,r),this.cache[S]=p),p}delete(S){delete this.cache[S]}clear(){for(const S in this.cache){const m=this.cache[S];this.canvasFactory.destroy(m),delete this.cache[S]}}}function j(g,S,m,r,p,c,u,q,J,G){const[W,ce,_,ie,L,oe]=(0,Ue.getCurrentTransform)(g);if(ce===0&&_===0){const v=u*W+L,$=Math.round(v),Z=q*ie+oe,te=Math.round(Z),ne=(u+J)*W+L,X=Math.abs(Math.round(ne)-$)||1,re=(q+G)*ie+oe,ae=Math.abs(Math.round(re)-te)||1;return g.setTransform(Math.sign(W),0,0,Math.sign(ie),$,te),g.drawImage(S,m,r,p,c,0,0,X,ae),g.setTransform(W,ce,_,ie,L,oe),[X,ae]}if(W===0&&ie===0){const v=q*_+L,$=Math.round(v),Z=u*ce+oe,te=Math.round(Z),ne=(q+G)*_+L,X=Math.abs(Math.round(ne)-$)||1,re=(u+J)*ce+oe,ae=Math.abs(Math.round(re)-te)||1;return g.setTransform(0,Math.sign(ce),Math.sign(_),0,$,te),g.drawImage(S,m,r,p,c,0,0,ae,X),g.setTransform(W,ce,_,ie,L,oe),[ae,X]}g.drawImage(S,m,r,p,c,u,q,J,G);const T=Math.hypot(W,ce),Q=Math.hypot(_,ie);return[T*J,Q*G]}function C(g){const{width:S,height:m}=g;if(S>e||m>e)return null;const r=1e3,p=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),c=S+1;let u=new Uint8Array(c*(m+1)),q,J,G;const W=S+7&-8;let ce=new Uint8Array(W*m),_=0;for(const Q of g.data){let v=128;for(;v>0;)ce[_++]=Q&v?0:255,v>>=1}let ie=0;for(_=0,ce[_]!==0&&(u[0]=1,++ie),J=1;J<S;J++)ce[_]!==ce[_+1]&&(u[J]=ce[_]?2:1,++ie),_++;for(ce[_]!==0&&(u[J]=2,++ie),q=1;q<m;q++){_=q*W,G=q*c,ce[_-W]!==ce[_]&&(u[G]=ce[_]?1:8,++ie);let Q=(ce[_]?4:0)+(ce[_-W]?8:0);for(J=1;J<S;J++)Q=(Q>>2)+(ce[_+1]?4:0)+(ce[_-W+1]?8:0),p[Q]&&(u[G+J]=p[Q],++ie),_++;if(ce[_-W]!==ce[_]&&(u[G+J]=ce[_]?2:4,++ie),ie>r)return null}for(_=W*(m-1),G=q*c,ce[_]!==0&&(u[G]=8,++ie),J=1;J<S;J++)ce[_]!==ce[_+1]&&(u[G+J]=ce[_]?4:8,++ie),_++;if(ce[_]!==0&&(u[G+J]=4,++ie),ie>r)return null;const L=new Int32Array([0,c,-1,0,-c,0,0,0,1]),oe=new Path2D;for(q=0;ie&&q<=m;q++){let Q=q*c;const v=Q+S;for(;Q<v&&!u[Q];)Q++;if(Q===v)continue;oe.moveTo(Q%c,q);const $=Q;let Z=u[Q];do{const te=L[Z];do Q+=te;while(!u[Q]);const ne=u[Q];ne!==5&&ne!==10?(Z=ne,u[Q]=0):(Z=ne&51*Z>>4,u[Q]&=Z>>2|Z<<2),oe.lineTo(Q%c,Q/c|0),u[Q]||--ie}while($!==Q);--q}return ce=null,u=null,function(Q){Q.save(),Q.scale(1/S,-1/m),Q.translate(0,-m),Q.fill(oe),Q.beginPath(),Q.restore()}}class O{constructor(S,m){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=ye.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=ye.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=ye.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,S,m])}clone(){const S=Object.create(this);return S.clipBox=this.clipBox.slice(),S}setCurrentPoint(S,m){this.x=S,this.y=m}updatePathMinMax(S,m,r){[m,r]=ye.Util.applyTransform([m,r],S),this.minX=Math.min(this.minX,m),this.minY=Math.min(this.minY,r),this.maxX=Math.max(this.maxX,m),this.maxY=Math.max(this.maxY,r)}updateRectMinMax(S,m){const r=ye.Util.applyTransform(m,S),p=ye.Util.applyTransform(m.slice(2),S);this.minX=Math.min(this.minX,r[0],p[0]),this.minY=Math.min(this.minY,r[1],p[1]),this.maxX=Math.max(this.maxX,r[0],p[0]),this.maxY=Math.max(this.maxY,r[1],p[1])}updateScalingPathMinMax(S,m){ye.Util.scaleMinMax(S,m),this.minX=Math.min(this.minX,m[0]),this.maxX=Math.max(this.maxX,m[1]),this.minY=Math.min(this.minY,m[2]),this.maxY=Math.max(this.maxY,m[3])}updateCurvePathMinMax(S,m,r,p,c,u,q,J,G,W){const ce=ye.Util.bezierBoundingBox(m,r,p,c,u,q,J,G);if(W){W[0]=Math.min(W[0],ce[0],ce[2]),W[1]=Math.max(W[1],ce[0],ce[2]),W[2]=Math.min(W[2],ce[1],ce[3]),W[3]=Math.max(W[3],ce[1],ce[3]);return}this.updateRectMinMax(S,ce)}getPathBoundingBox(S=Xe.PathType.FILL,m=null){const r=[this.minX,this.minY,this.maxX,this.maxY];if(S===Xe.PathType.STROKE){m||(0,ye.unreachable)("Stroke bounding box must include transform.");const p=ye.Util.singularValueDecompose2dScale(m),c=p[0]*this.lineWidth/2,u=p[1]*this.lineWidth/2;r[0]-=c,r[1]-=u,r[2]+=c,r[3]+=u}return r}updateClipFromPath(){const S=ye.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(S||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(S){this.clipBox=S,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(S=Xe.PathType.FILL,m=null){return ye.Util.intersect(this.clipBox,this.getPathBoundingBox(S,m))}}function d(g,S){if(typeof ImageData!="undefined"&&S instanceof ImageData){g.putImageData(S,0,0);return}const m=S.height,r=S.width,p=m%t,c=(m-p)/t,u=p===0?c:c+1,q=g.createImageData(r,t);let J=0,G;const W=S.data,ce=q.data;let _,ie,L,oe;if(S.kind===ye.ImageKind.GRAYSCALE_1BPP){const T=W.byteLength,Q=new Uint32Array(ce.buffer,0,ce.byteLength>>2),v=Q.length,$=r+7>>3,Z=4294967295,te=ye.FeatureTest.isLittleEndian?4278190080:255;for(_=0;_<u;_++){for(L=_<c?t:p,G=0,ie=0;ie<L;ie++){const ne=T-J;let X=0;const re=ne>$?r:ne*8-7,ae=re&-8;let z=0,le=0;for(;X<ae;X+=8)le=W[J++],Q[G++]=le&128?Z:te,Q[G++]=le&64?Z:te,Q[G++]=le&32?Z:te,Q[G++]=le&16?Z:te,Q[G++]=le&8?Z:te,Q[G++]=le&4?Z:te,Q[G++]=le&2?Z:te,Q[G++]=le&1?Z:te;for(;X<re;X++)z===0&&(le=W[J++],z=128),Q[G++]=le&z?Z:te,z>>=1}for(;G<v;)Q[G++]=0;g.putImageData(q,0,_*t)}}else if(S.kind===ye.ImageKind.RGBA_32BPP){for(ie=0,oe=r*t*4,_=0;_<c;_++)ce.set(W.subarray(J,J+oe)),J+=oe,g.putImageData(q,0,ie),ie+=t;_<u&&(oe=r*p*4,ce.set(W.subarray(J,J+oe)),g.putImageData(q,0,ie))}else if(S.kind===ye.ImageKind.RGB_24BPP)for(L=t,oe=r*L,_=0;_<u;_++){for(_>=c&&(L=p,oe=r*L),G=0,ie=oe;ie--;)ce[G++]=W[J++],ce[G++]=W[J++],ce[G++]=W[J++],ce[G++]=255;g.putImageData(q,0,_*t)}else throw new Error(`bad image kind: ${S.kind}`)}function A(g,S){if(S.bitmap){g.drawImage(S.bitmap,0,0);return}const m=S.height,r=S.width,p=m%t,c=(m-p)/t,u=p===0?c:c+1,q=g.createImageData(r,t);let J=0;const G=S.data,W=q.data;for(let ce=0;ce<u;ce++){const _=ce<c?t:p;({srcPos:J}=(0,Fe.convertBlackAndWhiteToRGBA)({src:G,srcPos:J,dest:W,width:r,height:_,nonBlackColor:0})),g.putImageData(q,0,ce*t)}}function n(g,S){const m=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const r of m)g[r]!==void 0&&(S[r]=g[r]);g.setLineDash!==void 0&&(S.setLineDash(g.getLineDash()),S.lineDashOffset=g.lineDashOffset)}function I(g){if(g.strokeStyle=g.fillStyle="#000000",g.fillRule="nonzero",g.globalAlpha=1,g.lineWidth=1,g.lineCap="butt",g.lineJoin="miter",g.miterLimit=10,g.globalCompositeOperation="source-over",g.font="10px sans-serif",g.setLineDash!==void 0&&(g.setLineDash([]),g.lineDashOffset=0),!ye.isNodeJS){const{filter:S}=g;S!=="none"&&S!==""&&(g.filter="none")}}function k(g,S,m,r){const p=g.length;for(let c=3;c<p;c+=4){const u=g[c];if(u===0)g[c-3]=S,g[c-2]=m,g[c-1]=r;else if(u<255){const q=255-u;g[c-3]=g[c-3]*u+S*q>>8,g[c-2]=g[c-2]*u+m*q>>8,g[c-1]=g[c-1]*u+r*q>>8}}}function y(g,S,m){const r=g.length,p=1/255;for(let c=3;c<r;c+=4){const u=m?m[g[c]]:g[c];S[c]=S[c]*u*p|0}}function f(g,S,m){const r=g.length;for(let p=3;p<r;p+=4){const c=g[p-3]*77+g[p-2]*152+g[p-1]*28;S[p]=m?S[p]*m[c>>8]>>8:S[p]*c>>16}}function R(g,S,m,r,p,c,u,q,J,G,W){const ce=!!c,_=ce?c[0]:0,ie=ce?c[1]:0,L=ce?c[2]:0,oe=p==="Luminosity"?f:y,Q=Math.min(r,Math.ceil(1048576/m));for(let v=0;v<r;v+=Q){const $=Math.min(Q,r-v),Z=g.getImageData(q-G,v+(J-W),m,$),te=S.getImageData(q,v+J,m,$);ce&&k(Z.data,_,ie,L),oe(Z.data,te.data,u),S.putImageData(te,q,v+J)}}function E(g,S,m,r){const p=r[0],c=r[1],u=r[2]-p,q=r[3]-c;u===0||q===0||(R(S.context,m,u,q,S.subtype,S.backdrop,S.transferMap,p,c,S.offsetX,S.offsetY),g.save(),g.globalAlpha=1,g.globalCompositeOperation="source-over",g.setTransform(1,0,0,1,0,0),g.drawImage(m.canvas,0,0),g.restore())}function M(g,S){const m=ye.Util.singularValueDecompose2dScale(g);m[0]=Math.fround(m[0]),m[1]=Math.fround(m[1]);const r=Math.fround((globalThis.devicePixelRatio||1)*Ue.PixelsPerInch.PDF_TO_CSS_UNITS);return S!==void 0?S:m[0]<=r||m[1]<=r}const b=["butt","round","square"],V=["miter","round","bevel"],l={},x={},U=class U{constructor(S,m,r,p,c,{optionalContentConfig:u,markedContentStack:q=null},J,G){De(this,s);De(this,F);this.ctx=S,this.current=new O(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=m,this.objs=r,this.canvasFactory=p,this.filterFactory=c,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=q||[],this.optionalContentConfig=u,this.cachedCanvases=new K(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=J,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=G,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(S,m=null){return typeof S=="string"?S.startsWith("g_")?this.commonObjs.get(S):this.objs.get(S):m}beginDrawing({transform:S,viewport:m,transparency:r=!1,background:p=null}){const c=this.ctx.canvas.width,u=this.ctx.canvas.height,q=this.ctx.fillStyle;if(this.ctx.fillStyle=p||"#ffffff",this.ctx.fillRect(0,0,c,u),this.ctx.fillStyle=q,r){const J=this.cachedCanvases.getCanvas("transparent",c,u);this.compositeCtx=this.ctx,this.transparentCanvas=J.canvas,this.ctx=J.context,this.ctx.save(),this.ctx.transform(...(0,Ue.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),I(this.ctx),S&&(this.ctx.transform(...S),this.outputScaleX=S[0],this.outputScaleY=S[0]),this.ctx.transform(...m.transform),this.viewportScale=m.scale,this.baseTransform=(0,Ue.getCurrentTransform)(this.ctx)}executeOperatorList(S,m,r,p){const c=S.argsArray,u=S.fnArray;let q=m||0;const J=c.length;if(J===q)return q;const G=J-q>P&&typeof r=="function",W=G?Date.now()+w:0;let ce=0;const _=this.commonObjs,ie=this.objs;let L;for(;;){if(p!==void 0&&q===p.nextBreakPoint)return p.breakIt(q,r),q;if(L=u[q],L!==ye.OPS.dependency)this[L].apply(this,c[q]);else for(const oe of c[q]){const T=oe.startsWith("g_")?_:ie;if(!T.has(oe))return T.get(oe,r),q}if(q++,q===J)return q;if(G&&++ce>P){if(Date.now()>W)return r(),q;ce=0}}}endDrawing(){Re(this,s,jn).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const S of this._cachedBitmapsMap.values()){for(const m of S.values())typeof HTMLCanvasElement!="undefined"&&m instanceof HTMLCanvasElement&&(m.width=m.height=0);S.clear()}this._cachedBitmapsMap.clear(),Re(this,F,Jn).call(this)}_scaleImage(S,m){const r=S.width,p=S.height;let c=Math.max(Math.hypot(m[0],m[1]),1),u=Math.max(Math.hypot(m[2],m[3]),1),q=r,J=p,G="prescale1",W,ce;for(;c>2&&q>1||u>2&&J>1;){let _=q,ie=J;c>2&&q>1&&(_=q>=16384?Math.floor(q/2)-1||1:Math.ceil(q/2),c/=q/_),u>2&&J>1&&(ie=J>=16384?Math.floor(J/2)-1||1:Math.ceil(J)/2,u/=J/ie),W=this.cachedCanvases.getCanvas(G,_,ie),ce=W.context,ce.clearRect(0,0,_,ie),ce.drawImage(S,0,0,q,J,0,0,_,ie),S=W.canvas,q=_,J=ie,G=G==="prescale1"?"prescale2":"prescale1"}return{img:S,paintWidth:q,paintHeight:J}}_createMaskCanvas(S){const m=this.ctx,{width:r,height:p}=S,c=this.current.fillColor,u=this.current.patternFill,q=(0,Ue.getCurrentTransform)(m);let J,G,W,ce;if((S.bitmap||S.data)&&S.count>1){const X=S.bitmap||S.data.buffer;G=JSON.stringify(u?q:[q.slice(0,4),c]),J=this._cachedBitmapsMap.get(X),J||(J=new Map,this._cachedBitmapsMap.set(X,J));const re=J.get(G);if(re&&!u){const ae=Math.round(Math.min(q[0],q[2])+q[4]),z=Math.round(Math.min(q[1],q[3])+q[5]);return{canvas:re,offsetX:ae,offsetY:z}}W=re}W||(ce=this.cachedCanvases.getCanvas("maskCanvas",r,p),A(ce.context,S));let _=ye.Util.transform(q,[1/r,0,0,-1/p,0,0]);_=ye.Util.transform(_,[1,0,0,1,0,-p]);const ie=ye.Util.applyTransform([0,0],_),L=ye.Util.applyTransform([r,p],_),oe=ye.Util.normalizeRect([ie[0],ie[1],L[0],L[1]]),T=Math.round(oe[2]-oe[0])||1,Q=Math.round(oe[3]-oe[1])||1,v=this.cachedCanvases.getCanvas("fillCanvas",T,Q),$=v.context,Z=Math.min(ie[0],L[0]),te=Math.min(ie[1],L[1]);$.translate(-Z,-te),$.transform(..._),W||(W=this._scaleImage(ce.canvas,(0,Ue.getCurrentTransformInverse)($)),W=W.img,J&&u&&J.set(G,W)),$.imageSmoothingEnabled=M((0,Ue.getCurrentTransform)($),S.interpolate),j($,W,0,0,W.width,W.height,0,0,r,p),$.globalCompositeOperation="source-in";const ne=ye.Util.transform((0,Ue.getCurrentTransformInverse)($),[1,0,0,1,-Z,-te]);return $.fillStyle=u?c.getPattern(m,this,ne,Xe.PathType.FILL):c,$.fillRect(0,0,r,p),J&&!u&&(this.cachedCanvases.delete("fillCanvas"),J.set(G,v.canvas)),{canvas:v.canvas,offsetX:Math.round(Z),offsetY:Math.round(te)}}setLineWidth(S){S!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=S,this.ctx.lineWidth=S}setLineCap(S){this.ctx.lineCap=b[S]}setLineJoin(S){this.ctx.lineJoin=V[S]}setMiterLimit(S){this.ctx.miterLimit=S}setDash(S,m){const r=this.ctx;r.setLineDash!==void 0&&(r.setLineDash(S),r.lineDashOffset=m)}setRenderingIntent(S){}setFlatness(S){}setGState(S){for(const[m,r]of S)switch(m){case"LW":this.setLineWidth(r);break;case"LC":this.setLineCap(r);break;case"LJ":this.setLineJoin(r);break;case"ML":this.setMiterLimit(r);break;case"D":this.setDash(r[0],r[1]);break;case"RI":this.setRenderingIntent(r);break;case"FL":this.setFlatness(r);break;case"Font":this.setFont(r[0],r[1]);break;case"CA":this.current.strokeAlpha=r;break;case"ca":this.current.fillAlpha=r,this.ctx.globalAlpha=r;break;case"BM":this.ctx.globalCompositeOperation=r;break;case"SMask":this.current.activeSMask=r?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(r);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const S=this.inSMaskMode;this.current.activeSMask&&!S?this.beginSMaskMode():!this.current.activeSMask&&S&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const S=this.ctx.canvas.width,m=this.ctx.canvas.height,r="smaskGroupAt"+this.groupLevel,p=this.cachedCanvases.getCanvas(r,S,m);this.suspendedCtx=this.ctx,this.ctx=p.context;const c=this.ctx;c.setTransform(...(0,Ue.getCurrentTransform)(this.suspendedCtx)),n(this.suspendedCtx,c),o(c,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),n(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(S){if(!this.current.activeSMask)return;S?(S[0]=Math.floor(S[0]),S[1]=Math.floor(S[1]),S[2]=Math.ceil(S[2]),S[3]=Math.ceil(S[3])):S=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const m=this.current.activeSMask,r=this.suspendedCtx;E(r,m,this.ctx,S),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(n(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const S=this.current;this.stateStack.push(S),this.current=S.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),n(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(S,m,r,p,c,u){this.ctx.transform(S,m,r,p,c,u),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(S,m,r){const p=this.ctx,c=this.current;let u=c.x,q=c.y,J,G;const W=(0,Ue.getCurrentTransform)(p),ce=W[0]===0&&W[3]===0||W[1]===0&&W[2]===0,_=ce?r.slice(0):null;for(let ie=0,L=0,oe=S.length;ie<oe;ie++)switch(S[ie]|0){case ye.OPS.rectangle:u=m[L++],q=m[L++];const T=m[L++],Q=m[L++],v=u+T,$=q+Q;p.moveTo(u,q),T===0||Q===0?p.lineTo(v,$):(p.lineTo(v,q),p.lineTo(v,$),p.lineTo(u,$)),ce||c.updateRectMinMax(W,[u,q,v,$]),p.closePath();break;case ye.OPS.moveTo:u=m[L++],q=m[L++],p.moveTo(u,q),ce||c.updatePathMinMax(W,u,q);break;case ye.OPS.lineTo:u=m[L++],q=m[L++],p.lineTo(u,q),ce||c.updatePathMinMax(W,u,q);break;case ye.OPS.curveTo:J=u,G=q,u=m[L+4],q=m[L+5],p.bezierCurveTo(m[L],m[L+1],m[L+2],m[L+3],u,q),c.updateCurvePathMinMax(W,J,G,m[L],m[L+1],m[L+2],m[L+3],u,q,_),L+=6;break;case ye.OPS.curveTo2:J=u,G=q,p.bezierCurveTo(u,q,m[L],m[L+1],m[L+2],m[L+3]),c.updateCurvePathMinMax(W,J,G,u,q,m[L],m[L+1],m[L+2],m[L+3],_),u=m[L+2],q=m[L+3],L+=4;break;case ye.OPS.curveTo3:J=u,G=q,u=m[L+2],q=m[L+3],p.bezierCurveTo(m[L],m[L+1],u,q,u,q),c.updateCurvePathMinMax(W,J,G,m[L],m[L+1],u,q,u,q,_),L+=4;break;case ye.OPS.closePath:p.closePath();break}ce&&c.updateScalingPathMinMax(W,_),c.setCurrentPoint(u,q)}closePath(){this.ctx.closePath()}stroke(S=!0){const m=this.ctx,r=this.current.strokeColor;m.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof r=="object"&&(r!=null&&r.getPattern)?(m.save(),m.strokeStyle=r.getPattern(m,this,(0,Ue.getCurrentTransformInverse)(m),Xe.PathType.STROKE),this.rescaleAndStroke(!1),m.restore()):this.rescaleAndStroke(!0)),S&&this.consumePath(this.current.getClippedPathBoundingBox()),m.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(S=!0){const m=this.ctx,r=this.current.fillColor,p=this.current.patternFill;let c=!1;p&&(m.save(),m.fillStyle=r.getPattern(m,this,(0,Ue.getCurrentTransformInverse)(m),Xe.PathType.FILL),c=!0);const u=this.current.getClippedPathBoundingBox();this.contentVisible&&u!==null&&(this.pendingEOFill?(m.fill("evenodd"),this.pendingEOFill=!1):m.fill()),c&&m.restore(),S&&this.consumePath(u)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=l}eoClip(){this.pendingClip=x}beginText(){this.current.textMatrix=ye.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const S=this.pendingTextPaths,m=this.ctx;if(S===void 0){m.beginPath();return}m.save(),m.beginPath();for(const r of S)m.setTransform(...r.transform),m.translate(r.x,r.y),r.addToPath(m,r.fontSize);m.restore(),m.clip(),m.beginPath(),delete this.pendingTextPaths}setCharSpacing(S){this.current.charSpacing=S}setWordSpacing(S){this.current.wordSpacing=S}setHScale(S){this.current.textHScale=S/100}setLeading(S){this.current.leading=-S}setFont(S,m){var W;const r=this.commonObjs.get(S),p=this.current;if(!r)throw new Error(`Can't find font for ${S}`);if(p.fontMatrix=r.fontMatrix||ye.FONT_IDENTITY_MATRIX,(p.fontMatrix[0]===0||p.fontMatrix[3]===0)&&(0,ye.warn)("Invalid font matrix for font "+S),m<0?(m=-m,p.fontDirection=-1):p.fontDirection=1,this.current.font=r,this.current.fontSize=m,r.isType3Font)return;const c=r.loadedName||"sans-serif",u=((W=r.systemFontInfo)==null?void 0:W.css)||`"${c}", ${r.fallbackName}`;let q="normal";r.black?q="900":r.bold&&(q="bold");const J=r.italic?"italic":"normal";let G=m;m<D?G=D:m>se&&(G=se),this.current.fontSizeScale=m/G,this.ctx.font=`${J} ${q} ${G}px ${u}`}setTextRenderingMode(S){this.current.textRenderingMode=S}setTextRise(S){this.current.textRise=S}moveText(S,m){this.current.x=this.current.lineX+=S,this.current.y=this.current.lineY+=m}setLeadingMoveText(S,m){this.setLeading(-m),this.moveText(S,m)}setTextMatrix(S,m,r,p,c,u){this.current.textMatrix=[S,m,r,p,c,u],this.current.textMatrixScale=Math.hypot(S,m),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(S,m,r,p){const c=this.ctx,u=this.current,q=u.font,J=u.textRenderingMode,G=u.fontSize/u.fontSizeScale,W=J&ye.TextRenderingMode.FILL_STROKE_MASK,ce=!!(J&ye.TextRenderingMode.ADD_TO_PATH_FLAG),_=u.patternFill&&!q.missingFile;let ie;(q.disableFontFace||ce||_)&&(ie=q.getPathGenerator(this.commonObjs,S)),q.disableFontFace||_?(c.save(),c.translate(m,r),c.beginPath(),ie(c,G),p&&c.setTransform(...p),(W===ye.TextRenderingMode.FILL||W===ye.TextRenderingMode.FILL_STROKE)&&c.fill(),(W===ye.TextRenderingMode.STROKE||W===ye.TextRenderingMode.FILL_STROKE)&&c.stroke(),c.restore()):((W===ye.TextRenderingMode.FILL||W===ye.TextRenderingMode.FILL_STROKE)&&c.fillText(S,m,r),(W===ye.TextRenderingMode.STROKE||W===ye.TextRenderingMode.FILL_STROKE)&&c.strokeText(S,m,r)),ce&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,Ue.getCurrentTransform)(c),x:m,y:r,fontSize:G,addToPath:ie})}get isFontSubpixelAAEnabled(){const{context:S}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);S.scale(1.5,1),S.fillText("I",0,10);const m=S.getImageData(0,0,10,10).data;let r=!1;for(let p=3;p<m.length;p+=4)if(m[p]>0&&m[p]<255){r=!0;break}return(0,ye.shadow)(this,"isFontSubpixelAAEnabled",r)}showText(S){const m=this.current,r=m.font;if(r.isType3Font)return this.showType3Text(S);const p=m.fontSize;if(p===0)return;const c=this.ctx,u=m.fontSizeScale,q=m.charSpacing,J=m.wordSpacing,G=m.fontDirection,W=m.textHScale*G,ce=S.length,_=r.vertical,ie=_?1:-1,L=r.defaultVMetrics,oe=p*m.fontMatrix[0],T=m.textRenderingMode===ye.TextRenderingMode.FILL&&!r.disableFontFace&&!m.patternFill;c.save(),c.transform(...m.textMatrix),c.translate(m.x,m.y+m.textRise),G>0?c.scale(W,-1):c.scale(W,1);let Q;if(m.patternFill){c.save();const ne=m.fillColor.getPattern(c,this,(0,Ue.getCurrentTransformInverse)(c),Xe.PathType.FILL);Q=(0,Ue.getCurrentTransform)(c),c.restore(),c.fillStyle=ne}let v=m.lineWidth;const $=m.textMatrixScale;if($===0||v===0){const ne=m.textRenderingMode&ye.TextRenderingMode.FILL_STROKE_MASK;(ne===ye.TextRenderingMode.STROKE||ne===ye.TextRenderingMode.FILL_STROKE)&&(v=this.getSinglePixelWidth())}else v/=$;if(u!==1&&(c.scale(u,u),v/=u),c.lineWidth=v,r.isInvalidPDFjsFont){const ne=[];let X=0;for(const re of S)ne.push(re.unicode),X+=re.width;c.fillText(ne.join(""),0,0),m.x+=X*oe*W,c.restore(),this.compose();return}let Z=0,te;for(te=0;te<ce;++te){const ne=S[te];if(typeof ne=="number"){Z+=ie*ne*p/1e3;continue}let X=!1;const re=(ne.isSpace?J:0)+q,ae=ne.fontChar,z=ne.accent;let le,ue,ge=ne.width;if(_){const me=ne.vmetric||L,fe=-(ne.vmetric?me[1]:ge*.5)*oe,xe=me[2]*oe;ge=me?-me[0]:ge,le=fe/u,ue=(Z+xe)/u}else le=Z/u,ue=0;if(r.remeasure&&ge>0){const me=c.measureText(ae).width*1e3/p*u;if(ge<me&&this.isFontSubpixelAAEnabled){const fe=ge/me;X=!0,c.save(),c.scale(fe,1),le/=fe}else ge!==me&&(le+=(ge-me)/2e3*p/u)}if(this.contentVisible&&(ne.isInFont||r.missingFile)){if(T&&!z)c.fillText(ae,le,ue);else if(this.paintChar(ae,le,ue,Q),z){const me=le+p*z.offset.x/u,fe=ue-p*z.offset.y/u;this.paintChar(z.fontChar,me,fe,Q)}}const ke=_?ge*oe-re*G:ge*oe+re*G;Z+=ke,X&&c.restore()}_?m.y-=Z:m.x+=Z*W,c.restore(),this.compose()}showType3Text(S){const m=this.ctx,r=this.current,p=r.font,c=r.fontSize,u=r.fontDirection,q=p.vertical?1:-1,J=r.charSpacing,G=r.wordSpacing,W=r.textHScale*u,ce=r.fontMatrix||ye.FONT_IDENTITY_MATRIX,_=S.length,ie=r.textRenderingMode===ye.TextRenderingMode.INVISIBLE;let L,oe,T,Q;if(!(ie||c===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,m.save(),m.transform(...r.textMatrix),m.translate(r.x,r.y),m.scale(W,u),L=0;L<_;++L){if(oe=S[L],typeof oe=="number"){Q=q*oe*c/1e3,this.ctx.translate(Q,0),r.x+=Q*W;continue}const v=(oe.isSpace?G:0)+J,$=p.charProcOperatorList[oe.operatorListId];if(!$){(0,ye.warn)(`Type3 character "${oe.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=oe,this.save(),m.scale(c,c),m.transform(...ce),this.executeOperatorList($),this.restore()),T=ye.Util.applyTransform([oe.width,0],ce)[0]*c+v,m.translate(T,0),r.x+=T*W}m.restore(),this.processingType3=null}}setCharWidth(S,m){}setCharWidthAndBounds(S,m,r,p,c,u){this.ctx.rect(r,p,c-r,u-p),this.ctx.clip(),this.endPath()}getColorN_Pattern(S){let m;if(S[0]==="TilingPattern"){const r=S[1],p=this.baseTransform||(0,Ue.getCurrentTransform)(this.ctx),c={createCanvasGraphics:u=>new U(u,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};m=new Xe.TilingPattern(S,r,this.ctx,c,p)}else m=this._getPattern(S[1],S[2]);return m}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(S,m,r){const p=ye.Util.makeHexColor(S,m,r);this.ctx.strokeStyle=p,this.current.strokeColor=p}setFillRGBColor(S,m,r){const p=ye.Util.makeHexColor(S,m,r);this.ctx.fillStyle=p,this.current.fillColor=p,this.current.patternFill=!1}_getPattern(S,m=null){let r;return this.cachedPatterns.has(S)?r=this.cachedPatterns.get(S):(r=(0,Xe.getShadingPattern)(this.getObject(S)),this.cachedPatterns.set(S,r)),m&&(r.matrix=m),r}shadingFill(S){if(!this.contentVisible)return;const m=this.ctx;this.save();const r=this._getPattern(S);m.fillStyle=r.getPattern(m,this,(0,Ue.getCurrentTransformInverse)(m),Xe.PathType.SHADING);const p=(0,Ue.getCurrentTransformInverse)(m);if(p){const{width:c,height:u}=m.canvas,[q,J,G,W]=ye.Util.getAxialAlignedBoundingBox([0,0,c,u],p);this.ctx.fillRect(q,J,G-q,W-J)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,ye.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,ye.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(S,m){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(S)&&S.length===6&&this.transform(...S),this.baseTransform=(0,Ue.getCurrentTransform)(this.ctx),m)){const r=m[2]-m[0],p=m[3]-m[1];this.ctx.rect(m[0],m[1],r,p),this.current.updateRectMinMax((0,Ue.getCurrentTransform)(this.ctx),m),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(S){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const m=this.ctx;S.isolated||(0,ye.info)("TODO: Support non-isolated groups."),S.knockout&&(0,ye.warn)("Knockout groups not supported.");const r=(0,Ue.getCurrentTransform)(m);if(S.matrix&&m.transform(...S.matrix),!S.bbox)throw new Error("Bounding box is required.");let p=ye.Util.getAxialAlignedBoundingBox(S.bbox,(0,Ue.getCurrentTransform)(m));const c=[0,0,m.canvas.width,m.canvas.height];p=ye.Util.intersect(p,c)||[0,0,0,0];const u=Math.floor(p[0]),q=Math.floor(p[1]);let J=Math.max(Math.ceil(p[2])-u,1),G=Math.max(Math.ceil(p[3])-q,1),W=1,ce=1;J>i&&(W=J/i,J=i),G>i&&(ce=G/i,G=i),this.current.startNewPathAndClipBox([0,0,J,G]);let _="groupAt"+this.groupLevel;S.smask&&(_+="_smask_"+this.smaskCounter++%2);const ie=this.cachedCanvases.getCanvas(_,J,G),L=ie.context;L.scale(1/W,1/ce),L.translate(-u,-q),L.transform(...r),S.smask?this.smaskStack.push({canvas:ie.canvas,context:L,offsetX:u,offsetY:q,scaleX:W,scaleY:ce,subtype:S.smask.subtype,backdrop:S.smask.backdrop,transferMap:S.smask.transferMap||null,startTransformInverse:null}):(m.setTransform(1,0,0,1,0,0),m.translate(u,q),m.scale(W,ce),m.save()),n(m,L),this.ctx=L,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(m),this.groupLevel++}endGroup(S){if(!this.contentVisible)return;this.groupLevel--;const m=this.ctx,r=this.groupStack.pop();if(this.ctx=r,this.ctx.imageSmoothingEnabled=!1,S.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const p=(0,Ue.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...p);const c=ye.Util.getAxialAlignedBoundingBox([0,0,m.canvas.width,m.canvas.height],p);this.ctx.drawImage(m.canvas,0,0),this.ctx.restore(),this.compose(c)}}beginAnnotation(S,m,r,p,c){if(Re(this,s,jn).call(this),I(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(m)&&m.length===4){const u=m[2]-m[0],q=m[3]-m[1];if(c&&this.annotationCanvasMap){r=r.slice(),r[4]-=m[0],r[5]-=m[1],m=m.slice(),m[0]=m[1]=0,m[2]=u,m[3]=q;const[J,G]=ye.Util.singularValueDecompose2dScale((0,Ue.getCurrentTransform)(this.ctx)),{viewportScale:W}=this,ce=Math.ceil(u*this.outputScaleX*W),_=Math.ceil(q*this.outputScaleY*W);this.annotationCanvas=this.canvasFactory.create(ce,_);const{canvas:ie,context:L}=this.annotationCanvas;this.annotationCanvasMap.set(S,ie),this.annotationCanvas.savedCtx=this.ctx,this.ctx=L,this.ctx.save(),this.ctx.setTransform(J,0,0,-G,0,q*G),I(this.ctx)}else I(this.ctx),this.ctx.rect(m[0],m[1],u,q),this.ctx.clip(),this.endPath()}this.current=new O(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...r),this.transform(...p)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),Re(this,F,Jn).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(S){if(!this.contentVisible)return;const m=S.count;S=this.getObject(S.data,S),S.count=m;const r=this.ctx,p=this.processingType3;if(p&&(p.compiled===void 0&&(p.compiled=C(S)),p.compiled)){p.compiled(r);return}const c=this._createMaskCanvas(S),u=c.canvas;r.save(),r.setTransform(1,0,0,1,0,0),r.drawImage(u,c.offsetX,c.offsetY),r.restore(),this.compose()}paintImageMaskXObjectRepeat(S,m,r=0,p=0,c,u){if(!this.contentVisible)return;S=this.getObject(S.data,S);const q=this.ctx;q.save();const J=(0,Ue.getCurrentTransform)(q);q.transform(m,r,p,c,0,0);const G=this._createMaskCanvas(S);q.setTransform(1,0,0,1,G.offsetX-J[4],G.offsetY-J[5]);for(let W=0,ce=u.length;W<ce;W+=2){const _=ye.Util.transform(J,[m,r,p,c,u[W],u[W+1]]),[ie,L]=ye.Util.applyTransform([0,0],_);q.drawImage(G.canvas,ie,L)}q.restore(),this.compose()}paintImageMaskXObjectGroup(S){if(!this.contentVisible)return;const m=this.ctx,r=this.current.fillColor,p=this.current.patternFill;for(const c of S){const{data:u,width:q,height:J,transform:G}=c,W=this.cachedCanvases.getCanvas("maskCanvas",q,J),ce=W.context;ce.save();const _=this.getObject(u,c);A(ce,_),ce.globalCompositeOperation="source-in",ce.fillStyle=p?r.getPattern(ce,this,(0,Ue.getCurrentTransformInverse)(m),Xe.PathType.FILL):r,ce.fillRect(0,0,q,J),ce.restore(),m.save(),m.transform(...G),m.scale(1,-1),j(m,W.canvas,0,0,q,J,0,-1,1,1),m.restore()}this.compose()}paintImageXObject(S){if(!this.contentVisible)return;const m=this.getObject(S);if(!m){(0,ye.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(m)}paintImageXObjectRepeat(S,m,r,p){if(!this.contentVisible)return;const c=this.getObject(S);if(!c){(0,ye.warn)("Dependent image isn't ready yet");return}const u=c.width,q=c.height,J=[];for(let G=0,W=p.length;G<W;G+=2)J.push({transform:[m,0,0,r,p[G],p[G+1]],x:0,y:0,w:u,h:q});this.paintInlineImageXObjectGroup(c,J)}applyTransferMapsToCanvas(S){return this.current.transferMaps!=="none"&&(S.filter=this.current.transferMaps,S.drawImage(S.canvas,0,0),S.filter="none"),S.canvas}applyTransferMapsToBitmap(S){if(this.current.transferMaps==="none")return S.bitmap;const{bitmap:m,width:r,height:p}=S,c=this.cachedCanvases.getCanvas("inlineImage",r,p),u=c.context;return u.filter=this.current.transferMaps,u.drawImage(m,0,0),u.filter="none",c.canvas}paintInlineImageXObject(S){if(!this.contentVisible)return;const m=S.width,r=S.height,p=this.ctx;if(this.save(),!ye.isNodeJS){const{filter:q}=p;q!=="none"&&q!==""&&(p.filter="none")}p.scale(1/m,-1/r);let c;if(S.bitmap)c=this.applyTransferMapsToBitmap(S);else if(typeof HTMLElement=="function"&&S instanceof HTMLElement||!S.data)c=S;else{const J=this.cachedCanvases.getCanvas("inlineImage",m,r).context;d(J,S),c=this.applyTransferMapsToCanvas(J)}const u=this._scaleImage(c,(0,Ue.getCurrentTransformInverse)(p));p.imageSmoothingEnabled=M((0,Ue.getCurrentTransform)(p),S.interpolate),j(p,u.img,0,0,u.paintWidth,u.paintHeight,0,-r,m,r),this.compose(),this.restore()}paintInlineImageXObjectGroup(S,m){if(!this.contentVisible)return;const r=this.ctx;let p;if(S.bitmap)p=S.bitmap;else{const c=S.width,u=S.height,J=this.cachedCanvases.getCanvas("inlineImage",c,u).context;d(J,S),p=this.applyTransferMapsToCanvas(J)}for(const c of m)r.save(),r.transform(...c.transform),r.scale(1,-1),j(r,p,c.x,c.y,c.w,c.h,0,-1,1,1),r.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(S){}markPointProps(S,m){}beginMarkedContent(S){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(S,m){S==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(m)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(S){const m=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(S);const r=this.ctx;this.pendingClip&&(m||(this.pendingClip===x?r.clip("evenodd"):r.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),r.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const S=(0,Ue.getCurrentTransform)(this.ctx);if(S[1]===0&&S[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(S[0]),Math.abs(S[3]));else{const m=Math.abs(S[0]*S[3]-S[2]*S[1]),r=Math.hypot(S[0],S[2]),p=Math.hypot(S[1],S[3]);this._cachedGetSinglePixelWidth=Math.max(r,p)/m}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:S}=this.current,{a:m,b:r,c:p,d:c}=this.ctx.getTransform();let u,q;if(r===0&&p===0){const J=Math.abs(m),G=Math.abs(c);if(J===G)if(S===0)u=q=1/J;else{const W=J*S;u=q=W<1?1/W:1}else if(S===0)u=1/J,q=1/G;else{const W=J*S,ce=G*S;u=W<1?1/W:1,q=ce<1?1/ce:1}}else{const J=Math.abs(m*c-r*p),G=Math.hypot(m,r),W=Math.hypot(p,c);if(S===0)u=W/J,q=G/J;else{const ce=S*J;u=W>ce?W/ce:1,q=G>ce?G/ce:1}}this._cachedScaleForStroking[0]=u,this._cachedScaleForStroking[1]=q}return this._cachedScaleForStroking}rescaleAndStroke(S){const{ctx:m}=this,{lineWidth:r}=this.current,[p,c]=this.getScaleForStroking();if(m.lineWidth=r||1,p===1&&c===1){m.stroke();return}const u=m.getLineDash();if(S&&m.save(),m.scale(p,c),u.length>0){const q=Math.max(p,c);m.setLineDash(u.map(J=>J/q)),m.lineDashOffset/=q}m.stroke(),S&&m.restore()}isContentVisible(){for(let S=this.markedContentStack.length-1;S>=0;S--)if(!this.markedContentStack[S].visible)return!1;return!0}};s=new WeakSet,jn=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},F=new WeakSet,Jn=function(){if(this.pageColors){const S=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(S!=="none"){const m=this.ctx.filter;this.ctx.filter=S,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=m}}};let H=U;qe.CanvasGraphics=H;for(const g in ye.OPS)H.prototype[g]!==void 0&&(H.prototype[ye.OPS[g]]=H.prototype[g])},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.TilingPattern=qe.PathType=void 0,qe.getShadingPattern=t;var ye=Qe(1),Ue=Qe(6);const Xe={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};qe.PathType=Xe;function Fe(C,O){if(!O)return;const d=O[2]-O[0],A=O[3]-O[1],n=new Path2D;n.rect(O[0],O[1],d,A),C.clip(n)}class D{constructor(){this.constructor===D&&(0,ye.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,ye.unreachable)("Abstract method `getPattern` called.")}}class se extends D{constructor(O){super(),this._type=O[1],this._bbox=O[2],this._colorStops=O[3],this._p0=O[4],this._p1=O[5],this._r0=O[6],this._r1=O[7],this.matrix=null}_createGradient(O){let d;this._type==="axial"?d=O.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(d=O.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const A of this._colorStops)d.addColorStop(A[0],A[1]);return d}getPattern(O,d,A,n){let I;if(n===Xe.STROKE||n===Xe.FILL){const k=d.current.getClippedPathBoundingBox(n,(0,Ue.getCurrentTransform)(O))||[0,0,0,0],y=Math.ceil(k[2]-k[0])||1,f=Math.ceil(k[3]-k[1])||1,R=d.cachedCanvases.getCanvas("pattern",y,f,!0),E=R.context;E.clearRect(0,0,E.canvas.width,E.canvas.height),E.beginPath(),E.rect(0,0,E.canvas.width,E.canvas.height),E.translate(-k[0],-k[1]),A=ye.Util.transform(A,[1,0,0,1,k[0],k[1]]),E.transform(...d.baseTransform),this.matrix&&E.transform(...this.matrix),Fe(E,this._bbox),E.fillStyle=this._createGradient(E),E.fill(),I=O.createPattern(R.canvas,"no-repeat");const M=new DOMMatrix(A);I.setTransform(M)}else Fe(O,this._bbox),I=this._createGradient(O);return I}}function i(C,O,d,A,n,I,k,y){const f=O.coords,R=O.colors,E=C.data,M=C.width*4;let b;f[d+1]>f[A+1]&&(b=d,d=A,A=b,b=I,I=k,k=b),f[A+1]>f[n+1]&&(b=A,A=n,n=b,b=k,k=y,y=b),f[d+1]>f[A+1]&&(b=d,d=A,A=b,b=I,I=k,k=b);const V=(f[d]+O.offsetX)*O.scaleX,l=(f[d+1]+O.offsetY)*O.scaleY,x=(f[A]+O.offsetX)*O.scaleX,H=(f[A+1]+O.offsetY)*O.scaleY,s=(f[n]+O.offsetX)*O.scaleX,h=(f[n+1]+O.offsetY)*O.scaleY;if(l>=h)return;const F=R[I],N=R[I+1],U=R[I+2],g=R[k],S=R[k+1],m=R[k+2],r=R[y],p=R[y+1],c=R[y+2],u=Math.round(l),q=Math.round(h);let J,G,W,ce,_,ie,L,oe;for(let T=u;T<=q;T++){if(T<H){const te=T<l?0:(l-T)/(l-H);J=V-(V-x)*te,G=F-(F-g)*te,W=N-(N-S)*te,ce=U-(U-m)*te}else{let te;T>h?te=1:H===h?te=0:te=(H-T)/(H-h),J=x-(x-s)*te,G=g-(g-r)*te,W=S-(S-p)*te,ce=m-(m-c)*te}let Q;T<l?Q=0:T>h?Q=1:Q=(l-T)/(l-h),_=V-(V-s)*Q,ie=F-(F-r)*Q,L=N-(N-p)*Q,oe=U-(U-c)*Q;const v=Math.round(Math.min(J,_)),$=Math.round(Math.max(J,_));let Z=M*T+v*4;for(let te=v;te<=$;te++)Q=(J-te)/(J-_),Q<0?Q=0:Q>1&&(Q=1),E[Z++]=G-(G-ie)*Q|0,E[Z++]=W-(W-L)*Q|0,E[Z++]=ce-(ce-oe)*Q|0,E[Z++]=255}}function w(C,O,d){const A=O.coords,n=O.colors;let I,k;switch(O.type){case"lattice":const y=O.verticesPerRow,f=Math.floor(A.length/y)-1,R=y-1;for(I=0;I<f;I++){let E=I*y;for(let M=0;M<R;M++,E++)i(C,d,A[E],A[E+1],A[E+y],n[E],n[E+1],n[E+y]),i(C,d,A[E+y+1],A[E+1],A[E+y],n[E+y+1],n[E+1],n[E+y])}break;case"triangles":for(I=0,k=A.length;I<k;I+=3)i(C,d,A[I],A[I+1],A[I+2],n[I],n[I+1],n[I+2]);break;default:throw new Error("illegal figure")}}class P extends D{constructor(O){super(),this._coords=O[2],this._colors=O[3],this._figures=O[4],this._bounds=O[5],this._bbox=O[7],this._background=O[8],this.matrix=null}_createMeshCanvas(O,d,A){const y=Math.floor(this._bounds[0]),f=Math.floor(this._bounds[1]),R=Math.ceil(this._bounds[2])-y,E=Math.ceil(this._bounds[3])-f,M=Math.min(Math.ceil(Math.abs(R*O[0]*1.1)),3e3),b=Math.min(Math.ceil(Math.abs(E*O[1]*1.1)),3e3),V=R/M,l=E/b,x={coords:this._coords,colors:this._colors,offsetX:-y,offsetY:-f,scaleX:1/V,scaleY:1/l},H=M+2*2,s=b+2*2,h=A.getCanvas("mesh",H,s,!1),F=h.context,N=F.createImageData(M,b);if(d){const g=N.data;for(let S=0,m=g.length;S<m;S+=4)g[S]=d[0],g[S+1]=d[1],g[S+2]=d[2],g[S+3]=255}for(const g of this._figures)w(N,g,x);return F.putImageData(N,2,2),{canvas:h.canvas,offsetX:y-2*V,offsetY:f-2*l,scaleX:V,scaleY:l}}getPattern(O,d,A,n){Fe(O,this._bbox);let I;if(n===Xe.SHADING)I=ye.Util.singularValueDecompose2dScale((0,Ue.getCurrentTransform)(O));else if(I=ye.Util.singularValueDecompose2dScale(d.baseTransform),this.matrix){const y=ye.Util.singularValueDecompose2dScale(this.matrix);I=[I[0]*y[0],I[1]*y[1]]}const k=this._createMeshCanvas(I,n===Xe.SHADING?null:this._background,d.cachedCanvases);return n!==Xe.SHADING&&(O.setTransform(...d.baseTransform),this.matrix&&O.transform(...this.matrix)),O.translate(k.offsetX,k.offsetY),O.scale(k.scaleX,k.scaleY),O.createPattern(k.canvas,"no-repeat")}}class e extends D{getPattern(){return"hotpink"}}function t(C){switch(C[0]){case"RadialAxial":return new se(C);case"Mesh":return new P(C);case"Dummy":return new e}throw new Error(`Unknown IR type: ${C[0]}`)}const o={COLORED:1,UNCOLORED:2},j=class j{constructor(O,d,A,n,I){this.operatorList=O[2],this.matrix=O[3]||[1,0,0,1,0,0],this.bbox=O[4],this.xstep=O[5],this.ystep=O[6],this.paintType=O[7],this.tilingType=O[8],this.color=d,this.ctx=A,this.canvasGraphicsFactory=n,this.baseTransform=I}createPatternCanvas(O){const d=this.operatorList,A=this.bbox,n=this.xstep,I=this.ystep,k=this.paintType,y=this.tilingType,f=this.color,R=this.canvasGraphicsFactory;(0,ye.info)("TilingType: "+y);const E=A[0],M=A[1],b=A[2],V=A[3],l=ye.Util.singularValueDecompose2dScale(this.matrix),x=ye.Util.singularValueDecompose2dScale(this.baseTransform),H=[l[0]*x[0],l[1]*x[1]],s=this.getSizeAndScale(n,this.ctx.canvas.width,H[0]),h=this.getSizeAndScale(I,this.ctx.canvas.height,H[1]),F=O.cachedCanvases.getCanvas("pattern",s.size,h.size,!0),N=F.context,U=R.createCanvasGraphics(N);U.groupLevel=O.groupLevel,this.setFillAndStrokeStyleToContext(U,k,f);let g=E,S=M,m=b,r=V;return E<0&&(g=0,m+=Math.abs(E)),M<0&&(S=0,r+=Math.abs(M)),N.translate(-(s.scale*g),-(h.scale*S)),U.transform(s.scale,0,0,h.scale,0,0),N.save(),this.clipBbox(U,g,S,m,r),U.baseTransform=(0,Ue.getCurrentTransform)(U.ctx),U.executeOperatorList(d),U.endDrawing(),{canvas:F.canvas,scaleX:s.scale,scaleY:h.scale,offsetX:g,offsetY:S}}getSizeAndScale(O,d,A){O=Math.abs(O);const n=Math.max(j.MAX_PATTERN_SIZE,d);let I=Math.ceil(O*A);return I>=n?I=n:A=I/O,{scale:A,size:I}}clipBbox(O,d,A,n,I){const k=n-d,y=I-A;O.ctx.rect(d,A,k,y),O.current.updateRectMinMax((0,Ue.getCurrentTransform)(O.ctx),[d,A,n,I]),O.clip(),O.endPath()}setFillAndStrokeStyleToContext(O,d,A){const n=O.ctx,I=O.current;switch(d){case o.COLORED:const k=this.ctx;n.fillStyle=k.fillStyle,n.strokeStyle=k.strokeStyle,I.fillColor=k.fillStyle,I.strokeColor=k.strokeStyle;break;case o.UNCOLORED:const y=ye.Util.makeHexColor(A[0],A[1],A[2]);n.fillStyle=y,n.strokeStyle=y,I.fillColor=y,I.strokeColor=y;break;default:throw new ye.FormatError(`Unsupported paint type: ${d}`)}}getPattern(O,d,A,n){let I=A;n!==Xe.SHADING&&(I=ye.Util.transform(I,d.baseTransform),this.matrix&&(I=ye.Util.transform(I,this.matrix)));const k=this.createPatternCanvas(d);let y=new DOMMatrix(I);y=y.translate(k.offsetX,k.offsetY),y=y.scale(1/k.scaleX,1/k.scaleY);const f=O.createPattern(k.canvas,"repeat");return f.setTransform(y),f}};jt(j,"MAX_PATTERN_SIZE",3e3);let K=j;qe.TilingPattern=K},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.convertBlackAndWhiteToRGBA=Xe,qe.convertToRGBA=Ue,qe.grayToRGBA=D;var ye=Qe(1);function Ue(se){switch(se.kind){case ye.ImageKind.GRAYSCALE_1BPP:return Xe(se);case ye.ImageKind.RGB_24BPP:return Fe(se)}return null}function Xe({src:se,srcPos:i=0,dest:w,width:P,height:e,nonBlackColor:t=4294967295,inverseDecode:o=!1}){const K=ye.FeatureTest.isLittleEndian?4278190080:255,[j,C]=o?[t,K]:[K,t],O=P>>3,d=P&7,A=se.length;w=new Uint32Array(w.buffer);let n=0;for(let I=0;I<e;I++){for(const y=i+O;i<y;i++){const f=i<A?se[i]:255;w[n++]=f&128?C:j,w[n++]=f&64?C:j,w[n++]=f&32?C:j,w[n++]=f&16?C:j,w[n++]=f&8?C:j,w[n++]=f&4?C:j,w[n++]=f&2?C:j,w[n++]=f&1?C:j}if(d===0)continue;const k=i<A?se[i++]:255;for(let y=0;y<d;y++)w[n++]=k&1<<7-y?C:j}return{srcPos:i,destPos:n}}function Fe({src:se,srcPos:i=0,dest:w,destPos:P=0,width:e,height:t}){let o=0;const K=se.length>>2,j=new Uint32Array(se.buffer,i,K);if(ye.FeatureTest.isLittleEndian){for(;o<K-2;o+=3,P+=4){const C=j[o],O=j[o+1],d=j[o+2];w[P]=C|4278190080,w[P+1]=C>>>24|O<<8|4278190080,w[P+2]=O>>>16|d<<16|4278190080,w[P+3]=d>>>8|4278190080}for(let C=o*4,O=se.length;C<O;C+=3)w[P++]=se[C]|se[C+1]<<8|se[C+2]<<16|4278190080}else{for(;o<K-2;o+=3,P+=4){const C=j[o],O=j[o+1],d=j[o+2];w[P]=C|255,w[P+1]=C<<24|O>>>8|255,w[P+2]=O<<16|d>>>16|255,w[P+3]=d<<8|255}for(let C=o*4,O=se.length;C<O;C+=3)w[P++]=se[C]<<24|se[C+1]<<16|se[C+2]<<8|255}return{srcPos:i,destPos:P}}function D(se,i){if(ye.FeatureTest.isLittleEndian)for(let w=0,P=se.length;w<P;w++)i[w]=se[w]*65793|4278190080;else for(let w=0,P=se.length;w<P;w++)i[w]=se[w]*16843008|255}},(it,qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.GlobalWorkerOptions=void 0;const Qe=Object.create(null);qe.GlobalWorkerOptions=Qe,Qe.workerPort=null,Qe.workerSrc=""},(it,qe,Qe)=>{var se,Ia,w,ya,e,Gi;Object.defineProperty(qe,"__esModule",{value:!0}),qe.MessageHandler=void 0;var ye=Qe(1);const Ue={UNKNOWN:0,DATA:1,ERROR:2},Xe={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function Fe(o){switch(o instanceof Error||typeof o=="object"&&o!==null||(0,ye.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),o.name){case"AbortException":return new ye.AbortException(o.message);case"MissingPDFException":return new ye.MissingPDFException(o.message);case"PasswordException":return new ye.PasswordException(o.message,o.code);case"UnexpectedResponseException":return new ye.UnexpectedResponseException(o.message,o.status);case"UnknownErrorException":return new ye.UnknownErrorException(o.message,o.details);default:return new ye.UnknownErrorException(o.message,o.toString())}}class D{constructor(K,j,C){De(this,se);De(this,w);De(this,e);this.sourceName=K,this.targetName=j,this.comObj=C,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=O=>{const d=O.data;if(d.targetName!==this.sourceName)return;if(d.stream){Re(this,w,ya).call(this,d);return}if(d.callback){const n=d.callbackId,I=this.callbackCapabilities[n];if(!I)throw new Error(`Cannot resolve callback ${n}`);if(delete this.callbackCapabilities[n],d.callback===Ue.DATA)I.resolve(d.data);else if(d.callback===Ue.ERROR)I.reject(Fe(d.reason));else throw new Error("Unexpected callback case");return}const A=this.actionHandler[d.action];if(!A)throw new Error(`Unknown action from worker: ${d.action}`);if(d.callbackId){const n=this.sourceName,I=d.sourceName;new Promise(function(k){k(A(d.data))}).then(function(k){C.postMessage({sourceName:n,targetName:I,callback:Ue.DATA,callbackId:d.callbackId,data:k})},function(k){C.postMessage({sourceName:n,targetName:I,callback:Ue.ERROR,callbackId:d.callbackId,reason:Fe(k)})});return}if(d.streamId){Re(this,se,Ia).call(this,d);return}A(d.data)},C.addEventListener("message",this._onComObjOnMessage)}on(K,j){const C=this.actionHandler;if(C[K])throw new Error(`There is already an actionName called "${K}"`);C[K]=j}send(K,j,C){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:K,data:j},C)}sendWithPromise(K,j,C){const O=this.callbackId++,d=new ye.PromiseCapability;this.callbackCapabilities[O]=d;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:K,callbackId:O,data:j},C)}catch(A){d.reject(A)}return d.promise}sendWithStream(K,j,C,O){const d=this.streamId++,A=this.sourceName,n=this.targetName,I=this.comObj;return new ReadableStream({start:k=>{const y=new ye.PromiseCapability;return this.streamControllers[d]={controller:k,startCall:y,pullCall:null,cancelCall:null,isClosed:!1},I.postMessage({sourceName:A,targetName:n,action:K,streamId:d,data:j,desiredSize:k.desiredSize},O),y.promise},pull:k=>{const y=new ye.PromiseCapability;return this.streamControllers[d].pullCall=y,I.postMessage({sourceName:A,targetName:n,stream:Xe.PULL,streamId:d,desiredSize:k.desiredSize}),y.promise},cancel:k=>{(0,ye.assert)(k instanceof Error,"cancel must have a valid reason");const y=new ye.PromiseCapability;return this.streamControllers[d].cancelCall=y,this.streamControllers[d].isClosed=!0,I.postMessage({sourceName:A,targetName:n,stream:Xe.CANCEL,streamId:d,reason:Fe(k)}),y.promise}},C)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}se=new WeakSet,Ia=function(K){const j=K.streamId,C=this.sourceName,O=K.sourceName,d=this.comObj,A=this,n=this.actionHandler[K.action],I={enqueue(k,y=1,f){if(this.isCancelled)return;const R=this.desiredSize;this.desiredSize-=y,R>0&&this.desiredSize<=0&&(this.sinkCapability=new ye.PromiseCapability,this.ready=this.sinkCapability.promise),d.postMessage({sourceName:C,targetName:O,stream:Xe.ENQUEUE,streamId:j,chunk:k},f)},close(){this.isCancelled||(this.isCancelled=!0,d.postMessage({sourceName:C,targetName:O,stream:Xe.CLOSE,streamId:j}),delete A.streamSinks[j])},error(k){(0,ye.assert)(k instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,d.postMessage({sourceName:C,targetName:O,stream:Xe.ERROR,streamId:j,reason:Fe(k)}))},sinkCapability:new ye.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:K.desiredSize,ready:null};I.sinkCapability.resolve(),I.ready=I.sinkCapability.promise,this.streamSinks[j]=I,new Promise(function(k){k(n(K.data,I))}).then(function(){d.postMessage({sourceName:C,targetName:O,stream:Xe.START_COMPLETE,streamId:j,success:!0})},function(k){d.postMessage({sourceName:C,targetName:O,stream:Xe.START_COMPLETE,streamId:j,reason:Fe(k)})})},w=new WeakSet,ya=function(K){const j=K.streamId,C=this.sourceName,O=K.sourceName,d=this.comObj,A=this.streamControllers[j],n=this.streamSinks[j];switch(K.stream){case Xe.START_COMPLETE:K.success?A.startCall.resolve():A.startCall.reject(Fe(K.reason));break;case Xe.PULL_COMPLETE:K.success?A.pullCall.resolve():A.pullCall.reject(Fe(K.reason));break;case Xe.PULL:if(!n){d.postMessage({sourceName:C,targetName:O,stream:Xe.PULL_COMPLETE,streamId:j,success:!0});break}n.desiredSize<=0&&K.desiredSize>0&&n.sinkCapability.resolve(),n.desiredSize=K.desiredSize,new Promise(function(I){var k;I((k=n.onPull)==null?void 0:k.call(n))}).then(function(){d.postMessage({sourceName:C,targetName:O,stream:Xe.PULL_COMPLETE,streamId:j,success:!0})},function(I){d.postMessage({sourceName:C,targetName:O,stream:Xe.PULL_COMPLETE,streamId:j,reason:Fe(I)})});break;case Xe.ENQUEUE:if((0,ye.assert)(A,"enqueue should have stream controller"),A.isClosed)break;A.controller.enqueue(K.chunk);break;case Xe.CLOSE:if((0,ye.assert)(A,"close should have stream controller"),A.isClosed)break;A.isClosed=!0,A.controller.close(),Re(this,e,Gi).call(this,A,j);break;case Xe.ERROR:(0,ye.assert)(A,"error should have stream controller"),A.controller.error(Fe(K.reason)),Re(this,e,Gi).call(this,A,j);break;case Xe.CANCEL_COMPLETE:K.success?A.cancelCall.resolve():A.cancelCall.reject(Fe(K.reason)),Re(this,e,Gi).call(this,A,j);break;case Xe.CANCEL:if(!n)break;new Promise(function(I){var k;I((k=n.onCancel)==null?void 0:k.call(n,Fe(K.reason)))}).then(function(){d.postMessage({sourceName:C,targetName:O,stream:Xe.CANCEL_COMPLETE,streamId:j,success:!0})},function(I){d.postMessage({sourceName:C,targetName:O,stream:Xe.CANCEL_COMPLETE,streamId:j,reason:Fe(I)})}),n.sinkCapability.reject(Fe(K.reason)),n.isCancelled=!0,delete this.streamSinks[j];break;default:throw new Error("Unexpected stream case")}},e=new WeakSet,Gi=function(K,j){return rt(this,null,function*(){var C,O,d;yield Promise.allSettled([(C=K.startCall)==null?void 0:C.promise,(O=K.pullCall)==null?void 0:O.promise,(d=K.cancelCall)==null?void 0:d.promise]),delete this.streamControllers[j]})},qe.MessageHandler=D},(it,qe,Qe)=>{var Xe,Fe;Object.defineProperty(qe,"__esModule",{value:!0}),qe.Metadata=void 0;var ye=Qe(1);class Ue{constructor({parsedData:se,rawData:i}){De(this,Xe,void 0);De(this,Fe,void 0);Ne(this,Xe,se),Ne(this,Fe,i)}getRaw(){return he(this,Fe)}get(se){var i;return(i=he(this,Xe).get(se))!=null?i:null}getAll(){return(0,ye.objectFromMap)(he(this,Xe))}has(se){return he(this,Xe).has(se)}}Xe=new WeakMap,Fe=new WeakMap,qe.Metadata=Ue},(it,qe,Qe)=>{var se,i,w,P,e,t,Tn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.OptionalContentConfig=void 0;var ye=Qe(1),Ue=Qe(8);const Xe=Symbol("INTERNAL");class Fe{constructor(j,C){De(this,se,!0);this.name=j,this.intent=C}get visible(){return he(this,se)}_setVisible(j,C){j!==Xe&&(0,ye.unreachable)("Internal method `_setVisible` called."),Ne(this,se,C)}}se=new WeakMap;class D{constructor(j){De(this,t);De(this,i,null);De(this,w,new Map);De(this,P,null);De(this,e,null);if(this.name=null,this.creator=null,j!==null){this.name=j.name,this.creator=j.creator,Ne(this,e,j.order);for(const C of j.groups)he(this,w).set(C.id,new Fe(C.name,C.intent));if(j.baseState==="OFF")for(const C of he(this,w).values())C._setVisible(Xe,!1);for(const C of j.on)he(this,w).get(C)._setVisible(Xe,!0);for(const C of j.off)he(this,w).get(C)._setVisible(Xe,!1);Ne(this,P,this.getHash())}}isVisible(j){if(he(this,w).size===0)return!0;if(!j)return(0,ye.warn)("Optional content group not defined."),!0;if(j.type==="OCG")return he(this,w).has(j.id)?he(this,w).get(j.id).visible:((0,ye.warn)(`Optional content group not found: ${j.id}`),!0);if(j.type==="OCMD"){if(j.expression)return Re(this,t,Tn).call(this,j.expression);if(!j.policy||j.policy==="AnyOn"){for(const C of j.ids){if(!he(this,w).has(C))return(0,ye.warn)(`Optional content group not found: ${C}`),!0;if(he(this,w).get(C).visible)return!0}return!1}else if(j.policy==="AllOn"){for(const C of j.ids){if(!he(this,w).has(C))return(0,ye.warn)(`Optional content group not found: ${C}`),!0;if(!he(this,w).get(C).visible)return!1}return!0}else if(j.policy==="AnyOff"){for(const C of j.ids){if(!he(this,w).has(C))return(0,ye.warn)(`Optional content group not found: ${C}`),!0;if(!he(this,w).get(C).visible)return!0}return!1}else if(j.policy==="AllOff"){for(const C of j.ids){if(!he(this,w).has(C))return(0,ye.warn)(`Optional content group not found: ${C}`),!0;if(he(this,w).get(C).visible)return!1}return!0}return(0,ye.warn)(`Unknown optional content policy ${j.policy}.`),!0}return(0,ye.warn)(`Unknown group type ${j.type}.`),!0}setVisibility(j,C=!0){if(!he(this,w).has(j)){(0,ye.warn)(`Optional content group not found: ${j}`);return}he(this,w).get(j)._setVisible(Xe,!!C),Ne(this,i,null)}get hasInitialVisibility(){return he(this,P)===null||this.getHash()===he(this,P)}getOrder(){return he(this,w).size?he(this,e)?he(this,e).slice():[...he(this,w).keys()]:null}getGroups(){return he(this,w).size>0?(0,ye.objectFromMap)(he(this,w)):null}getGroup(j){return he(this,w).get(j)||null}getHash(){if(he(this,i)!==null)return he(this,i);const j=new Ue.MurmurHash3_64;for(const[C,O]of he(this,w))j.update(`${C}:${O.visible}`);return Ne(this,i,j.hexdigest())}}i=new WeakMap,w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakSet,Tn=function(j){const C=j.length;if(C<2)return!0;const O=j[0];for(let d=1;d<C;d++){const A=j[d];let n;if(Array.isArray(A))n=Re(this,t,Tn).call(this,A);else if(he(this,w).has(A))n=he(this,w).get(A).visible;else return(0,ye.warn)(`Optional content group not found: ${A}`),!0;switch(O){case"And":if(!n)return!1;break;case"Or":if(n)return!0;break;case"Not":return!n;default:return!0}}return O==="And"},qe.OptionalContentConfig=D},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.PDFDataTransportStream=void 0;var ye=Qe(1),Ue=Qe(6);class Xe{constructor({length:i,initialData:w,progressiveDone:P=!1,contentDispositionFilename:e=null,disableRange:t=!1,disableStream:o=!1},K){if((0,ye.assert)(K,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=P,this._contentDispositionFilename=e,(w==null?void 0:w.length)>0){const j=w instanceof Uint8Array&&w.byteLength===w.buffer.byteLength?w.buffer:new Uint8Array(w).buffer;this._queuedChunks.push(j)}this._pdfDataRangeTransport=K,this._isStreamingSupported=!o,this._isRangeSupported=!t,this._contentLength=i,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((j,C)=>{this._onReceiveData({begin:j,chunk:C})}),this._pdfDataRangeTransport.addProgressListener((j,C)=>{this._onProgress({loaded:j,total:C})}),this._pdfDataRangeTransport.addProgressiveReadListener(j=>{this._onReceiveData({chunk:j})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:i,chunk:w}){const P=w instanceof Uint8Array&&w.byteLength===w.buffer.byteLength?w.buffer:new Uint8Array(w).buffer;if(i===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(P):this._queuedChunks.push(P);else{const e=this._rangeReaders.some(function(t){return t._begin!==i?!1:(t._enqueue(P),!0)});(0,ye.assert)(e,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var i,w;return(w=(i=this._fullRequestReader)==null?void 0:i._loaded)!=null?w:0}_onProgress(i){var w,P,e,t;i.total===void 0?(P=(w=this._rangeReaders[0])==null?void 0:w.onProgress)==null||P.call(w,{loaded:i.loaded}):(t=(e=this._fullRequestReader)==null?void 0:e.onProgress)==null||t.call(e,{loaded:i.loaded,total:i.total})}_onProgressiveDone(){var i;(i=this._fullRequestReader)==null||i.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(i){const w=this._rangeReaders.indexOf(i);w>=0&&this._rangeReaders.splice(w,1)}getFullReader(){(0,ye.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const i=this._queuedChunks;return this._queuedChunks=null,new Fe(this,i,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(i,w){if(w<=this._progressiveDataLength)return null;const P=new D(this,i,w);return this._pdfDataRangeTransport.requestDataRange(i,w),this._rangeReaders.push(P),P}cancelAllRequests(i){var w;(w=this._fullRequestReader)==null||w.cancel(i);for(const P of this._rangeReaders.slice(0))P.cancel(i);this._pdfDataRangeTransport.abort()}}qe.PDFDataTransportStream=Xe;class Fe{constructor(i,w,P=!1,e=null){this._stream=i,this._done=P||!1,this._filename=(0,Ue.isPdfFile)(e)?e:null,this._queuedChunks=w||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),i._fullRequestReader=this,this.onProgress=null}_enqueue(i){this._done||(this._requests.length>0?this._requests.shift().resolve({value:i,done:!1}):this._queuedChunks.push(i),this._loaded+=i.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}read(){return rt(this,null,function*(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const i=new ye.PromiseCapability;return this._requests.push(i),i.promise})}cancel(i){this._done=!0;for(const w of this._requests)w.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class D{constructor(i,w,P){this._stream=i,this._begin=w,this._end=P,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(i){if(!this._done){if(this._requests.length===0)this._queuedChunk=i;else{this._requests.shift().resolve({value:i,done:!1});for(const P of this._requests)P.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}read(){return rt(this,null,function*(){if(this._queuedChunk){const w=this._queuedChunk;return this._queuedChunk=null,{value:w,done:!1}}if(this._done)return{value:void 0,done:!0};const i=new ye.PromiseCapability;return this._requests.push(i),i.promise})}cancel(i){this._done=!0;for(const w of this._requests)w.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.PDFFetchStream=void 0;var ye=Qe(1),Ue=Qe(20);function Xe(P,e,t){return{method:"GET",headers:P,signal:t.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function Fe(P){const e=new Headers;for(const t in P){const o=P[t];o!==void 0&&e.append(t,o)}return e}function D(P){return P instanceof Uint8Array?P.buffer:P instanceof ArrayBuffer?P:((0,ye.warn)(`getArrayBuffer - unexpected data format: ${P}`),new Uint8Array(P).buffer)}class se{constructor(e){this.source=e,this.isHttp=/^https?:/i.test(e.url),this.httpHeaders=this.isHttp&&e.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var e,t;return(t=(e=this._fullRequestReader)==null?void 0:e._loaded)!=null?t:0}getFullReader(){return(0,ye.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new i(this),this._fullRequestReader}getRangeReader(e,t){if(t<=this._progressiveDataLength)return null;const o=new w(this,e,t);return this._rangeRequestReaders.push(o),o}cancelAllRequests(e){var t;(t=this._fullRequestReader)==null||t.cancel(e);for(const o of this._rangeRequestReaders.slice(0))o.cancel(e)}}qe.PDFFetchStream=se;class i{constructor(e){this._stream=e,this._reader=null,this._loaded=0,this._filename=null;const t=e.source;this._withCredentials=t.withCredentials||!1,this._contentLength=t.length,this._headersCapability=new ye.PromiseCapability,this._disableRange=t.disableRange||!1,this._rangeChunkSize=t.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._headers=Fe(this._stream.httpHeaders);const o=t.url;fetch(o,Xe(this._headers,this._withCredentials,this._abortController)).then(K=>{if(!(0,Ue.validateResponseStatus)(K.status))throw(0,Ue.createResponseStatusError)(K.status,o);this._reader=K.body.getReader(),this._headersCapability.resolve();const j=d=>K.headers.get(d),{allowRangeRequests:C,suggestedLength:O}=(0,Ue.validateRangeRequestCapabilities)({getResponseHeader:j,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=C,this._contentLength=O||this._contentLength,this._filename=(0,Ue.extractFilenameFromHeader)(j),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new ye.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}read(){return rt(this,null,function*(){var o;yield this._headersCapability.promise;const{value:e,done:t}=yield this._reader.read();return t?{value:e,done:t}:(this._loaded+=e.byteLength,(o=this.onProgress)==null||o.call(this,{loaded:this._loaded,total:this._contentLength}),{value:D(e),done:!1})})}cancel(e){var t;(t=this._reader)==null||t.cancel(e),this._abortController.abort()}}class w{constructor(e,t,o){this._stream=e,this._reader=null,this._loaded=0;const K=e.source;this._withCredentials=K.withCredentials||!1,this._readCapability=new ye.PromiseCapability,this._isStreamingSupported=!K.disableStream,this._abortController=new AbortController,this._headers=Fe(this._stream.httpHeaders),this._headers.append("Range",`bytes=${t}-${o-1}`);const j=K.url;fetch(j,Xe(this._headers,this._withCredentials,this._abortController)).then(C=>{if(!(0,Ue.validateResponseStatus)(C.status))throw(0,Ue.createResponseStatusError)(C.status,j);this._readCapability.resolve(),this._reader=C.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}read(){return rt(this,null,function*(){var o;yield this._readCapability.promise;const{value:e,done:t}=yield this._reader.read();return t?{value:e,done:t}:(this._loaded+=e.byteLength,(o=this.onProgress)==null||o.call(this,{loaded:this._loaded}),{value:D(e),done:!1})})}cancel(e){var t;(t=this._reader)==null||t.cancel(e),this._abortController.abort()}}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.createResponseStatusError=se,qe.extractFilenameFromHeader=D,qe.validateRangeRequestCapabilities=Fe,qe.validateResponseStatus=i;var ye=Qe(1),Ue=Qe(21),Xe=Qe(6);function Fe({getResponseHeader:w,isHttp:P,rangeChunkSize:e,disableRange:t}){const o={allowRangeRequests:!1,suggestedLength:void 0},K=parseInt(w("Content-Length"),10);return!Number.isInteger(K)||(o.suggestedLength=K,K<=2*e)||t||!P||w("Accept-Ranges")!=="bytes"||(w("Content-Encoding")||"identity")!=="identity"||(o.allowRangeRequests=!0),o}function D(w){const P=w("Content-Disposition");if(P){let e=(0,Ue.getFilenameFromContentDispositionHeader)(P);if(e.includes("%"))try{e=decodeURIComponent(e)}catch(t){}if((0,Xe.isPdfFile)(e))return e}return null}function se(w,P){return w===404||w===0&&P.startsWith("file:")?new ye.MissingPDFException('Missing PDF "'+P+'".'):new ye.UnexpectedResponseException(`Unexpected server response (${w}) while retrieving PDF "${P}".`,w)}function i(w){return w===200||w===206}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.getFilenameFromContentDispositionHeader=Ue;var ye=Qe(1);function Ue(Xe){let Fe=!0,D=se("filename\\*","i").exec(Xe);if(D){D=D[1];let K=e(D);return K=unescape(K),K=t(K),K=o(K),w(K)}if(D=P(Xe),D){const K=o(D);return w(K)}if(D=se("filename","i").exec(Xe),D){D=D[1];let K=e(D);return K=o(K),w(K)}function se(K,j){return new RegExp("(?:^|;)\\s*"+K+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',j)}function i(K,j){if(K){if(!/^[\x00-\xFF]+$/.test(j))return j;try{const C=new TextDecoder(K,{fatal:!0}),O=(0,ye.stringToBytes)(j);j=C.decode(O),Fe=!1}catch(C){}}return j}function w(K){return Fe&&/[\x80-\xff]/.test(K)&&(K=i("utf-8",K),Fe&&(K=i("iso-8859-1",K))),K}function P(K){const j=[];let C;const O=se("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(C=O.exec(K))!==null;){let[,A,n,I]=C;if(A=parseInt(A,10),A in j){if(A===0)break;continue}j[A]=[n,I]}const d=[];for(let A=0;A<j.length&&A in j;++A){let[n,I]=j[A];I=e(I),n&&(I=unescape(I),A===0&&(I=t(I))),d.push(I)}return d.join("")}function e(K){if(K.startsWith('"')){const j=K.slice(1).split('\\"');for(let C=0;C<j.length;++C){const O=j[C].indexOf('"');O!==-1&&(j[C]=j[C].slice(0,O),j.length=C+1),j[C]=j[C].replaceAll(/\\(.)/g,"$1")}K=j.join('"')}return K}function t(K){const j=K.indexOf("'");if(j===-1)return K;const C=K.slice(0,j),d=K.slice(j+1).replace(/^[^']*'/,"");return i(C,d)}function o(K){return!K.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(K)?K:K.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(j,C,O,d){if(O==="q"||O==="Q")return d=d.replaceAll("_"," "),d=d.replaceAll(/=([0-9a-fA-F]{2})/g,function(A,n){return String.fromCharCode(parseInt(n,16))}),i(C,d);try{d=atob(d)}catch(A){}return i(C,d)})}return""}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.PDFNetworkStream=void 0;var ye=Qe(1),Ue=Qe(20);const Xe=200,Fe=206;function D(e){const t=e.response;return typeof t!="string"?t:(0,ye.stringToBytes)(t).buffer}class se{constructor(t,o={}){this.url=t,this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&o.httpHeaders||Object.create(null),this.withCredentials=o.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,o,K){const j={begin:t,end:o};for(const C in K)j[C]=K[C];return this.request(j)}requestFull(t){return this.request(t)}request(t){const o=new XMLHttpRequest,K=this.currXhrId++,j=this.pendingRequests[K]={xhr:o};o.open("GET",this.url),o.withCredentials=this.withCredentials;for(const C in this.httpHeaders){const O=this.httpHeaders[C];O!==void 0&&o.setRequestHeader(C,O)}return this.isHttp&&"begin"in t&&"end"in t?(o.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),j.expectedStatus=Fe):j.expectedStatus=Xe,o.responseType="arraybuffer",t.onError&&(o.onerror=function(C){t.onError(o.status)}),o.onreadystatechange=this.onStateChange.bind(this,K),o.onprogress=this.onProgress.bind(this,K),j.onHeadersReceived=t.onHeadersReceived,j.onDone=t.onDone,j.onError=t.onError,j.onProgress=t.onProgress,o.send(null),K}onProgress(t,o){var j;const K=this.pendingRequests[t];K&&((j=K.onProgress)==null||j.call(K,o))}onStateChange(t,o){var A,n,I;const K=this.pendingRequests[t];if(!K)return;const j=K.xhr;if(j.readyState>=2&&K.onHeadersReceived&&(K.onHeadersReceived(),delete K.onHeadersReceived),j.readyState!==4||!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],j.status===0&&this.isHttp){(A=K.onError)==null||A.call(K,j.status);return}const C=j.status||Xe;if(!(C===Xe&&K.expectedStatus===Fe)&&C!==K.expectedStatus){(n=K.onError)==null||n.call(K,j.status);return}const d=D(j);if(C===Fe){const k=j.getResponseHeader("Content-Range"),y=/bytes (\d+)-(\d+)\/(\d+)/.exec(k);K.onDone({begin:parseInt(y[1],10),chunk:d})}else d?K.onDone({begin:0,chunk:d}):(I=K.onError)==null||I.call(K,j.status)}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortRequest(t){const o=this.pendingRequests[t].xhr;delete this.pendingRequests[t],o.abort()}}class i{constructor(t){this._source=t,this._manager=new se(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const o=this._rangeRequestReaders.indexOf(t);o>=0&&this._rangeRequestReaders.splice(o,1)}getFullReader(){return(0,ye.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new w(this._manager,this._source),this._fullRequestReader}getRangeReader(t,o){const K=new P(this._manager,t,o);return K.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(K),K}cancelAllRequests(t){var o;(o=this._fullRequestReader)==null||o.cancel(t);for(const K of this._rangeRequestReaders.slice(0))K.cancel(t)}}qe.PDFNetworkStream=i;class w{constructor(t,o){this._manager=t;const K={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=o.url,this._fullRequestId=t.requestFull(K),this._headersReceivedCapability=new ye.PromiseCapability,this._disableRange=o.disableRange||!1,this._contentLength=o.length,this._rangeChunkSize=o.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,o=this._manager.getRequestXhr(t),K=O=>o.getResponseHeader(O),{allowRangeRequests:j,suggestedLength:C}=(0,Ue.validateRangeRequestCapabilities)({getResponseHeader:K,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});j&&(this._isRangeSupported=!0),this._contentLength=C||this._contentLength,this._filename=(0,Ue.extractFilenameFromHeader)(K),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){if(t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(t){this._storedError=(0,Ue.createResponseStatusError)(t,this._url),this._headersReceivedCapability.reject(this._storedError);for(const o of this._requests)o.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(t){var o;(o=this.onProgress)==null||o.call(this,{loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}read(){return rt(this,null,function*(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new ye.PromiseCapability;return this._requests.push(t),t.promise})}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t);for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class P{constructor(t,o,K){this._manager=t;const j={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._requestId=t.requestRange(o,K,j),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var t;(t=this.onClosed)==null||t.call(this,this)}_onDone(t){const o=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:o,done:!1}):this._queuedChunk=o,this._done=!0;for(const K of this._requests)K.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(t){this._storedError=(0,Ue.createResponseStatusError)(t,this._url);for(const o of this._requests)o.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(t){var o;this.isStreamingSupported||(o=this.onProgress)==null||o.call(this,{loaded:t.loaded})}get isStreamingSupported(){return!1}read(){return rt(this,null,function*(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const o=this._queuedChunk;return this._queuedChunk=null,{value:o,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new ye.PromiseCapability;return this._requests.push(t),t.promise})}cancel(t){this._done=!0;for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.PDFNodeStream=void 0;var ye=Qe(1),Ue=Qe(20);const Xe=/^file:\/\/\/[a-zA-Z]:\//;function Fe(K){const j=require$$5,C=j.parse(K);return C.protocol==="file:"||C.host?C:/^[a-z]:[/\\]/i.test(K)?j.parse(`file:///${K}`):(C.host||(C.protocol="file:"),C)}class D{constructor(j){this.source=j,this.url=Fe(j.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&j.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var j,C;return(C=(j=this._fullRequestReader)==null?void 0:j._loaded)!=null?C:0}getFullReader(){return(0,ye.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new t(this):new P(this),this._fullRequestReader}getRangeReader(j,C){if(C<=this._progressiveDataLength)return null;const O=this.isFsUrl?new o(this,j,C):new e(this,j,C);return this._rangeRequestReaders.push(O),O}cancelAllRequests(j){var C;(C=this._fullRequestReader)==null||C.cancel(j);for(const O of this._rangeRequestReaders.slice(0))O.cancel(j)}}qe.PDFNodeStream=D;class se{constructor(j){this._url=j.url,this._done=!1,this._storedError=null,this.onProgress=null;const C=j.source;this._contentLength=C.length,this._loaded=0,this._filename=null,this._disableRange=C.disableRange||!1,this._rangeChunkSize=C.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!C.disableStream,this._isRangeSupported=!C.disableRange,this._readableStream=null,this._readCapability=new ye.PromiseCapability,this._headersCapability=new ye.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}read(){return rt(this,null,function*(){var O;if(yield this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const j=this._readableStream.read();return j===null?(this._readCapability=new ye.PromiseCapability,this.read()):(this._loaded+=j.length,(O=this.onProgress)==null||O.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(j).buffer,done:!1})})}cancel(j){if(!this._readableStream){this._error(j);return}this._readableStream.destroy(j)}_error(j){this._storedError=j,this._readCapability.resolve()}_setReadableStream(j){this._readableStream=j,j.on("readable",()=>{this._readCapability.resolve()}),j.on("end",()=>{j.destroy(),this._done=!0,this._readCapability.resolve()}),j.on("error",C=>{this._error(C)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new ye.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class i{constructor(j){this._url=j.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new ye.PromiseCapability;const C=j.source;this._isStreamingSupported=!C.disableStream}get isStreamingSupported(){return this._isStreamingSupported}read(){return rt(this,null,function*(){var O;if(yield this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const j=this._readableStream.read();return j===null?(this._readCapability=new ye.PromiseCapability,this.read()):(this._loaded+=j.length,(O=this.onProgress)==null||O.call(this,{loaded:this._loaded}),{value:new Uint8Array(j).buffer,done:!1})})}cancel(j){if(!this._readableStream){this._error(j);return}this._readableStream.destroy(j)}_error(j){this._storedError=j,this._readCapability.resolve()}_setReadableStream(j){this._readableStream=j,j.on("readable",()=>{this._readCapability.resolve()}),j.on("end",()=>{j.destroy(),this._done=!0,this._readCapability.resolve()}),j.on("error",C=>{this._error(C)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function w(K,j){return{protocol:K.protocol,auth:K.auth,host:K.hostname,port:K.port,path:K.path,method:"GET",headers:j}}class P extends se{constructor(j){super(j);const C=O=>{if(O.statusCode===404){const I=new ye.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=I,this._headersCapability.reject(I);return}this._headersCapability.resolve(),this._setReadableStream(O);const d=I=>this._readableStream.headers[I.toLowerCase()],{allowRangeRequests:A,suggestedLength:n}=(0,Ue.validateRangeRequestCapabilities)({getResponseHeader:d,isHttp:j.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=A,this._contentLength=n||this._contentLength,this._filename=(0,Ue.extractFilenameFromHeader)(d)};if(this._request=null,this._url.protocol==="http:"){const O=require$$5;this._request=O.request(w(this._url,j.httpHeaders),C)}else{const O=require$$5;this._request=O.request(w(this._url,j.httpHeaders),C)}this._request.on("error",O=>{this._storedError=O,this._headersCapability.reject(O)}),this._request.end()}}class e extends i{constructor(j,C,O){super(j),this._httpHeaders={};for(const A in j.httpHeaders){const n=j.httpHeaders[A];n!==void 0&&(this._httpHeaders[A]=n)}this._httpHeaders.Range=`bytes=${C}-${O-1}`;const d=A=>{if(A.statusCode===404){const n=new ye.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=n;return}this._setReadableStream(A)};if(this._request=null,this._url.protocol==="http:"){const A=require$$5;this._request=A.request(w(this._url,this._httpHeaders),d)}else{const A=require$$5;this._request=A.request(w(this._url,this._httpHeaders),d)}this._request.on("error",A=>{this._storedError=A}),this._request.end()}}class t extends se{constructor(j){super(j);let C=decodeURIComponent(this._url.path);Xe.test(this._url.href)&&(C=C.replace(/^\//,""));const O=require$$5;O.lstat(C,(d,A)=>{if(d){d.code==="ENOENT"&&(d=new ye.MissingPDFException(`Missing PDF "${C}".`)),this._storedError=d,this._headersCapability.reject(d);return}this._contentLength=A.size,this._setReadableStream(O.createReadStream(C)),this._headersCapability.resolve()})}}class o extends i{constructor(j,C,O){super(j);let d=decodeURIComponent(this._url.path);Xe.test(this._url.href)&&(d=d.replace(/^\//,""));const A=require$$5;this._setReadableStream(A.createReadStream(d,{start:C,end:O-1}))}}},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.SVGGraphics=void 0;var ye=Qe(6),Ue=Qe(1);const Xe={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},Fe="http://www.w3.org/XML/1998/namespace",D="http://www.w3.org/1999/xlink",se=["butt","round","square"],i=["miter","round","bevel"],w=function(A,n="",I=!1){if(URL.createObjectURL&&typeof Blob!="undefined"&&!I)return URL.createObjectURL(new Blob([A],{type:n}));const k="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let y=`data:${n};base64,`;for(let f=0,R=A.length;f<R;f+=3){const E=A[f]&255,M=A[f+1]&255,b=A[f+2]&255,V=E>>2,l=(E&3)<<4|M>>4,x=f+1<R?(M&15)<<2|b>>6:64,H=f+2<R?b&63:64;y+=k[V]+k[l]+k[x]+k[H]}return y},P=function(){const A=new Uint8Array([137,80,78,71,13,10,26,10]),n=12,I=new Int32Array(256);for(let b=0;b<256;b++){let V=b;for(let l=0;l<8;l++)V=V&1?3988292384^V>>1&2147483647:V>>1&2147483647;I[b]=V}function k(b,V,l){let x=-1;for(let H=V;H<l;H++){const s=(x^b[H])&255,h=I[s];x=x>>>8^h}return x^-1}function y(b,V,l,x){let H=x;const s=V.length;l[H]=s>>24&255,l[H+1]=s>>16&255,l[H+2]=s>>8&255,l[H+3]=s&255,H+=4,l[H]=b.charCodeAt(0)&255,l[H+1]=b.charCodeAt(1)&255,l[H+2]=b.charCodeAt(2)&255,l[H+3]=b.charCodeAt(3)&255,H+=4,l.set(V,H),H+=V.length;const h=k(l,x+4,H);l[H]=h>>24&255,l[H+1]=h>>16&255,l[H+2]=h>>8&255,l[H+3]=h&255}function f(b,V,l){let x=1,H=0;for(let s=V;s<l;++s)x=(x+(b[s]&255))%65521,H=(H+x)%65521;return H<<16|x}function R(b){if(!Ue.isNodeJS)return E(b);try{const V=parseInt(process.versions.node)>=8?b:Buffer.from(b),l=require$$5.deflateSync(V,{level:9});return l instanceof Uint8Array?l:new Uint8Array(l)}catch(V){(0,Ue.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+V)}return E(b)}function E(b){let V=b.length;const l=65535,x=Math.ceil(V/l),H=new Uint8Array(2+V+x*5+4);let s=0;H[s++]=120,H[s++]=156;let h=0;for(;V>l;)H[s++]=0,H[s++]=255,H[s++]=255,H[s++]=0,H[s++]=0,H.set(b.subarray(h,h+l),s),s+=l,h+=l,V-=l;H[s++]=1,H[s++]=V&255,H[s++]=V>>8&255,H[s++]=~V&65535&255,H[s++]=(~V&65535)>>8&255,H.set(b.subarray(h),s),s+=b.length-h;const F=f(b,0,b.length);return H[s++]=F>>24&255,H[s++]=F>>16&255,H[s++]=F>>8&255,H[s++]=F&255,H}function M(b,V,l,x){const H=b.width,s=b.height;let h,F,N;const U=b.data;switch(V){case Ue.ImageKind.GRAYSCALE_1BPP:F=0,h=1,N=H+7>>3;break;case Ue.ImageKind.RGB_24BPP:F=2,h=8,N=H*3;break;case Ue.ImageKind.RGBA_32BPP:F=6,h=8,N=H*4;break;default:throw new Error("invalid format")}const g=new Uint8Array((1+N)*s);let S=0,m=0;for(let J=0;J<s;++J)g[S++]=0,g.set(U.subarray(m,m+N),S),m+=N,S+=N;if(V===Ue.ImageKind.GRAYSCALE_1BPP&&x){S=0;for(let J=0;J<s;J++){S++;for(let G=0;G<N;G++)g[S++]^=255}}const r=new Uint8Array([H>>24&255,H>>16&255,H>>8&255,H&255,s>>24&255,s>>16&255,s>>8&255,s&255,h,F,0,0,0]),p=R(g),c=A.length+n*3+r.length+p.length,u=new Uint8Array(c);let q=0;return u.set(A,q),q+=A.length,y("IHDR",r,u,q),q+=n+r.length,y("IDATA",p,u,q),q+=n+p.length,y("IEND",new Uint8Array(0),u,q),w(u,"image/png",l)}return function(V,l,x){const H=V.kind===void 0?Ue.ImageKind.GRAYSCALE_1BPP:V.kind;return M(V,H,l,x)}}();class e{constructor(){this.fontSizeScale=1,this.fontWeight=Xe.fontWeight,this.fontSize=0,this.textMatrix=Ue.IDENTITY_MATRIX,this.fontMatrix=Ue.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=Ue.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=Xe.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(n,I){this.x=n,this.y=I}}function t(A){let n=[];const I=[];for(const k of A){if(k.fn==="save"){n.push({fnId:92,fn:"group",items:[]}),I.push(n),n=n.at(-1).items;continue}k.fn==="restore"?n=I.pop():n.push(k)}return n}function o(A){if(Number.isInteger(A))return A.toString();const n=A.toFixed(10);let I=n.length-1;if(n[I]!=="0")return n;do I--;while(n[I]==="0");return n.substring(0,n[I]==="."?I:I+1)}function K(A){if(A[4]===0&&A[5]===0){if(A[1]===0&&A[2]===0)return A[0]===1&&A[3]===1?"":`scale(${o(A[0])} ${o(A[3])})`;if(A[0]===A[3]&&A[1]===-A[2]){const n=Math.acos(A[0])*180/Math.PI;return`rotate(${o(n)})`}}else if(A[0]===1&&A[1]===0&&A[2]===0&&A[3]===1)return`translate(${o(A[4])} ${o(A[5])})`;return`matrix(${o(A[0])} ${o(A[1])} ${o(A[2])} ${o(A[3])} ${o(A[4])} ${o(A[5])})`}let j=0,C=0,O=0;class d{constructor(n,I,k=!1){(0,ye.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new ye.DOMSVGFactory,this.current=new e,this.transformMatrix=Ue.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=n,this.objs=I,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!k,this._operatorIdMapping=[];for(const y in Ue.OPS)this._operatorIdMapping[Ue.OPS[y]]=y}getObject(n,I=null){return typeof n=="string"?n.startsWith("g_")?this.commonObjs.get(n):this.objs.get(n):I}save(){this.transformStack.push(this.transformMatrix);const n=this.current;this.extraStack.push(n),this.current=n.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(n){this.save(),this.executeOpTree(n),this.restore()}loadDependencies(n){const I=n.fnArray,k=n.argsArray;for(let y=0,f=I.length;y<f;y++)if(I[y]===Ue.OPS.dependency)for(const R of k[y]){const E=R.startsWith("g_")?this.commonObjs:this.objs,M=new Promise(b=>{E.get(R,b)});this.current.dependencies.push(M)}return Promise.all(this.current.dependencies)}transform(n,I,k,y,f,R){const E=[n,I,k,y,f,R];this.transformMatrix=Ue.Util.transform(this.transformMatrix,E),this.tgrp=null}getSVG(n,I){this.viewport=I;const k=this._initialize(I);return this.loadDependencies(n).then(()=>(this.transformMatrix=Ue.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(n)),k))}convertOpList(n){const I=this._operatorIdMapping,k=n.argsArray,y=n.fnArray,f=[];for(let R=0,E=y.length;R<E;R++){const M=y[R];f.push({fnId:M,fn:I[M],args:k[R]})}return t(f)}executeOpTree(n){for(const I of n){const k=I.fn,y=I.fnId,f=I.args;switch(y|0){case Ue.OPS.beginText:this.beginText();break;case Ue.OPS.dependency:break;case Ue.OPS.setLeading:this.setLeading(f);break;case Ue.OPS.setLeadingMoveText:this.setLeadingMoveText(f[0],f[1]);break;case Ue.OPS.setFont:this.setFont(f);break;case Ue.OPS.showText:this.showText(f[0]);break;case Ue.OPS.showSpacedText:this.showText(f[0]);break;case Ue.OPS.endText:this.endText();break;case Ue.OPS.moveText:this.moveText(f[0],f[1]);break;case Ue.OPS.setCharSpacing:this.setCharSpacing(f[0]);break;case Ue.OPS.setWordSpacing:this.setWordSpacing(f[0]);break;case Ue.OPS.setHScale:this.setHScale(f[0]);break;case Ue.OPS.setTextMatrix:this.setTextMatrix(f[0],f[1],f[2],f[3],f[4],f[5]);break;case Ue.OPS.setTextRise:this.setTextRise(f[0]);break;case Ue.OPS.setTextRenderingMode:this.setTextRenderingMode(f[0]);break;case Ue.OPS.setLineWidth:this.setLineWidth(f[0]);break;case Ue.OPS.setLineJoin:this.setLineJoin(f[0]);break;case Ue.OPS.setLineCap:this.setLineCap(f[0]);break;case Ue.OPS.setMiterLimit:this.setMiterLimit(f[0]);break;case Ue.OPS.setFillRGBColor:this.setFillRGBColor(f[0],f[1],f[2]);break;case Ue.OPS.setStrokeRGBColor:this.setStrokeRGBColor(f[0],f[1],f[2]);break;case Ue.OPS.setStrokeColorN:this.setStrokeColorN(f);break;case Ue.OPS.setFillColorN:this.setFillColorN(f);break;case Ue.OPS.shadingFill:this.shadingFill(f[0]);break;case Ue.OPS.setDash:this.setDash(f[0],f[1]);break;case Ue.OPS.setRenderingIntent:this.setRenderingIntent(f[0]);break;case Ue.OPS.setFlatness:this.setFlatness(f[0]);break;case Ue.OPS.setGState:this.setGState(f[0]);break;case Ue.OPS.fill:this.fill();break;case Ue.OPS.eoFill:this.eoFill();break;case Ue.OPS.stroke:this.stroke();break;case Ue.OPS.fillStroke:this.fillStroke();break;case Ue.OPS.eoFillStroke:this.eoFillStroke();break;case Ue.OPS.clip:this.clip("nonzero");break;case Ue.OPS.eoClip:this.clip("evenodd");break;case Ue.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case Ue.OPS.paintImageXObject:this.paintImageXObject(f[0]);break;case Ue.OPS.paintInlineImageXObject:this.paintInlineImageXObject(f[0]);break;case Ue.OPS.paintImageMaskXObject:this.paintImageMaskXObject(f[0]);break;case Ue.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(f[0],f[1]);break;case Ue.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case Ue.OPS.closePath:this.closePath();break;case Ue.OPS.closeStroke:this.closeStroke();break;case Ue.OPS.closeFillStroke:this.closeFillStroke();break;case Ue.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case Ue.OPS.nextLine:this.nextLine();break;case Ue.OPS.transform:this.transform(f[0],f[1],f[2],f[3],f[4],f[5]);break;case Ue.OPS.constructPath:this.constructPath(f[0],f[1]);break;case Ue.OPS.endPath:this.endPath();break;case 92:this.group(I.items);break;default:(0,Ue.warn)(`Unimplemented operator ${k}`);break}}}setWordSpacing(n){this.current.wordSpacing=n}setCharSpacing(n){this.current.charSpacing=n}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(n,I,k,y,f,R){const E=this.current;E.textMatrix=E.lineMatrix=[n,I,k,y,f,R],E.textMatrixScale=Math.hypot(n,I),E.x=E.lineX=0,E.y=E.lineY=0,E.xcoords=[],E.ycoords=[],E.tspan=this.svgFactory.createElement("svg:tspan"),E.tspan.setAttributeNS(null,"font-family",E.fontFamily),E.tspan.setAttributeNS(null,"font-size",`${o(E.fontSize)}px`),E.tspan.setAttributeNS(null,"y",o(-E.y)),E.txtElement=this.svgFactory.createElement("svg:text"),E.txtElement.append(E.tspan)}beginText(){const n=this.current;n.x=n.lineX=0,n.y=n.lineY=0,n.textMatrix=Ue.IDENTITY_MATRIX,n.lineMatrix=Ue.IDENTITY_MATRIX,n.textMatrixScale=1,n.tspan=this.svgFactory.createElement("svg:tspan"),n.txtElement=this.svgFactory.createElement("svg:text"),n.txtgrp=this.svgFactory.createElement("svg:g"),n.xcoords=[],n.ycoords=[]}moveText(n,I){const k=this.current;k.x=k.lineX+=n,k.y=k.lineY+=I,k.xcoords=[],k.ycoords=[],k.tspan=this.svgFactory.createElement("svg:tspan"),k.tspan.setAttributeNS(null,"font-family",k.fontFamily),k.tspan.setAttributeNS(null,"font-size",`${o(k.fontSize)}px`),k.tspan.setAttributeNS(null,"y",o(-k.y))}showText(n){const I=this.current,k=I.font,y=I.fontSize;if(y===0)return;const f=I.fontSizeScale,R=I.charSpacing,E=I.wordSpacing,M=I.fontDirection,b=I.textHScale*M,V=k.vertical,l=V?1:-1,x=k.defaultVMetrics,H=y*I.fontMatrix[0];let s=0;for(const N of n){if(N===null){s+=M*E;continue}else if(typeof N=="number"){s+=l*N*y/1e3;continue}const U=(N.isSpace?E:0)+R,g=N.fontChar;let S,m,r=N.width;if(V){let c;const u=N.vmetric||x;c=N.vmetric?u[1]:r*.5,c=-c*H;const q=u[2]*H;r=u?-u[0]:r,S=c/f,m=(s+q)/f}else S=s/f,m=0;(N.isInFont||k.missingFile)&&(I.xcoords.push(I.x+S),V&&I.ycoords.push(-I.y+m),I.tspan.textContent+=g);const p=V?r*H-U*M:r*H+U*M;s+=p}I.tspan.setAttributeNS(null,"x",I.xcoords.map(o).join(" ")),V?I.tspan.setAttributeNS(null,"y",I.ycoords.map(o).join(" ")):I.tspan.setAttributeNS(null,"y",o(-I.y)),V?I.y-=s:I.x+=s*b,I.tspan.setAttributeNS(null,"font-family",I.fontFamily),I.tspan.setAttributeNS(null,"font-size",`${o(I.fontSize)}px`),I.fontStyle!==Xe.fontStyle&&I.tspan.setAttributeNS(null,"font-style",I.fontStyle),I.fontWeight!==Xe.fontWeight&&I.tspan.setAttributeNS(null,"font-weight",I.fontWeight);const h=I.textRenderingMode&Ue.TextRenderingMode.FILL_STROKE_MASK;if(h===Ue.TextRenderingMode.FILL||h===Ue.TextRenderingMode.FILL_STROKE?(I.fillColor!==Xe.fillColor&&I.tspan.setAttributeNS(null,"fill",I.fillColor),I.fillAlpha<1&&I.tspan.setAttributeNS(null,"fill-opacity",I.fillAlpha)):I.textRenderingMode===Ue.TextRenderingMode.ADD_TO_PATH?I.tspan.setAttributeNS(null,"fill","transparent"):I.tspan.setAttributeNS(null,"fill","none"),h===Ue.TextRenderingMode.STROKE||h===Ue.TextRenderingMode.FILL_STROKE){const N=1/(I.textMatrixScale||1);this._setStrokeAttributes(I.tspan,N)}let F=I.textMatrix;I.textRise!==0&&(F=F.slice(),F[5]+=I.textRise),I.txtElement.setAttributeNS(null,"transform",`${K(F)} scale(${o(b)}, -1)`),I.txtElement.setAttributeNS(Fe,"xml:space","preserve"),I.txtElement.append(I.tspan),I.txtgrp.append(I.txtElement),this._ensureTransformGroup().append(I.txtElement)}setLeadingMoveText(n,I){this.setLeading(-I),this.moveText(n,I)}addFontStyle(n){if(!n.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const I=w(n.data,n.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${n.loadedName}"; src: url(${I}); }
`}setFont(n){const I=this.current,k=this.commonObjs.get(n[0]);let y=n[1];I.font=k,this.embedFonts&&!k.missingFile&&!this.embeddedFonts[k.loadedName]&&(this.addFontStyle(k),this.embeddedFonts[k.loadedName]=k),I.fontMatrix=k.fontMatrix||Ue.FONT_IDENTITY_MATRIX;let f="normal";k.black?f="900":k.bold&&(f="bold");const R=k.italic?"italic":"normal";y<0?(y=-y,I.fontDirection=-1):I.fontDirection=1,I.fontSize=y,I.fontFamily=k.loadedName,I.fontWeight=f,I.fontStyle=R,I.tspan=this.svgFactory.createElement("svg:tspan"),I.tspan.setAttributeNS(null,"y",o(-I.y)),I.xcoords=[],I.ycoords=[]}endText(){var I;const n=this.current;n.textRenderingMode&Ue.TextRenderingMode.ADD_TO_PATH_FLAG&&((I=n.txtElement)!=null&&I.hasChildNodes())&&(n.element=n.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(n){n>0&&(this.current.lineWidth=n)}setLineCap(n){this.current.lineCap=se[n]}setLineJoin(n){this.current.lineJoin=i[n]}setMiterLimit(n){this.current.miterLimit=n}setStrokeAlpha(n){this.current.strokeAlpha=n}setStrokeRGBColor(n,I,k){this.current.strokeColor=Ue.Util.makeHexColor(n,I,k)}setFillAlpha(n){this.current.fillAlpha=n}setFillRGBColor(n,I,k){this.current.fillColor=Ue.Util.makeHexColor(n,I,k),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(n){this.current.strokeColor=this._makeColorN_Pattern(n)}setFillColorN(n){this.current.fillColor=this._makeColorN_Pattern(n)}shadingFill(n){const{width:I,height:k}=this.viewport,y=Ue.Util.inverseTransform(this.transformMatrix),[f,R,E,M]=Ue.Util.getAxialAlignedBoundingBox([0,0,I,k],y),b=this.svgFactory.createElement("svg:rect");b.setAttributeNS(null,"x",f),b.setAttributeNS(null,"y",R),b.setAttributeNS(null,"width",E-f),b.setAttributeNS(null,"height",M-R),b.setAttributeNS(null,"fill",this._makeShadingPattern(n)),this.current.fillAlpha<1&&b.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(b)}_makeColorN_Pattern(n){return n[0]==="TilingPattern"?this._makeTilingPattern(n):this._makeShadingPattern(n)}_makeTilingPattern(n){const I=n[1],k=n[2],y=n[3]||Ue.IDENTITY_MATRIX,[f,R,E,M]=n[4],b=n[5],V=n[6],l=n[7],x=`shading${O++}`,[H,s,h,F]=Ue.Util.normalizeRect([...Ue.Util.applyTransform([f,R],y),...Ue.Util.applyTransform([E,M],y)]),[N,U]=Ue.Util.singularValueDecompose2dScale(y),g=b*N,S=V*U,m=this.svgFactory.createElement("svg:pattern");m.setAttributeNS(null,"id",x),m.setAttributeNS(null,"patternUnits","userSpaceOnUse"),m.setAttributeNS(null,"width",g),m.setAttributeNS(null,"height",S),m.setAttributeNS(null,"x",`${H}`),m.setAttributeNS(null,"y",`${s}`);const r=this.svg,p=this.transformMatrix,c=this.current.fillColor,u=this.current.strokeColor,q=this.svgFactory.create(h-H,F-s);if(this.svg=q,this.transformMatrix=y,l===2){const J=Ue.Util.makeHexColor(...I);this.current.fillColor=J,this.current.strokeColor=J}return this.executeOpTree(this.convertOpList(k)),this.svg=r,this.transformMatrix=p,this.current.fillColor=c,this.current.strokeColor=u,m.append(q.childNodes[0]),this.defs.append(m),`url(#${x})`}_makeShadingPattern(n){switch(typeof n=="string"&&(n=this.objs.get(n)),n[0]){case"RadialAxial":const I=`shading${O++}`,k=n[3];let y;switch(n[1]){case"axial":const f=n[4],R=n[5];y=this.svgFactory.createElement("svg:linearGradient"),y.setAttributeNS(null,"id",I),y.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),y.setAttributeNS(null,"x1",f[0]),y.setAttributeNS(null,"y1",f[1]),y.setAttributeNS(null,"x2",R[0]),y.setAttributeNS(null,"y2",R[1]);break;case"radial":const E=n[4],M=n[5],b=n[6],V=n[7];y=this.svgFactory.createElement("svg:radialGradient"),y.setAttributeNS(null,"id",I),y.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),y.setAttributeNS(null,"cx",M[0]),y.setAttributeNS(null,"cy",M[1]),y.setAttributeNS(null,"r",V),y.setAttributeNS(null,"fx",E[0]),y.setAttributeNS(null,"fy",E[1]),y.setAttributeNS(null,"fr",b);break;default:throw new Error(`Unknown RadialAxial type: ${n[1]}`)}for(const f of k){const R=this.svgFactory.createElement("svg:stop");R.setAttributeNS(null,"offset",f[0]),R.setAttributeNS(null,"stop-color",f[1]),y.append(R)}return this.defs.append(y),`url(#${I})`;case"Mesh":return(0,Ue.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${n[0]}`)}}setDash(n,I){this.current.dashArray=n,this.current.dashPhase=I}constructPath(n,I){const k=this.current;let y=k.x,f=k.y,R=[],E=0;for(const M of n)switch(M|0){case Ue.OPS.rectangle:y=I[E++],f=I[E++];const b=I[E++],V=I[E++],l=y+b,x=f+V;R.push("M",o(y),o(f),"L",o(l),o(f),"L",o(l),o(x),"L",o(y),o(x),"Z");break;case Ue.OPS.moveTo:y=I[E++],f=I[E++],R.push("M",o(y),o(f));break;case Ue.OPS.lineTo:y=I[E++],f=I[E++],R.push("L",o(y),o(f));break;case Ue.OPS.curveTo:y=I[E+4],f=I[E+5],R.push("C",o(I[E]),o(I[E+1]),o(I[E+2]),o(I[E+3]),o(y),o(f)),E+=6;break;case Ue.OPS.curveTo2:R.push("C",o(y),o(f),o(I[E]),o(I[E+1]),o(I[E+2]),o(I[E+3])),y=I[E+2],f=I[E+3],E+=4;break;case Ue.OPS.curveTo3:y=I[E+2],f=I[E+3],R.push("C",o(I[E]),o(I[E+1]),o(y),o(f),o(y),o(f)),E+=4;break;case Ue.OPS.closePath:R.push("Z");break}R=R.join(" "),k.path&&n.length>0&&n[0]!==Ue.OPS.rectangle&&n[0]!==Ue.OPS.moveTo?R=k.path.getAttributeNS(null,"d")+R:(k.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(k.path)),k.path.setAttributeNS(null,"d",R),k.path.setAttributeNS(null,"fill","none"),k.element=k.path,k.setCurrentPoint(y,f)}endPath(){const n=this.current;if(n.path=null,!this.pendingClip)return;if(!n.element){this.pendingClip=null;return}const I=`clippath${j++}`,k=this.svgFactory.createElement("svg:clipPath");k.setAttributeNS(null,"id",I),k.setAttributeNS(null,"transform",K(this.transformMatrix));const y=n.element.cloneNode(!0);if(this.pendingClip==="evenodd"?y.setAttributeNS(null,"clip-rule","evenodd"):y.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,k.append(y),this.defs.append(k),n.activeClipUrl){n.clipGroup=null;for(const f of this.extraStack)f.clipGroup=null;k.setAttributeNS(null,"clip-path",n.activeClipUrl)}n.activeClipUrl=`url(#${I})`,this.tgrp=null}clip(n){this.pendingClip=n}closePath(){const n=this.current;if(n.path){const I=`${n.path.getAttributeNS(null,"d")}Z`;n.path.setAttributeNS(null,"d",I)}}setLeading(n){this.current.leading=-n}setTextRise(n){this.current.textRise=n}setTextRenderingMode(n){this.current.textRenderingMode=n}setHScale(n){this.current.textHScale=n/100}setRenderingIntent(n){}setFlatness(n){}setGState(n){for(const[I,k]of n)switch(I){case"LW":this.setLineWidth(k);break;case"LC":this.setLineCap(k);break;case"LJ":this.setLineJoin(k);break;case"ML":this.setMiterLimit(k);break;case"D":this.setDash(k[0],k[1]);break;case"RI":this.setRenderingIntent(k);break;case"FL":this.setFlatness(k);break;case"Font":this.setFont(k);break;case"CA":this.setStrokeAlpha(k);break;case"ca":this.setFillAlpha(k);break;default:(0,Ue.warn)(`Unimplemented graphic state operator ${I}`);break}}fill(){const n=this.current;n.element&&(n.element.setAttributeNS(null,"fill",n.fillColor),n.element.setAttributeNS(null,"fill-opacity",n.fillAlpha),this.endPath())}stroke(){const n=this.current;n.element&&(this._setStrokeAttributes(n.element),n.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(n,I=1){const k=this.current;let y=k.dashArray;I!==1&&y.length>0&&(y=y.map(function(f){return I*f})),n.setAttributeNS(null,"stroke",k.strokeColor),n.setAttributeNS(null,"stroke-opacity",k.strokeAlpha),n.setAttributeNS(null,"stroke-miterlimit",o(k.miterLimit)),n.setAttributeNS(null,"stroke-linecap",k.lineCap),n.setAttributeNS(null,"stroke-linejoin",k.lineJoin),n.setAttributeNS(null,"stroke-width",o(I*k.lineWidth)+"px"),n.setAttributeNS(null,"stroke-dasharray",y.map(o).join(" ")),n.setAttributeNS(null,"stroke-dashoffset",o(I*k.dashPhase)+"px")}eoFill(){var n;(n=this.current.element)==null||n.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){var n;(n=this.current.element)==null||n.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const n=this.svgFactory.createElement("svg:rect");n.setAttributeNS(null,"x","0"),n.setAttributeNS(null,"y","0"),n.setAttributeNS(null,"width","1px"),n.setAttributeNS(null,"height","1px"),n.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(n)}paintImageXObject(n){const I=this.getObject(n);if(!I){(0,Ue.warn)(`Dependent image with object ID ${n} is not ready yet`);return}this.paintInlineImageXObject(I)}paintInlineImageXObject(n,I){const k=n.width,y=n.height,f=P(n,this.forceDataSchema,!!I),R=this.svgFactory.createElement("svg:rect");R.setAttributeNS(null,"x","0"),R.setAttributeNS(null,"y","0"),R.setAttributeNS(null,"width",o(k)),R.setAttributeNS(null,"height",o(y)),this.current.element=R,this.clip("nonzero");const E=this.svgFactory.createElement("svg:image");E.setAttributeNS(D,"xlink:href",f),E.setAttributeNS(null,"x","0"),E.setAttributeNS(null,"y",o(-y)),E.setAttributeNS(null,"width",o(k)+"px"),E.setAttributeNS(null,"height",o(y)+"px"),E.setAttributeNS(null,"transform",`scale(${o(1/k)} ${o(-1/y)})`),I?I.append(E):this._ensureTransformGroup().append(E)}paintImageMaskXObject(n){const I=this.getObject(n.data,n);if(I.bitmap){(0,Ue.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");return}const k=this.current,y=I.width,f=I.height,R=k.fillColor;k.maskId=`mask${C++}`;const E=this.svgFactory.createElement("svg:mask");E.setAttributeNS(null,"id",k.maskId);const M=this.svgFactory.createElement("svg:rect");M.setAttributeNS(null,"x","0"),M.setAttributeNS(null,"y","0"),M.setAttributeNS(null,"width",o(y)),M.setAttributeNS(null,"height",o(f)),M.setAttributeNS(null,"fill",R),M.setAttributeNS(null,"mask",`url(#${k.maskId})`),this.defs.append(E),this._ensureTransformGroup().append(M),this.paintInlineImageXObject(I,E)}paintFormXObjectBegin(n,I){if(Array.isArray(n)&&n.length===6&&this.transform(n[0],n[1],n[2],n[3],n[4],n[5]),I){const k=I[2]-I[0],y=I[3]-I[1],f=this.svgFactory.createElement("svg:rect");f.setAttributeNS(null,"x",I[0]),f.setAttributeNS(null,"y",I[1]),f.setAttributeNS(null,"width",o(k)),f.setAttributeNS(null,"height",o(y)),this.current.element=f,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(n){const I=this.svgFactory.create(n.width,n.height),k=this.svgFactory.createElement("svg:defs");I.append(k),this.defs=k;const y=this.svgFactory.createElement("svg:g");return y.setAttributeNS(null,"transform",K(n.transform)),I.append(y),this.svg=y,I}_ensureClipGroup(){if(!this.current.clipGroup){const n=this.svgFactory.createElement("svg:g");n.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(n),this.current.clipGroup=n}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",K(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}qe.SVGGraphics=d},(it,qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.XfaText=void 0;class Qe{static textContent(Ue){const Xe=[],Fe={items:Xe,styles:Object.create(null)};function D(se){var P;if(!se)return;let i=null;const w=se.name;if(w==="#text")i=se.value;else if(Qe.shouldBuildText(w))(P=se==null?void 0:se.attributes)!=null&&P.textContent?i=se.attributes.textContent:se.value&&(i=se.value);else return;if(i!==null&&Xe.push({str:i}),!!se.children)for(const e of se.children)D(e)}return D(Ue),Fe}static shouldBuildText(Ue){return!(Ue==="textarea"||Ue==="input"||Ue==="option"||Ue==="select")}}qe.XfaText=Qe},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.TextLayerRenderTask=void 0,qe.renderTextLayer=K,qe.updateTextLayer=j;var ye=Qe(1),Ue=Qe(6);const Xe=1e5,Fe=30,D=.8,se=new Map;function i(C,O){let d;if(O&&ye.FeatureTest.isOffscreenCanvasSupported)d=new OffscreenCanvas(C,C).getContext("2d",{alpha:!1});else{const A=document.createElement("canvas");A.width=A.height=C,d=A.getContext("2d",{alpha:!1})}return d}function w(C,O){const d=se.get(C);if(d)return d;const A=i(Fe,O);A.font=`${Fe}px ${C}`;const n=A.measureText("");let I=n.fontBoundingBoxAscent,k=Math.abs(n.fontBoundingBoxDescent);if(I){const f=I/(I+k);return se.set(C,f),A.canvas.width=A.canvas.height=0,f}A.strokeStyle="red",A.clearRect(0,0,Fe,Fe),A.strokeText("g",0,0);let y=A.getImageData(0,0,Fe,Fe).data;k=0;for(let f=y.length-1-3;f>=0;f-=4)if(y[f]>0){k=Math.ceil(f/4/Fe);break}A.clearRect(0,0,Fe,Fe),A.strokeText("A",0,Fe),y=A.getImageData(0,0,Fe,Fe).data,I=0;for(let f=0,R=y.length;f<R;f+=4)if(y[f]>0){I=Fe-Math.floor(f/4/Fe);break}if(A.canvas.width=A.canvas.height=0,I){const f=I/(I+k);return se.set(C,f),f}return se.set(C,D),D}function P(C,O,d){const A=document.createElement("span"),n={angle:0,canvasWidth:0,hasText:O.str!=="",hasEOL:O.hasEOL,fontSize:0};C._textDivs.push(A);const I=ye.Util.transform(C._transform,O.transform);let k=Math.atan2(I[1],I[0]);const y=d[O.fontName];y.vertical&&(k+=Math.PI/2);const f=Math.hypot(I[2],I[3]),R=f*w(y.fontFamily,C._isOffscreenCanvasSupported);let E,M;k===0?(E=I[4],M=I[5]-R):(E=I[4]+R*Math.sin(k),M=I[5]-R*Math.cos(k));const b="calc(var(--scale-factor)*",V=A.style;C._container===C._rootContainer?(V.left=`${(100*E/C._pageWidth).toFixed(2)}%`,V.top=`${(100*M/C._pageHeight).toFixed(2)}%`):(V.left=`${b}${E.toFixed(2)}px)`,V.top=`${b}${M.toFixed(2)}px)`),V.fontSize=`${b}${f.toFixed(2)}px)`,V.fontFamily=y.fontFamily,n.fontSize=f,A.setAttribute("role","presentation"),A.textContent=O.str,A.dir=O.dir,C._fontInspectorEnabled&&(A.dataset.fontName=O.fontName),k!==0&&(n.angle=k*(180/Math.PI));let l=!1;if(O.str.length>1)l=!0;else if(O.str!==" "&&O.transform[0]!==O.transform[3]){const x=Math.abs(O.transform[0]),H=Math.abs(O.transform[3]);x!==H&&Math.max(x,H)/Math.min(x,H)>1.5&&(l=!0)}l&&(n.canvasWidth=y.vertical?O.height:O.width),C._textDivProperties.set(A,n),C._isReadableStream&&C._layoutText(A)}function e(C){const{div:O,scale:d,properties:A,ctx:n,prevFontSize:I,prevFontFamily:k}=C,{style:y}=O;let f="";if(A.canvasWidth!==0&&A.hasText){const{fontFamily:R}=y,{canvasWidth:E,fontSize:M}=A;(I!==M||k!==R)&&(n.font=`${M*d}px ${R}`,C.prevFontSize=M,C.prevFontFamily=R);const{width:b}=n.measureText(O.textContent);b>0&&(f=`scaleX(${E*d/b})`)}A.angle!==0&&(f=`rotate(${A.angle}deg) ${f}`),f.length>0&&(y.transform=f)}function t(C){if(C._canceled)return;const O=C._textDivs,d=C._capability;if(O.length>Xe){d.resolve();return}if(!C._isReadableStream)for(const n of O)C._layoutText(n);d.resolve()}class o{constructor({textContentSource:O,container:d,viewport:A,textDivs:n,textDivProperties:I,textContentItemsStr:k,isOffscreenCanvasSupported:y}){var b;this._textContentSource=O,this._isReadableStream=O instanceof ReadableStream,this._container=this._rootContainer=d,this._textDivs=n||[],this._textContentItemsStr=k||[],this._isOffscreenCanvasSupported=y,this._fontInspectorEnabled=!!((b=globalThis.FontInspector)!=null&&b.enabled),this._reader=null,this._textDivProperties=I||new WeakMap,this._canceled=!1,this._capability=new ye.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:A.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:i(0,y)};const{pageWidth:f,pageHeight:R,pageX:E,pageY:M}=A.rawDims;this._transform=[1,0,0,-1,-E,M+R],this._pageWidth=f,this._pageHeight=R,(0,Ue.setLayerDimensions)(d,A),this._capability.promise.finally(()=>{this._layoutTextParams=null}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new ye.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._capability.reject(new ye.AbortException("TextLayer task cancelled."))}_processItems(O,d){for(const A of O){if(A.str===void 0){if(A.type==="beginMarkedContentProps"||A.type==="beginMarkedContent"){const n=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),A.id!==null&&this._container.setAttribute("id",`${A.id}`),n.append(this._container)}else A.type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(A.str),P(this,A,d)}}_layoutText(O){const d=this._layoutTextParams.properties=this._textDivProperties.get(O);if(this._layoutTextParams.div=O,e(this._layoutTextParams),d.hasText&&this._container.append(O),d.hasEOL){const A=document.createElement("br");A.setAttribute("role","presentation"),this._container.append(A)}}_render(){const O=new ye.PromiseCapability;let d=Object.create(null);if(this._isReadableStream){const A=()=>{this._reader.read().then(({value:n,done:I})=>{if(I){O.resolve();return}Object.assign(d,n.styles),this._processItems(n.items,d),A()},O.reject)};this._reader=this._textContentSource.getReader(),A()}else if(this._textContentSource){const{items:A,styles:n}=this._textContentSource;this._processItems(A,n),O.resolve()}else throw new Error('No "textContentSource" parameter specified.');O.promise.then(()=>{d=null,t(this)},this._capability.reject)}}qe.TextLayerRenderTask=o;function K(C){!C.textContentSource&&(C.textContent||C.textContentStream)&&((0,Ue.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),C.textContentSource=C.textContent||C.textContentStream);const{container:O,viewport:d}=C,A=getComputedStyle(O),n=A.getPropertyValue("visibility"),I=parseFloat(A.getPropertyValue("--scale-factor"));n==="visible"&&(!I||Math.abs(I-d.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const k=new o(C);return k._render(),k}function j({container:C,viewport:O,textDivs:d,textDivProperties:A,isOffscreenCanvasSupported:n,mustRotate:I=!0,mustRescale:k=!0}){if(I&&(0,Ue.setLayerDimensions)(C,{rotation:O.rotation}),k){const y=i(0,n),R={prevFontSize:null,prevFontFamily:null,div:null,scale:O.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:y};for(const E of d)R.properties=A.get(E),R.div=E,e(R)}}},(it,qe,Qe)=>{var w,P,e,t,o,K,j,C,O,d,A,Kn,I,Li,y,Nn,R,Qn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.AnnotationEditorLayer=void 0;var ye=Qe(1),Ue=Qe(4),Xe=Qe(28),Fe=Qe(33),D=Qe(6),se=Qe(34);const M=class M{constructor({uiManager:V,pageIndex:l,div:x,accessibilityManager:H,annotationLayer:s,viewport:h,l10n:F}){De(this,A);De(this,I);De(this,y);De(this,R);De(this,w,void 0);De(this,P,!1);De(this,e,null);De(this,t,this.pointerup.bind(this));De(this,o,this.pointerdown.bind(this));De(this,K,new Map);De(this,j,!1);De(this,C,!1);De(this,O,!1);De(this,d,void 0);const N=[Xe.FreeTextEditor,Fe.InkEditor,se.StampEditor];if(!M._initialized){M._initialized=!0;for(const U of N)U.initialize(F)}V.registerEditorTypes(N),Ne(this,d,V),this.pageIndex=l,this.div=x,Ne(this,w,H),Ne(this,e,s),this.viewport=h,he(this,d).addLayer(this)}get isEmpty(){return he(this,K).size===0}updateToolbar(V){he(this,d).updateToolbar(V)}updateMode(V=he(this,d).getMode()){Re(this,R,Qn).call(this),V===ye.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),V!==ye.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",V===ye.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",V===ye.AnnotationEditorType.INK),this.div.classList.toggle("stampEditing",V===ye.AnnotationEditorType.STAMP),this.div.hidden=!1)}addInkEditorIfNeeded(V){if(!V&&he(this,d).getMode()!==ye.AnnotationEditorType.INK)return;if(!V){for(const x of he(this,K).values())if(x.isEmpty()){x.setInBackground();return}}Re(this,I,Li).call(this,{offsetX:0,offsetY:0},!1).setInBackground()}setEditingState(V){he(this,d).setEditingState(V)}addCommands(V){he(this,d).addCommands(V)}enable(){this.div.style.pointerEvents="auto";const V=new Set;for(const x of he(this,K).values())x.enableEditing(),x.annotationElementId&&V.add(x.annotationElementId);if(!he(this,e))return;const l=he(this,e).getEditableAnnotations();for(const x of l){if(x.hide(),he(this,d).isDeletedAnnotationElement(x.data.id)||V.has(x.data.id))continue;const H=this.deserialize(x);H&&(this.addOrRebuild(H),H.enableEditing())}}disable(){var l;Ne(this,O,!0),this.div.style.pointerEvents="none";const V=new Set;for(const x of he(this,K).values()){if(x.disableEditing(),!x.annotationElementId||x.serialize()!==null){V.add(x.annotationElementId);continue}(l=this.getEditableAnnotation(x.annotationElementId))==null||l.show(),x.remove()}if(he(this,e)){const x=he(this,e).getEditableAnnotations();for(const H of x){const{id:s}=H.data;V.has(s)||he(this,d).isDeletedAnnotationElement(s)||H.show()}}Re(this,R,Qn).call(this),this.isEmpty&&(this.div.hidden=!0),Ne(this,O,!1)}getEditableAnnotation(V){var l;return((l=he(this,e))==null?void 0:l.getEditableAnnotation(V))||null}setActiveEditor(V){he(this,d).getActive()!==V&&he(this,d).setActiveEditor(V)}enableClick(){this.div.addEventListener("pointerdown",he(this,o)),this.div.addEventListener("pointerup",he(this,t))}disableClick(){this.div.removeEventListener("pointerdown",he(this,o)),this.div.removeEventListener("pointerup",he(this,t))}attach(V){he(this,K).set(V.id,V);const{annotationElementId:l}=V;l&&he(this,d).isDeletedAnnotationElement(l)&&he(this,d).removeDeletedAnnotationElement(V)}detach(V){var l;he(this,K).delete(V.id),(l=he(this,w))==null||l.removePointerInTextLayer(V.contentDiv),!he(this,O)&&V.annotationElementId&&he(this,d).addDeletedAnnotationElement(V)}remove(V){this.detach(V),he(this,d).removeEditor(V),V.div.contains(document.activeElement)&&setTimeout(()=>{he(this,d).focusMainContainer()},0),V.div.remove(),V.isAttachedToDOM=!1,he(this,C)||this.addInkEditorIfNeeded(!1)}changeParent(V){var l;V.parent!==this&&(V.annotationElementId&&(he(this,d).addDeletedAnnotationElement(V.annotationElementId),Ue.AnnotationEditor.deleteAnnotationElement(V),V.annotationElementId=null),this.attach(V),(l=V.parent)==null||l.detach(V),V.setParent(this),V.div&&V.isAttachedToDOM&&(V.div.remove(),this.div.append(V.div)))}add(V){if(this.changeParent(V),he(this,d).addEditor(V),this.attach(V),!V.isAttachedToDOM){const l=V.render();this.div.append(l),V.isAttachedToDOM=!0}V.fixAndSetPosition(),V.onceAdded(),he(this,d).addToAnnotationStorage(V)}moveEditorInDOM(V){var x;if(!V.isAttachedToDOM)return;const{activeElement:l}=document;V.div.contains(l)&&(V._focusEventsAllowed=!1,setTimeout(()=>{V.div.contains(document.activeElement)?V._focusEventsAllowed=!0:(V.div.addEventListener("focusin",()=>{V._focusEventsAllowed=!0},{once:!0}),l.focus())},0)),V._structTreeParentId=(x=he(this,w))==null?void 0:x.moveElementInDOM(this.div,V.div,V.contentDiv,!0)}addOrRebuild(V){V.needsToBeRebuilt()?V.rebuild():this.add(V)}addUndoableEditor(V){const l=()=>V._uiManager.rebuild(V),x=()=>{V.remove()};this.addCommands({cmd:l,undo:x,mustExec:!1})}getNextId(){return he(this,d).getId()}pasteEditor(V,l){he(this,d).updateToolbar(V),he(this,d).updateMode(V);const{offsetX:x,offsetY:H}=Re(this,y,Nn).call(this),s=this.getNextId(),h=Re(this,A,Kn).call(this,Bi({parent:this,id:s,x,y:H,uiManager:he(this,d),isCentered:!0},l));h&&this.add(h)}deserialize(V){var l;switch((l=V.annotationType)!=null?l:V.annotationEditorType){case ye.AnnotationEditorType.FREETEXT:return Xe.FreeTextEditor.deserialize(V,this,he(this,d));case ye.AnnotationEditorType.INK:return Fe.InkEditor.deserialize(V,this,he(this,d));case ye.AnnotationEditorType.STAMP:return se.StampEditor.deserialize(V,this,he(this,d))}return null}addNewEditor(){Re(this,I,Li).call(this,Re(this,y,Nn).call(this),!0)}setSelected(V){he(this,d).setSelected(V)}toggleSelected(V){he(this,d).toggleSelected(V)}isSelected(V){return he(this,d).isSelected(V)}unselect(V){he(this,d).unselect(V)}pointerup(V){const{isMac:l}=ye.FeatureTest.platform;if(!(V.button!==0||V.ctrlKey&&l)&&V.target===this.div&&he(this,j)){if(Ne(this,j,!1),!he(this,P)){Ne(this,P,!0);return}if(he(this,d).getMode()===ye.AnnotationEditorType.STAMP){he(this,d).unselectAll();return}Re(this,I,Li).call(this,V,!1)}}pointerdown(V){if(he(this,j)){Ne(this,j,!1);return}const{isMac:l}=ye.FeatureTest.platform;if(V.button!==0||V.ctrlKey&&l||V.target!==this.div)return;Ne(this,j,!0);const x=he(this,d).getActive();Ne(this,P,!x||x.isEmpty())}findNewParent(V,l,x){const H=he(this,d).findParent(l,x);return H===null||H===this?!1:(H.changeParent(V),!0)}destroy(){var V,l;((V=he(this,d).getActive())==null?void 0:V.parent)===this&&(he(this,d).commitOrRemove(),he(this,d).setActiveEditor(null));for(const x of he(this,K).values())(l=he(this,w))==null||l.removePointerInTextLayer(x.contentDiv),x.setParent(null),x.isAttachedToDOM=!1,x.div.remove();this.div=null,he(this,K).clear(),he(this,d).removeLayer(this)}render({viewport:V}){this.viewport=V,(0,D.setLayerDimensions)(this.div,V);for(const l of he(this,d).getEditors(this.pageIndex))this.add(l);this.updateMode()}update({viewport:V}){he(this,d).commitOrRemove(),this.viewport=V,(0,D.setLayerDimensions)(this.div,{rotation:V.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:V,pageHeight:l}=this.viewport.rawDims;return[V,l]}};w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakMap,O=new WeakMap,d=new WeakMap,A=new WeakSet,Kn=function(V){switch(he(this,d).getMode()){case ye.AnnotationEditorType.FREETEXT:return new Xe.FreeTextEditor(V);case ye.AnnotationEditorType.INK:return new Fe.InkEditor(V);case ye.AnnotationEditorType.STAMP:return new se.StampEditor(V)}return null},I=new WeakSet,Li=function(V,l){const x=this.getNextId(),H=Re(this,A,Kn).call(this,{parent:this,id:x,x:V.offsetX,y:V.offsetY,uiManager:he(this,d),isCentered:l});return H&&this.add(H),H},y=new WeakSet,Nn=function(){const{x:V,y:l,width:x,height:H}=this.div.getBoundingClientRect(),s=Math.max(0,V),h=Math.max(0,l),F=Math.min(window.innerWidth,V+x),N=Math.min(window.innerHeight,l+H),U=(s+F)/2-V,g=(h+N)/2-l,[S,m]=this.viewport.rotation%180===0?[U,g]:[g,U];return{offsetX:S,offsetY:m}},R=new WeakSet,Qn=function(){Ne(this,C,!0);for(const V of he(this,K).values())V.isEmpty()&&V.remove();Ne(this,C,!1)},jt(M,"_initialized",!1);let i=M;qe.AnnotationEditorLayer=i},(it,qe,Qe)=>{var se,i,w,P,e,t,o,K,j,C,qa,d,Ba,n,wa,k,Di,f,Mn,E,Oa,b,Gn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.FreeTextEditor=void 0;var ye=Qe(1),Ue=Qe(5),Xe=Qe(4),Fe=Qe(29);const l=class l extends Xe.AnnotationEditor{constructor(s){super(Ji(Bi({},s),{name:"freeTextEditor"}));De(this,C);De(this,d);De(this,n);De(this,k);De(this,f);De(this,E);De(this,b);De(this,se,this.editorDivBlur.bind(this));De(this,i,this.editorDivFocus.bind(this));De(this,w,this.editorDivInput.bind(this));De(this,P,this.editorDivKeydown.bind(this));De(this,e,void 0);De(this,t,"");De(this,o,`${this.id}-editor`);De(this,K,void 0);De(this,j,null);Ne(this,e,s.color||l._defaultColor||Xe.AnnotationEditor._defaultLineColor),Ne(this,K,s.fontSize||l._defaultFontSize)}static get _keyboardManager(){const s=l.prototype,h=U=>U.isEmpty(),F=Ue.AnnotationEditorUIManager.TRANSLATE_SMALL,N=Ue.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,ye.shadow)(this,"_keyboardManager",new Ue.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],s.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],s.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],s._translateEmpty,{args:[-F,0],checker:h}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],s._translateEmpty,{args:[-N,0],checker:h}],[["ArrowRight","mac+ArrowRight"],s._translateEmpty,{args:[F,0],checker:h}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],s._translateEmpty,{args:[N,0],checker:h}],[["ArrowUp","mac+ArrowUp"],s._translateEmpty,{args:[0,-F],checker:h}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],s._translateEmpty,{args:[0,-N],checker:h}],[["ArrowDown","mac+ArrowDown"],s._translateEmpty,{args:[0,F],checker:h}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],s._translateEmpty,{args:[0,N],checker:h}]]))}static initialize(s){Xe.AnnotationEditor.initialize(s,{strings:["free_text2_default_content","editor_free_text2_aria_label"]});const h=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(h.getPropertyValue("--freetext-padding"))}static updateDefaultParams(s,h){switch(s){case ye.AnnotationEditorParamsType.FREETEXT_SIZE:l._defaultFontSize=h;break;case ye.AnnotationEditorParamsType.FREETEXT_COLOR:l._defaultColor=h;break}}updateParams(s,h){switch(s){case ye.AnnotationEditorParamsType.FREETEXT_SIZE:Re(this,C,qa).call(this,h);break;case ye.AnnotationEditorParamsType.FREETEXT_COLOR:Re(this,d,Ba).call(this,h);break}}static get defaultPropertiesToUpdate(){return[[ye.AnnotationEditorParamsType.FREETEXT_SIZE,l._defaultFontSize],[ye.AnnotationEditorParamsType.FREETEXT_COLOR,l._defaultColor||Xe.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[ye.AnnotationEditorParamsType.FREETEXT_SIZE,he(this,K)],[ye.AnnotationEditorParamsType.FREETEXT_COLOR,he(this,e)]]}_translateEmpty(s,h){this._uiManager.translateSelectedEditors(s,h,!0)}getInitialTranslation(){const s=this.parentScale;return[-l._internalPadding*s,-(l._internalPadding+he(this,K))*s]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(ye.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",he(this,P)),this.editorDiv.addEventListener("focus",he(this,i)),this.editorDiv.addEventListener("blur",he(this,se)),this.editorDiv.addEventListener("input",he(this,w)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",he(this,o)),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",he(this,P)),this.editorDiv.removeEventListener("focus",he(this,i)),this.editorDiv.removeEventListener("blur",he(this,se)),this.editorDiv.removeEventListener("input",he(this,w)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(s){this._focusEventsAllowed&&(super.focusin(s),s.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var s;if(this.width){Re(this,b,Gn).call(this);return}this.enableEditMode(),this.editorDiv.focus(),(s=this._initialOptions)!=null&&s.isCentered&&this.center(),this._initialOptions=null}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const s=he(this,t),h=Ne(this,t,Re(this,n,wa).call(this).trimEnd());if(s===h)return;const F=N=>{if(Ne(this,t,N),!N){this.remove();return}Re(this,f,Mn).call(this),this._uiManager.rebuild(this),Re(this,k,Di).call(this)};this.addCommands({cmd:()=>{F(h)},undo:()=>{F(s)},mustExec:!1}),Re(this,k,Di).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(s){this.enterInEditMode()}keydown(s){s.target===this.div&&s.key==="Enter"&&(this.enterInEditMode(),s.preventDefault())}editorDivKeydown(s){l._keyboardManager.exec(this,s)}editorDivFocus(s){this.isEditing=!0}editorDivBlur(s){this.isEditing=!1}editorDivInput(s){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let s,h;this.width&&(s=this.x,h=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",he(this,o)),this.enableEditing(),Xe.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then(N=>{var U;return(U=this.editorDiv)==null?void 0:U.setAttribute("aria-label",N)}),Xe.AnnotationEditor._l10nPromise.get("free_text2_default_content").then(N=>{var U;return(U=this.editorDiv)==null?void 0:U.setAttribute("default-content",N)}),this.editorDiv.contentEditable=!0;const{style:F}=this.editorDiv;if(F.fontSize=`calc(${he(this,K)}px * var(--scale-factor))`,F.color=he(this,e),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,Ue.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[N,U]=this.parentDimensions;if(this.annotationElementId){const{position:g}=he(this,j);let[S,m]=this.getInitialTranslation();[S,m]=this.pageTranslationToScreen(S,m);const[r,p]=this.pageDimensions,[c,u]=this.pageTranslation;let q,J;switch(this.rotation){case 0:q=s+(g[0]-c)/r,J=h+this.height-(g[1]-u)/p;break;case 90:q=s+(g[0]-c)/r,J=h-(g[1]-u)/p,[S,m]=[m,-S];break;case 180:q=s-this.width+(g[0]-c)/r,J=h-(g[1]-u)/p,[S,m]=[-S,-m];break;case 270:q=s+(g[0]-c-this.height*p)/r,J=h+(g[1]-u-this.width*r)/p,[S,m]=[-m,S];break}this.setAt(q*N,J*U,S,m)}else this.setAt(s*N,h*U,this.width*N,this.height*U);Re(this,f,Mn).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(s,h,F){let N=null;if(s instanceof Fe.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:g,fontColor:S},rect:m,rotation:r,id:p},textContent:c,textPosition:u,parent:{page:{pageNumber:q}}}=s;if(!c||c.length===0)return null;N=s={annotationType:ye.AnnotationEditorType.FREETEXT,color:Array.from(S),fontSize:g,value:c.join(`
`),position:u,pageIndex:q-1,rect:m,rotation:r,id:p,deleted:!1}}const U=super.deserialize(s,h,F);return Ne(U,K,s.fontSize),Ne(U,e,ye.Util.makeHexColor(...s.color)),Ne(U,t,s.value),U.annotationElementId=s.id||null,Ne(U,j,N),U}serialize(s=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const h=l._internalPadding*this.parentScale,F=this.getRect(h,h),N=Xe.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:he(this,e)),U={annotationType:ye.AnnotationEditorType.FREETEXT,color:N,fontSize:he(this,K),value:he(this,t),pageIndex:this.pageIndex,rect:F,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return s?U:this.annotationElementId&&!Re(this,E,Oa).call(this,U)?null:(U.id=this.annotationElementId,U)}};se=new WeakMap,i=new WeakMap,w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakSet,qa=function(s){const h=N=>{this.editorDiv.style.fontSize=`calc(${N}px * var(--scale-factor))`,this.translate(0,-(N-he(this,K))*this.parentScale),Ne(this,K,N),Re(this,k,Di).call(this)},F=he(this,K);this.addCommands({cmd:()=>{h(s)},undo:()=>{h(F)},mustExec:!0,type:ye.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},d=new WeakSet,Ba=function(s){const h=he(this,e);this.addCommands({cmd:()=>{Ne(this,e,this.editorDiv.style.color=s)},undo:()=>{Ne(this,e,this.editorDiv.style.color=h)},mustExec:!0,type:ye.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},n=new WeakSet,wa=function(){const s=this.editorDiv.getElementsByTagName("div");if(s.length===0)return this.editorDiv.innerText;const h=[];for(const F of s)h.push(F.innerText.replace(/\r\n?|\n/,""));return h.join(`
`)},k=new WeakSet,Di=function(){const[s,h]=this.parentDimensions;let F;if(this.isAttachedToDOM)F=this.div.getBoundingClientRect();else{const{currentLayer:N,div:U}=this,g=U.style.display;U.style.display="hidden",N.div.append(this.div),F=U.getBoundingClientRect(),U.remove(),U.style.display=g}this.rotation%180===this.parentRotation%180?(this.width=F.width/s,this.height=F.height/h):(this.width=F.height/s,this.height=F.width/h),this.fixAndSetPosition()},f=new WeakSet,Mn=function(){if(this.editorDiv.replaceChildren(),!!he(this,t))for(const s of he(this,t).split(`
`)){const h=document.createElement("div");h.append(s?document.createTextNode(s):document.createElement("br")),this.editorDiv.append(h)}},E=new WeakSet,Oa=function(s){const{value:h,fontSize:F,color:N,rect:U,pageIndex:g}=he(this,j);return s.value!==h||s.fontSize!==F||s.rect.some((S,m)=>Math.abs(S-U[m])>=1)||s.color.some((S,m)=>S!==N[m])||s.pageIndex!==g},b=new WeakSet,Gn=function(s=!1){if(!this.annotationElementId)return;if(Re(this,k,Di).call(this),!s&&(this.width===0||this.height===0)){setTimeout(()=>Re(this,b,Gn).call(this,!0),0);return}const h=l._internalPadding*this.parentScale;he(this,j).rect=this.getRect(h,h)},jt(l,"_freeTextDefaultContent",""),jt(l,"_internalPadding",0),jt(l,"_defaultColor",null),jt(l,"_defaultFontSize",10),jt(l,"_type","freetext");let D=l;qe.FreeTextEditor=D},(it,qe,Qe)=>{var m,p,li,u,Fa,J,G,W,ce,_,ie,L,oe,T,Q,v,$,Z,te,ne,X,re,ae,Va,le,vi,ge,Ln,me,vn,xe,pe,we,Oe,Te,Ce,Ae,Wn,He,Ve,Le,Ye,Ca,Ee,Xn;Object.defineProperty(qe,"__esModule",{value:!0}),qe.StampAnnotationElement=qe.InkAnnotationElement=qe.FreeTextAnnotationElement=qe.AnnotationLayer=void 0;var ye=Qe(1),Ue=Qe(6),Xe=Qe(3),Fe=Qe(30),D=Qe(31),se=Qe(32);const i=1e3,w=9,P=new WeakSet;function e(_e){return{width:_e[2]-_e[0],height:_e[3]-_e[1]}}class t{static create(Ie){switch(Ie.data.annotationType){case ye.AnnotationType.LINK:return new K(Ie);case ye.AnnotationType.TEXT:return new j(Ie);case ye.AnnotationType.WIDGET:switch(Ie.data.fieldType){case"Tx":return new O(Ie);case"Btn":return Ie.data.radioButton?new n(Ie):Ie.data.checkBox?new A(Ie):new I(Ie);case"Ch":return new k(Ie);case"Sig":return new d(Ie)}return new C(Ie);case ye.AnnotationType.POPUP:return new y(Ie);case ye.AnnotationType.FREETEXT:return new R(Ie);case ye.AnnotationType.LINE:return new E(Ie);case ye.AnnotationType.SQUARE:return new M(Ie);case ye.AnnotationType.CIRCLE:return new b(Ie);case ye.AnnotationType.POLYLINE:return new V(Ie);case ye.AnnotationType.CARET:return new x(Ie);case ye.AnnotationType.INK:return new H(Ie);case ye.AnnotationType.POLYGON:return new l(Ie);case ye.AnnotationType.HIGHLIGHT:return new s(Ie);case ye.AnnotationType.UNDERLINE:return new h(Ie);case ye.AnnotationType.SQUIGGLY:return new F(Ie);case ye.AnnotationType.STRIKEOUT:return new N(Ie);case ye.AnnotationType.STAMP:return new U(Ie);case ye.AnnotationType.FILEATTACHMENT:return new g(Ie);default:return new o(Ie)}}}const r=class r{constructor(Ie,{isRenderable:de=!1,ignoreBorder:be=!1,createQuadrilaterals:Be=!1}={}){De(this,m,!1);this.isRenderable=de,this.data=Ie.data,this.layer=Ie.layer,this.linkService=Ie.linkService,this.downloadManager=Ie.downloadManager,this.imageResourcesPath=Ie.imageResourcesPath,this.renderForms=Ie.renderForms,this.svgFactory=Ie.svgFactory,this.annotationStorage=Ie.annotationStorage,this.enableScripting=Ie.enableScripting,this.hasJSActions=Ie.hasJSActions,this._fieldObjects=Ie.fieldObjects,this.parent=Ie.parent,de&&(this.container=this._createContainer(be)),Be&&this._createQuadrilaterals()}static _hasPopupData({titleObj:Ie,contentsObj:de,richText:be}){return!!(Ie!=null&&Ie.str||de!=null&&de.str||be!=null&&be.str)}get hasPopupData(){return r._hasPopupData(this.data)}_createContainer(Ie){const{data:de,parent:{page:be,viewport:Be}}=this,Pe=document.createElement("section");Pe.setAttribute("data-annotation-id",de.id),this instanceof C||(Pe.tabIndex=i),Pe.style.zIndex=this.parent.zIndex++,this.data.popupRef&&Pe.setAttribute("aria-haspopup","dialog"),de.noRotate&&Pe.classList.add("norotate");const{pageWidth:je,pageHeight:Je,pageX:$e,pageY:ve}=Be.rawDims;if(!de.rect||this instanceof y){const{rotation:gt}=de;return!de.hasOwnCanvas&&gt!==0&&this.setRotation(gt,Pe),Pe}const{width:We,height:tt}=e(de.rect),at=ye.Util.normalizeRect([de.rect[0],be.view[3]-de.rect[1]+be.view[1],de.rect[2],be.view[3]-de.rect[3]+be.view[1]]);if(!Ie&&de.borderStyle.width>0){Pe.style.borderWidth=`${de.borderStyle.width}px`;const gt=de.borderStyle.horizontalCornerRadius,ht=de.borderStyle.verticalCornerRadius;if(gt>0||ht>0){const Dt=`calc(${gt}px * var(--scale-factor)) / calc(${ht}px * var(--scale-factor))`;Pe.style.borderRadius=Dt}else if(this instanceof n){const Dt=`calc(${We}px * var(--scale-factor)) / calc(${tt}px * var(--scale-factor))`;Pe.style.borderRadius=Dt}switch(de.borderStyle.style){case ye.AnnotationBorderStyleType.SOLID:Pe.style.borderStyle="solid";break;case ye.AnnotationBorderStyleType.DASHED:Pe.style.borderStyle="dashed";break;case ye.AnnotationBorderStyleType.BEVELED:(0,ye.warn)("Unimplemented border style: beveled");break;case ye.AnnotationBorderStyleType.INSET:(0,ye.warn)("Unimplemented border style: inset");break;case ye.AnnotationBorderStyleType.UNDERLINE:Pe.style.borderBottomStyle="solid";break}const kt=de.borderColor||null;kt?(Ne(this,m,!0),Pe.style.borderColor=ye.Util.makeHexColor(kt[0]|0,kt[1]|0,kt[2]|0)):Pe.style.borderWidth=0}Pe.style.left=`${100*(at[0]-$e)/je}%`,Pe.style.top=`${100*(at[1]-ve)/Je}%`;const{rotation:ct}=de;return de.hasOwnCanvas||ct===0?(Pe.style.width=`${100*We/je}%`,Pe.style.height=`${100*tt/Je}%`):this.setRotation(ct,Pe),Pe}setRotation(Ie,de=this.container){if(!this.data.rect)return;const{pageWidth:be,pageHeight:Be}=this.parent.viewport.rawDims,{width:Pe,height:je}=e(this.data.rect);let Je,$e;Ie%180===0?(Je=100*Pe/be,$e=100*je/Be):(Je=100*je/be,$e=100*Pe/Be),de.style.width=`${Je}%`,de.style.height=`${$e}%`,de.setAttribute("data-main-rotation",(360-Ie)%360)}get _commonActions(){const Ie=(de,be,Be)=>{const Pe=Be.detail[de],je=Pe[0],Je=Pe.slice(1);Be.target.style[be]=Fe.ColorConverters[`${je}_HTML`](Je),this.annotationStorage.setValue(this.data.id,{[be]:Fe.ColorConverters[`${je}_rgb`](Je)})};return(0,ye.shadow)(this,"_commonActions",{display:de=>{const{display:be}=de.detail,Be=be%2===1;this.container.style.visibility=Be?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:Be,noPrint:be===1||be===2})},print:de=>{this.annotationStorage.setValue(this.data.id,{noPrint:!de.detail.print})},hidden:de=>{const{hidden:be}=de.detail;this.container.style.visibility=be?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:be,noView:be})},focus:de=>{setTimeout(()=>de.target.focus({preventScroll:!1}),0)},userName:de=>{de.target.title=de.detail.userName},readonly:de=>{de.target.disabled=de.detail.readonly},required:de=>{this._setRequired(de.target,de.detail.required)},bgColor:de=>{Ie("bgColor","backgroundColor",de)},fillColor:de=>{Ie("fillColor","backgroundColor",de)},fgColor:de=>{Ie("fgColor","color",de)},textColor:de=>{Ie("textColor","color",de)},borderColor:de=>{Ie("borderColor","borderColor",de)},strokeColor:de=>{Ie("strokeColor","borderColor",de)},rotation:de=>{const be=de.detail.rotation;this.setRotation(be),this.annotationStorage.setValue(this.data.id,{rotation:be})}})}_dispatchEventFromSandbox(Ie,de){const be=this._commonActions;for(const Be of Object.keys(de.detail)){const Pe=Ie[Be]||be[Be];Pe==null||Pe(de)}}_setDefaultPropertiesFromJS(Ie){if(!this.enableScripting)return;const de=this.annotationStorage.getRawValue(this.data.id);if(!de)return;const be=this._commonActions;for(const[Be,Pe]of Object.entries(de)){const je=be[Be];if(je){const Je={detail:{[Be]:Pe},target:Ie};je(Je),delete de[Be]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:Ie}=this.data;if(!Ie)return;const[de,be,Be,Pe]=this.data.rect;if(Ie.length===1){const[,{x:ht,y:kt},{x:Dt,y:ze}]=Ie[0];if(Be===ht&&Pe===kt&&de===Dt&&be===ze)return}const{style:je}=this.container;let Je;if(he(this,m)){const{borderColor:ht,borderWidth:kt}=je;je.borderWidth=0,Je=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${ht}" stroke-width="${kt}">`],this.container.classList.add("hasBorder")}const $e=Be-de,ve=Pe-be,{svgFactory:We}=this,tt=We.createElement("svg");tt.classList.add("quadrilateralsContainer"),tt.setAttribute("width",0),tt.setAttribute("height",0);const at=We.createElement("defs");tt.append(at);const ct=We.createElement("clipPath"),gt=`clippath_${this.data.id}`;ct.setAttribute("id",gt),ct.setAttribute("clipPathUnits","objectBoundingBox"),at.append(ct);for(const[,{x:ht,y:kt},{x:Dt,y:ze}]of Ie){const Ge=We.createElement("rect"),et=(Dt-de)/$e,ot=(Pe-kt)/ve,dt=(ht-Dt)/$e,bt=(kt-ze)/ve;Ge.setAttribute("x",et),Ge.setAttribute("y",ot),Ge.setAttribute("width",dt),Ge.setAttribute("height",bt),ct.append(Ge),Je==null||Je.push(`<rect vector-effect="non-scaling-stroke" x="${et}" y="${ot}" width="${dt}" height="${bt}"/>`)}he(this,m)&&(Je.push("</g></svg>')"),je.backgroundImage=Je.join("")),this.container.append(tt),this.container.style.clipPath=`url(#${gt})`}_createPopup(){const{container:Ie,data:de}=this;Ie.setAttribute("aria-haspopup","dialog");const be=new y({data:{color:de.color,titleObj:de.titleObj,modificationDate:de.modificationDate,contentsObj:de.contentsObj,richText:de.richText,parentRect:de.rect,borderStyle:0,id:`popup_${de.id}`,rotation:de.rotation},parent:this.parent,elements:[this]});this.parent.div.append(be.render())}render(){(0,ye.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(Ie,de=null){const be=[];if(this._fieldObjects){const Be=this._fieldObjects[Ie];if(Be)for(const{page:Pe,id:je,exportValues:Je}of Be){if(Pe===-1||je===de)continue;const $e=typeof Je=="string"?Je:null,ve=document.querySelector(`[data-element-id="${je}"]`);if(ve&&!P.has(ve)){(0,ye.warn)(`_getElementsByName - element not allowed: ${je}`);continue}be.push({id:je,exportValue:$e,domElement:ve})}return be}for(const Be of document.getElementsByName(Ie)){const{exportValue:Pe}=Be,je=Be.getAttribute("data-element-id");je!==de&&P.has(Be)&&be.push({id:je,exportValue:Pe,domElement:Be})}return be}show(){var Ie;this.container&&(this.container.hidden=!1),(Ie=this.popup)==null||Ie.maybeShow()}hide(){var Ie;this.container&&(this.container.hidden=!0),(Ie=this.popup)==null||Ie.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const Ie=this.getElementsToTriggerPopup();if(Array.isArray(Ie))for(const de of Ie)de.classList.add("highlightArea");else Ie.classList.add("highlightArea")}_editOnDoubleClick(){const{annotationEditorType:Ie,data:{id:de}}=this;this.container.addEventListener("dblclick",()=>{var be;(be=this.linkService.eventBus)==null||be.dispatch("switchannotationeditormode",{source:this,mode:Ie,editId:de})})}};m=new WeakMap;let o=r;class K extends o{constructor(de,be=null){super(de,{isRenderable:!0,ignoreBorder:!!(be!=null&&be.ignoreBorder),createQuadrilaterals:!0});De(this,p);De(this,u);this.isTooltipOnly=de.data.isTooltipOnly}render(){const{data:de,linkService:be}=this,Be=document.createElement("a");Be.setAttribute("data-element-id",de.id);let Pe=!1;return de.url?(be.addLinkAttributes(Be,de.url,de.newWindow),Pe=!0):de.action?(this._bindNamedAction(Be,de.action),Pe=!0):de.attachment?(this._bindAttachment(Be,de.attachment),Pe=!0):de.setOCGState?(Re(this,u,Fa).call(this,Be,de.setOCGState),Pe=!0):de.dest?(this._bindLink(Be,de.dest),Pe=!0):(de.actions&&(de.actions.Action||de.actions["Mouse Up"]||de.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(Be,de),Pe=!0),de.resetForm?(this._bindResetFormAction(Be,de.resetForm),Pe=!0):this.isTooltipOnly&&!Pe&&(this._bindLink(Be,""),Pe=!0)),this.container.classList.add("linkAnnotation"),Pe&&this.container.append(Be),this.container}_bindLink(de,be){de.href=this.linkService.getDestinationHash(be),de.onclick=()=>(be&&this.linkService.goToDestination(be),!1),(be||be==="")&&Re(this,p,li).call(this)}_bindNamedAction(de,be){de.href=this.linkService.getAnchorUrl(""),de.onclick=()=>(this.linkService.executeNamedAction(be),!1),Re(this,p,li).call(this)}_bindAttachment(de,be){de.href=this.linkService.getAnchorUrl(""),de.onclick=()=>{var Be;return(Be=this.downloadManager)==null||Be.openOrDownloadData(this.container,be.content,be.filename),!1},Re(this,p,li).call(this)}_bindJSAction(de,be){de.href=this.linkService.getAnchorUrl("");const Be=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const Pe of Object.keys(be.actions)){const je=Be.get(Pe);je&&(de[je]=()=>{var Je;return(Je=this.linkService.eventBus)==null||Je.dispatch("dispatcheventinsandbox",{source:this,detail:{id:be.id,name:Pe}}),!1})}de.onclick||(de.onclick=()=>!1),Re(this,p,li).call(this)}_bindResetFormAction(de,be){const Be=de.onclick;if(Be||(de.href=this.linkService.getAnchorUrl("")),Re(this,p,li).call(this),!this._fieldObjects){(0,ye.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),Be||(de.onclick=()=>!1);return}de.onclick=()=>{var tt;Be==null||Be();const{fields:Pe,refs:je,include:Je}=be,$e=[];if(Pe.length!==0||je.length!==0){const at=new Set(je);for(const ct of Pe){const gt=this._fieldObjects[ct]||[];for(const{id:ht}of gt)at.add(ht)}for(const ct of Object.values(this._fieldObjects))for(const gt of ct)at.has(gt.id)===Je&&$e.push(gt)}else for(const at of Object.values(this._fieldObjects))$e.push(...at);const ve=this.annotationStorage,We=[];for(const at of $e){const{id:ct}=at;switch(We.push(ct),at.type){case"text":{const ht=at.defaultValue||"";ve.setValue(ct,{value:ht});break}case"checkbox":case"radiobutton":{const ht=at.defaultValue===at.exportValues;ve.setValue(ct,{value:ht});break}case"combobox":case"listbox":{const ht=at.defaultValue||"";ve.setValue(ct,{value:ht});break}default:continue}const gt=document.querySelector(`[data-element-id="${ct}"]`);if(gt){if(!P.has(gt)){(0,ye.warn)(`_bindResetFormAction - element not allowed: ${ct}`);continue}}else continue;gt.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((tt=this.linkService.eventBus)==null||tt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:We,name:"ResetForm"}})),!1}}}p=new WeakSet,li=function(){this.container.setAttribute("data-internal-link","")},u=new WeakSet,Fa=function(de,be){de.href=this.linkService.getAnchorUrl(""),de.onclick=()=>(this.linkService.executeSetOCGState(be),!1),Re(this,p,li).call(this)};class j extends o{constructor(Ie){super(Ie,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const Ie=document.createElement("img");return Ie.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",Ie.alt="[{{type}} Annotation]",Ie.dataset.l10nId="text_annotation_type",Ie.dataset.l10nArgs=JSON.stringify({type:this.data.name}),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(Ie),this.container}}class C extends o{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(Ie){var de;this.data.hasOwnCanvas&&(((de=Ie.previousSibling)==null?void 0:de.nodeName)==="CANVAS"&&(Ie.previousSibling.hidden=!0),Ie.hidden=!1)}_getKeyModifier(Ie){const{isWin:de,isMac:be}=ye.FeatureTest.platform;return de&&Ie.ctrlKey||be&&Ie.metaKey}_setEventListener(Ie,de,be,Be,Pe){be.includes("mouse")?Ie.addEventListener(be,je=>{var Je;(Je=this.linkService.eventBus)==null||Je.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:Be,value:Pe(je),shift:je.shiftKey,modifier:this._getKeyModifier(je)}})}):Ie.addEventListener(be,je=>{var Je;if(be==="blur"){if(!de.focused||!je.relatedTarget)return;de.focused=!1}else if(be==="focus"){if(de.focused)return;de.focused=!0}Pe&&((Je=this.linkService.eventBus)==null||Je.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:Be,value:Pe(je)}}))})}_setEventListeners(Ie,de,be,Be){var Pe,je,Je;for(const[$e,ve]of be)(ve==="Action"||(Pe=this.data.actions)!=null&&Pe[ve])&&((ve==="Focus"||ve==="Blur")&&(de||(de={focused:!1})),this._setEventListener(Ie,de,$e,ve,Be),ve==="Focus"&&!((je=this.data.actions)!=null&&je.Blur)?this._setEventListener(Ie,de,"blur","Blur",null):ve==="Blur"&&!((Je=this.data.actions)!=null&&Je.Focus)&&this._setEventListener(Ie,de,"focus","Focus",null))}_setBackgroundColor(Ie){const de=this.data.backgroundColor||null;Ie.style.backgroundColor=de===null?"transparent":ye.Util.makeHexColor(de[0],de[1],de[2])}_setTextStyle(Ie){const de=["left","center","right"],{fontColor:be}=this.data.defaultAppearanceData,Be=this.data.defaultAppearanceData.fontSize||w,Pe=Ie.style;let je;const Je=2,$e=ve=>Math.round(10*ve)/10;if(this.data.multiLine){const ve=Math.abs(this.data.rect[3]-this.data.rect[1]-Je),We=Math.round(ve/(ye.LINE_FACTOR*Be))||1,tt=ve/We;je=Math.min(Be,$e(tt/ye.LINE_FACTOR))}else{const ve=Math.abs(this.data.rect[3]-this.data.rect[1]-Je);je=Math.min(Be,$e(ve/ye.LINE_FACTOR))}Pe.fontSize=`calc(${je}px * var(--scale-factor))`,Pe.color=ye.Util.makeHexColor(be[0],be[1],be[2]),this.data.textAlignment!==null&&(Pe.textAlign=de[this.data.textAlignment])}_setRequired(Ie,de){de?Ie.setAttribute("required",!0):Ie.removeAttribute("required"),Ie.setAttribute("aria-required",de)}}class O extends C{constructor(Ie){const de=Ie.renderForms||!Ie.data.hasAppearance&&!!Ie.data.fieldValue;super(Ie,{isRenderable:de})}setPropertyOnSiblings(Ie,de,be,Be){const Pe=this.annotationStorage;for(const je of this._getElementsByName(Ie.name,Ie.id))je.domElement&&(je.domElement[de]=be),Pe.setValue(je.id,{[Be]:be})}render(){var Be,Pe;const Ie=this.annotationStorage,de=this.data.id;this.container.classList.add("textWidgetAnnotation");let be=null;if(this.renderForms){const je=Ie.getValue(de,{value:this.data.fieldValue});let Je=je.value||"";const $e=Ie.getValue(de,{charLimit:this.data.maxLen}).charLimit;$e&&Je.length>$e&&(Je=Je.slice(0,$e));let ve=je.formattedValue||((Be=this.data.textContent)==null?void 0:Be.join(`
`))||null;ve&&this.data.comb&&(ve=ve.replaceAll(/\s+/g,""));const We={userValue:Je,formattedValue:ve,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(be=document.createElement("textarea"),be.textContent=ve!=null?ve:Je,this.data.doNotScroll&&(be.style.overflowY="hidden")):(be=document.createElement("input"),be.type="text",be.setAttribute("value",ve!=null?ve:Je),this.data.doNotScroll&&(be.style.overflowX="hidden")),this.data.hasOwnCanvas&&(be.hidden=!0),P.add(be),be.setAttribute("data-element-id",de),be.disabled=this.data.readOnly,be.name=this.data.fieldName,be.tabIndex=i,this._setRequired(be,this.data.required),$e&&(be.maxLength=$e),be.addEventListener("input",at=>{Ie.setValue(de,{value:at.target.value}),this.setPropertyOnSiblings(be,"value",at.target.value,"value"),We.formattedValue=null}),be.addEventListener("resetform",at=>{var gt;const ct=(gt=this.data.defaultFieldValue)!=null?gt:"";be.value=We.userValue=ct,We.formattedValue=null});let tt=at=>{const{formattedValue:ct}=We;ct!=null&&(at.target.value=ct),at.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){be.addEventListener("focus",ct=>{if(We.focused)return;const{target:gt}=ct;We.userValue&&(gt.value=We.userValue),We.lastCommittedValue=gt.value,We.commitKey=1,We.focused=!0}),be.addEventListener("updatefromsandbox",ct=>{this.showElementAndHideCanvas(ct.target);const gt={value(ht){var kt;We.userValue=(kt=ht.detail.value)!=null?kt:"",Ie.setValue(de,{value:We.userValue.toString()}),ht.target.value=We.userValue},formattedValue(ht){const{formattedValue:kt}=ht.detail;We.formattedValue=kt,kt!=null&&ht.target!==document.activeElement&&(ht.target.value=kt),Ie.setValue(de,{formattedValue:kt})},selRange(ht){ht.target.setSelectionRange(...ht.detail.selRange)},charLimit:ht=>{var Ge;const{charLimit:kt}=ht.detail,{target:Dt}=ht;if(kt===0){Dt.removeAttribute("maxLength");return}Dt.setAttribute("maxLength",kt);let ze=We.userValue;!ze||ze.length<=kt||(ze=ze.slice(0,kt),Dt.value=We.userValue=ze,Ie.setValue(de,{value:ze}),(Ge=this.linkService.eventBus)==null||Ge.dispatch("dispatcheventinsandbox",{source:this,detail:{id:de,name:"Keystroke",value:ze,willCommit:!0,commitKey:1,selStart:Dt.selectionStart,selEnd:Dt.selectionEnd}}))}};this._dispatchEventFromSandbox(gt,ct)}),be.addEventListener("keydown",ct=>{var kt;We.commitKey=1;let gt=-1;if(ct.key==="Escape"?gt=0:ct.key==="Enter"&&!this.data.multiLine?gt=2:ct.key==="Tab"&&(We.commitKey=3),gt===-1)return;const{value:ht}=ct.target;We.lastCommittedValue!==ht&&(We.lastCommittedValue=ht,We.userValue=ht,(kt=this.linkService.eventBus)==null||kt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:de,name:"Keystroke",value:ht,willCommit:!0,commitKey:gt,selStart:ct.target.selectionStart,selEnd:ct.target.selectionEnd}}))});const at=tt;tt=null,be.addEventListener("blur",ct=>{var ht;if(!We.focused||!ct.relatedTarget)return;We.focused=!1;const{value:gt}=ct.target;We.userValue=gt,We.lastCommittedValue!==gt&&((ht=this.linkService.eventBus)==null||ht.dispatch("dispatcheventinsandbox",{source:this,detail:{id:de,name:"Keystroke",value:gt,willCommit:!0,commitKey:We.commitKey,selStart:ct.target.selectionStart,selEnd:ct.target.selectionEnd}})),at(ct)}),(Pe=this.data.actions)!=null&&Pe.Keystroke&&be.addEventListener("beforeinput",ct=>{var ot;We.lastCommittedValue=null;const{data:gt,target:ht}=ct,{value:kt,selectionStart:Dt,selectionEnd:ze}=ht;let Ge=Dt,et=ze;switch(ct.inputType){case"deleteWordBackward":{const dt=kt.substring(0,Dt).match(/\w*[^\w]*$/);dt&&(Ge-=dt[0].length);break}case"deleteWordForward":{const dt=kt.substring(Dt).match(/^[^\w]*\w*/);dt&&(et+=dt[0].length);break}case"deleteContentBackward":Dt===ze&&(Ge-=1);break;case"deleteContentForward":Dt===ze&&(et+=1);break}ct.preventDefault(),(ot=this.linkService.eventBus)==null||ot.dispatch("dispatcheventinsandbox",{source:this,detail:{id:de,name:"Keystroke",value:kt,change:gt||"",willCommit:!1,selStart:Ge,selEnd:et}})}),this._setEventListeners(be,We,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],ct=>ct.target.value)}if(tt&&be.addEventListener("blur",tt),this.data.comb){const ct=(this.data.rect[2]-this.data.rect[0])/$e;be.classList.add("comb"),be.style.letterSpacing=`calc(${ct}px * var(--scale-factor) - 1ch)`}}else be=document.createElement("div"),be.textContent=this.data.fieldValue,be.style.verticalAlign="middle",be.style.display="table-cell";return this._setTextStyle(be),this._setBackgroundColor(be),this._setDefaultPropertiesFromJS(be),this.container.append(be),this.container}}class d extends C{constructor(Ie){super(Ie,{isRenderable:!!Ie.data.hasOwnCanvas})}}class A extends C{constructor(Ie){super(Ie,{isRenderable:Ie.renderForms})}render(){const Ie=this.annotationStorage,de=this.data,be=de.id;let Be=Ie.getValue(be,{value:de.exportValue===de.fieldValue}).value;typeof Be=="string"&&(Be=Be!=="Off",Ie.setValue(be,{value:Be})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const Pe=document.createElement("input");return P.add(Pe),Pe.setAttribute("data-element-id",be),Pe.disabled=de.readOnly,this._setRequired(Pe,this.data.required),Pe.type="checkbox",Pe.name=de.fieldName,Be&&Pe.setAttribute("checked",!0),Pe.setAttribute("exportValue",de.exportValue),Pe.tabIndex=i,Pe.addEventListener("change",je=>{const{name:Je,checked:$e}=je.target;for(const ve of this._getElementsByName(Je,be)){const We=$e&&ve.exportValue===de.exportValue;ve.domElement&&(ve.domElement.checked=We),Ie.setValue(ve.id,{value:We})}Ie.setValue(be,{value:$e})}),Pe.addEventListener("resetform",je=>{const Je=de.defaultFieldValue||"Off";je.target.checked=Je===de.exportValue}),this.enableScripting&&this.hasJSActions&&(Pe.addEventListener("updatefromsandbox",je=>{const Je={value($e){$e.target.checked=$e.detail.value!=="Off",Ie.setValue(be,{value:$e.target.checked})}};this._dispatchEventFromSandbox(Je,je)}),this._setEventListeners(Pe,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],je=>je.target.checked)),this._setBackgroundColor(Pe),this._setDefaultPropertiesFromJS(Pe),this.container.append(Pe),this.container}}class n extends C{constructor(Ie){super(Ie,{isRenderable:Ie.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const Ie=this.annotationStorage,de=this.data,be=de.id;let Be=Ie.getValue(be,{value:de.fieldValue===de.buttonValue}).value;typeof Be=="string"&&(Be=Be!==de.buttonValue,Ie.setValue(be,{value:Be}));const Pe=document.createElement("input");if(P.add(Pe),Pe.setAttribute("data-element-id",be),Pe.disabled=de.readOnly,this._setRequired(Pe,this.data.required),Pe.type="radio",Pe.name=de.fieldName,Be&&Pe.setAttribute("checked",!0),Pe.tabIndex=i,Pe.addEventListener("change",je=>{const{name:Je,checked:$e}=je.target;for(const ve of this._getElementsByName(Je,be))Ie.setValue(ve.id,{value:!1});Ie.setValue(be,{value:$e})}),Pe.addEventListener("resetform",je=>{const Je=de.defaultFieldValue;je.target.checked=Je!=null&&Je===de.buttonValue}),this.enableScripting&&this.hasJSActions){const je=de.buttonValue;Pe.addEventListener("updatefromsandbox",Je=>{const $e={value:ve=>{const We=je===ve.detail.value;for(const tt of this._getElementsByName(ve.target.name)){const at=We&&tt.id===be;tt.domElement&&(tt.domElement.checked=at),Ie.setValue(tt.id,{value:at})}}};this._dispatchEventFromSandbox($e,Je)}),this._setEventListeners(Pe,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],Je=>Je.target.checked)}return this._setBackgroundColor(Pe),this._setDefaultPropertiesFromJS(Pe),this.container.append(Pe),this.container}}class I extends K{constructor(Ie){super(Ie,{ignoreBorder:Ie.data.hasAppearance})}render(){const Ie=super.render();Ie.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(Ie.title=this.data.alternativeText);const de=Ie.lastChild;return this.enableScripting&&this.hasJSActions&&de&&(this._setDefaultPropertiesFromJS(de),de.addEventListener("updatefromsandbox",be=>{this._dispatchEventFromSandbox({},be)})),Ie}}class k extends C{constructor(Ie){super(Ie,{isRenderable:Ie.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const Ie=this.annotationStorage,de=this.data.id,be=Ie.getValue(de,{value:this.data.fieldValue}),Be=document.createElement("select");P.add(Be),Be.setAttribute("data-element-id",de),Be.disabled=this.data.readOnly,this._setRequired(Be,this.data.required),Be.name=this.data.fieldName,Be.tabIndex=i;let Pe=this.data.combo&&this.data.options.length>0;this.data.combo||(Be.size=this.data.options.length,this.data.multiSelect&&(Be.multiple=!0)),Be.addEventListener("resetform",We=>{const tt=this.data.defaultFieldValue;for(const at of Be.options)at.selected=at.value===tt});for(const We of this.data.options){const tt=document.createElement("option");tt.textContent=We.displayValue,tt.value=We.exportValue,be.value.includes(We.exportValue)&&(tt.setAttribute("selected",!0),Pe=!1),Be.append(tt)}let je=null;if(Pe){const We=document.createElement("option");We.value=" ",We.setAttribute("hidden",!0),We.setAttribute("selected",!0),Be.prepend(We),je=()=>{We.remove(),Be.removeEventListener("input",je),je=null},Be.addEventListener("input",je)}const Je=We=>{const tt=We?"value":"textContent",{options:at,multiple:ct}=Be;return ct?Array.prototype.filter.call(at,gt=>gt.selected).map(gt=>gt[tt]):at.selectedIndex===-1?null:at[at.selectedIndex][tt]};let $e=Je(!1);const ve=We=>{const tt=We.target.options;return Array.prototype.map.call(tt,at=>({displayValue:at.textContent,exportValue:at.value}))};return this.enableScripting&&this.hasJSActions?(Be.addEventListener("updatefromsandbox",We=>{const tt={value(at){je==null||je();const ct=at.detail.value,gt=new Set(Array.isArray(ct)?ct:[ct]);for(const ht of Be.options)ht.selected=gt.has(ht.value);Ie.setValue(de,{value:Je(!0)}),$e=Je(!1)},multipleSelection(at){Be.multiple=!0},remove(at){const ct=Be.options,gt=at.detail.remove;ct[gt].selected=!1,Be.remove(gt),ct.length>0&&Array.prototype.findIndex.call(ct,kt=>kt.selected)===-1&&(ct[0].selected=!0),Ie.setValue(de,{value:Je(!0),items:ve(at)}),$e=Je(!1)},clear(at){for(;Be.length!==0;)Be.remove(0);Ie.setValue(de,{value:null,items:[]}),$e=Je(!1)},insert(at){const{index:ct,displayValue:gt,exportValue:ht}=at.detail.insert,kt=Be.children[ct],Dt=document.createElement("option");Dt.textContent=gt,Dt.value=ht,kt?kt.before(Dt):Be.append(Dt),Ie.setValue(de,{value:Je(!0),items:ve(at)}),$e=Je(!1)},items(at){const{items:ct}=at.detail;for(;Be.length!==0;)Be.remove(0);for(const gt of ct){const{displayValue:ht,exportValue:kt}=gt,Dt=document.createElement("option");Dt.textContent=ht,Dt.value=kt,Be.append(Dt)}Be.options.length>0&&(Be.options[0].selected=!0),Ie.setValue(de,{value:Je(!0),items:ve(at)}),$e=Je(!1)},indices(at){const ct=new Set(at.detail.indices);for(const gt of at.target.options)gt.selected=ct.has(gt.index);Ie.setValue(de,{value:Je(!0)}),$e=Je(!1)},editable(at){at.target.disabled=!at.detail.editable}};this._dispatchEventFromSandbox(tt,We)}),Be.addEventListener("input",We=>{var at;const tt=Je(!0);Ie.setValue(de,{value:tt}),We.preventDefault(),(at=this.linkService.eventBus)==null||at.dispatch("dispatcheventinsandbox",{source:this,detail:{id:de,name:"Keystroke",value:$e,changeEx:tt,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(Be,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],We=>We.target.value)):Be.addEventListener("input",function(We){Ie.setValue(de,{value:Je(!0)})}),this.data.combo&&this._setTextStyle(Be),this._setBackgroundColor(Be),this._setDefaultPropertiesFromJS(Be),this.container.append(Be),this.container}}class y extends o{constructor(Ie){const{data:de,elements:be}=Ie;super(Ie,{isRenderable:o._hasPopupData(de)}),this.elements=be}render(){this.container.classList.add("popupAnnotation");const Ie=new f({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),de=[];for(const be of this.elements)be.popup=Ie,de.push(be.data.id),be.addHighlightArea();return this.container.setAttribute("aria-controls",de.map(be=>`${ye.AnnotationPrefix}${be}`).join(",")),this.container}}class f{constructor({container:Ie,color:de,elements:be,titleObj:Be,modificationDate:Pe,contentsObj:je,richText:Je,parent:$e,rect:ve,parentRect:We,open:tt}){De(this,ae);De(this,le);De(this,ge);De(this,me);De(this,J,null);De(this,G,Re(this,ae,Va).bind(this));De(this,W,Re(this,me,vn).bind(this));De(this,ce,Re(this,ge,Ln).bind(this));De(this,_,Re(this,le,vi).bind(this));De(this,ie,null);De(this,L,null);De(this,oe,null);De(this,T,null);De(this,Q,null);De(this,v,null);De(this,$,!1);De(this,Z,null);De(this,te,null);De(this,ne,null);De(this,X,null);De(this,re,!1);var ct;Ne(this,L,Ie),Ne(this,X,Be),Ne(this,oe,je),Ne(this,ne,Je),Ne(this,Q,$e),Ne(this,ie,de),Ne(this,te,ve),Ne(this,v,We),Ne(this,T,be);const at=Ue.PDFDateString.toDateObject(Pe);at&&Ne(this,J,$e.l10n.get("annotation_date_string",{date:at.toLocaleDateString(),time:at.toLocaleTimeString()})),this.trigger=be.flatMap(gt=>gt.getElementsToTriggerPopup());for(const gt of this.trigger)gt.addEventListener("click",he(this,_)),gt.addEventListener("mouseenter",he(this,ce)),gt.addEventListener("mouseleave",he(this,W)),gt.classList.add("popupTriggerArea");for(const gt of be)(ct=gt.container)==null||ct.addEventListener("keydown",he(this,G));he(this,L).hidden=!0,tt&&Re(this,le,vi).call(this)}render(){if(he(this,Z))return;const{page:{view:Ie},viewport:{rawDims:{pageWidth:de,pageHeight:be,pageX:Be,pageY:Pe}}}=he(this,Q),je=Ne(this,Z,document.createElement("div"));if(je.className="popup",he(this,ie)){const Ge=je.style.outlineColor=ye.Util.makeHexColor(...he(this,ie));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?je.style.backgroundColor=`color-mix(in srgb, ${Ge} 30%, white)`:je.style.backgroundColor=ye.Util.makeHexColor(...he(this,ie).map(ot=>Math.floor(.7*(255-ot)+ot)))}const Je=document.createElement("span");Je.className="header";const $e=document.createElement("h1");if(Je.append($e),{dir:$e.dir,str:$e.textContent}=he(this,X),je.append(Je),he(this,J)){const Ge=document.createElement("span");Ge.classList.add("popupDate"),he(this,J).then(et=>{Ge.textContent=et}),Je.append(Ge)}const ve=he(this,oe),We=he(this,ne);if(We!=null&&We.str&&(!(ve!=null&&ve.str)||ve.str===We.str))se.XfaLayer.render({xfaHtml:We.html,intent:"richText",div:je}),je.lastChild.classList.add("richText","popupContent");else{const Ge=this._formatContents(ve);je.append(Ge)}let tt=!!he(this,v),at=tt?he(this,v):he(this,te);for(const Ge of he(this,T))if(!at||ye.Util.intersect(Ge.data.rect,at)!==null){at=Ge.data.rect,tt=!0;break}const ct=ye.Util.normalizeRect([at[0],Ie[3]-at[1]+Ie[1],at[2],Ie[3]-at[3]+Ie[1]]),ht=tt?at[2]-at[0]+5:0,kt=ct[0]+ht,Dt=ct[1],{style:ze}=he(this,L);ze.left=`${100*(kt-Be)/de}%`,ze.top=`${100*(Dt-Pe)/be}%`,he(this,L).append(je)}_formatContents({str:Ie,dir:de}){const be=document.createElement("p");be.classList.add("popupContent"),be.dir=de;const Be=Ie.split(/(?:\r\n?|\n)/);for(let Pe=0,je=Be.length;Pe<je;++Pe){const Je=Be[Pe];be.append(document.createTextNode(Je)),Pe<je-1&&be.append(document.createElement("br"))}return be}forceHide(){Ne(this,re,this.isVisible),he(this,re)&&(he(this,L).hidden=!0)}maybeShow(){he(this,re)&&(Ne(this,re,!1),he(this,L).hidden=!1)}get isVisible(){return he(this,L).hidden===!1}}J=new WeakMap,G=new WeakMap,W=new WeakMap,ce=new WeakMap,_=new WeakMap,ie=new WeakMap,L=new WeakMap,oe=new WeakMap,T=new WeakMap,Q=new WeakMap,v=new WeakMap,$=new WeakMap,Z=new WeakMap,te=new WeakMap,ne=new WeakMap,X=new WeakMap,re=new WeakMap,ae=new WeakSet,Va=function(Ie){Ie.altKey||Ie.shiftKey||Ie.ctrlKey||Ie.metaKey||(Ie.key==="Enter"||Ie.key==="Escape"&&he(this,$))&&Re(this,le,vi).call(this)},le=new WeakSet,vi=function(){Ne(this,$,!he(this,$)),he(this,$)?(Re(this,ge,Ln).call(this),he(this,L).addEventListener("click",he(this,_)),he(this,L).addEventListener("keydown",he(this,G))):(Re(this,me,vn).call(this),he(this,L).removeEventListener("click",he(this,_)),he(this,L).removeEventListener("keydown",he(this,G)))},ge=new WeakSet,Ln=function(){he(this,Z)||this.render(),this.isVisible?he(this,$)&&he(this,L).classList.add("focused"):(he(this,L).hidden=!1,he(this,L).style.zIndex=parseInt(he(this,L).style.zIndex)+1e3)},me=new WeakSet,vn=function(){he(this,L).classList.remove("focused"),!(he(this,$)||!this.isVisible)&&(he(this,L).hidden=!0,he(this,L).style.zIndex=parseInt(he(this,L).style.zIndex)-1e3)};class R extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0}),this.textContent=Ie.data.textContent,this.textPosition=Ie.data.textPosition,this.annotationEditorType=ye.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const Ie=document.createElement("div");Ie.classList.add("annotationTextContent"),Ie.setAttribute("role","comment");for(const de of this.textContent){const be=document.createElement("span");be.textContent=de,Ie.append(be)}this.container.append(Ie)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}qe.FreeTextAnnotationElement=R;class E extends o{constructor(de){super(de,{isRenderable:!0,ignoreBorder:!0});De(this,xe,null)}render(){this.container.classList.add("lineAnnotation");const de=this.data,{width:be,height:Be}=e(de.rect),Pe=this.svgFactory.create(be,Be,!0),je=Ne(this,xe,this.svgFactory.createElement("svg:line"));return je.setAttribute("x1",de.rect[2]-de.lineCoordinates[0]),je.setAttribute("y1",de.rect[3]-de.lineCoordinates[1]),je.setAttribute("x2",de.rect[2]-de.lineCoordinates[2]),je.setAttribute("y2",de.rect[3]-de.lineCoordinates[3]),je.setAttribute("stroke-width",de.borderStyle.width||1),je.setAttribute("stroke","transparent"),je.setAttribute("fill","transparent"),Pe.append(je),this.container.append(Pe),!de.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return he(this,xe)}addHighlightArea(){this.container.classList.add("highlightArea")}}xe=new WeakMap;class M extends o{constructor(de){super(de,{isRenderable:!0,ignoreBorder:!0});De(this,pe,null)}render(){this.container.classList.add("squareAnnotation");const de=this.data,{width:be,height:Be}=e(de.rect),Pe=this.svgFactory.create(be,Be,!0),je=de.borderStyle.width,Je=Ne(this,pe,this.svgFactory.createElement("svg:rect"));return Je.setAttribute("x",je/2),Je.setAttribute("y",je/2),Je.setAttribute("width",be-je),Je.setAttribute("height",Be-je),Je.setAttribute("stroke-width",je||1),Je.setAttribute("stroke","transparent"),Je.setAttribute("fill","transparent"),Pe.append(Je),this.container.append(Pe),!de.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return he(this,pe)}addHighlightArea(){this.container.classList.add("highlightArea")}}pe=new WeakMap;class b extends o{constructor(de){super(de,{isRenderable:!0,ignoreBorder:!0});De(this,we,null)}render(){this.container.classList.add("circleAnnotation");const de=this.data,{width:be,height:Be}=e(de.rect),Pe=this.svgFactory.create(be,Be,!0),je=de.borderStyle.width,Je=Ne(this,we,this.svgFactory.createElement("svg:ellipse"));return Je.setAttribute("cx",be/2),Je.setAttribute("cy",Be/2),Je.setAttribute("rx",be/2-je/2),Je.setAttribute("ry",Be/2-je/2),Je.setAttribute("stroke-width",je||1),Je.setAttribute("stroke","transparent"),Je.setAttribute("fill","transparent"),Pe.append(Je),this.container.append(Pe),!de.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return he(this,we)}addHighlightArea(){this.container.classList.add("highlightArea")}}we=new WeakMap;class V extends o{constructor(de){super(de,{isRenderable:!0,ignoreBorder:!0});De(this,Oe,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const de=this.data,{width:be,height:Be}=e(de.rect),Pe=this.svgFactory.create(be,Be,!0);let je=[];for(const $e of de.vertices){const ve=$e.x-de.rect[0],We=de.rect[3]-$e.y;je.push(ve+","+We)}je=je.join(" ");const Je=Ne(this,Oe,this.svgFactory.createElement(this.svgElementName));return Je.setAttribute("points",je),Je.setAttribute("stroke-width",de.borderStyle.width||1),Je.setAttribute("stroke","transparent"),Je.setAttribute("fill","transparent"),Pe.append(Je),this.container.append(Pe),!de.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return he(this,Oe)}addHighlightArea(){this.container.classList.add("highlightArea")}}Oe=new WeakMap;class l extends V{constructor(Ie){super(Ie),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class x extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class H extends o{constructor(de){super(de,{isRenderable:!0,ignoreBorder:!0});De(this,Te,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=ye.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const de=this.data,{width:be,height:Be}=e(de.rect),Pe=this.svgFactory.create(be,Be,!0);for(const je of de.inkLists){let Je=[];for(const ve of je){const We=ve.x-de.rect[0],tt=de.rect[3]-ve.y;Je.push(`${We},${tt}`)}Je=Je.join(" ");const $e=this.svgFactory.createElement(this.svgElementName);he(this,Te).push($e),$e.setAttribute("points",Je),$e.setAttribute("stroke-width",de.borderStyle.width||1),$e.setAttribute("stroke","transparent"),$e.setAttribute("fill","transparent"),!de.popupRef&&this.hasPopupData&&this._createPopup(),Pe.append($e)}return this.container.append(Pe),this.container}getElementsToTriggerPopup(){return he(this,Te)}addHighlightArea(){this.container.classList.add("highlightArea")}}Te=new WeakMap,qe.InkAnnotationElement=H;class s extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class h extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class F extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class N extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class U extends o{constructor(Ie){super(Ie,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}qe.StampAnnotationElement=U;class g extends o{constructor(de){var Pe;super(de,{isRenderable:!0});De(this,Ae);De(this,Ce,null);const{filename:be,content:Be}=this.data.file;this.filename=(0,Ue.getFilenameFromUrl)(be,!0),this.content=Be,(Pe=this.linkService.eventBus)==null||Pe.dispatch("fileattachmentannotation",{source:this,filename:be,content:Be})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:de,data:be}=this;let Be;be.hasAppearance||be.fillAlpha===0?Be=document.createElement("div"):(Be=document.createElement("img"),Be.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(be.name)?"paperclip":"pushpin"}.svg`,be.fillAlpha&&be.fillAlpha<1&&(Be.style=`filter: opacity(${Math.round(be.fillAlpha*100)}%);`)),Be.addEventListener("dblclick",Re(this,Ae,Wn).bind(this)),Ne(this,Ce,Be);const{isMac:Pe}=ye.FeatureTest.platform;return de.addEventListener("keydown",je=>{je.key==="Enter"&&(Pe?je.metaKey:je.ctrlKey)&&Re(this,Ae,Wn).call(this)}),!be.popupRef&&this.hasPopupData?this._createPopup():Be.classList.add("popupTriggerArea"),de.append(Be),de}getElementsToTriggerPopup(){return he(this,Ce)}addHighlightArea(){this.container.classList.add("highlightArea")}}Ce=new WeakMap,Ae=new WeakSet,Wn=function(){var de;(de=this.downloadManager)==null||de.openOrDownloadData(this.container,this.content,this.filename)};class S{constructor({div:Ie,accessibilityManager:de,annotationCanvasMap:be,l10n:Be,page:Pe,viewport:je}){De(this,Ye);De(this,Ee);De(this,He,null);De(this,Ve,null);De(this,Le,new Map);this.div=Ie,Ne(this,He,de),Ne(this,Ve,be),this.l10n=Be,this.page=Pe,this.viewport=je,this.zIndex=0,this.l10n||(this.l10n=D.NullL10n)}render(Ie){return rt(this,null,function*(){const{annotations:de}=Ie,be=this.div;(0,Ue.setLayerDimensions)(be,this.viewport);const Be=new Map,Pe={data:null,layer:be,linkService:Ie.linkService,downloadManager:Ie.downloadManager,imageResourcesPath:Ie.imageResourcesPath||"",renderForms:Ie.renderForms!==!1,svgFactory:new Ue.DOMSVGFactory,annotationStorage:Ie.annotationStorage||new Xe.AnnotationStorage,enableScripting:Ie.enableScripting===!0,hasJSActions:Ie.hasJSActions,fieldObjects:Ie.fieldObjects,parent:this,elements:null};for(const je of de){if(je.noHTML)continue;const Je=je.annotationType===ye.AnnotationType.POPUP;if(Je){const We=Be.get(je.id);if(!We)continue;Pe.elements=We}else{const{width:We,height:tt}=e(je.rect);if(We<=0||tt<=0)continue}Pe.data=je;const $e=t.create(Pe);if(!$e.isRenderable)continue;if(!Je&&je.popupRef){const We=Be.get(je.popupRef);We?We.push($e):Be.set(je.popupRef,[$e])}$e.annotationEditorType>0&&he(this,Le).set($e.data.id,$e);const ve=$e.render();je.hidden&&(ve.style.visibility="hidden"),Re(this,Ye,Ca).call(this,ve,je.id)}Re(this,Ee,Xn).call(this),yield this.l10n.translate(be)})}update({viewport:Ie}){const de=this.div;this.viewport=Ie,(0,Ue.setLayerDimensions)(de,{rotation:Ie.rotation}),Re(this,Ee,Xn).call(this),de.hidden=!1}getEditableAnnotations(){return Array.from(he(this,Le).values())}getEditableAnnotation(Ie){return he(this,Le).get(Ie)}}He=new WeakMap,Ve=new WeakMap,Le=new WeakMap,Ye=new WeakSet,Ca=function(Ie,de){var Be;const be=Ie.firstChild||Ie;be.id=`${ye.AnnotationPrefix}${de}`,this.div.append(Ie),(Be=he(this,He))==null||Be.moveElementInDOM(this.div,Ie,be,!1)},Ee=new WeakSet,Xn=function(){if(!he(this,Ve))return;const Ie=this.div;for(const[de,be]of he(this,Ve)){const Be=Ie.querySelector(`[data-annotation-id="${de}"]`);if(!Be)continue;const{firstChild:Pe}=Be;Pe?Pe.nodeName==="CANVAS"?Pe.replaceWith(be):Pe.before(be):Be.append(be)}he(this,Ve).clear()},qe.AnnotationLayer=S},(it,qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.ColorConverters=void 0;function Qe(Xe){return Math.floor(Math.max(0,Math.min(1,Xe))*255).toString(16).padStart(2,"0")}function ye(Xe){return Math.max(0,Math.min(255,255*Xe))}class Ue{static CMYK_G([Fe,D,se,i]){return["G",1-Math.min(1,.3*Fe+.59*se+.11*D+i)]}static G_CMYK([Fe]){return["CMYK",0,0,0,1-Fe]}static G_RGB([Fe]){return["RGB",Fe,Fe,Fe]}static G_rgb([Fe]){return Fe=ye(Fe),[Fe,Fe,Fe]}static G_HTML([Fe]){const D=Qe(Fe);return`#${D}${D}${D}`}static RGB_G([Fe,D,se]){return["G",.3*Fe+.59*D+.11*se]}static RGB_rgb(Fe){return Fe.map(ye)}static RGB_HTML(Fe){return`#${Fe.map(Qe).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([Fe,D,se,i]){return["RGB",1-Math.min(1,Fe+i),1-Math.min(1,se+i),1-Math.min(1,D+i)]}static CMYK_rgb([Fe,D,se,i]){return[ye(1-Math.min(1,Fe+i)),ye(1-Math.min(1,se+i)),ye(1-Math.min(1,D+i))]}static CMYK_HTML(Fe){const D=this.CMYK_RGB(Fe).slice(1);return this.RGB_HTML(D)}static RGB_CMYK([Fe,D,se]){const i=1-Fe,w=1-D,P=1-se,e=Math.min(i,w,P);return["CMYK",i,w,P,e]}}qe.ColorConverters=Ue},(it,qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.NullL10n=void 0,qe.getL10nFallback=ye;const Qe={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} × {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",rendering_error:"An error occurred while rendering the page.",annotation_date_string:"{{date}}, {{time}}",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text2_default_content:"Start typing…",editor_free_text2_aria_label:"Text Editor",editor_ink2_aria_label:"Draw Editor",editor_ink_canvas_aria_label:"User-created image",editor_alt_text_button_label:"Alt text",editor_alt_text_edit_button_label:"Edit alt text",editor_alt_text_decorative_tooltip:"Marked as decorative"};Qe.print_progress_percent="{{progress}}%";function ye(D,se){switch(D){case"find_match_count":D=`find_match_count[${se.total===1?"one":"other"}]`;break;case"find_match_count_limit":D=`find_match_count_limit[${se.limit===1?"one":"other"}]`;break}return Qe[D]||""}function Ue(D,se){return se?D.replaceAll(/\{\{\s*(\w+)\s*\}\}/g,(i,w)=>w in se?se[w]:"{{"+w+"}}"):D}const Xe={getLanguage(){return rt(this,null,function*(){return"en-us"})},getDirection(){return rt(this,null,function*(){return"ltr"})},get(w){return rt(this,arguments,function*(D,se=null,i=ye(D,se)){return Ue(i,se)})},translate(D){return rt(this,null,function*(){})}};qe.NullL10n=Xe},(it,qe,Qe)=>{Object.defineProperty(qe,"__esModule",{value:!0}),qe.XfaLayer=void 0;var ye=Qe(25);class Ue{static setupStorage(Fe,D,se,i,w){const P=i.getValue(D,{value:null});switch(se.name){case"textarea":if(P.value!==null&&(Fe.textContent=P.value),w==="print")break;Fe.addEventListener("input",e=>{i.setValue(D,{value:e.target.value})});break;case"input":if(se.attributes.type==="radio"||se.attributes.type==="checkbox"){if(P.value===se.attributes.xfaOn?Fe.setAttribute("checked",!0):P.value===se.attributes.xfaOff&&Fe.removeAttribute("checked"),w==="print")break;Fe.addEventListener("change",e=>{i.setValue(D,{value:e.target.checked?e.target.getAttribute("xfaOn"):e.target.getAttribute("xfaOff")})})}else{if(P.value!==null&&Fe.setAttribute("value",P.value),w==="print")break;Fe.addEventListener("input",e=>{i.setValue(D,{value:e.target.value})})}break;case"select":if(P.value!==null){Fe.setAttribute("value",P.value);for(const e of se.children)e.attributes.value===P.value?e.attributes.selected=!0:e.attributes.hasOwnProperty("selected")&&delete e.attributes.selected}Fe.addEventListener("input",e=>{const t=e.target.options,o=t.selectedIndex===-1?"":t[t.selectedIndex].value;i.setValue(D,{value:o})});break}}static setAttributes({html:Fe,element:D,storage:se=null,intent:i,linkService:w}){const{attributes:P}=D,e=Fe instanceof HTMLAnchorElement;P.type==="radio"&&(P.name=`${P.name}-${i}`);for(const[t,o]of Object.entries(P))if(o!=null)switch(t){case"class":o.length&&Fe.setAttribute(t,o.join(" "));break;case"dataId":break;case"id":Fe.setAttribute("data-element-id",o);break;case"style":Object.assign(Fe.style,o);break;case"textContent":Fe.textContent=o;break;default:(!e||t!=="href"&&t!=="newWindow")&&Fe.setAttribute(t,o)}e&&w.addLinkAttributes(Fe,P.href,P.newWindow),se&&P.dataId&&this.setupStorage(Fe,P.dataId,D,se)}static render(Fe){var K;const D=Fe.annotationStorage,se=Fe.linkService,i=Fe.xfaHtml,w=Fe.intent||"display",P=document.createElement(i.name);i.attributes&&this.setAttributes({html:P,element:i,intent:w,linkService:se});const e=[[i,-1,P]],t=Fe.div;if(t.append(P),Fe.viewport){const j=`matrix(${Fe.viewport.transform.join(",")})`;t.style.transform=j}w!=="richText"&&t.setAttribute("class","xfaLayer xfaFont");const o=[];for(;e.length>0;){const[j,C,O]=e.at(-1);if(C+1===j.children.length){e.pop();continue}const d=j.children[++e.at(-1)[1]];if(d===null)continue;const{name:A}=d;if(A==="#text"){const I=document.createTextNode(d.value);o.push(I),O.append(I);continue}const n=(K=d==null?void 0:d.attributes)!=null&&K.xmlns?document.createElementNS(d.attributes.xmlns,A):document.createElement(A);if(O.append(n),d.attributes&&this.setAttributes({html:n,element:d,storage:D,intent:w,linkService:se}),d.children&&d.children.length>0)e.push([d,-1,n]);else if(d.value){const I=document.createTextNode(d.value);ye.XfaText.shouldBuildText(A)&&o.push(I),n.append(I)}}for(const j of t.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))j.setAttribute("readOnly",!0);return{textDivs:o}}static update(Fe){const D=`matrix(${Fe.viewport.transform.join(",")})`;Fe.div.style.transform=D,Fe.div.hidden=!1}}qe.XfaLayer=Ue},(it,qe,Qe)=>{var i,w,P,e,t,o,K,j,C,O,d,A,n,I,k,Da,f,Ua,E,Ra,b,Ea,l,Yn,H,Pa,h,zn,N,Ha,g,ja,m,Ja,p,Ta,u,Ka,J,si,W,Zn,_,Wi,L,Xi,T,fi,v,_n,Z,Yi,ne,Na,re,$n,z,Qa,ue,Ma,ke,ea,fe,zi,pe,xi;Object.defineProperty(qe,"__esModule",{value:!0}),qe.InkEditor=void 0;var ye=Qe(1),Ue=Qe(4),Xe=Qe(29),Fe=Qe(6),D=Qe(5);const Oe=class Oe extends Ue.AnnotationEditor{constructor(Ae){super(Ji(Bi({},Ae),{name:"inkEditor"}));De(this,k);De(this,f);De(this,E);De(this,b);De(this,l);De(this,H);De(this,h);De(this,N);De(this,g);De(this,m);De(this,p);De(this,u);De(this,J);De(this,W);De(this,_);De(this,L);De(this,T);De(this,v);De(this,Z);De(this,ue);De(this,ke);De(this,fe);De(this,pe);De(this,i,0);De(this,w,0);De(this,P,this.canvasPointermove.bind(this));De(this,e,this.canvasPointerleave.bind(this));De(this,t,this.canvasPointerup.bind(this));De(this,o,this.canvasPointerdown.bind(this));De(this,K,new Path2D);De(this,j,!1);De(this,C,!1);De(this,O,!1);De(this,d,null);De(this,A,0);De(this,n,0);De(this,I,null);this.color=Ae.color||null,this.thickness=Ae.thickness||null,this.opacity=Ae.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(Ae){Ue.AnnotationEditor.initialize(Ae,{strings:["editor_ink_canvas_aria_label","editor_ink2_aria_label"]})}static updateDefaultParams(Ae,Se){switch(Ae){case ye.AnnotationEditorParamsType.INK_THICKNESS:Oe._defaultThickness=Se;break;case ye.AnnotationEditorParamsType.INK_COLOR:Oe._defaultColor=Se;break;case ye.AnnotationEditorParamsType.INK_OPACITY:Oe._defaultOpacity=Se/100;break}}updateParams(Ae,Se){switch(Ae){case ye.AnnotationEditorParamsType.INK_THICKNESS:Re(this,k,Da).call(this,Se);break;case ye.AnnotationEditorParamsType.INK_COLOR:Re(this,f,Ua).call(this,Se);break;case ye.AnnotationEditorParamsType.INK_OPACITY:Re(this,E,Ra).call(this,Se);break}}static get defaultPropertiesToUpdate(){return[[ye.AnnotationEditorParamsType.INK_THICKNESS,Oe._defaultThickness],[ye.AnnotationEditorParamsType.INK_COLOR,Oe._defaultColor||Ue.AnnotationEditor._defaultLineColor],[ye.AnnotationEditorParamsType.INK_OPACITY,Math.round(Oe._defaultOpacity*100)]]}get propertiesToUpdate(){var Ae;return[[ye.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||Oe._defaultThickness],[ye.AnnotationEditorParamsType.INK_COLOR,this.color||Oe._defaultColor||Ue.AnnotationEditor._defaultLineColor],[ye.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*((Ae=this.opacity)!=null?Ae:Oe._defaultOpacity))]]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.canvas||(Re(this,_,Wi).call(this),Re(this,L,Xi).call(this)),this.isAttachedToDOM||(this.parent.add(this),Re(this,T,fi).call(this)),Re(this,pe,xi).call(this)))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,he(this,d).disconnect(),Ne(this,d,null),super.remove())}setParent(Ae){!this.parent&&Ae?this._uiManager.removeShouldRescale(this):this.parent&&Ae===null&&this._uiManager.addShouldRescale(this),super.setParent(Ae)}onScaleChanging(){const[Ae,Se]=this.parentDimensions,He=this.width*Ae,Ve=this.height*Se;this.setDimensions(He,Ve)}enableEditMode(){he(this,j)||this.canvas===null||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",he(this,o)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",he(this,o)))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){he(this,j)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),Ne(this,j,!0),this.div.classList.add("disabled"),Re(this,pe,xi).call(this,!0),this.makeResizable(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(Ae){this._focusEventsAllowed&&(super.focusin(Ae),this.enableEditMode())}canvasPointerdown(Ae){Ae.button!==0||!this.isInEditMode()||he(this,j)||(this.setInForeground(),Ae.preventDefault(),Ae.type!=="mouse"&&this.div.focus(),Re(this,H,Pa).call(this,Ae.offsetX,Ae.offsetY))}canvasPointermove(Ae){Ae.preventDefault(),Re(this,h,zn).call(this,Ae.offsetX,Ae.offsetY)}canvasPointerup(Ae){Ae.preventDefault(),Re(this,W,Zn).call(this,Ae)}canvasPointerleave(Ae){Re(this,W,Zn).call(this,Ae)}get isResizable(){return!this.isEmpty()&&he(this,j)}render(){if(this.div)return this.div;let Ae,Se;this.width&&(Ae=this.x,Se=this.y),super.render(),Ue.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then(lt=>{var Ee;return(Ee=this.div)==null?void 0:Ee.setAttribute("aria-label",lt)});const[He,Ve,Le,Ye]=Re(this,b,Ea).call(this);if(this.setAt(He,Ve,0,0),this.setDims(Le,Ye),Re(this,_,Wi).call(this),this.width){const[lt,Ee]=this.parentDimensions;this.setAspectRatio(this.width*lt,this.height*Ee),this.setAt(Ae*lt,Se*Ee,this.width*lt,this.height*Ee),Ne(this,O,!0),Re(this,T,fi).call(this),this.setDims(this.width*lt,this.height*Ee),Re(this,J,si).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return Re(this,L,Xi).call(this),this.div}setDimensions(Ae,Se){const He=Math.round(Ae),Ve=Math.round(Se);if(he(this,A)===He&&he(this,n)===Ve)return;Ne(this,A,He),Ne(this,n,Ve),this.canvas.style.visibility="hidden";const[Le,Ye]=this.parentDimensions;this.width=Ae/Le,this.height=Se/Ye,this.fixAndSetPosition(),he(this,j)&&Re(this,v,_n).call(this,Ae,Se),Re(this,T,fi).call(this),Re(this,J,si).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(Ae,Se,He){var Pe,je,Je;if(Ae instanceof Xe.InkAnnotationElement)return null;const Ve=super.deserialize(Ae,Se,He);Ve.thickness=Ae.thickness,Ve.color=ye.Util.makeHexColor(...Ae.color),Ve.opacity=Ae.opacity;const[Le,Ye]=Ve.pageDimensions,lt=Ve.width*Le,Ee=Ve.height*Ye,ut=Ve.parentScale,_e=Ae.thickness/2;Ne(Ve,j,!0),Ne(Ve,A,Math.round(lt)),Ne(Ve,n,Math.round(Ee));const{paths:Ie,rect:de,rotation:be}=Ae;for(let{bezier:$e}of Ie){$e=Re(Pe=Oe,z,Qa).call(Pe,$e,de,be);const ve=[];Ve.paths.push(ve);let We=ut*($e[0]-_e),tt=ut*($e[1]-_e);for(let ct=2,gt=$e.length;ct<gt;ct+=6){const ht=ut*($e[ct]-_e),kt=ut*($e[ct+1]-_e),Dt=ut*($e[ct+2]-_e),ze=ut*($e[ct+3]-_e),Ge=ut*($e[ct+4]-_e),et=ut*($e[ct+5]-_e);ve.push([[We,tt],[ht,kt],[Dt,ze],[Ge,et]]),We=Ge,tt=et}const at=Re(this,ne,Na).call(this,ve);Ve.bezierPath2D.push(at)}const Be=Re(je=Ve,ke,ea).call(je);return Ne(Ve,w,Math.max(Ue.AnnotationEditor.MIN_SIZE,Be[2]-Be[0])),Ne(Ve,i,Math.max(Ue.AnnotationEditor.MIN_SIZE,Be[3]-Be[1])),Re(Je=Ve,v,_n).call(Je,lt,Ee),Ve}serialize(){if(this.isEmpty())return null;const Ae=this.getRect(0,0),Se=Ue.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:ye.AnnotationEditorType.INK,color:Se,thickness:this.thickness,opacity:this.opacity,paths:Re(this,ue,Ma).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,Ae),pageIndex:this.pageIndex,rect:Ae,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}};i=new WeakMap,w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakMap,O=new WeakMap,d=new WeakMap,A=new WeakMap,n=new WeakMap,I=new WeakMap,k=new WeakSet,Da=function(Ae){const Se=this.thickness;this.addCommands({cmd:()=>{this.thickness=Ae,Re(this,pe,xi).call(this)},undo:()=>{this.thickness=Se,Re(this,pe,xi).call(this)},mustExec:!0,type:ye.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},f=new WeakSet,Ua=function(Ae){const Se=this.color;this.addCommands({cmd:()=>{this.color=Ae,Re(this,J,si).call(this)},undo:()=>{this.color=Se,Re(this,J,si).call(this)},mustExec:!0,type:ye.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},E=new WeakSet,Ra=function(Ae){Ae/=100;const Se=this.opacity;this.addCommands({cmd:()=>{this.opacity=Ae,Re(this,J,si).call(this)},undo:()=>{this.opacity=Se,Re(this,J,si).call(this)},mustExec:!0,type:ye.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},b=new WeakSet,Ea=function(){const{parentRotation:Ae,parentDimensions:[Se,He]}=this;switch(Ae){case 90:return[0,He,He,Se];case 180:return[Se,He,Se,He];case 270:return[Se,0,He,Se];default:return[0,0,Se,He]}},l=new WeakSet,Yn=function(){const{ctx:Ae,color:Se,opacity:He,thickness:Ve,parentScale:Le,scaleFactor:Ye}=this;Ae.lineWidth=Ve*Le/Ye,Ae.lineCap="round",Ae.lineJoin="round",Ae.miterLimit=10,Ae.strokeStyle=`${Se}${(0,D.opacityToHex)(He)}`},H=new WeakSet,Pa=function(Ae,Se){var He;this.canvas.addEventListener("contextmenu",Fe.noContextMenu),this.canvas.addEventListener("pointerleave",he(this,e)),this.canvas.addEventListener("pointermove",he(this,P)),this.canvas.addEventListener("pointerup",he(this,t)),this.canvas.removeEventListener("pointerdown",he(this,o)),this.isEditing=!0,he(this,O)||(Ne(this,O,!0),Re(this,T,fi).call(this),this.thickness||(this.thickness=Oe._defaultThickness),this.color||(this.color=Oe._defaultColor||Ue.AnnotationEditor._defaultLineColor),(He=this.opacity)!=null||(this.opacity=Oe._defaultOpacity)),this.currentPath.push([Ae,Se]),Ne(this,C,!1),Re(this,l,Yn).call(this),Ne(this,I,()=>{Re(this,m,Ja).call(this),he(this,I)&&window.requestAnimationFrame(he(this,I))}),window.requestAnimationFrame(he(this,I))},h=new WeakSet,zn=function(Ae,Se){const[He,Ve]=this.currentPath.at(-1);if(this.currentPath.length>1&&Ae===He&&Se===Ve)return;const Le=this.currentPath;let Ye=he(this,K);if(Le.push([Ae,Se]),Ne(this,C,!0),Le.length<=2){Ye.moveTo(...Le[0]),Ye.lineTo(Ae,Se);return}Le.length===3&&(Ne(this,K,Ye=new Path2D),Ye.moveTo(...Le[0])),Re(this,p,Ta).call(this,Ye,...Le.at(-3),...Le.at(-2),Ae,Se)},N=new WeakSet,Ha=function(){if(this.currentPath.length===0)return;const Ae=this.currentPath.at(-1);he(this,K).lineTo(...Ae)},g=new WeakSet,ja=function(Ae,Se){Ne(this,I,null),Ae=Math.min(Math.max(Ae,0),this.canvas.width),Se=Math.min(Math.max(Se,0),this.canvas.height),Re(this,h,zn).call(this,Ae,Se),Re(this,N,Ha).call(this);let He;if(this.currentPath.length!==1)He=Re(this,u,Ka).call(this);else{const Ee=[Ae,Se];He=[[Ee,Ee.slice(),Ee.slice(),Ee]]}const Ve=he(this,K),Le=this.currentPath;this.currentPath=[],Ne(this,K,new Path2D);const Ye=()=>{this.allRawPaths.push(Le),this.paths.push(He),this.bezierPath2D.push(Ve),this.rebuild()},lt=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(Re(this,_,Wi).call(this),Re(this,L,Xi).call(this)),Re(this,pe,xi).call(this))};this.addCommands({cmd:Ye,undo:lt,mustExec:!0})},m=new WeakSet,Ja=function(){if(!he(this,C))return;Ne(this,C,!1);const Ae=Math.ceil(this.thickness*this.parentScale),Se=this.currentPath.slice(-3),He=Se.map(Ye=>Ye[0]),Ve=Se.map(Ye=>Ye[1]);Math.min(...He)-Ae,Math.max(...He)+Ae,Math.min(...Ve)-Ae,Math.max(...Ve)+Ae;const{ctx:Le}=this;Le.save(),Le.clearRect(0,0,this.canvas.width,this.canvas.height);for(const Ye of this.bezierPath2D)Le.stroke(Ye);Le.stroke(he(this,K)),Le.restore()},p=new WeakSet,Ta=function(Ae,Se,He,Ve,Le,Ye,lt){const Ee=(Se+Ve)/2,ut=(He+Le)/2,_e=(Ve+Ye)/2,Ie=(Le+lt)/2;Ae.bezierCurveTo(Ee+2*(Ve-Ee)/3,ut+2*(Le-ut)/3,_e+2*(Ve-_e)/3,Ie+2*(Le-Ie)/3,_e,Ie)},u=new WeakSet,Ka=function(){const Ae=this.currentPath;if(Ae.length<=2)return[[Ae[0],Ae[0],Ae.at(-1),Ae.at(-1)]];const Se=[];let He,[Ve,Le]=Ae[0];for(He=1;He<Ae.length-2;He++){const[de,be]=Ae[He],[Be,Pe]=Ae[He+1],je=(de+Be)/2,Je=(be+Pe)/2,$e=[Ve+2*(de-Ve)/3,Le+2*(be-Le)/3],ve=[je+2*(de-je)/3,Je+2*(be-Je)/3];Se.push([[Ve,Le],$e,ve,[je,Je]]),[Ve,Le]=[je,Je]}const[Ye,lt]=Ae[He],[Ee,ut]=Ae[He+1],_e=[Ve+2*(Ye-Ve)/3,Le+2*(lt-Le)/3],Ie=[Ee+2*(Ye-Ee)/3,ut+2*(lt-ut)/3];return Se.push([[Ve,Le],_e,Ie,[Ee,ut]]),Se},J=new WeakSet,si=function(){if(this.isEmpty()){Re(this,Z,Yi).call(this);return}Re(this,l,Yn).call(this);const{canvas:Ae,ctx:Se}=this;Se.setTransform(1,0,0,1,0,0),Se.clearRect(0,0,Ae.width,Ae.height),Re(this,Z,Yi).call(this);for(const He of this.bezierPath2D)Se.stroke(He)},W=new WeakSet,Zn=function(Ae){this.canvas.removeEventListener("pointerleave",he(this,e)),this.canvas.removeEventListener("pointermove",he(this,P)),this.canvas.removeEventListener("pointerup",he(this,t)),this.canvas.addEventListener("pointerdown",he(this,o)),setTimeout(()=>{this.canvas.removeEventListener("contextmenu",Fe.noContextMenu)},10),Re(this,g,ja).call(this,Ae.offsetX,Ae.offsetY),this.addToAnnotationStorage(),this.setInBackground()},_=new WeakSet,Wi=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",Ue.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(Ae=>{var Se;return(Se=this.canvas)==null?void 0:Se.setAttribute("aria-label",Ae)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},L=new WeakSet,Xi=function(){Ne(this,d,new ResizeObserver(Ae=>{const Se=Ae[0].contentRect;Se.width&&Se.height&&this.setDimensions(Se.width,Se.height)})),he(this,d).observe(this.div)},T=new WeakSet,fi=function(){if(!he(this,O))return;const[Ae,Se]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*Ae),this.canvas.height=Math.ceil(this.height*Se),Re(this,Z,Yi).call(this)},v=new WeakSet,_n=function(Ae,Se){const He=Re(this,fe,zi).call(this),Ve=(Ae-He)/he(this,w),Le=(Se-He)/he(this,i);this.scaleFactor=Math.min(Ve,Le)},Z=new WeakSet,Yi=function(){const Ae=Re(this,fe,zi).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+Ae,this.translationY*this.scaleFactor+Ae)},ne=new WeakSet,Na=function(Ae){const Se=new Path2D;for(let He=0,Ve=Ae.length;He<Ve;He++){const[Le,Ye,lt,Ee]=Ae[He];He===0&&Se.moveTo(...Le),Se.bezierCurveTo(Ye[0],Ye[1],lt[0],lt[1],Ee[0],Ee[1])}return Se},re=new WeakSet,$n=function(Ae,Se,He){const[Ve,Le,Ye,lt]=Se;switch(He){case 0:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2)Ae[Ee]+=Ve,Ae[Ee+1]=lt-Ae[Ee+1];break;case 90:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2){const _e=Ae[Ee];Ae[Ee]=Ae[Ee+1]+Ve,Ae[Ee+1]=_e+Le}break;case 180:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2)Ae[Ee]=Ye-Ae[Ee],Ae[Ee+1]+=Le;break;case 270:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2){const _e=Ae[Ee];Ae[Ee]=Ye-Ae[Ee+1],Ae[Ee+1]=lt-_e}break;default:throw new Error("Invalid rotation")}return Ae},z=new WeakSet,Qa=function(Ae,Se,He){const[Ve,Le,Ye,lt]=Se;switch(He){case 0:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2)Ae[Ee]-=Ve,Ae[Ee+1]=lt-Ae[Ee+1];break;case 90:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2){const _e=Ae[Ee];Ae[Ee]=Ae[Ee+1]-Le,Ae[Ee+1]=_e-Ve}break;case 180:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2)Ae[Ee]=Ye-Ae[Ee],Ae[Ee+1]-=Le;break;case 270:for(let Ee=0,ut=Ae.length;Ee<ut;Ee+=2){const _e=Ae[Ee];Ae[Ee]=lt-Ae[Ee+1],Ae[Ee+1]=Ye-_e}break;default:throw new Error("Invalid rotation")}return Ae},ue=new WeakSet,Ma=function(Ae,Se,He,Ve){var ut,_e;const Le=[],Ye=this.thickness/2,lt=Ae*Se+Ye,Ee=Ae*He+Ye;for(const Ie of this.paths){const de=[],be=[];for(let Be=0,Pe=Ie.length;Be<Pe;Be++){const[je,Je,$e,ve]=Ie[Be],We=Ae*je[0]+lt,tt=Ae*je[1]+Ee,at=Ae*Je[0]+lt,ct=Ae*Je[1]+Ee,gt=Ae*$e[0]+lt,ht=Ae*$e[1]+Ee,kt=Ae*ve[0]+lt,Dt=Ae*ve[1]+Ee;Be===0&&(de.push(We,tt),be.push(We,tt)),de.push(at,ct,gt,ht,kt,Dt),be.push(at,ct),Be===Pe-1&&be.push(kt,Dt)}Le.push({bezier:Re(ut=Oe,re,$n).call(ut,de,Ve,this.rotation),points:Re(_e=Oe,re,$n).call(_e,be,Ve,this.rotation)})}return Le},ke=new WeakSet,ea=function(){let Ae=1/0,Se=-1/0,He=1/0,Ve=-1/0;for(const Le of this.paths)for(const[Ye,lt,Ee,ut]of Le){const _e=ye.Util.bezierBoundingBox(...Ye,...lt,...Ee,...ut);Ae=Math.min(Ae,_e[0]),He=Math.min(He,_e[1]),Se=Math.max(Se,_e[2]),Ve=Math.max(Ve,_e[3])}return[Ae,He,Se,Ve]},fe=new WeakSet,zi=function(){return he(this,j)?Math.ceil(this.thickness*this.parentScale):0},pe=new WeakSet,xi=function(Ae=!1){if(this.isEmpty())return;if(!he(this,j)){Re(this,J,si).call(this);return}const Se=Re(this,ke,ea).call(this),He=Re(this,fe,zi).call(this);Ne(this,w,Math.max(Ue.AnnotationEditor.MIN_SIZE,Se[2]-Se[0])),Ne(this,i,Math.max(Ue.AnnotationEditor.MIN_SIZE,Se[3]-Se[1]));const Ve=Math.ceil(He+he(this,w)*this.scaleFactor),Le=Math.ceil(He+he(this,i)*this.scaleFactor),[Ye,lt]=this.parentDimensions;this.width=Ve/Ye,this.height=Le/lt,this.setAspectRatio(Ve,Le);const Ee=this.translationX,ut=this.translationY;this.translationX=-Se[0],this.translationY=-Se[1],Re(this,T,fi).call(this),Re(this,J,si).call(this),Ne(this,A,Ve),Ne(this,n,Le),this.setDims(Ve,Le);const _e=Ae?He/this.scaleFactor/2:0;this.translate(Ee-this.translationX-_e,ut-this.translationY-_e)},De(Oe,ne),De(Oe,re),De(Oe,z),jt(Oe,"_defaultColor",null),jt(Oe,"_defaultOpacity",1),jt(Oe,"_defaultThickness",1),jt(Oe,"_type","ink");let se=Oe;qe.InkEditor=se},(it,qe,Qe)=>{var se,i,w,P,e,t,o,K,j,C,O,Ui,A,Ri,I,Zi,y,ta,R,Ga,M,La,V,ia,x,_i,s,va;Object.defineProperty(qe,"__esModule",{value:!0}),qe.StampEditor=void 0;var ye=Qe(1),Ue=Qe(4),Xe=Qe(6),Fe=Qe(29);const F=class F extends Ue.AnnotationEditor{constructor(g){super(Ji(Bi({},g),{name:"stampEditor"}));De(this,O);De(this,A);De(this,I);De(this,y);De(this,R);De(this,M);De(this,V);De(this,x);De(this,s);De(this,se,null);De(this,i,null);De(this,w,null);De(this,P,null);De(this,e,null);De(this,t,null);De(this,o,null);De(this,K,null);De(this,j,!1);De(this,C,!1);Ne(this,P,g.bitmapUrl),Ne(this,e,g.bitmapFile)}static initialize(g){Ue.AnnotationEditor.initialize(g)}static get supportedTypes(){const g=["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"];return(0,ye.shadow)(this,"supportedTypes",g.map(S=>`image/${S}`))}static get supportedTypesStr(){return(0,ye.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(g){return this.supportedTypes.includes(g)}static paste(g,S){S.pasteEditor(ye.AnnotationEditorType.STAMP,{bitmapFile:g.getAsFile()})}remove(){var g,S;he(this,i)&&(Ne(this,se,null),this._uiManager.imageManager.deleteId(he(this,i)),(g=he(this,t))==null||g.remove(),Ne(this,t,null),(S=he(this,o))==null||S.disconnect(),Ne(this,o,null)),super.remove()}rebuild(){if(!this.parent){he(this,i)&&Re(this,I,Zi).call(this);return}super.rebuild(),this.div!==null&&(he(this,i)&&Re(this,I,Zi).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(he(this,w)||he(this,se)||he(this,P)||he(this,e))}get isResizable(){return!0}render(){if(this.div)return this.div;let g,S;if(this.width&&(g=this.x,S=this.y),super.render(),this.div.hidden=!0,he(this,se)?Re(this,y,ta).call(this):Re(this,I,Zi).call(this),this.width){const[m,r]=this.parentDimensions;this.setAt(g*m,S*r,this.width*m,this.height*r)}return this.div}static deserialize(g,S,m){if(g instanceof Fe.StampAnnotationElement)return null;const r=super.deserialize(g,S,m),{rect:p,bitmapUrl:c,bitmapId:u,isSvg:q,accessibilityData:J}=g;u&&m.imageManager.isValidId(u)?Ne(r,i,u):Ne(r,P,c),Ne(r,j,q);const[G,W]=r.pageDimensions;return r.width=(p[2]-p[0])/G,r.height=(p[3]-p[1])/W,J&&(r.altTextData=J),r}serialize(g=!1,S=null){if(this.isEmpty())return null;const m={annotationType:ye.AnnotationEditorType.STAMP,bitmapId:he(this,i),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:he(this,j),structTreeParentId:this._structTreeParentId};if(g)return m.bitmapUrl=Re(this,x,_i).call(this,!0),m.accessibilityData=this.altTextData,m;const{decorative:r,altText:p}=this.altTextData;if(!r&&p&&(m.accessibilityData={type:"Figure",alt:p}),S===null)return m;S.stamps||(S.stamps=new Map);const c=he(this,j)?(m.rect[2]-m.rect[0])*(m.rect[3]-m.rect[1]):null;if(!S.stamps.has(he(this,i)))S.stamps.set(he(this,i),{area:c,serialized:m}),m.bitmap=Re(this,x,_i).call(this,!1);else if(he(this,j)){const u=S.stamps.get(he(this,i));c>u.area&&(u.area=c,u.serialized.bitmap.close(),u.serialized.bitmap=Re(this,x,_i).call(this,!1))}return m}};se=new WeakMap,i=new WeakMap,w=new WeakMap,P=new WeakMap,e=new WeakMap,t=new WeakMap,o=new WeakMap,K=new WeakMap,j=new WeakMap,C=new WeakMap,O=new WeakSet,Ui=function(g,S=!1){if(!g){this.remove();return}Ne(this,se,g.bitmap),S||(Ne(this,i,g.id),Ne(this,j,g.isSvg)),Re(this,y,ta).call(this)},A=new WeakSet,Ri=function(){Ne(this,w,null),this._uiManager.enableWaiting(!1),he(this,t)&&this.div.focus()},I=new WeakSet,Zi=function(){if(he(this,i)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(he(this,i)).then(S=>Re(this,O,Ui).call(this,S,!0)).finally(()=>Re(this,A,Ri).call(this));return}if(he(this,P)){const S=he(this,P);Ne(this,P,null),this._uiManager.enableWaiting(!0),Ne(this,w,this._uiManager.imageManager.getFromUrl(S).then(m=>Re(this,O,Ui).call(this,m)).finally(()=>Re(this,A,Ri).call(this)));return}if(he(this,e)){const S=he(this,e);Ne(this,e,null),this._uiManager.enableWaiting(!0),Ne(this,w,this._uiManager.imageManager.getFromFile(S).then(m=>Re(this,O,Ui).call(this,m)).finally(()=>Re(this,A,Ri).call(this)));return}const g=document.createElement("input");g.type="file",g.accept=F.supportedTypesStr,Ne(this,w,new Promise(S=>{g.addEventListener("change",()=>rt(this,null,function*(){if(!g.files||g.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const m=yield this._uiManager.imageManager.getFromFile(g.files[0]);Re(this,O,Ui).call(this,m)}S()})),g.addEventListener("cancel",()=>{this.remove(),S()})}).finally(()=>Re(this,A,Ri).call(this))),g.click()},y=new WeakSet,ta=function(){const{div:g}=this;let{width:S,height:m}=he(this,se);const[r,p]=this.pageDimensions,c=.75;if(this.width)S=this.width*r,m=this.height*p;else if(S>c*r||m>c*p){const G=Math.min(c*r/S,c*p/m);S*=G,m*=G}const[u,q]=this.parentDimensions;this.setDims(S*u/r,m*q/p),this._uiManager.enableWaiting(!1);const J=Ne(this,t,document.createElement("canvas"));g.append(J),g.hidden=!1,Re(this,V,ia).call(this,S,m),Re(this,s,va).call(this),he(this,C)||(this.parent.addUndoableEditor(this),Ne(this,C,!0)),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton()},R=new WeakSet,Ga=function(g,S){var c;const[m,r]=this.parentDimensions;this.width=g/m,this.height=S/r,this.setDims(g,S),(c=this._initialOptions)!=null&&c.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,he(this,K)!==null&&clearTimeout(he(this,K)),Ne(this,K,setTimeout(()=>{Ne(this,K,null),Re(this,V,ia).call(this,g,S)},200))},M=new WeakSet,La=function(g,S){const{width:m,height:r}=he(this,se);let p=m,c=r,u=he(this,se);for(;p>2*g||c>2*S;){const q=p,J=c;p>2*g&&(p=p>=16384?Math.floor(p/2)-1:Math.ceil(p/2)),c>2*S&&(c=c>=16384?Math.floor(c/2)-1:Math.ceil(c/2));const G=new OffscreenCanvas(p,c);G.getContext("2d").drawImage(u,0,0,q,J,0,0,p,c),u=G.transferToImageBitmap()}return u},V=new WeakSet,ia=function(g,S){g=Math.ceil(g),S=Math.ceil(S);const m=he(this,t);if(!m||m.width===g&&m.height===S)return;m.width=g,m.height=S;const r=he(this,j)?he(this,se):Re(this,M,La).call(this,g,S),p=m.getContext("2d");p.filter=this._uiManager.hcmFilter,p.drawImage(r,0,0,r.width,r.height,0,0,g,S)},x=new WeakSet,_i=function(g){if(g){if(he(this,j)){const r=this._uiManager.imageManager.getSvgUrl(he(this,i));if(r)return r}const S=document.createElement("canvas");return{width:S.width,height:S.height}=he(this,se),S.getContext("2d").drawImage(he(this,se),0,0),S.toDataURL()}if(he(this,j)){const[S,m]=this.pageDimensions,r=Math.round(this.width*S*Xe.PixelsPerInch.PDF_TO_CSS_UNITS),p=Math.round(this.height*m*Xe.PixelsPerInch.PDF_TO_CSS_UNITS),c=new OffscreenCanvas(r,p);return c.getContext("2d").drawImage(he(this,se),0,0,he(this,se).width,he(this,se).height,0,0,r,p),c.transferToImageBitmap()}return structuredClone(he(this,se))},s=new WeakSet,va=function(){Ne(this,o,new ResizeObserver(g=>{const S=g[0].contentRect;S.width&&S.height&&Re(this,R,Ga).call(this,S.width,S.height)})),he(this,o).observe(this.div)},jt(F,"_type","stamp");let D=F;qe.StampEditor=D}],__webpack_module_cache__={};function __w_pdfjs_require__(it){var qe=__webpack_module_cache__[it];if(qe!==void 0)return qe.exports;var Qe=__webpack_module_cache__[it]={exports:{}};return __webpack_modules__[it](Qe,Qe.exports,__w_pdfjs_require__),Qe.exports}var __webpack_exports__={};return(()=>{var it=__webpack_exports__;Object.defineProperty(it,"__esModule",{value:!0}),Object.defineProperty(it,"AbortException",{enumerable:!0,get:function(){return qe.AbortException}}),Object.defineProperty(it,"AnnotationEditorLayer",{enumerable:!0,get:function(){return Xe.AnnotationEditorLayer}}),Object.defineProperty(it,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return qe.AnnotationEditorParamsType}}),Object.defineProperty(it,"AnnotationEditorType",{enumerable:!0,get:function(){return qe.AnnotationEditorType}}),Object.defineProperty(it,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return Fe.AnnotationEditorUIManager}}),Object.defineProperty(it,"AnnotationLayer",{enumerable:!0,get:function(){return D.AnnotationLayer}}),Object.defineProperty(it,"AnnotationMode",{enumerable:!0,get:function(){return qe.AnnotationMode}}),Object.defineProperty(it,"CMapCompressionType",{enumerable:!0,get:function(){return qe.CMapCompressionType}}),Object.defineProperty(it,"DOMSVGFactory",{enumerable:!0,get:function(){return ye.DOMSVGFactory}}),Object.defineProperty(it,"FeatureTest",{enumerable:!0,get:function(){return qe.FeatureTest}}),Object.defineProperty(it,"GlobalWorkerOptions",{enumerable:!0,get:function(){return se.GlobalWorkerOptions}}),Object.defineProperty(it,"ImageKind",{enumerable:!0,get:function(){return qe.ImageKind}}),Object.defineProperty(it,"InvalidPDFException",{enumerable:!0,get:function(){return qe.InvalidPDFException}}),Object.defineProperty(it,"MissingPDFException",{enumerable:!0,get:function(){return qe.MissingPDFException}}),Object.defineProperty(it,"OPS",{enumerable:!0,get:function(){return qe.OPS}}),Object.defineProperty(it,"PDFDataRangeTransport",{enumerable:!0,get:function(){return Qe.PDFDataRangeTransport}}),Object.defineProperty(it,"PDFDateString",{enumerable:!0,get:function(){return ye.PDFDateString}}),Object.defineProperty(it,"PDFWorker",{enumerable:!0,get:function(){return Qe.PDFWorker}}),Object.defineProperty(it,"PasswordResponses",{enumerable:!0,get:function(){return qe.PasswordResponses}}),Object.defineProperty(it,"PermissionFlag",{enumerable:!0,get:function(){return qe.PermissionFlag}}),Object.defineProperty(it,"PixelsPerInch",{enumerable:!0,get:function(){return ye.PixelsPerInch}}),Object.defineProperty(it,"PromiseCapability",{enumerable:!0,get:function(){return qe.PromiseCapability}}),Object.defineProperty(it,"RenderingCancelledException",{enumerable:!0,get:function(){return ye.RenderingCancelledException}}),Object.defineProperty(it,"SVGGraphics",{enumerable:!0,get:function(){return Qe.SVGGraphics}}),Object.defineProperty(it,"UnexpectedResponseException",{enumerable:!0,get:function(){return qe.UnexpectedResponseException}}),Object.defineProperty(it,"Util",{enumerable:!0,get:function(){return qe.Util}}),Object.defineProperty(it,"VerbosityLevel",{enumerable:!0,get:function(){return qe.VerbosityLevel}}),Object.defineProperty(it,"XfaLayer",{enumerable:!0,get:function(){return i.XfaLayer}}),Object.defineProperty(it,"build",{enumerable:!0,get:function(){return Qe.build}}),Object.defineProperty(it,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return qe.createValidAbsoluteUrl}}),Object.defineProperty(it,"getDocument",{enumerable:!0,get:function(){return Qe.getDocument}}),Object.defineProperty(it,"getFilenameFromUrl",{enumerable:!0,get:function(){return ye.getFilenameFromUrl}}),Object.defineProperty(it,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return ye.getPdfFilenameFromUrl}}),Object.defineProperty(it,"getXfaPageViewport",{enumerable:!0,get:function(){return ye.getXfaPageViewport}}),Object.defineProperty(it,"isDataScheme",{enumerable:!0,get:function(){return ye.isDataScheme}}),Object.defineProperty(it,"isPdfFile",{enumerable:!0,get:function(){return ye.isPdfFile}}),Object.defineProperty(it,"loadScript",{enumerable:!0,get:function(){return ye.loadScript}}),Object.defineProperty(it,"noContextMenu",{enumerable:!0,get:function(){return ye.noContextMenu}}),Object.defineProperty(it,"normalizeUnicode",{enumerable:!0,get:function(){return qe.normalizeUnicode}}),Object.defineProperty(it,"renderTextLayer",{enumerable:!0,get:function(){return Ue.renderTextLayer}}),Object.defineProperty(it,"setLayerDimensions",{enumerable:!0,get:function(){return ye.setLayerDimensions}}),Object.defineProperty(it,"shadow",{enumerable:!0,get:function(){return qe.shadow}}),Object.defineProperty(it,"updateTextLayer",{enumerable:!0,get:function(){return Ue.updateTextLayer}}),Object.defineProperty(it,"version",{enumerable:!0,get:function(){return Qe.version}});var qe=__w_pdfjs_require__(1),Qe=__w_pdfjs_require__(2),ye=__w_pdfjs_require__(6),Ue=__w_pdfjs_require__(26),Xe=__w_pdfjs_require__(27),Fe=__w_pdfjs_require__(5),D=__w_pdfjs_require__(29),se=__w_pdfjs_require__(14),i=__w_pdfjs_require__(32)})(),__webpack_exports__})())})(pdf);var pdfExports=pdf.exports,pdf_worker={exports:{}};(function(it,qe){(function(ye,Ue){it.exports=ye.pdfjsWorker=Ue()})(globalThis,()=>(()=>{var Qe=[,(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.WorkerTask=D.WorkerMessageHandler=void 0;var i=se(2),w=se(3),P=se(4),e=se(6),t=se(10),o=se(68),K=se(73),j=se(104),C=se(105),O=se(72);class d{constructor(k){this.name=k,this.terminated=!1,this._capability=new i.PromiseCapability}get finished(){return this._capability.promise}finish(){this._capability.resolve()}terminate(){this.terminated=!0}ensureNotTerminated(){if(this.terminated)throw new Error("Worker task was terminated")}}D.WorkerTask=d;class A{static setup(k,y){let f=!1;k.on("test",function(R){f||(f=!0,k.send("test",R instanceof Uint8Array))}),k.on("configure",function(R){(0,i.setVerbosityLevel)(R.verbosity)}),k.on("GetDocRequest",function(R){return A.createDocumentHandler(R,y)})}static createDocumentHandler(k,y){let f,R=!1,E=null;const M=new Set,b=(0,i.getVerbosityLevel)(),{docId:V,apiVersion:l}=k,x="3.11.174";if(l!==x)throw new Error(`The API version "${l}" does not match the Worker version "${x}".`);const H=[];for(const r in[])H.push(r);if(H.length)throw new Error("The `Array.prototype` contains unexpected enumerable properties: "+H.join(", ")+"; thus breaking e.g. `for...in` iteration of `Array`s.");const s=V+"_worker";let h=new j.MessageHandler(s,V,y);function F(){if(R)throw new Error("Worker was terminated")}function N(r){M.add(r)}function U(r){r.finish(),M.delete(r)}function g(r){return rt(this,null,function*(){yield f.ensureDoc("checkHeader"),yield f.ensureDoc("parseStartXRef"),yield f.ensureDoc("parse",[r]),yield f.ensureDoc("checkFirstPage",[r]),yield f.ensureDoc("checkLastPage",[r]);const p=yield f.ensureDoc("isPureXfa");if(p){const J=new d("loadXfaFonts");N(J),yield Promise.all([f.loadXfaFonts(h,J).catch(G=>{}).then(()=>U(J)),f.loadXfaImages()])}const[c,u]=yield Promise.all([f.ensureDoc("numPages"),f.ensureDoc("fingerprints")]),q=p?yield f.ensureDoc("htmlForXfa"):null;return{numPages:c,fingerprints:u,htmlForXfa:q}})}function S({data:r,password:p,disableAutoFetch:c,rangeChunkSize:u,length:q,docBaseUrl:J,enableXfa:G,evaluatorOptions:W}){const ce={source:null,disableAutoFetch:c,docBaseUrl:J,docId:V,enableXfa:G,evaluatorOptions:W,handler:h,length:q,password:p,rangeChunkSize:u},_=new i.PromiseCapability;let ie;if(r){try{ce.source=r,ie=new e.LocalPdfManager(ce),_.resolve(ie)}catch($){_.reject($)}return _.promise}let L,oe=[];try{L=new C.PDFWorkerStream(h)}catch($){return _.reject($),_.promise}const T=L.getFullReader();T.headersReady.then(function(){if(T.isRangeSupported){ce.source=L,ce.length=T.contentLength,ce.disableAutoFetch||(ce.disableAutoFetch=T.isStreamingSupported),ie=new e.NetworkPdfManager(ce);for(const $ of oe)ie.sendProgressiveData($);oe=[],_.resolve(ie),E=null}}).catch(function($){_.reject($),E=null});let Q=0;const v=function(){const $=(0,w.arrayBuffersToBytes)(oe);q&&$.length!==q&&(0,i.warn)("reported HTTP length is different from actual");try{ce.source=$,ie=new e.LocalPdfManager(ce),_.resolve(ie)}catch(Z){_.reject(Z)}oe=[]};return new Promise(function($,Z){const te=function({value:ne,done:X}){try{if(F(),X){ie||v(),E=null;return}Q+=ne.byteLength,T.isStreamingSupported||h.send("DocProgress",{loaded:Q,total:Math.max(Q,T.contentLength||0)}),ie?ie.sendProgressiveData(ne):oe.push(ne),T.read().then(te,Z)}catch(re){Z(re)}};T.read().then(te,Z)}).catch(function($){_.reject($),E=null}),E=function($){L.cancelAllRequests($)},_.promise}function m(r){function p(q){F(),h.send("GetDoc",{pdfInfo:q})}function c(q){if(F(),q instanceof i.PasswordException){const J=new d(`PasswordException: response ${q.code}`);N(J),h.sendWithPromise("PasswordRequest",q).then(function({password:G}){U(J),f.updatePassword(G),u()}).catch(function(){U(J),h.send("DocException",q)})}else q instanceof i.InvalidPDFException||q instanceof i.MissingPDFException||q instanceof i.UnexpectedResponseException||q instanceof i.UnknownErrorException?h.send("DocException",q):h.send("DocException",new i.UnknownErrorException(q.message,q.toString()))}function u(){F(),g(!1).then(p,function(q){if(F(),!(q instanceof w.XRefParseException)){c(q);return}f.requestLoadedStream().then(function(){F(),g(!0).then(p,c)})})}F(),S(r).then(function(q){if(R)throw q.terminate(new i.AbortException("Worker was terminated.")),new Error("Worker was terminated");f=q,f.requestLoadedStream(!0).then(J=>{h.send("DataLoaded",{length:J.bytes.byteLength})})}).then(u,c)}return h.on("GetPage",function(r){return f.getPage(r.pageIndex).then(function(p){return Promise.all([f.ensure(p,"rotate"),f.ensure(p,"ref"),f.ensure(p,"userUnit"),f.ensure(p,"view")]).then(function([c,u,q,J]){return{rotate:c,ref:u,userUnit:q,view:J}})})}),h.on("GetPageIndex",function(r){const p=P.Ref.get(r.num,r.gen);return f.ensureCatalog("getPageIndex",[p])}),h.on("GetDestinations",function(r){return f.ensureCatalog("destinations")}),h.on("GetDestination",function(r){return f.ensureCatalog("getDestination",[r.id])}),h.on("GetPageLabels",function(r){return f.ensureCatalog("pageLabels")}),h.on("GetPageLayout",function(r){return f.ensureCatalog("pageLayout")}),h.on("GetPageMode",function(r){return f.ensureCatalog("pageMode")}),h.on("GetViewerPreferences",function(r){return f.ensureCatalog("viewerPreferences")}),h.on("GetOpenAction",function(r){return f.ensureCatalog("openAction")}),h.on("GetAttachments",function(r){return f.ensureCatalog("attachments")}),h.on("GetDocJSActions",function(r){return f.ensureCatalog("jsActions")}),h.on("GetPageJSActions",function({pageIndex:r}){return f.getPage(r).then(function(p){return f.ensure(p,"jsActions")})}),h.on("GetOutline",function(r){return f.ensureCatalog("documentOutline")}),h.on("GetOptionalContentConfig",function(r){return f.ensureCatalog("optionalContentConfig")}),h.on("GetPermissions",function(r){return f.ensureCatalog("permissions")}),h.on("GetMetadata",function(r){return Promise.all([f.ensureDoc("documentInfo"),f.ensureCatalog("metadata")])}),h.on("GetMarkInfo",function(r){return f.ensureCatalog("markInfo")}),h.on("GetData",function(r){return f.requestLoadedStream().then(function(p){return p.bytes})}),h.on("GetAnnotations",function({pageIndex:r,intent:p}){return f.getPage(r).then(function(c){const u=new d(`GetAnnotations: page ${r}`);return N(u),c.getAnnotationsData(h,u,p).then(q=>(U(u),q),q=>{throw U(u),q})})}),h.on("GetFieldObjects",function(r){return f.ensureDoc("fieldObjects")}),h.on("HasJSActions",function(r){return f.ensureDoc("hasJSActions")}),h.on("GetCalculationOrderIds",function(r){return f.ensureDoc("calculationOrderIds")}),h.on("SaveDocument",function(q){return rt(this,arguments,function*({isPureXfa:r,numPages:p,annotationStorage:c,filename:u}){var ue;const J=[f.requestLoadedStream(),f.ensureCatalog("acroForm"),f.ensureCatalog("acroFormRef"),f.ensureDoc("startXRef"),f.ensureDoc("xref"),f.ensureDoc("linearization"),f.ensureCatalog("structTreeRoot")],G=[],W=r?null:(0,w.getNewAnnotationsMap)(c),[ce,_,ie,L,oe,T,Q]=yield Promise.all(J),v=oe.trailer.getRaw("Root")||null;let $;if(W){Q?(yield Q.canUpdateStructTree({pdfManager:f,newAnnotationsByPage:W}))&&($=Q):(yield O.StructTreeRoot.canCreateStructureTree({catalogRef:v,pdfManager:f,newAnnotationsByPage:W}))&&($=null);const ge=t.AnnotationFactory.generateImages(c.values(),oe,f.evaluatorOptions.isOffscreenCanvasSupported),ke=$===void 0?G:[];for(const[me,fe]of W)ke.push(f.getPage(me).then(xe=>{const pe=new d(`Save (editor): page ${me}`);return xe.saveNewAnnotations(h,pe,fe,ge).finally(function(){U(pe)})}));$===null?G.push(Promise.all(ke).then(me=>rt(this,null,function*(){return yield O.StructTreeRoot.createStructureTree({newAnnotationsByPage:W,xref:oe,catalogRef:v,pdfManager:f,newRefs:me}),me}))):$&&G.push(Promise.all(ke).then(me=>rt(this,null,function*(){return yield $.updateStructureTree({newAnnotationsByPage:W,pdfManager:f,newRefs:me}),me})))}if(r)G.push(f.serializeXfaData(c));else for(let ge=0;ge<p;ge++)G.push(f.getPage(ge).then(function(ke){const me=new d(`Save: page ${ge}`);return ke.save(h,me,c).finally(function(){U(me)})}));const Z=yield Promise.all(G);let te=[],ne=null;if(r){if(ne=Z[0],!ne)return ce.bytes}else if(te=Z.flat(2),te.length===0)return ce.bytes;const X=ie&&_ instanceof P.Dict&&te.some(ge=>ge.needAppearances),re=_ instanceof P.Dict&&_.get("XFA")||null;let ae=null,z=!1;if(Array.isArray(re)){for(let ge=0,ke=re.length;ge<ke;ge+=2)re[ge]==="datasets"&&(ae=re[ge+1],z=!0);ae===null&&(ae=oe.getNewTemporaryRef())}else re&&(0,i.warn)("Unsupported XFA type.");let le=Object.create(null);if(oe.trailer){const ge=Object.create(null),ke=oe.trailer.get("Info")||null;ke instanceof P.Dict&&ke.forEach((me,fe)=>{typeof fe=="string"&&(ge[me]=(0,i.stringToPDFString)(fe))}),le={rootRef:v,encryptRef:oe.trailer.getRaw("Encrypt")||null,newRef:oe.getNewTemporaryRef(),infoRef:oe.trailer.getRaw("Info")||null,info:ge,fileIds:oe.trailer.get("ID")||null,startXRef:T?L:(ue=oe.lastXRefStreamPos)!=null?ue:L,filename:u}}return(0,K.incrementalUpdate)({originalData:ce.bytes,xrefInfo:le,newRefs:te,xref:oe,hasXfa:!!re,xfaDatasetsRef:ae,hasXfaDatasetsEntry:z,needAppearances:X,acroFormRef:ie,acroForm:_,xfaData:ne}).finally(()=>{oe.resetNewTemporaryRef()})})}),h.on("GetOperatorList",function(r,p){const c=r.pageIndex;f.getPage(c).then(function(u){const q=new d(`GetOperatorList: page ${c}`);N(q);const J=b>=i.VerbosityLevel.INFOS?Date.now():0;u.getOperatorList({handler:h,sink:p,task:q,intent:r.intent,cacheKey:r.cacheKey,annotationStorage:r.annotationStorage}).then(function(G){U(q),J&&(0,i.info)(`page=${c+1} - getOperatorList: time=${Date.now()-J}ms, len=${G.length}`),p.close()},function(G){U(q),!q.terminated&&p.error(G)})})}),h.on("GetTextContent",function(r,p){const{pageIndex:c,includeMarkedContent:u,disableNormalization:q}=r;f.getPage(c).then(function(J){const G=new d("GetTextContent: page "+c);N(G);const W=b>=i.VerbosityLevel.INFOS?Date.now():0;J.extractTextContent({handler:h,task:G,sink:p,includeMarkedContent:u,disableNormalization:q}).then(function(){U(G),W&&(0,i.info)(`page=${c+1} - getTextContent: time=${Date.now()-W}ms`),p.close()},function(ce){U(G),!G.terminated&&p.error(ce)})})}),h.on("GetStructTree",function(r){return f.getPage(r.pageIndex).then(function(p){return f.ensure(p,"getStructTree")})}),h.on("FontFallback",function(r){return f.fontFallback(r.id,h)}),h.on("Cleanup",function(r){return f.cleanup(!0)}),h.on("Terminate",function(r){R=!0;const p=[];if(f){f.terminate(new i.AbortException("Worker was terminated."));const c=f.cleanup();p.push(c),f=null}else(0,o.clearGlobalCaches)();E&&E(new i.AbortException("Worker was terminated."));for(const c of M)p.push(c.finished),c.terminate();return Promise.all(p).then(function(){h.destroy(),h=null})}),h.on("Ready",function(r){m(k),k=null}),s}static initializeFromPort(k){const y=new j.MessageHandler("worker","main",k);A.setup(y,k),y.send("ready",null)}}D.WorkerMessageHandler=A;function n(I){return typeof I.postMessage=="function"&&"onmessage"in I}typeof window=="undefined"&&!i.isNodeJS&&typeof self!="undefined"&&n(self)&&A.initializeFromPort(self)},(Fe,D)=>{var Te;Object.defineProperty(D,"__esModule",{value:!0}),D.VerbosityLevel=D.Util=D.UnknownErrorException=D.UnexpectedResponseException=D.TextRenderingMode=D.RenderingIntentFlag=D.PromiseCapability=D.PermissionFlag=D.PasswordResponses=D.PasswordException=D.PageActionEventType=D.OPS=D.MissingPDFException=D.MAX_IMAGE_SIZE_TO_CACHE=D.LINE_FACTOR=D.LINE_DESCENT_FACTOR=D.InvalidPDFException=D.ImageKind=D.IDENTITY_MATRIX=D.FormatError=D.FeatureTest=D.FONT_IDENTITY_MATRIX=D.DocumentActionEventType=D.CMapCompressionType=D.BaseException=D.BASELINE_FACTOR=D.AnnotationType=D.AnnotationReplyType=D.AnnotationPrefix=D.AnnotationMode=D.AnnotationFlag=D.AnnotationFieldFlag=D.AnnotationEditorType=D.AnnotationEditorPrefix=D.AnnotationEditorParamsType=D.AnnotationBorderStyleType=D.AnnotationActionEventType=D.AbortException=void 0,D.assert=m,D.bytesToString=L,D.createValidAbsoluteUrl=p,D.getModificationDate=ke,D.getUuid=we,D.getVerbosityLevel=N,D.info=U,D.isArrayBuffer=ue,D.isArrayEqual=ge,D.isNodeJS=void 0,D.normalizeUnicode=pe,D.objectFromMap=v,D.objectSize=Q,D.setVerbosityLevel=F,D.shadow=c,D.string32=T,D.stringToBytes=oe,D.stringToPDFString=ae,D.stringToUTF8String=z,D.unreachable=S,D.utf8StringToString=le,D.warn=g;const se=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");D.isNodeJS=se;const i=[1,0,0,1,0,0];D.IDENTITY_MATRIX=i;const w=[.001,0,0,.001,0,0];D.FONT_IDENTITY_MATRIX=w;const P=1e7;D.MAX_IMAGE_SIZE_TO_CACHE=P;const e=1.35;D.LINE_FACTOR=e;const t=.35;D.LINE_DESCENT_FACTOR=t;const o=t/e;D.BASELINE_FACTOR=o;const K={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};D.RenderingIntentFlag=K;const j={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};D.AnnotationMode=j;const C="pdfjs_internal_editor_";D.AnnotationEditorPrefix=C;const O={DISABLE:-1,NONE:0,FREETEXT:3,STAMP:13,INK:15};D.AnnotationEditorType=O;const d={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23};D.AnnotationEditorParamsType=d;const A={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};D.PermissionFlag=A;const n={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};D.TextRenderingMode=n;const I={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};D.ImageKind=I;const k={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};D.AnnotationType=k;const y={GROUP:"Group",REPLY:"R"};D.AnnotationReplyType=y;const f={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};D.AnnotationFlag=f;const R={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};D.AnnotationFieldFlag=R;const E={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};D.AnnotationBorderStyleType=E;const M={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};D.AnnotationActionEventType=M;const b={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};D.DocumentActionEventType=b;const V={O:"PageOpen",C:"PageClose"};D.PageActionEventType=V;const l={ERRORS:0,WARNINGS:1,INFOS:5};D.VerbosityLevel=l;const x={NONE:0,BINARY:1};D.CMapCompressionType=x;const H={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};D.OPS=H;const s={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};D.PasswordResponses=s;let h=l.WARNINGS;function F(Ce){Number.isInteger(Ce)&&(h=Ce)}function N(){return h}function U(Ce){h>=l.INFOS&&console.log(`Info: ${Ce}`)}function g(Ce){h>=l.WARNINGS&&console.log(`Warning: ${Ce}`)}function S(Ce){throw new Error(Ce)}function m(Ce,Ae){Ce||S(Ae)}function r(Ce){switch(Ce==null?void 0:Ce.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function p(Ce,Ae=null,Se=null){if(!Ce)return null;try{if(Se&&typeof Ce=="string"){if(Se.addDefaultProtocol&&Ce.startsWith("www.")){const Ve=Ce.match(/\./g);(Ve==null?void 0:Ve.length)>=2&&(Ce=`http://${Ce}`)}if(Se.tryConvertEncoding)try{Ce=z(Ce)}catch(Ve){}}const He=Ae?new URL(Ce,Ae):new URL(Ce);if(r(He))return He}catch(He){}return null}function c(Ce,Ae,Se,He=!1){return Object.defineProperty(Ce,Ae,{value:Se,enumerable:!He,configurable:!0,writable:!1}),Se}const u=function(){function Ae(Se,He){this.constructor===Ae&&S("Cannot initialize BaseException."),this.message=Se,this.name=He}return Ae.prototype=new Error,Ae.constructor=Ae,Ae}();D.BaseException=u;class q extends u{constructor(Ae,Se){super(Ae,"PasswordException"),this.code=Se}}D.PasswordException=q;class J extends u{constructor(Ae,Se){super(Ae,"UnknownErrorException"),this.details=Se}}D.UnknownErrorException=J;class G extends u{constructor(Ae){super(Ae,"InvalidPDFException")}}D.InvalidPDFException=G;class W extends u{constructor(Ae){super(Ae,"MissingPDFException")}}D.MissingPDFException=W;class ce extends u{constructor(Ae,Se){super(Ae,"UnexpectedResponseException"),this.status=Se}}D.UnexpectedResponseException=ce;class _ extends u{constructor(Ae){super(Ae,"FormatError")}}D.FormatError=_;class ie extends u{constructor(Ae){super(Ae,"AbortException")}}D.AbortException=ie;function L(Ce){(typeof Ce!="object"||(Ce==null?void 0:Ce.length)===void 0)&&S("Invalid argument for bytesToString");const Ae=Ce.length,Se=8192;if(Ae<Se)return String.fromCharCode.apply(null,Ce);const He=[];for(let Ve=0;Ve<Ae;Ve+=Se){const Le=Math.min(Ve+Se,Ae),Ye=Ce.subarray(Ve,Le);He.push(String.fromCharCode.apply(null,Ye))}return He.join("")}function oe(Ce){typeof Ce!="string"&&S("Invalid argument for stringToBytes");const Ae=Ce.length,Se=new Uint8Array(Ae);for(let He=0;He<Ae;++He)Se[He]=Ce.charCodeAt(He)&255;return Se}function T(Ce){return String.fromCharCode(Ce>>24&255,Ce>>16&255,Ce>>8&255,Ce&255)}function Q(Ce){return Object.keys(Ce).length}function v(Ce){const Ae=Object.create(null);for(const[Se,He]of Ce)Ae[Se]=He;return Ae}function $(){const Ce=new Uint8Array(4);return Ce[0]=1,new Uint32Array(Ce.buffer,0,1)[0]===1}function Z(){try{return new Function(""),!0}catch(Ce){return!1}}class te{static get isLittleEndian(){return c(this,"isLittleEndian",$())}static get isEvalSupported(){return c(this,"isEvalSupported",Z())}static get isOffscreenCanvasSupported(){return c(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas!="undefined")}static get platform(){return typeof navigator=="undefined"?c(this,"platform",{isWin:!1,isMac:!1}):c(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}static get isCSSRoundSupported(){var Ae,Se;return c(this,"isCSSRoundSupported",(Se=(Ae=globalThis.CSS)==null?void 0:Ae.supports)==null?void 0:Se.call(Ae,"width: round(1.5px, 1px)"))}}D.FeatureTest=te;const ne=[...Array(256).keys()].map(Ce=>Ce.toString(16).padStart(2,"0"));class X{static makeHexColor(Ae,Se,He){return`#${ne[Ae]}${ne[Se]}${ne[He]}`}static scaleMinMax(Ae,Se){let He;Ae[0]?(Ae[0]<0&&(He=Se[0],Se[0]=Se[1],Se[1]=He),Se[0]*=Ae[0],Se[1]*=Ae[0],Ae[3]<0&&(He=Se[2],Se[2]=Se[3],Se[3]=He),Se[2]*=Ae[3],Se[3]*=Ae[3]):(He=Se[0],Se[0]=Se[2],Se[2]=He,He=Se[1],Se[1]=Se[3],Se[3]=He,Ae[1]<0&&(He=Se[2],Se[2]=Se[3],Se[3]=He),Se[2]*=Ae[1],Se[3]*=Ae[1],Ae[2]<0&&(He=Se[0],Se[0]=Se[1],Se[1]=He),Se[0]*=Ae[2],Se[1]*=Ae[2]),Se[0]+=Ae[4],Se[1]+=Ae[4],Se[2]+=Ae[5],Se[3]+=Ae[5]}static transform(Ae,Se){return[Ae[0]*Se[0]+Ae[2]*Se[1],Ae[1]*Se[0]+Ae[3]*Se[1],Ae[0]*Se[2]+Ae[2]*Se[3],Ae[1]*Se[2]+Ae[3]*Se[3],Ae[0]*Se[4]+Ae[2]*Se[5]+Ae[4],Ae[1]*Se[4]+Ae[3]*Se[5]+Ae[5]]}static applyTransform(Ae,Se){const He=Ae[0]*Se[0]+Ae[1]*Se[2]+Se[4],Ve=Ae[0]*Se[1]+Ae[1]*Se[3]+Se[5];return[He,Ve]}static applyInverseTransform(Ae,Se){const He=Se[0]*Se[3]-Se[1]*Se[2],Ve=(Ae[0]*Se[3]-Ae[1]*Se[2]+Se[2]*Se[5]-Se[4]*Se[3])/He,Le=(-Ae[0]*Se[1]+Ae[1]*Se[0]+Se[4]*Se[1]-Se[5]*Se[0])/He;return[Ve,Le]}static getAxialAlignedBoundingBox(Ae,Se){const He=this.applyTransform(Ae,Se),Ve=this.applyTransform(Ae.slice(2,4),Se),Le=this.applyTransform([Ae[0],Ae[3]],Se),Ye=this.applyTransform([Ae[2],Ae[1]],Se);return[Math.min(He[0],Ve[0],Le[0],Ye[0]),Math.min(He[1],Ve[1],Le[1],Ye[1]),Math.max(He[0],Ve[0],Le[0],Ye[0]),Math.max(He[1],Ve[1],Le[1],Ye[1])]}static inverseTransform(Ae){const Se=Ae[0]*Ae[3]-Ae[1]*Ae[2];return[Ae[3]/Se,-Ae[1]/Se,-Ae[2]/Se,Ae[0]/Se,(Ae[2]*Ae[5]-Ae[4]*Ae[3])/Se,(Ae[4]*Ae[1]-Ae[5]*Ae[0])/Se]}static singularValueDecompose2dScale(Ae){const Se=[Ae[0],Ae[2],Ae[1],Ae[3]],He=Ae[0]*Se[0]+Ae[1]*Se[2],Ve=Ae[0]*Se[1]+Ae[1]*Se[3],Le=Ae[2]*Se[0]+Ae[3]*Se[2],Ye=Ae[2]*Se[1]+Ae[3]*Se[3],lt=(He+Ye)/2,Ee=Math.sqrt(Gt(He+Ye,2)-4*(He*Ye-Le*Ve))/2,ut=lt+Ee||1,_e=lt-Ee||1;return[Math.sqrt(ut),Math.sqrt(_e)]}static normalizeRect(Ae){const Se=Ae.slice(0);return Ae[0]>Ae[2]&&(Se[0]=Ae[2],Se[2]=Ae[0]),Ae[1]>Ae[3]&&(Se[1]=Ae[3],Se[3]=Ae[1]),Se}static intersect(Ae,Se){const He=Math.max(Math.min(Ae[0],Ae[2]),Math.min(Se[0],Se[2])),Ve=Math.min(Math.max(Ae[0],Ae[2]),Math.max(Se[0],Se[2]));if(He>Ve)return null;const Le=Math.max(Math.min(Ae[1],Ae[3]),Math.min(Se[1],Se[3])),Ye=Math.min(Math.max(Ae[1],Ae[3]),Math.max(Se[1],Se[3]));return Le>Ye?null:[He,Le,Ve,Ye]}static bezierBoundingBox(Ae,Se,He,Ve,Le,Ye,lt,Ee){const ut=[],_e=[[],[]];let Ie,de,be,Be,Pe,je,Je,$e;for(let at=0;at<2;++at){if(at===0?(de=6*Ae-12*He+6*Le,Ie=-3*Ae+9*He-9*Le+3*lt,be=3*He-3*Ae):(de=6*Se-12*Ve+6*Ye,Ie=-3*Se+9*Ve-9*Ye+3*Ee,be=3*Ve-3*Se),Math.abs(Ie)<1e-12){if(Math.abs(de)<1e-12)continue;Be=-be/de,0<Be&&Be<1&&ut.push(Be);continue}Je=de*de-4*be*Ie,$e=Math.sqrt(Je),!(Je<0)&&(Pe=(-de+$e)/(2*Ie),0<Pe&&Pe<1&&ut.push(Pe),je=(-de-$e)/(2*Ie),0<je&&je<1&&ut.push(je))}let ve=ut.length,We;const tt=ve;for(;ve--;)Be=ut[ve],We=1-Be,_e[0][ve]=We*We*We*Ae+3*We*We*Be*He+3*We*Be*Be*Le+Be*Be*Be*lt,_e[1][ve]=We*We*We*Se+3*We*We*Be*Ve+3*We*Be*Be*Ye+Be*Be*Be*Ee;return _e[0][tt]=Ae,_e[1][tt]=Se,_e[0][tt+1]=lt,_e[1][tt+1]=Ee,_e[0].length=_e[1].length=tt+2,[Math.min(..._e[0]),Math.min(..._e[1]),Math.max(..._e[0]),Math.max(..._e[1])]}}D.Util=X;const re=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function ae(Ce){if(Ce[0]>="ï"){let Se;if(Ce[0]==="þ"&&Ce[1]==="ÿ"?Se="utf-16be":Ce[0]==="ÿ"&&Ce[1]==="þ"?Se="utf-16le":Ce[0]==="ï"&&Ce[1]==="»"&&Ce[2]==="¿"&&(Se="utf-8"),Se)try{const He=new TextDecoder(Se,{fatal:!0}),Ve=oe(Ce);return He.decode(Ve)}catch(He){g(`stringToPDFString: "${He}".`)}}const Ae=[];for(let Se=0,He=Ce.length;Se<He;Se++){const Ve=re[Ce.charCodeAt(Se)];Ae.push(Ve?String.fromCharCode(Ve):Ce.charAt(Se))}return Ae.join("")}function z(Ce){return decodeURIComponent(escape(Ce))}function le(Ce){return unescape(encodeURIComponent(Ce))}function ue(Ce){return typeof Ce=="object"&&(Ce==null?void 0:Ce.byteLength)!==void 0}function ge(Ce,Ae){if(Ce.length!==Ae.length)return!1;for(let Se=0,He=Ce.length;Se<He;Se++)if(Ce[Se]!==Ae[Se])return!1;return!0}function ke(Ce=new Date){return[Ce.getUTCFullYear().toString(),(Ce.getUTCMonth()+1).toString().padStart(2,"0"),Ce.getUTCDate().toString().padStart(2,"0"),Ce.getUTCHours().toString().padStart(2,"0"),Ce.getUTCMinutes().toString().padStart(2,"0"),Ce.getUTCSeconds().toString().padStart(2,"0")].join("")}class me{constructor(){De(this,Te,!1);this.promise=new Promise((Ae,Se)=>{this.resolve=He=>{Ne(this,Te,!0),Ae(He)},this.reject=He=>{Ne(this,Te,!0),Se(He)}})}get settled(){return he(this,Te)}}Te=new WeakMap,D.PromiseCapability=me;let fe=null,xe=null;function pe(Ce){return fe||(fe=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,xe=new Map([["ﬅ","ſt"]])),Ce.replaceAll(fe,(Ae,Se,He)=>Se?Se.normalize("NFKC"):xe.get(He))}function we(){if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const Ce=new Uint8Array(32);if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(Ce);else for(let Ae=0;Ae<32;Ae++)Ce[Ae]=Math.floor(Math.random()*255);return L(Ce)}const Oe="pdfjs_internal_id_";D.AnnotationPrefix=Oe},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XRefParseException=D.XRefEntryException=D.ParserEOFException=D.PDF_VERSION_REGEXP=D.MissingDataException=void 0,D.arrayBuffersToBytes=O,D.collectActions=l,D.encodeToXmlString=H,D.escapePDFName=M,D.escapeString=b,D.getInheritableProperty=d,D.getLookupTableFactory=t,D.getNewAnnotationsMap=U,D.getRotationMatrix=r,D.isAscii=g,D.isWhiteSpace=R,D.log2=I,D.numberToString=N,D.parseXFAPath=E,D.readInt8=k,D.readUint16=y,D.readUint32=f,D.recoverJsURL=F,D.stringToUTF16HexString=S,D.stringToUTF16String=m,D.toRomanNumerals=n,D.validateCSSFont=h,D.validateFontName=s;var i=se(2),w=se(4),P=se(5);const e=/^[1-9]\.\d$/;D.PDF_VERSION_REGEXP=e;function t(p){let c;return function(){return p&&(c=Object.create(null),p(c),p=null),c}}class o extends i.BaseException{constructor(c,u){super(`Missing data [${c}, ${u})`,"MissingDataException"),this.begin=c,this.end=u}}D.MissingDataException=o;class K extends i.BaseException{constructor(c){super(c,"ParserEOFException")}}D.ParserEOFException=K;class j extends i.BaseException{constructor(c){super(c,"XRefEntryException")}}D.XRefEntryException=j;class C extends i.BaseException{constructor(c){super(c,"XRefParseException")}}D.XRefParseException=C;function O(p){const c=p.length;if(c===0)return new Uint8Array(0);if(c===1)return new Uint8Array(p[0]);let u=0;for(let G=0;G<c;G++)u+=p[G].byteLength;const q=new Uint8Array(u);let J=0;for(let G=0;G<c;G++){const W=new Uint8Array(p[G]);q.set(W,J),J+=W.byteLength}return q}function d({dict:p,key:c,getArray:u=!1,stopWhenFound:q=!0}){let J;const G=new w.RefSet;for(;p instanceof w.Dict&&!(p.objId&&G.has(p.objId));){p.objId&&G.put(p.objId);const W=u?p.getArray(c):p.get(c);if(W!==void 0){if(q)return W;(J||(J=[])).push(W)}p=p.get("Parent")}return J}const A=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"];function n(p,c=!1){(0,i.assert)(Number.isInteger(p)&&p>0,"The number should be a positive integer.");const u=[];let q;for(;p>=1e3;)p-=1e3,u.push("M");q=p/100|0,p%=100,u.push(A[q]),q=p/10|0,p%=10,u.push(A[10+q]),u.push(A[20+p]);const J=u.join("");return c?J.toLowerCase():J}function I(p){return p<=0?0:Math.ceil(Math.log2(p))}function k(p,c){return p[c]<<24>>24}function y(p,c){return p[c]<<8|p[c+1]}function f(p,c){return(p[c]<<24|p[c+1]<<16|p[c+2]<<8|p[c+3])>>>0}function R(p){return p===32||p===9||p===13||p===10}function E(p){const c=/(.+)\[(\d+)\]$/;return p.split(".").map(u=>{const q=u.match(c);return q?{name:q[1],pos:parseInt(q[2],10)}:{name:u,pos:0}})}function M(p){const c=[];let u=0;for(let q=0,J=p.length;q<J;q++){const G=p.charCodeAt(q);(G<33||G>126||G===35||G===40||G===41||G===60||G===62||G===91||G===93||G===123||G===125||G===47||G===37)&&(u<q&&c.push(p.substring(u,q)),c.push(`#${G.toString(16)}`),u=q+1)}return c.length===0?p:(u<p.length&&c.push(p.substring(u,p.length)),c.join(""))}function b(p){return p.replaceAll(/([()\\\n\r])/g,c=>c===`
`?"\\n":c==="\r"?"\\r":`\\${c}`)}function V(p,c,u,q){if(!p)return;let J=null;if(p instanceof w.Ref){if(q.has(p))return;J=p,q.put(J),p=c.fetch(p)}if(Array.isArray(p))for(const G of p)V(G,c,u,q);else if(p instanceof w.Dict){if((0,w.isName)(p.get("S"),"JavaScript")){const G=p.get("JS");let W;G instanceof P.BaseStream?W=G.getString():typeof G=="string"&&(W=G),W&&(W=(0,i.stringToPDFString)(W).replaceAll("\0","")),W&&u.push(W)}V(p.getRaw("Next"),c,u,q)}J&&q.remove(J)}function l(p,c,u){const q=Object.create(null),J=d({dict:c,key:"AA",stopWhenFound:!1});if(J)for(let G=J.length-1;G>=0;G--){const W=J[G];if(W instanceof w.Dict)for(const ce of W.getKeys()){const _=u[ce];if(!_)continue;const ie=W.getRaw(ce),L=new w.RefSet,oe=[];V(ie,p,oe,L),oe.length>0&&(q[_]=oe)}}if(c.has("A")){const G=c.get("A"),W=new w.RefSet,ce=[];V(G,p,ce,W),ce.length>0&&(q.Action=ce)}return(0,i.objectSize)(q)>0?q:null}const x={60:"&lt;",62:"&gt;",38:"&amp;",34:"&quot;",39:"&apos;"};function H(p){const c=[];let u=0;for(let q=0,J=p.length;q<J;q++){const G=p.codePointAt(q);if(32<=G&&G<=126){const W=x[G];W&&(u<q&&c.push(p.substring(u,q)),c.push(W),u=q+1)}else u<q&&c.push(p.substring(u,q)),c.push(`&#x${G.toString(16).toUpperCase()};`),G>55295&&(G<57344||G>65533)&&q++,u=q+1}return c.length===0?p:(u<p.length&&c.push(p.substring(u,p.length)),c.join(""))}function s(p,c=!1){const u=/^("|').*("|')$/.exec(p);if(u&&u[1]===u[2]){if(new RegExp(`[^\\\\]${u[1]}`).test(p.slice(1,-1)))return c&&(0,i.warn)(`FontFamily contains unescaped ${u[1]}: ${p}.`),!1}else for(const q of p.split(/[ \t]+/))if(/^(\d|(-(\d|-)))/.test(q)||!/^[\w-\\]+$/.test(q))return c&&(0,i.warn)(`FontFamily contains invalid <custom-ident>: ${p}.`),!1;return!0}function h(p){const c="14",u="400",q=new Set(["100","200","300","400","500","600","700","800","900","1000","normal","bold","bolder","lighter"]),{fontFamily:J,fontWeight:G,italicAngle:W}=p;if(!s(J,!0))return!1;const ce=G?G.toString():"";p.fontWeight=q.has(ce)?ce:u;const _=parseFloat(W);return p.italicAngle=isNaN(_)||_<-90||_>90?c:W.toString(),!0}function F(p){const c=["app.launchURL","window.open","xfa.host.gotoURL"],q=new RegExp("^\\s*("+c.join("|").replaceAll(".","\\.")+`)\\((?:'|")([^'"]*)(?:'|")(?:,\\s*(\\w+)\\)|\\))`,"i").exec(p);if(q!=null&&q[2]){const J=q[2];let G=!1;return q[3]==="true"&&q[1]==="app.launchURL"&&(G=!0),{url:J,newWindow:G}}return null}function N(p){if(Number.isInteger(p))return p.toString();const c=Math.round(p*100);return c%100===0?(c/100).toString():c%10===0?p.toFixed(1):p.toFixed(2)}function U(p){if(!p)return null;const c=new Map;for(const[u,q]of p){if(!u.startsWith(i.AnnotationEditorPrefix))continue;let J=c.get(q.pageIndex);J||(J=[],c.set(q.pageIndex,J)),J.push(q)}return c.size>0?c:null}function g(p){return/^[\x00-\x7F]*$/.test(p)}function S(p){const c=[];for(let u=0,q=p.length;u<q;u++){const J=p.charCodeAt(u);c.push((J>>8&255).toString(16).padStart(2,"0"),(J&255).toString(16).padStart(2,"0"))}return c.join("")}function m(p,c=!1){const u=[];c&&u.push("þÿ");for(let q=0,J=p.length;q<J;q++){const G=p.charCodeAt(q);u.push(String.fromCharCode(G>>8&255),String.fromCharCode(G&255))}return u.join("")}function r(p,c,u){switch(p){case 90:return[0,1,-1,0,c,0];case 180:return[-1,0,0,-1,c,u];case 270:return[0,-1,1,0,0,u];default:throw new Error("Invalid rotation")}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.RefSetCache=D.RefSet=D.Ref=D.Name=D.EOF=D.Dict=D.Cmd=D.CIRCULAR_REF=void 0,D.clearPrimitiveCaches=K,D.isCmd=y,D.isDict=f,D.isName=k,D.isRefsEqual=R;var i=se(2);const w=Symbol("CIRCULAR_REF");D.CIRCULAR_REF=w;const P=Symbol("EOF");D.EOF=P;let e=Object.create(null),t=Object.create(null),o=Object.create(null);function K(){e=Object.create(null),t=Object.create(null),o=Object.create(null)}class j{constructor(M){this.name=M}static get(M){return t[M]||(t[M]=new j(M))}}D.Name=j;class C{constructor(M){this.cmd=M}static get(M){return e[M]||(e[M]=new C(M))}}D.Cmd=C;const O=function(){return O};class d{constructor(M=null){this._map=Object.create(null),this.xref=M,this.objId=null,this.suppressEncryption=!1,this.__nonSerializable__=O}assignXref(M){this.xref=M}get size(){return Object.keys(this._map).length}get(M,b,V){let l=this._map[M];return l===void 0&&b!==void 0&&(l=this._map[b],l===void 0&&V!==void 0&&(l=this._map[V])),l instanceof A&&this.xref?this.xref.fetch(l,this.suppressEncryption):l}getAsync(M,b,V){return rt(this,null,function*(){let l=this._map[M];return l===void 0&&b!==void 0&&(l=this._map[b],l===void 0&&V!==void 0&&(l=this._map[V])),l instanceof A&&this.xref?this.xref.fetchAsync(l,this.suppressEncryption):l})}getArray(M,b,V){let l=this._map[M];if(l===void 0&&b!==void 0&&(l=this._map[b],l===void 0&&V!==void 0&&(l=this._map[V])),l instanceof A&&this.xref&&(l=this.xref.fetch(l,this.suppressEncryption)),Array.isArray(l)){l=l.slice();for(let x=0,H=l.length;x<H;x++)l[x]instanceof A&&this.xref&&(l[x]=this.xref.fetch(l[x],this.suppressEncryption))}return l}getRaw(M){return this._map[M]}getKeys(){return Object.keys(this._map)}getRawValues(){return Object.values(this._map)}set(M,b){this._map[M]=b}has(M){return this._map[M]!==void 0}forEach(M){for(const b in this._map)M(b,this.get(b))}static get empty(){const M=new d(null);return M.set=(b,V)=>{(0,i.unreachable)("Should not call `set` on the empty dictionary.")},(0,i.shadow)(this,"empty",M)}static merge({xref:M,dictArray:b,mergeSubDicts:V=!1}){const l=new d(M),x=new Map;for(const H of b)if(H instanceof d)for(const[s,h]of Object.entries(H._map)){let F=x.get(s);if(F===void 0)F=[],x.set(s,F);else if(!V||!(h instanceof d))continue;F.push(h)}for(const[H,s]of x){if(s.length===1||!(s[0]instanceof d)){l._map[H]=s[0];continue}const h=new d(M);for(const F of s)for(const[N,U]of Object.entries(F._map))h._map[N]===void 0&&(h._map[N]=U);h.size>0&&(l._map[H]=h)}return x.clear(),l.size>0?l:d.empty}clone(){const M=new d(this.xref);for(const b of this.getKeys())M.set(b,this.getRaw(b));return M}}D.Dict=d;class A{constructor(M,b){this.num=M,this.gen=b}toString(){return this.gen===0?`${this.num}R`:`${this.num}R${this.gen}`}static fromString(M){const b=o[M];if(b)return b;const V=/^(\d+)R(\d*)$/.exec(M);return!V||V[1]==="0"?null:o[M]=new A(parseInt(V[1]),V[2]?parseInt(V[2]):0)}static get(M,b){const V=b===0?`${M}R`:`${M}R${b}`;return o[V]||(o[V]=new A(M,b))}}D.Ref=A;class n{constructor(M=null){this._set=new Set(M==null?void 0:M._set)}has(M){return this._set.has(M.toString())}put(M){this._set.add(M.toString())}remove(M){this._set.delete(M.toString())}[Symbol.iterator](){return this._set.values()}clear(){this._set.clear()}}D.RefSet=n;class I{constructor(){this._map=new Map}get size(){return this._map.size}get(M){return this._map.get(M.toString())}has(M){return this._map.has(M.toString())}put(M,b){this._map.set(M.toString(),b)}putAlias(M,b){this._map.set(M.toString(),this.get(b))}[Symbol.iterator](){return this._map.values()}clear(){this._map.clear()}}D.RefSetCache=I;function k(E,M){return E instanceof j&&(M===void 0||E.name===M)}function y(E,M){return E instanceof C&&(M===void 0||E.cmd===M)}function f(E,M){return E instanceof d&&(M===void 0||k(E.get("Type"),M))}function R(E,M){return E.num===M.num&&E.gen===M.gen}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.BaseStream=void 0;var i=se(2);class w{constructor(){this.constructor===w&&(0,i.unreachable)("Cannot initialize BaseStream.")}get length(){(0,i.unreachable)("Abstract getter `length` accessed")}get isEmpty(){(0,i.unreachable)("Abstract getter `isEmpty` accessed")}get isDataLoaded(){return(0,i.shadow)(this,"isDataLoaded",!0)}getByte(){(0,i.unreachable)("Abstract method `getByte` called")}getBytes(e){(0,i.unreachable)("Abstract method `getBytes` called")}peekByte(){const e=this.getByte();return e!==-1&&this.pos--,e}peekBytes(e){const t=this.getBytes(e);return this.pos-=t.length,t}getUint16(){const e=this.getByte(),t=this.getByte();return e===-1||t===-1?-1:(e<<8)+t}getInt32(){const e=this.getByte(),t=this.getByte(),o=this.getByte(),K=this.getByte();return(e<<24)+(t<<16)+(o<<8)+K}getByteRange(e,t){(0,i.unreachable)("Abstract method `getByteRange` called")}getString(e){return(0,i.bytesToString)(this.getBytes(e))}skip(e){this.pos+=e||1}reset(){(0,i.unreachable)("Abstract method `reset` called")}moveStart(){(0,i.unreachable)("Abstract method `moveStart` called")}makeSubStream(e,t,o=null){(0,i.unreachable)("Abstract method `makeSubStream` called")}getBaseStreams(){return null}}D.BaseStream=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.NetworkPdfManager=D.LocalPdfManager=void 0;var i=se(2),w=se(7),P=se(3),e=se(9),t=se(8);function o(O){if(O){const d=(0,i.createValidAbsoluteUrl)(O);if(d)return d.href;(0,i.warn)(`Invalid absolute docBaseUrl: "${O}".`)}return null}class K{constructor(d){var A;this.constructor===K&&(0,i.unreachable)("Cannot initialize BasePdfManager."),this._docBaseUrl=o(d.docBaseUrl),this._docId=d.docId,this._password=d.password,this.enableXfa=d.enableXfa,(A=d.evaluatorOptions).isOffscreenCanvasSupported&&(A.isOffscreenCanvasSupported=i.FeatureTest.isOffscreenCanvasSupported),this.evaluatorOptions=d.evaluatorOptions}get docId(){return this._docId}get password(){return this._password}get docBaseUrl(){return this._docBaseUrl}get catalog(){return this.pdfDocument.catalog}ensureDoc(d,A){return this.ensure(this.pdfDocument,d,A)}ensureXRef(d,A){return this.ensure(this.pdfDocument.xref,d,A)}ensureCatalog(d,A){return this.ensure(this.pdfDocument.catalog,d,A)}getPage(d){return this.pdfDocument.getPage(d)}fontFallback(d,A){return this.pdfDocument.fontFallback(d,A)}loadXfaFonts(d,A){return this.pdfDocument.loadXfaFonts(d,A)}loadXfaImages(){return this.pdfDocument.loadXfaImages()}serializeXfaData(d){return this.pdfDocument.serializeXfaData(d)}cleanup(d=!1){return this.pdfDocument.cleanup(d)}ensure(d,A,n){return rt(this,null,function*(){(0,i.unreachable)("Abstract method `ensure` called")})}requestRange(d,A){(0,i.unreachable)("Abstract method `requestRange` called")}requestLoadedStream(d=!1){(0,i.unreachable)("Abstract method `requestLoadedStream` called")}sendProgressiveData(d){(0,i.unreachable)("Abstract method `sendProgressiveData` called")}updatePassword(d){this._password=d}terminate(d){(0,i.unreachable)("Abstract method `terminate` called")}}class j extends K{constructor(d){super(d);const A=new t.Stream(d.source);this.pdfDocument=new e.PDFDocument(this,A),this._loadedStreamPromise=Promise.resolve(A)}ensure(d,A,n){return rt(this,null,function*(){const I=d[A];return typeof I=="function"?I.apply(d,n):I})}requestRange(d,A){return Promise.resolve()}requestLoadedStream(d=!1){return this._loadedStreamPromise}terminate(d){}}D.LocalPdfManager=j;class C extends K{constructor(d){super(d),this.streamManager=new w.ChunkedStreamManager(d.source,{msgHandler:d.handler,length:d.length,disableAutoFetch:d.disableAutoFetch,rangeChunkSize:d.rangeChunkSize}),this.pdfDocument=new e.PDFDocument(this,this.streamManager.getStream())}ensure(d,A,n){return rt(this,null,function*(){try{const I=d[A];return typeof I=="function"?I.apply(d,n):I}catch(I){if(!(I instanceof P.MissingDataException))throw I;return yield this.requestRange(I.begin,I.end),this.ensure(d,A,n)}})}requestRange(d,A){return this.streamManager.requestRange(d,A)}requestLoadedStream(d=!1){return this.streamManager.requestAllChunks(d)}sendProgressiveData(d){this.streamManager.onReceiveData({chunk:d})}terminate(d){this.streamManager.abort(d)}}D.NetworkPdfManager=C},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ChunkedStreamManager=D.ChunkedStream=void 0;var i=se(3),w=se(2),P=se(8);class e extends P.Stream{constructor(K,j,C){super(new Uint8Array(K),0,K,null),this.chunkSize=j,this._loadedChunks=new Set,this.numChunks=Math.ceil(K/j),this.manager=C,this.progressiveDataLength=0,this.lastSuccessfulEnsureByteChunk=-1}getMissingChunks(){const K=[];for(let j=0,C=this.numChunks;j<C;++j)this._loadedChunks.has(j)||K.push(j);return K}get numChunksLoaded(){return this._loadedChunks.size}get isDataLoaded(){return this.numChunksLoaded===this.numChunks}onReceiveData(K,j){const C=this.chunkSize;if(K%C!==0)throw new Error(`Bad begin offset: ${K}`);const O=K+j.byteLength;if(O%C!==0&&O!==this.bytes.length)throw new Error(`Bad end offset: ${O}`);this.bytes.set(new Uint8Array(j),K);const d=Math.floor(K/C),A=Math.floor((O-1)/C)+1;for(let n=d;n<A;++n)this._loadedChunks.add(n)}onReceiveProgressiveData(K){let j=this.progressiveDataLength;const C=Math.floor(j/this.chunkSize);this.bytes.set(new Uint8Array(K),j),j+=K.byteLength,this.progressiveDataLength=j;const O=j>=this.end?this.numChunks:Math.floor(j/this.chunkSize);for(let d=C;d<O;++d)this._loadedChunks.add(d)}ensureByte(K){if(K<this.progressiveDataLength)return;const j=Math.floor(K/this.chunkSize);if(!(j>this.numChunks)&&j!==this.lastSuccessfulEnsureByteChunk){if(!this._loadedChunks.has(j))throw new i.MissingDataException(K,K+1);this.lastSuccessfulEnsureByteChunk=j}}ensureRange(K,j){if(K>=j||j<=this.progressiveDataLength)return;const C=Math.floor(K/this.chunkSize);if(C>this.numChunks)return;const O=Math.min(Math.floor((j-1)/this.chunkSize)+1,this.numChunks);for(let d=C;d<O;++d)if(!this._loadedChunks.has(d))throw new i.MissingDataException(K,j)}nextEmptyChunk(K){const j=this.numChunks;for(let C=0;C<j;++C){const O=(K+C)%j;if(!this._loadedChunks.has(O))return O}return null}hasChunk(K){return this._loadedChunks.has(K)}getByte(){const K=this.pos;return K>=this.end?-1:(K>=this.progressiveDataLength&&this.ensureByte(K),this.bytes[this.pos++])}getBytes(K){const j=this.bytes,C=this.pos,O=this.end;if(!K)return O>this.progressiveDataLength&&this.ensureRange(C,O),j.subarray(C,O);let d=C+K;return d>O&&(d=O),d>this.progressiveDataLength&&this.ensureRange(C,d),this.pos=d,j.subarray(C,d)}getByteRange(K,j){return K<0&&(K=0),j>this.end&&(j=this.end),j>this.progressiveDataLength&&this.ensureRange(K,j),this.bytes.subarray(K,j)}makeSubStream(K,j,C=null){j?K+j>this.progressiveDataLength&&this.ensureRange(K,K+j):K>=this.progressiveDataLength&&this.ensureByte(K);function O(){}O.prototype=Object.create(this),O.prototype.getMissingChunks=function(){const A=this.chunkSize,n=Math.floor(this.start/A),I=Math.floor((this.end-1)/A)+1,k=[];for(let y=n;y<I;++y)this._loadedChunks.has(y)||k.push(y);return k},Object.defineProperty(O.prototype,"isDataLoaded",{get(){return this.numChunksLoaded===this.numChunks?!0:this.getMissingChunks().length===0},configurable:!0});const d=new O;return d.pos=d.start=K,d.end=K+j||this.end,d.dict=C,d}getBaseStreams(){return[this]}}D.ChunkedStream=e;class t{constructor(K,j){this.length=j.length,this.chunkSize=j.rangeChunkSize,this.stream=new e(this.length,this.chunkSize,this),this.pdfNetworkStream=K,this.disableAutoFetch=j.disableAutoFetch,this.msgHandler=j.msgHandler,this.currRequestId=0,this._chunksNeededByRequest=new Map,this._requestsByChunk=new Map,this._promisesByRequest=new Map,this.progressiveDataLength=0,this.aborted=!1,this._loadedStreamCapability=new w.PromiseCapability}sendRequest(K,j){const C=this.pdfNetworkStream.getRangeReader(K,j);C.isStreamingSupported||(C.onProgress=this.onProgress.bind(this));let O=[],d=0;return new Promise((A,n)=>{const I=({value:k,done:y})=>{try{if(y){const f=(0,i.arrayBuffersToBytes)(O);O=null,A(f);return}d+=k.byteLength,C.isStreamingSupported&&this.onProgress({loaded:d}),O.push(k),C.read().then(I,n)}catch(f){n(f)}};C.read().then(I,n)}).then(A=>{this.aborted||this.onReceiveData({chunk:A,begin:K})})}requestAllChunks(K=!1){if(!K){const j=this.stream.getMissingChunks();this._requestChunks(j)}return this._loadedStreamCapability.promise}_requestChunks(K){const j=this.currRequestId++,C=new Set;this._chunksNeededByRequest.set(j,C);for(const A of K)this.stream.hasChunk(A)||C.add(A);if(C.size===0)return Promise.resolve();const O=new w.PromiseCapability;this._promisesByRequest.set(j,O);const d=[];for(const A of C){let n=this._requestsByChunk.get(A);n||(n=[],this._requestsByChunk.set(A,n),d.push(A)),n.push(j)}if(d.length>0){const A=this.groupChunks(d);for(const n of A){const I=n.beginChunk*this.chunkSize,k=Math.min(n.endChunk*this.chunkSize,this.length);this.sendRequest(I,k).catch(O.reject)}}return O.promise.catch(A=>{if(!this.aborted)throw A})}getStream(){return this.stream}requestRange(K,j){j=Math.min(j,this.length);const C=this.getBeginChunk(K),O=this.getEndChunk(j),d=[];for(let A=C;A<O;++A)d.push(A);return this._requestChunks(d)}requestRanges(K=[]){const j=[];for(const C of K){const O=this.getBeginChunk(C.begin),d=this.getEndChunk(C.end);for(let A=O;A<d;++A)j.includes(A)||j.push(A)}return j.sort(function(C,O){return C-O}),this._requestChunks(j)}groupChunks(K){const j=[];let C=-1,O=-1;for(let d=0,A=K.length;d<A;++d){const n=K[d];C<0&&(C=n),O>=0&&O+1!==n&&(j.push({beginChunk:C,endChunk:O+1}),C=n),d+1===K.length&&j.push({beginChunk:C,endChunk:n+1}),O=n}return j}onProgress(K){this.msgHandler.send("DocProgress",{loaded:this.stream.numChunksLoaded*this.chunkSize+K.loaded,total:this.length})}onReceiveData(K){const j=K.chunk,C=K.begin===void 0,O=C?this.progressiveDataLength:K.begin,d=O+j.byteLength,A=Math.floor(O/this.chunkSize),n=d<this.length?Math.floor(d/this.chunkSize):Math.ceil(d/this.chunkSize);C?(this.stream.onReceiveProgressiveData(j),this.progressiveDataLength=d):this.stream.onReceiveData(O,j),this.stream.isDataLoaded&&this._loadedStreamCapability.resolve(this.stream);const I=[];for(let k=A;k<n;++k){const y=this._requestsByChunk.get(k);if(y){this._requestsByChunk.delete(k);for(const f of y){const R=this._chunksNeededByRequest.get(f);R.has(k)&&R.delete(k),!(R.size>0)&&I.push(f)}}}if(!this.disableAutoFetch&&this._requestsByChunk.size===0){let k;if(this.stream.numChunksLoaded===1){const y=this.stream.numChunks-1;this.stream.hasChunk(y)||(k=y)}else k=this.stream.nextEmptyChunk(n);Number.isInteger(k)&&this._requestChunks([k])}for(const k of I){const y=this._promisesByRequest.get(k);this._promisesByRequest.delete(k),y.resolve()}this.msgHandler.send("DocProgress",{loaded:this.stream.numChunksLoaded*this.chunkSize,total:this.length})}onError(K){this._loadedStreamCapability.reject(K)}getBeginChunk(K){return Math.floor(K/this.chunkSize)}getEndChunk(K){return Math.floor((K-1)/this.chunkSize)+1}abort(K){var j;this.aborted=!0,(j=this.pdfNetworkStream)==null||j.cancelAllRequests(K);for(const C of this._promisesByRequest.values())C.reject(K)}}D.ChunkedStreamManager=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.StringStream=D.Stream=D.NullStream=void 0;var i=se(5),w=se(2);class P extends i.BaseStream{constructor(K,j,C,O){super(),this.bytes=K instanceof Uint8Array?K:new Uint8Array(K),this.start=j||0,this.pos=this.start,this.end=j+C||this.bytes.length,this.dict=O}get length(){return this.end-this.start}get isEmpty(){return this.length===0}getByte(){return this.pos>=this.end?-1:this.bytes[this.pos++]}getBytes(K){const j=this.bytes,C=this.pos,O=this.end;if(!K)return j.subarray(C,O);let d=C+K;return d>O&&(d=O),this.pos=d,j.subarray(C,d)}getByteRange(K,j){return K<0&&(K=0),j>this.end&&(j=this.end),this.bytes.subarray(K,j)}reset(){this.pos=this.start}moveStart(){this.start=this.pos}makeSubStream(K,j,C=null){return new P(this.bytes.buffer,K,j,C)}}D.Stream=P;class e extends P{constructor(K){super((0,w.stringToBytes)(K))}}D.StringStream=e;class t extends P{constructor(){super(new Uint8Array(0))}}D.NullStream=t},(Fe,D,se)=>{var g,na,m,aa;Object.defineProperty(D,"__esModule",{value:!0}),D.Page=D.PDFDocument=void 0;var i=se(2),w=se(10),P=se(3),e=se(4),t=se(51),o=se(5),K=se(74),j=se(66),C=se(68),O=se(102),d=se(16),A=se(8),n=se(76),I=se(64),k=se(13),y=se(18),f=se(72),R=se(73),E=se(77),M=se(103);const b=1,V=[0,0,612,792];class l{constructor({pdfManager:c,xref:u,pageIndex:q,pageDict:J,ref:G,globalIdFactory:W,fontCache:ce,builtInCMapCache:_,standardFontDataCache:ie,globalImageCache:L,systemFontCache:oe,nonBlendModesSet:T,xfaFactory:Q}){De(this,g);this.pdfManager=c,this.pageIndex=q,this.pageDict=J,this.xref=u,this.ref=G,this.fontCache=ce,this.builtInCMapCache=_,this.standardFontDataCache=ie,this.globalImageCache=L,this.systemFontCache=oe,this.nonBlendModesSet=T,this.evaluatorOptions=c.evaluatorOptions,this.resourcesPromise=null,this.xfaFactory=Q;const v={obj:0};this._localIdFactory=class extends W{static createObjId(){return`p${q}_${++v.obj}`}static getPageObjId(){return`p${G.toString()}`}}}_getInheritableProperty(c,u=!1){const q=(0,P.getInheritableProperty)({dict:this.pageDict,key:c,getArray:u,stopWhenFound:!1});return Array.isArray(q)?q.length===1||!(q[0]instanceof e.Dict)?q[0]:e.Dict.merge({xref:this.xref,dictArray:q}):q}get content(){return this.pageDict.getArray("Contents")}get resources(){const c=this._getInheritableProperty("Resources");return(0,i.shadow)(this,"resources",c instanceof e.Dict?c:e.Dict.empty)}_getBoundingBox(c){if(this.xfaData)return this.xfaData.bbox;let u=this._getInheritableProperty(c,!0);if(Array.isArray(u)&&u.length===4){if(u=i.Util.normalizeRect(u),u[2]-u[0]>0&&u[3]-u[1]>0)return u;(0,i.warn)(`Empty, or invalid, /${c} entry.`)}return null}get mediaBox(){return(0,i.shadow)(this,"mediaBox",this._getBoundingBox("MediaBox")||V)}get cropBox(){return(0,i.shadow)(this,"cropBox",this._getBoundingBox("CropBox")||this.mediaBox)}get userUnit(){let c=this.pageDict.get("UserUnit");return(typeof c!="number"||c<=0)&&(c=b),(0,i.shadow)(this,"userUnit",c)}get view(){const{cropBox:c,mediaBox:u}=this;if(c!==u&&!(0,i.isArrayEqual)(c,u)){const q=i.Util.intersect(c,u);if(q&&q[2]-q[0]>0&&q[3]-q[1]>0)return(0,i.shadow)(this,"view",q);(0,i.warn)("Empty /CropBox and /MediaBox intersection.")}return(0,i.shadow)(this,"view",u)}get rotate(){let c=this._getInheritableProperty("Rotate")||0;return c%90!==0?c=0:c>=360?c%=360:c<0&&(c=(c%360+360)%360),(0,i.shadow)(this,"rotate",c)}_onSubStreamError(c,u){if(this.evaluatorOptions.ignoreErrors){(0,i.warn)(`getContentStream - ignoring sub-stream (${u}): "${c}".`);return}throw c}getContentStream(){return this.pdfManager.ensure(this,"content").then(c=>c instanceof o.BaseStream?c:Array.isArray(c)?new y.StreamsSequenceStream(c,this._onSubStreamError.bind(this)):new A.NullStream)}get xfaData(){return(0,i.shadow)(this,"xfaData",this.xfaFactory?{bbox:this.xfaFactory.getBoundingBox(this.pageIndex)}:null)}saveNewAnnotations(c,u,q,J){return rt(this,null,function*(){if(this.xfaFactory)throw new Error("XFA: Cannot save new annotations.");const G=new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:this.pageIndex,idFactory:this._localIdFactory,fontCache:this.fontCache,builtInCMapCache:this.builtInCMapCache,standardFontDataCache:this.standardFontDataCache,globalImageCache:this.globalImageCache,systemFontCache:this.systemFontCache,options:this.evaluatorOptions}),W=new e.RefSet,ce=new e.RefSet;Re(this,g,na).call(this,q,W,ce);const _=this.pageDict,ie=this.annotations.filter(v=>!(v instanceof e.Ref&&W.has(v))),L=yield w.AnnotationFactory.saveNewAnnotations(G,u,q,J);for(const{ref:v}of L.annotations)v instanceof e.Ref&&!ce.has(v)&&ie.push(v);const oe=_.get("Annots");_.set("Annots",ie);const T=[];yield(0,R.writeObject)(this.ref,_,T,this.xref),oe&&_.set("Annots",oe);const Q=L.dependencies;return Q.push({ref:this.ref,data:T.join("")},...L.annotations),Q})}save(c,u,q){const J=new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:this.pageIndex,idFactory:this._localIdFactory,fontCache:this.fontCache,builtInCMapCache:this.builtInCMapCache,standardFontDataCache:this.standardFontDataCache,globalImageCache:this.globalImageCache,systemFontCache:this.systemFontCache,options:this.evaluatorOptions});return this._parsedAnnotations.then(function(G){const W=[];for(const ce of G)ce.mustBePrinted(q)&&W.push(ce.save(J,u,q).catch(function(_){return(0,i.warn)(`save - ignoring annotation data during "${u.name}" task: "${_}".`),null}));return Promise.all(W).then(function(ce){return ce.filter(_=>!!_)})})}loadResources(c){return this.resourcesPromise||(this.resourcesPromise=this.pdfManager.ensure(this,"resources")),this.resourcesPromise.then(()=>new n.ObjectLoader(this.resources,c,this.xref).load())}getOperatorList({handler:c,sink:u,task:q,intent:J,cacheKey:G,annotationStorage:W=null}){const ce=this.getContentStream(),_=this.loadResources(["ColorSpace","ExtGState","Font","Pattern","Properties","Shading","XObject"]),ie=new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:this.pageIndex,idFactory:this._localIdFactory,fontCache:this.fontCache,builtInCMapCache:this.builtInCMapCache,standardFontDataCache:this.standardFontDataCache,globalImageCache:this.globalImageCache,systemFontCache:this.systemFontCache,options:this.evaluatorOptions}),L=this.xfaFactory?null:(0,P.getNewAnnotationsMap)(W);let oe=null,T=Promise.resolve(null);if(L){const $=L.get(this.pageIndex);if($){const Z=this.pdfManager.ensureDoc("annotationGlobals");let te;const ne=new Set;for(const{bitmapId:re,bitmap:ae}of $)re&&!ae&&!ne.has(re)&&ne.add(re);const{isOffscreenCanvasSupported:X}=this.evaluatorOptions;if(ne.size>0){const re=$.slice();for(const[ae,z]of W)ae.startsWith(i.AnnotationEditorPrefix)&&z.bitmap&&ne.has(z.bitmapId)&&re.push(z);te=w.AnnotationFactory.generateImages(re,this.xref,X)}else te=w.AnnotationFactory.generateImages($,this.xref,X);oe=new e.RefSet,Re(this,g,na).call(this,$,oe,null),T=Z.then(re=>re?w.AnnotationFactory.printNewAnnotations(re,ie,q,$,te):null)}}const v=Promise.all([ce,_]).then(([$])=>{const Z=new I.OperatorList(J,u);return c.send("StartRenderPage",{transparency:ie.hasBlendModes(this.resources,this.nonBlendModesSet),pageIndex:this.pageIndex,cacheKey:G}),ie.getOperatorList({stream:$,task:q,resources:this.resources,operatorList:Z}).then(function(){return Z})});return Promise.all([v,this._parsedAnnotations,T]).then(function([$,Z,te]){if(te){Z=Z.filter(le=>!(le.ref&&oe.has(le.ref)));for(let le=0,ue=te.length;le<ue;le++){const ge=te[le];if(ge.refToReplace){const ke=Z.findIndex(me=>me.ref&&(0,e.isRefsEqual)(me.ref,ge.refToReplace));ke>=0&&(Z.splice(ke,1,ge),te.splice(le--,1),ue--)}}Z=Z.concat(te)}if(Z.length===0||J&i.RenderingIntentFlag.ANNOTATIONS_DISABLE)return $.flush(!0),{length:$.totalLength};const ne=!!(J&i.RenderingIntentFlag.ANNOTATIONS_FORMS),X=!!(J&i.RenderingIntentFlag.ANY),re=!!(J&i.RenderingIntentFlag.DISPLAY),ae=!!(J&i.RenderingIntentFlag.PRINT),z=[];for(const le of Z)(X||re&&le.mustBeViewed(W,ne)||ae&&le.mustBePrinted(W))&&z.push(le.getOperatorList(ie,q,J,ne,W).catch(function(ue){return(0,i.warn)(`getOperatorList - ignoring annotation data during "${q.name}" task: "${ue}".`),{opList:null,separateForm:!1,separateCanvas:!1}}));return Promise.all(z).then(function(le){let ue=!1,ge=!1;for(const{opList:ke,separateForm:me,separateCanvas:fe}of le)$.addOpList(ke),ue||(ue=me),ge||(ge=fe);return $.flush(!0,{form:ue,canvas:ge}),{length:$.totalLength}})})}extractTextContent({handler:c,task:u,includeMarkedContent:q,disableNormalization:J,sink:G}){const W=this.getContentStream(),ce=this.loadResources(["ExtGState","Font","Properties","XObject"]);return Promise.all([W,ce]).then(([ie])=>new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:this.pageIndex,idFactory:this._localIdFactory,fontCache:this.fontCache,builtInCMapCache:this.builtInCMapCache,standardFontDataCache:this.standardFontDataCache,globalImageCache:this.globalImageCache,systemFontCache:this.systemFontCache,options:this.evaluatorOptions}).getTextContent({stream:ie,task:u,resources:this.resources,includeMarkedContent:q,disableNormalization:J,sink:G,viewBox:this.view}))}getStructTree(){return rt(this,null,function*(){const c=yield this.pdfManager.ensureCatalog("structTreeRoot");return c?(yield this._parsedAnnotations,(yield this.pdfManager.ensure(this,"_parseStructTree",[c])).serializable):null})}_parseStructTree(c){const u=new f.StructTreePage(c,this.pageDict);return u.parse(this.ref),u}getAnnotationsData(c,u,q){return rt(this,null,function*(){const J=yield this._parsedAnnotations;if(J.length===0)return J;const G=[],W=[];let ce;const _=!!(q&i.RenderingIntentFlag.ANY),ie=!!(q&i.RenderingIntentFlag.DISPLAY),L=!!(q&i.RenderingIntentFlag.PRINT);for(const oe of J){const T=_||ie&&oe.viewable;(T||L&&oe.printable)&&G.push(oe.data),oe.hasTextContent&&T&&(ce||(ce=new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:this.pageIndex,idFactory:this._localIdFactory,fontCache:this.fontCache,builtInCMapCache:this.builtInCMapCache,standardFontDataCache:this.standardFontDataCache,globalImageCache:this.globalImageCache,systemFontCache:this.systemFontCache,options:this.evaluatorOptions})),W.push(oe.extractTextContent(ce,u,[-1/0,-1/0,1/0,1/0]).catch(function(Q){(0,i.warn)(`getAnnotationsData - ignoring textContent during "${u.name}" task: "${Q}".`)})))}return yield Promise.all(W),G})}get annotations(){const c=this._getInheritableProperty("Annots");return(0,i.shadow)(this,"annotations",Array.isArray(c)?c:[])}get _parsedAnnotations(){const c=this.pdfManager.ensure(this,"annotations").then(u=>rt(this,null,function*(){if(u.length===0)return u;const q=yield this.pdfManager.ensureDoc("annotationGlobals");if(!q)return[];const J=[];for(const ce of u)J.push(w.AnnotationFactory.create(this.xref,ce,q,this._localIdFactory,!1,this.ref).catch(function(_){return(0,i.warn)(`_parsedAnnotations: "${_}".`),null}));const G=[];let W;for(const ce of yield Promise.all(J))if(ce){if(ce instanceof w.PopupAnnotation){(W||(W=[])).push(ce);continue}G.push(ce)}return W&&G.push(...W),G}));return(0,i.shadow)(this,"_parsedAnnotations",c)}get jsActions(){const c=(0,P.collectActions)(this.xref,this.pageDict,i.PageActionEventType);return(0,i.shadow)(this,"jsActions",c)}}g=new WeakSet,na=function(c,u,q){for(const J of c)if(J.id){const G=e.Ref.fromString(J.id);if(!G){(0,i.warn)(`A non-linked annotation cannot be modified: ${J.id}`);continue}if(J.deleted){u.put(G);continue}q==null||q.put(G),J.ref=G,delete J.id}},D.Page=l;const x=new Uint8Array([37,80,68,70,45]),H=new Uint8Array([115,116,97,114,116,120,114,101,102]),s=new Uint8Array([101,110,100,111,98,106]),h=1024,F="\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";function N(p,c,u=1024,q=!1){const J=c.length,G=p.peekBytes(u),W=G.length-J;if(W<=0)return!1;if(q){const ce=J-1;let _=G.length-1;for(;_>=ce;){let ie=0;for(;ie<J&&G[_-ie]===c[ce-ie];)ie++;if(ie>=J)return p.pos+=_-ce,!0;_--}}else{let ce=0;for(;ce<=W;){let _=0;for(;_<J&&G[ce+_]===c[_];)_++;if(_>=J)return p.pos+=ce,!0;ce++}}return!1}class U{constructor(c,u){De(this,m);if(u.length<=0)throw new i.InvalidPDFException("The PDF file is empty, i.e. its size is zero bytes.");this.pdfManager=c,this.stream=u,this.xref=new M.XRef(u,c),this._pagePromises=new Map,this._version=null;const q={font:0};this._globalIdFactory=class{static getDocId(){return`g_${c.docId}`}static createFontId(){return`f${++q.font}`}static createObjId(){(0,i.unreachable)("Abstract method `createObjId` called.")}static getPageObjId(){(0,i.unreachable)("Abstract method `getPageObjId` called.")}}}parse(c){this.xref.parse(c),this.catalog=new j.Catalog(this.pdfManager,this.xref)}get linearization(){let c=null;try{c=d.Linearization.create(this.stream)}catch(u){if(u instanceof P.MissingDataException)throw u;(0,i.info)(u)}return(0,i.shadow)(this,"linearization",c)}get startXRef(){const c=this.stream;let u=0;if(this.linearization)c.reset(),N(c,s)&&(u=c.pos+6-c.start);else{const J=H.length;let G=!1,W=c.end;for(;!G&&W>0;)W-=1024-J,W<0&&(W=0),c.pos=W,G=N(c,H,1024,!0);if(G){c.skip(9);let ce;do ce=c.getByte();while((0,P.isWhiteSpace)(ce));let _="";for(;ce>=32&&ce<=57;)_+=String.fromCharCode(ce),ce=c.getByte();u=parseInt(_,10),isNaN(u)&&(u=0)}}return(0,i.shadow)(this,"startXRef",u)}checkHeader(){const c=this.stream;if(c.reset(),!N(c,x))return;c.moveStart(),c.skip(x.length);let u="",q;for(;(q=c.getByte())>32&&u.length<7;)u+=String.fromCharCode(q);P.PDF_VERSION_REGEXP.test(u)?this._version=u:(0,i.warn)(`Invalid PDF header version: ${u}`)}parseStartXRef(){this.xref.setStartXRef(this.startXRef)}get numPages(){let c=0;return this.catalog.hasActualNumPages?c=this.catalog.numPages:this.xfaFactory?c=this.xfaFactory.getNumPages():this.linearization?c=this.linearization.numPages:c=this.catalog.numPages,(0,i.shadow)(this,"numPages",c)}_hasOnlyDocumentSignatures(c,u=0){return Array.isArray(c)?c.every(J=>{if(J=this.xref.fetchIfRef(J),!(J instanceof e.Dict))return!1;if(J.has("Kids"))return++u>10?((0,i.warn)("_hasOnlyDocumentSignatures: maximum recursion depth reached"),!1):this._hasOnlyDocumentSignatures(J.get("Kids"),u);const G=(0,e.isName)(J.get("FT"),"Sig"),W=J.get("Rect"),ce=Array.isArray(W)&&W.every(_=>_===0);return G&&ce}):!1}get _xfaStreams(){const c=this.catalog.acroForm;if(!c)return null;const u=c.get("XFA"),q={"xdp:xdp":"",template:"",datasets:"",config:"",connectionSet:"",localeSet:"",stylesheet:"","/xdp:xdp":""};if(u instanceof o.BaseStream&&!u.isEmpty)return q["xdp:xdp"]=u,q;if(!Array.isArray(u)||u.length===0)return null;for(let J=0,G=u.length;J<G;J+=2){let W;if(J===0?W="xdp:xdp":J===G-2?W="/xdp:xdp":W=u[J],!q.hasOwnProperty(W))continue;const ce=this.xref.fetchIfRef(u[J+1]);!(ce instanceof o.BaseStream)||ce.isEmpty||(q[W]=ce)}return q}get xfaDatasets(){const c=this._xfaStreams;if(!c)return(0,i.shadow)(this,"xfaDatasets",null);for(const u of["datasets","xdp:xdp"]){const q=c[u];if(q)try{const J=(0,i.stringToUTF8String)(q.getString()),G={[u]:J};return(0,i.shadow)(this,"xfaDatasets",new O.DatasetReader(G))}catch(J){(0,i.warn)("XFA - Invalid utf-8 string.");break}}return(0,i.shadow)(this,"xfaDatasets",null)}get xfaData(){const c=this._xfaStreams;if(!c)return null;const u=Object.create(null);for(const[q,J]of Object.entries(c))if(J)try{u[q]=(0,i.stringToUTF8String)(J.getString())}catch(G){return(0,i.warn)("XFA - Invalid utf-8 string."),null}return u}get xfaFactory(){let c;return this.pdfManager.enableXfa&&this.catalog.needsRendering&&this.formInfo.hasXfa&&!this.formInfo.hasAcroForm&&(c=this.xfaData),(0,i.shadow)(this,"xfaFactory",c?new E.XFAFactory(c):null)}get isPureXfa(){return this.xfaFactory?this.xfaFactory.isValid():!1}get htmlForXfa(){return this.xfaFactory?this.xfaFactory.getPages():null}loadXfaImages(){return rt(this,null,function*(){const c=yield this.pdfManager.ensureCatalog("xfaImages");if(!c)return;const u=c.getKeys();yield new n.ObjectLoader(c,u,this.xref).load();const J=new Map;for(const G of u){const W=c.get(G);W instanceof o.BaseStream&&J.set(G,W.getBytes())}this.xfaFactory.setImages(J)})}loadXfaFonts(c,u){return rt(this,null,function*(){const q=yield this.pdfManager.ensureCatalog("acroForm");if(!q)return;const J=yield q.getAsync("DR");if(!(J instanceof e.Dict))return;yield new n.ObjectLoader(J,["Font"],this.xref).load();const W=J.get("Font");if(!(W instanceof e.Dict))return;const ce=Object.assign(Object.create(null),this.pdfManager.evaluatorOptions);ce.useSystemFonts=!1;const _=new k.PartialEvaluator({xref:this.xref,handler:c,pageIndex:-1,idFactory:this._globalIdFactory,fontCache:this.catalog.fontCache,builtInCMapCache:this.catalog.builtInCMapCache,standardFontDataCache:this.catalog.standardFontDataCache,options:ce}),ie=new I.OperatorList,L=[],oe={get font(){return L.at(-1)},set font(Z){L.push(Z)},clone(){return this}},T=new Map;W.forEach((Z,te)=>{T.set(Z,te)});const Q=[];for(const[Z,te]of T){const ne=te.get("FontDescriptor");if(!(ne instanceof e.Dict))continue;let X=ne.get("FontFamily");X=X.replaceAll(/[ ]+(\d)/g,"$1");const re=ne.get("FontWeight"),ae=-ne.get("ItalicAngle"),z={fontFamily:X,fontWeight:re,italicAngle:ae};(0,P.validateCSSFont)(z)&&Q.push(_.handleSetFont(J,[e.Name.get(Z),1],null,ie,u,oe,null,z).catch(function(le){return(0,i.warn)(`loadXfaFonts: "${le}".`),null}))}yield Promise.all(Q);const v=this.xfaFactory.setFonts(L);if(!v)return;ce.ignoreErrors=!0,Q.length=0,L.length=0;const $=new Set;for(const Z of v)(0,t.getXfaFontName)(`${Z}-Regular`)||$.add(Z);$.size&&v.push("PdfJS-Fallback");for(const Z of v)if(!$.has(Z))for(const te of[{name:"Regular",fontWeight:400,italicAngle:0},{name:"Bold",fontWeight:700,italicAngle:0},{name:"Italic",fontWeight:400,italicAngle:12},{name:"BoldItalic",fontWeight:700,italicAngle:12}]){const ne=`${Z}-${te.name}`,X=(0,t.getXfaFontDict)(ne);Q.push(_.handleSetFont(J,[e.Name.get(ne),1],null,ie,u,oe,X,{fontFamily:Z,fontWeight:te.fontWeight,italicAngle:te.italicAngle}).catch(function(re){return(0,i.warn)(`loadXfaFonts: "${re}".`),null}))}yield Promise.all(Q),this.xfaFactory.appendFonts(L,$)})}serializeXfaData(c){return rt(this,null,function*(){return this.xfaFactory?this.xfaFactory.serializeData(c):null})}get version(){return this.catalog.version||this._version}get formInfo(){const c={hasFields:!1,hasAcroForm:!1,hasXfa:!1,hasSignatures:!1},u=this.catalog.acroForm;if(!u)return(0,i.shadow)(this,"formInfo",c);try{const q=u.get("Fields"),J=Array.isArray(q)&&q.length>0;c.hasFields=J;const G=u.get("XFA");c.hasXfa=Array.isArray(G)&&G.length>0||G instanceof o.BaseStream&&!G.isEmpty;const ce=!!(u.get("SigFlags")&1),_=ce&&this._hasOnlyDocumentSignatures(q);c.hasAcroForm=J&&!_,c.hasSignatures=ce}catch(q){if(q instanceof P.MissingDataException)throw q;(0,i.warn)(`Cannot fetch form information: "${q}".`)}return(0,i.shadow)(this,"formInfo",c)}get documentInfo(){const c={PDFFormatVersion:this.version,Language:this.catalog.lang,EncryptFilterName:this.xref.encrypt?this.xref.encrypt.filterName:null,IsLinearized:!!this.linearization,IsAcroFormPresent:this.formInfo.hasAcroForm,IsXFAPresent:this.formInfo.hasXfa,IsCollectionPresent:!!this.catalog.collection,IsSignaturesPresent:this.formInfo.hasSignatures};let u;try{u=this.xref.trailer.get("Info")}catch(q){if(q instanceof P.MissingDataException)throw q;(0,i.info)("The document information dictionary is invalid.")}if(!(u instanceof e.Dict))return(0,i.shadow)(this,"documentInfo",c);for(const q of u.getKeys()){const J=u.get(q);switch(q){case"Title":case"Author":case"Subject":case"Keywords":case"Creator":case"Producer":case"CreationDate":case"ModDate":if(typeof J=="string"){c[q]=(0,i.stringToPDFString)(J);continue}break;case"Trapped":if(J instanceof e.Name){c[q]=J;continue}break;default:let G;switch(typeof J){case"string":G=(0,i.stringToPDFString)(J);break;case"number":case"boolean":G=J;break;default:J instanceof e.Name&&(G=J);break}if(G===void 0){(0,i.warn)(`Bad value, for custom key "${q}", in Info: ${J}.`);continue}c.Custom||(c.Custom=Object.create(null)),c.Custom[q]=G;continue}(0,i.warn)(`Bad value, for key "${q}", in Info: ${J}.`)}return(0,i.shadow)(this,"documentInfo",c)}get fingerprints(){function c(W){return typeof W=="string"&&W.length>0&&W!==F}function u(W){const ce=[];for(const _ of W){const ie=_.toString(16);ce.push(ie.padStart(2,"0"))}return ce.join("")}const q=this.xref.trailer.get("ID");let J,G;return Array.isArray(q)&&c(q[0])?(J=(0,i.stringToBytes)(q[0]),q[1]!==q[0]&&c(q[1])&&(G=(0,i.stringToBytes)(q[1]))):J=(0,K.calculateMD5)(this.stream.getByteRange(0,h),0,h),(0,i.shadow)(this,"fingerprints",[u(J),G?u(G):null])}_getLinearizationPage(c){return rt(this,null,function*(){const{catalog:u,linearization:q,xref:J}=this,G=e.Ref.get(q.objectNumberFirst,0);try{const W=yield J.fetchAsync(G);if(W instanceof e.Dict){let ce=W.getRaw("Type");if(ce instanceof e.Ref&&(ce=yield J.fetchAsync(ce)),(0,e.isName)(ce,"Page")||!W.has("Type")&&!W.has("Kids"))return u.pageKidsCountCache.has(G)||u.pageKidsCountCache.put(G,1),u.pageIndexCache.has(G)||u.pageIndexCache.put(G,0),[W,G]}throw new i.FormatError("The Linearization dictionary doesn't point to a valid Page dictionary.")}catch(W){return(0,i.warn)(`_getLinearizationPage: "${W.message}".`),u.getPageDict(c)}})}getPage(c){const u=this._pagePromises.get(c);if(u)return u;const{catalog:q,linearization:J,xfaFactory:G}=this;let W;return G?W=Promise.resolve([e.Dict.empty,null]):(J==null?void 0:J.pageFirst)===c?W=this._getLinearizationPage(c):W=q.getPageDict(c),W=W.then(([ce,_])=>new l({pdfManager:this.pdfManager,xref:this.xref,pageIndex:c,pageDict:ce,ref:_,globalIdFactory:this._globalIdFactory,fontCache:q.fontCache,builtInCMapCache:q.builtInCMapCache,standardFontDataCache:q.standardFontDataCache,globalImageCache:q.globalImageCache,systemFontCache:q.systemFontCache,nonBlendModesSet:q.nonBlendModesSet,xfaFactory:G})),this._pagePromises.set(c,W),W}checkFirstPage(c=!1){return rt(this,null,function*(){if(!c)try{yield this.getPage(0)}catch(u){if(u instanceof P.XRefEntryException)throw this._pagePromises.delete(0),yield this.cleanup(),new P.XRefParseException}})}checkLastPage(c=!1){return rt(this,null,function*(){const{catalog:u,pdfManager:q}=this;u.setActualNumPages();let J;try{if(yield Promise.all([q.ensureDoc("xfaFactory"),q.ensureDoc("linearization"),q.ensureCatalog("numPages")]),this.xfaFactory)return;if(this.linearization?J=this.linearization.numPages:J=u.numPages,Number.isInteger(J)){if(J<=1)return}else throw new i.FormatError("Page count is not an integer.");yield this.getPage(J-1)}catch(G){if(this._pagePromises.delete(J-1),yield this.cleanup(),G instanceof P.XRefEntryException&&!c)throw new P.XRefParseException;(0,i.warn)(`checkLastPage - invalid /Pages tree /Count: ${J}.`);let W;try{W=yield u.getAllPageDicts(c)}catch(ce){if(ce instanceof P.XRefEntryException&&!c)throw new P.XRefParseException;u.setActualNumPages(1);return}for(const[ce,[_,ie]]of W){let L;_ instanceof Error?(L=Promise.reject(_),L.catch(()=>{})):L=Promise.resolve(new l({pdfManager:q,xref:this.xref,pageIndex:ce,pageDict:_,ref:ie,globalIdFactory:this._globalIdFactory,fontCache:u.fontCache,builtInCMapCache:u.builtInCMapCache,standardFontDataCache:u.standardFontDataCache,globalImageCache:u.globalImageCache,systemFontCache:u.systemFontCache,nonBlendModesSet:u.nonBlendModesSet,xfaFactory:null})),this._pagePromises.set(ce,L)}u.setActualNumPages(W.size)}})}fontFallback(c,u){return this.catalog.fontFallback(c,u)}cleanup(c=!1){return rt(this,null,function*(){return this.catalog?this.catalog.cleanup(c):(0,C.clearGlobalCaches)()})}get fieldObjects(){if(!this.formInfo.hasFields)return(0,i.shadow)(this,"fieldObjects",Promise.resolve(null));const c=this.pdfManager.ensureDoc("annotationGlobals").then(u=>rt(this,null,function*(){if(!u)return null;const q=Object.create(null),J=new Map;for(const W of this.catalog.acroForm.get("Fields"))Re(this,m,aa).call(this,"",W,J,u);const G=[];for(const[W,ce]of J)G.push(Promise.all(ce).then(_=>{_=_.filter(ie=>!!ie),_.length>0&&(q[W]=_)}));return yield Promise.all(G),q}));return(0,i.shadow)(this,"fieldObjects",c)}get hasJSActions(){const c=this.pdfManager.ensureDoc("_parseHasJSActions");return(0,i.shadow)(this,"hasJSActions",c)}_parseHasJSActions(){return rt(this,null,function*(){const[c,u]=yield Promise.all([this.pdfManager.ensureCatalog("jsActions"),this.pdfManager.ensureDoc("fieldObjects")]);return c?!0:u?Object.values(u).some(q=>q.some(J=>J.actions!==null)):!1})}get calculationOrderIds(){const c=this.catalog.acroForm;if(!(c!=null&&c.has("CO")))return(0,i.shadow)(this,"calculationOrderIds",null);const u=c.get("CO");if(!Array.isArray(u)||u.length===0)return(0,i.shadow)(this,"calculationOrderIds",null);const q=[];for(const J of u)J instanceof e.Ref&&q.push(J.toString());return q.length===0?(0,i.shadow)(this,"calculationOrderIds",null):(0,i.shadow)(this,"calculationOrderIds",q)}get annotationGlobals(){return(0,i.shadow)(this,"annotationGlobals",w.AnnotationFactory.createGlobals(this.pdfManager))}}m=new WeakSet,aa=function(c,u,q,J){const G=this.xref.fetchIfRef(u);if(G.has("T")){const W=(0,i.stringToPDFString)(G.get("T"));c=c===""?W:`${c}.${W}`}if(q.has(c)||q.set(c,[]),q.get(c).push(w.AnnotationFactory.create(this.xref,u,J,this._localIdFactory,!0,null).then(W=>W==null?void 0:W.getFieldObject()).catch(function(W){return(0,i.warn)(`#collectFieldObjects: "${W}".`),null})),G.has("Kids"))for(const W of G.get("Kids"))Re(this,m,aa).call(this,c,W,q,J)},D.PDFDocument=U},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PopupAnnotation=D.MarkupAnnotation=D.AnnotationFactory=D.AnnotationBorderStyle=D.Annotation=void 0,D.getQuadPoints=E;var i=se(2),w=se(3),P=se(11),e=se(4),t=se(8),o=se(5),K=se(60),j=se(66),C=se(12),O=se(69),d=se(26),A=se(76),n=se(64),I=se(73),k=se(77);class y{static createGlobals(T){return Promise.all([T.ensureCatalog("acroForm"),T.ensureDoc("xfaDatasets"),T.ensureCatalog("structTreeRoot"),T.ensureCatalog("baseUrl"),T.ensureCatalog("attachments")]).then(([Q,v,$,Z,te])=>({pdfManager:T,acroForm:Q instanceof e.Dict?Q:e.Dict.empty,xfaDatasets:v,structTreeRoot:$,baseUrl:Z,attachments:te}),Q=>((0,i.warn)(`createGlobals: "${Q}".`),null))}static create(T,Q,v,$,Z,te){return rt(this,null,function*(){const ne=Z?yield this._getPageIndex(T,Q,v.pdfManager):null;return v.pdfManager.ensure(this,"_create",[T,Q,v,$,Z,ne,te])})}static _create(T,Q,v,$,Z=!1,te=null,ne=null){const X=T.fetchIfRef(Q);if(!(X instanceof e.Dict))return;const{acroForm:re,pdfManager:ae}=v,z=Q instanceof e.Ref?Q.toString():`annot_${$.createObjId()}`;let le=X.get("Subtype");le=le instanceof e.Name?le.name:null;const ue={xref:T,ref:Q,dict:X,subtype:le,id:z,annotationGlobals:v,collectFields:Z,needAppearances:!Z&&re.get("NeedAppearances")===!0,pageIndex:te,evaluatorOptions:ae.evaluatorOptions,pageRef:ne};switch(le){case"Link":return new U(ue);case"Text":return new N(ue);case"Widget":let ge=(0,w.getInheritableProperty)({dict:X,key:"FT"});switch(ge=ge instanceof e.Name?ge.name:null,ge){case"Tx":return new H(ue);case"Btn":return new s(ue);case"Ch":return new h(ue);case"Sig":return new F(ue)}return(0,i.warn)(`Unimplemented widget field type "${ge}", falling back to base field type.`),new x(ue);case"Popup":return new g(ue);case"FreeText":return new S(ue);case"Line":return new m(ue);case"Square":return new r(ue);case"Circle":return new p(ue);case"PolyLine":return new c(ue);case"Polygon":return new u(ue);case"Caret":return new q(ue);case"Ink":return new J(ue);case"Highlight":return new G(ue);case"Underline":return new W(ue);case"Squiggly":return new ce(ue);case"StrikeOut":return new _(ue);case"Stamp":return new ie(ue);case"FileAttachment":return new L(ue);default:return Z||(le?(0,i.warn)(`Unimplemented annotation type "${le}", falling back to base annotation.`):(0,i.warn)("Annotation is missing the required /Subtype.")),new b(ue)}}static _getPageIndex(T,Q,v){return rt(this,null,function*(){try{const $=yield T.fetchIfRefAsync(Q);if(!($ instanceof e.Dict))return-1;const Z=$.getRaw("P");if(Z instanceof e.Ref)try{return yield v.ensureCatalog("getPageIndex",[Z])}catch(ne){(0,i.info)(`_getPageIndex -- not a valid page reference: "${ne}".`)}if($.has("Kids"))return-1;const te=yield v.ensureDoc("numPages");for(let ne=0;ne<te;ne++){const X=yield v.getPage(ne),re=yield v.ensure(X,"annotations");for(const ae of re)if(ae instanceof e.Ref&&(0,e.isRefsEqual)(ae,Q))return ne}}catch($){(0,i.warn)(`_getPageIndex: "${$}".`)}return-1})}static generateImages(T,Q,v){if(!v)return(0,i.warn)("generateImages: OffscreenCanvas is not supported, cannot save or print some annotations with images."),null;let $;for(const{bitmapId:Z,bitmap:te}of T)te&&($||($=new Map),$.set(Z,ie.createImage(te,Q)));return $}static saveNewAnnotations(T,Q,v,$){return rt(this,null,function*(){const Z=T.xref;let te;const ne=[],X=[],{isOffscreenCanvasSupported:re}=T.options;for(const ae of v)if(!ae.deleted)switch(ae.annotationType){case i.AnnotationEditorType.FREETEXT:if(!te){const le=new e.Dict(Z);le.set("BaseFont",e.Name.get("Helvetica")),le.set("Type",e.Name.get("Font")),le.set("Subtype",e.Name.get("Type1")),le.set("Encoding",e.Name.get("WinAnsiEncoding"));const ue=[];te=Z.getNewTemporaryRef(),yield(0,I.writeObject)(te,le,ue,Z),ne.push({ref:te,data:ue.join("")})}X.push(S.createNewAnnotation(Z,ae,ne,{evaluator:T,task:Q,baseFontRef:te}));break;case i.AnnotationEditorType.INK:X.push(J.createNewAnnotation(Z,ae,ne));break;case i.AnnotationEditorType.STAMP:if(!re)break;const z=yield $.get(ae.bitmapId);if(z.imageStream){const{imageStream:le,smaskStream:ue}=z,ge=[];if(ue){const me=Z.getNewTemporaryRef();yield(0,I.writeObject)(me,ue,ge,Z),ne.push({ref:me,data:ge.join("")}),le.dict.set("SMask",me),ge.length=0}const ke=z.imageRef=Z.getNewTemporaryRef();yield(0,I.writeObject)(ke,le,ge,Z),ne.push({ref:ke,data:ge.join("")}),z.imageStream=z.smaskStream=null}X.push(ie.createNewAnnotation(Z,ae,ne,{image:z}));break}return{annotations:yield Promise.all(X),dependencies:ne}})}static printNewAnnotations(T,Q,v,$,Z){return rt(this,null,function*(){if(!$)return null;const{options:te,xref:ne}=Q,X=[];for(const re of $)if(!re.deleted)switch(re.annotationType){case i.AnnotationEditorType.FREETEXT:X.push(S.createNewPrintAnnotation(T,ne,re,{evaluator:Q,task:v,evaluatorOptions:te}));break;case i.AnnotationEditorType.INK:X.push(J.createNewPrintAnnotation(T,ne,re,{evaluatorOptions:te}));break;case i.AnnotationEditorType.STAMP:if(!te.isOffscreenCanvasSupported)break;const ae=yield Z.get(re.bitmapId);if(ae.imageStream){const{imageStream:z,smaskStream:le}=ae;le&&z.dict.set("SMask",le),ae.imageRef=new d.JpegStream(z,z.length),ae.imageStream=ae.smaskStream=null}X.push(ie.createNewPrintAnnotation(T,ne,re,{image:ae,evaluatorOptions:te}));break}return Promise.all(X)})}}D.AnnotationFactory=y;function f(oe,T=new Uint8ClampedArray(3)){if(!Array.isArray(oe))return T;const Q=T||new Uint8ClampedArray(3);switch(oe.length){case 0:return null;case 1:return C.ColorSpace.singletons.gray.getRgbItem(oe,0,Q,0),Q;case 3:return C.ColorSpace.singletons.rgb.getRgbItem(oe,0,Q,0),Q;case 4:return C.ColorSpace.singletons.cmyk.getRgbItem(oe,0,Q,0),Q;default:return T}}function R(oe){return Array.from(oe,T=>T/255)}function E(oe,T){const Q=oe.getArray("QuadPoints");if(!Array.isArray(Q)||Q.length===0||Q.length%8>0)return null;const v=[];for(let $=0,Z=Q.length/8;$<Z;$++){let te=1/0,ne=-1/0,X=1/0,re=-1/0;for(let ae=$*8,z=$*8+8;ae<z;ae+=2){const le=Q[ae],ue=Q[ae+1];te=Math.min(le,te),ne=Math.max(le,ne),X=Math.min(ue,X),re=Math.max(ue,re)}if(T!==null&&(te<T[0]||ne>T[2]||X<T[1]||re>T[3]))return null;v.push([{x:te,y:re},{x:ne,y:re},{x:te,y:X},{x:ne,y:X}])}return v}function M(oe,T,Q){const[v,$,Z,te]=i.Util.getAxialAlignedBoundingBox(T,Q);if(v===Z||$===te)return[1,0,0,1,oe[0],oe[1]];const ne=(oe[2]-oe[0])/(Z-v),X=(oe[3]-oe[1])/(te-$);return[ne,0,0,X,oe[0]-v*ne,oe[1]-$*X]}class b{constructor(T){const{dict:Q,xref:v,annotationGlobals:$}=T;this.setTitle(Q.get("T")),this.setContents(Q.get("Contents")),this.setModificationDate(Q.get("M")),this.setFlags(Q.get("F")),this.setRectangle(Q.getArray("Rect")),this.setColor(Q.getArray("C")),this.setBorderStyle(Q),this.setAppearance(Q),this.setOptionalContent(Q);const Z=Q.get("MK");this.setBorderAndBackgroundColors(Z),this.setRotation(Z,Q),this.ref=T.ref instanceof e.Ref?T.ref:null,this._streams=[],this.appearance&&this._streams.push(this.appearance);const te=!!(this.flags&i.AnnotationFlag.LOCKED),ne=!!(this.flags&i.AnnotationFlag.LOCKEDCONTENTS);if($.structTreeRoot){let X=Q.get("StructParent");X=Number.isInteger(X)&&X>=0?X:-1,$.structTreeRoot.addAnnotationIdToPage(T.pageRef,X)}if(this.data={annotationFlags:this.flags,borderStyle:this.borderStyle,color:this.color,backgroundColor:this.backgroundColor,borderColor:this.borderColor,rotation:this.rotation,contentsObj:this._contents,hasAppearance:!!this.appearance,id:T.id,modificationDate:this.modificationDate,rect:this.rectangle,subtype:T.subtype,hasOwnCanvas:!1,noRotate:!!(this.flags&i.AnnotationFlag.NOROTATE),noHTML:te&&ne},T.collectFields){const X=Q.get("Kids");if(Array.isArray(X)){const re=[];for(const ae of X)ae instanceof e.Ref&&re.push(ae.toString());re.length!==0&&(this.data.kidIds=re)}this.data.actions=(0,w.collectActions)(v,Q,i.AnnotationActionEventType),this.data.fieldName=this._constructFieldName(Q),this.data.pageIndex=T.pageIndex}this._isOffscreenCanvasSupported=T.evaluatorOptions.isOffscreenCanvasSupported,this._fallbackFontDict=null,this._needAppearances=!1}_hasFlag(T,Q){return!!(T&Q)}_isViewable(T){return!this._hasFlag(T,i.AnnotationFlag.INVISIBLE)&&!this._hasFlag(T,i.AnnotationFlag.NOVIEW)}_isPrintable(T){return this._hasFlag(T,i.AnnotationFlag.PRINT)&&!this._hasFlag(T,i.AnnotationFlag.HIDDEN)&&!this._hasFlag(T,i.AnnotationFlag.INVISIBLE)}mustBeViewed(T,Q){var $;const v=($=T==null?void 0:T.get(this.data.id))==null?void 0:$.noView;return v!==void 0?!v:this.viewable&&!this._hasFlag(this.flags,i.AnnotationFlag.HIDDEN)}mustBePrinted(T){var v;const Q=(v=T==null?void 0:T.get(this.data.id))==null?void 0:v.noPrint;return Q!==void 0?!Q:this.printable}get viewable(){return this.data.quadPoints===null?!1:this.flags===0?!0:this._isViewable(this.flags)}get printable(){return this.data.quadPoints===null||this.flags===0?!1:this._isPrintable(this.flags)}_parseStringHelper(T){const Q=typeof T=="string"?(0,i.stringToPDFString)(T):"",v=Q&&(0,K.bidi)(Q).dir==="rtl"?"rtl":"ltr";return{str:Q,dir:v}}setDefaultAppearance(T){const{dict:Q,annotationGlobals:v}=T,$=(0,w.getInheritableProperty)({dict:Q,key:"DA"})||v.acroForm.get("DA");this._defaultAppearance=typeof $=="string"?$:"",this.data.defaultAppearanceData=(0,P.parseDefaultAppearance)(this._defaultAppearance)}setTitle(T){this._title=this._parseStringHelper(T)}setContents(T){this._contents=this._parseStringHelper(T)}setModificationDate(T){this.modificationDate=typeof T=="string"?T:null}setFlags(T){this.flags=Number.isInteger(T)&&T>0?T:0}hasFlag(T){return this._hasFlag(this.flags,T)}setRectangle(T){this.rectangle=Array.isArray(T)&&T.length===4?i.Util.normalizeRect(T):[0,0,0,0]}setColor(T){this.color=f(T)}setLineEndings(T){if(this.lineEndings=["None","None"],Array.isArray(T)&&T.length===2)for(let Q=0;Q<2;Q++){const v=T[Q];if(v instanceof e.Name)switch(v.name){case"None":continue;case"Square":case"Circle":case"Diamond":case"OpenArrow":case"ClosedArrow":case"Butt":case"ROpenArrow":case"RClosedArrow":case"Slash":this.lineEndings[Q]=v.name;continue}(0,i.warn)(`Ignoring invalid lineEnding: ${v}`)}}setRotation(T,Q){this.rotation=0;let v=T instanceof e.Dict?T.get("R")||0:Q.get("Rotate")||0;Number.isInteger(v)&&v!==0&&(v%=360,v<0&&(v+=360),v%90===0&&(this.rotation=v))}setBorderAndBackgroundColors(T){T instanceof e.Dict?(this.borderColor=f(T.getArray("BC"),null),this.backgroundColor=f(T.getArray("BG"),null)):this.borderColor=this.backgroundColor=null}setBorderStyle(T){if(this.borderStyle=new V,T instanceof e.Dict)if(T.has("BS")){const Q=T.get("BS"),v=Q.get("Type");(!v||(0,e.isName)(v,"Border"))&&(this.borderStyle.setWidth(Q.get("W"),this.rectangle),this.borderStyle.setStyle(Q.get("S")),this.borderStyle.setDashArray(Q.getArray("D")))}else if(T.has("Border")){const Q=T.getArray("Border");Array.isArray(Q)&&Q.length>=3&&(this.borderStyle.setHorizontalCornerRadius(Q[0]),this.borderStyle.setVerticalCornerRadius(Q[1]),this.borderStyle.setWidth(Q[2],this.rectangle),Q.length===4&&this.borderStyle.setDashArray(Q[3],!0))}else this.borderStyle.setWidth(0)}setAppearance(T){this.appearance=null;const Q=T.get("AP");if(!(Q instanceof e.Dict))return;const v=Q.get("N");if(v instanceof o.BaseStream){this.appearance=v;return}if(!(v instanceof e.Dict))return;const $=T.get("AS");if(!($ instanceof e.Name)||!v.has($.name))return;const Z=v.get($.name);Z instanceof o.BaseStream&&(this.appearance=Z)}setOptionalContent(T){this.oc=null;const Q=T.get("OC");Q instanceof e.Name?(0,i.warn)("setOptionalContent: Support for /Name-entry is not implemented."):Q instanceof e.Dict&&(this.oc=Q)}loadResources(T,Q){return Q.dict.getAsync("Resources").then(v=>v?new A.ObjectLoader(v,T,v.xref).load().then(function(){return v}):void 0)}getOperatorList(T,Q,v,$,Z){return rt(this,null,function*(){const te=this.data;let ne=this.appearance;const X=!!(this.data.hasOwnCanvas&&v&i.RenderingIntentFlag.DISPLAY);if(!ne){if(!X)return{opList:new n.OperatorList,separateForm:!1,separateCanvas:!1};ne=new t.StringStream(""),ne.dict=new e.Dict}const re=ne.dict,ae=yield this.loadResources(["ExtGState","ColorSpace","Pattern","Shading","XObject","Font"],ne),z=re.getArray("BBox")||[0,0,1,1],le=re.getArray("Matrix")||[1,0,0,1,0,0],ue=M(te.rect,z,le),ge=new n.OperatorList;let ke;return this.oc&&(ke=yield T.parseMarkedContentProps(this.oc,null)),ke!==void 0&&ge.addOp(i.OPS.beginMarkedContentProps,["OC",ke]),ge.addOp(i.OPS.beginAnnotation,[te.id,te.rect,ue,le,X]),yield T.getOperatorList({stream:ne,task:Q,resources:ae,operatorList:ge,fallbackFontDict:this._fallbackFontDict}),ge.addOp(i.OPS.endAnnotation,[]),ke!==void 0&&ge.addOp(i.OPS.endMarkedContent,[]),this.reset(),{opList:ge,separateForm:!1,separateCanvas:X}})}save(T,Q,v){return rt(this,null,function*(){return null})}get hasTextContent(){return!1}extractTextContent(T,Q,v){return rt(this,null,function*(){if(!this.appearance)return;const $=yield this.loadResources(["ExtGState","Font","Properties","XObject"],this.appearance),Z=[],te=[];let ne=null;const X={desiredSize:Math.Infinity,ready:!0,enqueue(re,ae){for(const z of re.items)z.str!==void 0&&(ne||(ne=z.transform.slice(-2)),te.push(z.str),z.hasEOL&&(Z.push(te.join("")),te.length=0))}};if(yield T.getTextContent({stream:this.appearance,task:Q,resources:$,includeMarkedContent:!0,sink:X,viewBox:v}),this.reset(),te.length&&Z.push(te.join("")),Z.length>1||Z[0]){const re=this.appearance.dict,ae=re.getArray("BBox")||[0,0,1,1],z=re.getArray("Matrix")||[1,0,0,1,0,0],le=this.data.rect,ue=M(le,ae,z);ue[4]-=le[0],ue[5]-=le[1],ne=i.Util.applyTransform(ne,ue),ne=i.Util.applyTransform(ne,z),this.data.textPosition=ne,this.data.textContent=Z}})}getFieldObject(){return this.data.kidIds?{id:this.data.id,actions:this.data.actions,name:this.data.fieldName,strokeColor:this.data.borderColor,fillColor:this.data.backgroundColor,type:"",kidIds:this.data.kidIds,page:this.data.pageIndex,rotation:this.rotation}:null}reset(){for(const T of this._streams)T.reset()}_constructFieldName(T){if(!T.has("T")&&!T.has("Parent"))return(0,i.warn)("Unknown field name, falling back to empty field name."),"";if(!T.has("Parent"))return(0,i.stringToPDFString)(T.get("T"));const Q=[];T.has("T")&&Q.unshift((0,i.stringToPDFString)(T.get("T")));let v=T;const $=new e.RefSet;for(T.objId&&$.put(T.objId);v.has("Parent")&&(v=v.get("Parent"),!(!(v instanceof e.Dict)||v.objId&&$.has(v.objId)));)v.objId&&$.put(v.objId),v.has("T")&&Q.unshift((0,i.stringToPDFString)(v.get("T")));return Q.join(".")}}D.Annotation=b;class V{constructor(){this.width=1,this.style=i.AnnotationBorderStyleType.SOLID,this.dashArray=[3],this.horizontalCornerRadius=0,this.verticalCornerRadius=0}setWidth(T,Q=[0,0,0,0]){if(T instanceof e.Name){this.width=0;return}if(typeof T=="number"){if(T>0){const v=(Q[2]-Q[0])/2,$=(Q[3]-Q[1])/2;v>0&&$>0&&(T>v||T>$)&&((0,i.warn)(`AnnotationBorderStyle.setWidth - ignoring width: ${T}`),T=1)}this.width=T}}setStyle(T){if(T instanceof e.Name)switch(T.name){case"S":this.style=i.AnnotationBorderStyleType.SOLID;break;case"D":this.style=i.AnnotationBorderStyleType.DASHED;break;case"B":this.style=i.AnnotationBorderStyleType.BEVELED;break;case"I":this.style=i.AnnotationBorderStyleType.INSET;break;case"U":this.style=i.AnnotationBorderStyleType.UNDERLINE;break}}setDashArray(T,Q=!1){if(Array.isArray(T)&&T.length>0){let v=!0,$=!0;for(const Z of T)if(+Z>=0)Z>0&&($=!1);else{v=!1;break}v&&!$?(this.dashArray=T,Q&&this.setStyle(e.Name.get("D"))):this.width=0}else T&&(this.width=0)}setHorizontalCornerRadius(T){Number.isInteger(T)&&(this.horizontalCornerRadius=T)}setVerticalCornerRadius(T){Number.isInteger(T)&&(this.verticalCornerRadius=T)}}D.AnnotationBorderStyle=V;class l extends b{constructor(T){super(T);const{dict:Q}=T;if(Q.has("IRT")){const $=Q.getRaw("IRT");this.data.inReplyTo=$ instanceof e.Ref?$.toString():null;const Z=Q.get("RT");this.data.replyType=Z instanceof e.Name?Z.name:i.AnnotationReplyType.REPLY}let v=null;if(this.data.replyType===i.AnnotationReplyType.GROUP){const $=Q.get("IRT");this.setTitle($.get("T")),this.data.titleObj=this._title,this.setContents($.get("Contents")),this.data.contentsObj=this._contents,$.has("CreationDate")?(this.setCreationDate($.get("CreationDate")),this.data.creationDate=this.creationDate):this.data.creationDate=null,$.has("M")?(this.setModificationDate($.get("M")),this.data.modificationDate=this.modificationDate):this.data.modificationDate=null,v=$.getRaw("Popup"),$.has("C")?(this.setColor($.getArray("C")),this.data.color=this.color):this.data.color=null}else this.data.titleObj=this._title,this.setCreationDate(Q.get("CreationDate")),this.data.creationDate=this.creationDate,v=Q.getRaw("Popup"),Q.has("C")||(this.data.color=null);this.data.popupRef=v instanceof e.Ref?v.toString():null,Q.has("RC")&&(this.data.richText=k.XFAFactory.getRichTextAsHtml(Q.get("RC")))}setCreationDate(T){this.creationDate=typeof T=="string"?T:null}_setDefaultAppearance({xref:T,extra:Q,strokeColor:v,fillColor:$,blendMode:Z,strokeAlpha:te,fillAlpha:ne,pointsCallback:X}){let re=Number.MAX_VALUE,ae=Number.MAX_VALUE,z=Number.MIN_VALUE,le=Number.MIN_VALUE;const ue=["q"];Q&&ue.push(Q),v&&ue.push(`${v[0]} ${v[1]} ${v[2]} RG`),$&&ue.push(`${$[0]} ${$[1]} ${$[2]} rg`);let ge=this.data.quadPoints;ge||(ge=[[{x:this.rectangle[0],y:this.rectangle[3]},{x:this.rectangle[2],y:this.rectangle[3]},{x:this.rectangle[0],y:this.rectangle[1]},{x:this.rectangle[2],y:this.rectangle[1]}]]);for(const Ce of ge){const[Ae,Se,He,Ve]=X(ue,Ce);re=Math.min(re,Ae),z=Math.max(z,Se),ae=Math.min(ae,He),le=Math.max(le,Ve)}ue.push("Q");const ke=new e.Dict(T),me=new e.Dict(T);me.set("Subtype",e.Name.get("Form"));const fe=new t.StringStream(ue.join(" "));fe.dict=me,ke.set("Fm0",fe);const xe=new e.Dict(T);Z&&xe.set("BM",e.Name.get(Z)),typeof te=="number"&&xe.set("CA",te),typeof ne=="number"&&xe.set("ca",ne);const pe=new e.Dict(T);pe.set("GS0",xe);const we=new e.Dict(T);we.set("ExtGState",pe),we.set("XObject",ke);const Oe=new e.Dict(T);Oe.set("Resources",we);const Te=this.data.rect=[re,ae,z,le];Oe.set("BBox",Te),this.appearance=new t.StringStream("/GS0 gs /Fm0 Do"),this.appearance.dict=Oe,this._streams.push(this.appearance,fe)}static createNewAnnotation(T,Q,v,$){return rt(this,null,function*(){const Z=Q.ref||(Q.ref=T.getNewTemporaryRef()),te=yield this.createNewAppearanceStream(Q,T,$),ne=[];let X;if(te){const re=T.getNewTemporaryRef();X=this.createNewDict(Q,T,{apRef:re}),yield(0,I.writeObject)(re,te,ne,T),v.push({ref:re,data:ne.join("")})}else X=this.createNewDict(Q,T,{});return Number.isInteger(Q.parentTreeId)&&X.set("StructParent",Q.parentTreeId),ne.length=0,yield(0,I.writeObject)(Z,X,ne,T),{ref:Z,data:ne.join("")}})}static createNewPrintAnnotation(T,Q,v,$){return rt(this,null,function*(){const Z=yield this.createNewAppearanceStream(v,Q,$),te=this.createNewDict(v,Q,{ap:Z}),ne=new this.prototype.constructor({dict:te,xref:Q,annotationGlobals:T,evaluatorOptions:$.evaluatorOptions});return v.ref&&(ne.ref=ne.refToReplace=v.ref),ne})}}D.MarkupAnnotation=l;class x extends b{constructor(T){var le;super(T);const{dict:Q,xref:v,annotationGlobals:$}=T,Z=this.data;this._needAppearances=T.needAppearances,Z.annotationType=i.AnnotationType.WIDGET,Z.fieldName===void 0&&(Z.fieldName=this._constructFieldName(Q)),Z.actions===void 0&&(Z.actions=(0,w.collectActions)(v,Q,i.AnnotationActionEventType));let te=(0,w.getInheritableProperty)({dict:Q,key:"V",getArray:!0});Z.fieldValue=this._decodeFormValue(te);const ne=(0,w.getInheritableProperty)({dict:Q,key:"DV",getArray:!0});if(Z.defaultFieldValue=this._decodeFormValue(ne),te===void 0&&$.xfaDatasets){const ue=this._title.str;ue&&(this._hasValueFromXFA=!0,Z.fieldValue=te=$.xfaDatasets.getValue(ue))}te===void 0&&Z.defaultFieldValue!==null&&(Z.fieldValue=Z.defaultFieldValue),Z.alternativeText=(0,i.stringToPDFString)(Q.get("TU")||""),this.setDefaultAppearance(T),Z.hasAppearance||(Z.hasAppearance=this._needAppearances&&Z.fieldValue!==void 0&&Z.fieldValue!==null);const X=(0,w.getInheritableProperty)({dict:Q,key:"FT"});Z.fieldType=X instanceof e.Name?X.name:null;const re=(0,w.getInheritableProperty)({dict:Q,key:"DR"}),ae=$.acroForm.get("DR"),z=(le=this.appearance)==null?void 0:le.dict.get("Resources");this._fieldResources={localResources:re,acroFormResources:ae,appearanceResources:z,mergedResources:e.Dict.merge({xref:v,dictArray:[re,z,ae],mergeSubDicts:!0})},Z.fieldFlags=(0,w.getInheritableProperty)({dict:Q,key:"Ff"}),(!Number.isInteger(Z.fieldFlags)||Z.fieldFlags<0)&&(Z.fieldFlags=0),Z.readOnly=this.hasFieldFlag(i.AnnotationFieldFlag.READONLY),Z.required=this.hasFieldFlag(i.AnnotationFieldFlag.REQUIRED),Z.hidden=this._hasFlag(Z.annotationFlags,i.AnnotationFlag.HIDDEN)||this._hasFlag(Z.annotationFlags,i.AnnotationFlag.NOVIEW)}_decodeFormValue(T){return Array.isArray(T)?T.filter(Q=>typeof Q=="string").map(Q=>(0,i.stringToPDFString)(Q)):T instanceof e.Name?(0,i.stringToPDFString)(T.name):typeof T=="string"?(0,i.stringToPDFString)(T):null}hasFieldFlag(T){return!!(this.data.fieldFlags&T)}_isViewable(T){return!this._hasFlag(T,i.AnnotationFlag.INVISIBLE)}mustBeViewed(T,Q){return Q?this.viewable:super.mustBeViewed(T,Q)&&!this._hasFlag(this.flags,i.AnnotationFlag.NOVIEW)}getRotationMatrix(T){var Z;let Q=(Z=T==null?void 0:T.get(this.data.id))==null?void 0:Z.rotation;if(Q===void 0&&(Q=this.rotation),Q===0)return i.IDENTITY_MATRIX;const v=this.data.rect[2]-this.data.rect[0],$=this.data.rect[3]-this.data.rect[1];return(0,w.getRotationMatrix)(Q,v,$)}getBorderAndBackgroundAppearances(T){var ne;let Q=(ne=T==null?void 0:T.get(this.data.id))==null?void 0:ne.rotation;if(Q===void 0&&(Q=this.rotation),!this.backgroundColor&&!this.borderColor)return"";const v=this.data.rect[2]-this.data.rect[0],$=this.data.rect[3]-this.data.rect[1],Z=Q===0||Q===180?`0 0 ${v} ${$} re`:`0 0 ${$} ${v} re`;let te="";if(this.backgroundColor&&(te=`${(0,P.getPdfColor)(this.backgroundColor,!0)} ${Z} f `),this.borderColor){const X=this.borderStyle.width||1;te+=`${X} w ${(0,P.getPdfColor)(this.borderColor,!1)} ${Z} S `}return te}getOperatorList(T,Q,v,$,Z){return rt(this,null,function*(){if($&&!(this instanceof F)&&!this.data.noHTML&&!this.data.hasOwnCanvas)return{opList:new n.OperatorList,separateForm:!0,separateCanvas:!1};if(!this._hasText)return ci(x.prototype,this,"getOperatorList").call(this,T,Q,v,$,Z);const te=yield this._getAppearance(T,Q,v,Z);if(this.appearance&&te===null)return ci(x.prototype,this,"getOperatorList").call(this,T,Q,v,$,Z);const ne=new n.OperatorList;if(!this._defaultAppearance||te===null)return{opList:ne,separateForm:!1,separateCanvas:!1};const X=!!(this.data.hasOwnCanvas&&v&i.RenderingIntentFlag.DISPLAY),re=[1,0,0,1,0,0],ae=[0,0,this.data.rect[2]-this.data.rect[0],this.data.rect[3]-this.data.rect[1]],z=M(this.data.rect,ae,re);let le;this.oc&&(le=yield T.parseMarkedContentProps(this.oc,null)),le!==void 0&&ne.addOp(i.OPS.beginMarkedContentProps,["OC",le]),ne.addOp(i.OPS.beginAnnotation,[this.data.id,this.data.rect,z,this.getRotationMatrix(Z),X]);const ue=new t.StringStream(te);return yield T.getOperatorList({stream:ue,task:Q,resources:this._fieldResources.mergedResources,operatorList:ne}),ne.addOp(i.OPS.endAnnotation,[]),le!==void 0&&ne.addOp(i.OPS.endMarkedContent,[]),{opList:ne,separateForm:!1,separateCanvas:X}})}_getMKDict(T){const Q=new e.Dict(null);return T&&Q.set("R",T),this.borderColor&&Q.set("BC",R(this.borderColor)),this.backgroundColor&&Q.set("BG",R(this.backgroundColor)),Q.size>0?Q:null}amendSavedDict(T,Q){}save(T,Q,v){return rt(this,null,function*(){const $=v==null?void 0:v.get(this.data.id);let Z=$==null?void 0:$.value,te=$==null?void 0:$.rotation;if(Z===this.data.fieldValue||Z===void 0){if(!this._hasValueFromXFA&&te===void 0)return null;Z||(Z=this.data.fieldValue)}if(te===void 0&&!this._hasValueFromXFA&&Array.isArray(Z)&&Array.isArray(this.data.fieldValue)&&Z.length===this.data.fieldValue.length&&Z.every((fe,xe)=>fe===this.data.fieldValue[xe]))return null;te===void 0&&(te=this.rotation);let ne=null;if(!this._needAppearances&&(ne=yield this._getAppearance(T,Q,i.RenderingIntentFlag.SAVE,v),ne===null))return null;let X=!1;ne!=null&&ne.needAppearances&&(X=!0,ne=null);const{xref:re}=T,ae=re.fetchIfRef(this.ref);if(!(ae instanceof e.Dict))return null;const z=new e.Dict(re);for(const fe of ae.getKeys())fe!=="AP"&&z.set(fe,ae.getRaw(fe));const le={path:this.data.fieldName,value:Z},ue=fe=>(0,w.isAscii)(fe)?fe:(0,w.stringToUTF16String)(fe,!0);z.set("V",Array.isArray(Z)?Z.map(ue):ue(Z)),this.amendSavedDict(v,z);const ge=this._getMKDict(te);ge&&z.set("MK",ge);const ke=[],me=[{ref:this.ref,data:"",xfa:le,needAppearances:X}];if(ne!==null){const fe=re.getNewTemporaryRef(),xe=new e.Dict(re);z.set("AP",xe),xe.set("N",fe);const pe=this._getSaveFieldResources(re),we=new t.StringStream(ne),Oe=we.dict=new e.Dict(re);Oe.set("Subtype",e.Name.get("Form")),Oe.set("Resources",pe),Oe.set("BBox",[0,0,this.data.rect[2]-this.data.rect[0],this.data.rect[3]-this.data.rect[1]]);const Te=this.getRotationMatrix(v);Te!==i.IDENTITY_MATRIX&&Oe.set("Matrix",Te),yield(0,I.writeObject)(fe,we,ke,re),me.push({ref:fe,data:ke.join(""),xfa:null,needAppearances:!1}),ke.length=0}return z.set("M",`D:${(0,i.getModificationDate)()}`),yield(0,I.writeObject)(this.ref,z,ke,re),me[0].data=ke.join(""),me})}_getAppearance(T,Q,v,$){return rt(this,null,function*(){if(this.hasFieldFlag(i.AnnotationFieldFlag.PASSWORD))return null;const te=$==null?void 0:$.get(this.data.id);let ne,X;if(te&&(ne=te.formattedValue||te.value,X=te.rotation),X===void 0&&ne===void 0&&!this._needAppearances&&(!this._hasValueFromXFA||this.appearance))return null;const re=this.getBorderAndBackgroundAppearances($);if(ne===void 0&&(ne=this.data.fieldValue,!ne))return`/Tx BMC q ${re}Q EMC`;if(Array.isArray(ne)&&ne.length===1&&(ne=ne[0]),(0,i.assert)(typeof ne=="string","Expected `value` to be a string."),ne=ne.trim(),this.data.combo){const Le=this.data.options.find(({exportValue:Ye})=>ne===Ye);ne=(Le==null?void 0:Le.displayValue)||ne}if(ne==="")return`/Tx BMC q ${re}Q EMC`;X===void 0&&(X=this.rotation);let ae=-1,z;this.data.multiLine?(z=ne.split(/\r\n?|\n/).map(Le=>Le.normalize("NFC")),ae=z.length):z=[ne.replace(/\r\n?|\n/,"").normalize("NFC")];const le=1,ue=2;let ge=this.data.rect[3]-this.data.rect[1],ke=this.data.rect[2]-this.data.rect[0];(X===90||X===270)&&([ke,ge]=[ge,ke]),this._defaultAppearance||(this.data.defaultAppearanceData=(0,P.parseDefaultAppearance)(this._defaultAppearance="/Helvetica 0 Tf 0 g"));let me=yield x._getFontData(T,Q,this.data.defaultAppearanceData,this._fieldResources.mergedResources),fe,xe,pe;const we=[];let Oe=!1;for(const Le of z){const Ye=me.encodeString(Le);Ye.length>1&&(Oe=!0),we.push(Ye.join(""))}if(Oe&&v&i.RenderingIntentFlag.SAVE)return{needAppearances:!0};if(Oe&&this._isOffscreenCanvasSupported){const Le=this.data.comb?"monospace":"sans-serif",Ye=new P.FakeUnicodeFont(T.xref,Le),lt=Ye.createFontResources(z.join("")),Ee=lt.getRaw("Font");if(this._fieldResources.mergedResources.has("Font")){const Ie=this._fieldResources.mergedResources.get("Font");for(const de of Ee.getKeys())Ie.set(de,Ee.getRaw(de))}else this._fieldResources.mergedResources.set("Font",Ee);const ut=Ye.fontName.name;me=yield x._getFontData(T,Q,{fontName:ut,fontSize:0},lt);for(let Ie=0,de=we.length;Ie<de;Ie++)we[Ie]=(0,w.stringToUTF16String)(z[Ie]);const _e=Object.assign(Object.create(null),this.data.defaultAppearanceData);this.data.defaultAppearanceData.fontSize=0,this.data.defaultAppearanceData.fontName=ut,[fe,xe,pe]=this._computeFontSize(ge-2*le,ke-2*ue,ne,me,ae),this.data.defaultAppearanceData=_e}else this._isOffscreenCanvasSupported||(0,i.warn)("_getAppearance: OffscreenCanvas is not supported, annotation may not render correctly."),[fe,xe,pe]=this._computeFontSize(ge-2*le,ke-2*ue,ne,me,ae);let Te=me.descent;isNaN(Te)?Te=i.BASELINE_FACTOR*pe:Te=Math.max(i.BASELINE_FACTOR*pe,Math.abs(Te)*xe);const Ce=Math.min(Math.floor((ge-xe)/2),le),Ae=this.data.textAlignment;if(this.data.multiLine)return this._getMultilineAppearance(fe,we,me,xe,ke,ge,Ae,ue,Ce,Te,pe,$);if(this.data.comb)return this._getCombAppearance(fe,me,we[0],xe,ke,ge,ue,Ce,Te,pe,$);const Se=Ce+Te;if(Ae===0||Ae>2)return`/Tx BMC q ${re}BT `+fe+` 1 0 0 1 ${(0,w.numberToString)(ue)} ${(0,w.numberToString)(Se)} Tm (${(0,w.escapeString)(we[0])}) Tj ET Q EMC`;const He={shift:0},Ve=this._renderText(we[0],me,xe,ke,Ae,He,ue,Se);return`/Tx BMC q ${re}BT `+fe+` 1 0 0 1 0 0 Tm ${Ve} ET Q EMC`})}static _getFontData(T,Q,v,$){return rt(this,null,function*(){const Z=new n.OperatorList,te={font:null,clone(){return this}},{fontName:ne,fontSize:X}=v;return yield T.handleSetFont($,[ne&&e.Name.get(ne),X],null,Z,Q,te,null),te.font})}_getTextWidth(T,Q){return Q.charsToGlyphs(T).reduce((v,$)=>v+$.width,0)/1e3}_computeFontSize(T,Q,v,$,Z){let{fontSize:te}=this.data.defaultAppearanceData,ne=(te||12)*i.LINE_FACTOR,X=Math.round(T/ne);if(!te){const re=le=>Math.floor(le*100)/100;if(Z===-1){const le=this._getTextWidth(v,$);te=re(Math.min(T/i.LINE_FACTOR,le>Q?Q/le:1/0)),X=1}else{const le=v.split(/\r\n?|\n/),ue=[];for(const ke of le){const me=$.encodeString(ke).join(""),fe=$.charsToGlyphs(me),xe=$.getCharPositions(me);ue.push({line:me,glyphs:fe,positions:xe})}const ge=ke=>{let me=0;for(const fe of ue){const xe=this._splitLine(null,$,ke,Q,fe);if(me+=xe.length*ke,me>T)return!0}return!1};for(X=Math.max(X,Z);;){if(ne=T/X,te=re(ne/i.LINE_FACTOR),ge(te)){X++;continue}break}}const{fontName:ae,fontColor:z}=this.data.defaultAppearanceData;this._defaultAppearance=(0,P.createDefaultAppearance)({fontSize:te,fontName:ae,fontColor:z})}return[this._defaultAppearance,te,T/X]}_renderText(T,Q,v,$,Z,te,ne,X){let re;if(Z===1){const z=this._getTextWidth(T,Q)*v;re=($-z)/2}else if(Z===2){const z=this._getTextWidth(T,Q)*v;re=$-z-ne}else re=ne;const ae=(0,w.numberToString)(re-te.shift);return te.shift=re,X=(0,w.numberToString)(X),`${ae} ${X} Td (${(0,w.escapeString)(T)}) Tj`}_getSaveFieldResources(T){var te;const{localResources:Q,appearanceResources:v,acroFormResources:$}=this._fieldResources,Z=(te=this.data.defaultAppearanceData)==null?void 0:te.fontName;if(!Z)return Q||e.Dict.empty;for(const ne of[Q,v])if(ne instanceof e.Dict){const X=ne.get("Font");if(X instanceof e.Dict&&X.has(Z))return ne}if($ instanceof e.Dict){const ne=$.get("Font");if(ne instanceof e.Dict&&ne.has(Z)){const X=new e.Dict(T);X.set(Z,ne.getRaw(Z));const re=new e.Dict(T);return re.set("Font",X),e.Dict.merge({xref:T,dictArray:[re,Q],mergeSubDicts:!0})}}return Q||e.Dict.empty}getFieldObject(){return null}}class H extends x{constructor(T){super(T),this.data.hasOwnCanvas=this.data.readOnly&&!this.data.noHTML,this._hasText=!0;const Q=T.dict;typeof this.data.fieldValue!="string"&&(this.data.fieldValue="");let v=(0,w.getInheritableProperty)({dict:Q,key:"Q"});(!Number.isInteger(v)||v<0||v>2)&&(v=null),this.data.textAlignment=v;let $=(0,w.getInheritableProperty)({dict:Q,key:"MaxLen"});(!Number.isInteger($)||$<0)&&($=0),this.data.maxLen=$,this.data.multiLine=this.hasFieldFlag(i.AnnotationFieldFlag.MULTILINE),this.data.comb=this.hasFieldFlag(i.AnnotationFieldFlag.COMB)&&!this.hasFieldFlag(i.AnnotationFieldFlag.MULTILINE)&&!this.hasFieldFlag(i.AnnotationFieldFlag.PASSWORD)&&!this.hasFieldFlag(i.AnnotationFieldFlag.FILESELECT)&&this.data.maxLen!==0,this.data.doNotScroll=this.hasFieldFlag(i.AnnotationFieldFlag.DONOTSCROLL)}get hasTextContent(){return!!this.appearance&&!this._needAppearances}_getCombAppearance(T,Q,v,$,Z,te,ne,X,re,ae,z){const le=Z/this.data.maxLen,ue=this.getBorderAndBackgroundAppearances(z),ge=[],ke=Q.getCharPositions(v);for(const[fe,xe]of ke)ge.push(`(${(0,w.escapeString)(v.substring(fe,xe))}) Tj`);const me=ge.join(` ${(0,w.numberToString)(le)} 0 Td `);return`/Tx BMC q ${ue}BT `+T+` 1 0 0 1 ${(0,w.numberToString)(ne)} ${(0,w.numberToString)(X+re)} Tm ${me} ET Q EMC`}_getMultilineAppearance(T,Q,v,$,Z,te,ne,X,re,ae,z,le){const ue=[],ge=Z-2*X,ke={shift:0};for(let xe=0,pe=Q.length;xe<pe;xe++){const we=Q[xe],Oe=this._splitLine(we,v,$,ge);for(let Te=0,Ce=Oe.length;Te<Ce;Te++){const Ae=Oe[Te],Se=xe===0&&Te===0?-re-(z-ae):-z;ue.push(this._renderText(Ae,v,$,Z,ne,ke,X,Se))}}const me=this.getBorderAndBackgroundAppearances(le),fe=ue.join(`
`);return`/Tx BMC q ${me}BT `+T+` 1 0 0 1 0 ${(0,w.numberToString)(te)} Tm ${fe} ET Q EMC`}_splitLine(T,Q,v,$,Z={}){T=Z.line||T;const te=Z.glyphs||Q.charsToGlyphs(T);if(te.length<=1)return[T];const ne=Z.positions||Q.getCharPositions(T),X=v/1e3,re=[];let ae=-1,z=-1,le=-1,ue=0,ge=0;for(let ke=0,me=te.length;ke<me;ke++){const[fe,xe]=ne[ke],pe=te[ke],we=pe.width*X;pe.unicode===" "?ge+we>$?(re.push(T.substring(ue,fe)),ue=fe,ge=we,ae=-1,le=-1):(ge+=we,ae=fe,z=xe,le=ke):ge+we>$?ae!==-1?(re.push(T.substring(ue,z)),ue=z,ke=le+1,ae=-1,ge=0):(re.push(T.substring(ue,fe)),ue=fe,ge=we):ge+=we}return ue<T.length&&re.push(T.substring(ue,T.length)),re}getFieldObject(){return{id:this.data.id,value:this.data.fieldValue,defaultValue:this.data.defaultFieldValue||"",multiline:this.data.multiLine,password:this.hasFieldFlag(i.AnnotationFieldFlag.PASSWORD),charLimit:this.data.maxLen,comb:this.data.comb,editable:!this.data.readOnly,hidden:this.data.hidden,name:this.data.fieldName,rect:this.data.rect,actions:this.data.actions,page:this.data.pageIndex,strokeColor:this.data.borderColor,fillColor:this.data.backgroundColor,rotation:this.rotation,type:"text"}}}class s extends x{constructor(T){super(T),this.checkedAppearance=null,this.uncheckedAppearance=null,this.data.checkBox=!this.hasFieldFlag(i.AnnotationFieldFlag.RADIO)&&!this.hasFieldFlag(i.AnnotationFieldFlag.PUSHBUTTON),this.data.radioButton=this.hasFieldFlag(i.AnnotationFieldFlag.RADIO)&&!this.hasFieldFlag(i.AnnotationFieldFlag.PUSHBUTTON),this.data.pushButton=this.hasFieldFlag(i.AnnotationFieldFlag.PUSHBUTTON),this.data.isTooltipOnly=!1,this.data.checkBox?this._processCheckBox(T):this.data.radioButton?this._processRadioButton(T):this.data.pushButton?(this.data.hasOwnCanvas=!0,this._processPushButton(T)):(0,i.warn)("Invalid field flags for button widget annotation")}getOperatorList(T,Q,v,$,Z){return rt(this,null,function*(){if(this.data.pushButton)return ci(s.prototype,this,"getOperatorList").call(this,T,Q,v,!1,Z);let te=null,ne=null;if(Z){const re=Z.get(this.data.id);te=re?re.value:null,ne=re?re.rotation:null}if(te===null&&this.appearance)return ci(s.prototype,this,"getOperatorList").call(this,T,Q,v,$,Z);te==null&&(te=this.data.checkBox?this.data.fieldValue===this.data.exportValue:this.data.fieldValue===this.data.buttonValue);const X=te?this.checkedAppearance:this.uncheckedAppearance;if(X){const re=this.appearance,ae=X.dict.getArray("Matrix")||i.IDENTITY_MATRIX;ne&&X.dict.set("Matrix",this.getRotationMatrix(Z)),this.appearance=X;const z=ci(s.prototype,this,"getOperatorList").call(this,T,Q,v,$,Z);return this.appearance=re,X.dict.set("Matrix",ae),z}return{opList:new n.OperatorList,separateForm:!1,separateCanvas:!1}})}save(T,Q,v){return rt(this,null,function*(){return this.data.checkBox?this._saveCheckbox(T,Q,v):this.data.radioButton?this._saveRadioButton(T,Q,v):null})}_saveCheckbox(T,Q,v){return rt(this,null,function*(){if(!v)return null;const $=v.get(this.data.id);let Z=$==null?void 0:$.rotation,te=$==null?void 0:$.value;if(Z===void 0&&(te===void 0||this.data.fieldValue===this.data.exportValue===te))return null;const ne=T.xref.fetchIfRef(this.ref);if(!(ne instanceof e.Dict))return null;Z===void 0&&(Z=this.rotation),te===void 0&&(te=this.data.fieldValue===this.data.exportValue);const X={path:this.data.fieldName,value:te?this.data.exportValue:""},re=e.Name.get(te?this.data.exportValue:"Off");ne.set("V",re),ne.set("AS",re),ne.set("M",`D:${(0,i.getModificationDate)()}`);const ae=this._getMKDict(Z);ae&&ne.set("MK",ae);const z=[];return yield(0,I.writeObject)(this.ref,ne,z,T.xref),[{ref:this.ref,data:z.join(""),xfa:X}]})}_saveRadioButton(T,Q,v){return rt(this,null,function*(){if(!v)return null;const $=v.get(this.data.id);let Z=$==null?void 0:$.rotation,te=$==null?void 0:$.value;if(Z===void 0&&(te===void 0||this.data.fieldValue===this.data.buttonValue===te))return null;const ne=T.xref.fetchIfRef(this.ref);if(!(ne instanceof e.Dict))return null;te===void 0&&(te=this.data.fieldValue===this.data.buttonValue),Z===void 0&&(Z=this.rotation);const X={path:this.data.fieldName,value:te?this.data.buttonValue:""},re=e.Name.get(te?this.data.buttonValue:"Off"),ae=[];let z=null;if(te)if(this.parent instanceof e.Ref){const ge=T.xref.fetch(this.parent);ge.set("V",re),yield(0,I.writeObject)(this.parent,ge,ae,T.xref),z=ae.join(""),ae.length=0}else this.parent instanceof e.Dict&&this.parent.set("V",re);ne.set("AS",re),ne.set("M",`D:${(0,i.getModificationDate)()}`);const le=this._getMKDict(Z);le&&ne.set("MK",le),yield(0,I.writeObject)(this.ref,ne,ae,T.xref);const ue=[{ref:this.ref,data:ae.join(""),xfa:X}];return z&&ue.push({ref:this.parent,data:z,xfa:null}),ue})}_getDefaultCheckedAppearance(T,Q){const v=this.data.rect[2]-this.data.rect[0],$=this.data.rect[3]-this.data.rect[1],Z=[0,0,v,$],ne=Math.min(v,$)*.8;let X,re;Q==="check"?(X={width:.755*ne,height:.705*ne},re="3"):Q==="disc"?(X={width:.791*ne,height:.705*ne},re="l"):(0,i.unreachable)(`_getDefaultCheckedAppearance - unsupported type: ${Q}`);const ae=(0,w.numberToString)((v-X.width)/2),z=(0,w.numberToString)(($-X.height)/2),le=`q BT /PdfJsZaDb ${ne} Tf 0 g ${ae} ${z} Td (${re}) Tj ET Q`,ue=new e.Dict(T.xref);ue.set("FormType",1),ue.set("Subtype",e.Name.get("Form")),ue.set("Type",e.Name.get("XObject")),ue.set("BBox",Z),ue.set("Matrix",[1,0,0,1,0,0]),ue.set("Length",le.length);const ge=new e.Dict(T.xref),ke=new e.Dict(T.xref);ke.set("PdfJsZaDb",this.fallbackFontDict),ge.set("Font",ke),ue.set("Resources",ge),this.checkedAppearance=new t.StringStream(le),this.checkedAppearance.dict=ue,this._streams.push(this.checkedAppearance)}_processCheckBox(T){const Q=T.dict.get("AP");if(!(Q instanceof e.Dict))return;const v=Q.get("N");if(!(v instanceof e.Dict))return;const $=this._decodeFormValue(T.dict.get("AS"));typeof $=="string"&&(this.data.fieldValue=$);const Z=this.data.fieldValue!==null&&this.data.fieldValue!=="Off"?this.data.fieldValue:"Yes",te=v.getKeys();if(te.length===0)te.push("Off",Z);else if(te.length===1)te[0]==="Off"?te.push(Z):te.unshift("Off");else if(te.includes(Z))te.length=0,te.push("Off",Z);else{const re=te.find(ae=>ae!=="Off");te.length=0,te.push("Off",re)}te.includes(this.data.fieldValue)||(this.data.fieldValue="Off"),this.data.exportValue=te[1];const ne=v.get(this.data.exportValue);this.checkedAppearance=ne instanceof o.BaseStream?ne:null;const X=v.get("Off");this.uncheckedAppearance=X instanceof o.BaseStream?X:null,this.checkedAppearance?this._streams.push(this.checkedAppearance):this._getDefaultCheckedAppearance(T,"check"),this.uncheckedAppearance&&this._streams.push(this.uncheckedAppearance),this._fallbackFontDict=this.fallbackFontDict,this.data.defaultFieldValue===null&&(this.data.defaultFieldValue="Off")}_processRadioButton(T){this.data.fieldValue=this.data.buttonValue=null;const Q=T.dict.get("Parent");if(Q instanceof e.Dict){this.parent=T.dict.getRaw("Parent");const ne=Q.get("V");ne instanceof e.Name&&(this.data.fieldValue=this._decodeFormValue(ne))}const v=T.dict.get("AP");if(!(v instanceof e.Dict))return;const $=v.get("N");if(!($ instanceof e.Dict))return;for(const ne of $.getKeys())if(ne!=="Off"){this.data.buttonValue=this._decodeFormValue(ne);break}const Z=$.get(this.data.buttonValue);this.checkedAppearance=Z instanceof o.BaseStream?Z:null;const te=$.get("Off");this.uncheckedAppearance=te instanceof o.BaseStream?te:null,this.checkedAppearance?this._streams.push(this.checkedAppearance):this._getDefaultCheckedAppearance(T,"disc"),this.uncheckedAppearance&&this._streams.push(this.uncheckedAppearance),this._fallbackFontDict=this.fallbackFontDict,this.data.defaultFieldValue===null&&(this.data.defaultFieldValue="Off")}_processPushButton(T){const{dict:Q,annotationGlobals:v}=T;if(!Q.has("A")&&!Q.has("AA")&&!this.data.alternativeText){(0,i.warn)("Push buttons without action dictionaries are not supported");return}this.data.isTooltipOnly=!Q.has("A")&&!Q.has("AA"),j.Catalog.parseDestDictionary({destDict:Q,resultObj:this.data,docBaseUrl:v.baseUrl,docAttachments:v.attachments})}getFieldObject(){let T="button",Q;return this.data.checkBox?(T="checkbox",Q=this.data.exportValue):this.data.radioButton&&(T="radiobutton",Q=this.data.buttonValue),{id:this.data.id,value:this.data.fieldValue||"Off",defaultValue:this.data.defaultFieldValue,exportValues:Q,editable:!this.data.readOnly,name:this.data.fieldName,rect:this.data.rect,hidden:this.data.hidden,actions:this.data.actions,page:this.data.pageIndex,strokeColor:this.data.borderColor,fillColor:this.data.backgroundColor,rotation:this.rotation,type:T}}get fallbackFontDict(){const T=new e.Dict;return T.set("BaseFont",e.Name.get("ZapfDingbats")),T.set("Type",e.Name.get("FallbackType")),T.set("Subtype",e.Name.get("FallbackType")),T.set("Encoding",e.Name.get("ZapfDingbatsEncoding")),(0,i.shadow)(this,"fallbackFontDict",T)}}class h extends x{constructor(T){super(T);const{dict:Q,xref:v}=T;this.indices=Q.getArray("I"),this.hasIndices=Array.isArray(this.indices)&&this.indices.length>0,this.data.options=[];const $=(0,w.getInheritableProperty)({dict:Q,key:"Opt"});if(Array.isArray($))for(let Z=0,te=$.length;Z<te;Z++){const ne=v.fetchIfRef($[Z]),X=Array.isArray(ne);this.data.options[Z]={exportValue:this._decodeFormValue(X?v.fetchIfRef(ne[0]):ne),displayValue:this._decodeFormValue(X?v.fetchIfRef(ne[1]):ne)}}if(!this.hasIndices)typeof this.data.fieldValue=="string"?this.data.fieldValue=[this.data.fieldValue]:this.data.fieldValue||(this.data.fieldValue=[]);else{this.data.fieldValue=[];const Z=this.data.options.length;for(const te of this.indices)Number.isInteger(te)&&te>=0&&te<Z&&this.data.fieldValue.push(this.data.options[te].exportValue)}this.data.combo=this.hasFieldFlag(i.AnnotationFieldFlag.COMBO),this.data.multiSelect=this.hasFieldFlag(i.AnnotationFieldFlag.MULTISELECT),this._hasText=!0}getFieldObject(){const T=this.data.combo?"combobox":"listbox",Q=this.data.fieldValue.length>0?this.data.fieldValue[0]:null;return{id:this.data.id,value:Q,defaultValue:this.data.defaultFieldValue,editable:!this.data.readOnly,name:this.data.fieldName,rect:this.data.rect,numItems:this.data.fieldValue.length,multipleSelection:this.data.multiSelect,hidden:this.data.hidden,actions:this.data.actions,items:this.data.options,page:this.data.pageIndex,strokeColor:this.data.borderColor,fillColor:this.data.backgroundColor,rotation:this.rotation,type:T}}amendSavedDict(T,Q){var te;if(!this.hasIndices)return;let v=(te=T==null?void 0:T.get(this.data.id))==null?void 0:te.value;Array.isArray(v)||(v=[v]);const $=[],{options:Z}=this.data;for(let ne=0,X=0,re=Z.length;ne<re;ne++)Z[ne].exportValue===v[X]&&($.push(ne),X+=1);Q.set("I",$)}_getAppearance(T,Q,v,$){return rt(this,null,function*(){if(this.data.combo)return ci(h.prototype,this,"_getAppearance").call(this,T,Q,v,$);let Z,te;const ne=$==null?void 0:$.get(this.data.id);if(ne&&(te=ne.rotation,Z=ne.value),te===void 0&&Z===void 0&&!this._needAppearances)return null;Z===void 0?Z=this.data.fieldValue:Array.isArray(Z)||(Z=[Z]);const X=1,re=2;let ae=this.data.rect[3]-this.data.rect[1],z=this.data.rect[2]-this.data.rect[0];(te===90||te===270)&&([z,ae]=[ae,z]);const le=this.data.options.length,ue=[];for(let Ae=0;Ae<le;Ae++){const{exportValue:Se}=this.data.options[Ae];Z.includes(Se)&&ue.push(Ae)}this._defaultAppearance||(this.data.defaultAppearanceData=(0,P.parseDefaultAppearance)(this._defaultAppearance="/Helvetica 0 Tf 0 g"));const ge=yield x._getFontData(T,Q,this.data.defaultAppearanceData,this._fieldResources.mergedResources);let ke,{fontSize:me}=this.data.defaultAppearanceData;if(me)ke=this._defaultAppearance;else{const Ae=(ae-X)/le;let Se=-1,He;for(const{displayValue:Ve}of this.data.options){const Le=this._getTextWidth(Ve,ge);Le>Se&&(Se=Le,He=Ve)}[ke,me]=this._computeFontSize(Ae,z-2*re,He,ge,-1)}const fe=me*i.LINE_FACTOR,xe=(fe-me)/2,pe=Math.floor(ae/fe);let we=0;if(ue.length>0){const Ae=Math.min(...ue),Se=Math.max(...ue);we=Math.max(0,Se-pe+1),we>Ae&&(we=Ae)}const Oe=Math.min(we+pe+1,le),Te=["/Tx BMC q",`1 1 ${z} ${ae} re W n`];if(ue.length){Te.push("0.600006 0.756866 0.854904 rg");for(const Ae of ue)we<=Ae&&Ae<Oe&&Te.push(`1 ${ae-(Ae-we+1)*fe} ${z} ${fe} re f`)}Te.push("BT",ke,`1 0 0 1 0 ${ae} Tm`);const Ce={shift:0};for(let Ae=we;Ae<Oe;Ae++){const{displayValue:Se}=this.data.options[Ae],He=Ae===we?xe:0;Te.push(this._renderText(Se,ge,me,z,0,Ce,re,-fe+He))}return Te.push("ET Q EMC"),Te.join(`
`)})}}class F extends x{constructor(T){super(T),this.data.fieldValue=null,this.data.hasOwnCanvas=this.data.noRotate}getFieldObject(){return{id:this.data.id,value:null,page:this.data.pageIndex,type:"signature"}}}class N extends l{constructor(T){super(T),this.data.noRotate=!0,this.data.hasOwnCanvas=this.data.noRotate;const{dict:v}=T;this.data.annotationType=i.AnnotationType.TEXT,this.data.hasAppearance?this.data.name="NoIcon":(this.data.rect[1]=this.data.rect[3]-22,this.data.rect[2]=this.data.rect[0]+22,this.data.name=v.has("Name")?v.get("Name").name:"Note"),v.has("State")?(this.data.state=v.get("State")||null,this.data.stateModel=v.get("StateModel")||null):(this.data.state=null,this.data.stateModel=null)}}class U extends b{constructor(T){var Z;super(T);const{dict:Q,annotationGlobals:v}=T;this.data.annotationType=i.AnnotationType.LINK;const $=E(Q,this.rectangle);$&&(this.data.quadPoints=$),(Z=this.data).borderColor||(Z.borderColor=this.data.color),j.Catalog.parseDestDictionary({destDict:Q,resultObj:this.data,docBaseUrl:v.baseUrl,docAttachments:v.attachments})}}class g extends b{constructor(T){super(T);const{dict:Q}=T;this.data.annotationType=i.AnnotationType.POPUP,(this.data.rect[0]===this.data.rect[2]||this.data.rect[1]===this.data.rect[3])&&(this.data.rect=null);let v=Q.get("Parent");if(!v){(0,i.warn)("Popup annotation has a missing or invalid parent annotation.");return}const $=v.getArray("Rect");this.data.parentRect=Array.isArray($)&&$.length===4?i.Util.normalizeRect($):null;const Z=v.get("RT");if((0,e.isName)(Z,i.AnnotationReplyType.GROUP)&&(v=v.get("IRT")),v.has("M")?(this.setModificationDate(v.get("M")),this.data.modificationDate=this.modificationDate):this.data.modificationDate=null,v.has("C")?(this.setColor(v.getArray("C")),this.data.color=this.color):this.data.color=null,!this.viewable){const te=v.get("F");this._isViewable(te)&&this.setFlags(te)}this.setTitle(v.get("T")),this.data.titleObj=this._title,this.setContents(v.get("Contents")),this.data.contentsObj=this._contents,v.has("RC")&&(this.data.richText=k.XFAFactory.getRichTextAsHtml(v.get("RC"))),this.data.open=!!Q.get("Open")}}D.PopupAnnotation=g;class S extends l{constructor(T){var $;super(T),this.data.hasOwnCanvas=!0;const{evaluatorOptions:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.FREETEXT,this.setDefaultAppearance(T),this.appearance){const{fontColor:Z,fontSize:te}=(0,P.parseAppearanceStream)(this.appearance,Q,v);this.data.defaultAppearanceData.fontColor=Z,this.data.defaultAppearanceData.fontSize=te||10}else if(this._isOffscreenCanvasSupported){const Z=T.dict.get("CA"),te=new P.FakeUnicodeFont(v,"sans-serif");($=this.data.defaultAppearanceData).fontSize||($.fontSize=10);const{fontColor:ne,fontSize:X}=this.data.defaultAppearanceData;this.appearance=te.createAppearance(this._contents.str,this.rectangle,this.rotation,X,ne,Z),this._streams.push(this.appearance,P.FakeUnicodeFont.toUnicodeStream)}else(0,i.warn)("FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.")}get hasTextContent(){return!!this.appearance}static createNewDict(T,Q,{apRef:v,ap:$}){const{color:Z,fontSize:te,rect:ne,rotation:X,user:re,value:ae}=T,z=new e.Dict(Q);z.set("Type",e.Name.get("Annot")),z.set("Subtype",e.Name.get("FreeText")),z.set("CreationDate",`D:${(0,i.getModificationDate)()}`),z.set("Rect",ne);const le=`/Helv ${te} Tf ${(0,P.getPdfColor)(Z,!0)}`;if(z.set("DA",le),z.set("Contents",(0,w.isAscii)(ae)?ae:(0,w.stringToUTF16String)(ae,!0)),z.set("F",4),z.set("Border",[0,0,0]),z.set("Rotate",X),re&&z.set("T",(0,w.isAscii)(re)?re:(0,w.stringToUTF16String)(re,!0)),v||$){const ue=new e.Dict(Q);z.set("AP",ue),v?ue.set("N",v):ue.set("N",$)}return z}static createNewAppearanceStream(T,Q,v){return rt(this,null,function*(){const{baseFontRef:$,evaluator:Z,task:te}=v,{color:ne,fontSize:X,rect:re,rotation:ae,value:z}=T,le=new e.Dict(Q),ue=new e.Dict(Q);if($)ue.set("Helv",$);else{const Je=new e.Dict(Q);Je.set("BaseFont",e.Name.get("Helvetica")),Je.set("Type",e.Name.get("Font")),Je.set("Subtype",e.Name.get("Type1")),Je.set("Encoding",e.Name.get("WinAnsiEncoding")),ue.set("Helv",Je)}le.set("Font",ue);const ge=yield x._getFontData(Z,te,{fontName:"Helv",fontSize:X},le),[ke,me,fe,xe]=re;let pe=fe-ke,we=xe-me;ae%180!==0&&([pe,we]=[we,pe]);const Oe=z.split(`
`),Te=X/1e3;let Ce=-1/0;const Ae=[];for(let Je of Oe){const $e=ge.encodeString(Je);if($e.length>1)return null;Je=$e.join(""),Ae.push(Je);let ve=0;const We=ge.charsToGlyphs(Je);for(const tt of We)ve+=tt.width*Te;Ce=Math.max(Ce,ve)}let Se=1;Ce>pe&&(Se=pe/Ce);let He=1;const Ve=i.LINE_FACTOR*X,Le=(i.LINE_FACTOR-i.LINE_DESCENT_FACTOR)*X,Ye=Ve*Oe.length;Ye>we&&(He=we/Ye);const lt=Math.min(Se,He),Ee=X*lt;let ut,_e,Ie;switch(ae){case 0:Ie=[1,0,0,1],_e=[re[0],re[1],pe,we],ut=[re[0],re[3]-Le];break;case 90:Ie=[0,1,-1,0],_e=[re[1],-re[2],pe,we],ut=[re[1],-re[0]-Le];break;case 180:Ie=[-1,0,0,-1],_e=[-re[2],-re[3],pe,we],ut=[-re[2],-re[1]-Le];break;case 270:Ie=[0,-1,1,0],_e=[-re[3],re[0],pe,we],ut=[-re[3],re[2]-Le];break}const de=["q",`${Ie.join(" ")} 0 0 cm`,`${_e.join(" ")} re W n`,"BT",`${(0,P.getPdfColor)(ne,!0)}`,`0 Tc /Helv ${(0,w.numberToString)(Ee)} Tf`];de.push(`${ut.join(" ")} Td (${(0,w.escapeString)(Ae[0])}) Tj`);const be=(0,w.numberToString)(Ve);for(let Je=1,$e=Ae.length;Je<$e;Je++){const ve=Ae[Je];de.push(`0 -${be} Td (${(0,w.escapeString)(ve)}) Tj`)}de.push("ET","Q");const Be=de.join(`
`),Pe=new e.Dict(Q);Pe.set("FormType",1),Pe.set("Subtype",e.Name.get("Form")),Pe.set("Type",e.Name.get("XObject")),Pe.set("BBox",re),Pe.set("Resources",le),Pe.set("Matrix",[1,0,0,1,-re[0],-re[1]]);const je=new t.StringStream(Be);return je.dict=Pe,je})}}class m extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;this.data.annotationType=i.AnnotationType.LINE,this.data.hasOwnCanvas=this.data.noRotate;const $=Q.getArray("L");if(this.data.lineCoordinates=i.Util.normalizeRect($),this.setLineEndings(Q.getArray("LE")),this.data.lineEndings=this.lineEndings,!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA"),ne=f(Q.getArray("IC"),null),X=ne?R(ne):null,re=X?te:null,ae=this.borderStyle.width||1,z=2*ae,le=[this.data.lineCoordinates[0]-z,this.data.lineCoordinates[1]-z,this.data.lineCoordinates[2]+z,this.data.lineCoordinates[3]+z];i.Util.intersect(this.rectangle,le)||(this.rectangle=le),this._setDefaultAppearance({xref:v,extra:`${ae} w`,strokeColor:Z,fillColor:X,strokeAlpha:te,fillAlpha:re,pointsCallback:(ue,ge)=>(ue.push(`${$[0]} ${$[1]} m`,`${$[2]} ${$[3]} l`,"S"),[ge[0].x-ae,ge[1].x+ae,ge[3].y-ae,ge[1].y+ae])})}}}class r extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.SQUARE,this.data.hasOwnCanvas=this.data.noRotate,!this.appearance){const $=this.color?R(this.color):[0,0,0],Z=Q.get("CA"),te=f(Q.getArray("IC"),null),ne=te?R(te):null,X=ne?Z:null;if(this.borderStyle.width===0&&!ne)return;this._setDefaultAppearance({xref:v,extra:`${this.borderStyle.width} w`,strokeColor:$,fillColor:ne,strokeAlpha:Z,fillAlpha:X,pointsCallback:(re,ae)=>{const z=ae[2].x+this.borderStyle.width/2,le=ae[2].y+this.borderStyle.width/2,ue=ae[3].x-ae[2].x-this.borderStyle.width,ge=ae[1].y-ae[3].y-this.borderStyle.width;return re.push(`${z} ${le} ${ue} ${ge} re`),ne?re.push("B"):re.push("S"),[ae[0].x,ae[1].x,ae[3].y,ae[1].y]}})}}}class p extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.CIRCLE,!this.appearance){const $=this.color?R(this.color):[0,0,0],Z=Q.get("CA"),te=f(Q.getArray("IC"),null),ne=te?R(te):null,X=ne?Z:null;if(this.borderStyle.width===0&&!ne)return;const re=4/3*Math.tan(Math.PI/(2*4));this._setDefaultAppearance({xref:v,extra:`${this.borderStyle.width} w`,strokeColor:$,fillColor:ne,strokeAlpha:Z,fillAlpha:X,pointsCallback:(ae,z)=>{const le=z[0].x+this.borderStyle.width/2,ue=z[0].y-this.borderStyle.width/2,ge=z[3].x-this.borderStyle.width/2,ke=z[3].y+this.borderStyle.width/2,me=le+(ge-le)/2,fe=ue+(ke-ue)/2,xe=(ge-le)/2*re,pe=(ke-ue)/2*re;return ae.push(`${me} ${ke} m`,`${me+xe} ${ke} ${ge} ${fe+pe} ${ge} ${fe} c`,`${ge} ${fe-pe} ${me+xe} ${ue} ${me} ${ue} c`,`${me-xe} ${ue} ${le} ${fe-pe} ${le} ${fe} c`,`${le} ${fe+pe} ${me-xe} ${ke} ${me} ${ke} c`,"h"),ne?ae.push("B"):ae.push("S"),[z[0].x,z[1].x,z[3].y,z[1].y]}})}}}class c extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;this.data.annotationType=i.AnnotationType.POLYLINE,this.data.hasOwnCanvas=this.data.noRotate,this.data.vertices=[],this instanceof u||(this.setLineEndings(Q.getArray("LE")),this.data.lineEndings=this.lineEndings);const $=Q.getArray("Vertices");if(Array.isArray($)){for(let Z=0,te=$.length;Z<te;Z+=2)this.data.vertices.push({x:$[Z],y:$[Z+1]});if(!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA"),ne=this.borderStyle.width||1,X=2*ne,re=[1/0,1/0,-1/0,-1/0];for(const ae of this.data.vertices)re[0]=Math.min(re[0],ae.x-X),re[1]=Math.min(re[1],ae.y-X),re[2]=Math.max(re[2],ae.x+X),re[3]=Math.max(re[3],ae.y+X);i.Util.intersect(this.rectangle,re)||(this.rectangle=re),this._setDefaultAppearance({xref:v,extra:`${ne} w`,strokeColor:Z,strokeAlpha:te,pointsCallback:(ae,z)=>{const le=this.data.vertices;for(let ue=0,ge=le.length;ue<ge;ue++)ae.push(`${le[ue].x} ${le[ue].y} ${ue===0?"m":"l"}`);return ae.push("S"),[z[0].x,z[1].x,z[3].y,z[1].y]}})}}}}class u extends c{constructor(T){super(T),this.data.annotationType=i.AnnotationType.POLYGON}}class q extends l{constructor(T){super(T),this.data.annotationType=i.AnnotationType.CARET}}class J extends l{constructor(T){super(T),this.data.hasOwnCanvas=this.data.noRotate;const{dict:Q,xref:v}=T;this.data.annotationType=i.AnnotationType.INK,this.data.inkLists=[];const $=Q.getArray("InkList");if(Array.isArray($)){for(let Z=0,te=$.length;Z<te;++Z){this.data.inkLists.push([]);for(let ne=0,X=$[Z].length;ne<X;ne+=2)this.data.inkLists[Z].push({x:v.fetchIfRef($[Z][ne]),y:v.fetchIfRef($[Z][ne+1])})}if(!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA"),ne=this.borderStyle.width||1,X=2*ne,re=[1/0,1/0,-1/0,-1/0];for(const ae of this.data.inkLists)for(const z of ae)re[0]=Math.min(re[0],z.x-X),re[1]=Math.min(re[1],z.y-X),re[2]=Math.max(re[2],z.x+X),re[3]=Math.max(re[3],z.y+X);i.Util.intersect(this.rectangle,re)||(this.rectangle=re),this._setDefaultAppearance({xref:v,extra:`${ne} w`,strokeColor:Z,strokeAlpha:te,pointsCallback:(ae,z)=>{for(const le of this.data.inkLists){for(let ue=0,ge=le.length;ue<ge;ue++)ae.push(`${le[ue].x} ${le[ue].y} ${ue===0?"m":"l"}`);ae.push("S")}return[z[0].x,z[1].x,z[3].y,z[1].y]}})}}}static createNewDict(T,Q,{apRef:v,ap:$}){const{color:Z,opacity:te,paths:ne,rect:X,rotation:re,thickness:ae}=T,z=new e.Dict(Q);z.set("Type",e.Name.get("Annot")),z.set("Subtype",e.Name.get("Ink")),z.set("CreationDate",`D:${(0,i.getModificationDate)()}`),z.set("Rect",X),z.set("InkList",ne.map(ge=>ge.points)),z.set("F",4),z.set("Rotate",re);const le=new e.Dict(Q);z.set("BS",le),le.set("W",ae),z.set("C",Array.from(Z,ge=>ge/255)),z.set("CA",te);const ue=new e.Dict(Q);return z.set("AP",ue),v?ue.set("N",v):ue.set("N",$),z}static createNewAppearanceStream(T,Q,v){return rt(this,null,function*(){const{color:$,rect:Z,paths:te,thickness:ne,opacity:X}=T,re=[`${ne} w 1 J 1 j`,`${(0,P.getPdfColor)($,!1)}`];X!==1&&re.push("/R0 gs");const ae=[];for(const{bezier:ge}of te){ae.length=0,ae.push(`${(0,w.numberToString)(ge[0])} ${(0,w.numberToString)(ge[1])} m`);for(let ke=2,me=ge.length;ke<me;ke+=6){const fe=ge.slice(ke,ke+6).map(w.numberToString).join(" ");ae.push(`${fe} c`)}ae.push("S"),re.push(ae.join(`
`))}const z=re.join(`
`),le=new e.Dict(Q);if(le.set("FormType",1),le.set("Subtype",e.Name.get("Form")),le.set("Type",e.Name.get("XObject")),le.set("BBox",Z),le.set("Length",z.length),X!==1){const ge=new e.Dict(Q),ke=new e.Dict(Q),me=new e.Dict(Q);me.set("CA",X),me.set("Type",e.Name.get("ExtGState")),ke.set("R0",me),ge.set("ExtGState",ke),le.set("Resources",ge)}const ue=new t.StringStream(z);return ue.dict=le,ue})}}class G extends l{constructor(T){var Z;super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.HIGHLIGHT,this.data.quadPoints=E(Q,null)){const te=(Z=this.appearance)==null?void 0:Z.dict.get("Resources");if(!this.appearance||!(te!=null&&te.has("ExtGState"))){this.appearance&&(0,i.warn)("HighlightAnnotation - ignoring built-in appearance stream.");const ne=this.color?R(this.color):[1,1,0],X=Q.get("CA");this._setDefaultAppearance({xref:v,fillColor:ne,blendMode:"Multiply",fillAlpha:X,pointsCallback:(re,ae)=>(re.push(`${ae[0].x} ${ae[0].y} m`,`${ae[1].x} ${ae[1].y} l`,`${ae[3].x} ${ae[3].y} l`,`${ae[2].x} ${ae[2].y} l`,"f"),[ae[0].x,ae[1].x,ae[3].y,ae[1].y])})}}else this.data.popupRef=null}}class W extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.UNDERLINE,this.data.quadPoints=E(Q,null)){if(!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA");this._setDefaultAppearance({xref:v,extra:"[] 0 d 0.571 w",strokeColor:Z,strokeAlpha:te,pointsCallback:(ne,X)=>(ne.push(`${X[2].x} ${X[2].y+1.3} m`,`${X[3].x} ${X[3].y+1.3} l`,"S"),[X[0].x,X[1].x,X[3].y,X[1].y])})}}else this.data.popupRef=null}}class ce extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.SQUIGGLY,this.data.quadPoints=E(Q,null)){if(!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA");this._setDefaultAppearance({xref:v,extra:"[] 0 d 1 w",strokeColor:Z,strokeAlpha:te,pointsCallback:(ne,X)=>{const re=(X[0].y-X[2].y)/6;let ae=re,z=X[2].x;const le=X[2].y,ue=X[3].x;ne.push(`${z} ${le+ae} m`);do z+=2,ae=ae===0?re:0,ne.push(`${z} ${le+ae} l`);while(z<ue);return ne.push("S"),[X[2].x,ue,le-2*re,le+2*re]}})}}else this.data.popupRef=null}}class _ extends l{constructor(T){super(T);const{dict:Q,xref:v}=T;if(this.data.annotationType=i.AnnotationType.STRIKEOUT,this.data.quadPoints=E(Q,null)){if(!this.appearance){const Z=this.color?R(this.color):[0,0,0],te=Q.get("CA");this._setDefaultAppearance({xref:v,extra:"[] 0 d 1 w",strokeColor:Z,strokeAlpha:te,pointsCallback:(ne,X)=>(ne.push(`${(X[0].x+X[2].x)/2} ${(X[0].y+X[2].y)/2} m`,`${(X[1].x+X[3].x)/2} ${(X[1].y+X[3].y)/2} l`,"S"),[X[0].x,X[1].x,X[3].y,X[1].y])})}}else this.data.popupRef=null}}class ie extends l{constructor(T){super(T),this.data.annotationType=i.AnnotationType.STAMP,this.data.hasOwnCanvas=this.data.noRotate}static createImage(T,Q){return rt(this,null,function*(){const{width:v,height:$}=T,Z=new OffscreenCanvas(v,$),te=Z.getContext("2d",{alpha:!0});te.drawImage(T,0,0);const ne=te.getImageData(0,0,v,$).data,X=new Uint32Array(ne.buffer),re=X.some(i.FeatureTest.isLittleEndian?me=>me>>>24!==255:me=>(me&255)!==255);re&&(te.fillStyle="white",te.fillRect(0,0,v,$),te.drawImage(T,0,0));const ae=Z.convertToBlob({type:"image/jpeg",quality:1}).then(me=>me.arrayBuffer()),z=e.Name.get("XObject"),le=e.Name.get("Image"),ue=new e.Dict(Q);ue.set("Type",z),ue.set("Subtype",le),ue.set("BitsPerComponent",8),ue.set("ColorSpace",e.Name.get("DeviceRGB")),ue.set("Filter",e.Name.get("DCTDecode")),ue.set("BBox",[0,0,v,$]),ue.set("Width",v),ue.set("Height",$);let ge=null;if(re){const me=new Uint8Array(X.length);if(i.FeatureTest.isLittleEndian)for(let xe=0,pe=X.length;xe<pe;xe++)me[xe]=X[xe]>>>24;else for(let xe=0,pe=X.length;xe<pe;xe++)me[xe]=X[xe]&255;const fe=new e.Dict(Q);fe.set("Type",z),fe.set("Subtype",le),fe.set("BitsPerComponent",8),fe.set("ColorSpace",e.Name.get("DeviceGray")),fe.set("Width",v),fe.set("Height",$),ge=new t.Stream(me,0,0,fe)}return{imageStream:new t.Stream(yield ae,0,0,ue),smaskStream:ge,width:v,height:$}})}static createNewDict(T,Q,{apRef:v,ap:$}){const{rect:Z,rotation:te,user:ne}=T,X=new e.Dict(Q);if(X.set("Type",e.Name.get("Annot")),X.set("Subtype",e.Name.get("Stamp")),X.set("CreationDate",`D:${(0,i.getModificationDate)()}`),X.set("Rect",Z),X.set("F",4),X.set("Border",[0,0,0]),X.set("Rotate",te),ne&&X.set("T",(0,w.isAscii)(ne)?ne:(0,w.stringToUTF16String)(ne,!0)),v||$){const re=new e.Dict(Q);X.set("AP",re),v?re.set("N",v):re.set("N",$)}return X}static createNewAppearanceStream(T,Q,v){return rt(this,null,function*(){const{rotation:$}=T,{imageRef:Z,width:te,height:ne}=v.image,X=new e.Dict(Q),re=new e.Dict(Q);X.set("XObject",re),re.set("Im0",Z);const ae=`q ${te} 0 0 ${ne} 0 0 cm /Im0 Do Q`,z=new e.Dict(Q);if(z.set("FormType",1),z.set("Subtype",e.Name.get("Form")),z.set("Type",e.Name.get("XObject")),z.set("BBox",[0,0,te,ne]),z.set("Resources",X),$){const ue=(0,w.getRotationMatrix)($,te,ne);z.set("Matrix",ue)}const le=new t.StringStream(ae);return le.dict=z,le})}}class L extends l{constructor(T){super(T);const{dict:Q,xref:v}=T,$=new O.FileSpec(Q.get("FS"),v);this.data.annotationType=i.AnnotationType.FILEATTACHMENT,this.data.hasOwnCanvas=this.data.noRotate,this.data.file=$.serializable;const Z=Q.get("Name");this.data.name=Z instanceof e.Name?(0,i.stringToPDFString)(Z.name):"PushPin";const te=Q.get("ca");this.data.fillAlpha=typeof te=="number"&&te>=0&&te<=1?te:null}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.FakeUnicodeFont=void 0,D.createDefaultAppearance=I,D.getPdfColor=n,D.parseAppearanceStream=A,D.parseDefaultAppearance=O;var i=se(4),w=se(3),P=se(2),e=se(12),t=se(13),o=se(59),K=se(57),j=se(8);class C extends t.EvaluatorPreprocessor{constructor(f){super(new j.StringStream(f))}parse(){const f={fn:0,args:[]},R={fontSize:0,fontName:"",fontColor:new Uint8ClampedArray(3)};try{for(;f.args.length=0,!!this.read(f);){if(this.savedStatesDepth!==0)continue;const{fn:E,args:M}=f;switch(E|0){case P.OPS.setFont:const[b,V]=M;b instanceof i.Name&&(R.fontName=b.name),typeof V=="number"&&V>0&&(R.fontSize=V);break;case P.OPS.setFillRGBColor:e.ColorSpace.singletons.rgb.getRgbItem(M,0,R.fontColor,0);break;case P.OPS.setFillGray:e.ColorSpace.singletons.gray.getRgbItem(M,0,R.fontColor,0);break;case P.OPS.setFillCMYKColor:e.ColorSpace.singletons.cmyk.getRgbItem(M,0,R.fontColor,0);break}}}catch(E){(0,P.warn)(`parseDefaultAppearance - ignoring errors: "${E}".`)}return R}}function O(y){return new C(y).parse()}class d extends t.EvaluatorPreprocessor{constructor(f,R,E){var M;super(f),this.stream=f,this.evaluatorOptions=R,this.xref=E,this.resources=(M=f.dict)==null?void 0:M.get("Resources")}parse(){const f={fn:0,args:[]};let R={scaleFactor:1,fontSize:0,fontName:"",fontColor:new Uint8ClampedArray(3),fillColorSpace:e.ColorSpace.singletons.gray},E=!1;const M=[];try{for(;f.args.length=0,!(E||!this.read(f));){const{fn:b,args:V}=f;switch(b|0){case P.OPS.save:M.push({scaleFactor:R.scaleFactor,fontSize:R.fontSize,fontName:R.fontName,fontColor:R.fontColor.slice(),fillColorSpace:R.fillColorSpace});break;case P.OPS.restore:R=M.pop()||R;break;case P.OPS.setTextMatrix:R.scaleFactor*=Math.hypot(V[0],V[1]);break;case P.OPS.setFont:const[l,x]=V;l instanceof i.Name&&(R.fontName=l.name),typeof x=="number"&&x>0&&(R.fontSize=x*R.scaleFactor);break;case P.OPS.setFillColorSpace:R.fillColorSpace=e.ColorSpace.parse({cs:V[0],xref:this.xref,resources:this.resources,pdfFunctionFactory:this._pdfFunctionFactory,localColorSpaceCache:this._localColorSpaceCache});break;case P.OPS.setFillColor:R.fillColorSpace.getRgbItem(V,0,R.fontColor,0);break;case P.OPS.setFillRGBColor:e.ColorSpace.singletons.rgb.getRgbItem(V,0,R.fontColor,0);break;case P.OPS.setFillGray:e.ColorSpace.singletons.gray.getRgbItem(V,0,R.fontColor,0);break;case P.OPS.setFillCMYKColor:e.ColorSpace.singletons.cmyk.getRgbItem(V,0,R.fontColor,0);break;case P.OPS.showText:case P.OPS.showSpacedText:case P.OPS.nextLineShowText:case P.OPS.nextLineSetSpacingShowText:E=!0;break}}}catch(b){(0,P.warn)(`parseAppearanceStream - ignoring errors: "${b}".`)}return this.stream.reset(),delete R.scaleFactor,delete R.fillColorSpace,R}get _localColorSpaceCache(){return(0,P.shadow)(this,"_localColorSpaceCache",new o.LocalColorSpaceCache)}get _pdfFunctionFactory(){const f=new K.PDFFunctionFactory({xref:this.xref,isEvalSupported:this.evaluatorOptions.isEvalSupported});return(0,P.shadow)(this,"_pdfFunctionFactory",f)}}function A(y,f,R){return new d(y,f,R).parse()}function n(y,f){if(y[0]===y[1]&&y[1]===y[2]){const R=y[0]/255;return`${(0,w.numberToString)(R)} ${f?"g":"G"}`}return Array.from(y,R=>(0,w.numberToString)(R/255)).join(" ")+` ${f?"rg":"RG"}`}function I({fontSize:y,fontName:f,fontColor:R}){return`/${(0,w.escapePDFName)(f)} ${y} Tf ${n(R,!0)}`}class k{constructor(f,R){this.xref=f,this.widths=null,this.firstChar=1/0,this.lastChar=-1/0,this.fontFamily=R;const E=new OffscreenCanvas(1,1);this.ctxMeasure=E.getContext("2d"),k._fontNameId||(k._fontNameId=1),this.fontName=i.Name.get(`InvalidPDFjsFont_${R}_${k._fontNameId++}`)}get toUnicodeRef(){if(!k._toUnicodeRef){const f=`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (Adobe)
/Ordering (UCS) /Supplement 0 >> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
1 beginbfrange
<0000> <FFFF> <0000>
endbfrange
endcmap CMapName currentdict /CMap defineresource pop end end`,R=k.toUnicodeStream=new j.StringStream(f),E=new i.Dict(this.xref);R.dict=E,E.set("Length",f.length),k._toUnicodeRef=this.xref.getNewPersistentRef(R)}return k._toUnicodeRef}get fontDescriptorRef(){if(!k._fontDescriptorRef){const f=new i.Dict(this.xref);f.set("Type",i.Name.get("FontDescriptor")),f.set("FontName",this.fontName),f.set("FontFamily","MyriadPro Regular"),f.set("FontBBox",[0,0,0,0]),f.set("FontStretch",i.Name.get("Normal")),f.set("FontWeight",400),f.set("ItalicAngle",0),k._fontDescriptorRef=this.xref.getNewPersistentRef(f)}return k._fontDescriptorRef}get descendantFontRef(){const f=new i.Dict(this.xref);f.set("BaseFont",this.fontName),f.set("Type",i.Name.get("Font")),f.set("Subtype",i.Name.get("CIDFontType0")),f.set("CIDToGIDMap",i.Name.get("Identity")),f.set("FirstChar",this.firstChar),f.set("LastChar",this.lastChar),f.set("FontDescriptor",this.fontDescriptorRef),f.set("DW",1e3);const R=[],E=[...this.widths.entries()].sort();let M=null,b=null;for(const[l,x]of E){if(!M){M=l,b=[x];continue}l===M+b.length?b.push(x):(R.push(M,b),M=l,b=[x])}M&&R.push(M,b),f.set("W",R);const V=new i.Dict(this.xref);return V.set("Ordering","Identity"),V.set("Registry","Adobe"),V.set("Supplement",0),f.set("CIDSystemInfo",V),this.xref.getNewPersistentRef(f)}get baseFontRef(){const f=new i.Dict(this.xref);return f.set("BaseFont",this.fontName),f.set("Type",i.Name.get("Font")),f.set("Subtype",i.Name.get("Type0")),f.set("Encoding",i.Name.get("Identity-H")),f.set("DescendantFonts",[this.descendantFontRef]),f.set("ToUnicode",this.toUnicodeRef),this.xref.getNewPersistentRef(f)}get resources(){const f=new i.Dict(this.xref),R=new i.Dict(this.xref);return R.set(this.fontName.name,this.baseFontRef),f.set("Font",R),f}_createContext(){return this.widths=new Map,this.ctxMeasure.font=`1000px ${this.fontFamily}`,this.ctxMeasure}createFontResources(f){const R=this._createContext();for(const E of f.split(/\r\n?|\n/))for(const M of E.split("")){const b=M.charCodeAt(0);if(this.widths.has(b))continue;const V=R.measureText(M),l=Math.ceil(V.width);this.widths.set(b,l),this.firstChar=Math.min(b,this.firstChar),this.lastChar=Math.max(b,this.lastChar)}return this.resources}createAppearance(f,R,E,M,b,V){const l=this._createContext(),x=[];let H=-1/0;for(const L of f.split(/\r\n?|\n/)){x.push(L);const oe=l.measureText(L).width;H=Math.max(H,oe);for(const T of L.split("")){const Q=T.charCodeAt(0);let v=this.widths.get(Q);if(v===void 0){const $=l.measureText(T);v=Math.ceil($.width),this.widths.set(Q,v),this.firstChar=Math.min(Q,this.firstChar),this.lastChar=Math.max(Q,this.lastChar)}}}H*=M/1e3;const[s,h,F,N]=R;let U=F-s,g=N-h;E%180!==0&&([U,g]=[g,U]);let S=1;H>U&&(S=U/H);let m=1;const r=P.LINE_FACTOR*M,p=P.LINE_DESCENT_FACTOR*M,c=r*x.length;c>g&&(m=g/c);const u=Math.min(S,m),q=M*u,J=["q",`0 0 ${(0,w.numberToString)(U)} ${(0,w.numberToString)(g)} re W n`,"BT",`1 0 0 1 0 ${(0,w.numberToString)(g+p)} Tm 0 Tc ${n(b,!0)}`,`/${this.fontName.name} ${(0,w.numberToString)(q)} Tf`],{resources:G}=this;if(V=typeof V=="number"&&V>=0&&V<=1?V:1,V!==1){J.push("/R0 gs");const L=new i.Dict(this.xref),oe=new i.Dict(this.xref);oe.set("ca",V),oe.set("CA",V),oe.set("Type",i.Name.get("ExtGState")),L.set("R0",oe),G.set("ExtGState",L)}const W=(0,w.numberToString)(r);for(const L of x)J.push(`0 -${W} Td <${(0,w.stringToUTF16HexString)(L)}> Tj`);J.push("ET","Q");const ce=J.join(`
`),_=new i.Dict(this.xref);if(_.set("Subtype",i.Name.get("Form")),_.set("Type",i.Name.get("XObject")),_.set("BBox",[0,0,U,g]),_.set("Length",ce.length),_.set("Resources",G),E){const L=(0,w.getRotationMatrix)(E,U,g);_.set("Matrix",L)}const ie=new j.StringStream(ce);return ie.dict=_,ie}}D.FakeUnicodeFont=k},(Fe,D,se)=>{var y,sa,R,ra,M,b,V,l,x,H,s,h,F,Si,U,Wa,S,Xa,r,$i,c,mi,q,ki,G,Ya,ce,za,ie,Za,oe,oa,v,en,Z,tn,ne,ca;Object.defineProperty(D,"__esModule",{value:!0}),D.ColorSpace=void 0;var i=se(2),w=se(4),P=se(5),e=se(3);function t(re,ae,z,le,ue,ge,ke){ke=ke!==1?0:ke;const fe=z/ue,xe=le/ge;let pe=0,we;const Oe=new Uint16Array(ue),Te=z*3;for(let Ce=0;Ce<ue;Ce++)Oe[Ce]=Math.floor(Ce*fe)*3;for(let Ce=0;Ce<ge;Ce++){const Ae=Math.floor(Ce*xe)*Te;for(let Se=0;Se<ue;Se++)we=Ae+Oe[Se],ae[pe++]=re[we++],ae[pe++]=re[we++],ae[pe++]=re[we++],pe+=ke}}class o{constructor(ae,z){this.constructor===o&&(0,i.unreachable)("Cannot initialize ColorSpace."),this.name=ae,this.numComps=z}getRgb(ae,z){const le=new Uint8ClampedArray(3);return this.getRgbItem(ae,z,le,0),le}getRgbItem(ae,z,le,ue){(0,i.unreachable)("Should not call ColorSpace.getRgbItem")}getRgbBuffer(ae,z,le,ue,ge,ke,me){(0,i.unreachable)("Should not call ColorSpace.getRgbBuffer")}getOutputLength(ae,z){(0,i.unreachable)("Should not call ColorSpace.getOutputLength")}isPassthrough(ae){return!1}isDefaultDecode(ae,z){return o.isDefaultDecode(ae,this.numComps)}fillRgb(ae,z,le,ue,ge,ke,me,fe,xe){const pe=z*le;let we=null;const Oe=1<<me,Te=le!==ge||z!==ue;if(this.isPassthrough(me))we=fe;else if(this.numComps===1&&pe>Oe&&this.name!=="DeviceGray"&&this.name!=="DeviceRGB"){const Ce=me<=8?new Uint8Array(Oe):new Uint16Array(Oe);for(let Se=0;Se<Oe;Se++)Ce[Se]=Se;const Ae=new Uint8ClampedArray(Oe*3);if(this.getRgbBuffer(Ce,0,Oe,Ae,0,me,0),Te){we=new Uint8Array(pe*3);let Se=0;for(let He=0;He<pe;++He){const Ve=fe[He]*3;we[Se++]=Ae[Ve],we[Se++]=Ae[Ve+1],we[Se++]=Ae[Ve+2]}}else{let Se=0;for(let He=0;He<pe;++He){const Ve=fe[He]*3;ae[Se++]=Ae[Ve],ae[Se++]=Ae[Ve+1],ae[Se++]=Ae[Ve+2],Se+=xe}}}else Te?(we=new Uint8ClampedArray(pe*3),this.getRgbBuffer(fe,0,pe,we,0,me,0)):this.getRgbBuffer(fe,0,ue*ke,ae,0,me,xe);if(we)if(Te)t(we,ae,z,le,ue,ge,xe);else{let Ce=0,Ae=0;for(let Se=0,He=ue*ke;Se<He;Se++)ae[Ce++]=we[Ae++],ae[Ce++]=we[Ae++],ae[Ce++]=we[Ae++],Ce+=xe}}get usesZeroToOneRange(){return(0,i.shadow)(this,"usesZeroToOneRange",!0)}static _cache(ae,z,le,ue){if(!le)throw new Error('ColorSpace._cache - expected "localColorSpaceCache" argument.');if(!ue)throw new Error('ColorSpace._cache - expected "parsedColorSpace" argument.');let ge,ke;ae instanceof w.Ref&&(ke=ae,ae=z.fetch(ae)),ae instanceof w.Name&&(ge=ae.name),(ge||ke)&&le.set(ge,ke,ue)}static getCached(ae,z,le){if(!le)throw new Error('ColorSpace.getCached - expected "localColorSpaceCache" argument.');if(ae instanceof w.Ref){const ue=le.getByRef(ae);if(ue)return ue;try{ae=z.fetch(ae)}catch(ge){if(ge instanceof e.MissingDataException)throw ge}}if(ae instanceof w.Name){const ue=le.getByName(ae.name);if(ue)return ue}return null}static parseAsync(ke){return rt(this,arguments,function*({cs:ae,xref:z,resources:le=null,pdfFunctionFactory:ue,localColorSpaceCache:ge}){const me=this._parse(ae,z,le,ue);return this._cache(ae,z,ge,me),me})}static parse({cs:ae,xref:z,resources:le=null,pdfFunctionFactory:ue,localColorSpaceCache:ge}){const ke=this.getCached(ae,z,ge);if(ke)return ke;const me=this._parse(ae,z,le,ue);return this._cache(ae,z,ge,me),me}static _parse(ae,z,le=null,ue){if(ae=z.fetchIfRef(ae),ae instanceof w.Name)switch(ae.name){case"G":case"DeviceGray":return this.singletons.gray;case"RGB":case"DeviceRGB":return this.singletons.rgb;case"CMYK":case"DeviceCMYK":return this.singletons.cmyk;case"Pattern":return new j(null);default:if(le instanceof w.Dict){const ge=le.get("ColorSpace");if(ge instanceof w.Dict){const ke=ge.get(ae.name);if(ke){if(ke instanceof w.Name)return this._parse(ke,z,le,ue);ae=ke;break}}}throw new i.FormatError(`Unrecognized ColorSpace: ${ae.name}`)}if(Array.isArray(ae)){const ge=z.fetchIfRef(ae[0]).name;let ke,me,fe,xe,pe,we;switch(ge){case"G":case"DeviceGray":return this.singletons.gray;case"RGB":case"DeviceRGB":return this.singletons.rgb;case"CMYK":case"DeviceCMYK":return this.singletons.cmyk;case"CalGray":return ke=z.fetchIfRef(ae[1]),xe=ke.getArray("WhitePoint"),pe=ke.getArray("BlackPoint"),we=ke.get("Gamma"),new n(xe,pe,we);case"CalRGB":ke=z.fetchIfRef(ae[1]),xe=ke.getArray("WhitePoint"),pe=ke.getArray("BlackPoint"),we=ke.getArray("Gamma");const Oe=ke.getArray("Matrix");return new I(xe,pe,we,Oe);case"ICCBased":const Ce=z.fetchIfRef(ae[1]).dict;me=Ce.get("N");const Ae=Ce.get("Alternate");if(Ae){const lt=this._parse(Ae,z,le,ue);if(lt.numComps===me)return lt;(0,i.warn)("ICCBased color space: Ignoring incorrect /Alternate entry.")}if(me===1)return this.singletons.gray;if(me===3)return this.singletons.rgb;if(me===4)return this.singletons.cmyk;break;case"Pattern":return fe=ae[1]||null,fe&&(fe=this._parse(fe,z,le,ue)),new j(fe);case"I":case"Indexed":fe=this._parse(ae[1],z,le,ue);const Se=z.fetchIfRef(ae[2])+1,He=z.fetchIfRef(ae[3]);return new C(fe,Se,He);case"Separation":case"DeviceN":const Ve=z.fetchIfRef(ae[1]);me=Array.isArray(Ve)?Ve.length:1,fe=this._parse(ae[2],z,le,ue);const Le=ue.create(ae[3]);return new K(me,fe,Le);case"Lab":ke=z.fetchIfRef(ae[1]),xe=ke.getArray("WhitePoint"),pe=ke.getArray("BlackPoint");const Ye=ke.getArray("Range");return new k(xe,pe,Ye);default:throw new i.FormatError(`Unimplemented ColorSpace object: ${ge}`)}}throw new i.FormatError(`Unrecognized ColorSpace object: ${ae}`)}static isDefaultDecode(ae,z){if(!Array.isArray(ae))return!0;if(z*2!==ae.length)return(0,i.warn)("The decode map is not the correct length"),!0;for(let le=0,ue=ae.length;le<ue;le+=2)if(ae[le]!==0||ae[le+1]!==1)return!1;return!0}static get singletons(){return(0,i.shadow)(this,"singletons",{get gray(){return(0,i.shadow)(this,"gray",new O)},get rgb(){return(0,i.shadow)(this,"rgb",new d)},get cmyk(){return(0,i.shadow)(this,"cmyk",new A)}})}}D.ColorSpace=o;class K extends o{constructor(ae,z,le){super("Alternate",ae),this.base=z,this.tintFn=le,this.tmpBuf=new Float32Array(z.numComps)}getRgbItem(ae,z,le,ue){const ge=this.tmpBuf;this.tintFn(ae,z,ge,0),this.base.getRgbItem(ge,0,le,ue)}getRgbBuffer(ae,z,le,ue,ge,ke,me){const fe=this.tintFn,xe=this.base,pe=1/((1<<ke)-1),we=xe.numComps,Oe=xe.usesZeroToOneRange,Te=(xe.isPassthrough(8)||!Oe)&&me===0;let Ce=Te?ge:0;const Ae=Te?ue:new Uint8ClampedArray(we*le),Se=this.numComps,He=new Float32Array(Se),Ve=new Float32Array(we);let Le,Ye;for(Le=0;Le<le;Le++){for(Ye=0;Ye<Se;Ye++)He[Ye]=ae[z++]*pe;if(fe(He,0,Ve,0),Oe)for(Ye=0;Ye<we;Ye++)Ae[Ce++]=Ve[Ye]*255;else xe.getRgbItem(Ve,0,Ae,Ce),Ce+=we}Te||xe.getRgbBuffer(Ae,0,le,ue,ge,8,me)}getOutputLength(ae,z){return this.base.getOutputLength(ae*this.base.numComps/this.numComps,z)}}class j extends o{constructor(ae){super("Pattern",null),this.base=ae}isDefaultDecode(ae,z){(0,i.unreachable)("Should not call PatternCS.isDefaultDecode")}}class C extends o{constructor(ae,z,le){super("Indexed",1),this.base=ae,this.highVal=z;const ue=ae.numComps*z;if(this.lookup=new Uint8Array(ue),le instanceof P.BaseStream){const ge=le.getBytes(ue);this.lookup.set(ge)}else if(typeof le=="string")for(let ge=0;ge<ue;++ge)this.lookup[ge]=le.charCodeAt(ge)&255;else throw new i.FormatError(`IndexedCS - unrecognized lookup table: ${le}`)}getRgbItem(ae,z,le,ue){const ge=this.base.numComps,ke=ae[z]*ge;this.base.getRgbBuffer(this.lookup,ke,1,le,ue,8,0)}getRgbBuffer(ae,z,le,ue,ge,ke,me){const fe=this.base,xe=fe.numComps,pe=fe.getOutputLength(xe,me),we=this.lookup;for(let Oe=0;Oe<le;++Oe){const Te=ae[z++]*xe;fe.getRgbBuffer(we,Te,1,ue,ge,8,me),ge+=pe}}getOutputLength(ae,z){return this.base.getOutputLength(ae*this.base.numComps,z)}isDefaultDecode(ae,z){return Array.isArray(ae)?ae.length!==2?((0,i.warn)("Decode map length is not correct"),!0):!Number.isInteger(z)||z<1?((0,i.warn)("Bits per component is not correct"),!0):ae[0]===0&&ae[1]===(1<<z)-1:!0}}class O extends o{constructor(){super("DeviceGray",1)}getRgbItem(ae,z,le,ue){const ge=ae[z]*255;le[ue]=le[ue+1]=le[ue+2]=ge}getRgbBuffer(ae,z,le,ue,ge,ke,me){const fe=255/((1<<ke)-1);let xe=z,pe=ge;for(let we=0;we<le;++we){const Oe=fe*ae[xe++];ue[pe++]=Oe,ue[pe++]=Oe,ue[pe++]=Oe,pe+=me}}getOutputLength(ae,z){return ae*(3+z)}}class d extends o{constructor(){super("DeviceRGB",3)}getRgbItem(ae,z,le,ue){le[ue]=ae[z]*255,le[ue+1]=ae[z+1]*255,le[ue+2]=ae[z+2]*255}getRgbBuffer(ae,z,le,ue,ge,ke,me){if(ke===8&&me===0){ue.set(ae.subarray(z,z+le*3),ge);return}const fe=255/((1<<ke)-1);let xe=z,pe=ge;for(let we=0;we<le;++we)ue[pe++]=fe*ae[xe++],ue[pe++]=fe*ae[xe++],ue[pe++]=fe*ae[xe++],pe+=me}getOutputLength(ae,z){return ae*(3+z)/3|0}isPassthrough(ae){return ae===8}}class A extends o{constructor(){super("DeviceCMYK",4);De(this,y)}getRgbItem(z,le,ue,ge){Re(this,y,sa).call(this,z,le,1,ue,ge)}getRgbBuffer(z,le,ue,ge,ke,me,fe){const xe=1/((1<<me)-1);for(let pe=0;pe<ue;pe++)Re(this,y,sa).call(this,z,le,xe,ge,ke),le+=4,ke+=3+fe}getOutputLength(z,le){return z/4*(3+le)|0}}y=new WeakSet,sa=function(z,le,ue,ge,ke){const me=z[le]*ue,fe=z[le+1]*ue,xe=z[le+2]*ue,pe=z[le+3]*ue;ge[ke]=255+me*(-4.387332384609988*me+54.48615194189176*fe+18.82290502165302*xe+212.25662451639585*pe+-285.2331026137004)+fe*(1.7149763477362134*fe-5.6096736904047315*xe+-17.873870861415444*pe-5.497006427196366)+xe*(-2.5217340131683033*xe-21.248923337353073*pe+17.5119270841813)+pe*(-21.86122147463605*pe-189.48180835922747),ge[ke+1]=255+me*(8.841041422036149*me+60.118027045597366*fe+6.871425592049007*xe+31.159100130055922*pe+-79.2970844816548)+fe*(-15.310361306967817*fe+17.575251261109482*xe+131.35250912493976*pe-190.9453302588951)+xe*(4.444339102852739*xe+9.8632861493405*pe-24.86741582555878)+pe*(-20.737325471181034*pe-187.80453709719578),ge[ke+2]=255+me*(.8842522430003296*me+8.078677503112928*fe+30.89978309703729*xe-.23883238689178934*pe+-14.183576799673286)+fe*(10.49593273432072*fe+63.02378494754052*xe+50.606957656360734*pe-112.23884253719248)+xe*(.03296041114873217*xe+115.60384449646641*pe+-193.58209356861505)+pe*(-22.33816807309886*pe-180.12613974708367)};class n extends o{constructor(z,le,ue){super("CalGray",1);De(this,R);if(!z)throw new i.FormatError("WhitePoint missing - required for color space CalGray");if([this.XW,this.YW,this.ZW]=z,[this.XB,this.YB,this.ZB]=le||[0,0,0],this.G=ue||1,this.XW<0||this.ZW<0||this.YW!==1)throw new i.FormatError(`Invalid WhitePoint components for ${this.name}, no fallback available`);(this.XB<0||this.YB<0||this.ZB<0)&&((0,i.info)(`Invalid BlackPoint for ${this.name}, falling back to default.`),this.XB=this.YB=this.ZB=0),(this.XB!==0||this.YB!==0||this.ZB!==0)&&(0,i.warn)(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ZB: ${this.ZB}, only default values are supported.`),this.G<1&&((0,i.info)(`Invalid Gamma: ${this.G} for ${this.name}, falling back to default.`),this.G=1)}getRgbItem(z,le,ue,ge){Re(this,R,ra).call(this,z,le,ue,ge,1)}getRgbBuffer(z,le,ue,ge,ke,me,fe){const xe=1/((1<<me)-1);for(let pe=0;pe<ue;++pe)Re(this,R,ra).call(this,z,le,ge,ke,xe),le+=1,ke+=3+fe}getOutputLength(z,le){return z*(3+le)}}R=new WeakSet,ra=function(z,le,ue,ge,ke){const me=z[le]*ke,fe=Gt(me,this.G),xe=this.YW*fe,pe=Math.max(295.8*Gt(xe,.3333333333333333)-40.8,0);ue[ge]=pe,ue[ge+1]=pe,ue[ge+2]=pe};const Q=class Q extends o{constructor(z,le,ue,ge){super("CalRGB",3);De(this,F);De(this,U);De(this,S);De(this,r);De(this,c);De(this,q);De(this,G);De(this,ce);De(this,ie);De(this,oe);if(!z)throw new i.FormatError("WhitePoint missing - required for color space CalRGB");const[ke,me,fe]=this.whitePoint=z,[xe,pe,we]=this.blackPoint=le||new Float32Array(3);if([this.GR,this.GG,this.GB]=ue||new Float32Array([1,1,1]),[this.MXA,this.MYA,this.MZA,this.MXB,this.MYB,this.MZB,this.MXC,this.MYC,this.MZC]=ge||new Float32Array([1,0,0,0,1,0,0,0,1]),ke<0||fe<0||me!==1)throw new i.FormatError(`Invalid WhitePoint components for ${this.name}, no fallback available`);(xe<0||pe<0||we<0)&&((0,i.info)(`Invalid BlackPoint for ${this.name} [${xe}, ${pe}, ${we}], falling back to default.`),this.blackPoint=new Float32Array(3)),(this.GR<0||this.GG<0||this.GB<0)&&((0,i.info)(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ${this.name}, falling back to default.`),this.GR=this.GG=this.GB=1)}getRgbItem(z,le,ue,ge){Re(this,oe,oa).call(this,z,le,ue,ge,1)}getRgbBuffer(z,le,ue,ge,ke,me,fe){const xe=1/((1<<me)-1);for(let pe=0;pe<ue;++pe)Re(this,oe,oa).call(this,z,le,ge,ke,xe),le+=3,ke+=3+fe}getOutputLength(z,le){return z*(3+le)/3|0}};M=new WeakMap,b=new WeakMap,V=new WeakMap,l=new WeakMap,x=new WeakMap,H=new WeakMap,s=new WeakMap,h=new WeakMap,F=new WeakSet,Si=function(z,le,ue){ue[0]=z[0]*le[0]+z[1]*le[1]+z[2]*le[2],ue[1]=z[3]*le[0]+z[4]*le[1]+z[5]*le[2],ue[2]=z[6]*le[0]+z[7]*le[1]+z[8]*le[2]},U=new WeakSet,Wa=function(z,le,ue){ue[0]=le[0]*1/z[0],ue[1]=le[1]*1/z[1],ue[2]=le[2]*1/z[2]},S=new WeakSet,Xa=function(z,le,ue){ue[0]=le[0]*.95047/z[0],ue[1]=le[1]*1/z[1],ue[2]=le[2]*1.08883/z[2]},r=new WeakSet,$i=function(z){return z<=.0031308?Re(this,c,mi).call(this,0,1,12.92*z):z>=.99554525?1:Re(this,c,mi).call(this,0,1,1.055*Gt(z,.4166666666666667)-.055)},c=new WeakSet,mi=function(z,le,ue){return Math.max(z,Math.min(le,ue))},q=new WeakSet,ki=function(z){return z<0?-Re(this,q,ki).call(this,-z):z>8?Gt((z+16)/116,3):z*he(Q,h)},G=new WeakSet,Ya=function(z,le,ue){if(z[0]===0&&z[1]===0&&z[2]===0){ue[0]=le[0],ue[1]=le[1],ue[2]=le[2];return}const ge=Re(this,q,ki).call(this,0),ke=ge,me=Re(this,q,ki).call(this,z[0]),fe=ge,xe=Re(this,q,ki).call(this,z[1]),pe=ge,we=Re(this,q,ki).call(this,z[2]),Oe=(1-ke)/(1-me),Te=1-Oe,Ce=(1-fe)/(1-xe),Ae=1-Ce,Se=(1-pe)/(1-we),He=1-Se;ue[0]=le[0]*Oe+Te,ue[1]=le[1]*Ce+Ae,ue[2]=le[2]*Se+He},ce=new WeakSet,za=function(z,le,ue){if(z[0]===1&&z[2]===1){ue[0]=le[0],ue[1]=le[1],ue[2]=le[2];return}const ge=ue;Re(this,F,Si).call(this,he(Q,M),le,ge);const ke=he(Q,x);Re(this,U,Wa).call(this,z,ge,ke),Re(this,F,Si).call(this,he(Q,b),ke,ue)},ie=new WeakSet,Za=function(z,le,ue){const ge=ue;Re(this,F,Si).call(this,he(Q,M),le,ge);const ke=he(Q,x);Re(this,S,Xa).call(this,z,ge,ke),Re(this,F,Si).call(this,he(Q,b),ke,ue)},oe=new WeakSet,oa=function(z,le,ue,ge,ke){const me=Re(this,c,mi).call(this,0,1,z[le]*ke),fe=Re(this,c,mi).call(this,0,1,z[le+1]*ke),xe=Re(this,c,mi).call(this,0,1,z[le+2]*ke),pe=me===1?1:Gt(me,this.GR),we=fe===1?1:Gt(fe,this.GG),Oe=xe===1?1:Gt(xe,this.GB),Te=this.MXA*pe+this.MXB*we+this.MXC*Oe,Ce=this.MYA*pe+this.MYB*we+this.MYC*Oe,Ae=this.MZA*pe+this.MZB*we+this.MZC*Oe,Se=he(Q,H);Se[0]=Te,Se[1]=Ce,Se[2]=Ae;const He=he(Q,s);Re(this,ce,za).call(this,this.whitePoint,Se,He);const Ve=he(Q,H);Re(this,G,Ya).call(this,this.blackPoint,He,Ve);const Le=he(Q,s);Re(this,ie,Za).call(this,he(Q,l),Ve,Le);const Ye=he(Q,H);Re(this,F,Si).call(this,he(Q,V),Le,Ye),ue[ge]=Re(this,r,$i).call(this,Ye[0])*255,ue[ge+1]=Re(this,r,$i).call(this,Ye[1])*255,ue[ge+2]=Re(this,r,$i).call(this,Ye[2])*255},De(Q,M,new Float32Array([.8951,.2664,-.1614,-.7502,1.7135,.0367,.0389,-.0685,1.0296])),De(Q,b,new Float32Array([.9869929,-.1470543,.1599627,.4323053,.5183603,.0492912,-.0085287,.0400428,.9684867])),De(Q,V,new Float32Array([3.2404542,-1.5371385,-.4985314,-.969266,1.8760108,.041556,.0556434,-.2040259,1.0572252])),De(Q,l,new Float32Array([1,1,1])),De(Q,x,new Float32Array(3)),De(Q,H,new Float32Array(3)),De(Q,s,new Float32Array(3)),De(Q,h,.0011070564598794539);let I=Q;class k extends o{constructor(z,le,ue){super("Lab",3);De(this,v);De(this,Z);De(this,ne);if(!z)throw new i.FormatError("WhitePoint missing - required for color space Lab");if([this.XW,this.YW,this.ZW]=z,[this.amin,this.amax,this.bmin,this.bmax]=ue||[-100,100,-100,100],[this.XB,this.YB,this.ZB]=le||[0,0,0],this.XW<0||this.ZW<0||this.YW!==1)throw new i.FormatError("Invalid WhitePoint components, no fallback available");(this.XB<0||this.YB<0||this.ZB<0)&&((0,i.info)("Invalid BlackPoint, falling back to default"),this.XB=this.YB=this.ZB=0),(this.amin>this.amax||this.bmin>this.bmax)&&((0,i.info)("Invalid Range, falling back to defaults"),this.amin=-100,this.amax=100,this.bmin=-100,this.bmax=100)}getRgbItem(z,le,ue,ge){Re(this,ne,ca).call(this,z,le,!1,ue,ge)}getRgbBuffer(z,le,ue,ge,ke,me,fe){const xe=(1<<me)-1;for(let pe=0;pe<ue;pe++)Re(this,ne,ca).call(this,z,le,xe,ge,ke),le+=3,ke+=3+fe}getOutputLength(z,le){return z*(3+le)/3|0}isDefaultDecode(z,le){return!0}get usesZeroToOneRange(){return(0,i.shadow)(this,"usesZeroToOneRange",!1)}}v=new WeakSet,en=function(z){return z>=.20689655172413793?Gt(z,3):.12841854934601665*(z-.13793103448275862)},Z=new WeakSet,tn=function(z,le,ue,ge){return ue+z*(ge-ue)/le},ne=new WeakSet,ca=function(z,le,ue,ge,ke){let me=z[le],fe=z[le+1],xe=z[le+2];ue!==!1&&(me=Re(this,Z,tn).call(this,me,ue,0,100),fe=Re(this,Z,tn).call(this,fe,ue,this.amin,this.amax),xe=Re(this,Z,tn).call(this,xe,ue,this.bmin,this.bmax)),fe>this.amax?fe=this.amax:fe<this.amin&&(fe=this.amin),xe>this.bmax?xe=this.bmax:xe<this.bmin&&(xe=this.bmin);const pe=(me+16)/116,we=pe+fe/500,Oe=pe-xe/200,Te=this.XW*Re(this,v,en).call(this,we),Ce=this.YW*Re(this,v,en).call(this,pe),Ae=this.ZW*Re(this,v,en).call(this,Oe);let Se,He,Ve;this.ZW<1?(Se=Te*3.1339+Ce*-1.617+Ae*-.4906,He=Te*-.9785+Ce*1.916+Ae*.0333,Ve=Te*.072+Ce*-.229+Ae*1.4057):(Se=Te*3.2406+Ce*-1.5372+Ae*-.4986,He=Te*-.9689+Ce*1.8758+Ae*.0415,Ve=Te*.0557+Ce*-.204+Ae*1.057),ge[ke]=Math.sqrt(Se)*255,ge[ke+1]=Math.sqrt(He)*255,ge[ke+2]=Math.sqrt(Ve)*255}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PartialEvaluator=D.EvaluatorPreprocessor=void 0;var i=se(2),w=se(14),P=se(4),e=se(34),t=se(37),o=se(41),K=se(50),j=se(51),C=se(42),O=se(57),d=se(16),A=se(59),n=se(8),I=se(5),k=se(60),y=se(12),f=se(18),R=se(38),E=se(61),M=se(39),b=se(45),V=se(40),l=se(62),x=se(63),H=se(64),s=se(65);const h=Object.freeze({maxImageSize:-1,disableFontFace:!1,ignoreErrors:!1,isEvalSupported:!0,isOffscreenCanvasSupported:!1,canvasMaxAreaInBytes:-1,fontExtraProperties:!1,useSystemFonts:!0,cMapUrl:null,standardFontDataUrl:null}),F={TILING:1,SHADING:2},N=10,U=Promise.resolve();function g(ce,_=!1){if(Array.isArray(ce)){for(const ie of ce){const L=g(ie,!0);if(L)return L}return(0,i.warn)(`Unsupported blend mode Array: ${ce}`),"source-over"}if(!(ce instanceof P.Name))return _?null:"source-over";switch(ce.name){case"Normal":case"Compatible":return"source-over";case"Multiply":return"multiply";case"Screen":return"screen";case"Overlay":return"overlay";case"Darken":return"darken";case"Lighten":return"lighten";case"ColorDodge":return"color-dodge";case"ColorBurn":return"color-burn";case"HardLight":return"hard-light";case"SoftLight":return"soft-light";case"Difference":return"difference";case"Exclusion":return"exclusion";case"Hue":return"hue";case"Saturation":return"saturation";case"Color":return"color";case"Luminosity":return"luminosity"}return _?null:((0,i.warn)(`Unsupported blend mode: ${ce.name}`),"source-over")}function S(ce){var _;ce.fn===i.OPS.paintImageMaskXObject&&((_=ce.args[0])==null?void 0:_.count)>0&&ce.args[0].count++}const G=class G{constructor(){this.reset()}check(){return++this.checked<G.CHECK_TIME_EVERY?!1:(this.checked=0,this.endTime<=Date.now())}reset(){this.endTime=Date.now()+G.TIME_SLOT_DURATION_MS,this.checked=0}};jt(G,"TIME_SLOT_DURATION_MS",20),jt(G,"CHECK_TIME_EVERY",100);let m=G;class r{constructor({xref:_,handler:ie,pageIndex:L,idFactory:oe,fontCache:T,builtInCMapCache:Q,standardFontDataCache:v,globalImageCache:$,systemFontCache:Z,options:te=null}){this.xref=_,this.handler=ie,this.pageIndex=L,this.idFactory=oe,this.fontCache=T,this.builtInCMapCache=Q,this.standardFontDataCache=v,this.globalImageCache=$,this.systemFontCache=Z,this.options=te||h,this.parsingType3Font=!1,this._regionalImageCache=new A.RegionalImageCache,this._fetchBuiltInCMapBound=this.fetchBuiltInCMap.bind(this),l.ImageResizer.setMaxArea(this.options.canvasMaxAreaInBytes)}get _pdfFunctionFactory(){const _=new O.PDFFunctionFactory({xref:this.xref,isEvalSupported:this.options.isEvalSupported});return(0,i.shadow)(this,"_pdfFunctionFactory",_)}clone(_=null){const ie=Object.create(this);return ie.options=Object.assign(Object.create(null),this.options,_),ie}hasBlendModes(_,ie){if(!(_ instanceof P.Dict)||_.objId&&ie.has(_.objId))return!1;const L=new P.RefSet(ie);_.objId&&L.put(_.objId);const oe=[_],T=this.xref;for(;oe.length;){const Q=oe.shift(),v=Q.get("ExtGState");if(v instanceof P.Dict)for(let Z of v.getRawValues()){if(Z instanceof P.Ref){if(L.has(Z))continue;try{Z=T.fetch(Z)}catch(ne){L.put(Z),(0,i.info)(`hasBlendModes - ignoring ExtGState: "${ne}".`);continue}}if(!(Z instanceof P.Dict))continue;Z.objId&&L.put(Z.objId);const te=Z.get("BM");if(te instanceof P.Name){if(te.name!=="Normal")return!0;continue}if(te!==void 0&&Array.isArray(te)){for(const ne of te)if(ne instanceof P.Name&&ne.name!=="Normal")return!0}}const $=Q.get("XObject");if($ instanceof P.Dict)for(let Z of $.getRawValues()){if(Z instanceof P.Ref){if(L.has(Z))continue;try{Z=T.fetch(Z)}catch(ne){L.put(Z),(0,i.info)(`hasBlendModes - ignoring XObject: "${ne}".`);continue}}if(!(Z instanceof I.BaseStream))continue;Z.dict.objId&&L.put(Z.dict.objId);const te=Z.dict.get("Resources");te instanceof P.Dict&&(te.objId&&L.has(te.objId)||(oe.push(te),te.objId&&L.put(te.objId)))}}for(const Q of L)ie.put(Q);return!1}fetchBuiltInCMap(_){return rt(this,null,function*(){const ie=this.builtInCMapCache.get(_);if(ie)return ie;let L;if(this.options.cMapUrl!==null){const oe=`${this.options.cMapUrl}${_}.bcmap`,T=yield fetch(oe);if(!T.ok)throw new Error(`fetchBuiltInCMap: failed to fetch file "${oe}" with "${T.statusText}".`);L={cMapData:new Uint8Array(yield T.arrayBuffer()),compressionType:i.CMapCompressionType.BINARY}}else L=yield this.handler.sendWithPromise("FetchBuiltInCMap",{name:_});return L.compressionType!==i.CMapCompressionType.NONE&&this.builtInCMapCache.set(_,L),L})}fetchStandardFontData(_){return rt(this,null,function*(){const ie=this.standardFontDataCache.get(_);if(ie)return new n.Stream(ie);if(this.options.useSystemFonts&&_!=="Symbol"&&_!=="ZapfDingbats")return null;const L=(0,o.getFontNameToFileMap)(),oe=L[_];let T;if(this.options.standardFontDataUrl!==null){const Q=`${this.options.standardFontDataUrl}${oe}`,v=yield fetch(Q);v.ok?T=yield v.arrayBuffer():(0,i.warn)(`fetchStandardFontData: failed to fetch file "${Q}" with "${v.statusText}".`)}else try{T=yield this.handler.sendWithPromise("FetchStandardFontData",{filename:oe})}catch(Q){(0,i.warn)(`fetchStandardFontData: failed to fetch file "${oe}" with "${Q}".`)}return T?(this.standardFontDataCache.set(_,T),new n.Stream(T)):null})}buildFormXObject(_,ie,L,oe,T,Q,v){return rt(this,null,function*(){const $=ie.dict,Z=$.getArray("Matrix");let te=$.getArray("BBox");te=Array.isArray(te)&&te.length===4?i.Util.normalizeRect(te):null;let ne,X;$.has("OC")&&(ne=yield this.parseMarkedContentProps($.get("OC"),_)),ne!==void 0&&oe.addOp(i.OPS.beginMarkedContentProps,["OC",ne]);const re=$.get("Group");if(re){X={matrix:Z,bbox:te,smask:L,isolated:!1,knockout:!1};const z=re.get("S");let le=null;if((0,P.isName)(z,"Transparency")&&(X.isolated=re.get("I")||!1,X.knockout=re.get("K")||!1,re.has("CS"))){const ue=re.getRaw("CS"),ge=y.ColorSpace.getCached(ue,this.xref,v);ge?le=ge:le=yield this.parseColorSpace({cs:ue,resources:_,localColorSpaceCache:v})}L!=null&&L.backdrop&&(le||(le=y.ColorSpace.singletons.rgb),L.backdrop=le.getRgb(L.backdrop,0)),oe.addOp(i.OPS.beginGroup,[X])}const ae=re?[Z,null]:[Z,te];return oe.addOp(i.OPS.paintFormXObjectBegin,ae),this.getOperatorList({stream:ie,task:T,resources:$.get("Resources")||_,operatorList:oe,initialState:Q}).then(function(){oe.addOp(i.OPS.paintFormXObjectEnd,[]),re&&oe.addOp(i.OPS.endGroup,[X]),ne!==void 0&&oe.addOp(i.OPS.endMarkedContent,[])})})}_sendImgData(_,ie,L=!1){const oe=ie?[ie.bitmap||ie.data.buffer]:null;return this.parsingType3Font||L?this.handler.send("commonobj",[_,"Image",ie],oe):this.handler.send("obj",[_,this.pageIndex,"Image",ie],oe)}buildPaintImageXObject($){return rt(this,arguments,function*({resources:_,image:ie,isInline:L=!1,operatorList:oe,cacheKey:T,localImageCache:Q,localColorSpaceCache:v}){const Z=ie.dict,te=Z.objId,ne=Z.get("W","Width"),X=Z.get("H","Height");if(!(ne&&typeof ne=="number")||!(X&&typeof X=="number")){(0,i.warn)("Image dimensions are missing, or not numbers.");return}const re=this.options.maxImageSize;if(re!==-1&&ne*X>re){const fe="Image exceeded maximum allowed size and was removed.";if(this.options.ignoreErrors){(0,i.warn)(fe);return}throw new Error(fe)}let ae;Z.has("OC")&&(ae=yield this.parseMarkedContentProps(Z.get("OC"),_));const z=Z.get("IM","ImageMask")||!1;let le,ue;if(z){const fe=Z.get("I","Interpolate"),xe=ne+7>>3,pe=ie.getBytes(xe*X),we=Z.getArray("D","Decode");if(this.parsingType3Font){if(le=s.PDFImage.createRawMask({imgArray:pe,width:ne,height:X,imageIsFromDecodeStream:ie instanceof f.DecodeStream,inverseDecode:(we==null?void 0:we[0])>0,interpolate:fe}),le.cached=!!T,ue=[le],oe.addImageOps(i.OPS.paintImageMaskXObject,ue,ae),T){const Te={fn:i.OPS.paintImageMaskXObject,args:ue,optionalContent:ae};Q.set(T,te,Te),te&&this._regionalImageCache.set(null,te,Te)}return}if(le=yield s.PDFImage.createMask({imgArray:pe,width:ne,height:X,imageIsFromDecodeStream:ie instanceof f.DecodeStream,inverseDecode:(we==null?void 0:we[0])>0,interpolate:fe,isOffscreenCanvasSupported:this.options.isOffscreenCanvasSupported}),le.isSingleOpaquePixel){if(oe.addImageOps(i.OPS.paintSolidColorImageMask,[],ae),T){const Te={fn:i.OPS.paintSolidColorImageMask,args:[],optionalContent:ae};Q.set(T,te,Te),te&&this._regionalImageCache.set(null,te,Te)}return}const Oe=`mask_${this.idFactory.createObjId()}`;if(oe.addDependency(Oe),this._sendImgData(Oe,le),ue=[{data:Oe,width:le.width,height:le.height,interpolate:le.interpolate,count:1}],oe.addImageOps(i.OPS.paintImageMaskXObject,ue,ae),T){const Te={fn:i.OPS.paintImageMaskXObject,args:ue,optionalContent:ae};Q.set(T,te,Te),te&&this._regionalImageCache.set(null,te,Te)}return}if(L&&!Z.has("SMask")&&!Z.has("Mask")&&ne+X<200){le=yield new s.PDFImage({xref:this.xref,res:_,image:ie,isInline:L,pdfFunctionFactory:this._pdfFunctionFactory,localColorSpaceCache:v}).createImageData(!0,!1),oe.isOffscreenCanvasSupported=this.options.isOffscreenCanvasSupported,oe.addImageOps(i.OPS.paintInlineImageXObject,[le],ae);return}let ke=`img_${this.idFactory.createObjId()}`,me=!1;if(this.parsingType3Font?ke=`${this.idFactory.getDocId()}_type3_${ke}`:te&&(me=this.globalImageCache.shouldCache(te,this.pageIndex),me&&(ke=`${this.idFactory.getDocId()}_${ke}`)),oe.addDependency(ke),ue=[ke,ne,X],s.PDFImage.buildImage({xref:this.xref,res:_,image:ie,isInline:L,pdfFunctionFactory:this._pdfFunctionFactory,localColorSpaceCache:v}).then(fe=>rt(this,null,function*(){if(le=yield fe.createImageData(!1,this.options.isOffscreenCanvasSupported),T&&te&&me){const xe=le.bitmap?le.width*le.height*4:le.data.length;this.globalImageCache.addByteSize(te,xe)}return this._sendImgData(ke,le,me)})).catch(fe=>((0,i.warn)(`Unable to decode image "${ke}": "${fe}".`),this._sendImgData(ke,null,me))),oe.addImageOps(i.OPS.paintImageXObject,ue,ae),T){const fe={fn:i.OPS.paintImageXObject,args:ue,optionalContent:ae};Q.set(T,te,fe),te&&(this._regionalImageCache.set(null,te,fe),me&&((0,i.assert)(!L,"Cannot cache an inline image globally."),this.globalImageCache.setData(te,{objId:ke,fn:i.OPS.paintImageXObject,args:ue,optionalContent:ae,byteSize:0})))}})}handleSMask(_,ie,L,oe,T,Q){const v=_.get("G"),$={subtype:_.get("S").name,backdrop:_.get("BC")},Z=_.get("TR");if((0,O.isPDFFunction)(Z)){const te=this._pdfFunctionFactory.create(Z),ne=new Uint8Array(256),X=new Float32Array(1);for(let re=0;re<256;re++)X[0]=re/255,te(X,0,X,0),ne[re]=X[0]*255|0;$.transferMap=ne}return this.buildFormXObject(ie,v,$,L,oe,T.state.clone(),Q)}handleTransferFunction(_){let ie;if(Array.isArray(_))ie=_;else if((0,O.isPDFFunction)(_))ie=[_];else return null;const L=[];let oe=0,T=0;for(const Q of ie){const v=this.xref.fetchIfRef(Q);if(oe++,(0,P.isName)(v,"Identity")){L.push(null);continue}else if(!(0,O.isPDFFunction)(v))return null;const $=this._pdfFunctionFactory.create(v),Z=new Uint8Array(256),te=new Float32Array(1);for(let ne=0;ne<256;ne++)te[0]=ne/255,$(te,0,te,0),Z[ne]=te[0]*255|0;L.push(Z),T++}return!(oe===1||oe===4)||T===0?null:L}handleTilingType(_,ie,L,oe,T,Q,v,$){const Z=new H.OperatorList,te=P.Dict.merge({xref:this.xref,dictArray:[T.get("Resources"),L]});return this.getOperatorList({stream:oe,task:v,resources:te,operatorList:Z}).then(function(){const ne=Z.getIR(),X=(0,K.getTilingPatternIR)(ne,T,ie);Q.addDependencies(Z.dependencies),Q.addOp(_,X),T.objId&&$.set(null,T.objId,{operatorListIR:ne,dict:T})}).catch(ne=>{if(!(ne instanceof i.AbortException)){if(this.options.ignoreErrors){(0,i.warn)(`handleTilingType - ignoring pattern: "${ne}".`);return}throw ne}})}handleSetFont(_,ie,L,oe,T,Q,v=null,$=null){const Z=(ie==null?void 0:ie[0])instanceof P.Name?ie[0].name:null;return this.loadFont(Z,L,_,v,$).then(te=>te.font.isType3Font?te.loadType3Data(this,_,T).then(function(){return oe.addDependencies(te.type3Dependencies),te}).catch(ne=>new p({loadedName:"g_font_error",font:new e.ErrorFont(`Type3 font load error: ${ne}`),dict:te.font,evaluatorOptions:this.options})):te).then(te=>(Q.font=te.font,te.send(this.handler),te.loadedName))}handleText(_,ie){const L=ie.font,oe=L.charsToGlyphs(_);return L.data&&(ie.textRenderingMode&i.TextRenderingMode.ADD_TO_PATH_FLAG||ie.fillColorSpace.name==="Pattern"||L.disableFontFace||this.options.disableFontFace)&&r.buildFontPaths(L,oe,this.handler,this.options),oe}ensureStateFont(_){if(_.font)return;const ie=new i.FormatError("Missing setFont (Tf) operator before text rendering operator.");if(this.options.ignoreErrors){(0,i.warn)(`ensureStateFont: "${ie}".`);return}throw ie}setGState(Z){return rt(this,arguments,function*({resources:_,gState:ie,operatorList:L,cacheKey:oe,task:T,stateManager:Q,localGStateCache:v,localColorSpaceCache:$}){const te=ie.objId;let ne=!0;const X=[];let re=Promise.resolve();for(const ae of ie.getKeys()){const z=ie.get(ae);switch(ae){case"Type":break;case"LW":case"LC":case"LJ":case"ML":case"D":case"RI":case"FL":case"CA":case"ca":X.push([ae,z]);break;case"Font":ne=!1,re=re.then(()=>this.handleSetFont(_,null,z[0],L,T,Q.state).then(function(ue){L.addDependency(ue),X.push([ae,[ue,z[1]]])}));break;case"BM":X.push([ae,g(z)]);break;case"SMask":if((0,P.isName)(z,"None")){X.push([ae,!1]);break}z instanceof P.Dict?(ne=!1,re=re.then(()=>this.handleSMask(z,_,L,T,Q,$)),X.push([ae,!0])):(0,i.warn)("Unsupported SMask type");break;case"TR":const le=this.handleTransferFunction(z);X.push([ae,le]);break;case"OP":case"op":case"OPM":case"BG":case"BG2":case"UCR":case"UCR2":case"TR2":case"HT":case"SM":case"SA":case"AIS":case"TK":(0,i.info)("graphic state operator "+ae);break;default:(0,i.info)("Unknown graphic state operator "+ae);break}}return re.then(function(){X.length>0&&L.addOp(i.OPS.setGState,[X]),ne&&v.set(oe,te,X)})})}loadFont(_,ie,L,oe=null,T=null){const Q=()=>rt(this,null,function*(){return new p({loadedName:"g_font_error",font:new e.ErrorFont(`Font "${_}" is not available.`),dict:ie,evaluatorOptions:this.options})});let v;if(ie)ie instanceof P.Ref&&(v=ie);else{const ae=L.get("Font");ae&&(v=ae.getRaw(_))}if(v){if(this.parsingType3Font&&this.type3FontRefs.has(v))return Q();if(this.fontCache.has(v))return this.fontCache.get(v);ie=this.xref.fetchIfRef(v)}if(!(ie instanceof P.Dict)){if(!this.options.ignoreErrors&&!this.parsingType3Font)return(0,i.warn)(`Font "${_}" is not available.`),Q();(0,i.warn)(`Font "${_}" is not available -- attempting to fallback to a default font.`),ie=oe||r.fallbackFontDict}if(ie.cacheKey&&this.fontCache.has(ie.cacheKey))return this.fontCache.get(ie.cacheKey);const $=new i.PromiseCapability;let Z;try{Z=this.preEvaluateFont(ie),Z.cssFontInfo=T}catch(ae){return(0,i.warn)(`loadFont - preEvaluateFont failed: "${ae}".`),Q()}const{descriptor:te,hash:ne}=Z,X=v instanceof P.Ref;let re;if(ne&&te instanceof P.Dict){const ae=te.fontAliases||(te.fontAliases=Object.create(null));if(ae[ne]){const z=ae[ne].aliasRef;if(X&&z&&this.fontCache.has(z))return this.fontCache.putAlias(v,z),this.fontCache.get(v)}else ae[ne]={fontID:this.idFactory.createFontId()};X&&(ae[ne].aliasRef=v),re=ae[ne].fontID}else re=this.idFactory.createFontId();return(0,i.assert)(re==null?void 0:re.startsWith("f"),'The "fontID" must be (correctly) defined.'),X?this.fontCache.put(v,$.promise):(ie.cacheKey=`cacheKey_${re}`,this.fontCache.put(ie.cacheKey,$.promise)),ie.loadedName=`${this.idFactory.getDocId()}_${re}`,this.translateFont(Z).then(ae=>{$.resolve(new p({loadedName:ie.loadedName,font:ae,dict:ie,evaluatorOptions:this.options}))}).catch(ae=>{(0,i.warn)(`loadFont - translateFont failed: "${ae}".`),$.resolve(new p({loadedName:ie.loadedName,font:new e.ErrorFont(ae instanceof Error?ae.message:ae),dict:ie,evaluatorOptions:this.options}))}),$.promise}buildPath(_,ie,L,oe=!1){const T=_.length-1;if(L||(L=[]),T<0||_.fnArray[T]!==i.OPS.constructPath){oe&&((0,i.warn)(`Encountered path operator "${ie}" inside of a text object.`),_.addOp(i.OPS.save,null));let Q;switch(ie){case i.OPS.rectangle:const v=L[0]+L[2],$=L[1]+L[3];Q=[Math.min(L[0],v),Math.max(L[0],v),Math.min(L[1],$),Math.max(L[1],$)];break;case i.OPS.moveTo:case i.OPS.lineTo:Q=[L[0],L[0],L[1],L[1]];break;default:Q=[1/0,-1/0,1/0,-1/0];break}_.addOp(i.OPS.constructPath,[[ie],L,Q]),oe&&_.addOp(i.OPS.restore,null)}else{const Q=_.argsArray[T];Q[0].push(ie),Q[1].push(...L);const v=Q[2];switch(ie){case i.OPS.rectangle:const $=L[0]+L[2],Z=L[1]+L[3];v[0]=Math.min(v[0],L[0],$),v[1]=Math.max(v[1],L[0],$),v[2]=Math.min(v[2],L[1],Z),v[3]=Math.max(v[3],L[1],Z);break;case i.OPS.moveTo:case i.OPS.lineTo:v[0]=Math.min(v[0],L[0]),v[1]=Math.max(v[1],L[0]),v[2]=Math.min(v[2],L[1]),v[3]=Math.max(v[3],L[1]);break}}}parseColorSpace({cs:_,resources:ie,localColorSpaceCache:L}){return y.ColorSpace.parseAsync({cs:_,xref:this.xref,resources:ie,pdfFunctionFactory:this._pdfFunctionFactory,localColorSpaceCache:L}).catch(oe=>{if(oe instanceof i.AbortException)return null;if(this.options.ignoreErrors)return(0,i.warn)(`parseColorSpace - ignoring ColorSpace: "${oe}".`),null;throw oe})}parseShading({shading:_,resources:ie,localColorSpaceCache:L,localShadingPatternCache:oe}){let T=oe.get(_);if(!T){var Q=K.Pattern.parseShading(_,this.xref,ie,this._pdfFunctionFactory,L);const v=Q.getIR();T=`pattern_${this.idFactory.createObjId()}`,this.parsingType3Font&&(T=`${this.idFactory.getDocId()}_type3_${T}`),oe.set(_,T),this.parsingType3Font?this.handler.send("commonobj",[T,"Pattern",v]):this.handler.send("obj",[T,this.pageIndex,"Pattern",v])}return T}handleColorN(_,ie,L,oe,T,Q,v,$,Z,te){const ne=L.pop();if(ne instanceof P.Name){const X=T.getRaw(ne.name),re=X instanceof P.Ref&&Z.getByRef(X);if(re)try{const z=oe.base?oe.base.getRgb(L,0):null,le=(0,K.getTilingPatternIR)(re.operatorListIR,re.dict,z);_.addOp(ie,le);return}catch(z){}const ae=this.xref.fetchIfRef(X);if(ae){const z=ae instanceof I.BaseStream?ae.dict:ae,le=z.get("PatternType");if(le===F.TILING){const ue=oe.base?oe.base.getRgb(L,0):null;return this.handleTilingType(ie,ue,Q,ae,z,_,v,Z)}else if(le===F.SHADING){const ue=z.get("Shading"),ge=z.getArray("Matrix"),ke=this.parseShading({shading:ue,resources:Q,localColorSpaceCache:$,localShadingPatternCache:te});_.addOp(ie,["Shading",ke,ge]);return}throw new i.FormatError(`Unknown PatternType: ${le}`)}}throw new i.FormatError(`Unknown PatternName: ${ne}`)}_parseVisibilityExpression(_,ie,L){if(++ie>10){(0,i.warn)("Visibility expression is too deeply nested");return}const T=_.length,Q=this.xref.fetchIfRef(_[0]);if(T<2||!(Q instanceof P.Name)){(0,i.warn)("Invalid visibility expression");return}switch(Q.name){case"And":case"Or":case"Not":L.push(Q.name);break;default:(0,i.warn)(`Invalid operator ${Q.name} in visibility expression`);return}for(let v=1;v<T;v++){const $=_[v],Z=this.xref.fetchIfRef($);if(Array.isArray(Z)){const te=[];L.push(te),this._parseVisibilityExpression(Z,ie,te)}else $ instanceof P.Ref&&L.push($.toString())}}parseMarkedContentProps(_,ie){return rt(this,null,function*(){var T;let L;if(_ instanceof P.Name)L=ie.get("Properties").get(_.name);else if(_ instanceof P.Dict)L=_;else throw new i.FormatError("Optional content properties malformed.");const oe=(T=L.get("Type"))==null?void 0:T.name;if(oe==="OCG")return{type:oe,id:L.objId};if(oe==="OCMD"){const Q=L.get("VE");if(Array.isArray(Q)){const $=[];if(this._parseVisibilityExpression(Q,0,$),$.length>0)return{type:"OCMD",expression:$}}const v=L.get("OCGs");if(Array.isArray(v)||v instanceof P.Dict){const $=[];if(Array.isArray(v))for(const Z of v)$.push(Z.toString());else $.push(v.objId);return{type:oe,ids:$,policy:L.get("P")instanceof P.Name?L.get("P").name:null,expression:null}}else if(v instanceof P.Ref)return{type:oe,id:v.toString()}}return null})}getOperatorList({stream:_,task:ie,resources:L,operatorList:oe,initialState:T=null,fallbackFontDict:Q=null}){if(L||(L=P.Dict.empty),T||(T=new q),!oe)throw new Error('getOperatorList: missing "operatorList" parameter');const v=this,$=this.xref;let Z=!1;const te=new A.LocalImageCache,ne=new A.LocalColorSpaceCache,X=new A.LocalGStateCache,re=new A.LocalTilingPatternCache,ae=new Map,z=L.get("XObject")||P.Dict.empty,le=L.get("Pattern")||P.Dict.empty,ue=new c(T),ge=new J(_,$,ue),ke=new m;function me(fe){for(let xe=0,pe=ge.savedStatesDepth;xe<pe;xe++)oe.addOp(i.OPS.restore,[])}return new Promise(function fe(xe,pe){const we=function(Ie){Promise.all([Ie,oe.ready]).then(function(){try{fe(xe,pe)}catch(de){pe(de)}},pe)};ie.ensureNotTerminated(),ke.reset();const Oe={};let Te,Ce,Ae,Se,He,Ve;for(;!(Te=ke.check())&&(Oe.args=null,!!ge.read(Oe));){let Ie=Oe.args,de=Oe.fn;switch(de|0){case i.OPS.paintXObject:if(Ve=Ie[0]instanceof P.Name,He=Ie[0].name,Ve){const Be=te.getByName(He);if(Be){oe.addImageOps(Be.fn,Be.args,Be.optionalContent),S(Be),Ie=null;continue}}we(new Promise(function(Be,Pe){if(!Ve)throw new i.FormatError("XObject must be referred to by name.");let je=z.getRaw(He);if(je instanceof P.Ref){const $e=te.getByRef(je)||v._regionalImageCache.getByRef(je);if($e){oe.addImageOps($e.fn,$e.args,$e.optionalContent),S($e),Be();return}const ve=v.globalImageCache.getData(je,v.pageIndex);if(ve){oe.addDependency(ve.objId),oe.addImageOps(ve.fn,ve.args,ve.optionalContent),Be();return}je=$.fetch(je)}if(!(je instanceof I.BaseStream))throw new i.FormatError("XObject should be a stream");const Je=je.dict.get("Subtype");if(!(Je instanceof P.Name))throw new i.FormatError("XObject should have a Name subtype");if(Je.name==="Form"){ue.save(),v.buildFormXObject(L,je,null,oe,ie,ue.state.clone(),ne).then(function(){ue.restore(),Be()},Pe);return}else if(Je.name==="Image"){v.buildPaintImageXObject({resources:L,image:je,operatorList:oe,cacheKey:He,localImageCache:te,localColorSpaceCache:ne}).then(Be,Pe);return}else if(Je.name==="PS")(0,i.info)("Ignored XObject subtype PS");else throw new i.FormatError(`Unhandled XObject subtype ${Je.name}`);Be()}).catch(function(Be){if(!(Be instanceof i.AbortException)){if(v.options.ignoreErrors){(0,i.warn)(`getOperatorList - ignoring XObject: "${Be}".`);return}throw Be}}));return;case i.OPS.setFont:var Le=Ie[1];we(v.handleSetFont(L,Ie,null,oe,ie,ue.state,Q).then(function(Be){oe.addDependency(Be),oe.addOp(i.OPS.setFont,[Be,Le])}));return;case i.OPS.beginText:Z=!0;break;case i.OPS.endText:Z=!1;break;case i.OPS.endInlineImage:var Ye=Ie[0].cacheKey;if(Ye){const Be=te.getByName(Ye);if(Be){oe.addImageOps(Be.fn,Be.args,Be.optionalContent),S(Be),Ie=null;continue}}we(v.buildPaintImageXObject({resources:L,image:Ie[0],isInline:!0,operatorList:oe,cacheKey:Ye,localImageCache:te,localColorSpaceCache:ne}));return;case i.OPS.showText:if(!ue.state.font){v.ensureStateFont(ue.state);continue}Ie[0]=v.handleText(Ie[0],ue.state);break;case i.OPS.showSpacedText:if(!ue.state.font){v.ensureStateFont(ue.state);continue}var lt=[],Ee=ue.state;for(const Be of Ie[0])typeof Be=="string"?lt.push(...v.handleText(Be,Ee)):typeof Be=="number"&&lt.push(Be);Ie[0]=lt,de=i.OPS.showText;break;case i.OPS.nextLineShowText:if(!ue.state.font){v.ensureStateFont(ue.state);continue}oe.addOp(i.OPS.nextLine),Ie[0]=v.handleText(Ie[0],ue.state),de=i.OPS.showText;break;case i.OPS.nextLineSetSpacingShowText:if(!ue.state.font){v.ensureStateFont(ue.state);continue}oe.addOp(i.OPS.nextLine),oe.addOp(i.OPS.setWordSpacing,[Ie.shift()]),oe.addOp(i.OPS.setCharSpacing,[Ie.shift()]),Ie[0]=v.handleText(Ie[0],ue.state),de=i.OPS.showText;break;case i.OPS.setTextRenderingMode:ue.state.textRenderingMode=Ie[0];break;case i.OPS.setFillColorSpace:{const Be=y.ColorSpace.getCached(Ie[0],$,ne);if(Be){ue.state.fillColorSpace=Be;continue}we(v.parseColorSpace({cs:Ie[0],resources:L,localColorSpaceCache:ne}).then(function(Pe){Pe&&(ue.state.fillColorSpace=Pe)}));return}case i.OPS.setStrokeColorSpace:{const Be=y.ColorSpace.getCached(Ie[0],$,ne);if(Be){ue.state.strokeColorSpace=Be;continue}we(v.parseColorSpace({cs:Ie[0],resources:L,localColorSpaceCache:ne}).then(function(Pe){Pe&&(ue.state.strokeColorSpace=Pe)}));return}case i.OPS.setFillColor:Se=ue.state.fillColorSpace,Ie=Se.getRgb(Ie,0),de=i.OPS.setFillRGBColor;break;case i.OPS.setStrokeColor:Se=ue.state.strokeColorSpace,Ie=Se.getRgb(Ie,0),de=i.OPS.setStrokeRGBColor;break;case i.OPS.setFillGray:ue.state.fillColorSpace=y.ColorSpace.singletons.gray,Ie=y.ColorSpace.singletons.gray.getRgb(Ie,0),de=i.OPS.setFillRGBColor;break;case i.OPS.setStrokeGray:ue.state.strokeColorSpace=y.ColorSpace.singletons.gray,Ie=y.ColorSpace.singletons.gray.getRgb(Ie,0),de=i.OPS.setStrokeRGBColor;break;case i.OPS.setFillCMYKColor:ue.state.fillColorSpace=y.ColorSpace.singletons.cmyk,Ie=y.ColorSpace.singletons.cmyk.getRgb(Ie,0),de=i.OPS.setFillRGBColor;break;case i.OPS.setStrokeCMYKColor:ue.state.strokeColorSpace=y.ColorSpace.singletons.cmyk,Ie=y.ColorSpace.singletons.cmyk.getRgb(Ie,0),de=i.OPS.setStrokeRGBColor;break;case i.OPS.setFillRGBColor:ue.state.fillColorSpace=y.ColorSpace.singletons.rgb,Ie=y.ColorSpace.singletons.rgb.getRgb(Ie,0);break;case i.OPS.setStrokeRGBColor:ue.state.strokeColorSpace=y.ColorSpace.singletons.rgb,Ie=y.ColorSpace.singletons.rgb.getRgb(Ie,0);break;case i.OPS.setFillColorN:if(Se=ue.state.fillColorSpace,Se.name==="Pattern"){we(v.handleColorN(oe,i.OPS.setFillColorN,Ie,Se,le,L,ie,ne,re,ae));return}Ie=Se.getRgb(Ie,0),de=i.OPS.setFillRGBColor;break;case i.OPS.setStrokeColorN:if(Se=ue.state.strokeColorSpace,Se.name==="Pattern"){we(v.handleColorN(oe,i.OPS.setStrokeColorN,Ie,Se,le,L,ie,ne,re,ae));return}Ie=Se.getRgb(Ie,0),de=i.OPS.setStrokeRGBColor;break;case i.OPS.shadingFill:var ut=L.get("Shading");if(!ut)throw new i.FormatError("No shading resource found");var _e=ut.get(Ie[0].name);if(!_e)throw new i.FormatError("No shading object found");Ie=[v.parseShading({shading:_e,resources:L,localColorSpaceCache:ne,localShadingPatternCache:ae})],de=i.OPS.shadingFill;break;case i.OPS.setGState:if(Ve=Ie[0]instanceof P.Name,He=Ie[0].name,Ve){const Be=X.getByName(He);if(Be){Be.length>0&&oe.addOp(i.OPS.setGState,[Be]),Ie=null;continue}}we(new Promise(function(Be,Pe){if(!Ve)throw new i.FormatError("GState must be referred to by name.");const je=L.get("ExtGState");if(!(je instanceof P.Dict))throw new i.FormatError("ExtGState should be a dictionary.");const Je=je.get(He);if(!(Je instanceof P.Dict))throw new i.FormatError("GState should be a dictionary.");v.setGState({resources:L,gState:Je,operatorList:oe,cacheKey:He,task:ie,stateManager:ue,localGStateCache:X,localColorSpaceCache:ne}).then(Be,Pe)}).catch(function(Be){if(!(Be instanceof i.AbortException)){if(v.options.ignoreErrors){(0,i.warn)(`getOperatorList - ignoring ExtGState: "${Be}".`);return}throw Be}}));return;case i.OPS.moveTo:case i.OPS.lineTo:case i.OPS.curveTo:case i.OPS.curveTo2:case i.OPS.curveTo3:case i.OPS.closePath:case i.OPS.rectangle:v.buildPath(oe,de,Ie,Z);continue;case i.OPS.markPoint:case i.OPS.markPointProps:case i.OPS.beginCompat:case i.OPS.endCompat:continue;case i.OPS.beginMarkedContentProps:if(!(Ie[0]instanceof P.Name)){(0,i.warn)(`Expected name for beginMarkedContentProps arg0=${Ie[0]}`);continue}if(Ie[0].name==="OC"){we(v.parseMarkedContentProps(Ie[1],L).then(Be=>{oe.addOp(i.OPS.beginMarkedContentProps,["OC",Be])}).catch(Be=>{if(!(Be instanceof i.AbortException)){if(v.options.ignoreErrors){(0,i.warn)(`getOperatorList - ignoring beginMarkedContentProps: "${Be}".`);return}throw Be}}));return}Ie=[Ie[0].name,Ie[1]instanceof P.Dict?Ie[1].get("MCID"):null];break;case i.OPS.beginMarkedContent:case i.OPS.endMarkedContent:default:if(Ie!==null){for(Ce=0,Ae=Ie.length;Ce<Ae&&!(Ie[Ce]instanceof P.Dict);Ce++);if(Ce<Ae){(0,i.warn)("getOperatorList - ignoring operator: "+de);continue}}}oe.addOp(de,Ie)}if(Te){we(U);return}me(),xe()}).catch(fe=>{if(!(fe instanceof i.AbortException)){if(this.options.ignoreErrors){(0,i.warn)(`getOperatorList - ignoring errors during "${ie.name}" task: "${fe}".`),me();return}throw fe}})}getTextContent({stream:_,task:ie,resources:L,stateManager:oe=null,includeMarkedContent:T=!1,sink:Q,seenStyles:v=new Set,viewBox:$,markedContentData:Z=null,disableNormalization:te=!1}){L||(L=P.Dict.empty),oe||(oe=new c(new u)),T&&(Z||(Z={level:0}));const ne={items:[],styles:Object.create(null)},X={initialized:!1,str:[],totalWidth:0,totalHeight:0,width:0,height:0,vertical:!1,prevTransform:null,textAdvanceScale:0,spaceInFlowMin:0,spaceInFlowMax:0,trackingSpaceMin:1/0,negativeSpaceMax:-1/0,notASpace:-1/0,transform:null,fontName:null,hasEOL:!1},re=[" "," "];let ae=0;function z(ve){const We=(ae+1)%2,tt=re[ae]!==" "&&re[We]===" ";return re[ae]=ve,ae=We,tt}function le(){return re[ae]!==" "&&re[(ae+1)%2]===" "}function ue(){re[0]=re[1]=" ",ae=0}const ge=.102,ke=.03,me=-.2,fe=.102,xe=.6,pe=.25,we=this,Oe=this.xref,Te=[];let Ce=null;const Ae=new A.LocalImageCache,Se=new A.LocalGStateCache,He=new J(_,Oe,oe);let Ve;function Le({width:ve=0,height:We=0,transform:tt=X.prevTransform,fontName:at=X.fontName}){ne.items.push({str:" ",dir:"ltr",width:ve,height:We,transform:tt,fontName:at,hasEOL:!1})}function Ye(){const ve=Ve.font,We=[Ve.fontSize*Ve.textHScale,0,0,Ve.fontSize,0,Ve.textRise];if(ve.isType3Font&&(Ve.fontSize<=1||ve.isCharBBox)&&!(0,i.isArrayEqual)(Ve.fontMatrix,i.FONT_IDENTITY_MATRIX)){const tt=ve.bbox[3]-ve.bbox[1];tt>0&&(We[3]*=tt*Ve.fontMatrix[3])}return i.Util.transform(Ve.ctm,i.Util.transform(Ve.textMatrix,We))}function lt(){if(X.initialized)return X;const{font:ve,loadedName:We}=Ve;v.has(We)||(v.add(We),ne.styles[We]={fontFamily:ve.fallbackName,ascent:ve.ascent,descent:ve.descent,vertical:ve.vertical}),X.fontName=We;const tt=X.transform=Ye();ve.vertical?(X.width=X.totalWidth=Math.hypot(tt[0],tt[1]),X.height=X.totalHeight=0,X.vertical=!0):(X.width=X.totalWidth=0,X.height=X.totalHeight=Math.hypot(tt[2],tt[3]),X.vertical=!1);const at=Math.hypot(Ve.textLineMatrix[0],Ve.textLineMatrix[1]),ct=Math.hypot(Ve.ctm[0],Ve.ctm[1]);X.textAdvanceScale=ct*at;const{fontSize:gt}=Ve;return X.trackingSpaceMin=gt*ge,X.notASpace=gt*ke,X.negativeSpaceMax=gt*me,X.spaceInFlowMin=gt*fe,X.spaceInFlowMax=gt*xe,X.hasEOL=!1,X.initialized=!0,X}function Ee(){if(!X.initialized)return;const ve=Math.hypot(Ve.textLineMatrix[0],Ve.textLineMatrix[1]),tt=Math.hypot(Ve.ctm[0],Ve.ctm[1])*ve;tt!==X.textAdvanceScale&&(X.vertical?(X.totalHeight+=X.height*X.textAdvanceScale,X.height=0):(X.totalWidth+=X.width*X.textAdvanceScale,X.width=0),X.textAdvanceScale=tt)}function ut(ve){let We=ve.str.join("");te||(We=(0,i.normalizeUnicode)(We));const tt=(0,k.bidi)(We,-1,ve.vertical);return{str:tt.str,dir:tt.dir,width:Math.abs(ve.totalWidth),height:Math.abs(ve.totalHeight),transform:ve.transform,fontName:ve.fontName,hasEOL:ve.hasEOL}}function _e(ve,We){return we.loadFont(ve,We,L).then(function(tt){return tt.font.isType3Font?tt.loadType3Data(we,L,ie).catch(function(){}).then(function(){return tt}):tt}).then(function(tt){Ve.loadedName=tt.loadedName,Ve.font=tt.font,Ve.fontMatrix=tt.font.fontMatrix||i.FONT_IDENTITY_MATRIX})}function Ie(ve,We,tt){const at=Math.hypot(tt[0],tt[1]);return[(tt[0]*ve+tt[1]*We)/at,(tt[2]*ve+tt[3]*We)/at]}function de(ve){var Ge;const We=Ye();let tt=We[4],at=We[5];if((Ge=Ve.font)!=null&&Ge.vertical){if(tt<$[0]||tt>$[2]||at+ve<$[1]||at>$[3])return!1}else if(tt+ve<$[0]||tt>$[2]||at<$[1]||at>$[3])return!1;if(!Ve.font||!X.prevTransform)return!0;let ct=X.prevTransform[4],gt=X.prevTransform[5];if(ct===tt&&gt===at)return!0;let ht=-1;switch(We[0]&&We[1]===0&&We[2]===0?ht=We[0]>0?0:180:We[1]&&We[0]===0&&We[3]===0&&(ht=We[1]>0?90:270),ht){case 0:break;case 90:[tt,at]=[at,tt],[ct,gt]=[gt,ct];break;case 180:[tt,at,ct,gt]=[-tt,-at,-ct,-gt];break;case 270:[tt,at]=[-at,-tt],[ct,gt]=[-gt,-ct];break;default:[tt,at]=Ie(tt,at,We),[ct,gt]=Ie(ct,gt,X.prevTransform)}if(Ve.font.vertical){const et=(gt-at)/X.textAdvanceScale,ot=tt-ct,dt=Math.sign(X.height);return et<dt*X.negativeSpaceMax?Math.abs(ot)>.5*X.width?(Be(),!0):(ue(),je(),!0):Math.abs(ot)>X.width?(Be(),!0):(et<=dt*X.notASpace&&ue(),et<=dt*X.trackingSpaceMin?le()?(ue(),je(),Le({height:Math.abs(et)})):X.height+=et:Pe(et,X.prevTransform,dt)||(X.str.length===0?(ue(),Le({height:Math.abs(et)})):X.height+=et),Math.abs(ot)>X.width*pe&&je(),!0)}const kt=(tt-ct)/X.textAdvanceScale,Dt=at-gt,ze=Math.sign(X.width);return kt<ze*X.negativeSpaceMax?Math.abs(Dt)>.5*X.height?(Be(),!0):(ue(),je(),!0):Math.abs(Dt)>X.height?(Be(),!0):(kt<=ze*X.notASpace&&ue(),kt<=ze*X.trackingSpaceMin?le()?(ue(),je(),Le({width:Math.abs(kt)})):X.width+=kt:Pe(kt,X.prevTransform,ze)||(X.str.length===0?(ue(),Le({width:Math.abs(kt)})):X.width+=kt),Math.abs(Dt)>X.height*pe&&je(),!0)}function be({chars:ve,extraSpacing:We}){const tt=Ve.font;if(!ve){const gt=Ve.charSpacing+We;gt&&(tt.vertical?Ve.translateTextMatrix(0,-gt):Ve.translateTextMatrix(gt*Ve.textHScale,0));return}const at=tt.charsToGlyphs(ve),ct=Ve.fontMatrix[0]*Ve.fontSize;for(let gt=0,ht=at.length;gt<ht;gt++){const kt=at[gt],{category:Dt}=kt;if(Dt.isInvisibleFormatMark)continue;let ze=Ve.charSpacing+(gt+1===ht?We:0),Ge=kt.width;tt.vertical&&(Ge=kt.vmetric?kt.vmetric[0]:-Ge);let et=Ge*ct;if(Dt.isWhitespace){tt.vertical?(ze+=-et+Ve.wordSpacing,Ve.translateTextMatrix(0,-ze)):(ze+=et+Ve.wordSpacing,Ve.translateTextMatrix(ze*Ve.textHScale,0)),z(" ");continue}if(!Dt.isZeroWidthDiacritic&&!de(et)){tt.vertical?Ve.translateTextMatrix(0,et):Ve.translateTextMatrix(et*Ve.textHScale,0);continue}const ot=lt();Dt.isZeroWidthDiacritic&&(et=0),tt.vertical?(Ve.translateTextMatrix(0,et),et=Math.abs(et),ot.height+=et):(et*=Ve.textHScale,Ve.translateTextMatrix(et,0),ot.width+=et),et&&(ot.prevTransform=Ye());const dt=kt.unicode;z(dt)&&ot.str.push(" "),ot.str.push(dt),ze&&(tt.vertical?Ve.translateTextMatrix(0,-ze):Ve.translateTextMatrix(ze*Ve.textHScale,0))}}function Be(){ue(),X.initialized?(X.hasEOL=!0,je()):ne.items.push({str:"",dir:"ltr",width:0,height:0,transform:Ye(),fontName:Ve.loadedName,hasEOL:!0})}function Pe(ve,We,tt){if(tt*X.spaceInFlowMin<=ve&&ve<=tt*X.spaceInFlowMax)return X.initialized&&(ue(),X.str.push(" ")),!1;const at=X.fontName;let ct=0;return X.vertical&&(ct=ve,ve=0),je(),ue(),Le({width:Math.abs(ve),height:Math.abs(ct),transform:We||Ye(),fontName:at}),!0}function je(){!X.initialized||!X.str||(X.vertical?X.totalHeight+=X.height*X.textAdvanceScale:X.totalWidth+=X.width*X.textAdvanceScale,ne.items.push(ut(X)),X.initialized=!1,X.str.length=0)}function Je(ve=!1){const We=ne.items.length;We!==0&&(ve&&We<N||(Q.enqueue(ne,We),ne.items=[],ne.styles=Object.create(null)))}const $e=new m;return new Promise(function ve(We,tt){const at=function(et){Je(!0),Promise.all([et,Q.ready]).then(function(){try{ve(We,tt)}catch(ot){tt(ot)}},tt)};ie.ensureNotTerminated(),$e.reset();const ct={};let gt,ht=[];for(;!(gt=$e.check())&&(ht.length=0,ct.args=ht,!!He.read(ct));){const et=Ve;Ve=oe.state;const ot=ct.fn;switch(ht=ct.args,ot|0){case i.OPS.setFont:var kt=ht[0].name,Dt=ht[1];if(Ve.font&&kt===Ve.fontName&&Dt===Ve.fontSize)break;je(),Ve.fontName=kt,Ve.fontSize=Dt,at(_e(kt,null));return;case i.OPS.setTextRise:Ve.textRise=ht[0];break;case i.OPS.setHScale:Ve.textHScale=ht[0]/100;break;case i.OPS.setLeading:Ve.leading=ht[0];break;case i.OPS.moveText:Ve.translateTextLineMatrix(ht[0],ht[1]),Ve.textMatrix=Ve.textLineMatrix.slice();break;case i.OPS.setLeadingMoveText:Ve.leading=-ht[1],Ve.translateTextLineMatrix(ht[0],ht[1]),Ve.textMatrix=Ve.textLineMatrix.slice();break;case i.OPS.nextLine:Ve.carriageReturn();break;case i.OPS.setTextMatrix:Ve.setTextMatrix(ht[0],ht[1],ht[2],ht[3],ht[4],ht[5]),Ve.setTextLineMatrix(ht[0],ht[1],ht[2],ht[3],ht[4],ht[5]),Ee();break;case i.OPS.setCharSpacing:Ve.charSpacing=ht[0];break;case i.OPS.setWordSpacing:Ve.wordSpacing=ht[0];break;case i.OPS.beginText:Ve.textMatrix=i.IDENTITY_MATRIX.slice(),Ve.textLineMatrix=i.IDENTITY_MATRIX.slice();break;case i.OPS.showSpacedText:if(!oe.state.font){we.ensureStateFont(oe.state);continue}const dt=(Ve.font.vertical?1:-1)*Ve.fontSize/1e3,bt=ht[0];for(let At=0,st=bt.length;At<st;At++){const xt=bt[At];if(typeof xt=="string")Te.push(xt);else if(typeof xt=="number"&&xt!==0){const wt=Te.join("");Te.length=0,be({chars:wt,extraSpacing:xt*dt})}}if(Te.length>0){const At=Te.join("");Te.length=0,be({chars:At,extraSpacing:0})}break;case i.OPS.showText:if(!oe.state.font){we.ensureStateFont(oe.state);continue}be({chars:ht[0],extraSpacing:0});break;case i.OPS.nextLineShowText:if(!oe.state.font){we.ensureStateFont(oe.state);continue}Ve.carriageReturn(),be({chars:ht[0],extraSpacing:0});break;case i.OPS.nextLineSetSpacingShowText:if(!oe.state.font){we.ensureStateFont(oe.state);continue}Ve.wordSpacing=ht[0],Ve.charSpacing=ht[1],Ve.carriageReturn(),be({chars:ht[2],extraSpacing:0});break;case i.OPS.paintXObject:je(),Ce||(Ce=L.get("XObject")||P.Dict.empty);var ze=ht[0]instanceof P.Name,Ge=ht[0].name;if(ze&&Ae.getByName(Ge))break;at(new Promise(function(At,st){if(!ze)throw new i.FormatError("XObject must be referred to by name.");let xt=Ce.getRaw(Ge);if(xt instanceof P.Ref){if(Ae.getByRef(xt)){At();return}if(we.globalImageCache.getData(xt,we.pageIndex)){At();return}xt=Oe.fetch(xt)}if(!(xt instanceof I.BaseStream))throw new i.FormatError("XObject should be a stream");const wt=xt.dict.get("Subtype");if(!(wt instanceof P.Name))throw new i.FormatError("XObject should have a Name subtype");if(wt.name!=="Form"){Ae.set(Ge,xt.dict.objId,!0),At();return}const Pt=oe.state.clone(),qt=new c(Pt),Bt=xt.dict.getArray("Matrix");Array.isArray(Bt)&&Bt.length===6&&qt.transform(Bt),Je();const Ut={enqueueInvoked:!1,enqueue(St,Ot){this.enqueueInvoked=!0,Q.enqueue(St,Ot)},get desiredSize(){return Q.desiredSize},get ready(){return Q.ready}};we.getTextContent({stream:xt,task:ie,resources:xt.dict.get("Resources")||L,stateManager:qt,includeMarkedContent:T,sink:Ut,seenStyles:v,viewBox:$,markedContentData:Z,disableNormalization:te}).then(function(){Ut.enqueueInvoked||Ae.set(Ge,xt.dict.objId,!0),At()},st)}).catch(function(At){if(!(At instanceof i.AbortException)){if(we.options.ignoreErrors){(0,i.warn)(`getTextContent - ignoring XObject: "${At}".`);return}throw At}}));return;case i.OPS.setGState:if(ze=ht[0]instanceof P.Name,Ge=ht[0].name,ze&&Se.getByName(Ge))break;at(new Promise(function(At,st){if(!ze)throw new i.FormatError("GState must be referred to by name.");const xt=L.get("ExtGState");if(!(xt instanceof P.Dict))throw new i.FormatError("ExtGState should be a dictionary.");const wt=xt.get(Ge);if(!(wt instanceof P.Dict))throw new i.FormatError("GState should be a dictionary.");const Pt=wt.get("Font");if(!Pt){Se.set(Ge,wt.objId,!0),At();return}je(),Ve.fontName=null,Ve.fontSize=Pt[1],_e(null,Pt[0]).then(At,st)}).catch(function(At){if(!(At instanceof i.AbortException)){if(we.options.ignoreErrors){(0,i.warn)(`getTextContent - ignoring ExtGState: "${At}".`);return}throw At}}));return;case i.OPS.beginMarkedContent:je(),T&&(Z.level++,ne.items.push({type:"beginMarkedContent",tag:ht[0]instanceof P.Name?ht[0].name:null}));break;case i.OPS.beginMarkedContentProps:if(je(),T){Z.level++;let At=null;ht[1]instanceof P.Dict&&(At=ht[1].get("MCID")),ne.items.push({type:"beginMarkedContentProps",id:Number.isInteger(At)?`${we.idFactory.getPageObjId()}_mc${At}`:null,tag:ht[0]instanceof P.Name?ht[0].name:null})}break;case i.OPS.endMarkedContent:if(je(),T){if(Z.level===0)break;Z.level--,ne.items.push({type:"endMarkedContent"})}break;case i.OPS.restore:et&&(et.font!==Ve.font||et.fontSize!==Ve.fontSize||et.fontName!==Ve.fontName)&&je();break}if(ne.items.length>=Q.desiredSize){gt=!0;break}}if(gt){at(U);return}je(),Je(),We()}).catch(ve=>{if(!(ve instanceof i.AbortException)){if(this.options.ignoreErrors){(0,i.warn)(`getTextContent - ignoring errors during "${ie.name}" task: "${ve}".`),je(),Je();return}throw ve}})}extractDataStructures(_,ie,L){const oe=this.xref;let T;const Q=this.readToUnicode(L.toUnicode||_.get("ToUnicode")||ie.get("ToUnicode"));if(L.composite){const X=_.get("CIDSystemInfo");X instanceof P.Dict&&(L.cidSystemInfo={registry:(0,i.stringToPDFString)(X.get("Registry")),ordering:(0,i.stringToPDFString)(X.get("Ordering")),supplement:X.get("Supplement")});try{const re=_.get("CIDToGIDMap");re instanceof I.BaseStream&&(T=re.getBytes())}catch(re){if(!this.options.ignoreErrors)throw re;(0,i.warn)(`extractDataStructures - ignoring CIDToGIDMap data: "${re}".`)}}const v=[];let $=null,Z;if(_.has("Encoding")){if(Z=_.get("Encoding"),Z instanceof P.Dict){if($=Z.get("BaseEncoding"),$=$ instanceof P.Name?$.name:null,Z.has("Differences")){const X=Z.get("Differences");let re=0;for(const ae of X){const z=oe.fetchIfRef(ae);if(typeof z=="number")re=z;else if(z instanceof P.Name)v[re++]=z.name;else throw new i.FormatError(`Invalid entry in 'Differences' array: ${z}`)}}}else if(Z instanceof P.Name)$=Z.name;else{const X="Encoding is not a Name nor a Dict";if(!this.options.ignoreErrors)throw new i.FormatError(X);(0,i.warn)(X)}$!=="MacRomanEncoding"&&$!=="MacExpertEncoding"&&$!=="WinAnsiEncoding"&&($=null)}const te=!L.file||L.isInternalFont,ne=(0,o.getSymbolsFonts)()[L.name];if($&&te&&ne&&($=null),$)L.defaultEncoding=(0,t.getEncoding)($);else{const X=!!(L.flags&R.FontFlags.Symbolic),re=!!(L.flags&R.FontFlags.Nonsymbolic);Z=t.StandardEncoding,L.type==="TrueType"&&!re&&(Z=t.WinAnsiEncoding),(X||ne)&&(Z=t.MacRomanEncoding,te&&(/Symbol/i.test(L.name)?Z=t.SymbolSetEncoding:/Dingbats/i.test(L.name)?Z=t.ZapfDingbatsEncoding:/Wingdings/i.test(L.name)&&(Z=t.WinAnsiEncoding))),L.defaultEncoding=Z}return L.differences=v,L.baseEncodingName=$,L.hasEncoding=!!$||v.length>0,L.dict=_,Q.then(X=>(L.toUnicode=X,this.buildToUnicode(L))).then(X=>(L.toUnicode=X,T&&(L.cidToGidMap=this.readCidToGidMap(T,X)),L))}_simpleFontToUnicode(_,ie=!1){(0,i.assert)(!_.composite,"Must be a simple font.");const L=[],oe=_.defaultEncoding.slice(),T=_.baseEncodingName,Q=_.differences;for(const $ in Q){const Z=Q[$];Z!==".notdef"&&(oe[$]=Z)}const v=(0,M.getGlyphsUnicode)();for(const $ in oe){let Z=oe[$];if(Z==="")continue;let te=v[Z];if(te!==void 0){L[$]=String.fromCharCode(te);continue}let ne=0;switch(Z[0]){case"G":Z.length===3&&(ne=parseInt(Z.substring(1),16));break;case"g":Z.length===5&&(ne=parseInt(Z.substring(1),16));break;case"C":case"c":if(Z.length>=3&&Z.length<=4){const X=Z.substring(1);if(ie){ne=parseInt(X,16);break}if(ne=+X,Number.isNaN(ne)&&Number.isInteger(parseInt(X,16)))return this._simpleFontToUnicode(_,!0)}break;case"u":te=(0,V.getUnicodeForGlyph)(Z,v),te!==-1&&(ne=te);break;default:switch(Z){case"f_h":case"f_t":case"T_h":L[$]=Z.replaceAll("_","");continue}break}if(ne>0&&ne<=1114111&&Number.isInteger(ne)){if(T&&ne===+$){const X=(0,t.getEncoding)(T);if(X&&(Z=X[$])){L[$]=String.fromCharCode(v[Z]);continue}}L[$]=String.fromCodePoint(ne)}}return L}buildToUnicode(_){return rt(this,null,function*(){var ie;if(_.hasIncludedToUnicodeMap=((ie=_.toUnicode)==null?void 0:ie.length)>0,_.hasIncludedToUnicodeMap)return!_.composite&&_.hasEncoding&&(_.fallbackToUnicode=this._simpleFontToUnicode(_)),_.toUnicode;if(!_.composite)return new C.ToUnicodeMap(this._simpleFontToUnicode(_));if(_.composite&&(_.cMap.builtInCMap&&!(_.cMap instanceof w.IdentityCMap)||_.cidSystemInfo.registry==="Adobe"&&(_.cidSystemInfo.ordering==="GB1"||_.cidSystemInfo.ordering==="CNS1"||_.cidSystemInfo.ordering==="Japan1"||_.cidSystemInfo.ordering==="Korea1"))){const{registry:L,ordering:oe}=_.cidSystemInfo,T=P.Name.get(`${L}-${oe}-UCS2`),Q=yield w.CMapFactory.create({encoding:T,fetchBuiltInCMap:this._fetchBuiltInCMapBound,useCMap:null}),v=[],$=[];return _.cMap.forEach(function(Z,te){if(te>65535)throw new i.FormatError("Max size of CID is 65,535");const ne=Q.lookup(te);if(ne){$.length=0;for(let X=0,re=ne.length;X<re;X+=2)$.push((ne.charCodeAt(X)<<8)+ne.charCodeAt(X+1));v[Z]=String.fromCharCode(...$)}}),new C.ToUnicodeMap(v)}return new C.IdentityToUnicodeMap(_.firstChar,_.lastChar)})}readToUnicode(_){return _?_ instanceof P.Name?w.CMapFactory.create({encoding:_,fetchBuiltInCMap:this._fetchBuiltInCMapBound,useCMap:null}).then(function(ie){return ie instanceof w.IdentityCMap?new C.IdentityToUnicodeMap(0,65535):new C.ToUnicodeMap(ie.getMap())}):_ instanceof I.BaseStream?w.CMapFactory.create({encoding:_,fetchBuiltInCMap:this._fetchBuiltInCMapBound,useCMap:null}).then(function(ie){if(ie instanceof w.IdentityCMap)return new C.IdentityToUnicodeMap(0,65535);const L=new Array(ie.length);return ie.forEach(function(oe,T){if(typeof T=="number"){L[oe]=String.fromCodePoint(T);return}const Q=[];for(let v=0;v<T.length;v+=2){const $=T.charCodeAt(v)<<8|T.charCodeAt(v+1);if(($&63488)!==55296){Q.push($);continue}v+=2;const Z=T.charCodeAt(v)<<8|T.charCodeAt(v+1);Q.push((($&1023)<<10)+(Z&1023)+65536)}L[oe]=String.fromCodePoint(...Q)}),new C.ToUnicodeMap(L)},ie=>{if(ie instanceof i.AbortException)return null;if(this.options.ignoreErrors)return(0,i.warn)(`readToUnicode - ignoring ToUnicode data: "${ie}".`),null;throw ie}):Promise.resolve(null):Promise.resolve(null)}readCidToGidMap(_,ie){const L=[];for(let oe=0,T=_.length;oe<T;oe++){const Q=_[oe++]<<8|_[oe],v=oe>>1;Q===0&&!ie.has(v)||(L[v]=Q)}return L}extractWidths(_,ie,L){const oe=this.xref;let T=[],Q=0;const v=[];let $,Z,te,ne,X,re,ae,z;if(L.composite){if(Q=_.has("DW")?_.get("DW"):1e3,z=_.get("W"),z)for(Z=0,te=z.length;Z<te;Z++)if(re=oe.fetchIfRef(z[Z++]),ae=oe.fetchIfRef(z[Z]),Array.isArray(ae))for(ne=0,X=ae.length;ne<X;ne++)T[re++]=oe.fetchIfRef(ae[ne]);else{const ge=oe.fetchIfRef(z[++Z]);for(ne=re;ne<=ae;ne++)T[ne]=ge}if(L.vertical){let ge=_.getArray("DW2")||[880,-1e3];if($=[ge[1],Q*.5,ge[0]],ge=_.get("W2"),ge)for(Z=0,te=ge.length;Z<te;Z++)if(re=oe.fetchIfRef(ge[Z++]),ae=oe.fetchIfRef(ge[Z]),Array.isArray(ae))for(ne=0,X=ae.length;ne<X;ne++)v[re++]=[oe.fetchIfRef(ae[ne++]),oe.fetchIfRef(ae[ne++]),oe.fetchIfRef(ae[ne])];else{const ke=[oe.fetchIfRef(ge[++Z]),oe.fetchIfRef(ge[++Z]),oe.fetchIfRef(ge[++Z])];for(ne=re;ne<=ae;ne++)v[ne]=ke}}}else{const ge=L.firstChar;if(z=_.get("Widths"),z){for(ne=ge,Z=0,te=z.length;Z<te;Z++)T[ne++]=oe.fetchIfRef(z[Z]);Q=parseFloat(ie.get("MissingWidth"))||0}else{const ke=_.get("BaseFont");if(ke instanceof P.Name){const me=this.getBaseFontMetrics(ke.name);T=this.buildCharCodeToWidth(me.widths,L),Q=me.defaultWidth}}}let le=!0,ue=Q;for(const ge in T){const ke=T[ge];if(ke){if(!ue){ue=ke;continue}if(ue!==ke){le=!1;break}}}le?L.flags|=R.FontFlags.FixedPitch:L.flags&=~R.FontFlags.FixedPitch,L.defaultWidth=Q,L.widths=T,L.defaultVMetrics=$,L.vmetrics=v}isSerifFont(_){const ie=_.split("-")[0];return ie in(0,o.getSerifFonts)()||/serif/gi.test(ie)}getBaseFontMetrics(_){let ie=0,L=Object.create(null),oe=!1,Q=(0,o.getStdFontMap)()[_]||_;const v=(0,b.getMetrics)();Q in v||(Q=this.isSerifFont(_)?"Times-Roman":"Helvetica");const $=v[Q];return typeof $=="number"?(ie=$,oe=!0):L=$(),{defaultWidth:ie,monospace:oe,widths:L}}buildCharCodeToWidth(_,ie){const L=Object.create(null),oe=ie.differences,T=ie.defaultEncoding;for(let Q=0;Q<256;Q++){if(Q in oe&&_[oe[Q]]){L[Q]=_[oe[Q]];continue}if(Q in T&&_[T[Q]]){L[Q]=_[T[Q]];continue}}return L}preEvaluateFont(_){const ie=_;let L=_.get("Subtype");if(!(L instanceof P.Name))throw new i.FormatError("invalid font Subtype");let oe=!1,T,Q;if(L.name==="Type0"){const te=_.get("DescendantFonts");if(!te)throw new i.FormatError("Descendant fonts are not specified");if(_=Array.isArray(te)?this.xref.fetchIfRef(te[0]):te,!(_ instanceof P.Dict))throw new i.FormatError("Descendant font is not a dictionary.");if(L=_.get("Subtype"),!(L instanceof P.Name))throw new i.FormatError("invalid font Subtype");oe=!0}const v=_.get("FirstChar")||0,$=_.get("LastChar")||(oe?65535:255),Z=_.get("FontDescriptor");if(Z){T=new x.MurmurHash3_64;const te=ie.getRaw("Encoding");if(te instanceof P.Name)T.update(te.name);else if(te instanceof P.Ref)T.update(te.toString());else if(te instanceof P.Dict){for(const X of te.getRawValues())if(X instanceof P.Name)T.update(X.name);else if(X instanceof P.Ref)T.update(X.toString());else if(Array.isArray(X)){const re=X.length,ae=new Array(re);for(let z=0;z<re;z++){const le=X[z];le instanceof P.Name?ae[z]=le.name:(typeof le=="number"||le instanceof P.Ref)&&(ae[z]=le.toString())}T.update(ae.join())}}if(T.update(`${v}-${$}`),Q=_.get("ToUnicode")||ie.get("ToUnicode"),Q instanceof I.BaseStream){const X=Q.str||Q,re=X.buffer?new Uint8Array(X.buffer.buffer,0,X.bufferLength):new Uint8Array(X.bytes.buffer,X.start,X.end-X.start);T.update(re)}else Q instanceof P.Name&&T.update(Q.name);const ne=_.get("Widths")||ie.get("Widths");if(Array.isArray(ne)){const X=[];for(const re of ne)(typeof re=="number"||re instanceof P.Ref)&&X.push(re.toString());T.update(X.join())}if(oe){T.update("compositeFont");const X=_.get("W")||ie.get("W");if(Array.isArray(X)){const ae=[];for(const z of X)if(typeof z=="number"||z instanceof P.Ref)ae.push(z.toString());else if(Array.isArray(z)){const le=[];for(const ue of z)(typeof ue=="number"||ue instanceof P.Ref)&&le.push(ue.toString());ae.push(`[${le.join()}]`)}T.update(ae.join())}const re=_.getRaw("CIDToGIDMap")||ie.getRaw("CIDToGIDMap");re instanceof P.Name?T.update(re.name):re instanceof P.Ref?T.update(re.toString()):re instanceof I.BaseStream&&T.update(re.peekBytes())}}return{descriptor:Z,dict:_,baseDict:ie,composite:oe,type:L.name,firstChar:v,lastChar:$,toUnicode:Q,hash:T?T.hexdigest():""}}translateFont(te){return rt(this,arguments,function*({descriptor:_,dict:ie,baseDict:L,composite:oe,type:T,firstChar:Q,lastChar:v,toUnicode:$,cssFontInfo:Z}){const ne=T==="Type3";let X;if(!_)if(ne)_=new P.Dict(null),_.set("FontName",P.Name.get(T)),_.set("FontBBox",ie.getArray("FontBBox")||[0,0,0,0]);else{let Oe=ie.get("BaseFont");if(!(Oe instanceof P.Name))throw new i.FormatError("Base font is not specified");Oe=Oe.name.replaceAll(/[,_]/g,"-");const Te=this.getBaseFontMetrics(Oe),Ce=Oe.split("-")[0],Ae=(this.isSerifFont(Ce)?R.FontFlags.Serif:0)|(Te.monospace?R.FontFlags.FixedPitch:0)|((0,o.getSymbolsFonts)()[Ce]?R.FontFlags.Symbolic:R.FontFlags.Nonsymbolic);X={type:T,name:Oe,loadedName:L.loadedName,systemFontInfo:null,widths:Te.widths,defaultWidth:Te.defaultWidth,isSimulatedFlags:!0,flags:Ae,firstChar:Q,lastChar:v,toUnicode:$,xHeight:0,capHeight:0,italicAngle:0,isType3Font:ne};const Se=ie.get("Widths"),He=(0,o.getStandardFontName)(Oe);let Ve=null;return He&&(Ve=yield this.fetchStandardFontData(He),X.isInternalFont=!!Ve),!X.isInternalFont&&this.options.useSystemFonts&&(X.systemFontInfo=(0,E.getFontSubstitution)(this.systemFontCache,this.idFactory,this.options.standardFontDataUrl,Oe,He)),this.extractDataStructures(ie,ie,X).then(Le=>{if(Se){const Ye=[];let lt=Q;for(const Ee of Se)Ye[lt++]=this.xref.fetchIfRef(Ee);Le.widths=Ye}else Le.widths=this.buildCharCodeToWidth(Te.widths,Le);return new e.Font(Oe,Ve,Le)})}let re=_.get("FontName"),ae=ie.get("BaseFont");typeof re=="string"&&(re=P.Name.get(re)),typeof ae=="string"&&(ae=P.Name.get(ae));const z=re==null?void 0:re.name,le=ae==null?void 0:ae.name;if(!ne&&z!==le&&((0,i.info)(`The FontDescriptor's FontName is "${z}" but should be the same as the Font's BaseFont "${le}".`),z&&le&&(le.startsWith(z)||!(0,o.isKnownFontName)(z)&&(0,o.isKnownFontName)(le))&&(re=null)),re||(re=ae),!(re instanceof P.Name))throw new i.FormatError("invalid font name");let ue,ge,ke,me,fe;try{ue=_.get("FontFile","FontFile2","FontFile3")}catch(Oe){if(!this.options.ignoreErrors)throw Oe;(0,i.warn)(`translateFont - fetching "${re.name}" font file: "${Oe}".`),ue=new n.NullStream}let xe=!1,pe=null,we=null;if(ue){if(ue.dict){const Oe=ue.dict.get("Subtype");Oe instanceof P.Name&&(ge=Oe.name),ke=ue.dict.get("Length1"),me=ue.dict.get("Length2"),fe=ue.dict.get("Length3")}}else if(Z){const Oe=(0,j.getXfaFontName)(re.name);Oe&&(Z.fontFamily=`${Z.fontFamily}-PdfJS-XFA`,Z.metrics=Oe.metrics||null,pe=Oe.factors||null,ue=yield this.fetchStandardFontData(Oe.name),xe=!!ue,L=ie=(0,j.getXfaFontDict)(re.name),oe=!0)}else if(!ne){const Oe=(0,o.getStandardFontName)(re.name);Oe&&(ue=yield this.fetchStandardFontData(Oe),xe=!!ue),!xe&&this.options.useSystemFonts&&(we=(0,E.getFontSubstitution)(this.systemFontCache,this.idFactory,this.options.standardFontDataUrl,re.name,Oe))}if(X={type:T,name:re.name,subtype:ge,file:ue,length1:ke,length2:me,length3:fe,isInternalFont:xe,loadedName:L.loadedName,composite:oe,fixedPitch:!1,fontMatrix:ie.getArray("FontMatrix")||i.FONT_IDENTITY_MATRIX,firstChar:Q,lastChar:v,toUnicode:$,bbox:_.getArray("FontBBox")||ie.getArray("FontBBox"),ascent:_.get("Ascent"),descent:_.get("Descent"),xHeight:_.get("XHeight")||0,capHeight:_.get("CapHeight")||0,flags:_.get("Flags"),italicAngle:_.get("ItalicAngle")||0,isType3Font:ne,cssFontInfo:Z,scaleFactors:pe,systemFontInfo:we},oe){const Oe=L.get("Encoding");Oe instanceof P.Name&&(X.cidEncoding=Oe.name);const Te=yield w.CMapFactory.create({encoding:Oe,fetchBuiltInCMap:this._fetchBuiltInCMapBound,useCMap:null});X.cMap=Te,X.vertical=X.cMap.vertical}return this.extractDataStructures(ie,L,X).then(Oe=>(this.extractWidths(ie,_,Oe),new e.Font(re.name,ue,Oe)))})}static buildFontPaths(_,ie,L,oe){function T(Q){const v=`${_.loadedName}_path_${Q}`;try{if(_.renderer.hasBuiltPath(Q))return;L.send("commonobj",[v,"FontPath",_.renderer.getPathJs(Q)])}catch($){if(oe.ignoreErrors){(0,i.warn)(`buildFontPaths - ignoring ${v} glyph: "${$}".`);return}throw $}}for(const Q of ie){T(Q.fontChar);const v=Q.accent;v!=null&&v.fontChar&&T(v.fontChar)}}static get fallbackFontDict(){const _=new P.Dict;return _.set("BaseFont",P.Name.get("Helvetica")),_.set("Type",P.Name.get("FallbackType")),_.set("Subtype",P.Name.get("FallbackType")),_.set("Encoding",P.Name.get("WinAnsiEncoding")),(0,i.shadow)(this,"fallbackFontDict",_)}}D.PartialEvaluator=r;class p{constructor({loadedName:_,font:ie,dict:L,evaluatorOptions:oe}){this.loadedName=_,this.font=ie,this.dict=L,this._evaluatorOptions=oe||h,this.type3Loaded=null,this.type3Dependencies=ie.isType3Font?new Set:null,this.sent=!1}send(_){this.sent||(this.sent=!0,_.send("commonobj",[this.loadedName,"Font",this.font.exportData(this._evaluatorOptions.fontExtraProperties)]))}fallback(_){this.font.data&&(this.font.disableFontFace=!0,r.buildFontPaths(this.font,this.font.glyphCacheValues,_,this._evaluatorOptions))}loadType3Data(_,ie,L){if(this.type3Loaded)return this.type3Loaded;if(!this.font.isType3Font)throw new Error("Must be a Type3 font.");const oe=_.clone({ignoreErrors:!1});oe.parsingType3Font=!0;const T=new P.RefSet(_.type3FontRefs);this.dict.objId&&!T.has(this.dict.objId)&&T.put(this.dict.objId),oe.type3FontRefs=T;const Q=this.font,v=this.type3Dependencies;let $=Promise.resolve();const Z=this.dict.get("CharProcs"),te=this.dict.get("Resources")||ie,ne=Object.create(null),X=i.Util.normalizeRect(Q.bbox||[0,0,0,0]),re=X[2]-X[0],ae=X[3]-X[1],z=Math.hypot(re,ae);for(const le of Z.getKeys())$=$.then(()=>{const ue=Z.get(le),ge=new H.OperatorList;return oe.getOperatorList({stream:ue,task:L,resources:te,operatorList:ge}).then(()=>{ge.fnArray[0]===i.OPS.setCharWidthAndBounds&&this._removeType3ColorOperators(ge,z),ne[le]=ge.getIR();for(const ke of ge.dependencies)v.add(ke)}).catch(function(ke){(0,i.warn)(`Type3 font resource "${le}" is not available.`);const me=new H.OperatorList;ne[le]=me.getIR()})});return this.type3Loaded=$.then(()=>{Q.charProcOperatorList=ne,this._bbox&&(Q.isCharBBox=!0,Q.bbox=this._bbox)}),this.type3Loaded}_removeType3ColorOperators(_,ie=NaN){const L=i.Util.normalizeRect(_.argsArray[0].slice(2)),oe=L[2]-L[0],T=L[3]-L[1],Q=Math.hypot(oe,T);oe===0||T===0?(_.fnArray.splice(0,1),_.argsArray.splice(0,1)):(ie===0||Math.round(Q/ie)>=10)&&(this._bbox||(this._bbox=[1/0,1/0,-1/0,-1/0]),this._bbox[0]=Math.min(this._bbox[0],L[0]),this._bbox[1]=Math.min(this._bbox[1],L[1]),this._bbox[2]=Math.max(this._bbox[2],L[2]),this._bbox[3]=Math.max(this._bbox[3],L[3]));let v=0,$=_.length;for(;v<$;){switch(_.fnArray[v]){case i.OPS.setCharWidthAndBounds:break;case i.OPS.setStrokeColorSpace:case i.OPS.setFillColorSpace:case i.OPS.setStrokeColor:case i.OPS.setStrokeColorN:case i.OPS.setFillColor:case i.OPS.setFillColorN:case i.OPS.setStrokeGray:case i.OPS.setFillGray:case i.OPS.setStrokeRGBColor:case i.OPS.setFillRGBColor:case i.OPS.setStrokeCMYKColor:case i.OPS.setFillCMYKColor:case i.OPS.shadingFill:case i.OPS.setRenderingIntent:_.fnArray.splice(v,1),_.argsArray.splice(v,1),$--;continue;case i.OPS.setGState:const[Z]=_.argsArray[v];let te=0,ne=Z.length;for(;te<ne;){const[X]=Z[te];switch(X){case"TR":case"TR2":case"HT":case"BG":case"BG2":case"UCR":case"UCR2":Z.splice(te,1),ne--;continue}te++}break}v++}}}class c{constructor(_=new q){this.state=_,this.stateStack=[]}save(){const _=this.state;this.stateStack.push(this.state),this.state=_.clone()}restore(){const _=this.stateStack.pop();_&&(this.state=_)}transform(_){this.state.ctm=i.Util.transform(this.state.ctm,_)}}class u{constructor(){this.ctm=new Float32Array(i.IDENTITY_MATRIX),this.fontName=null,this.fontSize=0,this.loadedName=null,this.font=null,this.fontMatrix=i.FONT_IDENTITY_MATRIX,this.textMatrix=i.IDENTITY_MATRIX.slice(),this.textLineMatrix=i.IDENTITY_MATRIX.slice(),this.charSpacing=0,this.wordSpacing=0,this.leading=0,this.textHScale=1,this.textRise=0}setTextMatrix(_,ie,L,oe,T,Q){const v=this.textMatrix;v[0]=_,v[1]=ie,v[2]=L,v[3]=oe,v[4]=T,v[5]=Q}setTextLineMatrix(_,ie,L,oe,T,Q){const v=this.textLineMatrix;v[0]=_,v[1]=ie,v[2]=L,v[3]=oe,v[4]=T,v[5]=Q}translateTextMatrix(_,ie){const L=this.textMatrix;L[4]=L[0]*_+L[2]*ie+L[4],L[5]=L[1]*_+L[3]*ie+L[5]}translateTextLineMatrix(_,ie){const L=this.textLineMatrix;L[4]=L[0]*_+L[2]*ie+L[4],L[5]=L[1]*_+L[3]*ie+L[5]}carriageReturn(){this.translateTextLineMatrix(0,-this.leading),this.textMatrix=this.textLineMatrix.slice()}clone(){const _=Object.create(this);return _.textMatrix=this.textMatrix.slice(),_.textLineMatrix=this.textLineMatrix.slice(),_.fontMatrix=this.fontMatrix.slice(),_}}class q{constructor(){this.ctm=new Float32Array(i.IDENTITY_MATRIX),this.font=null,this.textRenderingMode=i.TextRenderingMode.FILL,this.fillColorSpace=y.ColorSpace.singletons.gray,this.strokeColorSpace=y.ColorSpace.singletons.gray}clone(){return Object.create(this)}}const W=class W{static get opMap(){return(0,i.shadow)(this,"opMap",{w:{id:i.OPS.setLineWidth,numArgs:1,variableArgs:!1},J:{id:i.OPS.setLineCap,numArgs:1,variableArgs:!1},j:{id:i.OPS.setLineJoin,numArgs:1,variableArgs:!1},M:{id:i.OPS.setMiterLimit,numArgs:1,variableArgs:!1},d:{id:i.OPS.setDash,numArgs:2,variableArgs:!1},ri:{id:i.OPS.setRenderingIntent,numArgs:1,variableArgs:!1},i:{id:i.OPS.setFlatness,numArgs:1,variableArgs:!1},gs:{id:i.OPS.setGState,numArgs:1,variableArgs:!1},q:{id:i.OPS.save,numArgs:0,variableArgs:!1},Q:{id:i.OPS.restore,numArgs:0,variableArgs:!1},cm:{id:i.OPS.transform,numArgs:6,variableArgs:!1},m:{id:i.OPS.moveTo,numArgs:2,variableArgs:!1},l:{id:i.OPS.lineTo,numArgs:2,variableArgs:!1},c:{id:i.OPS.curveTo,numArgs:6,variableArgs:!1},v:{id:i.OPS.curveTo2,numArgs:4,variableArgs:!1},y:{id:i.OPS.curveTo3,numArgs:4,variableArgs:!1},h:{id:i.OPS.closePath,numArgs:0,variableArgs:!1},re:{id:i.OPS.rectangle,numArgs:4,variableArgs:!1},S:{id:i.OPS.stroke,numArgs:0,variableArgs:!1},s:{id:i.OPS.closeStroke,numArgs:0,variableArgs:!1},f:{id:i.OPS.fill,numArgs:0,variableArgs:!1},F:{id:i.OPS.fill,numArgs:0,variableArgs:!1},"f*":{id:i.OPS.eoFill,numArgs:0,variableArgs:!1},B:{id:i.OPS.fillStroke,numArgs:0,variableArgs:!1},"B*":{id:i.OPS.eoFillStroke,numArgs:0,variableArgs:!1},b:{id:i.OPS.closeFillStroke,numArgs:0,variableArgs:!1},"b*":{id:i.OPS.closeEOFillStroke,numArgs:0,variableArgs:!1},n:{id:i.OPS.endPath,numArgs:0,variableArgs:!1},W:{id:i.OPS.clip,numArgs:0,variableArgs:!1},"W*":{id:i.OPS.eoClip,numArgs:0,variableArgs:!1},BT:{id:i.OPS.beginText,numArgs:0,variableArgs:!1},ET:{id:i.OPS.endText,numArgs:0,variableArgs:!1},Tc:{id:i.OPS.setCharSpacing,numArgs:1,variableArgs:!1},Tw:{id:i.OPS.setWordSpacing,numArgs:1,variableArgs:!1},Tz:{id:i.OPS.setHScale,numArgs:1,variableArgs:!1},TL:{id:i.OPS.setLeading,numArgs:1,variableArgs:!1},Tf:{id:i.OPS.setFont,numArgs:2,variableArgs:!1},Tr:{id:i.OPS.setTextRenderingMode,numArgs:1,variableArgs:!1},Ts:{id:i.OPS.setTextRise,numArgs:1,variableArgs:!1},Td:{id:i.OPS.moveText,numArgs:2,variableArgs:!1},TD:{id:i.OPS.setLeadingMoveText,numArgs:2,variableArgs:!1},Tm:{id:i.OPS.setTextMatrix,numArgs:6,variableArgs:!1},"T*":{id:i.OPS.nextLine,numArgs:0,variableArgs:!1},Tj:{id:i.OPS.showText,numArgs:1,variableArgs:!1},TJ:{id:i.OPS.showSpacedText,numArgs:1,variableArgs:!1},"'":{id:i.OPS.nextLineShowText,numArgs:1,variableArgs:!1},'"':{id:i.OPS.nextLineSetSpacingShowText,numArgs:3,variableArgs:!1},d0:{id:i.OPS.setCharWidth,numArgs:2,variableArgs:!1},d1:{id:i.OPS.setCharWidthAndBounds,numArgs:6,variableArgs:!1},CS:{id:i.OPS.setStrokeColorSpace,numArgs:1,variableArgs:!1},cs:{id:i.OPS.setFillColorSpace,numArgs:1,variableArgs:!1},SC:{id:i.OPS.setStrokeColor,numArgs:4,variableArgs:!0},SCN:{id:i.OPS.setStrokeColorN,numArgs:33,variableArgs:!0},sc:{id:i.OPS.setFillColor,numArgs:4,variableArgs:!0},scn:{id:i.OPS.setFillColorN,numArgs:33,variableArgs:!0},G:{id:i.OPS.setStrokeGray,numArgs:1,variableArgs:!1},g:{id:i.OPS.setFillGray,numArgs:1,variableArgs:!1},RG:{id:i.OPS.setStrokeRGBColor,numArgs:3,variableArgs:!1},rg:{id:i.OPS.setFillRGBColor,numArgs:3,variableArgs:!1},K:{id:i.OPS.setStrokeCMYKColor,numArgs:4,variableArgs:!1},k:{id:i.OPS.setFillCMYKColor,numArgs:4,variableArgs:!1},sh:{id:i.OPS.shadingFill,numArgs:1,variableArgs:!1},BI:{id:i.OPS.beginInlineImage,numArgs:0,variableArgs:!1},ID:{id:i.OPS.beginImageData,numArgs:0,variableArgs:!1},EI:{id:i.OPS.endInlineImage,numArgs:1,variableArgs:!1},Do:{id:i.OPS.paintXObject,numArgs:1,variableArgs:!1},MP:{id:i.OPS.markPoint,numArgs:1,variableArgs:!1},DP:{id:i.OPS.markPointProps,numArgs:2,variableArgs:!1},BMC:{id:i.OPS.beginMarkedContent,numArgs:1,variableArgs:!1},BDC:{id:i.OPS.beginMarkedContentProps,numArgs:2,variableArgs:!1},EMC:{id:i.OPS.endMarkedContent,numArgs:0,variableArgs:!1},BX:{id:i.OPS.beginCompat,numArgs:0,variableArgs:!1},EX:{id:i.OPS.endCompat,numArgs:0,variableArgs:!1},BM:null,BD:null,true:null,fa:null,fal:null,fals:null,false:null,nu:null,nul:null,null:null})}constructor(_,ie,L=new c){this.parser=new d.Parser({lexer:new d.Lexer(_,W.opMap),xref:ie}),this.stateManager=L,this.nonProcessedArgs=[],this._isPathOp=!1,this._numInvalidPathOPS=0}get savedStatesDepth(){return this.stateManager.stateStack.length}read(_){let ie=_.args;for(;;){const L=this.parser.getObj();if(L instanceof P.Cmd){const oe=L.cmd,T=W.opMap[oe];if(!T){(0,i.warn)(`Unknown command "${oe}".`);continue}const Q=T.id,v=T.numArgs;let $=ie!==null?ie.length:0;if(this._isPathOp||(this._numInvalidPathOPS=0),this._isPathOp=Q>=i.OPS.moveTo&&Q<=i.OPS.endPath,T.variableArgs)$>v&&(0,i.info)(`Command ${oe}: expected [0, ${v}] args, but received ${$} args.`);else{if($!==v){const Z=this.nonProcessedArgs;for(;$>v;)Z.push(ie.shift()),$--;for(;$<v&&Z.length!==0;)ie===null&&(ie=[]),ie.unshift(Z.pop()),$++}if($<v){const Z=`command ${oe}: expected ${v} args, but received ${$} args.`;if(this._isPathOp&&++this._numInvalidPathOPS>W.MAX_INVALID_PATH_OPS)throw new i.FormatError(`Invalid ${Z}`);(0,i.warn)(`Skipping ${Z}`),ie!==null&&(ie.length=0);continue}}return this.preprocessCommand(Q,ie),_.fn=Q,_.args=ie,!0}if(L===P.EOF)return!1;if(L!==null&&(ie===null&&(ie=[]),ie.push(L),ie.length>33))throw new i.FormatError("Too many arguments")}}preprocessCommand(_,ie){switch(_|0){case i.OPS.save:this.stateManager.save();break;case i.OPS.restore:this.stateManager.restore();break;case i.OPS.transform:this.stateManager.transform(ie);break}}};jt(W,"MAX_INVALID_PATH_OPS",10);let J=W;D.EvaluatorPreprocessor=J},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.IdentityCMap=D.CMapFactory=D.CMap=void 0;var i=se(2),w=se(4),P=se(5),e=se(15),t=se(16),o=se(3),K=se(8);const j=["Adobe-GB1-UCS2","Adobe-CNS1-UCS2","Adobe-Japan1-UCS2","Adobe-Korea1-UCS2","78-EUC-H","78-EUC-V","78-H","78-RKSJ-H","78-RKSJ-V","78-V","78ms-RKSJ-H","78ms-RKSJ-V","83pv-RKSJ-H","90ms-RKSJ-H","90ms-RKSJ-V","90msp-RKSJ-H","90msp-RKSJ-V","90pv-RKSJ-H","90pv-RKSJ-V","Add-H","Add-RKSJ-H","Add-RKSJ-V","Add-V","Adobe-CNS1-0","Adobe-CNS1-1","Adobe-CNS1-2","Adobe-CNS1-3","Adobe-CNS1-4","Adobe-CNS1-5","Adobe-CNS1-6","Adobe-GB1-0","Adobe-GB1-1","Adobe-GB1-2","Adobe-GB1-3","Adobe-GB1-4","Adobe-GB1-5","Adobe-Japan1-0","Adobe-Japan1-1","Adobe-Japan1-2","Adobe-Japan1-3","Adobe-Japan1-4","Adobe-Japan1-5","Adobe-Japan1-6","Adobe-Korea1-0","Adobe-Korea1-1","Adobe-Korea1-2","B5-H","B5-V","B5pc-H","B5pc-V","CNS-EUC-H","CNS-EUC-V","CNS1-H","CNS1-V","CNS2-H","CNS2-V","ETHK-B5-H","ETHK-B5-V","ETen-B5-H","ETen-B5-V","ETenms-B5-H","ETenms-B5-V","EUC-H","EUC-V","Ext-H","Ext-RKSJ-H","Ext-RKSJ-V","Ext-V","GB-EUC-H","GB-EUC-V","GB-H","GB-V","GBK-EUC-H","GBK-EUC-V","GBK2K-H","GBK2K-V","GBKp-EUC-H","GBKp-EUC-V","GBT-EUC-H","GBT-EUC-V","GBT-H","GBT-V","GBTpc-EUC-H","GBTpc-EUC-V","GBpc-EUC-H","GBpc-EUC-V","H","HKdla-B5-H","HKdla-B5-V","HKdlb-B5-H","HKdlb-B5-V","HKgccs-B5-H","HKgccs-B5-V","HKm314-B5-H","HKm314-B5-V","HKm471-B5-H","HKm471-B5-V","HKscs-B5-H","HKscs-B5-V","Hankaku","Hiragana","KSC-EUC-H","KSC-EUC-V","KSC-H","KSC-Johab-H","KSC-Johab-V","KSC-V","KSCms-UHC-H","KSCms-UHC-HW-H","KSCms-UHC-HW-V","KSCms-UHC-V","KSCpc-EUC-H","KSCpc-EUC-V","Katakana","NWP-H","NWP-V","RKSJ-H","RKSJ-V","Roman","UniCNS-UCS2-H","UniCNS-UCS2-V","UniCNS-UTF16-H","UniCNS-UTF16-V","UniCNS-UTF32-H","UniCNS-UTF32-V","UniCNS-UTF8-H","UniCNS-UTF8-V","UniGB-UCS2-H","UniGB-UCS2-V","UniGB-UTF16-H","UniGB-UTF16-V","UniGB-UTF32-H","UniGB-UTF32-V","UniGB-UTF8-H","UniGB-UTF8-V","UniJIS-UCS2-H","UniJIS-UCS2-HW-H","UniJIS-UCS2-HW-V","UniJIS-UCS2-V","UniJIS-UTF16-H","UniJIS-UTF16-V","UniJIS-UTF32-H","UniJIS-UTF32-V","UniJIS-UTF8-H","UniJIS-UTF8-V","UniJIS2004-UTF16-H","UniJIS2004-UTF16-V","UniJIS2004-UTF32-H","UniJIS2004-UTF32-V","UniJIS2004-UTF8-H","UniJIS2004-UTF8-V","UniJISPro-UCS2-HW-V","UniJISPro-UCS2-V","UniJISPro-UTF8-V","UniJISX0213-UTF32-H","UniJISX0213-UTF32-V","UniJISX02132004-UTF32-H","UniJISX02132004-UTF32-V","UniKS-UCS2-H","UniKS-UCS2-V","UniKS-UTF16-H","UniKS-UTF16-V","UniKS-UTF32-H","UniKS-UTF32-V","UniKS-UTF8-H","UniKS-UTF8-V","V","WP-Symbol"],C=Gt(2,24)-1;class O{constructor(h=!1){this.codespaceRanges=[[],[],[],[]],this.numCodespaceRanges=0,this._map=[],this.name="",this.vertical=!1,this.useCMap=null,this.builtInCMap=h}addCodespaceRange(h,F,N){this.codespaceRanges[h-1].push(F,N),this.numCodespaceRanges++}mapCidRange(h,F,N){if(F-h>C)throw new Error("mapCidRange - ignoring data above MAX_MAP_RANGE.");for(;h<=F;)this._map[h++]=N++}mapBfRange(h,F,N){if(F-h>C)throw new Error("mapBfRange - ignoring data above MAX_MAP_RANGE.");const U=N.length-1;for(;h<=F;){this._map[h++]=N;const g=N.charCodeAt(U)+1;if(g>255){N=N.substring(0,U-1)+String.fromCharCode(N.charCodeAt(U-1)+1)+"\0";continue}N=N.substring(0,U)+String.fromCharCode(g)}}mapBfRangeToArray(h,F,N){if(F-h>C)throw new Error("mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.");const U=N.length;let g=0;for(;h<=F&&g<U;)this._map[h]=N[g++],++h}mapOne(h,F){this._map[h]=F}lookup(h){return this._map[h]}contains(h){return this._map[h]!==void 0}forEach(h){const F=this._map,N=F.length;if(N<=65536)for(let U=0;U<N;U++)F[U]!==void 0&&h(U,F[U]);else for(const U in F)h(U,F[U])}charCodeOf(h){const F=this._map;if(F.length<=65536)return F.indexOf(h);for(const N in F)if(F[N]===h)return N|0;return-1}getMap(){return this._map}readCharCode(h,F,N){let U=0;const g=this.codespaceRanges;for(let S=0,m=g.length;S<m;S++){U=(U<<8|h.charCodeAt(F+S))>>>0;const r=g[S];for(let p=0,c=r.length;p<c;){const u=r[p++],q=r[p++];if(U>=u&&U<=q){N.charcode=U,N.length=S+1;return}}}N.charcode=0,N.length=1}getCharCodeLength(h){const F=this.codespaceRanges;for(let N=0,U=F.length;N<U;N++){const g=F[N];for(let S=0,m=g.length;S<m;){const r=g[S++],p=g[S++];if(h>=r&&h<=p)return N+1}}return 1}get length(){return this._map.length}get isIdentityCMap(){if(!(this.name==="Identity-H"||this.name==="Identity-V")||this._map.length!==65536)return!1;for(let h=0;h<65536;h++)if(this._map[h]!==h)return!1;return!0}}D.CMap=O;class d extends O{constructor(h,F){super(),this.vertical=h,this.addCodespaceRange(F,0,65535)}mapCidRange(h,F,N){(0,i.unreachable)("should not call mapCidRange")}mapBfRange(h,F,N){(0,i.unreachable)("should not call mapBfRange")}mapBfRangeToArray(h,F,N){(0,i.unreachable)("should not call mapBfRangeToArray")}mapOne(h,F){(0,i.unreachable)("should not call mapCidOne")}lookup(h){return Number.isInteger(h)&&h<=65535?h:void 0}contains(h){return Number.isInteger(h)&&h<=65535}forEach(h){for(let F=0;F<=65535;F++)h(F,F)}charCodeOf(h){return Number.isInteger(h)&&h<=65535?h:-1}getMap(){const h=new Array(65536);for(let F=0;F<=65535;F++)h[F]=F;return h}get length(){return 65536}get isIdentityCMap(){(0,i.unreachable)("should not access .isIdentityCMap")}}D.IdentityCMap=d;function A(s){let h=0;for(let F=0;F<s.length;F++)h=h<<8|s.charCodeAt(F);return h>>>0}function n(s){if(typeof s!="string")throw new i.FormatError("Malformed CMap: expected string.")}function I(s){if(!Number.isInteger(s))throw new i.FormatError("Malformed CMap: expected int.")}function k(s,h){for(;;){let F=h.getObj();if(F===w.EOF)break;if((0,w.isCmd)(F,"endbfchar"))return;n(F);const N=A(F);F=h.getObj(),n(F);const U=F;s.mapOne(N,U)}}function y(s,h){for(;;){let F=h.getObj();if(F===w.EOF)break;if((0,w.isCmd)(F,"endbfrange"))return;n(F);const N=A(F);F=h.getObj(),n(F);const U=A(F);if(F=h.getObj(),Number.isInteger(F)||typeof F=="string"){const g=Number.isInteger(F)?String.fromCharCode(F):F;s.mapBfRange(N,U,g)}else if((0,w.isCmd)(F,"[")){F=h.getObj();const g=[];for(;!(0,w.isCmd)(F,"]")&&F!==w.EOF;)g.push(F),F=h.getObj();s.mapBfRangeToArray(N,U,g)}else break}throw new i.FormatError("Invalid bf range.")}function f(s,h){for(;;){let F=h.getObj();if(F===w.EOF)break;if((0,w.isCmd)(F,"endcidchar"))return;n(F);const N=A(F);F=h.getObj(),I(F);const U=F;s.mapOne(N,U)}}function R(s,h){for(;;){let F=h.getObj();if(F===w.EOF)break;if((0,w.isCmd)(F,"endcidrange"))return;n(F);const N=A(F);F=h.getObj(),n(F);const U=A(F);F=h.getObj(),I(F);const g=F;s.mapCidRange(N,U,g)}}function E(s,h){for(;;){let F=h.getObj();if(F===w.EOF)break;if((0,w.isCmd)(F,"endcodespacerange"))return;if(typeof F!="string")break;const N=A(F);if(F=h.getObj(),typeof F!="string")break;const U=A(F);s.addCodespaceRange(F.length,N,U)}throw new i.FormatError("Invalid codespace range.")}function M(s,h){const F=h.getObj();Number.isInteger(F)&&(s.vertical=!!F)}function b(s,h){const F=h.getObj();F instanceof w.Name&&(s.name=F.name)}function V(s,h,F,N){return rt(this,null,function*(){let U,g;e:for(;;)try{const S=h.getObj();if(S===w.EOF)break;if(S instanceof w.Name)S.name==="WMode"?M(s,h):S.name==="CMapName"&&b(s,h),U=S;else if(S instanceof w.Cmd)switch(S.cmd){case"endcmap":break e;case"usecmap":U instanceof w.Name&&(g=U.name);break;case"begincodespacerange":E(s,h);break;case"beginbfchar":k(s,h);break;case"begincidchar":f(s,h);break;case"beginbfrange":y(s,h);break;case"begincidrange":R(s,h);break}}catch(S){if(S instanceof o.MissingDataException)throw S;(0,i.warn)("Invalid cMap data: "+S);continue}return!N&&g&&(N=g),N?l(s,F,N):s})}function l(s,h,F){return rt(this,null,function*(){if(s.useCMap=yield x(F,h),s.numCodespaceRanges===0){const N=s.useCMap.codespaceRanges;for(let U=0;U<N.length;U++)s.codespaceRanges[U]=N[U].slice();s.numCodespaceRanges=s.useCMap.numCodespaceRanges}return s.useCMap.forEach(function(N,U){s.contains(N)||s.mapOne(N,s.useCMap.lookup(N))}),s})}function x(s,h){return rt(this,null,function*(){if(s==="Identity-H")return new d(!1,2);if(s==="Identity-V")return new d(!0,2);if(!j.includes(s))throw new Error("Unknown CMap name: "+s);if(!h)throw new Error("Built-in CMap parameters are not provided.");const{cMapData:F,compressionType:N}=yield h(s),U=new O(!0);if(N===i.CMapCompressionType.BINARY)return new e.BinaryCMapReader().process(F,U,g=>l(U,h,g));if(N===i.CMapCompressionType.NONE){const g=new t.Lexer(new K.Stream(F));return V(U,g,h,null)}throw new Error(`Invalid CMap "compressionType" value: ${N}`)})}class H{static create(U){return rt(this,arguments,function*({encoding:h,fetchBuiltInCMap:F,useCMap:N}){if(h instanceof w.Name)return x(h.name,F);if(h instanceof P.BaseStream){const g=yield V(new O,new t.Lexer(h),F,N);return g.isIdentityCMap?x(g.name,F):g}throw new Error("Encoding required.")})}}D.CMapFactory=H},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.BinaryCMapReader=void 0;var i=se(2);function w(O,d){let A=0;for(let n=0;n<=d;n++)A=A<<8|O[n];return A>>>0}function P(O,d){return d===1?String.fromCharCode(O[0],O[1]):d===3?String.fromCharCode(O[0],O[1],O[2],O[3]):String.fromCharCode(...O.subarray(0,d+1))}function e(O,d,A){let n=0;for(let I=A;I>=0;I--)n+=O[I]+d[I],O[I]=n&255,n>>=8}function t(O,d){let A=1;for(let n=d;n>=0&&A>0;n--)A+=O[n],O[n]=A&255,A>>=8}const o=16,K=19;class j{constructor(d){this.buffer=d,this.pos=0,this.end=d.length,this.tmpBuf=new Uint8Array(K)}readByte(){return this.pos>=this.end?-1:this.buffer[this.pos++]}readNumber(){let d=0,A;do{const n=this.readByte();if(n<0)throw new i.FormatError("unexpected EOF in bcmap");A=!(n&128),d=d<<7|n&127}while(!A);return d}readSigned(){const d=this.readNumber();return d&1?~(d>>>1):d>>>1}readHex(d,A){d.set(this.buffer.subarray(this.pos,this.pos+A+1)),this.pos+=A+1}readHexNumber(d,A){let n;const I=this.tmpBuf;let k=0;do{const E=this.readByte();if(E<0)throw new i.FormatError("unexpected EOF in bcmap");n=!(E&128),I[k++]=E&127}while(!n);let y=A,f=0,R=0;for(;y>=0;){for(;R<8&&I.length>0;)f|=I[--k]<<R,R+=7;d[y]=f&255,y--,f>>=8,R-=8}}readHexSigned(d,A){this.readHexNumber(d,A);const n=d[A]&1?255:0;let I=0;for(let k=0;k<=A;k++)I=(I&1)<<8|d[k],d[k]=I>>1^n}readString(){const d=this.readNumber(),A=new Array(d);for(let n=0;n<d;n++)A[n]=this.readNumber();return String.fromCharCode(...A)}}class C{process(d,A,n){return rt(this,null,function*(){const I=new j(d),k=I.readByte();A.vertical=!!(k&1);let y=null;const f=new Uint8Array(o),R=new Uint8Array(o),E=new Uint8Array(o),M=new Uint8Array(o),b=new Uint8Array(o);let V,l;for(;(l=I.readByte())>=0;){const x=l>>5;if(x===7){switch(l&31){case 0:I.readString();break;case 1:y=I.readString();break}continue}const H=!!(l&16),s=l&15;if(s+1>o)throw new Error("BinaryCMapReader.process: Invalid dataSize.");const h=1,F=I.readNumber();switch(x){case 0:I.readHex(f,s),I.readHexNumber(R,s),e(R,f,s),A.addCodespaceRange(s+1,w(f,s),w(R,s));for(let N=1;N<F;N++)t(R,s),I.readHexNumber(f,s),e(f,R,s),I.readHexNumber(R,s),e(R,f,s),A.addCodespaceRange(s+1,w(f,s),w(R,s));break;case 1:I.readHex(f,s),I.readHexNumber(R,s),e(R,f,s),I.readNumber();for(let N=1;N<F;N++)t(R,s),I.readHexNumber(f,s),e(f,R,s),I.readHexNumber(R,s),e(R,f,s),I.readNumber();break;case 2:I.readHex(E,s),V=I.readNumber(),A.mapOne(w(E,s),V);for(let N=1;N<F;N++)t(E,s),H||(I.readHexNumber(b,s),e(E,b,s)),V=I.readSigned()+(V+1),A.mapOne(w(E,s),V);break;case 3:I.readHex(f,s),I.readHexNumber(R,s),e(R,f,s),V=I.readNumber(),A.mapCidRange(w(f,s),w(R,s),V);for(let N=1;N<F;N++)t(R,s),H?f.set(R):(I.readHexNumber(f,s),e(f,R,s)),I.readHexNumber(R,s),e(R,f,s),V=I.readNumber(),A.mapCidRange(w(f,s),w(R,s),V);break;case 4:I.readHex(E,h),I.readHex(M,s),A.mapOne(w(E,h),P(M,s));for(let N=1;N<F;N++)t(E,h),H||(I.readHexNumber(b,h),e(E,b,h)),t(M,s),I.readHexSigned(b,s),e(M,b,s),A.mapOne(w(E,h),P(M,s));break;case 5:I.readHex(f,h),I.readHexNumber(R,h),e(R,f,h),I.readHex(M,s),A.mapBfRange(w(f,h),w(R,h),P(M,s));for(let N=1;N<F;N++)t(R,h),H?f.set(R):(I.readHexNumber(f,h),e(f,R,h)),I.readHexNumber(R,h),e(R,f,h),I.readHex(M,s),A.mapBfRange(w(f,h),w(R,h),P(M,s));break;default:throw new Error(`BinaryCMapReader.process - unknown type: ${x}`)}}return y?n(y):A})}}D.BinaryCMapReader=C},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Parser=D.Linearization=D.Lexer=void 0;var i=se(2),w=se(4),P=se(3),e=se(8),t=se(17),o=se(19),K=se(20),j=se(22),C=se(23),O=se(26),d=se(29),A=se(31),n=se(32),I=se(33);const k=1e3;function y(V){const l=[],x=V.length;let H=0;for(;H<x-1;)l.push(V[H++]<<8|V[H++]);return H<x&&l.push(V[H]),x+"_"+String.fromCharCode.apply(null,l)}class f{constructor({lexer:l,xref:x,allowStreams:H=!1,recoveryMode:s=!1}){this.lexer=l,this.xref=x,this.allowStreams=H,this.recoveryMode=s,this.imageCache=Object.create(null),this._imageId=0,this.refill()}refill(){this.buf1=this.lexer.getObj(),this.buf2=this.lexer.getObj()}shift(){this.buf2 instanceof w.Cmd&&this.buf2.cmd==="ID"?(this.buf1=this.buf2,this.buf2=null):(this.buf1=this.buf2,this.buf2=this.lexer.getObj())}tryShift(){try{return this.shift(),!0}catch(l){if(l instanceof P.MissingDataException)throw l;return!1}}getObj(l=null){const x=this.buf1;if(this.shift(),x instanceof w.Cmd)switch(x.cmd){case"BI":return this.makeInlineImage(l);case"[":const H=[];for(;!(0,w.isCmd)(this.buf1,"]")&&this.buf1!==w.EOF;)H.push(this.getObj(l));if(this.buf1===w.EOF){if(this.recoveryMode)return H;throw new P.ParserEOFException("End of file inside array.")}return this.shift(),H;case"<<":const s=new w.Dict(this.xref);for(;!(0,w.isCmd)(this.buf1,">>")&&this.buf1!==w.EOF;){if(!(this.buf1 instanceof w.Name)){(0,i.info)("Malformed dictionary: key must be a name object"),this.shift();continue}const h=this.buf1.name;if(this.shift(),this.buf1===w.EOF)break;s.set(h,this.getObj(l))}if(this.buf1===w.EOF){if(this.recoveryMode)return s;throw new P.ParserEOFException("End of file inside dictionary.")}return(0,w.isCmd)(this.buf2,"stream")?this.allowStreams?this.makeStream(s,l):s:(this.shift(),s);default:return x}if(Number.isInteger(x)){if(Number.isInteger(this.buf1)&&(0,w.isCmd)(this.buf2,"R")){const H=w.Ref.get(x,this.buf1);return this.shift(),this.shift(),H}return x}return typeof x=="string"&&l?l.decryptString(x):x}findDefaultInlineStreamEnd(l){const{knownCommands:U}=this.lexer,g=l.pos,S=15;let m=0,r,p;for(;(r=l.getByte())!==-1;)if(m===0)m=r===69?1:0;else if(m===1)m=r===73?2:0;else if(r===32||r===10||r===13){p=l.pos;const u=l.peekBytes(S),q=u.length;if(q===0)break;for(let W=0;W<q;W++)if(r=u[W],!(r===0&&u[W+1]!==0)&&r!==10&&r!==13&&(r<32||r>127)){m=0;break}if(m!==2)continue;if(!U){(0,i.warn)("findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.");continue}const J=new M(new e.Stream(u.slice()),U);J._hexStringWarn=()=>{};let G=0;for(;;){const W=J.getObj();if(W===w.EOF){m=0;break}if(W instanceof w.Cmd){const ce=U[W.cmd];if(ce){if(ce.variableArgs?G<=ce.numArgs:G===ce.numArgs)break}else{m=0;break}G=0;continue}G++}if(m===2)break}else m=0;r===-1&&((0,i.warn)("findDefaultInlineStreamEnd: Reached the end of the stream without finding a valid EI marker"),p&&((0,i.warn)('... trying to recover by using the last "EI" occurrence.'),l.skip(-(l.pos-p))));let c=4;return l.skip(-c),r=l.peekByte(),l.skip(c),(0,P.isWhiteSpace)(r)||c--,l.pos-c-g}findDCTDecodeInlineStreamEnd(l){const x=l.pos;let H=!1,s,h;for(;(s=l.getByte())!==-1;)if(s===255){switch(l.getByte()){case 0:break;case 255:l.skip(-1);break;case 217:H=!0;break;case 192:case 193:case 194:case 195:case 197:case 198:case 199:case 201:case 202:case 203:case 205:case 206:case 207:case 196:case 204:case 218:case 219:case 220:case 221:case 222:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 230:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 238:case 239:case 254:h=l.getUint16(),h>2?l.skip(h-2):l.skip(-2);break}if(H)break}const F=l.pos-x;return s===-1?((0,i.warn)("Inline DCTDecode image stream: EOI marker not found, searching for /EI/ instead."),l.skip(-F),this.findDefaultInlineStreamEnd(l)):(this.inlineStreamSkipEI(l),F)}findASCII85DecodeInlineStreamEnd(l){const s=l.pos;let h;for(;(h=l.getByte())!==-1;)if(h===126){const N=l.pos;for(h=l.peekByte();(0,P.isWhiteSpace)(h);)l.skip(),h=l.peekByte();if(h===62){l.skip();break}if(l.pos>N){const U=l.peekBytes(2);if(U[0]===69&&U[1]===73)break}}const F=l.pos-s;return h===-1?((0,i.warn)("Inline ASCII85Decode image stream: EOD marker not found, searching for /EI/ instead."),l.skip(-F),this.findDefaultInlineStreamEnd(l)):(this.inlineStreamSkipEI(l),F)}findASCIIHexDecodeInlineStreamEnd(l){const H=l.pos;let s;for(;(s=l.getByte())!==-1&&s!==62;);const h=l.pos-H;return s===-1?((0,i.warn)("Inline ASCIIHexDecode image stream: EOD marker not found, searching for /EI/ instead."),l.skip(-h),this.findDefaultInlineStreamEnd(l)):(this.inlineStreamSkipEI(l),h)}inlineStreamSkipEI(l){let s=0,h;for(;(h=l.getByte())!==-1;)if(s===0)s=h===69?1:0;else if(s===1)s=h===73?2:0;else if(s===2)break}makeInlineImage(l){const x=this.lexer,H=x.stream,s=Object.create(null);let h;for(;!(0,w.isCmd)(this.buf1,"ID")&&this.buf1!==w.EOF;){if(!(this.buf1 instanceof w.Name))throw new i.FormatError("Dictionary key must be a name object");const p=this.buf1.name;if(this.shift(),this.buf1===w.EOF)break;s[p]=this.getObj(l)}x.beginInlineImagePos!==-1&&(h=H.pos-x.beginInlineImagePos);const F=this.xref.fetchIfRef(s.F||s.Filter);let N;if(F instanceof w.Name)N=F.name;else if(Array.isArray(F)){const p=this.xref.fetchIfRef(F[0]);p instanceof w.Name&&(N=p.name)}const U=H.pos;let g;switch(N){case"DCT":case"DCTDecode":g=this.findDCTDecodeInlineStreamEnd(H);break;case"A85":case"ASCII85Decode":g=this.findASCII85DecodeInlineStreamEnd(H);break;case"AHx":case"ASCIIHexDecode":g=this.findASCIIHexDecodeInlineStreamEnd(H);break;default:g=this.findDefaultInlineStreamEnd(H)}let S;if(g<k&&h>0){const p=H.pos;H.pos=x.beginInlineImagePos,S=y(H.getBytes(h+g)),H.pos=p;const c=this.imageCache[S];if(c!==void 0)return this.buf2=w.Cmd.get("EI"),this.shift(),c.reset(),c}const m=new w.Dict(this.xref);for(const p in s)m.set(p,s[p]);let r=H.makeSubStream(U,g,m);return l&&(r=l.createStream(r,g)),r=this.filter(r,m,g),r.dict=m,S!==void 0&&(r.cacheKey=`inline_img_${++this._imageId}`,this.imageCache[S]=r),this.buf2=w.Cmd.get("EI"),this.shift(),r}_findStreamLength(l,x){const{stream:H}=this.lexer;H.pos=l;const s=2048,h=x.length;for(;H.pos<H.end;){const F=H.peekBytes(s),N=F.length-h;if(N<=0)break;let U=0;for(;U<N;){let g=0;for(;g<h&&F[U+g]===x[g];)g++;if(g>=h)return H.pos+=U,H.pos-l;U++}H.pos+=N}return-1}makeStream(l,x){const H=this.lexer;let s=H.stream;H.skipToNextLine();const h=s.pos-1;let F=l.get("Length");if(Number.isInteger(F)||((0,i.info)(`Bad length "${F&&F.toString()}" in stream.`),F=0),s.pos=h+F,H.nextChar(),this.tryShift()&&(0,w.isCmd)(this.buf2,"endstream"))this.shift();else{const N=new Uint8Array([101,110,100,115,116,114,101,97,109]);let U=this._findStreamLength(h,N);if(U<0){for(let S=1;S<=1;S++){const m=N.length-S,r=N.slice(0,m),p=this._findStreamLength(h,r);if(p>=0){const c=s.peekBytes(m+1)[m];if(!(0,P.isWhiteSpace)(c))break;(0,i.info)(`Found "${(0,i.bytesToString)(r)}" when searching for endstream command.`),U=p;break}}if(U<0)throw new i.FormatError("Missing endstream command.")}F=U,H.nextChar(),this.shift(),this.shift()}return this.shift(),s=s.makeSubStream(h,F,l),x&&(s=x.createStream(s,F)),s=this.filter(s,l,F),s.dict=l,s}filter(l,x,H){let s=x.get("F","Filter"),h=x.get("DP","DecodeParms");if(s instanceof w.Name)return Array.isArray(h)&&(0,i.warn)("/DecodeParms should not be an Array, when /Filter is a Name."),this.makeFilter(l,s.name,H,h);let F=H;if(Array.isArray(s)){const N=s,U=h;for(let g=0,S=N.length;g<S;++g){if(s=this.xref.fetchIfRef(N[g]),!(s instanceof w.Name))throw new i.FormatError(`Bad filter name "${s}"`);h=null,Array.isArray(U)&&g in U&&(h=this.xref.fetchIfRef(U[g])),l=this.makeFilter(l,s.name,F,h),F=null}}return l}makeFilter(l,x,H,s){if(H===0)return(0,i.warn)(`Empty "${x}" stream.`),new e.NullStream;try{switch(x){case"Fl":case"FlateDecode":return s?new n.PredictorStream(new j.FlateStream(l,H),H,s):new j.FlateStream(l,H);case"LZW":case"LZWDecode":let h=1;return s?(s.has("EarlyChange")&&(h=s.get("EarlyChange")),new n.PredictorStream(new A.LZWStream(l,H,h),H,s)):new A.LZWStream(l,H,h);case"DCT":case"DCTDecode":return new O.JpegStream(l,H,s);case"JPX":case"JPXDecode":return new d.JpxStream(l,H,s);case"A85":case"ASCII85Decode":return new t.Ascii85Stream(l,H);case"AHx":case"ASCIIHexDecode":return new o.AsciiHexStream(l,H);case"CCF":case"CCITTFaxDecode":return new K.CCITTFaxStream(l,H,s);case"RL":case"RunLengthDecode":return new I.RunLengthStream(l,H);case"JBIG2Decode":return new C.Jbig2Stream(l,H,s)}return(0,i.warn)(`Filter "${x}" is not supported.`),l}catch(h){if(h instanceof P.MissingDataException)throw h;return(0,i.warn)(`Invalid stream: "${h}"`),new e.NullStream}}}D.Parser=f;const R=[1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];function E(V){return V>=48&&V<=57?V&15:V>=65&&V<=70||V>=97&&V<=102?(V&15)+9:-1}class M{constructor(l,x=null){this.stream=l,this.nextChar(),this.strBuf=[],this.knownCommands=x,this._hexStringNumWarn=0,this.beginInlineImagePos=-1}nextChar(){return this.currentChar=this.stream.getByte()}peekChar(){return this.stream.peekByte()}getNumber(){let l=this.currentChar,x=!1,H=0,s=1;if(l===45?(s=-1,l=this.nextChar(),l===45&&(l=this.nextChar())):l===43&&(l=this.nextChar()),l===10||l===13)do l=this.nextChar();while(l===10||l===13);if(l===46&&(H=10,l=this.nextChar()),l<48||l>57){const U=`Invalid number: ${String.fromCharCode(l)} (charCode ${l})`;if((0,P.isWhiteSpace)(l)||l===-1)return(0,i.info)(`Lexer.getNumber - "${U}".`),0;throw new i.FormatError(U)}let h=l-48,F=0,N=1;for(;(l=this.nextChar())>=0;)if(l>=48&&l<=57){const U=l-48;x?F=F*10+U:(H!==0&&(H*=10),h=h*10+U)}else if(l===46)if(H===0)H=1;else break;else if(l===45)(0,i.warn)("Badly formatted number: minus sign in the middle");else if(l===69||l===101){if(l=this.peekChar(),l===43||l===45)N=l===45?-1:1,this.nextChar();else if(l<48||l>57)break;x=!0}else break;return H!==0&&(h/=H),x&&(h*=Gt(10,N*F)),s*h}getString(){let l=1,x=!1;const H=this.strBuf;H.length=0;let s=this.nextChar();for(;;){let h=!1;switch(s|0){case-1:(0,i.warn)("Unterminated string"),x=!0;break;case 40:++l,H.push("(");break;case 41:--l===0?(this.nextChar(),x=!0):H.push(")");break;case 92:switch(s=this.nextChar(),s){case-1:(0,i.warn)("Unterminated string"),x=!0;break;case 110:H.push(`
`);break;case 114:H.push("\r");break;case 116:H.push("	");break;case 98:H.push("\b");break;case 102:H.push("\f");break;case 92:case 40:case 41:H.push(String.fromCharCode(s));break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:let F=s&15;s=this.nextChar(),h=!0,s>=48&&s<=55&&(F=(F<<3)+(s&15),s=this.nextChar(),s>=48&&s<=55&&(h=!1,F=(F<<3)+(s&15))),H.push(String.fromCharCode(F));break;case 13:this.peekChar()===10&&this.nextChar();break;case 10:break;default:H.push(String.fromCharCode(s));break}break;default:H.push(String.fromCharCode(s));break}if(x)break;h||(s=this.nextChar())}return H.join("")}getName(){let l,x;const H=this.strBuf;for(H.length=0;(l=this.nextChar())>=0&&!R[l];)if(l===35){if(l=this.nextChar(),R[l]){(0,i.warn)("Lexer_getName: NUMBER SIGN (#) should be followed by a hexadecimal number."),H.push("#");break}const s=E(l);if(s!==-1){x=l,l=this.nextChar();const h=E(l);if(h===-1){if((0,i.warn)(`Lexer_getName: Illegal digit (${String.fromCharCode(l)}) in hexadecimal number.`),H.push("#",String.fromCharCode(x)),R[l])break;H.push(String.fromCharCode(l));continue}H.push(String.fromCharCode(s<<4|h))}else H.push("#",String.fromCharCode(l))}else H.push(String.fromCharCode(l));return H.length>127&&(0,i.warn)(`Name token is longer than allowed by the spec: ${H.length}`),w.Name.get(H.join(""))}_hexStringWarn(l){if(this._hexStringNumWarn++===5){(0,i.warn)("getHexString - ignoring additional invalid characters.");return}this._hexStringNumWarn>5||(0,i.warn)(`getHexString - ignoring invalid character: ${l}`)}getHexString(){const l=this.strBuf;l.length=0;let x=this.currentChar,H=!0,s,h;for(this._hexStringNumWarn=0;;)if(x<0){(0,i.warn)("Unterminated hex string");break}else if(x===62){this.nextChar();break}else if(R[x]===1){x=this.nextChar();continue}else{if(H){if(s=E(x),s===-1){this._hexStringWarn(x),x=this.nextChar();continue}}else{if(h=E(x),h===-1){this._hexStringWarn(x),x=this.nextChar();continue}l.push(String.fromCharCode(s<<4|h))}H=!H,x=this.nextChar()}return l.join("")}getObj(){let l=!1,x=this.currentChar;for(;;){if(x<0)return w.EOF;if(l)(x===10||x===13)&&(l=!1);else if(x===37)l=!0;else if(R[x]!==1)break;x=this.nextChar()}switch(x|0){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 43:case 45:case 46:return this.getNumber();case 40:return this.getString();case 47:return this.getName();case 91:return this.nextChar(),w.Cmd.get("[");case 93:return this.nextChar(),w.Cmd.get("]");case 60:return x=this.nextChar(),x===60?(this.nextChar(),w.Cmd.get("<<")):this.getHexString();case 62:return x=this.nextChar(),x===62?(this.nextChar(),w.Cmd.get(">>")):w.Cmd.get(">");case 123:return this.nextChar(),w.Cmd.get("{");case 125:return this.nextChar(),w.Cmd.get("}");case 41:throw this.nextChar(),new i.FormatError(`Illegal character: ${x}`)}let H=String.fromCharCode(x);if(x<32||x>127){const F=this.peekChar();if(F>=32&&F<=127)return this.nextChar(),w.Cmd.get(H)}const s=this.knownCommands;let h=(s==null?void 0:s[H])!==void 0;for(;(x=this.nextChar())>=0&&!R[x];){const F=H+String.fromCharCode(x);if(h&&s[F]===void 0)break;if(H.length===128)throw new i.FormatError(`Command token too long: ${H.length}`);H=F,h=(s==null?void 0:s[H])!==void 0}return H==="true"?!0:H==="false"?!1:H==="null"?null:(H==="BI"&&(this.beginInlineImagePos=this.stream.pos),w.Cmd.get(H))}skipToNextLine(){let l=this.currentChar;for(;l>=0;){if(l===13){l=this.nextChar(),l===10&&this.nextChar();break}else if(l===10){this.nextChar();break}l=this.nextChar()}}}D.Lexer=M;class b{static create(l){function x(m,r,p=!1){const c=m.get(r);if(Number.isInteger(c)&&(p?c>=0:c>0))return c;throw new Error(`The "${r}" parameter in the linearization dictionary is invalid.`)}function H(m){const r=m.get("H");let p;if(Array.isArray(r)&&((p=r.length)===2||p===4)){for(let c=0;c<p;c++){const u=r[c];if(!(Number.isInteger(u)&&u>0))throw new Error(`Hint (${c}) in the linearization dictionary is invalid.`)}return r}throw new Error("Hint array in the linearization dictionary is invalid.")}const s=new f({lexer:new M(l),xref:null}),h=s.getObj(),F=s.getObj(),N=s.getObj(),U=s.getObj();let g,S;if(Number.isInteger(h)&&Number.isInteger(F)&&(0,w.isCmd)(N,"obj")&&U instanceof w.Dict&&typeof(g=U.get("Linearized"))=="number"&&g>0){if((S=x(U,"L"))!==l.length)throw new Error('The "L" parameter in the linearization dictionary does not equal the stream length.')}else return null;return{length:S,hints:H(U),objectNumberFirst:x(U,"O"),endFirst:x(U,"E"),numPages:x(U,"N"),mainXRefEntriesOffset:x(U,"T"),pageFirst:U.has("P")?x(U,"P",!0):0}}}D.Linearization=b},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Ascii85Stream=void 0;var i=se(18),w=se(3);class P extends i.DecodeStream{constructor(t,o){o&&(o*=.8),super(o),this.str=t,this.dict=t.dict,this.input=new Uint8Array(5)}readBlock(){const j=this.str;let C=j.getByte();for(;(0,w.isWhiteSpace)(C);)C=j.getByte();if(C===-1||C===126){this.eof=!0;return}const O=this.bufferLength;let d,A;if(C===122){for(d=this.ensureBuffer(O+4),A=0;A<4;++A)d[O+A]=0;this.bufferLength+=4}else{const n=this.input;for(n[0]=C,A=1;A<5;++A){for(C=j.getByte();(0,w.isWhiteSpace)(C);)C=j.getByte();if(n[A]=C,C===-1||C===126)break}if(d=this.ensureBuffer(O+A-1),this.bufferLength+=A-1,A<5){for(;A<5;++A)n[A]=117;this.eof=!0}let I=0;for(A=0;A<5;++A)I=I*85+(n[A]-33);for(A=3;A>=0;--A)d[O+A]=I&255,I>>=8}}}D.Ascii85Stream=P},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.StreamsSequenceStream=D.DecodeStream=void 0;var i=se(5),w=se(8);const P=new Uint8Array(0);class e extends i.BaseStream{constructor(K){if(super(),this._rawMinBufferLength=K||0,this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=P,this.minBufferLength=512,K)for(;this.minBufferLength<K;)this.minBufferLength*=2}get isEmpty(){for(;!this.eof&&this.bufferLength===0;)this.readBlock();return this.bufferLength===0}ensureBuffer(K){const j=this.buffer;if(K<=j.byteLength)return j;let C=this.minBufferLength;for(;C<K;)C*=2;const O=new Uint8Array(C);return O.set(j),this.buffer=O}getByte(){const K=this.pos;for(;this.bufferLength<=K;){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]}getBytes(K){const j=this.pos;let C;if(K){for(this.ensureBuffer(j+K),C=j+K;!this.eof&&this.bufferLength<C;)this.readBlock();const O=this.bufferLength;C>O&&(C=O)}else{for(;!this.eof;)this.readBlock();C=this.bufferLength}return this.pos=C,this.buffer.subarray(j,C)}reset(){this.pos=0}makeSubStream(K,j,C=null){if(j===void 0)for(;!this.eof;)this.readBlock();else{const O=K+j;for(;this.bufferLength<=O&&!this.eof;)this.readBlock()}return new w.Stream(this.buffer,K,j,C)}getBaseStreams(){return this.str?this.str.getBaseStreams():null}}D.DecodeStream=e;class t extends e{constructor(K,j=null){let C=0;for(const O of K)C+=O instanceof e?O._rawMinBufferLength:O.length;super(C),this.streams=K,this._onError=j}readBlock(){var n;const K=this.streams;if(K.length===0){this.eof=!0;return}const j=K.shift();let C;try{C=j.getBytes()}catch(I){if(this._onError){this._onError(I,(n=j.dict)==null?void 0:n.objId);return}throw I}const O=this.bufferLength,d=O+C.length;this.ensureBuffer(d).set(C,O),this.bufferLength=d}getBaseStreams(){const K=[];for(const j of this.streams){const C=j.getBaseStreams();C&&K.push(...C)}return K.length>0?K:null}}D.StreamsSequenceStream=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.AsciiHexStream=void 0;var i=se(18);class w extends i.DecodeStream{constructor(e,t){t&&(t*=.5),super(t),this.str=e,this.dict=e.dict,this.firstDigit=-1}readBlock(){const t=this.str.getBytes(8e3);if(!t.length){this.eof=!0;return}const o=t.length+1>>1,K=this.ensureBuffer(this.bufferLength+o);let j=this.bufferLength,C=this.firstDigit;for(const O of t){let d;if(O>=48&&O<=57)d=O&15;else if(O>=65&&O<=70||O>=97&&O<=102)d=(O&15)+9;else if(O===62){this.eof=!0;break}else continue;C<0?C=d:(K[j++]=C<<4|d,C=-1)}C>=0&&this.eof&&(K[j++]=C<<4,C=-1),this.firstDigit=C,this.bufferLength=j}}D.AsciiHexStream=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.CCITTFaxStream=void 0;var i=se(21),w=se(18),P=se(4);class e extends w.DecodeStream{constructor(o,K,j){super(K),this.str=o,this.dict=o.dict,j instanceof P.Dict||(j=P.Dict.empty);const C={next(){return o.getByte()}};this.ccittFaxDecoder=new i.CCITTFaxDecoder(C,{K:j.get("K"),EndOfLine:j.get("EndOfLine"),EncodedByteAlign:j.get("EncodedByteAlign"),Columns:j.get("Columns"),Rows:j.get("Rows"),EndOfBlock:j.get("EndOfBlock"),BlackIs1:j.get("BlackIs1")})}readBlock(){for(;!this.eof;){const o=this.ccittFaxDecoder.readNextChar();if(o===-1){this.eof=!0;return}this.ensureBuffer(this.bufferLength+1),this.buffer[this.bufferLength++]=o}}}D.CCITTFaxStream=e},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.CCITTFaxDecoder=void 0;var i=se(2);const w=-2,P=-1,e=0,t=1,o=2,K=3,j=4,C=5,O=6,d=7,A=8,n=[[-1,-1],[-1,-1],[7,A],[7,d],[6,O],[6,O],[6,C],[6,C],[4,e],[4,e],[4,e],[4,e],[4,e],[4,e],[4,e],[4,e],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,t],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,j],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[3,K],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o],[1,o]],I=[[-1,-1],[12,w],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[11,1792],[11,1792],[12,1984],[12,2048],[12,2112],[12,2176],[12,2240],[12,2304],[11,1856],[11,1856],[11,1920],[11,1920],[12,2368],[12,2432],[12,2496],[12,2560]],k=[[-1,-1],[-1,-1],[-1,-1],[-1,-1],[8,29],[8,29],[8,30],[8,30],[8,45],[8,45],[8,46],[8,46],[7,22],[7,22],[7,22],[7,22],[7,23],[7,23],[7,23],[7,23],[8,47],[8,47],[8,48],[8,48],[6,13],[6,13],[6,13],[6,13],[6,13],[6,13],[6,13],[6,13],[7,20],[7,20],[7,20],[7,20],[8,33],[8,33],[8,34],[8,34],[8,35],[8,35],[8,36],[8,36],[8,37],[8,37],[8,38],[8,38],[7,19],[7,19],[7,19],[7,19],[8,31],[8,31],[8,32],[8,32],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,12],[6,12],[6,12],[6,12],[6,12],[6,12],[6,12],[6,12],[8,53],[8,53],[8,54],[8,54],[7,26],[7,26],[7,26],[7,26],[8,39],[8,39],[8,40],[8,40],[8,41],[8,41],[8,42],[8,42],[8,43],[8,43],[8,44],[8,44],[7,21],[7,21],[7,21],[7,21],[7,28],[7,28],[7,28],[7,28],[8,61],[8,61],[8,62],[8,62],[8,63],[8,63],[8,0],[8,0],[8,320],[8,320],[8,384],[8,384],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,10],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[5,11],[7,27],[7,27],[7,27],[7,27],[8,59],[8,59],[8,60],[8,60],[9,1472],[9,1536],[9,1600],[9,1728],[7,18],[7,18],[7,18],[7,18],[7,24],[7,24],[7,24],[7,24],[8,49],[8,49],[8,50],[8,50],[8,51],[8,51],[8,52],[8,52],[7,25],[7,25],[7,25],[7,25],[8,55],[8,55],[8,56],[8,56],[8,57],[8,57],[8,58],[8,58],[6,192],[6,192],[6,192],[6,192],[6,192],[6,192],[6,192],[6,192],[6,1664],[6,1664],[6,1664],[6,1664],[6,1664],[6,1664],[6,1664],[6,1664],[8,448],[8,448],[8,512],[8,512],[9,704],[9,768],[8,640],[8,640],[8,576],[8,576],[9,832],[9,896],[9,960],[9,1024],[9,1088],[9,1152],[9,1216],[9,1280],[9,1344],[9,1408],[7,256],[7,256],[7,256],[7,256],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,128],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,8],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[5,9],[6,16],[6,16],[6,16],[6,16],[6,16],[6,16],[6,16],[6,16],[6,17],[6,17],[6,17],[6,17],[6,17],[6,17],[6,17],[6,17],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[6,14],[6,14],[6,14],[6,14],[6,14],[6,14],[6,14],[6,14],[6,15],[6,15],[6,15],[6,15],[6,15],[6,15],[6,15],[6,15],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[5,64],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,6],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7],[4,7]],y=[[-1,-1],[-1,-1],[12,w],[12,w],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],[11,1792],[11,1792],[11,1792],[11,1792],[12,1984],[12,1984],[12,2048],[12,2048],[12,2112],[12,2112],[12,2176],[12,2176],[12,2240],[12,2240],[12,2304],[12,2304],[11,1856],[11,1856],[11,1856],[11,1856],[11,1920],[11,1920],[11,1920],[11,1920],[12,2368],[12,2368],[12,2432],[12,2432],[12,2496],[12,2496],[12,2560],[12,2560],[10,18],[10,18],[10,18],[10,18],[10,18],[10,18],[10,18],[10,18],[12,52],[12,52],[13,640],[13,704],[13,768],[13,832],[12,55],[12,55],[12,56],[12,56],[13,1280],[13,1344],[13,1408],[13,1472],[12,59],[12,59],[12,60],[12,60],[13,1536],[13,1600],[11,24],[11,24],[11,24],[11,24],[11,25],[11,25],[11,25],[11,25],[13,1664],[13,1728],[12,320],[12,320],[12,384],[12,384],[12,448],[12,448],[13,512],[13,576],[12,53],[12,53],[12,54],[12,54],[13,896],[13,960],[13,1024],[13,1088],[13,1152],[13,1216],[10,64],[10,64],[10,64],[10,64],[10,64],[10,64],[10,64],[10,64]],f=[[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[8,13],[11,23],[11,23],[12,50],[12,51],[12,44],[12,45],[12,46],[12,47],[12,57],[12,58],[12,61],[12,256],[10,16],[10,16],[10,16],[10,16],[10,17],[10,17],[10,17],[10,17],[12,48],[12,49],[12,62],[12,63],[12,30],[12,31],[12,32],[12,33],[12,40],[12,41],[11,22],[11,22],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[8,14],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,10],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[7,11],[9,15],[9,15],[9,15],[9,15],[9,15],[9,15],[9,15],[9,15],[12,128],[12,192],[12,26],[12,27],[12,28],[12,29],[11,19],[11,19],[11,20],[11,20],[12,34],[12,35],[12,36],[12,37],[12,38],[12,39],[11,21],[11,21],[12,42],[12,43],[10,0],[10,0],[10,0],[10,0],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12],[7,12]],R=[[-1,-1],[-1,-1],[-1,-1],[-1,-1],[6,9],[6,8],[5,7],[5,7],[4,6],[4,6],[4,6],[4,6],[4,5],[4,5],[4,5],[4,5],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,4],[3,4],[3,4],[3,4],[3,4],[3,4],[3,4],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2]];class E{constructor(b,V={}){var x;if(!b||typeof b.next!="function")throw new Error('CCITTFaxDecoder - invalid "source" parameter.');this.source=b,this.eof=!1,this.encoding=V.K||0,this.eoline=V.EndOfLine||!1,this.byteAlign=V.EncodedByteAlign||!1,this.columns=V.Columns||1728,this.rows=V.Rows||0,this.eoblock=(x=V.EndOfBlock)!=null?x:!0,this.black=V.BlackIs1||!1,this.codingLine=new Uint32Array(this.columns+1),this.refLine=new Uint32Array(this.columns+2),this.codingLine[0]=this.columns,this.codingPos=0,this.row=0,this.nextLine2D=this.encoding<0,this.inputBits=0,this.inputBuf=0,this.outputBits=0,this.rowsDone=!1;let l;for(;(l=this._lookBits(12))===0;)this._eatBits(1);l===1&&this._eatBits(12),this.encoding>0&&(this.nextLine2D=!this._lookBits(1),this._eatBits(1))}readNextChar(){if(this.eof)return-1;const b=this.refLine,V=this.codingLine,l=this.columns;let x,H,s,h;if(this.outputBits===0){if(this.rowsDone&&(this.eof=!0),this.eof)return-1;this.err=!1;let N,U,g;if(this.nextLine2D){for(h=0;V[h]<l;++h)b[h]=V[h];for(b[h++]=l,b[h]=l,V[0]=0,this.codingPos=0,x=0,H=0;V[this.codingPos]<l;)switch(N=this._getTwoDimCode(),N){case e:this._addPixels(b[x+1],H),b[x+1]<l&&(x+=2);break;case t:if(N=U=0,H){do N+=g=this._getBlackCode();while(g>=64);do U+=g=this._getWhiteCode();while(g>=64)}else{do N+=g=this._getWhiteCode();while(g>=64);do U+=g=this._getBlackCode();while(g>=64)}for(this._addPixels(V[this.codingPos]+N,H),V[this.codingPos]<l&&this._addPixels(V[this.codingPos]+U,H^1);b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case d:if(this._addPixels(b[x]+3,H),H^=1,V[this.codingPos]<l)for(++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case C:if(this._addPixels(b[x]+2,H),H^=1,V[this.codingPos]<l)for(++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case K:if(this._addPixels(b[x]+1,H),H^=1,V[this.codingPos]<l)for(++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case o:if(this._addPixels(b[x],H),H^=1,V[this.codingPos]<l)for(++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case A:if(this._addPixelsNeg(b[x]-3,H),H^=1,V[this.codingPos]<l)for(x>0?--x:++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case O:if(this._addPixelsNeg(b[x]-2,H),H^=1,V[this.codingPos]<l)for(x>0?--x:++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case j:if(this._addPixelsNeg(b[x]-1,H),H^=1,V[this.codingPos]<l)for(x>0?--x:++x;b[x]<=V[this.codingPos]&&b[x]<l;)x+=2;break;case P:this._addPixels(l,0),this.eof=!0;break;default:(0,i.info)("bad 2d code"),this._addPixels(l,0),this.err=!0}}else for(V[0]=0,this.codingPos=0,H=0;V[this.codingPos]<l;){if(N=0,H)do N+=g=this._getBlackCode();while(g>=64);else do N+=g=this._getWhiteCode();while(g>=64);this._addPixels(V[this.codingPos]+N,H),H^=1}let S=!1;if(this.byteAlign&&(this.inputBits&=-8),!this.eoblock&&this.row===this.rows-1)this.rowsDone=!0;else{if(N=this._lookBits(12),this.eoline)for(;N!==P&&N!==1;)this._eatBits(1),N=this._lookBits(12);else for(;N===0;)this._eatBits(1),N=this._lookBits(12);N===1?(this._eatBits(12),S=!0):N===P&&(this.eof=!0)}if(!this.eof&&this.encoding>0&&!this.rowsDone&&(this.nextLine2D=!this._lookBits(1),this._eatBits(1)),this.eoblock&&S&&this.byteAlign){if(N=this._lookBits(12),N===1){if(this._eatBits(12),this.encoding>0&&(this._lookBits(1),this._eatBits(1)),this.encoding>=0)for(h=0;h<4;++h)N=this._lookBits(12),N!==1&&(0,i.info)("bad rtc code: "+N),this._eatBits(12),this.encoding>0&&(this._lookBits(1),this._eatBits(1));this.eof=!0}}else if(this.err&&this.eoline){for(;;){if(N=this._lookBits(13),N===P)return this.eof=!0,-1;if(N>>1===1)break;this._eatBits(1)}this._eatBits(12),this.encoding>0&&(this._eatBits(1),this.nextLine2D=!(N&1))}this.outputBits=V[0]>0?V[this.codingPos=0]:V[this.codingPos=1],this.row++}let F;if(this.outputBits>=8)F=this.codingPos&1?0:255,this.outputBits-=8,this.outputBits===0&&V[this.codingPos]<l&&(this.codingPos++,this.outputBits=V[this.codingPos]-V[this.codingPos-1]);else{s=8,F=0;do{if(typeof this.outputBits!="number")throw new i.FormatError('Invalid /CCITTFaxDecode data, "outputBits" must be a number.');this.outputBits>s?(F<<=s,this.codingPos&1||(F|=255>>8-s),this.outputBits-=s,s=0):(F<<=this.outputBits,this.codingPos&1||(F|=255>>8-this.outputBits),s-=this.outputBits,this.outputBits=0,V[this.codingPos]<l?(this.codingPos++,this.outputBits=V[this.codingPos]-V[this.codingPos-1]):s>0&&(F<<=s,s=0))}while(s)}return this.black&&(F^=255),F}_addPixels(b,V){const l=this.codingLine;let x=this.codingPos;b>l[x]&&(b>this.columns&&((0,i.info)("row is wrong length"),this.err=!0,b=this.columns),x&1^V&&++x,l[x]=b),this.codingPos=x}_addPixelsNeg(b,V){const l=this.codingLine;let x=this.codingPos;if(b>l[x])b>this.columns&&((0,i.info)("row is wrong length"),this.err=!0,b=this.columns),x&1^V&&++x,l[x]=b;else if(b<l[x]){for(b<0&&((0,i.info)("invalid code"),this.err=!0,b=0);x>0&&b<l[x-1];)--x;l[x]=b}this.codingPos=x}_findTableCode(b,V,l,x){const H=x||0;for(let s=b;s<=V;++s){let h=this._lookBits(s);if(h===P)return[!0,1,!1];if(s<V&&(h<<=V-s),!H||h>=H){const F=l[h-H];if(F[0]===s)return this._eatBits(s),[!0,F[1],!0]}}return[!1,0,!1]}_getTwoDimCode(){let b=0,V;if(this.eoblock){if(b=this._lookBits(7),V=n[b],(V==null?void 0:V[0])>0)return this._eatBits(V[0]),V[1]}else{const l=this._findTableCode(1,7,n);if(l[0]&&l[2])return l[1]}return(0,i.info)("Bad two dim code"),P}_getWhiteCode(){let b=0,V;if(this.eoblock){if(b=this._lookBits(12),b===P)return 1;if(V=b>>5?k[b>>3]:I[b],V[0]>0)return this._eatBits(V[0]),V[1]}else{let l=this._findTableCode(1,9,k);if(l[0]||(l=this._findTableCode(11,12,I),l[0]))return l[1]}return(0,i.info)("bad white code"),this._eatBits(1),1}_getBlackCode(){let b,V;if(this.eoblock){if(b=this._lookBits(13),b===P)return 1;if(b>>7?!(b>>9)&&b>>7?V=f[(b>>1)-64]:V=R[b>>7]:V=y[b],V[0]>0)return this._eatBits(V[0]),V[1]}else{let l=this._findTableCode(2,6,R);if(l[0]||(l=this._findTableCode(7,12,f,64),l[0])||(l=this._findTableCode(10,13,y),l[0]))return l[1]}return(0,i.info)("bad black code"),this._eatBits(1),1}_lookBits(b){let V;for(;this.inputBits<b;){if((V=this.source.next())===-1)return this.inputBits===0?P:this.inputBuf<<b-this.inputBits&65535>>16-b;this.inputBuf=this.inputBuf<<8|V,this.inputBits+=8}return this.inputBuf>>this.inputBits-b&65535>>16-b}_eatBits(b){(this.inputBits-=b)<0&&(this.inputBits=0)}}D.CCITTFaxDecoder=E},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.FlateStream=void 0;var i=se(18),w=se(2);const P=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),e=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),t=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),o=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],K=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5];class j extends i.DecodeStream{constructor(O,d){super(d),this.str=O,this.dict=O.dict;const A=O.getByte(),n=O.getByte();if(A===-1||n===-1)throw new w.FormatError(`Invalid header in flate stream: ${A}, ${n}`);if((A&15)!==8)throw new w.FormatError(`Unknown compression method in flate stream: ${A}, ${n}`);if(((A<<8)+n)%31!==0)throw new w.FormatError(`Bad FCHECK in flate stream: ${A}, ${n}`);if(n&32)throw new w.FormatError(`FDICT bit set in flate stream: ${A}, ${n}`);this.codeSize=0,this.codeBuf=0}getBits(O){const d=this.str;let A=this.codeSize,n=this.codeBuf,I;for(;A<O;){if((I=d.getByte())===-1)throw new w.FormatError("Bad encoding in flate stream");n|=I<<A,A+=8}return I=n&(1<<O)-1,this.codeBuf=n>>O,this.codeSize=A-=O,I}getCode(O){const d=this.str,A=O[0],n=O[1];let I=this.codeSize,k=this.codeBuf,y;for(;I<n&&(y=d.getByte())!==-1;)k|=y<<I,I+=8;const f=A[k&(1<<n)-1],R=f>>16,E=f&65535;if(R<1||I<R)throw new w.FormatError("Bad encoding in flate stream");return this.codeBuf=k>>R,this.codeSize=I-R,E}generateHuffmanTable(O){const d=O.length;let A=0,n;for(n=0;n<d;++n)O[n]>A&&(A=O[n]);const I=1<<A,k=new Int32Array(I);for(let y=1,f=0,R=2;y<=A;++y,f<<=1,R<<=1)for(let E=0;E<d;++E)if(O[E]===y){let M=0,b=f;for(n=0;n<y;++n)M=M<<1|b&1,b>>=1;for(n=M;n<I;n+=R)k[n]=y<<16|E;++f}return[k,A]}readBlock(){let O,d;const A=this.str;let n=this.getBits(3);if(n&1&&(this.eof=!0),n>>=1,n===0){let R;if((R=A.getByte())===-1)throw new w.FormatError("Bad block header in flate stream");let E=R;if((R=A.getByte())===-1)throw new w.FormatError("Bad block header in flate stream");if(E|=R<<8,(R=A.getByte())===-1)throw new w.FormatError("Bad block header in flate stream");let M=R;if((R=A.getByte())===-1)throw new w.FormatError("Bad block header in flate stream");if(M|=R<<8,M!==(~E&65535)&&(E!==0||M!==0))throw new w.FormatError("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;const b=this.bufferLength,V=b+E;if(O=this.ensureBuffer(V),this.bufferLength=V,E===0)A.peekByte()===-1&&(this.eof=!0);else{const l=A.getBytes(E);O.set(l,b),l.length<E&&(this.eof=!0)}return}let I,k;if(n===1)I=o,k=K;else if(n===2){const R=this.getBits(5)+257,E=this.getBits(5)+1,M=this.getBits(4)+4,b=new Uint8Array(P.length);let V;for(V=0;V<M;++V)b[P[V]]=this.getBits(3);const l=this.generateHuffmanTable(b);d=0,V=0;const x=R+E,H=new Uint8Array(x);let s,h,F;for(;V<x;){const N=this.getCode(l);if(N===16)s=2,h=3,F=d;else if(N===17)s=3,h=3,F=d=0;else if(N===18)s=7,h=11,F=d=0;else{H[V++]=d=N;continue}let U=this.getBits(s)+h;for(;U-- >0;)H[V++]=F}I=this.generateHuffmanTable(H.subarray(0,R)),k=this.generateHuffmanTable(H.subarray(R,x))}else throw new w.FormatError("Unknown block type in flate stream");O=this.buffer;let y=O?O.length:0,f=this.bufferLength;for(;;){let R=this.getCode(I);if(R<256){f+1>=y&&(O=this.ensureBuffer(f+1),y=O.length),O[f++]=R;continue}if(R===256){this.bufferLength=f;return}R-=257,R=e[R];let E=R>>16;E>0&&(E=this.getBits(E)),d=(R&65535)+E,R=this.getCode(k),R=t[R],E=R>>16,E>0&&(E=this.getBits(E));const M=(R&65535)+E;f+d>=y&&(O=this.ensureBuffer(f+d),y=O.length);for(let b=0;b<d;++b,++f)O[f]=O[f-M]}}}D.FlateStream=j},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Jbig2Stream=void 0;var i=se(5),w=se(18),P=se(4),e=se(24),t=se(2);class o extends w.DecodeStream{constructor(j,C,O){super(C),this.stream=j,this.dict=j.dict,this.maybeLength=C,this.params=O}get bytes(){return(0,t.shadow)(this,"bytes",this.stream.getBytes(this.maybeLength))}ensureBuffer(j){}readBlock(){if(this.eof)return;const j=new e.Jbig2Image,C=[];if(this.params instanceof P.Dict){const A=this.params.get("JBIG2Globals");if(A instanceof i.BaseStream){const n=A.getBytes();C.push({data:n,start:0,end:n.length})}}C.push({data:this.bytes,start:0,end:this.bytes.length});const O=j.parseChunks(C),d=O.length;for(let A=0;A<d;A++)O[A]^=255;this.buffer=O,this.bufferLength=d,this.eof=!0}}D.Jbig2Stream=o},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Jbig2Image=void 0;var i=se(2),w=se(3),P=se(25),e=se(21);class t extends i.BaseException{constructor(L){super(`JBIG2 error: ${L}`,"Jbig2Error")}}class o{getContexts(L){return L in this?this[L]:this[L]=new Int8Array(65536)}}class K{constructor(L,oe,T){this.data=L,this.start=oe,this.end=T}get decoder(){const L=new P.ArithmeticDecoder(this.data,this.start,this.end);return(0,i.shadow)(this,"decoder",L)}get contextCache(){const L=new o;return(0,i.shadow)(this,"contextCache",L)}}const j=Gt(2,31)-1,C=-Gt(2,31);function O(ie,L,oe){const T=ie.getContexts(L);let Q=1;function v(ne){let X=0;for(let re=0;re<ne;re++){const ae=oe.readBit(T,Q);Q=Q<256?Q<<1|ae:(Q<<1|ae)&511|256,X=X<<1|ae}return X>>>0}const $=v(1),Z=v(1)?v(1)?v(1)?v(1)?v(1)?v(32)+4436:v(12)+340:v(8)+84:v(6)+20:v(4)+4:v(2);let te;return $===0?te=Z:Z>0&&(te=-Z),te>=C&&te<=j?te:null}function d(ie,L,oe){const T=ie.getContexts("IAID");let Q=1;for(let v=0;v<oe;v++){const $=L.readBit(T,Q);Q=Q<<1|$}return oe<31?Q&(1<<oe)-1:Q&2147483647}const A=["SymbolDictionary",null,null,null,"IntermediateTextRegion",null,"ImmediateTextRegion","ImmediateLosslessTextRegion",null,null,null,null,null,null,null,null,"PatternDictionary",null,null,null,"IntermediateHalftoneRegion",null,"ImmediateHalftoneRegion","ImmediateLosslessHalftoneRegion",null,null,null,null,null,null,null,null,null,null,null,null,"IntermediateGenericRegion",null,"ImmediateGenericRegion","ImmediateLosslessGenericRegion","IntermediateGenericRefinementRegion",null,"ImmediateGenericRefinementRegion","ImmediateLosslessGenericRefinementRegion",null,null,null,null,"PageInformation","EndOfPage","EndOfStripe","EndOfFile","Profiles","Tables",null,null,null,null,null,null,null,null,"Extension"],n=[[{x:-1,y:-2},{x:0,y:-2},{x:1,y:-2},{x:-2,y:-1},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:2,y:-1},{x:-4,y:0},{x:-3,y:0},{x:-2,y:0},{x:-1,y:0}],[{x:-1,y:-2},{x:0,y:-2},{x:1,y:-2},{x:2,y:-2},{x:-2,y:-1},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:2,y:-1},{x:-3,y:0},{x:-2,y:0},{x:-1,y:0}],[{x:-1,y:-2},{x:0,y:-2},{x:1,y:-2},{x:-2,y:-1},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:-2,y:0},{x:-1,y:0}],[{x:-3,y:-1},{x:-2,y:-1},{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:-4,y:0},{x:-3,y:0},{x:-2,y:0},{x:-1,y:0}]],I=[{coding:[{x:0,y:-1},{x:1,y:-1},{x:-1,y:0}],reference:[{x:0,y:-1},{x:1,y:-1},{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1}]},{coding:[{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:-1,y:0}],reference:[{x:0,y:-1},{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}]}],k=[39717,1941,229,405];function y(ie,L,oe){const T=oe.decoder,Q=oe.contextCache.getContexts("GB"),v=[];let $,Z,te,ne,X,re,ae;const z=31735;for(Z=0;Z<L;Z++)for(X=v[Z]=new Uint8Array(ie),re=Z<1?X:v[Z-1],ae=Z<2?X:v[Z-2],$=ae[0]<<13|ae[1]<<12|ae[2]<<11|re[0]<<7|re[1]<<6|re[2]<<5|re[3]<<4,te=0;te<ie;te++)X[te]=ne=T.readBit(Q,$),$=($&z)<<1|(te+3<ie?ae[te+3]<<11:0)|(te+4<ie?re[te+4]<<4:0)|ne;return v}function f(ie,L,oe,T,Q,v,$,Z){if(ie){const be=new u(Z.data,Z.start,Z.end);return ce(be,L,oe,!1)}if(T===0&&!v&&!Q&&$.length===4&&$[0].x===3&&$[0].y===-1&&$[1].x===-3&&$[1].y===-1&&$[2].x===2&&$[2].y===-2&&$[3].x===-2&&$[3].y===-2)return y(L,oe,Z);const te=n[T].concat($);te.sort(function(be,Be){return be.y-Be.y||be.x-Be.x});const ne=te.length,X=new Int8Array(ne),re=new Int8Array(ne),ae=[];let z=0,le=0,ue=0,ge=0,ke,me;for(me=0;me<ne;me++)X[me]=te[me].x,re[me]=te[me].y,le=Math.min(le,te[me].x),ue=Math.max(ue,te[me].x),ge=Math.min(ge,te[me].y),me<ne-1&&te[me].y===te[me+1].y&&te[me].x===te[me+1].x-1?z|=1<<ne-1-me:ae.push(me);const fe=ae.length,xe=new Int8Array(fe),pe=new Int8Array(fe),we=new Uint16Array(fe);for(ke=0;ke<fe;ke++)me=ae[ke],xe[ke]=te[me].x,pe[ke]=te[me].y,we[ke]=1<<ne-1-me;const Oe=-le,Te=-ge,Ce=L-ue,Ae=k[T];let Se=new Uint8Array(L);const He=[],Ve=Z.decoder,Le=Z.contextCache.getContexts("GB");let Ye=0,lt,Ee,ut,_e=0,Ie,de;for(let be=0;be<oe;be++){if(Q){const Be=Ve.readBit(Le,Ae);if(Ye^=Be,Ye){He.push(Se);continue}}for(Se=new Uint8Array(Se),He.push(Se),lt=0;lt<L;lt++){if(lt>=Oe&&lt<Ce&&be>=Te)for(_e=_e<<1&z,me=0;me<fe;me++)Ee=be+pe[me],ut=lt+xe[me],Ie=He[Ee][ut],Ie&&(Ie=we[me],_e|=Ie);else for(_e=0,de=ne-1,me=0;me<ne;me++,de--)ut=lt+X[me],ut>=0&&ut<L&&(Ee=be+re[me],Ee>=0&&(Ie=He[Ee][ut],Ie&&(_e|=Ie<<de)));const Be=Ve.readBit(Le,_e);Se[lt]=Be}}return He}function R(ie,L,oe,T,Q,v,$,Z,te){let ne=I[oe].coding;oe===0&&(ne=ne.concat([Z[0]]));const X=ne.length,re=new Int32Array(X),ae=new Int32Array(X);let z;for(z=0;z<X;z++)re[z]=ne[z].x,ae[z]=ne[z].y;let le=I[oe].reference;oe===0&&(le=le.concat([Z[1]]));const ue=le.length,ge=new Int32Array(ue),ke=new Int32Array(ue);for(z=0;z<ue;z++)ge[z]=le[z].x,ke[z]=le[z].y;const me=T[0].length,fe=T.length,xe=[],pe=te.decoder,we=te.contextCache.getContexts("GR");for(let Oe=0;Oe<L;Oe++){const Te=new Uint8Array(ie);xe.push(Te);for(let Ce=0;Ce<ie;Ce++){let Ae,Se,He=0;for(z=0;z<X;z++)Ae=Oe+ae[z],Se=Ce+re[z],Ae<0||Se<0||Se>=ie?He<<=1:He=He<<1|xe[Ae][Se];for(z=0;z<ue;z++)Ae=Oe+ke[z]-v,Se=Ce+ge[z]-Q,Ae<0||Ae>=fe||Se<0||Se>=me?He<<=1:He=He<<1|T[Ae][Se];const Ve=pe.readBit(we,He);Te[Ce]=Ve}}return xe}function E(ie,L,oe,T,Q,v,$,Z,te,ne,X,re){if(ie&&L)throw new t("symbol refinement with Huffman is not supported");const ae=[];let z=0,le=(0,w.log2)(oe.length+T);const ue=X.decoder,ge=X.contextCache;let ke,me;for(ie&&(ke=c(1),me=[],le=Math.max(le,1));ae.length<T;){const Ce=ie?v.tableDeltaHeight.decode(re):O(ge,"IADH",ue);z+=Ce;let Ae=0,Se=0;const He=ie?me.length:0;for(;;){const Ve=ie?v.tableDeltaWidth.decode(re):O(ge,"IADW",ue);if(Ve===null)break;Ae+=Ve,Se+=Ae;let Le;if(L){const Ye=O(ge,"IAAI",ue);if(Ye>1)Le=M(ie,L,Ae,z,0,Ye,1,oe.concat(ae),le,0,0,1,0,v,te,ne,X,0,re);else{const lt=d(ge,ue,le),Ee=O(ge,"IARDX",ue),ut=O(ge,"IARDY",ue),_e=lt<oe.length?oe[lt]:ae[lt-oe.length];Le=R(Ae,z,te,_e,Ee,ut,!1,ne,X)}ae.push(Le)}else ie?me.push(Ae):(Le=f(!1,Ae,z,$,!1,null,Z,X),ae.push(Le))}if(ie&&!L){const Ve=v.tableBitmapSize.decode(re);re.byteAlign();let Le;if(Ve===0)Le=W(re,Se,z);else{const lt=re.end,Ee=re.position+Ve;re.end=Ee,Le=ce(re,Se,z,!1),re.end=lt,re.position=Ee}const Ye=me.length;if(He===Ye-1)ae.push(Le);else{let lt,Ee,ut=0,_e,Ie,de;for(lt=He;lt<Ye;lt++){for(Ie=me[lt],_e=ut+Ie,de=[],Ee=0;Ee<z;Ee++)de.push(Le[Ee].subarray(ut,_e));ae.push(de),ut=_e}}}}const fe=[],xe=[];let pe=!1,we,Oe;const Te=oe.length+T;for(;xe.length<Te;){let Ce=ie?ke.decode(re):O(ge,"IAEX",ue);for(;Ce--;)xe.push(pe);pe=!pe}for(we=0,Oe=oe.length;we<Oe;we++)xe[we]&&fe.push(oe[we]);for(let Ce=0;Ce<T;we++,Ce++)xe[we]&&fe.push(ae[Ce]);return fe}function M(ie,L,oe,T,Q,v,$,Z,te,ne,X,re,ae,z,le,ue,ge,ke,me){if(ie&&L)throw new t("refinement with Huffman is not supported");const fe=[];let xe,pe;for(xe=0;xe<T;xe++){if(pe=new Uint8Array(oe),Q)for(let Ae=0;Ae<oe;Ae++)pe[Ae]=Q;fe.push(pe)}const we=ge.decoder,Oe=ge.contextCache;let Te=ie?-z.tableDeltaT.decode(me):-O(Oe,"IADT",we),Ce=0;for(xe=0;xe<v;){const Ae=ie?z.tableDeltaT.decode(me):O(Oe,"IADT",we);Te+=Ae;const Se=ie?z.tableFirstS.decode(me):O(Oe,"IAFS",we);Ce+=Se;let He=Ce;do{let Ve=0;$>1&&(Ve=ie?me.readBits(ke):O(Oe,"IAIT",we));const Le=$*Te+Ve,Ye=ie?z.symbolIDTable.decode(me):d(Oe,we,te),lt=L&&(ie?me.readBit():O(Oe,"IARI",we));let Ee=Z[Ye],ut=Ee[0].length,_e=Ee.length;if(lt){const Je=O(Oe,"IARDW",we),$e=O(Oe,"IARDH",we),ve=O(Oe,"IARDX",we),We=O(Oe,"IARDY",we);ut+=Je,_e+=$e,Ee=R(ut,_e,le,Ee,(Je>>1)+ve,($e>>1)+We,!1,ue,ge)}const Ie=Le-(re&1?0:_e-1),de=He-(re&2?ut-1:0);let be,Be,Pe;if(ne){for(be=0;be<_e;be++){if(pe=fe[de+be],!pe)continue;Pe=Ee[be];const Je=Math.min(oe-Ie,ut);switch(ae){case 0:for(Be=0;Be<Je;Be++)pe[Ie+Be]|=Pe[Be];break;case 2:for(Be=0;Be<Je;Be++)pe[Ie+Be]^=Pe[Be];break;default:throw new t(`operator ${ae} is not supported`)}}He+=_e-1}else{for(Be=0;Be<_e;Be++)if(pe=fe[Ie+Be],!!pe)switch(Pe=Ee[Be],ae){case 0:for(be=0;be<ut;be++)pe[de+be]|=Pe[be];break;case 2:for(be=0;be<ut;be++)pe[de+be]^=Pe[be];break;default:throw new t(`operator ${ae} is not supported`)}He+=ut-1}xe++;const je=ie?z.tableDeltaS.decode(me):O(Oe,"IADS",we);if(je===null)break;He+=je+X}while(!0)}return fe}function b(ie,L,oe,T,Q,v){const $=[];ie||($.push({x:-L,y:0}),Q===0&&$.push({x:-3,y:-1},{x:2,y:-2},{x:-2,y:-2}));const Z=(T+1)*L,te=f(ie,Z,oe,Q,!1,null,$,v),ne=[];for(let X=0;X<=T;X++){const re=[],ae=L*X,z=ae+L;for(let le=0;le<oe;le++)re.push(te[le].subarray(ae,z));ne.push(re)}return ne}function V(ie,L,oe,T,Q,v,$,Z,te,ne,X,re,ae,z,le){if($)throw new t("skip is not supported");if(Z!==0)throw new t(`operator "${Z}" is not supported in halftone region`);const ge=[];let ke,me,fe;for(ke=0;ke<Q;ke++){if(fe=new Uint8Array(T),v)for(me=0;me<T;me++)fe[me]=v;ge.push(fe)}const xe=L.length,pe=L[0],we=pe[0].length,Oe=pe.length,Te=(0,w.log2)(xe),Ce=[];ie||(Ce.push({x:oe<=1?3:2,y:-1}),oe===0&&Ce.push({x:-3,y:-1},{x:2,y:-2},{x:-2,y:-2}));const Ae=[];let Se,He;for(ie&&(Se=new u(le.data,le.start,le.end)),ke=Te-1;ke>=0;ke--)ie?He=ce(Se,te,ne,!0):He=f(!1,te,ne,oe,!1,null,Ce,le),Ae[ke]=He;let Ve,Le,Ye,lt,Ee,ut,_e,Ie,de;for(Ve=0;Ve<ne;Ve++)for(Le=0;Le<te;Le++){for(Ye=0,lt=0,me=Te-1;me>=0;me--)Ye^=Ae[me][Ve][Le],lt|=Ye<<me;if(Ee=L[lt],ut=X+Ve*z+Le*ae>>8,_e=re+Ve*ae-Le*z>>8,ut>=0&&ut+we<=T&&_e>=0&&_e+Oe<=Q)for(ke=0;ke<Oe;ke++)for(de=ge[_e+ke],Ie=Ee[ke],me=0;me<we;me++)de[ut+me]|=Ie[me];else{let be,Be;for(ke=0;ke<Oe;ke++)if(Be=_e+ke,!(Be<0||Be>=Q))for(de=ge[Be],Ie=Ee[ke],me=0;me<we;me++)be=ut+me,be>=0&&be<T&&(de[be]|=Ie[me])}}return ge}function l(ie,L){const oe={};oe.number=(0,w.readUint32)(ie,L);const T=ie[L+4],Q=T&63;if(!A[Q])throw new t("invalid segment type: "+Q);oe.type=Q,oe.typeName=A[Q],oe.deferredNonRetain=!!(T&128);const v=!!(T&64),$=ie[L+5];let Z=$>>5&7;const te=[$&31];let ne=L+6;if($===7){Z=(0,w.readUint32)(ie,ne-1)&536870911,ne+=3;let le=Z+7>>3;for(te[0]=ie[ne++];--le>0;)te.push(ie[ne++])}else if($===5||$===6)throw new t("invalid referred-to flags");oe.retainBits=te;let X=4;oe.number<=256?X=1:oe.number<=65536&&(X=2);const re=[];let ae,z;for(ae=0;ae<Z;ae++){let le;X===1?le=ie[ne]:X===2?le=(0,w.readUint16)(ie,ne):le=(0,w.readUint32)(ie,ne),re.push(le),ne+=X}if(oe.referredTo=re,v?(oe.pageAssociation=(0,w.readUint32)(ie,ne),ne+=4):oe.pageAssociation=ie[ne++],oe.length=(0,w.readUint32)(ie,ne),ne+=4,oe.length===4294967295)if(Q===38){const le=H(ie,ne),ge=!!(ie[ne+s]&1),ke=6,me=new Uint8Array(ke);for(ge||(me[0]=255,me[1]=172),me[2]=le.height>>>24&255,me[3]=le.height>>16&255,me[4]=le.height>>8&255,me[5]=le.height&255,ae=ne,z=ie.length;ae<z;ae++){let fe=0;for(;fe<ke&&me[fe]===ie[ae+fe];)fe++;if(fe===ke){oe.length=ae+ke;break}}if(oe.length===4294967295)throw new t("segment end was not found")}else throw new t("invalid unknown segment length");return oe.headerEnd=ne,oe}function x(ie,L,oe,T){const Q=[];let v=oe;for(;v<T;){const $=l(L,v);v=$.headerEnd;const Z={header:$,data:L};if(ie.randomAccess||(Z.start=v,v+=$.length,Z.end=v),Q.push(Z),$.type===51)break}if(ie.randomAccess)for(let $=0,Z=Q.length;$<Z;$++)Q[$].start=v,v+=Q[$].header.length,Q[$].end=v;return Q}function H(ie,L){return{width:(0,w.readUint32)(ie,L),height:(0,w.readUint32)(ie,L+4),x:(0,w.readUint32)(ie,L+8),y:(0,w.readUint32)(ie,L+12),combinationOperator:ie[L+16]&7}}const s=17;function h(ie,L){const oe=ie.header,T=ie.data,Q=ie.end;let v=ie.start,$,Z,te,ne;switch(oe.type){case 0:const re={},ae=(0,w.readUint16)(T,v);if(re.huffman=!!(ae&1),re.refinement=!!(ae&2),re.huffmanDHSelector=ae>>2&3,re.huffmanDWSelector=ae>>4&3,re.bitmapSizeSelector=ae>>6&1,re.aggregationInstancesSelector=ae>>7&1,re.bitmapCodingContextUsed=!!(ae&256),re.bitmapCodingContextRetained=!!(ae&512),re.template=ae>>10&3,re.refinementTemplate=ae>>12&1,v+=2,!re.huffman){for(ne=re.template===0?4:1,Z=[],te=0;te<ne;te++)Z.push({x:(0,w.readInt8)(T,v),y:(0,w.readInt8)(T,v+1)}),v+=2;re.at=Z}if(re.refinement&&!re.refinementTemplate){for(Z=[],te=0;te<2;te++)Z.push({x:(0,w.readInt8)(T,v),y:(0,w.readInt8)(T,v+1)}),v+=2;re.refinementAt=Z}re.numberOfExportedSymbols=(0,w.readUint32)(T,v),v+=4,re.numberOfNewSymbols=(0,w.readUint32)(T,v),v+=4,$=[re,oe.number,oe.referredTo,T,v,Q];break;case 6:case 7:const z={};z.info=H(T,v),v+=s;const le=(0,w.readUint16)(T,v);if(v+=2,z.huffman=!!(le&1),z.refinement=!!(le&2),z.logStripSize=le>>2&3,z.stripSize=1<<z.logStripSize,z.referenceCorner=le>>4&3,z.transposed=!!(le&64),z.combinationOperator=le>>7&3,z.defaultPixelValue=le>>9&1,z.dsOffset=le<<17>>27,z.refinementTemplate=le>>15&1,z.huffman){const Oe=(0,w.readUint16)(T,v);v+=2,z.huffmanFS=Oe&3,z.huffmanDS=Oe>>2&3,z.huffmanDT=Oe>>4&3,z.huffmanRefinementDW=Oe>>6&3,z.huffmanRefinementDH=Oe>>8&3,z.huffmanRefinementDX=Oe>>10&3,z.huffmanRefinementDY=Oe>>12&3,z.huffmanRefinementSizeSelector=!!(Oe&16384)}if(z.refinement&&!z.refinementTemplate){for(Z=[],te=0;te<2;te++)Z.push({x:(0,w.readInt8)(T,v),y:(0,w.readInt8)(T,v+1)}),v+=2;z.refinementAt=Z}z.numberOfSymbolInstances=(0,w.readUint32)(T,v),v+=4,$=[z,oe.referredTo,T,v,Q];break;case 16:const ue={},ge=T[v++];ue.mmr=!!(ge&1),ue.template=ge>>1&3,ue.patternWidth=T[v++],ue.patternHeight=T[v++],ue.maxPatternIndex=(0,w.readUint32)(T,v),v+=4,$=[ue,oe.number,T,v,Q];break;case 22:case 23:const ke={};ke.info=H(T,v),v+=s;const me=T[v++];ke.mmr=!!(me&1),ke.template=me>>1&3,ke.enableSkip=!!(me&8),ke.combinationOperator=me>>4&7,ke.defaultPixelValue=me>>7&1,ke.gridWidth=(0,w.readUint32)(T,v),v+=4,ke.gridHeight=(0,w.readUint32)(T,v),v+=4,ke.gridOffsetX=(0,w.readUint32)(T,v)&4294967295,v+=4,ke.gridOffsetY=(0,w.readUint32)(T,v)&4294967295,v+=4,ke.gridVectorX=(0,w.readUint16)(T,v),v+=2,ke.gridVectorY=(0,w.readUint16)(T,v),v+=2,$=[ke,oe.referredTo,T,v,Q];break;case 38:case 39:const fe={};fe.info=H(T,v),v+=s;const xe=T[v++];if(fe.mmr=!!(xe&1),fe.template=xe>>1&3,fe.prediction=!!(xe&8),!fe.mmr){for(ne=fe.template===0?4:1,Z=[],te=0;te<ne;te++)Z.push({x:(0,w.readInt8)(T,v),y:(0,w.readInt8)(T,v+1)}),v+=2;fe.at=Z}$=[fe,T,v,Q];break;case 48:const pe={width:(0,w.readUint32)(T,v),height:(0,w.readUint32)(T,v+4),resolutionX:(0,w.readUint32)(T,v+8),resolutionY:(0,w.readUint32)(T,v+12)};pe.height===4294967295&&delete pe.height;const we=T[v+16];(0,w.readUint16)(T,v+17),pe.lossless=!!(we&1),pe.refinement=!!(we&2),pe.defaultPixelValue=we>>2&1,pe.combinationOperator=we>>3&3,pe.requiresBuffer=!!(we&32),pe.combinationOperatorOverride=!!(we&64),$=[pe];break;case 49:break;case 50:break;case 51:break;case 53:$=[oe.number,T,v,Q];break;case 62:break;default:throw new t(`segment type ${oe.typeName}(${oe.type}) is not implemented`)}const X="on"+oe.typeName;X in L&&L[X].apply(L,$)}function F(ie,L){for(let oe=0,T=ie.length;oe<T;oe++)h(ie[oe],L)}function N(ie){const L=new U;for(let oe=0,T=ie.length;oe<T;oe++){const Q=ie[oe],v=x({},Q.data,Q.start,Q.end);F(v,L)}return L.buffer}class U{onPageInformation(L){this.currentPageInfo=L;const oe=L.width+7>>3,T=new Uint8ClampedArray(oe*L.height);L.defaultPixelValue&&T.fill(255),this.buffer=T}drawBitmap(L,oe){const T=this.currentPageInfo,Q=L.width,v=L.height,$=T.width+7>>3,Z=T.combinationOperatorOverride?L.combinationOperator:T.combinationOperator,te=this.buffer,ne=128>>(L.x&7);let X=L.y*$+(L.x>>3),re,ae,z,le;switch(Z){case 0:for(re=0;re<v;re++){for(z=ne,le=X,ae=0;ae<Q;ae++)oe[re][ae]&&(te[le]|=z),z>>=1,z||(z=128,le++);X+=$}break;case 2:for(re=0;re<v;re++){for(z=ne,le=X,ae=0;ae<Q;ae++)oe[re][ae]&&(te[le]^=z),z>>=1,z||(z=128,le++);X+=$}break;default:throw new t(`operator ${Z} is not supported`)}}onImmediateGenericRegion(L,oe,T,Q){const v=L.info,$=new K(oe,T,Q),Z=f(L.mmr,v.width,v.height,L.template,L.prediction,null,L.at,$);this.drawBitmap(v,Z)}onImmediateLosslessGenericRegion(){this.onImmediateGenericRegion(...arguments)}onSymbolDictionary(L,oe,T,Q,v,$){let Z,te;L.huffman&&(Z=G(L,T,this.customTables),te=new u(Q,v,$));let ne=this.symbols;ne||(this.symbols=ne={});const X=[];for(const ae of T){const z=ne[ae];z&&X.push(...z)}const re=new K(Q,v,$);ne[oe]=E(L.huffman,L.refinement,X,L.numberOfNewSymbols,L.numberOfExportedSymbols,Z,L.template,L.at,L.refinementTemplate,L.refinementAt,re,te)}onImmediateTextRegion(L,oe,T,Q,v){const $=L.info;let Z,te;const ne=this.symbols,X=[];for(const le of oe){const ue=ne[le];ue&&X.push(...ue)}const re=(0,w.log2)(X.length);L.huffman&&(te=new u(T,Q,v),Z=J(L,oe,this.customTables,X.length,te));const ae=new K(T,Q,v),z=M(L.huffman,L.refinement,$.width,$.height,L.defaultPixelValue,L.numberOfSymbolInstances,L.stripSize,X,re,L.transposed,L.dsOffset,L.referenceCorner,L.combinationOperator,Z,L.refinementTemplate,L.refinementAt,ae,L.logStripSize,te);this.drawBitmap($,z)}onImmediateLosslessTextRegion(){this.onImmediateTextRegion(...arguments)}onPatternDictionary(L,oe,T,Q,v){let $=this.patterns;$||(this.patterns=$={});const Z=new K(T,Q,v);$[oe]=b(L.mmr,L.patternWidth,L.patternHeight,L.maxPatternIndex,L.template,Z)}onImmediateHalftoneRegion(L,oe,T,Q,v){const $=this.patterns[oe[0]],Z=L.info,te=new K(T,Q,v),ne=V(L.mmr,$,L.template,Z.width,Z.height,L.defaultPixelValue,L.enableSkip,L.combinationOperator,L.gridWidth,L.gridHeight,L.gridOffsetX,L.gridOffsetY,L.gridVectorX,L.gridVectorY,te);this.drawBitmap(Z,ne)}onImmediateLosslessHalftoneRegion(){this.onImmediateHalftoneRegion(...arguments)}onTables(L,oe,T,Q){let v=this.customTables;v||(this.customTables=v={}),v[L]=r(oe,T,Q)}}class g{constructor(L){L.length===2?(this.isOOB=!0,this.rangeLow=0,this.prefixLength=L[0],this.rangeLength=0,this.prefixCode=L[1],this.isLowerRange=!1):(this.isOOB=!1,this.rangeLow=L[0],this.prefixLength=L[1],this.rangeLength=L[2],this.prefixCode=L[3],this.isLowerRange=L[4]==="lower")}}class S{constructor(L){this.children=[],L?(this.isLeaf=!0,this.rangeLength=L.rangeLength,this.rangeLow=L.rangeLow,this.isLowerRange=L.isLowerRange,this.isOOB=L.isOOB):this.isLeaf=!1}buildTree(L,oe){const T=L.prefixCode>>oe&1;if(oe<=0)this.children[T]=new S(L);else{let Q=this.children[T];Q||(this.children[T]=Q=new S(null)),Q.buildTree(L,oe-1)}}decodeNode(L){if(this.isLeaf){if(this.isOOB)return null;const T=L.readBits(this.rangeLength);return this.rangeLow+(this.isLowerRange?-T:T)}const oe=this.children[L.readBit()];if(!oe)throw new t("invalid Huffman data");return oe.decodeNode(L)}}class m{constructor(L,oe){oe||this.assignPrefixCodes(L),this.rootNode=new S(null);for(let T=0,Q=L.length;T<Q;T++){const v=L[T];v.prefixLength>0&&this.rootNode.buildTree(v,v.prefixLength-1)}}decode(L){return this.rootNode.decodeNode(L)}assignPrefixCodes(L){const oe=L.length;let T=0;for(let X=0;X<oe;X++)T=Math.max(T,L[X].prefixLength);const Q=new Uint32Array(T+1);for(let X=0;X<oe;X++)Q[L[X].prefixLength]++;let v=1,$=0,Z,te,ne;for(Q[0]=0;v<=T;){for($=$+Q[v-1]<<1,Z=$,te=0;te<oe;)ne=L[te],ne.prefixLength===v&&(ne.prefixCode=Z,Z++),te++;v++}}}function r(ie,L,oe){const T=ie[L],Q=(0,w.readUint32)(ie,L+1)&4294967295,v=(0,w.readUint32)(ie,L+5)&4294967295,$=new u(ie,L+9,oe),Z=(T>>1&7)+1,te=(T>>4&7)+1,ne=[];let X,re,ae=Q;do X=$.readBits(Z),re=$.readBits(te),ne.push(new g([ae,X,re,0])),ae+=1<<re;while(ae<v);return X=$.readBits(Z),ne.push(new g([Q-1,X,32,0,"lower"])),X=$.readBits(Z),ne.push(new g([v,X,32,0])),T&1&&(X=$.readBits(Z),ne.push(new g([X,0]))),new m(ne,!1)}const p={};function c(ie){let L=p[ie];if(L)return L;let oe;switch(ie){case 1:oe=[[0,1,4,0],[16,2,8,2],[272,3,16,6],[65808,3,32,7]];break;case 2:oe=[[0,1,0,0],[1,2,0,2],[2,3,0,6],[3,4,3,14],[11,5,6,30],[75,6,32,62],[6,63]];break;case 3:oe=[[-256,8,8,254],[0,1,0,0],[1,2,0,2],[2,3,0,6],[3,4,3,14],[11,5,6,30],[-257,8,32,255,"lower"],[75,7,32,126],[6,62]];break;case 4:oe=[[1,1,0,0],[2,2,0,2],[3,3,0,6],[4,4,3,14],[12,5,6,30],[76,5,32,31]];break;case 5:oe=[[-255,7,8,126],[1,1,0,0],[2,2,0,2],[3,3,0,6],[4,4,3,14],[12,5,6,30],[-256,7,32,127,"lower"],[76,6,32,62]];break;case 6:oe=[[-2048,5,10,28],[-1024,4,9,8],[-512,4,8,9],[-256,4,7,10],[-128,5,6,29],[-64,5,5,30],[-32,4,5,11],[0,2,7,0],[128,3,7,2],[256,3,8,3],[512,4,9,12],[1024,4,10,13],[-2049,6,32,62,"lower"],[2048,6,32,63]];break;case 7:oe=[[-1024,4,9,8],[-512,3,8,0],[-256,4,7,9],[-128,5,6,26],[-64,5,5,27],[-32,4,5,10],[0,4,5,11],[32,5,5,28],[64,5,6,29],[128,4,7,12],[256,3,8,1],[512,3,9,2],[1024,3,10,3],[-1025,5,32,30,"lower"],[2048,5,32,31]];break;case 8:oe=[[-15,8,3,252],[-7,9,1,508],[-5,8,1,253],[-3,9,0,509],[-2,7,0,124],[-1,4,0,10],[0,2,1,0],[2,5,0,26],[3,6,0,58],[4,3,4,4],[20,6,1,59],[22,4,4,11],[38,4,5,12],[70,5,6,27],[134,5,7,28],[262,6,7,60],[390,7,8,125],[646,6,10,61],[-16,9,32,510,"lower"],[1670,9,32,511],[2,1]];break;case 9:oe=[[-31,8,4,252],[-15,9,2,508],[-11,8,2,253],[-7,9,1,509],[-5,7,1,124],[-3,4,1,10],[-1,3,1,2],[1,3,1,3],[3,5,1,26],[5,6,1,58],[7,3,5,4],[39,6,2,59],[43,4,5,11],[75,4,6,12],[139,5,7,27],[267,5,8,28],[523,6,8,60],[779,7,9,125],[1291,6,11,61],[-32,9,32,510,"lower"],[3339,9,32,511],[2,0]];break;case 10:oe=[[-21,7,4,122],[-5,8,0,252],[-4,7,0,123],[-3,5,0,24],[-2,2,2,0],[2,5,0,25],[3,6,0,54],[4,7,0,124],[5,8,0,253],[6,2,6,1],[70,5,5,26],[102,6,5,55],[134,6,6,56],[198,6,7,57],[326,6,8,58],[582,6,9,59],[1094,6,10,60],[2118,7,11,125],[-22,8,32,254,"lower"],[4166,8,32,255],[2,2]];break;case 11:oe=[[1,1,0,0],[2,2,1,2],[4,4,0,12],[5,4,1,13],[7,5,1,28],[9,5,2,29],[13,6,2,60],[17,7,2,122],[21,7,3,123],[29,7,4,124],[45,7,5,125],[77,7,6,126],[141,7,32,127]];break;case 12:oe=[[1,1,0,0],[2,2,0,2],[3,3,1,6],[5,5,0,28],[6,5,1,29],[8,6,1,60],[10,7,0,122],[11,7,1,123],[13,7,2,124],[17,7,3,125],[25,7,4,126],[41,8,5,254],[73,8,32,255]];break;case 13:oe=[[1,1,0,0],[2,3,0,4],[3,4,0,12],[4,5,0,28],[5,4,1,13],[7,3,3,5],[15,6,1,58],[17,6,2,59],[21,6,3,60],[29,6,4,61],[45,6,5,62],[77,7,6,126],[141,7,32,127]];break;case 14:oe=[[-2,3,0,4],[-1,3,0,5],[0,1,0,0],[1,3,0,6],[2,3,0,7]];break;case 15:oe=[[-24,7,4,124],[-8,6,2,60],[-4,5,1,28],[-2,4,0,12],[-1,3,0,4],[0,1,0,0],[1,3,0,5],[2,4,0,13],[3,5,1,29],[5,6,2,61],[9,7,4,125],[-25,7,32,126,"lower"],[25,7,32,127]];break;default:throw new t(`standard table B.${ie} does not exist`)}for(let T=0,Q=oe.length;T<Q;T++)oe[T]=new g(oe[T]);return L=new m(oe,!0),p[ie]=L,L}class u{constructor(L,oe,T){this.data=L,this.start=oe,this.end=T,this.position=oe,this.shift=-1,this.currentByte=0}readBit(){if(this.shift<0){if(this.position>=this.end)throw new t("end of data while reading bit");this.currentByte=this.data[this.position++],this.shift=7}const L=this.currentByte>>this.shift&1;return this.shift--,L}readBits(L){let oe=0,T;for(T=L-1;T>=0;T--)oe|=this.readBit()<<T;return oe}byteAlign(){this.shift=-1}next(){return this.position>=this.end?-1:this.data[this.position++]}}function q(ie,L,oe){let T=0;for(let Q=0,v=L.length;Q<v;Q++){const $=oe[L[Q]];if($){if(ie===T)return $;T++}}throw new t("can't find custom Huffman table")}function J(ie,L,oe,T,Q){const v=[];for(let ae=0;ae<=34;ae++){const z=Q.readBits(4);v.push(new g([ae,z,0,0]))}const $=new m(v,!1);v.length=0;for(let ae=0;ae<T;){const z=$.decode(Q);if(z>=32){let le,ue,ge;switch(z){case 32:if(ae===0)throw new t("no previous value in symbol ID table");ue=Q.readBits(2)+3,le=v[ae-1].prefixLength;break;case 33:ue=Q.readBits(3)+3,le=0;break;case 34:ue=Q.readBits(7)+11,le=0;break;default:throw new t("invalid code length in symbol ID table")}for(ge=0;ge<ue;ge++)v.push(new g([ae,le,0,0])),ae++}else v.push(new g([ae,z,0,0])),ae++}Q.byteAlign();const Z=new m(v,!1);let te=0,ne,X,re;switch(ie.huffmanFS){case 0:case 1:ne=c(ie.huffmanFS+6);break;case 3:ne=q(te,L,oe),te++;break;default:throw new t("invalid Huffman FS selector")}switch(ie.huffmanDS){case 0:case 1:case 2:X=c(ie.huffmanDS+8);break;case 3:X=q(te,L,oe),te++;break;default:throw new t("invalid Huffman DS selector")}switch(ie.huffmanDT){case 0:case 1:case 2:re=c(ie.huffmanDT+11);break;case 3:re=q(te,L,oe),te++;break;default:throw new t("invalid Huffman DT selector")}if(ie.refinement)throw new t("refinement with Huffman is not supported");return{symbolIDTable:Z,tableFirstS:ne,tableDeltaS:X,tableDeltaT:re}}function G(ie,L,oe){let T=0,Q,v;switch(ie.huffmanDHSelector){case 0:case 1:Q=c(ie.huffmanDHSelector+4);break;case 3:Q=q(T,L,oe),T++;break;default:throw new t("invalid Huffman DH selector")}switch(ie.huffmanDWSelector){case 0:case 1:v=c(ie.huffmanDWSelector+2);break;case 3:v=q(T,L,oe),T++;break;default:throw new t("invalid Huffman DW selector")}let $,Z;return ie.bitmapSizeSelector?($=q(T,L,oe),T++):$=c(1),ie.aggregationInstancesSelector?Z=q(T,L,oe):Z=c(1),{tableDeltaHeight:Q,tableDeltaWidth:v,tableBitmapSize:$,tableAggregateInstances:Z}}function W(ie,L,oe){const T=[];for(let Q=0;Q<oe;Q++){const v=new Uint8Array(L);T.push(v);for(let $=0;$<L;$++)v[$]=ie.readBit();ie.byteAlign()}return T}function ce(ie,L,oe,T){const Q={K:-1,Columns:L,Rows:oe,BlackIs1:!0,EndOfBlock:T},v=new e.CCITTFaxDecoder(ie,Q),$=[];let Z,te=!1;for(let ne=0;ne<oe;ne++){const X=new Uint8Array(L);$.push(X);let re=-1;for(let ae=0;ae<L;ae++)re<0&&(Z=v.readNextChar(),Z===-1&&(Z=0,te=!0),re=7),X[ae]=Z>>re&1,re--}if(T&&!te)for(let X=0;X<5&&v.readNextChar()!==-1;X++);return $}class _{parseChunks(L){return N(L)}parse(L){throw new Error("Not implemented: Jbig2Image.parse")}}D.Jbig2Image=_},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ArithmeticDecoder=void 0;const se=[{qe:22017,nmps:1,nlps:1,switchFlag:1},{qe:13313,nmps:2,nlps:6,switchFlag:0},{qe:6145,nmps:3,nlps:9,switchFlag:0},{qe:2753,nmps:4,nlps:12,switchFlag:0},{qe:1313,nmps:5,nlps:29,switchFlag:0},{qe:545,nmps:38,nlps:33,switchFlag:0},{qe:22017,nmps:7,nlps:6,switchFlag:1},{qe:21505,nmps:8,nlps:14,switchFlag:0},{qe:18433,nmps:9,nlps:14,switchFlag:0},{qe:14337,nmps:10,nlps:14,switchFlag:0},{qe:12289,nmps:11,nlps:17,switchFlag:0},{qe:9217,nmps:12,nlps:18,switchFlag:0},{qe:7169,nmps:13,nlps:20,switchFlag:0},{qe:5633,nmps:29,nlps:21,switchFlag:0},{qe:22017,nmps:15,nlps:14,switchFlag:1},{qe:21505,nmps:16,nlps:14,switchFlag:0},{qe:20737,nmps:17,nlps:15,switchFlag:0},{qe:18433,nmps:18,nlps:16,switchFlag:0},{qe:14337,nmps:19,nlps:17,switchFlag:0},{qe:13313,nmps:20,nlps:18,switchFlag:0},{qe:12289,nmps:21,nlps:19,switchFlag:0},{qe:10241,nmps:22,nlps:19,switchFlag:0},{qe:9217,nmps:23,nlps:20,switchFlag:0},{qe:8705,nmps:24,nlps:21,switchFlag:0},{qe:7169,nmps:25,nlps:22,switchFlag:0},{qe:6145,nmps:26,nlps:23,switchFlag:0},{qe:5633,nmps:27,nlps:24,switchFlag:0},{qe:5121,nmps:28,nlps:25,switchFlag:0},{qe:4609,nmps:29,nlps:26,switchFlag:0},{qe:4353,nmps:30,nlps:27,switchFlag:0},{qe:2753,nmps:31,nlps:28,switchFlag:0},{qe:2497,nmps:32,nlps:29,switchFlag:0},{qe:2209,nmps:33,nlps:30,switchFlag:0},{qe:1313,nmps:34,nlps:31,switchFlag:0},{qe:1089,nmps:35,nlps:32,switchFlag:0},{qe:673,nmps:36,nlps:33,switchFlag:0},{qe:545,nmps:37,nlps:34,switchFlag:0},{qe:321,nmps:38,nlps:35,switchFlag:0},{qe:273,nmps:39,nlps:36,switchFlag:0},{qe:133,nmps:40,nlps:37,switchFlag:0},{qe:73,nmps:41,nlps:38,switchFlag:0},{qe:37,nmps:42,nlps:39,switchFlag:0},{qe:21,nmps:43,nlps:40,switchFlag:0},{qe:9,nmps:44,nlps:41,switchFlag:0},{qe:5,nmps:45,nlps:42,switchFlag:0},{qe:1,nmps:45,nlps:43,switchFlag:0},{qe:22017,nmps:46,nlps:46,switchFlag:0}];class i{constructor(P,e,t){this.data=P,this.bp=e,this.dataEnd=t,this.chigh=P[e],this.clow=0,this.byteIn(),this.chigh=this.chigh<<7&65535|this.clow>>9&127,this.clow=this.clow<<7&65535,this.ct-=7,this.a=32768}byteIn(){const P=this.data;let e=this.bp;P[e]===255?P[e+1]>143?(this.clow+=65280,this.ct=8):(e++,this.clow+=P[e]<<9,this.ct=7,this.bp=e):(e++,this.clow+=e<this.dataEnd?P[e]<<8:65280,this.ct=8,this.bp=e),this.clow>65535&&(this.chigh+=this.clow>>16,this.clow&=65535)}readBit(P,e){let t=P[e]>>1,o=P[e]&1;const K=se[t],j=K.qe;let C,O=this.a-j;if(this.chigh<j)O<j?(O=j,C=o,t=K.nmps):(O=j,C=1^o,K.switchFlag===1&&(o=C),t=K.nlps);else{if(this.chigh-=j,O&32768)return this.a=O,o;O<j?(C=1^o,K.switchFlag===1&&(o=C),t=K.nlps):(C=o,t=K.nmps)}do this.ct===0&&this.byteIn(),O<<=1,this.chigh=this.chigh<<1&65535|this.clow>>15&1,this.clow=this.clow<<1&65535,this.ct--;while(!(O&32768));return this.a=O,P[e]=t<<1|o,C}}D.ArithmeticDecoder=i},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.JpegStream=void 0;var i=se(18),w=se(4),P=se(27),e=se(2);class t extends i.DecodeStream{constructor(K,j,C){let O;for(;(O=K.getByte())!==-1;)if(O===255){K.skip(-1);break}super(j),this.stream=K,this.dict=K.dict,this.maybeLength=j,this.params=C}get bytes(){return(0,e.shadow)(this,"bytes",this.stream.getBytes(this.maybeLength))}ensureBuffer(K){}readBlock(){if(this.eof)return;const K={decodeTransform:void 0,colorTransform:void 0},j=this.dict.getArray("D","Decode");if((this.forceRGBA||this.forceRGB)&&Array.isArray(j)){const d=this.dict.get("BPC","BitsPerComponent")||8,A=j.length,n=new Int32Array(A);let I=!1;const k=(1<<d)-1;for(let y=0;y<A;y+=2)n[y]=(j[y+1]-j[y])*256|0,n[y+1]=j[y]*k|0,(n[y]!==256||n[y+1]!==0)&&(I=!0);I&&(K.decodeTransform=n)}if(this.params instanceof w.Dict){const d=this.params.get("ColorTransform");Number.isInteger(d)&&(K.colorTransform=d)}const C=new P.JpegImage(K);C.parse(this.bytes);const O=C.getData({width:this.drawWidth,height:this.drawHeight,forceRGBA:this.forceRGBA,forceRGB:this.forceRGB,isSourcePDF:!0});this.buffer=O,this.bufferLength=O.length,this.eof=!0}}D.JpegStream=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.JpegImage=void 0;var i=se(2),w=se(28),P=se(3);class e extends i.BaseException{constructor(x){super(`JPEG error: ${x}`,"JpegError")}}class t extends i.BaseException{constructor(x,H){super(x,"DNLMarkerError"),this.scanLines=H}}class o extends i.BaseException{constructor(x){super(x,"EOIMarkerError")}}const K=new Uint8Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),j=4017,C=799,O=3406,d=2276,A=1567,n=3784,I=5793,k=2896;function y(l,x){let H=0,s,h,F=16;for(;F>0&&!l[F-1];)F--;const N=[{children:[],index:0}];let U=N[0],g;for(s=0;s<F;s++){for(h=0;h<l[s];h++){for(U=N.pop(),U.children[U.index]=x[H];U.index>0;)U=N.pop();for(U.index++,N.push(U);N.length<=s;)N.push(g={children:[],index:0}),U.children[U.index]=g.children,U=g;H++}s+1<F&&(N.push(g={children:[],index:0}),U.children[U.index]=g.children,U=g)}return N[0].children}function f(l,x,H){return 64*((l.blocksPerLine+1)*x+H)}function R(l,x,H,s,h,F,N,U,g,S=!1){const m=H.mcusPerLine,r=H.progressive,p=x;let c=0,u=0;function q(){if(u>0)return u--,c>>u&1;if(c=l[x++],c===255){const pe=l[x++];if(pe){if(pe===220&&S){x+=2;const we=(0,P.readUint16)(l,x);if(x+=2,we>0&&we!==H.scanLines)throw new t("Found DNL marker (0xFFDC) while parsing scan data",we)}else if(pe===217){if(S){const we=$*(H.precision===8?8:0);if(we>0&&Math.round(H.scanLines/we)>=5)throw new t("Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter",we)}throw new o("Found EOI marker (0xFFD9) while parsing scan data")}throw new e(`unexpected marker ${(c<<8|pe).toString(16)}`)}}return u=7,c>>>7}function J(pe){let we=pe;for(;;){switch(we=we[q()],typeof we){case"number":return we;case"object":continue}throw new e("invalid huffman sequence")}}function G(pe){let we=0;for(;pe>0;)we=we<<1|q(),pe--;return we}function W(pe){if(pe===1)return q()===1?1:-1;const we=G(pe);return we>=1<<pe-1?we:we+(-1<<pe)+1}function ce(pe,we){const Oe=J(pe.huffmanTableDC),Te=Oe===0?0:W(Oe);pe.blockData[we]=pe.pred+=Te;let Ce=1;for(;Ce<64;){const Ae=J(pe.huffmanTableAC),Se=Ae&15,He=Ae>>4;if(Se===0){if(He<15)break;Ce+=16;continue}Ce+=He;const Ve=K[Ce];pe.blockData[we+Ve]=W(Se),Ce++}}function _(pe,we){const Oe=J(pe.huffmanTableDC),Te=Oe===0?0:W(Oe)<<g;pe.blockData[we]=pe.pred+=Te}function ie(pe,we){pe.blockData[we]|=q()<<g}let L=0;function oe(pe,we){if(L>0){L--;return}let Oe=F;const Te=N;for(;Oe<=Te;){const Ce=J(pe.huffmanTableAC),Ae=Ce&15,Se=Ce>>4;if(Ae===0){if(Se<15){L=G(Se)+(1<<Se)-1;break}Oe+=16;continue}Oe+=Se;const He=K[Oe];pe.blockData[we+He]=W(Ae)*(1<<g),Oe++}}let T=0,Q;function v(pe,we){let Oe=F;const Te=N;let Ce=0,Ae,Se;for(;Oe<=Te;){const He=we+K[Oe],Ve=pe.blockData[He]<0?-1:1;switch(T){case 0:if(Se=J(pe.huffmanTableAC),Ae=Se&15,Ce=Se>>4,Ae===0)Ce<15?(L=G(Ce)+(1<<Ce),T=4):(Ce=16,T=1);else{if(Ae!==1)throw new e("invalid ACn encoding");Q=W(Ae),T=Ce?2:3}continue;case 1:case 2:pe.blockData[He]?pe.blockData[He]+=Ve*(q()<<g):(Ce--,Ce===0&&(T=T===2?3:0));break;case 3:pe.blockData[He]?pe.blockData[He]+=Ve*(q()<<g):(pe.blockData[He]=Q<<g,T=0);break;case 4:pe.blockData[He]&&(pe.blockData[He]+=Ve*(q()<<g));break}Oe++}T===4&&(L--,L===0&&(T=0))}let $=0;function Z(pe,we,Oe,Te,Ce){const Ae=Oe/m|0,Se=Oe%m;$=Ae*pe.v+Te;const He=Se*pe.h+Ce,Ve=f(pe,$,He);we(pe,Ve)}function te(pe,we,Oe){$=Oe/pe.blocksPerLine|0;const Te=Oe%pe.blocksPerLine,Ce=f(pe,$,Te);we(pe,Ce)}const ne=s.length;let X,re,ae,z,le,ue;r?F===0?ue=U===0?_:ie:ue=U===0?oe:v:ue=ce;let ge=0,ke;const me=ne===1?s[0].blocksPerLine*s[0].blocksPerColumn:m*H.mcusPerColumn;let fe,xe;for(;ge<=me;){const pe=h?Math.min(me-ge,h):me;if(pe>0){for(re=0;re<ne;re++)s[re].pred=0;if(L=0,ne===1)for(X=s[0],le=0;le<pe;le++)te(X,ue,ge),ge++;else for(le=0;le<pe;le++){for(re=0;re<ne;re++)for(X=s[re],fe=X.h,xe=X.v,ae=0;ae<xe;ae++)for(z=0;z<fe;z++)Z(X,ue,ge,ae,z);ge++}}if(u=0,ke=b(l,x),!ke)break;if(ke.invalid){const we=pe>0?"unexpected":"excessive";(0,i.warn)(`decodeScan - ${we} MCU data, current marker is: ${ke.invalid}`),x=ke.offset}if(ke.marker>=65488&&ke.marker<=65495)x+=2;else break}return x-p}function E(l,x,H){const s=l.quantizationTable,h=l.blockData;let F,N,U,g,S,m,r,p,c,u,q,J,G,W,ce,_,ie;if(!s)throw new e("missing required Quantization Table.");for(let L=0;L<64;L+=8){if(c=h[x+L],u=h[x+L+1],q=h[x+L+2],J=h[x+L+3],G=h[x+L+4],W=h[x+L+5],ce=h[x+L+6],_=h[x+L+7],c*=s[L],!(u|q|J|G|W|ce|_)){ie=I*c+512>>10,H[L]=ie,H[L+1]=ie,H[L+2]=ie,H[L+3]=ie,H[L+4]=ie,H[L+5]=ie,H[L+6]=ie,H[L+7]=ie;continue}u*=s[L+1],q*=s[L+2],J*=s[L+3],G*=s[L+4],W*=s[L+5],ce*=s[L+6],_*=s[L+7],F=I*c+128>>8,N=I*G+128>>8,U=q,g=ce,S=k*(u-_)+128>>8,p=k*(u+_)+128>>8,m=J<<4,r=W<<4,F=F+N+1>>1,N=F-N,ie=U*n+g*A+128>>8,U=U*A-g*n+128>>8,g=ie,S=S+r+1>>1,r=S-r,p=p+m+1>>1,m=p-m,F=F+g+1>>1,g=F-g,N=N+U+1>>1,U=N-U,ie=S*d+p*O+2048>>12,S=S*O-p*d+2048>>12,p=ie,ie=m*C+r*j+2048>>12,m=m*j-r*C+2048>>12,r=ie,H[L]=F+p,H[L+7]=F-p,H[L+1]=N+r,H[L+6]=N-r,H[L+2]=U+m,H[L+5]=U-m,H[L+3]=g+S,H[L+4]=g-S}for(let L=0;L<8;++L){if(c=H[L],u=H[L+8],q=H[L+16],J=H[L+24],G=H[L+32],W=H[L+40],ce=H[L+48],_=H[L+56],!(u|q|J|G|W|ce|_)){ie=I*c+8192>>14,ie<-2040?ie=0:ie>=2024?ie=255:ie=ie+2056>>4,h[x+L]=ie,h[x+L+8]=ie,h[x+L+16]=ie,h[x+L+24]=ie,h[x+L+32]=ie,h[x+L+40]=ie,h[x+L+48]=ie,h[x+L+56]=ie;continue}F=I*c+2048>>12,N=I*G+2048>>12,U=q,g=ce,S=k*(u-_)+2048>>12,p=k*(u+_)+2048>>12,m=J,r=W,F=(F+N+1>>1)+4112,N=F-N,ie=U*n+g*A+2048>>12,U=U*A-g*n+2048>>12,g=ie,S=S+r+1>>1,r=S-r,p=p+m+1>>1,m=p-m,F=F+g+1>>1,g=F-g,N=N+U+1>>1,U=N-U,ie=S*d+p*O+2048>>12,S=S*O-p*d+2048>>12,p=ie,ie=m*C+r*j+2048>>12,m=m*j-r*C+2048>>12,r=ie,c=F+p,_=F-p,u=N+r,ce=N-r,q=U+m,W=U-m,J=g+S,G=g-S,c<16?c=0:c>=4080?c=255:c>>=4,u<16?u=0:u>=4080?u=255:u>>=4,q<16?q=0:q>=4080?q=255:q>>=4,J<16?J=0:J>=4080?J=255:J>>=4,G<16?G=0:G>=4080?G=255:G>>=4,W<16?W=0:W>=4080?W=255:W>>=4,ce<16?ce=0:ce>=4080?ce=255:ce>>=4,_<16?_=0:_>=4080?_=255:_>>=4,h[x+L]=c,h[x+L+8]=u,h[x+L+16]=q,h[x+L+24]=J,h[x+L+32]=G,h[x+L+40]=W,h[x+L+48]=ce,h[x+L+56]=_}}function M(l,x){const H=x.blocksPerLine,s=x.blocksPerColumn,h=new Int16Array(64);for(let F=0;F<s;F++)for(let N=0;N<H;N++){const U=f(x,F,N);E(x,U,h)}return x.blockData}function b(l,x,H=x){const s=l.length-1;let h=H<x?H:x;if(x>=s)return null;const F=(0,P.readUint16)(l,x);if(F>=65472&&F<=65534)return{invalid:null,marker:F,offset:x};let N=(0,P.readUint16)(l,h);for(;!(N>=65472&&N<=65534);){if(++h>=s)return null;N=(0,P.readUint16)(l,h)}return{invalid:F.toString(16),marker:N,offset:h}}class V{constructor({decodeTransform:x=null,colorTransform:H=-1}={}){this._decodeTransform=x,this._colorTransform=H}parse(x,{dnlScanLines:H=null}={}){function s(){const q=(0,P.readUint16)(x,F);F+=2;let J=F+q-2;const G=b(x,J,F);G!=null&&G.invalid&&((0,i.warn)("readDataBlock - incorrect length, current marker is: "+G.invalid),J=G.offset);const W=x.subarray(F,J);return F+=W.length,W}function h(q){const J=Math.ceil(q.samplesPerLine/8/q.maxH),G=Math.ceil(q.scanLines/8/q.maxV);for(const W of q.components){const ce=Math.ceil(Math.ceil(q.samplesPerLine/8)*W.h/q.maxH),_=Math.ceil(Math.ceil(q.scanLines/8)*W.v/q.maxV),ie=J*W.h,oe=64*(G*W.v)*(ie+1);W.blockData=new Int16Array(oe),W.blocksPerLine=ce,W.blocksPerColumn=_}q.mcusPerLine=J,q.mcusPerColumn=G}let F=0,N=null,U=null,g,S,m=0;const r=[],p=[],c=[];let u=(0,P.readUint16)(x,F);if(F+=2,u!==65496)throw new e("SOI not found");u=(0,P.readUint16)(x,F),F+=2;e:for(;u!==65497;){let q,J,G;switch(u){case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:const W=s();u===65504&&W[0]===74&&W[1]===70&&W[2]===73&&W[3]===70&&W[4]===0&&(N={version:{major:W[5],minor:W[6]},densityUnits:W[7],xDensity:W[8]<<8|W[9],yDensity:W[10]<<8|W[11],thumbWidth:W[12],thumbHeight:W[13],thumbData:W.subarray(14,14+3*W[12]*W[13])}),u===65518&&W[0]===65&&W[1]===100&&W[2]===111&&W[3]===98&&W[4]===101&&(U={version:W[5]<<8|W[6],flags0:W[7]<<8|W[8],flags1:W[9]<<8|W[10],transformCode:W[11]});break;case 65499:const ce=(0,P.readUint16)(x,F);F+=2;const _=ce+F-2;let ie;for(;F<_;){const z=x[F++],le=new Uint16Array(64);if(z>>4)if(z>>4===1)for(J=0;J<64;J++)ie=K[J],le[ie]=(0,P.readUint16)(x,F),F+=2;else throw new e("DQT - invalid table spec");else for(J=0;J<64;J++)ie=K[J],le[ie]=x[F++];r[z&15]=le}break;case 65472:case 65473:case 65474:if(g)throw new e("Only single frame JPEGs supported");F+=2,g={},g.extended=u===65473,g.progressive=u===65474,g.precision=x[F++];const L=(0,P.readUint16)(x,F);F+=2,g.scanLines=H||L,g.samplesPerLine=(0,P.readUint16)(x,F),F+=2,g.components=[],g.componentIds={};const oe=x[F++];let T=0,Q=0;for(q=0;q<oe;q++){const z=x[F],le=x[F+1]>>4,ue=x[F+1]&15;T<le&&(T=le),Q<ue&&(Q=ue);const ge=x[F+2];G=g.components.push({h:le,v:ue,quantizationId:ge,quantizationTable:null}),g.componentIds[z]=G-1,F+=3}g.maxH=T,g.maxV=Q,h(g);break;case 65476:const v=(0,P.readUint16)(x,F);for(F+=2,q=2;q<v;){const z=x[F++],le=new Uint8Array(16);let ue=0;for(J=0;J<16;J++,F++)ue+=le[J]=x[F];const ge=new Uint8Array(ue);for(J=0;J<ue;J++,F++)ge[J]=x[F];q+=17+ue,(z>>4?p:c)[z&15]=y(le,ge)}break;case 65501:F+=2,S=(0,P.readUint16)(x,F),F+=2;break;case 65498:const $=++m===1&&!H;F+=2;const Z=x[F++],te=[];for(q=0;q<Z;q++){const z=x[F++],le=g.componentIds[z],ue=g.components[le];ue.index=z;const ge=x[F++];ue.huffmanTableDC=c[ge>>4],ue.huffmanTableAC=p[ge&15],te.push(ue)}const ne=x[F++],X=x[F++],re=x[F++];try{const z=R(x,F,g,te,S,ne,X,re>>4,re&15,$);F+=z}catch(z){if(z instanceof t)return(0,i.warn)(`${z.message} -- attempting to re-parse the JPEG image.`),this.parse(x,{dnlScanLines:z.scanLines});if(z instanceof o){(0,i.warn)(`${z.message} -- ignoring the rest of the image data.`);break e}throw z}break;case 65500:F+=4;break;case 65535:x[F]!==255&&F--;break;default:const ae=b(x,F-2,F-3);if(ae!=null&&ae.invalid){(0,i.warn)("JpegImage.parse - unexpected data, current marker is: "+ae.invalid),F=ae.offset;break}if(!ae||F>=x.length-1){(0,i.warn)("JpegImage.parse - reached the end of the image data without finding an EOI marker (0xFFD9).");break e}throw new e("JpegImage.parse - unknown marker: "+u.toString(16))}u=(0,P.readUint16)(x,F),F+=2}this.width=g.samplesPerLine,this.height=g.scanLines,this.jfif=N,this.adobe=U,this.components=[];for(const q of g.components){const J=r[q.quantizationId];J&&(q.quantizationTable=J),this.components.push({index:q.index,output:M(g,q),scaleX:q.h/g.maxH,scaleY:q.v/g.maxV,blocksPerLine:q.blocksPerLine,blocksPerColumn:q.blocksPerColumn})}this.numComponents=this.components.length}_getLinearizedBlockData(x,H,s=!1){const h=this.width/x,F=this.height/H;let N,U,g,S,m,r,p,c,u,q,J=0,G;const W=this.components.length,ce=x*H*W,_=new Uint8ClampedArray(ce),ie=new Uint32Array(x),L=4294967288;let oe;for(p=0;p<W;p++){if(N=this.components[p],U=N.scaleX*h,g=N.scaleY*F,J=p,G=N.output,S=N.blocksPerLine+1<<3,U!==oe){for(m=0;m<x;m++)c=0|m*U,ie[m]=(c&L)<<3|c&7;oe=U}for(r=0;r<H;r++)for(c=0|r*g,q=S*(c&L)|(c&7)<<3,m=0;m<x;m++)_[J]=G[q+ie[m]],J+=W}let T=this._decodeTransform;if(!s&&W===4&&!T&&(T=new Int32Array([-256,255,-256,255,-256,255,-256,255])),T)for(p=0;p<ce;)for(c=0,u=0;c<W;c++,p++,u+=2)_[p]=(_[p]*T[u]>>8)+T[u+1];return _}get _isColorConversionNeeded(){return this.adobe?!!this.adobe.transformCode:this.numComponents===3?this._colorTransform===0?!1:!(this.components[0].index===82&&this.components[1].index===71&&this.components[2].index===66):this._colorTransform===1}_convertYccToRgb(x){let H,s,h;for(let F=0,N=x.length;F<N;F+=3)H=x[F],s=x[F+1],h=x[F+2],x[F]=H-179.456+1.402*h,x[F+1]=H+135.459-.344*s-.714*h,x[F+2]=H-226.816+1.772*s;return x}_convertYccToRgba(x,H){for(let s=0,h=0,F=x.length;s<F;s+=3,h+=4){const N=x[s],U=x[s+1],g=x[s+2];H[h]=N-179.456+1.402*g,H[h+1]=N+135.459-.344*U-.714*g,H[h+2]=N-226.816+1.772*U,H[h+3]=255}return H}_convertYcckToRgb(x){let H,s,h,F,N=0;for(let U=0,g=x.length;U<g;U+=4)H=x[U],s=x[U+1],h=x[U+2],F=x[U+3],x[N++]=-122.67195406894+s*(-660635669420364e-19*s+.000437130475926232*h-54080610064599e-18*H+.00048449797120281*F-.154362151871126)+h*(-.000957964378445773*h+.000817076911346625*H-.00477271405408747*F+1.53380253221734)+H*(.000961250184130688*H-.00266257332283933*F+.48357088451265)+F*(-.000336197177618394*F+.484791561490776),x[N++]=107.268039397724+s*(219927104525741e-19*s-.000640992018297945*h+.000659397001245577*H+.000426105652938837*F-.176491792462875)+h*(-.000778269941513683*h+.00130872261408275*H+.000770482631801132*F-.151051492775562)+H*(.00126935368114843*H-.00265090189010898*F+.25802910206845)+F*(-.000318913117588328*F-.213742400323665),x[N++]=-20.810012546947+s*(-.000570115196973677*s-263409051004589e-19*h+.0020741088115012*H-.00288260236853442*F+.814272968359295)+h*(-153496057440975e-19*h-.000132689043961446*H+.000560833691242812*F-.195152027534049)+H*(.00174418132927582*H-.00255243321439347*F+.116935020465145)+F*(-.000343531996510555*F+.24165260232407);return x.subarray(0,N)}_convertYcckToRgba(x){for(let H=0,s=x.length;H<s;H+=4){const h=x[H],F=x[H+1],N=x[H+2],U=x[H+3];x[H]=-122.67195406894+F*(-660635669420364e-19*F+.000437130475926232*N-54080610064599e-18*h+.00048449797120281*U-.154362151871126)+N*(-.000957964378445773*N+.000817076911346625*h-.00477271405408747*U+1.53380253221734)+h*(.000961250184130688*h-.00266257332283933*U+.48357088451265)+U*(-.000336197177618394*U+.484791561490776),x[H+1]=107.268039397724+F*(219927104525741e-19*F-.000640992018297945*N+.000659397001245577*h+.000426105652938837*U-.176491792462875)+N*(-.000778269941513683*N+.00130872261408275*h+.000770482631801132*U-.151051492775562)+h*(.00126935368114843*h-.00265090189010898*U+.25802910206845)+U*(-.000318913117588328*U-.213742400323665),x[H+2]=-20.810012546947+F*(-.000570115196973677*F-263409051004589e-19*N+.0020741088115012*h-.00288260236853442*U+.814272968359295)+N*(-153496057440975e-19*N-.000132689043961446*h+.000560833691242812*U-.195152027534049)+h*(.00174418132927582*h-.00255243321439347*U+.116935020465145)+U*(-.000343531996510555*U+.24165260232407),x[H+3]=255}return x}_convertYcckToCmyk(x){let H,s,h;for(let F=0,N=x.length;F<N;F+=4)H=x[F],s=x[F+1],h=x[F+2],x[F]=434.456-H-1.402*h,x[F+1]=119.541-H+.344*s+.714*h,x[F+2]=481.816-H-1.772*s;return x}_convertCmykToRgb(x){let H,s,h,F,N=0;for(let U=0,g=x.length;U<g;U+=4)H=x[U],s=x[U+1],h=x[U+2],F=x[U+3],x[N++]=255+H*(-6747147073602441e-20*H+.0008379262121013727*s+.0002894718188643294*h+.003264231057537806*F-1.1185611867203937)+s*(26374107616089405e-21*s-8626949158638572e-20*h-.0002748769067499491*F-.02155688794978967)+h*(-3878099212869363e-20*h-.0003267808279485286*F+.0686742238595345)-F*(.0003361971776183937*F+.7430659151342254),x[N++]=255+H*(.00013596372813588848*H+.000924537132573585*s+.00010567359618683593*h+.0004791864687436512*F-.3109689587515875)+s*(-.00023545346108370344*s+.0002702845253534714*h+.0020200308977307156*F-.7488052167015494)+h*(6834815998235662e-20*h+.00015168452363460973*F-.09751927774728933)-F*(.0003189131175883281*F+.7364883807733168),x[N++]=255+H*(13598650411385307e-21*H+.00012423956175490851*s+.0004751985097583589*h-36729317476630422e-22*F-.05562186980264034)+s*(.00016141380598724676*s+.0009692239130725186*h+.0007782692450036253*F-.44015232367526463)+h*(5068882914068769e-22*h+.0017778369011375071*F-.7591454649749609)-F*(.0003435319965105553*F+.7063770186160144);return x.subarray(0,N)}_convertCmykToRgba(x){for(let H=0,s=x.length;H<s;H+=4){const h=x[H],F=x[H+1],N=x[H+2],U=x[H+3];x[H]=255+h*(-6747147073602441e-20*h+.0008379262121013727*F+.0002894718188643294*N+.003264231057537806*U-1.1185611867203937)+F*(26374107616089405e-21*F-8626949158638572e-20*N-.0002748769067499491*U-.02155688794978967)+N*(-3878099212869363e-20*N-.0003267808279485286*U+.0686742238595345)-U*(.0003361971776183937*U+.7430659151342254),x[H+1]=255+h*(.00013596372813588848*h+.000924537132573585*F+.00010567359618683593*N+.0004791864687436512*U-.3109689587515875)+F*(-.00023545346108370344*F+.0002702845253534714*N+.0020200308977307156*U-.7488052167015494)+N*(6834815998235662e-20*N+.00015168452363460973*U-.09751927774728933)-U*(.0003189131175883281*U+.7364883807733168),x[H+2]=255+h*(13598650411385307e-21*h+.00012423956175490851*F+.0004751985097583589*N-36729317476630422e-22*U-.05562186980264034)+F*(.00016141380598724676*F+.0009692239130725186*N+.0007782692450036253*U-.44015232367526463)+N*(5068882914068769e-22*N+.0017778369011375071*U-.7591454649749609)-U*(.0003435319965105553*U+.7063770186160144),x[H+3]=255}return x}getData({width:x,height:H,forceRGBA:s=!1,forceRGB:h=!1,isSourcePDF:F=!1}){if(this.numComponents>4)throw new e("Unsupported color mode");const N=this._getLinearizedBlockData(x,H,F);if(this.numComponents===1&&(s||h)){const U=N.length*(s?4:3),g=new Uint8ClampedArray(U);let S=0;if(s)(0,w.grayToRGBA)(N,new Uint32Array(g.buffer));else for(const m of N)g[S++]=m,g[S++]=m,g[S++]=m;return g}else if(this.numComponents===3&&this._isColorConversionNeeded){if(s){const U=new Uint8ClampedArray(N.length/3*4);return this._convertYccToRgba(N,U)}return this._convertYccToRgb(N)}else if(this.numComponents===4){if(this._isColorConversionNeeded)return s?this._convertYcckToRgba(N):h?this._convertYcckToRgb(N):this._convertYcckToCmyk(N);if(s)return this._convertCmykToRgba(N);if(h)return this._convertCmykToRgb(N)}return N}}D.JpegImage=V},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.convertBlackAndWhiteToRGBA=P,D.convertToRGBA=w,D.grayToRGBA=t;var i=se(2);function w(o){switch(o.kind){case i.ImageKind.GRAYSCALE_1BPP:return P(o);case i.ImageKind.RGB_24BPP:return e(o)}return null}function P({src:o,srcPos:K=0,dest:j,width:C,height:O,nonBlackColor:d=4294967295,inverseDecode:A=!1}){const n=i.FeatureTest.isLittleEndian?4278190080:255,[I,k]=A?[d,n]:[n,d],y=C>>3,f=C&7,R=o.length;j=new Uint32Array(j.buffer);let E=0;for(let M=0;M<O;M++){for(const V=K+y;K<V;K++){const l=K<R?o[K]:255;j[E++]=l&128?k:I,j[E++]=l&64?k:I,j[E++]=l&32?k:I,j[E++]=l&16?k:I,j[E++]=l&8?k:I,j[E++]=l&4?k:I,j[E++]=l&2?k:I,j[E++]=l&1?k:I}if(f===0)continue;const b=K<R?o[K++]:255;for(let V=0;V<f;V++)j[E++]=b&1<<7-V?k:I}return{srcPos:K,destPos:E}}function e({src:o,srcPos:K=0,dest:j,destPos:C=0,width:O,height:d}){let A=0;const n=o.length>>2,I=new Uint32Array(o.buffer,K,n);if(i.FeatureTest.isLittleEndian){for(;A<n-2;A+=3,C+=4){const k=I[A],y=I[A+1],f=I[A+2];j[C]=k|4278190080,j[C+1]=k>>>24|y<<8|4278190080,j[C+2]=y>>>16|f<<16|4278190080,j[C+3]=f>>>8|4278190080}for(let k=A*4,y=o.length;k<y;k+=3)j[C++]=o[k]|o[k+1]<<8|o[k+2]<<16|4278190080}else{for(;A<n-2;A+=3,C+=4){const k=I[A],y=I[A+1],f=I[A+2];j[C]=k|255,j[C+1]=k<<24|y>>>8|255,j[C+2]=y<<16|f>>>16|255,j[C+3]=f<<8|255}for(let k=A*4,y=o.length;k<y;k+=3)j[C++]=o[k]<<24|o[k+1]<<16|o[k+2]<<8|255}return{srcPos:K,destPos:C}}function t(o,K){if(i.FeatureTest.isLittleEndian)for(let j=0,C=o.length;j<C;j++)K[j]=o[j]*65793|4278190080;else for(let j=0,C=o.length;j<C;j++)K[j]=o[j]*16843008|255}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.JpxStream=void 0;var i=se(18),w=se(30),P=se(2);class e extends i.DecodeStream{constructor(o,K,j){super(K),this.stream=o,this.dict=o.dict,this.maybeLength=K,this.params=j}get bytes(){return(0,P.shadow)(this,"bytes",this.stream.getBytes(this.maybeLength))}ensureBuffer(o){}readBlock(){if(this.eof)return;const o=new w.JpxImage;o.parse(this.bytes);const K=o.width,j=o.height,C=o.componentsCount,O=o.tiles.length;if(O===1)this.buffer=o.tiles[0].items;else{const d=new Uint8ClampedArray(K*j*C);for(let A=0;A<O;A++){const n=o.tiles[A],I=n.width,k=n.height,y=n.left,f=n.top,R=n.items;let E=0,M=(K*f+y)*C;const b=K*C,V=I*C;for(let l=0;l<k;l++){const x=R.subarray(E,E+V);d.set(x,M),E+=V,M+=b}}this.buffer=d}this.bufferLength=this.buffer.length,this.eof=!0}}D.JpxStream=e},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.JpxImage=void 0;var i=se(2),w=se(3),P=se(25);class e extends i.BaseException{constructor(r){super(`JPX error: ${r}`,"JpxError")}}const t={LL:0,LH:1,HL:1,HH:2};class o{constructor(){this.failOnCorruptedImage=!1}parse(r){if((0,w.readUint16)(r,0)===65359){this.parseCodestream(r,0,r.length);return}const c=r.length;let u=0;for(;u<c;){let q=8,J=(0,w.readUint32)(r,u);const G=(0,w.readUint32)(r,u+4);if(u+=q,J===1&&(J=(0,w.readUint32)(r,u)*4294967296+(0,w.readUint32)(r,u+4),u+=8,q+=8),J===0&&(J=c-u+q),J<q)throw new e("Invalid box field size");const W=J-q;let ce=!0;switch(G){case 1785737832:ce=!1;break;case 1668246642:const _=r[u];if(_===1){const L=(0,w.readUint32)(r,u+3);switch(L){case 16:case 17:case 18:break;default:(0,i.warn)("Unknown colorspace "+L);break}}else _===2&&(0,i.info)("ICC profile not supported");break;case 1785737827:this.parseCodestream(r,u,u+W);break;case 1783636e3:(0,w.readUint32)(r,u)!==218793738&&(0,i.warn)("Invalid JP2 signature");break;case 1783634458:case 1718909296:case 1920099697:case 1919251232:case 1768449138:break;default:const ie=String.fromCharCode(G>>24&255,G>>16&255,G>>8&255,G&255);(0,i.warn)(`Unsupported header type ${G} (${ie}).`);break}ce&&(u+=W)}}parseImageProperties(r){let p=r.getByte();for(;p>=0;){const c=p;if(p=r.getByte(),(c<<8|p)===65361){r.skip(4);const q=r.getInt32()>>>0,J=r.getInt32()>>>0,G=r.getInt32()>>>0,W=r.getInt32()>>>0;r.skip(16);const ce=r.getUint16();this.width=q-G,this.height=J-W,this.componentsCount=ce,this.bitsPerComponent=8;return}}throw new e("No size marker found in JPX stream")}parseCodestream(r,p,c){const u={};let q=!1;try{let J=p;for(;J+1<c;){const G=(0,w.readUint16)(r,J);J+=2;let W=0,ce,_,ie,L,oe,T;switch(G){case 65359:u.mainHeader=!0;break;case 65497:break;case 65361:W=(0,w.readUint16)(r,J);const Q={};Q.Xsiz=(0,w.readUint32)(r,J+4),Q.Ysiz=(0,w.readUint32)(r,J+8),Q.XOsiz=(0,w.readUint32)(r,J+12),Q.YOsiz=(0,w.readUint32)(r,J+16),Q.XTsiz=(0,w.readUint32)(r,J+20),Q.YTsiz=(0,w.readUint32)(r,J+24),Q.XTOsiz=(0,w.readUint32)(r,J+28),Q.YTOsiz=(0,w.readUint32)(r,J+32);const v=(0,w.readUint16)(r,J+36);Q.Csiz=v;const $=[];ce=J+38;for(let le=0;le<v;le++){const ue={precision:(r[ce]&127)+1,isSigned:!!(r[ce]&128),XRsiz:r[ce+1],YRsiz:r[ce+2]};ce+=3,K(ue,Q),$.push(ue)}u.SIZ=Q,u.components=$,j(u,$),u.QCC=[],u.COC=[];break;case 65372:W=(0,w.readUint16)(r,J);const Z={};switch(ce=J+2,_=r[ce++],_&31){case 0:L=8,oe=!0;break;case 1:L=16,oe=!1;break;case 2:L=16,oe=!0;break;default:throw new Error("Invalid SQcd value "+_)}for(Z.noQuantization=L===8,Z.scalarExpounded=oe,Z.guardBits=_>>5,ie=[];ce<W+J;){const le={};L===8?(le.epsilon=r[ce++]>>3,le.mu=0):(le.epsilon=r[ce]>>3,le.mu=(r[ce]&7)<<8|r[ce+1],ce+=2),ie.push(le)}Z.SPqcds=ie,u.mainHeader?u.QCD=Z:(u.currentTile.QCD=Z,u.currentTile.QCC=[]);break;case 65373:W=(0,w.readUint16)(r,J);const te={};ce=J+2;let ne;switch(u.SIZ.Csiz<257?ne=r[ce++]:(ne=(0,w.readUint16)(r,ce),ce+=2),_=r[ce++],_&31){case 0:L=8,oe=!0;break;case 1:L=16,oe=!1;break;case 2:L=16,oe=!0;break;default:throw new Error("Invalid SQcd value "+_)}for(te.noQuantization=L===8,te.scalarExpounded=oe,te.guardBits=_>>5,ie=[];ce<W+J;){const le={};L===8?(le.epsilon=r[ce++]>>3,le.mu=0):(le.epsilon=r[ce]>>3,le.mu=(r[ce]&7)<<8|r[ce+1],ce+=2),ie.push(le)}te.SPqcds=ie,u.mainHeader?u.QCC[ne]=te:u.currentTile.QCC[ne]=te;break;case 65362:W=(0,w.readUint16)(r,J);const X={};ce=J+2;const re=r[ce++];X.entropyCoderWithCustomPrecincts=!!(re&1),X.sopMarkerUsed=!!(re&2),X.ephMarkerUsed=!!(re&4),X.progressionOrder=r[ce++],X.layersCount=(0,w.readUint16)(r,ce),ce+=2,X.multipleComponentTransform=r[ce++],X.decompositionLevelsCount=r[ce++],X.xcb=(r[ce++]&15)+2,X.ycb=(r[ce++]&15)+2;const ae=r[ce++];if(X.selectiveArithmeticCodingBypass=!!(ae&1),X.resetContextProbabilities=!!(ae&2),X.terminationOnEachCodingPass=!!(ae&4),X.verticallyStripe=!!(ae&8),X.predictableTermination=!!(ae&16),X.segmentationSymbolUsed=!!(ae&32),X.reversibleTransformation=r[ce++],X.entropyCoderWithCustomPrecincts){const le=[];for(;ce<W+J;){const ue=r[ce++];le.push({PPx:ue&15,PPy:ue>>4})}X.precinctsSizes=le}const z=[];X.selectiveArithmeticCodingBypass&&z.push("selectiveArithmeticCodingBypass"),X.terminationOnEachCodingPass&&z.push("terminationOnEachCodingPass"),X.verticallyStripe&&z.push("verticallyStripe"),X.predictableTermination&&z.push("predictableTermination"),z.length>0&&(q=!0,(0,i.warn)(`JPX: Unsupported COD options (${z.join(", ")}).`)),u.mainHeader?u.COD=X:(u.currentTile.COD=X,u.currentTile.COC=[]);break;case 65424:W=(0,w.readUint16)(r,J),T={},T.index=(0,w.readUint16)(r,J+2),T.length=(0,w.readUint32)(r,J+4),T.dataEnd=T.length+J-2,T.partIndex=r[J+8],T.partsCount=r[J+9],u.mainHeader=!1,T.partIndex===0&&(T.COD=u.COD,T.COC=u.COC.slice(0),T.QCD=u.QCD,T.QCC=u.QCC.slice(0)),u.currentTile=T;break;case 65427:T=u.currentTile,T.partIndex===0&&(H(u,T.index),M(u)),W=T.dataEnd-J,b(u,r,J,W);break;case 65363:(0,i.warn)("JPX: Codestream code 0xFF53 (COC) is not implemented.");case 65365:case 65367:case 65368:case 65380:W=(0,w.readUint16)(r,J);break;default:throw new Error("Unknown codestream code: "+G.toString(16))}J+=W}}catch(J){if(q||this.failOnCorruptedImage)throw new e(J.message);(0,i.warn)(`JPX: Trying to recover from: "${J.message}".`)}this.tiles=x(u),this.width=u.SIZ.Xsiz-u.SIZ.XOsiz,this.height=u.SIZ.Ysiz-u.SIZ.YOsiz,this.componentsCount=u.SIZ.Csiz}}D.JpxImage=o;function K(m,r){m.x0=Math.ceil(r.XOsiz/m.XRsiz),m.x1=Math.ceil(r.Xsiz/m.XRsiz),m.y0=Math.ceil(r.YOsiz/m.YRsiz),m.y1=Math.ceil(r.Ysiz/m.YRsiz),m.width=m.x1-m.x0,m.height=m.y1-m.y0}function j(m,r){const p=m.SIZ,c=[];let u;const q=Math.ceil((p.Xsiz-p.XTOsiz)/p.XTsiz),J=Math.ceil((p.Ysiz-p.YTOsiz)/p.YTsiz);for(let W=0;W<J;W++)for(let ce=0;ce<q;ce++)u={},u.tx0=Math.max(p.XTOsiz+ce*p.XTsiz,p.XOsiz),u.ty0=Math.max(p.YTOsiz+W*p.YTsiz,p.YOsiz),u.tx1=Math.min(p.XTOsiz+(ce+1)*p.XTsiz,p.Xsiz),u.ty1=Math.min(p.YTOsiz+(W+1)*p.YTsiz,p.Ysiz),u.width=u.tx1-u.tx0,u.height=u.ty1-u.ty0,u.components=[],c.push(u);m.tiles=c;const G=p.Csiz;for(let W=0,ce=G;W<ce;W++){const _=r[W];for(let ie=0,L=c.length;ie<L;ie++){const oe={};u=c[ie],oe.tcx0=Math.ceil(u.tx0/_.XRsiz),oe.tcy0=Math.ceil(u.ty0/_.YRsiz),oe.tcx1=Math.ceil(u.tx1/_.XRsiz),oe.tcy1=Math.ceil(u.ty1/_.YRsiz),oe.width=oe.tcx1-oe.tcx0,oe.height=oe.tcy1-oe.tcy0,u.components[W]=oe}}}function C(m,r,p){const c=r.codingStyleParameters,u={};return c.entropyCoderWithCustomPrecincts?(u.PPx=c.precinctsSizes[p].PPx,u.PPy=c.precinctsSizes[p].PPy):(u.PPx=15,u.PPy=15),u.xcb_=p>0?Math.min(c.xcb,u.PPx-1):Math.min(c.xcb,u.PPx),u.ycb_=p>0?Math.min(c.ycb,u.PPy-1):Math.min(c.ycb,u.PPy),u}function O(m,r,p){const c=1<<p.PPx,u=1<<p.PPy,q=r.resLevel===0,J=1<<p.PPx+(q?0:-1),G=1<<p.PPy+(q?0:-1),W=r.trx1>r.trx0?Math.ceil(r.trx1/c)-Math.floor(r.trx0/c):0,ce=r.try1>r.try0?Math.ceil(r.try1/u)-Math.floor(r.try0/u):0,_=W*ce;r.precinctParameters={precinctWidth:c,precinctHeight:u,numprecinctswide:W,numprecinctshigh:ce,numprecincts:_,precinctWidthInSubband:J,precinctHeightInSubband:G}}function d(m,r,p){const c=p.xcb_,u=p.ycb_,q=1<<c,J=1<<u,G=r.tbx0>>c,W=r.tby0>>u,ce=r.tbx1+q-1>>c,_=r.tby1+J-1>>u,ie=r.resolution.precinctParameters,L=[],oe=[];let T,Q,v,$;for(Q=W;Q<_;Q++)for(T=G;T<ce;T++){v={cbx:T,cby:Q,tbx0:q*T,tby0:J*Q,tbx1:q*(T+1),tby1:J*(Q+1)},v.tbx0_=Math.max(r.tbx0,v.tbx0),v.tby0_=Math.max(r.tby0,v.tby0),v.tbx1_=Math.min(r.tbx1,v.tbx1),v.tby1_=Math.min(r.tby1,v.tby1);const Z=Math.floor((v.tbx0_-r.tbx0)/ie.precinctWidthInSubband),te=Math.floor((v.tby0_-r.tby0)/ie.precinctHeightInSubband);if($=Z+te*ie.numprecinctswide,v.precinctNumber=$,v.subbandType=r.type,v.Lblock=3,v.tbx1_<=v.tbx0_||v.tby1_<=v.tby0_)continue;L.push(v);let ne=oe[$];ne!==void 0?(T<ne.cbxMin?ne.cbxMin=T:T>ne.cbxMax&&(ne.cbxMax=T),Q<ne.cbyMin?ne.cbxMin=Q:Q>ne.cbyMax&&(ne.cbyMax=Q)):oe[$]=ne={cbxMin:T,cbyMin:Q,cbxMax:T,cbyMax:Q},v.precinct=ne}r.codeblockParameters={codeblockWidth:c,codeblockHeight:u,numcodeblockwide:ce-G+1,numcodeblockhigh:_-W+1},r.codeblocks=L,r.precincts=oe}function A(m,r,p){const c=[],u=m.subbands;for(let q=0,J=u.length;q<J;q++){const W=u[q].codeblocks;for(let ce=0,_=W.length;ce<_;ce++){const ie=W[ce];ie.precinctNumber===r&&c.push(ie)}}return{layerNumber:p,codeblocks:c}}function n(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=c.codingStyleDefaultParameters.layersCount,q=r.Csiz;let J=0;for(let ie=0;ie<q;ie++)J=Math.max(J,c.components[ie].codingStyleParameters.decompositionLevelsCount);let G=0,W=0,ce=0,_=0;this.nextPacket=function(){for(;G<u;G++){for(;W<=J;W++){for(;ce<q;ce++){const L=c.components[ce];if(W>L.codingStyleParameters.decompositionLevelsCount)continue;const oe=L.resolutions[W],T=oe.precinctParameters.numprecincts;for(;_<T;){const Q=A(oe,_,G);return _++,Q}_=0}ce=0}W=0}throw new e("Out of packets")}}function I(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=c.codingStyleDefaultParameters.layersCount,q=r.Csiz;let J=0;for(let ie=0;ie<q;ie++)J=Math.max(J,c.components[ie].codingStyleParameters.decompositionLevelsCount);let G=0,W=0,ce=0,_=0;this.nextPacket=function(){for(;G<=J;G++){for(;W<u;W++){for(;ce<q;ce++){const L=c.components[ce];if(G>L.codingStyleParameters.decompositionLevelsCount)continue;const oe=L.resolutions[G],T=oe.precinctParameters.numprecincts;for(;_<T;){const Q=A(oe,_,W);return _++,Q}_=0}ce=0}W=0}throw new e("Out of packets")}}function k(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=c.codingStyleDefaultParameters.layersCount,q=r.Csiz;let J,G,W,ce,_=0;for(W=0;W<q;W++){const L=c.components[W];_=Math.max(_,L.codingStyleParameters.decompositionLevelsCount)}const ie=new Int32Array(_+1);for(G=0;G<=_;++G){let L=0;for(W=0;W<q;++W){const oe=c.components[W].resolutions;G<oe.length&&(L=Math.max(L,oe[G].precinctParameters.numprecincts))}ie[G]=L}J=0,G=0,W=0,ce=0,this.nextPacket=function(){for(;G<=_;G++){for(;ce<ie[G];ce++){for(;W<q;W++){const oe=c.components[W];if(G>oe.codingStyleParameters.decompositionLevelsCount)continue;const T=oe.resolutions[G],Q=T.precinctParameters.numprecincts;if(!(ce>=Q)){for(;J<u;){const v=A(T,ce,J);return J++,v}J=0}}W=0}ce=0}throw new e("Out of packets")}}function y(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=c.codingStyleDefaultParameters.layersCount,q=r.Csiz,J=E(c),G=J;let W=0,ce=0,_=0,ie=0,L=0;this.nextPacket=function(){for(;L<G.maxNumHigh;L++){for(;ie<G.maxNumWide;ie++){for(;_<q;_++){const T=c.components[_],Q=T.codingStyleParameters.decompositionLevelsCount;for(;ce<=Q;ce++){const v=T.resolutions[ce],$=J.components[_].resolutions[ce],Z=R(ie,L,$,G,v);if(Z!==null){for(;W<u;){const te=A(v,Z,W);return W++,te}W=0}}ce=0}_=0}ie=0}throw new e("Out of packets")}}function f(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=c.codingStyleDefaultParameters.layersCount,q=r.Csiz,J=E(c);let G=0,W=0,ce=0,_=0,ie=0;this.nextPacket=function(){for(;ce<q;++ce){const oe=c.components[ce],T=J.components[ce],Q=oe.codingStyleParameters.decompositionLevelsCount;for(;ie<T.maxNumHigh;ie++){for(;_<T.maxNumWide;_++){for(;W<=Q;W++){const v=oe.resolutions[W],$=T.resolutions[W],Z=R(_,ie,$,T,v);if(Z!==null){for(;G<u;){const te=A(v,Z,G);return G++,te}G=0}}W=0}_=0}ie=0}throw new e("Out of packets")}}function R(m,r,p,c,u){const q=m*c.minWidth,J=r*c.minHeight;if(q%p.width!==0||J%p.height!==0)return null;const G=J/p.width*u.precinctParameters.numprecinctswide;return q/p.height+G}function E(m){const r=m.components.length;let p=Number.MAX_VALUE,c=Number.MAX_VALUE,u=0,q=0;const J=new Array(r);for(let G=0;G<r;G++){const W=m.components[G],ce=W.codingStyleParameters.decompositionLevelsCount,_=new Array(ce+1);let ie=Number.MAX_VALUE,L=Number.MAX_VALUE,oe=0,T=0,Q=1;for(let v=ce;v>=0;--v){const $=W.resolutions[v],Z=Q*$.precinctParameters.precinctWidth,te=Q*$.precinctParameters.precinctHeight;ie=Math.min(ie,Z),L=Math.min(L,te),oe=Math.max(oe,$.precinctParameters.numprecinctswide),T=Math.max(T,$.precinctParameters.numprecinctshigh),_[v]={width:Z,height:te},Q<<=1}p=Math.min(p,ie),c=Math.min(c,L),u=Math.max(u,oe),q=Math.max(q,T),J[G]={resolutions:_,minWidth:ie,minHeight:L,maxNumWide:oe,maxNumHigh:T}}return{components:J,minWidth:p,minHeight:c,maxNumWide:u,maxNumHigh:q}}function M(m){const r=m.SIZ,p=m.currentTile.index,c=m.tiles[p],u=r.Csiz;for(let J=0;J<u;J++){const G=c.components[J],W=G.codingStyleParameters.decompositionLevelsCount,ce=[],_=[];for(let ie=0;ie<=W;ie++){const L=C(m,G,ie),oe={},T=1<<W-ie;oe.trx0=Math.ceil(G.tcx0/T),oe.try0=Math.ceil(G.tcy0/T),oe.trx1=Math.ceil(G.tcx1/T),oe.try1=Math.ceil(G.tcy1/T),oe.resLevel=ie,O(m,oe,L),ce.push(oe);let Q;if(ie===0)Q={},Q.type="LL",Q.tbx0=Math.ceil(G.tcx0/T),Q.tby0=Math.ceil(G.tcy0/T),Q.tbx1=Math.ceil(G.tcx1/T),Q.tby1=Math.ceil(G.tcy1/T),Q.resolution=oe,d(m,Q,L),_.push(Q),oe.subbands=[Q];else{const v=1<<W-ie+1,$=[];Q={},Q.type="HL",Q.tbx0=Math.ceil(G.tcx0/v-.5),Q.tby0=Math.ceil(G.tcy0/v),Q.tbx1=Math.ceil(G.tcx1/v-.5),Q.tby1=Math.ceil(G.tcy1/v),Q.resolution=oe,d(m,Q,L),_.push(Q),$.push(Q),Q={},Q.type="LH",Q.tbx0=Math.ceil(G.tcx0/v),Q.tby0=Math.ceil(G.tcy0/v-.5),Q.tbx1=Math.ceil(G.tcx1/v),Q.tby1=Math.ceil(G.tcy1/v-.5),Q.resolution=oe,d(m,Q,L),_.push(Q),$.push(Q),Q={},Q.type="HH",Q.tbx0=Math.ceil(G.tcx0/v-.5),Q.tby0=Math.ceil(G.tcy0/v-.5),Q.tbx1=Math.ceil(G.tcx1/v-.5),Q.tby1=Math.ceil(G.tcy1/v-.5),Q.resolution=oe,d(m,Q,L),_.push(Q),$.push(Q),oe.subbands=$}}G.resolutions=ce,G.subbands=_}const q=c.codingStyleDefaultParameters.progressionOrder;switch(q){case 0:c.packetsIterator=new n(m);break;case 1:c.packetsIterator=new I(m);break;case 2:c.packetsIterator=new k(m);break;case 3:c.packetsIterator=new y(m);break;case 4:c.packetsIterator=new f(m);break;default:throw new e(`Unsupported progression order ${q}`)}}function b(m,r,p,c){let u=0,q,J=0,G=!1;function W(Z){for(;J<Z;){const te=r[p+u];u++,G?(q=q<<7|te,J+=7,G=!1):(q=q<<8|te,J+=8),te===255&&(G=!0)}return J-=Z,q>>>J&(1<<Z)-1}function ce(Z){return r[p+u-1]===255&&r[p+u]===Z?(_(1),!0):r[p+u]===255&&r[p+u+1]===Z?(_(2),!0):!1}function _(Z){u+=Z}function ie(){J=0,G&&(u++,G=!1)}function L(){if(W(1)===0)return 1;if(W(1)===0)return 2;let Z=W(2);return Z<3?Z+3:(Z=W(5),Z<31?Z+6:(Z=W(7),Z+37))}const oe=m.currentTile.index,T=m.tiles[oe],Q=m.COD.sopMarkerUsed,v=m.COD.ephMarkerUsed,$=T.packetsIterator;for(;u<c;){ie(),Q&&ce(145)&&_(4);const Z=$.nextPacket();if(!W(1))continue;const te=Z.layerNumber,ne=[];let X;for(let re=0,ae=Z.codeblocks.length;re<ae;re++){X=Z.codeblocks[re];let z=X.precinct;const le=X.cbx-z.cbxMin,ue=X.cby-z.cbyMin;let ge=!1,ke=!1,me,fe;if(X.included!==void 0)ge=!!W(1);else{z=X.precinct;let Te;if(z.inclusionTree!==void 0)Te=z.inclusionTree;else{const Ce=z.cbxMax-z.cbxMin+1,Ae=z.cbyMax-z.cbyMin+1;Te=new h(Ce,Ae,te),fe=new s(Ce,Ae),z.inclusionTree=Te,z.zeroBitPlanesTree=fe;for(let Se=0;Se<te;Se++)if(W(1)!==0)throw new e("Invalid tag tree")}if(Te.reset(le,ue,te))for(;;)if(W(1)){if(me=!Te.nextLevel(),me){X.included=!0,ge=ke=!0;break}}else{Te.incrementValue(te);break}}if(!ge)continue;if(ke){for(fe=z.zeroBitPlanesTree,fe.reset(le,ue);;)if(W(1)){if(me=!fe.nextLevel(),me)break}else fe.incrementValue();X.zeroBitPlanes=fe.value}const xe=L();for(;W(1);)X.Lblock++;const pe=(0,w.log2)(xe),we=(xe<1<<pe?pe-1:pe)+X.Lblock,Oe=W(we);ne.push({codeblock:X,codingpasses:xe,dataLength:Oe})}for(ie(),v&&ce(146);ne.length>0;){const re=ne.shift();X=re.codeblock,X.data===void 0&&(X.data=[]),X.data.push({data:r,start:p+u,end:p+u+re.dataLength,codingpasses:re.codingpasses}),u+=re.dataLength}}return u}function V(m,r,p,c,u,q,J,G,W){const ce=c.tbx0,_=c.tby0,ie=c.tbx1-c.tbx0,L=c.codeblocks,oe=c.type.charAt(0)==="H"?1:0,T=c.type.charAt(1)==="H"?r:0;for(let Q=0,v=L.length;Q<v;++Q){const $=L[Q],Z=$.tbx1_-$.tbx0_,te=$.tby1_-$.tby0_;if(Z===0||te===0||$.data===void 0)continue;const ne=new F(Z,te,$.subbandType,$.zeroBitPlanes,q);let X=2;const re=$.data;let ae=0,z=0,le,ue,ge;for(le=0,ue=re.length;le<ue;le++)ge=re[le],ae+=ge.end-ge.start,z+=ge.codingpasses;const ke=new Uint8Array(ae);let me=0;for(le=0,ue=re.length;le<ue;le++){ge=re[le];const Ve=ge.data.subarray(ge.start,ge.end);ke.set(Ve,me),me+=Ve.length}const fe=new P.ArithmeticDecoder(ke,0,ae);for(ne.setDecoder(fe),le=0;le<z;le++){switch(X){case 0:ne.runSignificancePropagationPass();break;case 1:ne.runMagnitudeRefinementPass();break;case 2:ne.runCleanupPass(),G&&ne.checkSegmentationSymbol();break}W&&ne.reset(),X=(X+1)%3}let xe=$.tbx0_-ce+($.tby0_-_)*ie;const pe=ne.coefficentsSign,we=ne.coefficentsMagnitude,Oe=ne.bitsDecoded,Te=J?0:.5;let Ce,Ae,Se;me=0;const He=c.type!=="LL";for(le=0;le<te;le++){const Le=2*(xe/ie|0)*(r-ie)+oe+T;for(Ce=0;Ce<Z;Ce++){if(Ae=we[me],Ae!==0){Ae=(Ae+Te)*u,pe[me]!==0&&(Ae=-Ae),Se=Oe[me];const Ye=He?Le+(xe<<1):xe;m[Ye]=J&&Se>=q?Ae:Ae*(1<<q-Se)}xe++,me++}xe+=ie-Z}}}function l(m,r,p){const c=r.components[p],u=c.codingStyleParameters,q=c.quantizationParameters,J=u.decompositionLevelsCount,G=q.SPqcds,W=q.scalarExpounded,ce=q.guardBits,_=u.segmentationSymbolUsed,ie=u.resetContextProbabilities,L=m.components[p].precision,oe=u.reversibleTransformation,T=oe?new g:new U,Q=[];let v=0;for(let Z=0;Z<=J;Z++){const te=c.resolutions[Z],ne=te.trx1-te.trx0,X=te.try1-te.try0,re=new Float32Array(ne*X);for(let ae=0,z=te.subbands.length;ae<z;ae++){let le,ue;W?(le=G[v].mu,ue=G[v].epsilon,v++):(le=G[0].mu,ue=G[0].epsilon+(Z>0?1-Z:0));const ge=te.subbands[ae],ke=t[ge.type],me=oe?1:Gt(2,L+ke-ue)*(1+le/2048),fe=ce+ue-1;V(re,ne,X,ge,me,fe,oe,_,ie)}Q.push({width:ne,height:X,items:re})}const $=T.calculate(Q,c.tcx0,c.tcy0);return{left:c.tcx0,top:c.tcy0,width:$.width,height:$.height,items:$.items}}function x(m){const r=m.SIZ,p=m.components,c=r.Csiz,u=[];for(let q=0,J=m.tiles.length;q<J;q++){const G=m.tiles[q],W=[];for(let ne=0;ne<c;ne++)W[ne]=l(m,G,ne);const ce=W[0],_=new Uint8ClampedArray(ce.items.length*c),ie={left:ce.left,top:ce.top,width:ce.width,height:ce.height,items:_};let L,oe,T=0,Q,v,$,Z,te;if(G.codingStyleDefaultParameters.multipleComponentTransform){const ne=c===4,X=W[0].items,re=W[1].items,ae=W[2].items,z=ne?W[3].items:null;L=p[0].precision-8,oe=(128<<L)+.5;const le=G.components[0],ue=c-3;if(v=X.length,le.codingStyleParameters.reversibleTransformation)for(Q=0;Q<v;Q++,T+=ue){$=X[Q]+oe,Z=re[Q],te=ae[Q];const ge=$-(te+Z>>2);_[T++]=ge+te>>L,_[T++]=ge>>L,_[T++]=ge+Z>>L}else for(Q=0;Q<v;Q++,T+=ue)$=X[Q]+oe,Z=re[Q],te=ae[Q],_[T++]=$+1.402*te>>L,_[T++]=$-.34413*Z-.71414*te>>L,_[T++]=$+1.772*Z>>L;if(ne)for(Q=0,T=3;Q<v;Q++,T+=4)_[T]=z[Q]+oe>>L}else for(let ne=0;ne<c;ne++){const X=W[ne].items;for(L=p[ne].precision-8,oe=(128<<L)+.5,T=ne,Q=0,v=X.length;Q<v;Q++)_[T]=X[Q]+oe>>L,T+=c}u.push(ie)}return u}function H(m,r){const c=m.SIZ.Csiz,u=m.tiles[r];for(let q=0;q<c;q++){const J=u.components[q],G=m.currentTile.QCC[q]!==void 0?m.currentTile.QCC[q]:m.currentTile.QCD;J.quantizationParameters=G;const W=m.currentTile.COC[q]!==void 0?m.currentTile.COC[q]:m.currentTile.COD;J.codingStyleParameters=W}u.codingStyleDefaultParameters=m.currentTile.COD}class s{constructor(r,p){const c=(0,w.log2)(Math.max(r,p))+1;this.levels=[];for(let u=0;u<c;u++){const q={width:r,height:p,items:[]};this.levels.push(q),r=Math.ceil(r/2),p=Math.ceil(p/2)}}reset(r,p){let c=0,u=0,q;for(;c<this.levels.length;){q=this.levels[c];const J=r+p*q.width;if(q.items[J]!==void 0){u=q.items[J];break}q.index=J,r>>=1,p>>=1,c++}c--,q=this.levels[c],q.items[q.index]=u,this.currentLevel=c,delete this.value}incrementValue(){const r=this.levels[this.currentLevel];r.items[r.index]++}nextLevel(){let r=this.currentLevel,p=this.levels[r];const c=p.items[p.index];return r--,r<0?(this.value=c,!1):(this.currentLevel=r,p=this.levels[r],p.items[p.index]=c,!0)}}class h{constructor(r,p,c){const u=(0,w.log2)(Math.max(r,p))+1;this.levels=[];for(let q=0;q<u;q++){const J=new Uint8Array(r*p);for(let W=0,ce=J.length;W<ce;W++)J[W]=c;const G={width:r,height:p,items:J};this.levels.push(G),r=Math.ceil(r/2),p=Math.ceil(p/2)}}reset(r,p,c){let u=0;for(;u<this.levels.length;){const q=this.levels[u],J=r+p*q.width;q.index=J;const G=q.items[J];if(G===255)break;if(G>c)return this.currentLevel=u,this.propagateValues(),!1;r>>=1,p>>=1,u++}return this.currentLevel=u-1,!0}incrementValue(r){const p=this.levels[this.currentLevel];p.items[p.index]=r+1,this.propagateValues()}propagateValues(){let r=this.currentLevel,p=this.levels[r];const c=p.items[p.index];for(;--r>=0;)p=this.levels[r],p.items[p.index]=c}nextLevel(){let r=this.currentLevel,p=this.levels[r];const c=p.items[p.index];return p.items[p.index]=255,r--,r<0?!1:(this.currentLevel=r,p=this.levels[r],p.items[p.index]=c,!0)}}const S=class S{constructor(r,p,c,u,q){this.width=r,this.height=p;let J;c==="HH"?J=S.HHContextLabel:c==="HL"?J=S.HLContextLabel:J=S.LLAndLHContextsLabel,this.contextLabelTable=J;const G=r*p;this.neighborsSignificance=new Uint8Array(G),this.coefficentsSign=new Uint8Array(G);let W;q>14?W=new Uint32Array(G):q>6?W=new Uint16Array(G):W=new Uint8Array(G),this.coefficentsMagnitude=W,this.processingFlags=new Uint8Array(G);const ce=new Uint8Array(G);if(u!==0)for(let _=0;_<G;_++)ce[_]=u;this.bitsDecoded=ce,this.reset()}setDecoder(r){this.decoder=r}reset(){this.contexts=new Int8Array(19),this.contexts[0]=8,this.contexts[S.UNIFORM_CONTEXT]=92,this.contexts[S.RUNLENGTH_CONTEXT]=6}setNeighborsSignificance(r,p,c){const u=this.neighborsSignificance,q=this.width,J=this.height,G=p>0,W=p+1<q;let ce;r>0&&(ce=c-q,G&&(u[ce-1]+=16),W&&(u[ce+1]+=16),u[ce]+=4),r+1<J&&(ce=c+q,G&&(u[ce-1]+=16),W&&(u[ce+1]+=16),u[ce]+=4),G&&(u[c-1]+=1),W&&(u[c+1]+=1),u[c]|=128}runSignificancePropagationPass(){const r=this.decoder,p=this.width,c=this.height,u=this.coefficentsMagnitude,q=this.coefficentsSign,J=this.neighborsSignificance,G=this.processingFlags,W=this.contexts,ce=this.contextLabelTable,_=this.bitsDecoded,ie=-2,L=1,oe=2;for(let T=0;T<c;T+=4)for(let Q=0;Q<p;Q++){let v=T*p+Q;for(let $=0;$<4;$++,v+=p){const Z=T+$;if(Z>=c)break;if(G[v]&=ie,u[v]||!J[v])continue;const te=ce[J[v]];if(r.readBit(W,te)){const X=this.decodeSignBit(Z,Q,v);q[v]=X,u[v]=1,this.setNeighborsSignificance(Z,Q,v),G[v]|=oe}_[v]++,G[v]|=L}}}decodeSignBit(r,p,c){const u=this.width,q=this.height,J=this.coefficentsMagnitude,G=this.coefficentsSign;let W,ce,_,ie,L,oe;ie=p>0&&J[c-1]!==0,p+1<u&&J[c+1]!==0?(_=G[c+1],ie?(ce=G[c-1],W=1-_-ce):W=1-_-_):ie?(ce=G[c-1],W=1-ce-ce):W=0;const T=3*W;return ie=r>0&&J[c-u]!==0,r+1<q&&J[c+u]!==0?(_=G[c+u],ie?(ce=G[c-u],W=1-_-ce+T):W=1-_-_+T):ie?(ce=G[c-u],W=1-ce-ce+T):W=T,W>=0?(L=9+W,oe=this.decoder.readBit(this.contexts,L)):(L=9-W,oe=this.decoder.readBit(this.contexts,L)^1),oe}runMagnitudeRefinementPass(){const r=this.decoder,p=this.width,c=this.height,u=this.coefficentsMagnitude,q=this.neighborsSignificance,J=this.contexts,G=this.bitsDecoded,W=this.processingFlags,ce=1,_=2,ie=p*c,L=p*4;for(let oe=0,T;oe<ie;oe=T){T=Math.min(ie,oe+L);for(let Q=0;Q<p;Q++)for(let v=oe+Q;v<T;v+=p){if(!u[v]||W[v]&ce)continue;let $=16;W[v]&_&&(W[v]^=_,$=(q[v]&127)===0?15:14);const Z=r.readBit(J,$);u[v]=u[v]<<1|Z,G[v]++,W[v]|=ce}}}runCleanupPass(){const r=this.decoder,p=this.width,c=this.height,u=this.neighborsSignificance,q=this.coefficentsMagnitude,J=this.coefficentsSign,G=this.contexts,W=this.contextLabelTable,ce=this.bitsDecoded,_=this.processingFlags,ie=1,L=2,oe=p,T=p*2,Q=p*3;let v;for(let $=0;$<c;$=v){v=Math.min($+4,c);const Z=$*p,te=$+3<c;for(let ne=0;ne<p;ne++){const X=Z+ne,re=te&&_[X]===0&&_[X+oe]===0&&_[X+T]===0&&_[X+Q]===0&&u[X]===0&&u[X+oe]===0&&u[X+T]===0&&u[X+Q]===0;let ae=0,z=X,le=$,ue;if(re){if(!r.readBit(G,S.RUNLENGTH_CONTEXT)){ce[X]++,ce[X+oe]++,ce[X+T]++,ce[X+Q]++;continue}ae=r.readBit(G,S.UNIFORM_CONTEXT)<<1|r.readBit(G,S.UNIFORM_CONTEXT),ae!==0&&(le=$+ae,z+=ae*p),ue=this.decodeSignBit(le,ne,z),J[z]=ue,q[z]=1,this.setNeighborsSignificance(le,ne,z),_[z]|=L,z=X;for(let ke=$;ke<=le;ke++,z+=p)ce[z]++;ae++}for(le=$+ae;le<v;le++,z+=p){if(q[z]||_[z]&ie)continue;const ge=W[u[z]];r.readBit(G,ge)===1&&(ue=this.decodeSignBit(le,ne,z),J[z]=ue,q[z]=1,this.setNeighborsSignificance(le,ne,z),_[z]|=L),ce[z]++}}}}checkSegmentationSymbol(){const r=this.decoder,p=this.contexts;if((r.readBit(p,S.UNIFORM_CONTEXT)<<3|r.readBit(p,S.UNIFORM_CONTEXT)<<2|r.readBit(p,S.UNIFORM_CONTEXT)<<1|r.readBit(p,S.UNIFORM_CONTEXT))!==10)throw new e("Invalid segmentation symbol")}};jt(S,"UNIFORM_CONTEXT",17),jt(S,"RUNLENGTH_CONTEXT",18),jt(S,"LLAndLHContextsLabel",new Uint8Array([0,5,8,0,3,7,8,0,4,7,8,0,0,0,0,0,1,6,8,0,3,7,8,0,4,7,8,0,0,0,0,0,2,6,8,0,3,7,8,0,4,7,8,0,0,0,0,0,2,6,8,0,3,7,8,0,4,7,8,0,0,0,0,0,2,6,8,0,3,7,8,0,4,7,8])),jt(S,"HLContextLabel",new Uint8Array([0,3,4,0,5,7,7,0,8,8,8,0,0,0,0,0,1,3,4,0,6,7,7,0,8,8,8,0,0,0,0,0,2,3,4,0,6,7,7,0,8,8,8,0,0,0,0,0,2,3,4,0,6,7,7,0,8,8,8,0,0,0,0,0,2,3,4,0,6,7,7,0,8,8,8])),jt(S,"HHContextLabel",new Uint8Array([0,1,2,0,1,2,2,0,2,2,2,0,0,0,0,0,3,4,5,0,4,5,5,0,5,5,5,0,0,0,0,0,6,7,7,0,7,7,7,0,7,7,7,0,0,0,0,0,8,8,8,0,8,8,8,0,8,8,8,0,0,0,0,0,8,8,8,0,8,8,8,0,8,8,8]));let F=S;class N{constructor(){this.constructor===N&&(0,i.unreachable)("Cannot initialize Transform.")}calculate(r,p,c){let u=r[0];for(let q=1,J=r.length;q<J;q++)u=this.iterate(u,r[q],p,c);return u}extend(r,p,c){let u=p-1,q=p+1,J=p+c-2,G=p+c;r[u--]=r[q++],r[G++]=r[J--],r[u--]=r[q++],r[G++]=r[J--],r[u--]=r[q++],r[G++]=r[J--],r[u]=r[q],r[G]=r[J]}filter(r,p,c){(0,i.unreachable)("Abstract method `filter` called")}iterate(r,p,c,u){const q=r.width,J=r.height;let G=r.items;const W=p.width,ce=p.height,_=p.items;let ie,L,oe,T,Q,v;for(oe=0,ie=0;ie<J;ie++)for(T=ie*2*W,L=0;L<q;L++,oe++,T+=2)_[T]=G[oe];G=r.items=null;const $=4,Z=new Float32Array(W+2*$);if(W===1){if(c&1)for(v=0,oe=0;v<ce;v++,oe+=W)_[oe]*=.5}else for(v=0,oe=0;v<ce;v++,oe+=W)Z.set(_.subarray(oe,oe+W),$),this.extend(Z,$,W),this.filter(Z,$,W),_.set(Z.subarray($,$+W),oe);let te=16;const ne=[];for(ie=0;ie<te;ie++)ne.push(new Float32Array(ce+2*$));let X,re=0;if(r=$+ce,ce===1){if(u&1)for(Q=0;Q<W;Q++)_[Q]*=.5}else for(Q=0;Q<W;Q++){if(re===0){for(te=Math.min(W-Q,te),oe=Q,T=$;T<r;oe+=W,T++)for(X=0;X<te;X++)ne[X][T]=_[oe+X];re=te}re--;const ae=ne[re];if(this.extend(ae,$,ce),this.filter(ae,$,ce),re===0)for(oe=Q-te+1,T=$;T<r;oe+=W,T++)for(X=0;X<te;X++)_[oe+X]=ne[X][T]}return{width:W,height:ce,items:_}}}class U extends N{filter(r,p,c){const u=c>>1;p|=0;let q,J,G,W;const ce=-1.586134342059924,_=-.052980118572961,ie=.882911075530934,L=.443506852043971,oe=1.230174104914001,T=1/oe;for(q=p-3,J=u+4;J--;q+=2)r[q]*=T;for(q=p-2,G=L*r[q-1],J=u+3;J--&&(W=L*r[q+1],r[q]=oe*r[q]-G-W,J--);q+=2)q+=2,G=L*r[q+1],r[q]=oe*r[q]-G-W;for(q=p-1,G=ie*r[q-1],J=u+2;J--&&(W=ie*r[q+1],r[q]-=G+W,J--);q+=2)q+=2,G=ie*r[q+1],r[q]-=G+W;for(q=p,G=_*r[q-1],J=u+1;J--&&(W=_*r[q+1],r[q]-=G+W,J--);q+=2)q+=2,G=_*r[q+1],r[q]-=G+W;if(u!==0)for(q=p+1,G=ce*r[q-1],J=u;J--&&(W=ce*r[q+1],r[q]-=G+W,J--);q+=2)q+=2,G=ce*r[q+1],r[q]-=G+W}}class g extends N{filter(r,p,c){const u=c>>1;p|=0;let q,J;for(q=p,J=u+1;J--;q+=2)r[q]-=r[q-1]+r[q+1]+2>>2;for(q=p+1,J=u;J--;q+=2)r[q]+=r[q-1]+r[q+1]>>1}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.LZWStream=void 0;var i=se(18);class w extends i.DecodeStream{constructor(e,t,o){super(t),this.str=e,this.dict=e.dict,this.cachedData=0,this.bitsCached=0;const K=4096,j={earlyChange:o,codeLength:9,nextCode:258,dictionaryValues:new Uint8Array(K),dictionaryLengths:new Uint16Array(K),dictionaryPrevCodes:new Uint16Array(K),currentSequence:new Uint8Array(K),currentSequenceLength:0};for(let C=0;C<256;++C)j.dictionaryValues[C]=C,j.dictionaryLengths[C]=1;this.lzwState=j}readBits(e){let t=this.bitsCached,o=this.cachedData;for(;t<e;){const K=this.str.getByte();if(K===-1)return this.eof=!0,null;o=o<<8|K,t+=8}return this.bitsCached=t-=e,this.cachedData=o,this.lastCode=null,o>>>t&(1<<e)-1}readBlock(){let o=1024,K,j,C;const O=this.lzwState;if(!O)return;const d=O.earlyChange;let A=O.nextCode;const n=O.dictionaryValues,I=O.dictionaryLengths,k=O.dictionaryPrevCodes;let y=O.codeLength,f=O.prevCode;const R=O.currentSequence;let E=O.currentSequenceLength,M=0,b=this.bufferLength,V=this.ensureBuffer(this.bufferLength+o);for(K=0;K<512;K++){const l=this.readBits(y),x=E>0;if(l<256)R[0]=l,E=1;else if(l>=258)if(l<A)for(E=I[l],j=E-1,C=l;j>=0;j--)R[j]=n[C],C=k[C];else R[E++]=R[0];else if(l===256){y=9,A=258,E=0;continue}else{this.eof=!0,delete this.lzwState;break}if(x&&(k[A]=f,I[A]=I[f]+1,n[A]=R[0],A++,y=A+d&A+d-1?y:Math.min(Math.log(A+d)/.6931471805599453+1,12)|0),f=l,M+=E,o<M){do o+=512;while(o<M);V=this.ensureBuffer(this.bufferLength+o)}for(j=0;j<E;j++)V[b++]=R[j]}O.nextCode=A,O.codeLength=y,O.prevCode=f,O.currentSequenceLength=E,this.bufferLength=b}}D.LZWStream=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PredictorStream=void 0;var i=se(18),w=se(4),P=se(2);class e extends i.DecodeStream{constructor(o,K,j){if(super(K),!(j instanceof w.Dict))return o;const C=this.predictor=j.get("Predictor")||1;if(C<=1)return o;if(C!==2&&(C<10||C>15))throw new P.FormatError(`Unsupported predictor: ${C}`);this.readBlock=C===2?this.readBlockTiff:this.readBlockPng,this.str=o,this.dict=o.dict;const O=this.colors=j.get("Colors")||1,d=this.bits=j.get("BPC","BitsPerComponent")||8,A=this.columns=j.get("Columns")||1;return this.pixBytes=O*d+7>>3,this.rowBytes=A*O*d+7>>3,this}readBlockTiff(){const o=this.rowBytes,K=this.bufferLength,j=this.ensureBuffer(K+o),C=this.bits,O=this.colors,d=this.str.getBytes(o);if(this.eof=!d.length,this.eof)return;let A=0,n=0,I=0,k=0,y=K,f;if(C===1&&O===1)for(f=0;f<o;++f){let R=d[f]^A;R^=R>>1,R^=R>>2,R^=R>>4,A=(R&1)<<7,j[y++]=R}else if(C===8){for(f=0;f<O;++f)j[y++]=d[f];for(;f<o;++f)j[y]=j[y-O]+d[f],y++}else if(C===16){const R=O*2;for(f=0;f<R;++f)j[y++]=d[f];for(;f<o;f+=2){const E=((d[f]&255)<<8)+(d[f+1]&255)+((j[y-R]&255)<<8)+(j[y-R+1]&255);j[y++]=E>>8&255,j[y++]=E&255}}else{const R=new Uint8Array(O+1),E=(1<<C)-1;let M=0,b=K;const V=this.columns;for(f=0;f<V;++f)for(let l=0;l<O;++l)I<C&&(A=A<<8|d[M++]&255,I+=8),R[l]=R[l]+(A>>I-C)&E,I-=C,n=n<<C|R[l],k+=C,k>=8&&(j[b++]=n>>k-8&255,k-=8);k>0&&(j[b++]=(n<<8-k)+(A&(1<<8-k)-1))}this.bufferLength+=o}readBlockPng(){const o=this.rowBytes,K=this.pixBytes,j=this.str.getByte(),C=this.str.getBytes(o);if(this.eof=!C.length,this.eof)return;const O=this.bufferLength,d=this.ensureBuffer(O+o);let A=d.subarray(O-o,O);A.length===0&&(A=new Uint8Array(o));let n,I=O,k,y;switch(j){case 0:for(n=0;n<o;++n)d[I++]=C[n];break;case 1:for(n=0;n<K;++n)d[I++]=C[n];for(;n<o;++n)d[I]=d[I-K]+C[n]&255,I++;break;case 2:for(n=0;n<o;++n)d[I++]=A[n]+C[n]&255;break;case 3:for(n=0;n<K;++n)d[I++]=(A[n]>>1)+C[n];for(;n<o;++n)d[I]=(A[n]+d[I-K]>>1)+C[n]&255,I++;break;case 4:for(n=0;n<K;++n)k=A[n],y=C[n],d[I++]=k+y;for(;n<o;++n){k=A[n];const f=A[n-K],R=d[I-K],E=R+k-f;let M=E-R;M<0&&(M=-M);let b=E-k;b<0&&(b=-b);let V=E-f;V<0&&(V=-V),y=C[n],M<=b&&M<=V?d[I++]=R+y:b<=V?d[I++]=k+y:d[I++]=f+y}break;default:throw new P.FormatError(`Unsupported predictor: ${j}`)}this.bufferLength+=o}}D.PredictorStream=e},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.RunLengthStream=void 0;var i=se(18);class w extends i.DecodeStream{constructor(e,t){super(t),this.str=e,this.dict=e.dict}readBlock(){const e=this.str.getBytes(2);if(!e||e.length<2||e[0]===128){this.eof=!0;return}let t,o=this.bufferLength,K=e[0];if(K<128){if(t=this.ensureBuffer(o+K+1),t[o++]=e[1],K>0){const j=this.str.getBytes(K);t.set(j,o),o+=K}}else{K=257-K;const j=e[1];t=this.ensureBuffer(o+K+1);for(let C=0;C<K;C++)t[o++]=j}this.bufferLength=o}}D.RunLengthStream=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Font=D.ErrorFont=void 0;var i=se(2),w=se(35),P=se(38),e=se(40),t=se(39),o=se(37),K=se(41),j=se(42),C=se(43),O=se(44),d=se(45),A=se(46),n=se(14),I=se(47),k=se(3),y=se(8),f=se(48);const R=[[57344,63743],[1048576,1114109]],E=1e3,M=["ascent","bbox","black","bold","charProcOperatorList","composite","cssFontInfo","data","defaultVMetrics","defaultWidth","descent","fallbackName","fontMatrix","isInvalidPDFjsFont","isType3Font","italic","loadedName","mimetype","missingFile","name","remeasure","subtype","systemFontInfo","type","vertical"],b=["cMap","defaultEncoding","differences","isMonospace","isSerifFont","isSymbolicFont","seacMap","toFontChar","toUnicode","vmetrics","widths"];function V(X){if(!X.fontMatrix||X.fontMatrix[0]===i.FONT_IDENTITY_MATRIX[0])return;const re=.001/X.fontMatrix[0],ae=X.widths;for(const z in ae)ae[z]*=re;X.defaultWidth*=re}function l(X,re,ae){if(X.isInternalFont||X.hasIncludedToUnicodeMap||X.hasEncoding||X.toUnicode instanceof j.IdentityToUnicodeMap||!re||ae.length===0||X.defaultEncoding===o.WinAnsiEncoding)return;for(const ge of ae)if(!ce(ge))return;const z=o.WinAnsiEncoding,le=[],ue=(0,t.getGlyphsUnicode)();for(const ge in z){const ke=z[ge];if(ke==="")continue;const me=ue[ke];me!==void 0&&(le[ge]=String.fromCharCode(me))}le.length>0&&X.toUnicode.amend(le)}function x(X,re){if(X.isInternalFont||X.hasIncludedToUnicodeMap||re===X.defaultEncoding||X.toUnicode instanceof j.IdentityToUnicodeMap)return;const ae=[],z=(0,t.getGlyphsUnicode)();for(const le in re){if(X.hasEncoding&&(X.baseEncodingName||X.differences[le]!==void 0))continue;const ue=re[le],ge=(0,e.getUnicodeForGlyph)(ue,z);ge!==-1&&(ae[le]=String.fromCharCode(ge))}ae.length>0&&X.toUnicode.amend(ae)}function H(X){if(!X.fallbackToUnicode||X.toUnicode instanceof j.IdentityToUnicodeMap)return;const re=[];for(const ae in X.fallbackToUnicode)X.toUnicode.has(ae)||(re[ae]=X.fallbackToUnicode[ae]);re.length>0&&X.toUnicode.amend(re)}class s{constructor(re,ae,z,le,ue,ge,ke,me,fe){this.originalCharCode=re,this.fontChar=ae,this.unicode=z,this.accent=le,this.width=ue,this.vmetric=ge,this.operatorListId=ke,this.isSpace=me,this.isInFont=fe}get category(){return(0,i.shadow)(this,"category",(0,e.getCharUnicodeCategory)(this.unicode),!0)}}function h(X,re){return(X<<8)+re}function F(X,re,ae){X[re+1]=ae,X[re]=ae>>>8}function N(X,re){const ae=(X<<8)+re;return ae&32768?ae-65536:ae}function U(X,re,ae,z){return(X<<24)+(re<<16)+(ae<<8)+z}function g(X){return String.fromCharCode(X>>8&255,X&255)}function S(X){return X>32767?X=32767:X<-32768&&(X=-32768),String.fromCharCode(X>>8&255,X&255)}function m(X){const re=X.peekBytes(4);return(0,k.readUint32)(re,0)===65536||(0,i.bytesToString)(re)==="true"}function r(X){const re=X.peekBytes(4);return(0,i.bytesToString)(re)==="ttcf"}function p(X){const re=X.peekBytes(4);return(0,i.bytesToString)(re)==="OTTO"}function c(X){const re=X.peekBytes(2);return re[0]===37&&re[1]===33||re[0]===128&&re[1]===1}function u(X){const re=X.peekBytes(4);return re[0]>=1&&re[3]>=1&&re[3]<=4}function q(X,{type:re,subtype:ae,composite:z}){let le,ue;return m(X)||r(X)?le=z?"CIDFontType2":"TrueType":p(X)?le=z?"CIDFontType2":"OpenType":c(X)?z?le="CIDFontType0":le=re==="MMType1"?"MMType1":"Type1":u(X)?z?(le="CIDFontType0",ue="CIDFontType0C"):(le=re==="MMType1"?"MMType1":"Type1",ue="Type1C"):((0,i.warn)("getFontFileType: Unable to detect correct font file Type/Subtype."),le=re,ue=ae),[le,ue]}function J(X,re){for(const ae in re)X[+ae]=re[ae]}function G(X,re,ae){const z=[];let le;for(let ue=0,ge=X.length;ue<ge;ue++)le=(0,e.getUnicodeForGlyph)(X[ue],re),le!==-1&&(z[ue]=le);for(const ue in ae)le=(0,e.getUnicodeForGlyph)(ae[ue],re),le!==-1&&(z[+ue]=le);return z}function W(X){return X.platform===1&&X.encoding===0&&X.language===0}function ce(X){return X.platform===3&&X.encoding===1&&X.language===1033}function _(X,re,ae=!1){switch(re.length){case 1:return re.charCodeAt(0);case 2:return re.charCodeAt(0)<<8|re.charCodeAt(1)}const z=`Unsupported CID string (charCode ${X}): "${re}".`;if(ae)throw new i.FormatError(z);return(0,i.warn)(z),re}function ie(X,re,ae,z){const le=Object.create(null),ue=new Map,ge=[],ke=new Set;let me=0,xe=R[me][0],pe=R[me][1];const we=Oe=>R[0][0]<=Oe&&Oe<=R[0][1]||R[1][0]<=Oe&&Oe<=R[1][1];for(let Oe in X){Oe|=0;let Te=X[Oe];if(!re(Te))continue;if(xe>pe){if(me++,me>=R.length){(0,i.warn)("Ran out of space in font private use area.");break}xe=R[me][0],pe=R[me][1]}const Ce=xe++;Te===0&&(Te=ae);let Ae=z.get(Oe);typeof Ae=="string"&&(Ae=Ae.codePointAt(0)),Ae&&!we(Ae)&&!ke.has(Te)&&(ue.set(Ae,Te),ke.add(Te)),le[Ce]=Te,ge[Oe]=Ce}return{toFontChar:ge,charCodeToGlyphId:le,toUnicodeExtraMap:ue,nextAvailableFontCharCode:xe}}function L(X,re,ae){const z=[];for(const ge in X)X[ge]>=ae||z.push({fontCharCode:ge|0,glyphId:X[ge]});if(re)for(const[ge,ke]of re)ke>=ae||z.push({fontCharCode:ge,glyphId:ke});z.length===0&&z.push({fontCharCode:0,glyphId:0}),z.sort(function(ke,me){return ke.fontCharCode-me.fontCharCode});const le=[],ue=z.length;for(let ge=0;ge<ue;){const ke=z[ge].fontCharCode,me=[z[ge].glyphId];++ge;let fe=ke;for(;ge<ue&&fe+1===z[ge].fontCharCode&&(me.push(z[ge].glyphId),++fe,++ge,fe!==65535););le.push([ke,fe,me])}return le}function oe(X,re,ae){const z=L(X,re,ae),le=z.at(-1)[1]>65535?2:1;let ue="\0\0"+g(le)+"\0\0"+(0,i.string32)(4+le*8),ge,ke,me,fe;for(ge=z.length-1;ge>=0&&!(z[ge][0]<=65535);--ge);const xe=ge+1;z[ge][0]<65535&&z[ge][1]===65535&&(z[ge][1]=65534);const pe=z[ge][1]<65535?1:0,we=xe+pe,Oe=I.OpenTypeFileBuilder.getSearchParams(we,2);let Te="",Ce="",Ae="",Se="",He="",Ve=0,Le,Ye,lt,Ee;for(ge=0,ke=xe;ge<ke;ge++){Le=z[ge],Ye=Le[0],lt=Le[1],Te+=g(Ye),Ce+=g(lt),Ee=Le[2];let de=!0;for(me=1,fe=Ee.length;me<fe;++me)if(Ee[me]!==Ee[me-1]+1){de=!1;break}if(de){const be=Ee[0];Ae+=g(be-Ye&65535),Se+=g(0)}else{const be=(we-ge)*2+Ve*2;for(Ve+=lt-Ye+1,Ae+=g(0),Se+=g(be),me=0,fe=Ee.length;me<fe;++me)He+=g(Ee[me])}}pe>0&&(Ce+="ÿÿ",Te+="ÿÿ",Ae+="\0",Se+="\0\0");const ut="\0\0"+g(2*we)+g(Oe.range)+g(Oe.entry)+g(Oe.rangeShift)+Ce+"\0\0"+Te+Ae+Se+He;let _e="",Ie="";if(le>1){for(ue+=`\0\0
`+(0,i.string32)(4+le*8+4+ut.length),_e="",ge=0,ke=z.length;ge<ke;ge++){Le=z[ge],Ye=Le[0],Ee=Le[2];let de=Ee[0];for(me=1,fe=Ee.length;me<fe;++me)Ee[me]!==Ee[me-1]+1&&(lt=Le[0]+me-1,_e+=(0,i.string32)(Ye)+(0,i.string32)(lt)+(0,i.string32)(de),Ye=lt+1,de=Ee[me]);_e+=(0,i.string32)(Ye)+(0,i.string32)(Le[1])+(0,i.string32)(de)}Ie="\0\f\0\0"+(0,i.string32)(_e.length+16)+"\0\0\0\0"+(0,i.string32)(_e.length/12)}return ue+"\0"+g(ut.length+4)+ut+Ie+_e}function T(X,re){re.pos=(re.start||0)+X.offset;const ae=re.getUint16();re.skip(60);const z=re.getUint16();if(ae<4&&z&768)return!1;const le=re.getUint16(),ue=re.getUint16();return le>ue||(re.skip(6),re.getUint16()===0)?!1:(X.data[8]=X.data[9]=0,!0)}function Q(X,re,ae){ae||(ae={unitsPerEm:0,yMax:0,yMin:0,ascent:0,descent:0});let z=0,le=0,ue=0,ge=0,ke=null,me=0,fe=-1;if(re){for(let Se in re)if(Se|=0,(ke>Se||!ke)&&(ke=Se),me<Se&&(me=Se),fe=(0,e.getUnicodeRangeFor)(Se,fe),fe<32)z|=1<<fe;else if(fe<64)le|=1<<fe-32;else if(fe<96)ue|=1<<fe-64;else if(fe<123)ge|=1<<fe-96;else throw new i.FormatError("Unicode ranges Bits > 123 are reserved for internal usage");me>65535&&(me=65535)}else ke=0,me=255;const xe=X.bbox||[0,0,0,0],pe=ae.unitsPerEm||1/(X.fontMatrix||i.FONT_IDENTITY_MATRIX)[0],we=X.ascentScaled?1:pe/E,Oe=ae.ascent||Math.round(we*(X.ascent||xe[3]));let Te=ae.descent||Math.round(we*(X.descent||xe[1]));Te>0&&X.descent>0&&xe[1]<0&&(Te=-Te);const Ce=ae.yMax||Oe,Ae=-ae.yMin||-Te;return"\0$ô\0\0\0»\0\0\0»\0\0ß\x001\0\0\0\0"+String.fromCharCode(X.fixedPitch?9:0)+"\0\0\0\0\0\0"+(0,i.string32)(z)+(0,i.string32)(le)+(0,i.string32)(ue)+(0,i.string32)(ge)+"*21*"+g(X.italicAngle?1:0)+g(ke||X.firstChar)+g(me||X.lastChar)+g(Oe)+g(Te)+"\0d"+g(Ce)+g(Ae)+"\0\0\0\0\0\0\0\0"+g(X.xHeight)+g(X.capHeight)+g(0)+g(ke||X.firstChar)+"\0"}function v(X){const re=Math.floor(X.italicAngle*65536);return"\0\0\0"+(0,i.string32)(re)+"\0\0\0\0"+(0,i.string32)(X.fixedPitch?1:0)+"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"}function $(X){return X.replaceAll(/[^\x21-\x7E]|[[\](){}<>/%]/g,"").slice(0,63)}function Z(X,re){re||(re=[[],[]]);const ae=[re[0][0]||"Original licence",re[0][1]||X,re[0][2]||"Unknown",re[0][3]||"uniqueID",re[0][4]||X,re[0][5]||"Version 0.11",re[0][6]||$(X),re[0][7]||"Unknown",re[0][8]||"Unknown",re[0][9]||"Unknown"],z=[];let le,ue,ge,ke,me;for(le=0,ue=ae.length;le<ue;le++){me=re[1][le]||ae[le];const Ae=[];for(ge=0,ke=me.length;ge<ke;ge++)Ae.push(g(me.charCodeAt(ge)));z.push(Ae.join(""))}const fe=[ae,z],xe=["\0","\0"],pe=["\0\0","\0"],we=["\0\0","	"],Oe=ae.length*xe.length;let Te="\0\0"+g(Oe)+g(Oe*12+6),Ce=0;for(le=0,ue=xe.length;le<ue;le++){const Ae=fe[le];for(ge=0,ke=Ae.length;ge<ke;ge++){me=Ae[ge];const Se=xe[le]+pe[le]+we[le]+g(ge)+g(me.length)+g(Ce);Te+=Se,Ce+=me.length}}return Te+=ae.join("")+z.join(""),Te}class te{constructor(re,ae,z){var fe;this.name=re,this.psName=null,this.mimetype=null,this.disableFontFace=!1,this.loadedName=z.loadedName,this.isType3Font=z.isType3Font,this.missingFile=!1,this.cssFontInfo=z.cssFontInfo,this._charsCache=Object.create(null),this._glyphCache=Object.create(null);let le=!!(z.flags&P.FontFlags.Serif);if(!le&&!z.isSimulatedFlags){const xe=re.replaceAll(/[,_]/g,"-").split("-")[0],pe=(0,K.getSerifFonts)();for(const we of xe.split("+"))if(pe[we]){le=!0;break}}this.isSerifFont=le,this.isSymbolicFont=!!(z.flags&P.FontFlags.Symbolic),this.isMonospace=!!(z.flags&P.FontFlags.FixedPitch);let{type:ue,subtype:ge}=z;this.type=ue,this.subtype=ge,this.systemFontInfo=z.systemFontInfo;const ke=re.match(/^InvalidPDFjsFont_(.*)_\d+$/);if(this.isInvalidPDFjsFont=!!ke,this.isInvalidPDFjsFont?this.fallbackName=ke[1]:this.isMonospace?this.fallbackName="monospace":this.isSerifFont?this.fallbackName="serif":this.fallbackName="sans-serif",(fe=this.systemFontInfo)!=null&&fe.guessFallback&&(this.systemFontInfo.guessFallback=!1,this.systemFontInfo.css+=`,${this.fallbackName}`),this.differences=z.differences,this.widths=z.widths,this.defaultWidth=z.defaultWidth,this.composite=z.composite,this.cMap=z.cMap,this.capHeight=z.capHeight/E,this.ascent=z.ascent/E,this.descent=z.descent/E,this.lineHeight=this.ascent-this.descent,this.fontMatrix=z.fontMatrix,this.bbox=z.bbox,this.defaultEncoding=z.defaultEncoding,this.toUnicode=z.toUnicode,this.toFontChar=[],z.type==="Type3"){for(let xe=0;xe<256;xe++)this.toFontChar[xe]=this.differences[xe]||z.defaultEncoding[xe];return}if(this.cidEncoding=z.cidEncoding||"",this.vertical=!!z.vertical,this.vertical&&(this.vmetrics=z.vmetrics,this.defaultVMetrics=z.defaultVMetrics),!ae||ae.isEmpty){ae&&(0,i.warn)('Font file is empty in "'+re+'" ('+this.loadedName+")"),this.fallbackToSystemFont(z);return}[ue,ge]=q(ae,z),(ue!==this.type||ge!==this.subtype)&&(0,i.info)(`Inconsistent font file Type/SubType, expected: ${this.type}/${this.subtype} but found: ${ue}/${ge}.`);let me;try{switch(ue){case"MMType1":(0,i.info)("MMType1 font ("+re+"), falling back to Type1.");case"Type1":case"CIDFontType0":this.mimetype="font/opentype";const xe=ge==="Type1C"||ge==="CIDFontType0C"?new C.CFFFont(ae,z):new f.Type1Font(re,ae,z);V(z),me=this.convert(re,xe,z);break;case"OpenType":case"TrueType":case"CIDFontType2":this.mimetype="font/opentype",me=this.checkAndRepair(re,ae,z),this.isOpenType&&(V(z),ue="OpenType");break;default:throw new i.FormatError(`Font ${ue} is not supported`)}}catch(xe){(0,i.warn)(xe),this.fallbackToSystemFont(z);return}H(z),this.data=me,this.type=ue,this.subtype=ge,this.fontMatrix=z.fontMatrix,this.widths=z.widths,this.defaultWidth=z.defaultWidth,this.toUnicode=z.toUnicode,this.seacMap=z.seacMap}get renderer(){const re=O.FontRendererFactory.create(this,P.SEAC_ANALYSIS_ENABLED);return(0,i.shadow)(this,"renderer",re)}exportData(re=!1){const ae=re?[...M,...b]:M,z=Object.create(null);let le,ue;for(le of ae)ue=this[le],ue!==void 0&&(z[le]=ue);return z}fallbackToSystemFont(re){this.missingFile=!0;const{name:ae,type:z}=this;let le=(0,P.normalizeFontName)(ae);const ue=(0,K.getStdFontMap)(),ge=(0,K.getNonStdFontMap)(),ke=!!ue[le],me=!!(ge[le]&&ue[ge[le]]);le=ue[le]||ge[le]||le;const xe=(0,d.getFontBasicMetrics)()[le];xe&&(isNaN(this.ascent)&&(this.ascent=xe.ascent/E),isNaN(this.descent)&&(this.descent=xe.descent/E),isNaN(this.capHeight)&&(this.capHeight=xe.capHeight/E)),this.bold=/bold/gi.test(le),this.italic=/oblique|italic/gi.test(le),this.black=/Black/g.test(ae);const pe=/Narrow/g.test(ae);if(this.remeasure=(!ke||pe)&&Object.keys(this.widths).length>0,(ke||me)&&z==="CIDFontType2"&&this.cidEncoding.startsWith("Identity-")){const we=re.cidToGidMap,Oe=[];if(J(Oe,(0,K.getGlyphMapForStandardFonts)()),/Arial-?Black/i.test(ae)?J(Oe,(0,K.getSupplementalGlyphMapForArialBlack)()):/Calibri/i.test(ae)&&J(Oe,(0,K.getSupplementalGlyphMapForCalibri)()),we){for(const Te in Oe){const Ce=Oe[Te];we[Ce]!==void 0&&(Oe[+Te]=we[Ce])}we.length!==this.toUnicode.length&&re.hasIncludedToUnicodeMap&&this.toUnicode instanceof j.IdentityToUnicodeMap&&this.toUnicode.forEach(function(Te,Ce){const Ae=Oe[Te];we[Ae]===void 0&&(Oe[+Te]=Ce)})}this.toUnicode instanceof j.IdentityToUnicodeMap||this.toUnicode.forEach(function(Te,Ce){Oe[+Te]=Ce}),this.toFontChar=Oe,this.toUnicode=new j.ToUnicodeMap(Oe)}else if(/Symbol/i.test(le))this.toFontChar=G(o.SymbolSetEncoding,(0,t.getGlyphsUnicode)(),this.differences);else if(/Dingbats/i.test(le))this.toFontChar=G(o.ZapfDingbatsEncoding,(0,t.getDingbatsGlyphsUnicode)(),this.differences);else if(ke){const we=G(this.defaultEncoding,(0,t.getGlyphsUnicode)(),this.differences);z==="CIDFontType2"&&!this.cidEncoding.startsWith("Identity-")&&!(this.toUnicode instanceof j.IdentityToUnicodeMap)&&this.toUnicode.forEach(function(Oe,Te){we[+Oe]=Te}),this.toFontChar=we}else{const we=(0,t.getGlyphsUnicode)(),Oe=[];this.toUnicode.forEach((Te,Ce)=>{if(!this.composite){const Ae=this.differences[Te]||this.defaultEncoding[Te],Se=(0,e.getUnicodeForGlyph)(Ae,we);Se!==-1&&(Ce=Se)}Oe[+Te]=Ce}),this.composite&&this.toUnicode instanceof j.IdentityToUnicodeMap&&/Tahoma|Verdana/i.test(ae)&&J(Oe,(0,K.getGlyphMapForStandardFonts)()),this.toFontChar=Oe}H(re),this.loadedName=le.split("-")[0]}checkAndRepair(re,ae,z){var ht,kt,Dt;const le=["OS/2","cmap","head","hhea","hmtx","maxp","name","post","loca","glyf","fpgm","prep","cvt ","CFF "];function ue(ze,Ge){const et=Object.create(null);et["OS/2"]=null,et.cmap=null,et.head=null,et.hhea=null,et.hmtx=null,et.maxp=null,et.name=null,et.post=null;for(let ot=0;ot<Ge;ot++){const dt=ge(ze);le.includes(dt.tag)&&dt.length!==0&&(et[dt.tag]=dt)}return et}function ge(ze){const Ge=ze.getString(4),et=ze.getInt32()>>>0,ot=ze.getInt32()>>>0,dt=ze.getInt32()>>>0,bt=ze.pos;ze.pos=ze.start||0,ze.skip(ot);const At=ze.getBytes(dt);return ze.pos=bt,Ge==="head"&&(At[8]=At[9]=At[10]=At[11]=0,At[17]|=32),{tag:Ge,checksum:et,length:dt,offset:ot,data:At}}function ke(ze){return{version:ze.getString(4),numTables:ze.getUint16(),searchRange:ze.getUint16(),entrySelector:ze.getUint16(),rangeShift:ze.getUint16()}}function me(ze){const Ge=ze.getString(4);(0,i.assert)(Ge==="ttcf","Must be a TrueType Collection font.");const et=ze.getUint16(),ot=ze.getUint16(),dt=ze.getInt32()>>>0,bt=[];for(let st=0;st<dt;st++)bt.push(ze.getInt32()>>>0);const At={ttcTag:Ge,majorVersion:et,minorVersion:ot,numFonts:dt,offsetTable:bt};switch(et){case 1:return At;case 2:return At.dsigTag=ze.getInt32()>>>0,At.dsigLength=ze.getInt32()>>>0,At.dsigOffset=ze.getInt32()>>>0,At}throw new i.FormatError(`Invalid TrueType Collection majorVersion: ${et}.`)}function fe(ze,Ge){var At;const{numFonts:et,offsetTable:ot}=me(ze),dt=Ge.split("+");let bt;for(let st=0;st<et;st++){ze.pos=(ze.start||0)+ot[st];const xt=ke(ze),wt=ue(ze,xt.numTables);if(!wt.name)throw new i.FormatError('TrueType Collection font must contain a "name" table.');const[Pt]=Ae(wt.name);for(let qt=0,Bt=Pt.length;qt<Bt;qt++)for(let Ut=0,St=Pt[qt].length;Ut<St;Ut++){const Ot=(At=Pt[qt][Ut])==null?void 0:At.replaceAll(/\s/g,"");if(Ot){if(Ot===Ge)return{header:xt,tables:wt};if(!(dt.length<2))for(const ft of dt)Ot===ft&&(bt={name:ft,header:xt,tables:wt})}}}if(bt)return(0,i.warn)(`TrueType Collection does not contain "${Ge}" font, falling back to "${bt.name}" font instead.`),{header:bt.header,tables:bt.tables};throw new i.FormatError(`TrueType Collection does not contain "${Ge}" font.`)}function xe(ze,Ge,et,ot){if(!ze)return(0,i.warn)("No cmap table available."),{platformId:-1,encodingId:-1,mappings:[],hasShortCmap:!1};let dt,bt=(Ge.start||0)+ze.offset;Ge.pos=bt,Ge.skip(2);const At=Ge.getUint16();let st,xt=!1;for(let St=0;St<At;St++){const Ot=Ge.getUint16(),ft=Ge.getUint16(),Ct=Ge.getInt32()>>>0;let Ht=!1;if(!((st==null?void 0:st.platformId)===Ot&&(st==null?void 0:st.encodingId)===ft)){if(Ot===0&&(ft===0||ft===1||ft===3))Ht=!0;else if(Ot===1&&ft===0)Ht=!0;else if(Ot===3&&ft===1&&(ot||!st))Ht=!0,et||(xt=!0);else if(et&&Ot===3&&ft===0){Ht=!0;let Xt=!0;if(St<At-1){const Ft=Ge.peekBytes(2);h(Ft[0],Ft[1])<Ot&&(Xt=!1)}Xt&&(xt=!0)}if(Ht&&(st={platformId:Ot,encodingId:ft,offset:Ct}),xt)break}}if(st&&(Ge.pos=bt+st.offset),!st||Ge.peekByte()===-1)return(0,i.warn)("Could not find a preferred cmap table."),{platformId:-1,encodingId:-1,mappings:[],hasShortCmap:!1};const wt=Ge.getUint16();let Pt=!1;const qt=[];let Bt,Ut;if(wt===0){for(Ge.skip(4),Bt=0;Bt<256;Bt++){const St=Ge.getByte();St&&qt.push({charCode:Bt,glyphId:St})}Pt=!0}else if(wt===2){Ge.skip(4);const St=[];let Ot=0;for(let Ct=0;Ct<256;Ct++){const Ht=Ge.getUint16()>>3;St.push(Ht),Ot=Math.max(Ht,Ot)}const ft=[];for(let Ct=0;Ct<=Ot;Ct++)ft.push({firstCode:Ge.getUint16(),entryCount:Ge.getUint16(),idDelta:N(Ge.getByte(),Ge.getByte()),idRangePos:Ge.pos+Ge.getUint16()});for(let Ct=0;Ct<256;Ct++)if(St[Ct]===0)Ge.pos=ft[0].idRangePos+2*Ct,Ut=Ge.getUint16(),qt.push({charCode:Ct,glyphId:Ut});else{const Ht=ft[St[Ct]];for(Bt=0;Bt<Ht.entryCount;Bt++){const Xt=(Ct<<8)+Bt+Ht.firstCode;Ge.pos=Ht.idRangePos+2*Bt,Ut=Ge.getUint16(),Ut!==0&&(Ut=(Ut+Ht.idDelta)%65536),qt.push({charCode:Xt,glyphId:Ut})}}}else if(wt===4){Ge.skip(4);const St=Ge.getUint16()>>1;Ge.skip(6);const Ot=[];let ft;for(ft=0;ft<St;ft++)Ot.push({end:Ge.getUint16()});for(Ge.skip(2),ft=0;ft<St;ft++)Ot[ft].start=Ge.getUint16();for(ft=0;ft<St;ft++)Ot[ft].delta=Ge.getUint16();let Ct=0,Ht;for(ft=0;ft<St;ft++){dt=Ot[ft];const Ft=Ge.getUint16();if(!Ft){dt.offsetIndex=-1;continue}Ht=(Ft>>1)-(St-ft),dt.offsetIndex=Ht,Ct=Math.max(Ct,Ht+dt.end-dt.start+1)}const Xt=[];for(Bt=0;Bt<Ct;Bt++)Xt.push(Ge.getUint16());for(ft=0;ft<St;ft++){dt=Ot[ft],bt=dt.start;const Ft=dt.end,Vt=dt.delta;for(Ht=dt.offsetIndex,Bt=bt;Bt<=Ft;Bt++)Bt!==65535&&(Ut=Ht<0?Bt:Xt[Ht+Bt-bt],Ut=Ut+Vt&65535,qt.push({charCode:Bt,glyphId:Ut}))}}else if(wt===6){Ge.skip(4);const St=Ge.getUint16(),Ot=Ge.getUint16();for(Bt=0;Bt<Ot;Bt++){Ut=Ge.getUint16();const ft=St+Bt;qt.push({charCode:ft,glyphId:Ut})}}else if(wt===12){Ge.skip(10);const St=Ge.getInt32()>>>0;for(Bt=0;Bt<St;Bt++){const Ot=Ge.getInt32()>>>0,ft=Ge.getInt32()>>>0;let Ct=Ge.getInt32()>>>0;for(let Ht=Ot;Ht<=ft;Ht++)qt.push({charCode:Ht,glyphId:Ct++})}}else return(0,i.warn)("cmap table has unsupported format: "+wt),{platformId:-1,encodingId:-1,mappings:[],hasShortCmap:!1};qt.sort(function(St,Ot){return St.charCode-Ot.charCode});for(let St=1;St<qt.length;St++)qt[St-1].charCode===qt[St].charCode&&(qt.splice(St,1),St--);return{platformId:st.platformId,encodingId:st.encodingId,mappings:qt,hasShortCmap:Pt}}function pe(ze,Ge,et,ot,dt,bt){if(!Ge){et&&(et.data=null);return}ze.pos=(ze.start||0)+Ge.offset,ze.pos+=4,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2,ze.pos+=2;const At=ze.getUint16();ze.pos+=8,ze.pos+=2;let st=ze.getUint16();At!==0&&(h(ot.data[44],ot.data[45])&2||(Ge.data[22]=0,Ge.data[23]=0)),st>dt&&((0,i.info)(`The numOfMetrics (${st}) should not be greater than the numGlyphs (${dt}).`),st=dt,Ge.data[34]=(st&65280)>>8,Ge.data[35]=st&255);const wt=dt-st-(et.length-st*4>>1);if(wt>0){const Pt=new Uint8Array(et.length+wt*2);Pt.set(et.data),bt&&(Pt[et.length]=et.data[2],Pt[et.length+1]=et.data[3]),et.data=Pt}}function we(ze,Ge,et,ot,dt,bt){const At={length:0,sizeOfInstructions:0};if(Ge<0||Ge>=ze.length||et>ze.length||et-Ge<=12)return At;const st=ze.subarray(Ge,et),xt=N(st[2],st[3]),wt=N(st[4],st[5]),Pt=N(st[6],st[7]),qt=N(st[8],st[9]);xt>Pt&&(F(st,2,Pt),F(st,6,xt)),wt>qt&&(F(st,4,qt),F(st,8,wt));const Bt=N(st[0],st[1]);if(Bt<0)return Bt<-1||(ot.set(st,dt),At.length=st.length),At;let Ut,St=10,Ot=0;for(Ut=0;Ut<Bt;Ut++)Ot=(st[St]<<8|st[St+1])+1,St+=2;const ft=St,Ct=st[St]<<8|st[St+1];At.sizeOfInstructions=Ct,St+=2+Ct;const Ht=St;let Xt=0;for(Ut=0;Ut<Ot;Ut++){const Vt=st[St++];Vt&192&&(st[St-1]=Vt&63);let Kt=2;Vt&2?Kt=1:Vt&16&&(Kt=0);let Lt=2;Vt&4?Lt=1:Vt&32&&(Lt=0);const _t=Kt+Lt;if(Xt+=_t,Vt&8){const oi=st[St++];oi===0&&(st[St-1]^=8),Ut+=oi,Xt+=oi*_t}}if(Xt===0)return At;let Ft=St+Xt;return Ft>st.length?At:!bt&&Ct>0?(ot.set(st.subarray(0,ft),dt),ot.set([0,0],dt+ft),ot.set(st.subarray(Ht,Ft),dt+ft+2),Ft-=Ct,st.length-Ft>3&&(Ft=Ft+3&-4),At.length=Ft,At):st.length-Ft>3?(Ft=Ft+3&-4,ot.set(st.subarray(0,Ft),dt),At.length=Ft,At):(ot.set(st,dt),At.length=st.length,At)}function Oe(ze,Ge,et){const ot=ze.data,dt=U(ot[0],ot[1],ot[2],ot[3]);dt>>16!==1&&((0,i.info)("Attempting to fix invalid version in head table: "+dt),ot[0]=0,ot[1]=1,ot[2]=0,ot[3]=0);const bt=h(ot[50],ot[51]);if(bt<0||bt>1){(0,i.info)("Attempting to fix invalid indexToLocFormat in head table: "+bt);const At=Ge+1;if(et===At<<1)ot[50]=0,ot[51]=0;else if(et===At<<2)ot[50]=0,ot[51]=1;else throw new i.FormatError("Could not fix indexToLocFormat: "+bt)}}function Te(ze,Ge,et,ot,dt,bt,At){let st,xt,wt;ot?(st=4,xt=function(Kt,Lt){return Kt[Lt]<<24|Kt[Lt+1]<<16|Kt[Lt+2]<<8|Kt[Lt+3]},wt=function(Kt,Lt,_t){Kt[Lt]=_t>>>24&255,Kt[Lt+1]=_t>>16&255,Kt[Lt+2]=_t>>8&255,Kt[Lt+3]=_t&255}):(st=2,xt=function(Kt,Lt){return Kt[Lt]<<9|Kt[Lt+1]<<1},wt=function(Kt,Lt,_t){Kt[Lt]=_t>>9&255,Kt[Lt+1]=_t>>1&255});const Pt=bt?et+1:et,qt=st*(1+Pt),Bt=new Uint8Array(qt);Bt.set(ze.data.subarray(0,qt)),ze.data=Bt;const Ut=Ge.data,St=Ut.length,Ot=new Uint8Array(St);let ft,Ct;const Ht=[];for(ft=0,Ct=0;ft<et+1;ft++,Ct+=st){let Vt=xt(Bt,Ct);Vt>St&&(Vt=St),Ht.push({index:ft,offset:Vt,endOffset:0})}for(Ht.sort((Vt,Kt)=>Vt.offset-Kt.offset),ft=0;ft<et;ft++)Ht[ft].endOffset=Ht[ft+1].offset;for(Ht.sort((Vt,Kt)=>Vt.index-Kt.index),ft=0;ft<et;ft++){const{offset:Vt,endOffset:Kt}=Ht[ft];if(Vt!==0||Kt!==0)break;const Lt=Ht[ft+1].offset;if(Lt!==0){Ht[ft].endOffset=Lt;break}}const Xt=Object.create(null);let Ft=0;for(wt(Bt,0,Ft),ft=0,Ct=st;ft<et;ft++,Ct+=st){const Vt=we(Ut,Ht[ft].offset,Ht[ft].endOffset,Ot,Ft,dt),Kt=Vt.length;Kt===0&&(Xt[ft]=!0),Vt.sizeOfInstructions>At&&(At=Vt.sizeOfInstructions),Ft+=Kt,wt(Bt,Ct,Ft)}if(Ft===0){const Vt=new Uint8Array([0,1,0,0,0,0,0,0,0,0,0,0,0,0,49,0]);for(ft=0,Ct=st;ft<Pt;ft++,Ct+=st)wt(Bt,Ct,Vt.length);Ge.data=Vt}else if(bt){const Vt=xt(Bt,st);Ot.length>Vt+Ft?Ge.data=Ot.subarray(0,Vt+Ft):(Ge.data=new Uint8Array(Vt+Ft),Ge.data.set(Ot.subarray(0,Ft))),Ge.data.set(Ot.subarray(0,Vt),Ft),wt(ze.data,Bt.length-st,Ft+Vt)}else Ge.data=Ot.subarray(0,Ft);return{missingGlyphs:Xt,maxSizeOfInstructions:At}}function Ce(ze,Ge,et){const ot=(ae.start||0)+ze.offset;ae.pos=ot;const dt=ze.length,bt=ot+dt,At=ae.getInt32();ae.skip(28);let st,xt=!0,wt;switch(At){case 65536:st=P.MacStandardGlyphOrdering;break;case 131072:const Pt=ae.getUint16();if(Pt!==et){xt=!1;break}const qt=[];for(wt=0;wt<Pt;++wt){const St=ae.getUint16();if(St>=32768){xt=!1;break}qt.push(St)}if(!xt)break;const Bt=[],Ut=[];for(;ae.pos<bt;){const St=ae.getByte();for(Ut.length=St,wt=0;wt<St;++wt)Ut[wt]=String.fromCharCode(ae.getByte());Bt.push(Ut.join(""))}for(st=[],wt=0;wt<Pt;++wt){const St=qt[wt];if(St<258){st.push(P.MacStandardGlyphOrdering[St]);continue}st.push(Bt[St-258])}break;case 196608:break;default:(0,i.warn)("Unknown/unsupported post table version "+At),xt=!1,Ge.defaultEncoding&&(st=Ge.defaultEncoding);break}return Ge.glyphNames=st,xt}function Ae(ze){const Ge=(ae.start||0)+ze.offset;ae.pos=Ge;const et=[[],[]],ot=[],dt=ze.length,bt=Ge+dt;if(ae.getUint16()!==0||dt<6)return[et,ot];const xt=ae.getUint16(),wt=ae.getUint16(),Pt=12;let qt,Bt;for(qt=0;qt<xt&&ae.pos+Pt<=bt;qt++){const Ut={platform:ae.getUint16(),encoding:ae.getUint16(),language:ae.getUint16(),name:ae.getUint16(),length:ae.getUint16(),offset:ae.getUint16()};(W(Ut)||ce(Ut))&&ot.push(Ut)}for(qt=0,Bt=ot.length;qt<Bt;qt++){const Ut=ot[qt];if(Ut.length<=0)continue;const St=Ge+wt+Ut.offset;if(St+Ut.length>bt)continue;ae.pos=St;const Ot=Ut.name;if(Ut.encoding){let ft="";for(let Ct=0,Ht=Ut.length;Ct<Ht;Ct+=2)ft+=String.fromCharCode(ae.getUint16());et[1][Ot]=ft}else et[0][Ot]=ae.getString(Ut.length)}return[et,ot]}const Se=[0,0,0,0,0,0,0,0,-2,-2,-2,-2,0,0,-2,-5,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,-1,-1,-1,-1,1,-1,-999,0,1,0,-1,-2,0,-1,-2,-1,-1,0,-1,-1,0,0,-999,-999,-1,-1,-1,-1,-2,-999,-2,-2,-999,0,-2,-2,0,0,-2,0,-2,0,0,0,-2,-1,-1,1,1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,-1,-1,0,-999,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-2,-999,-999,-999,-999,-999,-1,-1,-2,-2,0,0,0,0,-1,-1,-999,-2,-2,0,0,-1,-2,-2,0,0,0,-1,-1,-1,-2];function He(ze,Ge){let et=ze.data,ot=0,dt,bt,At,st,xt,wt=0,Pt=0;const qt=[],Bt=[],Ut=[];let St=Ge.tooComplexToFollowFunctions,Ot=!1,ft=0,Ct=0;for(let Xt=et.length;ot<Xt;){const Ft=et[ot++];if(Ft===64)if(bt=et[ot++],Ot||Ct)ot+=bt;else for(dt=0;dt<bt;dt++)qt.push(et[ot++]);else if(Ft===65)if(bt=et[ot++],Ot||Ct)ot+=bt*2;else for(dt=0;dt<bt;dt++)At=et[ot++],qt.push(At<<8|et[ot++]);else if((Ft&248)===176)if(bt=Ft-176+1,Ot||Ct)ot+=bt;else for(dt=0;dt<bt;dt++)qt.push(et[ot++]);else if((Ft&248)===184)if(bt=Ft-184+1,Ot||Ct)ot+=bt*2;else for(dt=0;dt<bt;dt++)At=et[ot++],qt.push(At<<8|et[ot++]);else if(Ft===43&&!St){if(!Ot&&!Ct){if(st=qt.at(-1),isNaN(st))(0,i.info)("TT: CALL empty stack (or invalid entry).");else if(Ge.functionsUsed[st]=!0,st in Ge.functionsStackDeltas){const Vt=qt.length+Ge.functionsStackDeltas[st];if(Vt<0){(0,i.warn)("TT: CALL invalid functions stack delta."),Ge.hintsValid=!1;return}qt.length=Vt}else if(st in Ge.functionsDefined&&!Ut.includes(st)){if(Bt.push({data:et,i:ot,stackTop:qt.length-1}),Ut.push(st),xt=Ge.functionsDefined[st],!xt){(0,i.warn)("TT: CALL non-existent function"),Ge.hintsValid=!1;return}et=xt.data,ot=xt.i}}}else if(Ft===44&&!St)(Ot||Ct)&&((0,i.warn)("TT: nested FDEFs not allowed"),St=!0),Ot=!0,Pt=ot,st=qt.pop(),Ge.functionsDefined[st]={data:et,i:ot};else if(Ft===45)if(Ot)Ot=!1,wt=ot;else{if(xt=Bt.pop(),!xt){(0,i.warn)("TT: ENDF bad stack"),Ge.hintsValid=!1;return}st=Ut.pop(),et=xt.data,ot=xt.i,Ge.functionsStackDeltas[st]=qt.length-xt.stackTop}else if(Ft===137)(Ot||Ct)&&((0,i.warn)("TT: nested IDEFs not allowed"),St=!0),Ot=!0,Pt=ot;else if(Ft===88)++ft;else if(Ft===27)Ct=ft;else if(Ft===89)Ct===ft&&(Ct=0),--ft;else if(Ft===28&&!Ot&&!Ct){const Vt=qt.at(-1);Vt>0&&(ot+=Vt-1)}if(!Ot&&!Ct){let Vt=0;for(Ft<=142?Vt=Se[Ft]:Ft>=192&&Ft<=223?Vt=-1:Ft>=224&&(Vt=-2),Ft>=113&&Ft<=117&&(bt=qt.pop(),isNaN(bt)||(Vt=-bt*2));Vt<0&&qt.length>0;)qt.pop(),Vt++;for(;Vt>0;)qt.push(NaN),Vt--}}Ge.tooComplexToFollowFunctions=St;const Ht=[et];ot>et.length&&Ht.push(new Uint8Array(ot-et.length)),Pt>wt&&((0,i.warn)("TT: complementing a missing function tail"),Ht.push(new Uint8Array([34,45]))),Le(ze,Ht)}function Ve(ze,Ge){if(!ze.tooComplexToFollowFunctions){if(ze.functionsDefined.length>Ge){(0,i.warn)("TT: more functions defined than expected"),ze.hintsValid=!1;return}for(let et=0,ot=ze.functionsUsed.length;et<ot;et++){if(et>Ge){(0,i.warn)("TT: invalid function id: "+et),ze.hintsValid=!1;return}if(ze.functionsUsed[et]&&!ze.functionsDefined[et]){(0,i.warn)("TT: undefined function: "+et),ze.hintsValid=!1;return}}}}function Le(ze,Ge){if(Ge.length>1){let et=0,ot,dt;for(ot=0,dt=Ge.length;ot<dt;ot++)et+=Ge[ot].length;et=et+3&-4;const bt=new Uint8Array(et);let At=0;for(ot=0,dt=Ge.length;ot<dt;ot++)bt.set(Ge[ot],At),At+=Ge[ot].length;ze.data=bt,ze.length=et}}function Ye(ze,Ge,et,ot){const dt={functionsDefined:[],functionsUsed:[],functionsStackDeltas:[],tooComplexToFollowFunctions:!1,hintsValid:!0};if(ze&&He(ze,dt),Ge&&He(Ge,dt),ze&&Ve(dt,ot),et&&et.length&1){const bt=new Uint8Array(et.length+1);bt.set(et.data),et.data=bt}return dt.hintsValid}ae=new y.Stream(new Uint8Array(ae.getBytes()));let lt,Ee;if(r(ae)){const ze=fe(ae,this.name);lt=ze.header,Ee=ze.tables}else lt=ke(ae),Ee=ue(ae,lt.numTables);let ut,_e;const Ie=!Ee["CFF "];if(Ie){if(!Ee.loca)throw new i.FormatError('Required "loca" table is not found');Ee.glyf||((0,i.warn)('Required "glyf" table is not found -- trying to recover.'),Ee.glyf={tag:"glyf",data:new Uint8Array(0)}),this.isOpenType=!1}else{const ze=z.composite&&(((ht=z.cidToGidMap)==null?void 0:ht.length)>0||!(z.cMap instanceof n.IdentityCMap));if(lt.version==="OTTO"&&!ze||!Ee.head||!Ee.hhea||!Ee.maxp||!Ee.post)return _e=new y.Stream(Ee["CFF "].data),ut=new C.CFFFont(_e,z),V(z),this.convert(re,ut,z);delete Ee.glyf,delete Ee.loca,delete Ee.fpgm,delete Ee.prep,delete Ee["cvt "],this.isOpenType=!0}if(!Ee.maxp)throw new i.FormatError('Required "maxp" table is not found');ae.pos=(ae.start||0)+Ee.maxp.offset;const de=ae.getInt32(),be=ae.getUint16();if(((kt=z.scaleFactors)==null?void 0:kt.length)===be&&Ie){const{scaleFactors:ze}=z,Ge=h(Ee.head.data[50],Ee.head.data[51]),et=new A.GlyfTable({glyfTable:Ee.glyf.data,isGlyphLocationsLong:Ge,locaTable:Ee.loca.data,numGlyphs:be});et.scale(ze);const{glyf:ot,loca:dt,isLocationLong:bt}=et.write();Ee.glyf.data=ot,Ee.loca.data=dt,bt!==!!Ge&&(Ee.head.data[50]=0,Ee.head.data[51]=bt?1:0);const At=Ee.hmtx.data;for(let st=0;st<be;st++){const xt=4*st,wt=Math.round(ze[st]*h(At[xt],At[xt+1]));At[xt]=wt>>8&255,At[xt+1]=wt&255;const Pt=Math.round(ze[st]*N(At[xt+2],At[xt+3]));F(At,xt+2,Pt)}}let Be=be+1,Pe=!0;Be>65535&&(Pe=!1,Be=be,(0,i.warn)("Not enough space in glyfs to duplicate first glyph."));let je=0,Je=0;de>=65536&&Ee.maxp.length>=22&&(ae.pos+=8,ae.getUint16()>2&&(Ee.maxp.data[14]=0,Ee.maxp.data[15]=2),ae.pos+=4,je=ae.getUint16(),ae.pos+=4,Je=ae.getUint16()),Ee.maxp.data[4]=Be>>8,Ee.maxp.data[5]=Be&255;const $e=Ye(Ee.fpgm,Ee.prep,Ee["cvt "],je);if($e||(delete Ee.fpgm,delete Ee.prep,delete Ee["cvt "]),pe(ae,Ee.hhea,Ee.hmtx,Ee.head,Be,Pe),!Ee.head)throw new i.FormatError('Required "head" table is not found');Oe(Ee.head,be,Ie?Ee.loca.length:0);let ve=Object.create(null);if(Ie){const ze=h(Ee.head.data[50],Ee.head.data[51]),Ge=Te(Ee.loca,Ee.glyf,be,ze,$e,Pe,Je);ve=Ge.missingGlyphs,de>=65536&&Ee.maxp.length>=22&&(Ee.maxp.data[26]=Ge.maxSizeOfInstructions>>8,Ee.maxp.data[27]=Ge.maxSizeOfInstructions&255)}if(!Ee.hhea)throw new i.FormatError('Required "hhea" table is not found');Ee.hhea.data[10]===0&&Ee.hhea.data[11]===0&&(Ee.hhea.data[10]=255,Ee.hhea.data[11]=255);const We={unitsPerEm:h(Ee.head.data[18],Ee.head.data[19]),yMax:N(Ee.head.data[42],Ee.head.data[43]),yMin:N(Ee.head.data[38],Ee.head.data[39]),ascent:N(Ee.hhea.data[4],Ee.hhea.data[5]),descent:N(Ee.hhea.data[6],Ee.hhea.data[7]),lineGap:N(Ee.hhea.data[8],Ee.hhea.data[9])};this.ascent=We.ascent/We.unitsPerEm,this.descent=We.descent/We.unitsPerEm,this.lineGap=We.lineGap/We.unitsPerEm,(Dt=this.cssFontInfo)!=null&&Dt.lineHeight?(this.lineHeight=this.cssFontInfo.metrics.lineHeight,this.lineGap=this.cssFontInfo.metrics.lineGap):this.lineHeight=this.ascent-this.descent+this.lineGap,Ee.post&&Ce(Ee.post,z,be),Ee.post={tag:"post",data:v(z)};const tt=[];function at(ze){return!ve[ze]}if(z.composite){const ze=z.cidToGidMap||[],Ge=ze.length===0;z.cMap.forEach(function(et,ot){if(typeof ot=="string"&&(ot=_(et,ot,!0)),ot>65535)throw new i.FormatError("Max size of CID is 65,535");let dt=-1;Ge?dt=ot:ze[ot]!==void 0&&(dt=ze[ot]),dt>=0&&dt<be&&at(dt)&&(tt[et]=dt)})}else{const ze=xe(Ee.cmap,ae,this.isSymbolicFont,z.hasEncoding),Ge=ze.platformId,et=ze.encodingId,ot=ze.mappings;let dt=[],bt=!1;if(z.hasEncoding&&(z.baseEncodingName==="MacRomanEncoding"||z.baseEncodingName==="WinAnsiEncoding")&&(dt=(0,o.getEncoding)(z.baseEncodingName)),z.hasEncoding&&!this.isSymbolicFont&&(Ge===3&&et===1||Ge===1&&et===0)){const At=(0,t.getGlyphsUnicode)();for(let st=0;st<256;st++){let xt;if(this.differences[st]!==void 0?xt=this.differences[st]:dt.length&&dt[st]!==""?xt=dt[st]:xt=o.StandardEncoding[st],!xt)continue;const wt=(0,P.recoverGlyphName)(xt,At);let Pt;if(Ge===3&&et===1?Pt=At[wt]:Ge===1&&et===0&&(Pt=o.MacRomanEncoding.indexOf(wt)),Pt===void 0){if(!z.glyphNames&&z.hasIncludedToUnicodeMap&&!(this.toUnicode instanceof j.IdentityToUnicodeMap)){const qt=this.toUnicode.get(st);qt&&(Pt=qt.codePointAt(0))}if(Pt===void 0)continue}for(const qt of ot)if(qt.charCode===Pt){tt[st]=qt.glyphId;break}}}else if(Ge===0){for(const At of ot)tt[At.charCode]=At.glyphId;bt=!0}else for(const At of ot){let st=At.charCode;Ge===3&&st>=61440&&st<=61695&&(st&=255),tt[st]=At.glyphId}if(z.glyphNames&&(dt.length||this.differences.length))for(let At=0;At<256;++At){if(!bt&&tt[At]!==void 0)continue;const st=this.differences[At]||dt[At];if(!st)continue;const xt=z.glyphNames.indexOf(st);xt>0&&at(xt)&&(tt[At]=xt)}}tt.length===0&&(tt[0]=0);let ct=Be-1;if(Pe||(ct=0),!z.cssFontInfo){const ze=ie(tt,at,ct,this.toUnicode);this.toFontChar=ze.toFontChar,Ee.cmap={tag:"cmap",data:oe(ze.charCodeToGlyphId,ze.toUnicodeExtraMap,Be)},(!Ee["OS/2"]||!T(Ee["OS/2"],ae))&&(Ee["OS/2"]={tag:"OS/2",data:Q(z,ze.charCodeToGlyphId,We)})}if(!Ie)try{_e=new y.Stream(Ee["CFF "].data),ut=new w.CFFParser(_e,z,P.SEAC_ANALYSIS_ENABLED).parse(),ut.duplicateFirstGlyph();const Ge=new w.CFFCompiler(ut);Ee["CFF "].data=Ge.compile()}catch(ze){(0,i.warn)("Failed to compile font "+z.loadedName)}if(!Ee.name)Ee.name={tag:"name",data:Z(this.name)};else{const[ze,Ge]=Ae(Ee.name);Ee.name.data=Z(re,ze),this.psName=ze[0][6]||null,z.composite||l(z,this.isSymbolicFont,Ge)}const gt=new I.OpenTypeFileBuilder(lt.version);for(const ze in Ee)gt.addTable(ze,Ee[ze].data);return gt.toArray()}convert(re,ae,z){z.fixedPitch=!1,z.builtInEncoding&&x(z,z.builtInEncoding);let le=1;ae instanceof C.CFFFont&&(le=ae.numGlyphs-1);const ue=ae.getGlyphMapping(z);let ge=null,ke=ue,me=null;z.cssFontInfo||(ge=ie(ue,ae.hasGlyphId.bind(ae),le,this.toUnicode),this.toFontChar=ge.toFontChar,ke=ge.charCodeToGlyphId,me=ge.toUnicodeExtraMap);const fe=ae.numGlyphs;function xe(Ce,Ae){let Se=null;for(const He in Ce)Ae===Ce[He]&&(Se||(Se=[])).push(He|0);return Se}function pe(Ce,Ae){for(const Se in Ce)if(Ae===Ce[Se])return Se|0;return ge.charCodeToGlyphId[ge.nextAvailableFontCharCode]=Ae,ge.nextAvailableFontCharCode++}const we=ae.seacs;if(ge&&P.SEAC_ANALYSIS_ENABLED&&(we!=null&&we.length)){const Ce=z.fontMatrix||i.FONT_IDENTITY_MATRIX,Ae=ae.getCharset(),Se=Object.create(null);for(let He in we){He|=0;const Ve=we[He],Le=o.StandardEncoding[Ve[2]],Ye=o.StandardEncoding[Ve[3]],lt=Ae.indexOf(Le),Ee=Ae.indexOf(Ye);if(lt<0||Ee<0)continue;const ut={x:Ve[0]*Ce[0]+Ve[1]*Ce[2]+Ce[4],y:Ve[0]*Ce[1]+Ve[1]*Ce[3]+Ce[5]},_e=xe(ue,He);if(_e)for(const Ie of _e){const de=ge.charCodeToGlyphId,be=pe(de,lt),Be=pe(de,Ee);Se[Ie]={baseFontCharCode:be,accentFontCharCode:Be,accentOffset:ut}}}z.seacMap=Se}const Oe=1/(z.fontMatrix||i.FONT_IDENTITY_MATRIX)[0],Te=new I.OpenTypeFileBuilder("OTTO");return Te.addTable("CFF ",ae.data),Te.addTable("OS/2",Q(z,ke)),Te.addTable("cmap",oe(ke,me,fe)),Te.addTable("head","\0\0\0\0\0\0\0\0\0\0_<õ\0\0"+S(Oe)+"\0\0\0\0\v~'\0\0\0\0\v~'\0\0"+S(z.descent)+"ÿ"+S(z.ascent)+g(z.italicAngle?2:0)+"\0\0\0\0\0\0\0"),Te.addTable("hhea","\0\0\0"+S(z.ascent)+S(z.descent)+"\0\0ÿÿ\0\0\0\0\0\0"+S(z.capHeight)+S(Math.tan(z.italicAngle)*z.xHeight)+"\0\0\0\0\0\0\0\0\0\0\0\0"+g(fe)),Te.addTable("hmtx",function(){const Ae=ae.charstrings,Se=ae.cff?ae.cff.widths:null;let He="\0\0\0\0";for(let Ve=1,Le=fe;Ve<Le;Ve++){let Ye=0;if(Ae){const lt=Ae[Ve-1];Ye="width"in lt?lt.width:0}else Se&&(Ye=Math.ceil(Se[Ve]||0));He+=g(Ye)+g(0)}return He}()),Te.addTable("maxp","\0\0P\0"+g(fe)),Te.addTable("name",Z(re)),Te.addTable("post",v(z)),Te.toArray()}get spaceWidth(){const re=["space","minus","one","i","I"];let ae;for(const z of re){if(z in this.widths){ae=this.widths[z];break}const ue=(0,t.getGlyphsUnicode)()[z];let ge=0;if(this.composite&&this.cMap.contains(ue)&&(ge=this.cMap.lookup(ue),typeof ge=="string"&&(ge=_(ue,ge))),!ge&&this.toUnicode&&(ge=this.toUnicode.charCodeOf(ue)),ge<=0&&(ge=ue),ae=this.widths[ge],ae)break}return(0,i.shadow)(this,"spaceWidth",ae||this.defaultWidth)}_charToGlyph(re,ae=!1){var Oe,Te,Ce;let z=this._glyphCache[re];if((z==null?void 0:z.isSpace)===ae)return z;let le,ue,ge,ke=re;(Oe=this.cMap)!=null&&Oe.contains(re)&&(ke=this.cMap.lookup(re),typeof ke=="string"&&(ke=_(re,ke))),ue=this.widths[ke],typeof ue!="number"&&(ue=this.defaultWidth);const me=(Te=this.vmetrics)==null?void 0:Te[ke];let fe=this.toUnicode.get(re)||re;typeof fe=="number"&&(fe=String.fromCharCode(fe));let xe=this.toFontChar[re]!==void 0;if(le=this.toFontChar[re]||re,this.missingFile){const Ae=this.differences[re]||this.defaultEncoding[re];(Ae===".notdef"||Ae==="")&&this.type==="Type1"&&(le=32),le=(0,e.mapSpecialUnicodeValues)(le)}this.isType3Font&&(ge=le);let pe=null;if((Ce=this.seacMap)!=null&&Ce[re]){xe=!0;const Ae=this.seacMap[re];le=Ae.baseFontCharCode,pe={fontChar:String.fromCodePoint(Ae.accentFontCharCode),offset:Ae.accentOffset}}let we="";return typeof le=="number"&&(le<=1114111?we=String.fromCodePoint(le):(0,i.warn)(`charToGlyph - invalid fontCharCode: ${le}`)),z=new s(re,we,fe,pe,ue,me,ge,ae,xe),this._glyphCache[re]=z}charsToGlyphs(re){let ae=this._charsCache[re];if(ae)return ae;if(ae=[],this.cMap){const z=Object.create(null),le=re.length;let ue=0;for(;ue<le;){this.cMap.readCharCode(re,ue,z);const{charcode:ge,length:ke}=z;ue+=ke;const me=this._charToGlyph(ge,ke===1&&re.charCodeAt(ue-1)===32);ae.push(me)}}else for(let z=0,le=re.length;z<le;++z){const ue=re.charCodeAt(z),ge=this._charToGlyph(ue,ue===32);ae.push(ge)}return this._charsCache[re]=ae}getCharPositions(re){const ae=[];if(this.cMap){const z=Object.create(null);let le=0;for(;le<re.length;){this.cMap.readCharCode(re,le,z);const ue=z.length;ae.push([le,le+ue]),le+=ue}}else for(let z=0,le=re.length;z<le;++z)ae.push([z,z+1]);return ae}get glyphCacheValues(){return Object.values(this._glyphCache)}encodeString(re){const ae=[],z=[],le=()=>ae.length%2===1,ue=this.toUnicode instanceof j.IdentityToUnicodeMap?ge=>this.toUnicode.charCodeOf(ge):ge=>this.toUnicode.charCodeOf(String.fromCodePoint(ge));for(let ge=0,ke=re.length;ge<ke;ge++){const me=re.codePointAt(ge);if(me>55295&&(me<57344||me>65533)&&ge++,this.toUnicode){const fe=ue(me);if(fe!==-1){le()&&(ae.push(z.join("")),z.length=0);const xe=this.cMap?this.cMap.getCharCodeLength(fe):1;for(let pe=xe-1;pe>=0;pe--)z.push(String.fromCharCode(fe>>8*pe&255));continue}}le()||(ae.push(z.join("")),z.length=0),z.push(String.fromCodePoint(me))}return ae.push(z.join("")),ae}}D.Font=te;class ne{constructor(re){this.error=re,this.loadedName="g_font_error",this.missingFile=!0}charsToGlyphs(){return[]}encodeString(re){return[re]}exportData(re=!1){return{error:this.error}}}D.ErrorFont=ne},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.CFFTopDict=D.CFFStrings=D.CFFStandardStrings=D.CFFPrivateDict=D.CFFParser=D.CFFIndex=D.CFFHeader=D.CFFFDSelect=D.CFFCompiler=D.CFFCharset=D.CFF=void 0;var i=se(2),w=se(36),P=se(37);const e=10,t=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"];D.CFFStandardStrings=t;const o=391,K=[null,{id:"hstem",min:2,stackClearing:!0,stem:!0},null,{id:"vstem",min:2,stackClearing:!0,stem:!0},{id:"vmoveto",min:1,stackClearing:!0},{id:"rlineto",min:2,resetStack:!0},{id:"hlineto",min:1,resetStack:!0},{id:"vlineto",min:1,resetStack:!0},{id:"rrcurveto",min:6,resetStack:!0},null,{id:"callsubr",min:1,undefStack:!0},{id:"return",min:0,undefStack:!0},null,null,{id:"endchar",min:0,stackClearing:!0},null,null,null,{id:"hstemhm",min:2,stackClearing:!0,stem:!0},{id:"hintmask",min:0,stackClearing:!0},{id:"cntrmask",min:0,stackClearing:!0},{id:"rmoveto",min:2,stackClearing:!0},{id:"hmoveto",min:1,stackClearing:!0},{id:"vstemhm",min:2,stackClearing:!0,stem:!0},{id:"rcurveline",min:8,resetStack:!0},{id:"rlinecurve",min:8,resetStack:!0},{id:"vvcurveto",min:4,resetStack:!0},{id:"hhcurveto",min:4,resetStack:!0},null,{id:"callgsubr",min:1,undefStack:!0},{id:"vhcurveto",min:4,resetStack:!0},{id:"hvcurveto",min:4,resetStack:!0}],j=[null,null,null,{id:"and",min:2,stackDelta:-1},{id:"or",min:2,stackDelta:-1},{id:"not",min:1,stackDelta:0},null,null,null,{id:"abs",min:1,stackDelta:0},{id:"add",min:2,stackDelta:-1,stackFn(H,s){H[s-2]=H[s-2]+H[s-1]}},{id:"sub",min:2,stackDelta:-1,stackFn(H,s){H[s-2]=H[s-2]-H[s-1]}},{id:"div",min:2,stackDelta:-1,stackFn(H,s){H[s-2]=H[s-2]/H[s-1]}},null,{id:"neg",min:1,stackDelta:0,stackFn(H,s){H[s-1]=-H[s-1]}},{id:"eq",min:2,stackDelta:-1},null,null,{id:"drop",min:1,stackDelta:-1},null,{id:"put",min:2,stackDelta:-2},{id:"get",min:1,stackDelta:0},{id:"ifelse",min:4,stackDelta:-3},{id:"random",min:0,stackDelta:1},{id:"mul",min:2,stackDelta:-1,stackFn(H,s){H[s-2]=H[s-2]*H[s-1]}},null,{id:"sqrt",min:1,stackDelta:0},{id:"dup",min:1,stackDelta:1},{id:"exch",min:2,stackDelta:0},{id:"index",min:2,stackDelta:0},{id:"roll",min:3,stackDelta:-2},null,null,null,{id:"hflex",min:7,resetStack:!0},{id:"flex",min:13,resetStack:!0},{id:"hflex1",min:9,resetStack:!0},{id:"flex1",min:11,resetStack:!0}];class C{constructor(s,h,F){this.bytes=s.getBytes(),this.properties=h,this.seacAnalysisEnabled=!!F}parse(){const s=this.properties,h=new O;this.cff=h;const F=this.parseHeader(),N=this.parseIndex(F.endPos),U=this.parseIndex(N.endPos),g=this.parseIndex(U.endPos),S=this.parseIndex(g.endPos),m=this.parseDict(U.obj.get(0)),r=this.createDict(y,m,h.strings);h.header=F.obj,h.names=this.parseNameIndex(N.obj),h.strings=this.parseStringIndex(g.obj),h.topDict=r,h.globalSubrIndex=S.obj,this.parsePrivateDict(h.topDict),h.isCIDFont=r.hasName("ROS");const p=r.getByName("CharStrings"),c=this.parseIndex(p).obj,u=r.getByName("FontMatrix");u&&(s.fontMatrix=u);const q=r.getByName("FontBBox");q&&(s.ascent=Math.max(q[3],q[1]),s.descent=Math.min(q[1],q[3]),s.ascentScaled=!0);let J,G;if(h.isCIDFont){const ce=this.parseIndex(r.getByName("FDArray")).obj;for(let _=0,ie=ce.count;_<ie;++_){const L=ce.get(_),oe=this.createDict(y,this.parseDict(L),h.strings);this.parsePrivateDict(oe),h.fdArray.push(oe)}G=null,J=this.parseCharsets(r.getByName("charset"),c.count,h.strings,!0),h.fdSelect=this.parseFDSelect(r.getByName("FDSelect"),c.count)}else J=this.parseCharsets(r.getByName("charset"),c.count,h.strings,!1),G=this.parseEncoding(r.getByName("Encoding"),s,h.strings,J.charset);h.charset=J,h.encoding=G;const W=this.parseCharStrings({charStrings:c,localSubrIndex:r.privateDict.subrsIndex,globalSubrIndex:S.obj,fdSelect:h.fdSelect,fdArray:h.fdArray,privateDict:r.privateDict});return h.charStrings=W.charStrings,h.seacs=W.seacs,h.widths=W.widths,h}parseHeader(){let s=this.bytes;const h=s.length;let F=0;for(;F<h&&s[F]!==1;)++F;if(F>=h)throw new i.FormatError("Invalid CFF header");F!==0&&((0,i.info)("cff data is shifted"),s=s.subarray(F),this.bytes=s);const N=s[0],U=s[1],g=s[2],S=s[3];return{obj:new d(N,U,g,S),endPos:g}}parseDict(s){let h=0;function F(){let m=s[h++];return m===30?N():m===28?(m=s[h++],m=(m<<24|s[h++]<<16)>>16,m):m===29?(m=s[h++],m=m<<8|s[h++],m=m<<8|s[h++],m=m<<8|s[h++],m):m>=32&&m<=246?m-139:m>=247&&m<=250?(m-247)*256+s[h++]+108:m>=251&&m<=254?-((m-251)*256)-s[h++]-108:((0,i.warn)('CFFParser_parseDict: "'+m+'" is a reserved command.'),NaN)}function N(){let m="";const p=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"],c=s.length;for(;h<c;){const u=s[h++],q=u>>4,J=u&15;if(q===15||(m+=p[q],J===15))break;m+=p[J]}return parseFloat(m)}let U=[];const g=[];h=0;const S=s.length;for(;h<S;){let m=s[h];m<=21?(m===12&&(m=m<<8|s[++h]),g.push([m,U]),U=[],++h):U.push(F())}return g}parseIndex(s){const h=new n,F=this.bytes,N=F[s++]<<8|F[s++],U=[];let g=s,S,m;if(N!==0){const r=F[s++],p=s+(N+1)*r-1;for(S=0,m=N+1;S<m;++S){let c=0;for(let u=0;u<r;++u)c<<=8,c+=F[s++];U.push(p+c)}g=U[N]}for(S=0,m=U.length-1;S<m;++S){const r=U[S],p=U[S+1];h.add(F.subarray(r,p))}return{obj:h,endPos:g}}parseNameIndex(s){const h=[];for(let F=0,N=s.count;F<N;++F){const U=s.get(F);h.push((0,i.bytesToString)(U))}return h}parseStringIndex(s){const h=new A;for(let F=0,N=s.count;F<N;++F){const U=s.get(F);h.add((0,i.bytesToString)(U))}return h}createDict(s,h,F){const N=new s(F);for(const[U,g]of h)N.setByKey(U,g);return N}parseCharString(s,h,F,N){if(!h||s.callDepth>e)return!1;let U=s.stackSize;const g=s.stack;let S=h.length;for(let m=0;m<S;){const r=h[m++];let p=null;if(r===12){const c=h[m++];c===0?(h[m-2]=139,h[m-1]=22,U=0):p=j[c]}else if(r===28)g[U]=(h[m]<<24|h[m+1]<<16)>>16,m+=2,U++;else if(r===14){if(U>=4&&(U-=4,this.seacAnalysisEnabled))return s.seac=g.slice(U,U+4),!1;p=K[r]}else if(r>=32&&r<=246)g[U]=r-139,U++;else if(r>=247&&r<=254)g[U]=r<251?(r-247<<8)+h[m]+108:-(r-251<<8)-h[m]-108,m++,U++;else if(r===255)g[U]=(h[m]<<24|h[m+1]<<16|h[m+2]<<8|h[m+3])/65536,m+=4,U++;else if(r===19||r===20){if(s.hints+=U>>1,s.hints===0){h.copyWithin(m-1,m,-1),m-=1,S-=1;continue}m+=s.hints+7>>3,U%=2,p=K[r]}else if(r===10||r===29){const c=r===10?F:N;if(!c)return p=K[r],(0,i.warn)("Missing subrsIndex for "+p.id),!1;let u=32768;c.count<1240?u=107:c.count<33900&&(u=1131);const q=g[--U]+u;if(q<0||q>=c.count||isNaN(q))return p=K[r],(0,i.warn)("Out of bounds subrIndex for "+p.id),!1;if(s.stackSize=U,s.callDepth++,!this.parseCharString(s,c.get(q),F,N))return!1;s.callDepth--,U=s.stackSize;continue}else{if(r===11)return s.stackSize=U,!0;if(r===0&&m===h.length)h[m-1]=14,p=K[14];else if(r===9){h.copyWithin(m-1,m,-1),m-=1,S-=1;continue}else p=K[r]}if(p){if(p.stem&&(s.hints+=U>>1,r===3||r===23?s.hasVStems=!0:s.hasVStems&&(r===1||r===18)&&((0,i.warn)("CFF stem hints are in wrong order"),h[m-1]=r===1?3:23)),"min"in p&&!s.undefStack&&U<p.min)return(0,i.warn)("Not enough parameters for "+p.id+"; actual: "+U+", expected: "+p.min),U===0?(h[m-1]=14,!0):!1;s.firstStackClearing&&p.stackClearing&&(s.firstStackClearing=!1,U-=p.min,U>=2&&p.stem?U%=2:U>1&&(0,i.warn)("Found too many parameters for stack-clearing command"),U>0&&(s.width=g[U-1])),"stackDelta"in p?("stackFn"in p&&p.stackFn(g,U),U+=p.stackDelta):p.stackClearing?U=0:p.resetStack?(U=0,s.undefStack=!1):p.undefStack&&(U=0,s.undefStack=!0,s.firstStackClearing=!1)}}return S<h.length&&h.fill(14,S),s.stackSize=U,!0}parseCharStrings({charStrings:s,localSubrIndex:h,globalSubrIndex:F,fdSelect:N,fdArray:U,privateDict:g}){const S=[],m=[],r=s.count;for(let p=0;p<r;p++){const c=s.get(p),u={callDepth:0,stackSize:0,stack:[],undefStack:!0,hints:0,firstStackClearing:!0,seac:null,width:null,hasVStems:!1};let q=!0,J=null,G=g;if(N&&U.length){const W=N.getFDIndex(p);W===-1&&((0,i.warn)("Glyph index is not in fd select."),q=!1),W>=U.length&&((0,i.warn)("Invalid fd index for glyph index."),q=!1),q&&(G=U[W].privateDict,J=G.subrsIndex)}else h&&(J=h);if(q&&(q=this.parseCharString(u,c,J,F)),u.width!==null){const W=G.getByName("nominalWidthX");m[p]=W+u.width}else{const W=G.getByName("defaultWidthX");m[p]=W}u.seac!==null&&(S[p]=u.seac),q||s.set(p,new Uint8Array([14]))}return{charStrings:s,seacs:S,widths:m}}emptyPrivateDictionary(s){const h=this.createDict(R,[],s.strings);s.setByKey(18,[0,0]),s.privateDict=h}parsePrivateDict(s){if(!s.hasName("Private")){this.emptyPrivateDictionary(s);return}const h=s.getByName("Private");if(!Array.isArray(h)||h.length!==2){s.removeByName("Private");return}const F=h[0],N=h[1];if(F===0||N>=this.bytes.length){this.emptyPrivateDictionary(s);return}const U=N+F,g=this.bytes.subarray(N,U),S=this.parseDict(g),m=this.createDict(R,S,s.strings);if(s.privateDict=m,m.getByName("ExpansionFactor")===0&&m.setByName("ExpansionFactor",.06),!m.getByName("Subrs"))return;const r=m.getByName("Subrs"),p=N+r;if(r===0||p>=this.bytes.length){this.emptyPrivateDictionary(s);return}const c=this.parseIndex(p);m.subrsIndex=c.obj}parseCharsets(s,h,F,N){if(s===0)return new M(!0,E.ISO_ADOBE,w.ISOAdobeCharset);if(s===1)return new M(!0,E.EXPERT,w.ExpertCharset);if(s===2)return new M(!0,E.EXPERT_SUBSET,w.ExpertSubsetCharset);const U=this.bytes,g=s,S=U[s++],m=[N?0:".notdef"];let r,p,c;switch(h-=1,S){case 0:for(c=0;c<h;c++)r=U[s++]<<8|U[s++],m.push(N?r:F.get(r));break;case 1:for(;m.length<=h;)for(r=U[s++]<<8|U[s++],p=U[s++],c=0;c<=p;c++)m.push(N?r++:F.get(r++));break;case 2:for(;m.length<=h;)for(r=U[s++]<<8|U[s++],p=U[s++]<<8|U[s++],c=0;c<=p;c++)m.push(N?r++:F.get(r++));break;default:throw new i.FormatError("Unknown charset format")}const u=s,q=U.subarray(g,u);return new M(!1,S,m,q)}parseEncoding(s,h,F,N){const U=Object.create(null),g=this.bytes;let S=!1,m,r,p,c=null;function u(){const q=g[s++];for(r=0;r<q;r++){const J=g[s++],G=(g[s++]<<8)+(g[s++]&255);U[J]=N.indexOf(F.get(G))}}if(s===0||s===1){S=!0,m=s;const q=s?P.ExpertEncoding:P.StandardEncoding;for(r=0,p=N.length;r<p;r++){const J=q.indexOf(N[r]);J!==-1&&(U[J]=r)}}else{const q=s;switch(m=g[s++],m&127){case 0:const G=g[s++];for(r=1;r<=G;r++)U[g[s++]]=r;break;case 1:const W=g[s++];let ce=1;for(r=0;r<W;r++){const _=g[s++],ie=g[s++];for(let L=_;L<=_+ie;L++)U[L]=ce++}break;default:throw new i.FormatError(`Unknown encoding format: ${m} in CFF`)}const J=s;m&128&&(g[q]&=127,u()),c=g.subarray(q,J)}return m&=127,new b(S,m,U,c)}parseFDSelect(s,h){const F=this.bytes,N=F[s++],U=[];let g;switch(N){case 0:for(g=0;g<h;++g){const m=F[s++];U.push(m)}break;case 3:const S=F[s++]<<8|F[s++];for(g=0;g<S;++g){let m=F[s++]<<8|F[s++];g===0&&m!==0&&((0,i.warn)("parseFDSelect: The first range must have a first GID of 0 -- trying to recover."),m=0);const r=F[s++],p=F[s]<<8|F[s+1];for(let c=m;c<p;++c)U.push(r)}s+=2;break;default:throw new i.FormatError(`parseFDSelect: Unknown format "${N}".`)}if(U.length!==h)throw new i.FormatError("parseFDSelect: Invalid font data.");return new V(N,U)}}D.CFFParser=C;class O{constructor(){this.header=null,this.names=[],this.topDict=null,this.strings=new A,this.globalSubrIndex=null,this.encoding=null,this.charset=null,this.charStrings=null,this.fdArray=[],this.fdSelect=null,this.isCIDFont=!1}duplicateFirstGlyph(){if(this.charStrings.count>=65535){(0,i.warn)("Not enough space in charstrings to duplicate first glyph.");return}const s=this.charStrings.get(0);this.charStrings.add(s),this.isCIDFont&&this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0])}hasGlyphId(s){return s<0||s>=this.charStrings.count?!1:this.charStrings.get(s).length>0}}D.CFF=O;class d{constructor(s,h,F,N){this.major=s,this.minor=h,this.hdrSize=F,this.offSize=N}}D.CFFHeader=d;class A{constructor(){this.strings=[]}get(s){return s>=0&&s<=o-1?t[s]:s-o<=this.strings.length?this.strings[s-o]:t[0]}getSID(s){let h=t.indexOf(s);return h!==-1?h:(h=this.strings.indexOf(s),h!==-1?h+o:-1)}add(s){this.strings.push(s)}get count(){return this.strings.length}}D.CFFStrings=A;class n{constructor(){this.objects=[],this.length=0}add(s){this.length+=s.length,this.objects.push(s)}set(s,h){this.length+=h.length-this.objects[s].length,this.objects[s]=h}get(s){return this.objects[s]}get count(){return this.objects.length}}D.CFFIndex=n;class I{constructor(s,h){this.keyToNameMap=s.keyToNameMap,this.nameToKeyMap=s.nameToKeyMap,this.defaults=s.defaults,this.types=s.types,this.opcodes=s.opcodes,this.order=s.order,this.strings=h,this.values=Object.create(null)}setByKey(s,h){if(!(s in this.keyToNameMap))return!1;if(h.length===0)return!0;for(const N of h)if(isNaN(N))return(0,i.warn)(`Invalid CFFDict value: "${h}" for key "${s}".`),!0;const F=this.types[s];return(F==="num"||F==="sid"||F==="offset")&&(h=h[0]),this.values[s]=h,!0}setByName(s,h){if(!(s in this.nameToKeyMap))throw new i.FormatError(`Invalid dictionary name "${s}"`);this.values[this.nameToKeyMap[s]]=h}hasName(s){return this.nameToKeyMap[s]in this.values}getByName(s){if(!(s in this.nameToKeyMap))throw new i.FormatError(`Invalid dictionary name ${s}"`);const h=this.nameToKeyMap[s];return h in this.values?this.values[h]:this.defaults[h]}removeByName(s){delete this.values[this.nameToKeyMap[s]]}static createTables(s){const h={keyToNameMap:{},nameToKeyMap:{},defaults:{},types:{},opcodes:{},order:[]};for(const F of s){const N=Array.isArray(F[0])?(F[0][0]<<8)+F[0][1]:F[0];h.keyToNameMap[N]=F[1],h.nameToKeyMap[F[1]]=N,h.types[N]=F[2],h.defaults[N]=F[3],h.opcodes[N]=Array.isArray(F[0])?F[0]:[F[0]],h.order.push(N)}return h}}const k=[[[12,30],"ROS",["sid","sid","num"],null],[[12,20],"SyntheticBase","num",null],[0,"version","sid",null],[1,"Notice","sid",null],[[12,0],"Copyright","sid",null],[2,"FullName","sid",null],[3,"FamilyName","sid",null],[4,"Weight","sid",null],[[12,1],"isFixedPitch","num",0],[[12,2],"ItalicAngle","num",0],[[12,3],"UnderlinePosition","num",-100],[[12,4],"UnderlineThickness","num",50],[[12,5],"PaintType","num",0],[[12,6],"CharstringType","num",2],[[12,7],"FontMatrix",["num","num","num","num","num","num"],[.001,0,0,.001,0,0]],[13,"UniqueID","num",null],[5,"FontBBox",["num","num","num","num"],[0,0,0,0]],[[12,8],"StrokeWidth","num",0],[14,"XUID","array",null],[15,"charset","offset",0],[16,"Encoding","offset",0],[17,"CharStrings","offset",0],[18,"Private",["offset","offset"],null],[[12,21],"PostScript","sid",null],[[12,22],"BaseFontName","sid",null],[[12,23],"BaseFontBlend","delta",null],[[12,31],"CIDFontVersion","num",0],[[12,32],"CIDFontRevision","num",0],[[12,33],"CIDFontType","num",0],[[12,34],"CIDCount","num",8720],[[12,35],"UIDBase","num",null],[[12,37],"FDSelect","offset",null],[[12,36],"FDArray","offset",null],[[12,38],"FontName","sid",null]];class y extends I{static get tables(){return(0,i.shadow)(this,"tables",this.createTables(k))}constructor(s){super(y.tables,s),this.privateDict=null}}D.CFFTopDict=y;const f=[[6,"BlueValues","delta",null],[7,"OtherBlues","delta",null],[8,"FamilyBlues","delta",null],[9,"FamilyOtherBlues","delta",null],[[12,9],"BlueScale","num",.039625],[[12,10],"BlueShift","num",7],[[12,11],"BlueFuzz","num",1],[10,"StdHW","num",null],[11,"StdVW","num",null],[[12,12],"StemSnapH","delta",null],[[12,13],"StemSnapV","delta",null],[[12,14],"ForceBold","num",0],[[12,17],"LanguageGroup","num",0],[[12,18],"ExpansionFactor","num",.06],[[12,19],"initialRandomSeed","num",0],[20,"defaultWidthX","num",0],[21,"nominalWidthX","num",0],[19,"Subrs","offset",null]];class R extends I{static get tables(){return(0,i.shadow)(this,"tables",this.createTables(f))}constructor(s){super(R.tables,s),this.subrsIndex=null}}D.CFFPrivateDict=R;const E={ISO_ADOBE:0,EXPERT:1,EXPERT_SUBSET:2};class M{constructor(s,h,F,N){this.predefined=s,this.format=h,this.charset=F,this.raw=N}}D.CFFCharset=M;class b{constructor(s,h,F,N){this.predefined=s,this.format=h,this.encoding=F,this.raw=N}}class V{constructor(s,h){this.format=s,this.fdSelect=h}getFDIndex(s){return s<0||s>=this.fdSelect.length?-1:this.fdSelect[s]}}D.CFFFDSelect=V;class l{constructor(){this.offsets=Object.create(null)}isTracking(s){return s in this.offsets}track(s,h){if(s in this.offsets)throw new i.FormatError(`Already tracking location of ${s}`);this.offsets[s]=h}offset(s){for(const h in this.offsets)this.offsets[h]+=s}setEntryLocation(s,h,F){if(!(s in this.offsets))throw new i.FormatError(`Not tracking location of ${s}`);const N=F.data,U=this.offsets[s],g=5;for(let S=0,m=h.length;S<m;++S){const r=S*g+U,p=r+1,c=r+2,u=r+3,q=r+4;if(N[r]!==29||N[p]!==0||N[c]!==0||N[u]!==0||N[q]!==0)throw new i.FormatError("writing to an offset that is not empty");const J=h[S];N[r]=29,N[p]=J>>24&255,N[c]=J>>16&255,N[u]=J>>8&255,N[q]=J&255}}}class x{constructor(s){this.cff=s}compile(){const s=this.cff,h={data:[],length:0,add(u){try{this.data.push(...u)}catch(q){this.data=this.data.concat(u)}this.length=this.data.length}},F=this.compileHeader(s.header);h.add(F);const N=this.compileNameIndex(s.names);if(h.add(N),s.isCIDFont&&s.topDict.hasName("FontMatrix")){const u=s.topDict.getByName("FontMatrix");s.topDict.removeByName("FontMatrix");for(const q of s.fdArray){let J=u.slice(0);q.hasName("FontMatrix")&&(J=i.Util.transform(J,q.getByName("FontMatrix"))),q.setByName("FontMatrix",J)}}const U=s.topDict.getByName("XUID");(U==null?void 0:U.length)>16&&s.topDict.removeByName("XUID"),s.topDict.setByName("charset",0);let g=this.compileTopDicts([s.topDict],h.length,s.isCIDFont);h.add(g.output);const S=g.trackers[0],m=this.compileStringIndex(s.strings.strings);h.add(m);const r=this.compileIndex(s.globalSubrIndex);if(h.add(r),s.encoding&&s.topDict.hasName("Encoding"))if(s.encoding.predefined)S.setEntryLocation("Encoding",[s.encoding.format],h);else{const u=this.compileEncoding(s.encoding);S.setEntryLocation("Encoding",[h.length],h),h.add(u)}const p=this.compileCharset(s.charset,s.charStrings.count,s.strings,s.isCIDFont);S.setEntryLocation("charset",[h.length],h),h.add(p);const c=this.compileCharStrings(s.charStrings);if(S.setEntryLocation("CharStrings",[h.length],h),h.add(c),s.isCIDFont){S.setEntryLocation("FDSelect",[h.length],h);const u=this.compileFDSelect(s.fdSelect);h.add(u),g=this.compileTopDicts(s.fdArray,h.length,!0),S.setEntryLocation("FDArray",[h.length],h),h.add(g.output);const q=g.trackers;this.compilePrivateDicts(s.fdArray,q,h)}return this.compilePrivateDicts([s.topDict],[S],h),h.add([0]),h.data}encodeNumber(s){return Number.isInteger(s)?this.encodeInteger(s):this.encodeFloat(s)}static get EncodeFloatRegExp(){return(0,i.shadow)(this,"EncodeFloatRegExp",/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/)}encodeFloat(s){let h=s.toString();const F=x.EncodeFloatRegExp.exec(h);if(F){const m=parseFloat("1e"+((F[2]?+F[2]:0)+F[1].length));h=(Math.round(s*m)/m).toString()}let N="",U,g;for(U=0,g=h.length;U<g;++U){const m=h[U];m==="e"?N+=h[++U]==="-"?"c":"b":m==="."?N+="a":m==="-"?N+="e":N+=m}N+=N.length&1?"f":"ff";const S=[30];for(U=0,g=N.length;U<g;U+=2)S.push(parseInt(N.substring(U,U+2),16));return S}encodeInteger(s){let h;return s>=-107&&s<=107?h=[s+139]:s>=108&&s<=1131?(s-=108,h=[(s>>8)+247,s&255]):s>=-1131&&s<=-108?(s=-s-108,h=[(s>>8)+251,s&255]):s>=-32768&&s<=32767?h=[28,s>>8&255,s&255]:h=[29,s>>24&255,s>>16&255,s>>8&255,s&255],h}compileHeader(s){return[s.major,s.minor,4,s.offSize]}compileNameIndex(s){const h=new n;for(const F of s){const N=Math.min(F.length,127);let U=new Array(N);for(let g=0;g<N;g++){let S=F[g];(S<"!"||S>"~"||S==="["||S==="]"||S==="("||S===")"||S==="{"||S==="}"||S==="<"||S===">"||S==="/"||S==="%")&&(S="_"),U[g]=S}U=U.join(""),U===""&&(U="Bad_Font_Name"),h.add((0,i.stringToBytes)(U))}return this.compileIndex(h)}compileTopDicts(s,h,F){const N=[];let U=new n;for(const g of s){F&&(g.removeByName("CIDFontVersion"),g.removeByName("CIDFontRevision"),g.removeByName("CIDFontType"),g.removeByName("CIDCount"),g.removeByName("UIDBase"));const S=new l,m=this.compileDict(g,S);N.push(S),U.add(m),S.offset(h)}return U=this.compileIndex(U,N),{trackers:N,output:U}}compilePrivateDicts(s,h,F){for(let N=0,U=s.length;N<U;++N){const g=s[N],S=g.privateDict;if(!S||!g.hasName("Private"))throw new i.FormatError("There must be a private dictionary.");const m=new l,r=this.compileDict(S,m);let p=F.length;if(m.offset(p),r.length||(p=0),h[N].setEntryLocation("Private",[r.length,p],F),F.add(r),S.subrsIndex&&S.hasName("Subrs")){const c=this.compileIndex(S.subrsIndex);m.setEntryLocation("Subrs",[r.length],F),F.add(c)}}}compileDict(s,h){const F=[];for(const N of s.order){if(!(N in s.values))continue;let U=s.values[N],g=s.types[N];if(Array.isArray(g)||(g=[g]),Array.isArray(U)||(U=[U]),U.length!==0){for(let S=0,m=g.length;S<m;++S){const r=g[S],p=U[S];switch(r){case"num":case"sid":F.push(...this.encodeNumber(p));break;case"offset":const c=s.keyToNameMap[N];h.isTracking(c)||h.track(c,F.length),F.push(29,0,0,0,0);break;case"array":case"delta":F.push(...this.encodeNumber(p));for(let u=1,q=U.length;u<q;++u)F.push(...this.encodeNumber(U[u]));break;default:throw new i.FormatError(`Unknown data type of ${r}`)}}F.push(...s.opcodes[N])}}return F}compileStringIndex(s){const h=new n;for(const F of s)h.add((0,i.stringToBytes)(F));return this.compileIndex(h)}compileCharStrings(s){const h=new n;for(let F=0;F<s.count;F++){const N=s.get(F);if(N.length===0){h.add(new Uint8Array([139,14]));continue}h.add(N)}return this.compileIndex(h)}compileCharset(s,h,F,N){let U;const g=h-1;if(N)U=new Uint8Array([2,0,0,g>>8&255,g&255]);else{const S=1+g*2;U=new Uint8Array(S),U[0]=0;let m=0;const r=s.charset.length;let p=!1;for(let c=1;c<U.length;c+=2){let u=0;if(m<r){const q=s.charset[m++];u=F.getSID(q),u===-1&&(u=0,p||(p=!0,(0,i.warn)(`Couldn't find ${q} in CFF strings`)))}U[c]=u>>8&255,U[c+1]=u&255}}return this.compileTypedArray(U)}compileEncoding(s){return this.compileTypedArray(s.raw)}compileFDSelect(s){const h=s.format;let F,N;switch(h){case 0:for(F=new Uint8Array(1+s.fdSelect.length),F[0]=h,N=0;N<s.fdSelect.length;N++)F[N+1]=s.fdSelect[N];break;case 3:const U=0;let g=s.fdSelect[0];const S=[h,0,0,U>>8&255,U&255,g];for(N=1;N<s.fdSelect.length;N++){const r=s.fdSelect[N];r!==g&&(S.push(N>>8&255,N&255,r),g=r)}const m=(S.length-3)/3;S[1]=m>>8&255,S[2]=m&255,S.push(N>>8&255,N&255),F=new Uint8Array(S);break}return this.compileTypedArray(F)}compileTypedArray(s){return Array.from(s)}compileIndex(s,h=[]){const F=s.objects,N=F.length;if(N===0)return[0,0];const U=[N>>8&255,N&255];let g=1,S;for(S=0;S<N;++S)g+=F[S].length;let m;g<256?m=1:g<65536?m=2:g<16777216?m=3:m=4,U.push(m);let r=1;for(S=0;S<N+1;S++)m===1?U.push(r&255):m===2?U.push(r>>8&255,r&255):m===3?U.push(r>>16&255,r>>8&255,r&255):U.push(r>>>24&255,r>>16&255,r>>8&255,r&255),F[S]&&(r+=F[S].length);for(S=0;S<N;S++)h[S]&&h[S].offset(U.length),U.push(...F[S]);return U}}D.CFFCompiler=x},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ISOAdobeCharset=D.ExpertSubsetCharset=D.ExpertCharset=void 0;const se=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron"];D.ISOAdobeCharset=se;const i=[".notdef","space","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","fi","fl","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"];D.ExpertCharset=i;const w=[".notdef","space","dollaroldstyle","dollarsuperior","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","fi","fl","ffi","ffl","parenleftinferior","parenrightinferior","hyphensuperior","colonmonetary","onefitted","rupiah","centoldstyle","figuredash","hypheninferior","onequarter","onehalf","threequarters","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior"];D.ExpertSubsetCharset=w},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ZapfDingbatsEncoding=D.WinAnsiEncoding=D.SymbolSetEncoding=D.StandardEncoding=D.MacRomanEncoding=D.ExpertEncoding=void 0,D.getEncoding=K;const se=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"];D.ExpertEncoding=se;const i=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","centoldstyle","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","","threequartersemdash","","questionsmall","","","","","Ethsmall","","","onequarter","onehalf","threequarters","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","","","","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hypheninferior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","asuperior","centsuperior","","","","","Aacutesmall","Agravesmall","Acircumflexsmall","Adieresissmall","Atildesmall","Aringsmall","Ccedillasmall","Eacutesmall","Egravesmall","Ecircumflexsmall","Edieresissmall","Iacutesmall","Igravesmall","Icircumflexsmall","Idieresissmall","Ntildesmall","Oacutesmall","Ogravesmall","Ocircumflexsmall","Odieresissmall","Otildesmall","Uacutesmall","Ugravesmall","Ucircumflexsmall","Udieresissmall","","eightsuperior","fourinferior","threeinferior","sixinferior","eightinferior","seveninferior","Scaronsmall","","centinferior","twoinferior","","Dieresissmall","","Caronsmall","osuperior","fiveinferior","","commainferior","periodinferior","Yacutesmall","","dollarinferior","","","Thornsmall","","nineinferior","zeroinferior","Zcaronsmall","AEsmall","Oslashsmall","questiondownsmall","oneinferior","Lslashsmall","","","","","","","Cedillasmall","","","","","","OEsmall","figuredash","hyphensuperior","","","","","exclamdownsmall","","Ydieresissmall","","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","ninesuperior","zerosuperior","","esuperior","rsuperior","tsuperior","","","isuperior","ssuperior","dsuperior","","","","","","lsuperior","Ogoneksmall","Brevesmall","Macronsmall","bsuperior","nsuperior","msuperior","commasuperior","periodsuperior","Dotaccentsmall","Ringsmall","","","",""],w=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","space","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron"];D.MacRomanEncoding=w;const P=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls","","","",""];D.StandardEncoding=P;const e=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","bullet","Euro","bullet","quotesinglbase","florin","quotedblbase","ellipsis","dagger","daggerdbl","circumflex","perthousand","Scaron","guilsinglleft","OE","bullet","Zcaron","bullet","bullet","quoteleft","quoteright","quotedblleft","quotedblright","bullet","endash","emdash","tilde","trademark","scaron","guilsinglright","oe","bullet","zcaron","Ydieresis","space","exclamdown","cent","sterling","currency","yen","brokenbar","section","dieresis","copyright","ordfeminine","guillemotleft","logicalnot","hyphen","registered","macron","degree","plusminus","twosuperior","threesuperior","acute","mu","paragraph","periodcentered","cedilla","onesuperior","ordmasculine","guillemotright","onequarter","onehalf","threequarters","questiondown","Agrave","Aacute","Acircumflex","Atilde","Adieresis","Aring","AE","Ccedilla","Egrave","Eacute","Ecircumflex","Edieresis","Igrave","Iacute","Icircumflex","Idieresis","Eth","Ntilde","Ograve","Oacute","Ocircumflex","Otilde","Odieresis","multiply","Oslash","Ugrave","Uacute","Ucircumflex","Udieresis","Yacute","Thorn","germandbls","agrave","aacute","acircumflex","atilde","adieresis","aring","ae","ccedilla","egrave","eacute","ecircumflex","edieresis","igrave","iacute","icircumflex","idieresis","eth","ntilde","ograve","oacute","ocircumflex","otilde","odieresis","divide","oslash","ugrave","uacute","ucircumflex","udieresis","yacute","thorn","ydieresis"];D.WinAnsiEncoding=e;const t=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","universal","numbersign","existential","percent","ampersand","suchthat","parenleft","parenright","asteriskmath","plus","comma","minus","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","congruent","Alpha","Beta","Chi","Delta","Epsilon","Phi","Gamma","Eta","Iota","theta1","Kappa","Lambda","Mu","Nu","Omicron","Pi","Theta","Rho","Sigma","Tau","Upsilon","sigma1","Omega","Xi","Psi","Zeta","bracketleft","therefore","bracketright","perpendicular","underscore","radicalex","alpha","beta","chi","delta","epsilon","phi","gamma","eta","iota","phi1","kappa","lambda","mu","nu","omicron","pi","theta","rho","sigma","tau","upsilon","omega1","omega","xi","psi","zeta","braceleft","bar","braceright","similar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euro","Upsilon1","minute","lessequal","fraction","infinity","florin","club","diamond","heart","spade","arrowboth","arrowleft","arrowup","arrowright","arrowdown","degree","plusminus","second","greaterequal","multiply","proportional","partialdiff","bullet","divide","notequal","equivalence","approxequal","ellipsis","arrowvertex","arrowhorizex","carriagereturn","aleph","Ifraktur","Rfraktur","weierstrass","circlemultiply","circleplus","emptyset","intersection","union","propersuperset","reflexsuperset","notsubset","propersubset","reflexsubset","element","notelement","angle","gradient","registerserif","copyrightserif","trademarkserif","product","radical","dotmath","logicalnot","logicaland","logicalor","arrowdblboth","arrowdblleft","arrowdblup","arrowdblright","arrowdbldown","lozenge","angleleft","registersans","copyrightsans","trademarksans","summation","parenlefttp","parenleftex","parenleftbt","bracketlefttp","bracketleftex","bracketleftbt","bracelefttp","braceleftmid","braceleftbt","braceex","","angleright","integral","integraltp","integralex","integralbt","parenrighttp","parenrightex","parenrightbt","bracketrighttp","bracketrightex","bracketrightbt","bracerighttp","bracerightmid","bracerightbt",""];D.SymbolSetEncoding=t;const o=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","a1","a2","a202","a3","a4","a5","a119","a118","a117","a11","a12","a13","a14","a15","a16","a105","a17","a18","a19","a20","a21","a22","a23","a24","a25","a26","a27","a28","a6","a7","a8","a9","a10","a29","a30","a31","a32","a33","a34","a35","a36","a37","a38","a39","a40","a41","a42","a43","a44","a45","a46","a47","a48","a49","a50","a51","a52","a53","a54","a55","a56","a57","a58","a59","a60","a61","a62","a63","a64","a65","a66","a67","a68","a69","a70","a71","a72","a73","a74","a203","a75","a204","a76","a77","a78","a79","a81","a82","a83","a84","a97","a98","a99","a100","","a89","a90","a93","a94","a91","a92","a205","a85","a206","a86","a87","a88","a95","a96","","","","","","","","","","","","","","","","","","","","a101","a102","a103","a104","a106","a107","a108","a112","a111","a110","a109","a120","a121","a122","a123","a124","a125","a126","a127","a128","a129","a130","a131","a132","a133","a134","a135","a136","a137","a138","a139","a140","a141","a142","a143","a144","a145","a146","a147","a148","a149","a150","a151","a152","a153","a154","a155","a156","a157","a158","a159","a160","a161","a163","a164","a196","a165","a192","a166","a167","a168","a169","a170","a171","a172","a173","a162","a174","a175","a176","a177","a178","a179","a193","a180","a199","a181","a200","a182","","a201","a183","a184","a197","a185","a194","a198","a186","a195","a187","a188","a189","a190","a191",""];D.ZapfDingbatsEncoding=o;function K(j){switch(j){case"WinAnsiEncoding":return e;case"StandardEncoding":return P;case"MacRomanEncoding":return w;case"SymbolSetEncoding":return t;case"ZapfDingbatsEncoding":return o;case"ExpertEncoding":return se;case"MacExpertEncoding":return i;default:return null}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.SEAC_ANALYSIS_ENABLED=D.MacStandardGlyphOrdering=D.FontFlags=void 0,D.normalizeFontName=O,D.recoverGlyphName=j,D.type1FontGlyphMapping=C;var i=se(37),w=se(39),P=se(40),e=se(2);const t=!0;D.SEAC_ANALYSIS_ENABLED=t;const o={FixedPitch:1,Serif:2,Symbolic:4,Script:8,Nonsymbolic:32,Italic:64,AllCap:65536,SmallCap:131072,ForceBold:262144};D.FontFlags=o;const K=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];D.MacStandardGlyphOrdering=K;function j(d,A){if(A[d]!==void 0)return d;const n=(0,P.getUnicodeForGlyph)(d,A);if(n!==-1){for(const I in A)if(A[I]===n)return I}return(0,e.info)("Unable to recover a standard glyph name for: "+d),d}function C(d,A,n){const I=Object.create(null);let k,y,f;const R=!!(d.flags&o.Symbolic);if(d.isInternalFont)for(f=A,y=0;y<f.length;y++)k=n.indexOf(f[y]),I[y]=k>=0?k:0;else if(d.baseEncodingName)for(f=(0,i.getEncoding)(d.baseEncodingName),y=0;y<f.length;y++)k=n.indexOf(f[y]),I[y]=k>=0?k:0;else if(R)for(y in A)I[y]=A[y];else for(f=i.StandardEncoding,y=0;y<f.length;y++)k=n.indexOf(f[y]),I[y]=k>=0?k:0;const E=d.differences;let M;if(E)for(y in E){const b=E[y];if(k=n.indexOf(b),k===-1){M||(M=(0,w.getGlyphsUnicode)());const V=j(b,M);V!==b&&(k=n.indexOf(V))}I[y]=k>=0?k:0}return I}function O(d){return d.replaceAll(/[,_]/g,"-").replaceAll(/\s/g,"")}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.getGlyphsUnicode=D.getDingbatsGlyphsUnicode=void 0;var i=se(3);const w=(0,i.getLookupTableFactory)(function(e){e.A=65,e.AE=198,e.AEacute=508,e.AEmacron=482,e.AEsmall=63462,e.Aacute=193,e.Aacutesmall=63457,e.Abreve=258,e.Abreveacute=7854,e.Abrevecyrillic=1232,e.Abrevedotbelow=7862,e.Abrevegrave=7856,e.Abrevehookabove=7858,e.Abrevetilde=7860,e.Acaron=461,e.Acircle=9398,e.Acircumflex=194,e.Acircumflexacute=7844,e.Acircumflexdotbelow=7852,e.Acircumflexgrave=7846,e.Acircumflexhookabove=7848,e.Acircumflexsmall=63458,e.Acircumflextilde=7850,e.Acute=63177,e.Acutesmall=63412,e.Acyrillic=1040,e.Adblgrave=512,e.Adieresis=196,e.Adieresiscyrillic=1234,e.Adieresismacron=478,e.Adieresissmall=63460,e.Adotbelow=7840,e.Adotmacron=480,e.Agrave=192,e.Agravesmall=63456,e.Ahookabove=7842,e.Aiecyrillic=1236,e.Ainvertedbreve=514,e.Alpha=913,e.Alphatonos=902,e.Amacron=256,e.Amonospace=65313,e.Aogonek=260,e.Aring=197,e.Aringacute=506,e.Aringbelow=7680,e.Aringsmall=63461,e.Asmall=63329,e.Atilde=195,e.Atildesmall=63459,e.Aybarmenian=1329,e.B=66,e.Bcircle=9399,e.Bdotaccent=7682,e.Bdotbelow=7684,e.Becyrillic=1041,e.Benarmenian=1330,e.Beta=914,e.Bhook=385,e.Blinebelow=7686,e.Bmonospace=65314,e.Brevesmall=63220,e.Bsmall=63330,e.Btopbar=386,e.C=67,e.Caarmenian=1342,e.Cacute=262,e.Caron=63178,e.Caronsmall=63221,e.Ccaron=268,e.Ccedilla=199,e.Ccedillaacute=7688,e.Ccedillasmall=63463,e.Ccircle=9400,e.Ccircumflex=264,e.Cdot=266,e.Cdotaccent=266,e.Cedillasmall=63416,e.Chaarmenian=1353,e.Cheabkhasiancyrillic=1212,e.Checyrillic=1063,e.Chedescenderabkhasiancyrillic=1214,e.Chedescendercyrillic=1206,e.Chedieresiscyrillic=1268,e.Cheharmenian=1347,e.Chekhakassiancyrillic=1227,e.Cheverticalstrokecyrillic=1208,e.Chi=935,e.Chook=391,e.Circumflexsmall=63222,e.Cmonospace=65315,e.Coarmenian=1361,e.Csmall=63331,e.D=68,e.DZ=497,e.DZcaron=452,e.Daarmenian=1332,e.Dafrican=393,e.Dcaron=270,e.Dcedilla=7696,e.Dcircle=9401,e.Dcircumflexbelow=7698,e.Dcroat=272,e.Ddotaccent=7690,e.Ddotbelow=7692,e.Decyrillic=1044,e.Deicoptic=1006,e.Delta=8710,e.Deltagreek=916,e.Dhook=394,e.Dieresis=63179,e.DieresisAcute=63180,e.DieresisGrave=63181,e.Dieresissmall=63400,e.Digammagreek=988,e.Djecyrillic=1026,e.Dlinebelow=7694,e.Dmonospace=65316,e.Dotaccentsmall=63223,e.Dslash=272,e.Dsmall=63332,e.Dtopbar=395,e.Dz=498,e.Dzcaron=453,e.Dzeabkhasiancyrillic=1248,e.Dzecyrillic=1029,e.Dzhecyrillic=1039,e.E=69,e.Eacute=201,e.Eacutesmall=63465,e.Ebreve=276,e.Ecaron=282,e.Ecedillabreve=7708,e.Echarmenian=1333,e.Ecircle=9402,e.Ecircumflex=202,e.Ecircumflexacute=7870,e.Ecircumflexbelow=7704,e.Ecircumflexdotbelow=7878,e.Ecircumflexgrave=7872,e.Ecircumflexhookabove=7874,e.Ecircumflexsmall=63466,e.Ecircumflextilde=7876,e.Ecyrillic=1028,e.Edblgrave=516,e.Edieresis=203,e.Edieresissmall=63467,e.Edot=278,e.Edotaccent=278,e.Edotbelow=7864,e.Efcyrillic=1060,e.Egrave=200,e.Egravesmall=63464,e.Eharmenian=1335,e.Ehookabove=7866,e.Eightroman=8551,e.Einvertedbreve=518,e.Eiotifiedcyrillic=1124,e.Elcyrillic=1051,e.Elevenroman=8554,e.Emacron=274,e.Emacronacute=7702,e.Emacrongrave=7700,e.Emcyrillic=1052,e.Emonospace=65317,e.Encyrillic=1053,e.Endescendercyrillic=1186,e.Eng=330,e.Enghecyrillic=1188,e.Enhookcyrillic=1223,e.Eogonek=280,e.Eopen=400,e.Epsilon=917,e.Epsilontonos=904,e.Ercyrillic=1056,e.Ereversed=398,e.Ereversedcyrillic=1069,e.Escyrillic=1057,e.Esdescendercyrillic=1194,e.Esh=425,e.Esmall=63333,e.Eta=919,e.Etarmenian=1336,e.Etatonos=905,e.Eth=208,e.Ethsmall=63472,e.Etilde=7868,e.Etildebelow=7706,e.Euro=8364,e.Ezh=439,e.Ezhcaron=494,e.Ezhreversed=440,e.F=70,e.Fcircle=9403,e.Fdotaccent=7710,e.Feharmenian=1366,e.Feicoptic=996,e.Fhook=401,e.Fitacyrillic=1138,e.Fiveroman=8548,e.Fmonospace=65318,e.Fourroman=8547,e.Fsmall=63334,e.G=71,e.GBsquare=13191,e.Gacute=500,e.Gamma=915,e.Gammaafrican=404,e.Gangiacoptic=1002,e.Gbreve=286,e.Gcaron=486,e.Gcedilla=290,e.Gcircle=9404,e.Gcircumflex=284,e.Gcommaaccent=290,e.Gdot=288,e.Gdotaccent=288,e.Gecyrillic=1043,e.Ghadarmenian=1346,e.Ghemiddlehookcyrillic=1172,e.Ghestrokecyrillic=1170,e.Gheupturncyrillic=1168,e.Ghook=403,e.Gimarmenian=1331,e.Gjecyrillic=1027,e.Gmacron=7712,e.Gmonospace=65319,e.Grave=63182,e.Gravesmall=63328,e.Gsmall=63335,e.Gsmallhook=667,e.Gstroke=484,e.H=72,e.H18533=9679,e.H18543=9642,e.H18551=9643,e.H22073=9633,e.HPsquare=13259,e.Haabkhasiancyrillic=1192,e.Hadescendercyrillic=1202,e.Hardsigncyrillic=1066,e.Hbar=294,e.Hbrevebelow=7722,e.Hcedilla=7720,e.Hcircle=9405,e.Hcircumflex=292,e.Hdieresis=7718,e.Hdotaccent=7714,e.Hdotbelow=7716,e.Hmonospace=65320,e.Hoarmenian=1344,e.Horicoptic=1e3,e.Hsmall=63336,e.Hungarumlaut=63183,e.Hungarumlautsmall=63224,e.Hzsquare=13200,e.I=73,e.IAcyrillic=1071,e.IJ=306,e.IUcyrillic=1070,e.Iacute=205,e.Iacutesmall=63469,e.Ibreve=300,e.Icaron=463,e.Icircle=9406,e.Icircumflex=206,e.Icircumflexsmall=63470,e.Icyrillic=1030,e.Idblgrave=520,e.Idieresis=207,e.Idieresisacute=7726,e.Idieresiscyrillic=1252,e.Idieresissmall=63471,e.Idot=304,e.Idotaccent=304,e.Idotbelow=7882,e.Iebrevecyrillic=1238,e.Iecyrillic=1045,e.Ifraktur=8465,e.Igrave=204,e.Igravesmall=63468,e.Ihookabove=7880,e.Iicyrillic=1048,e.Iinvertedbreve=522,e.Iishortcyrillic=1049,e.Imacron=298,e.Imacroncyrillic=1250,e.Imonospace=65321,e.Iniarmenian=1339,e.Iocyrillic=1025,e.Iogonek=302,e.Iota=921,e.Iotaafrican=406,e.Iotadieresis=938,e.Iotatonos=906,e.Ismall=63337,e.Istroke=407,e.Itilde=296,e.Itildebelow=7724,e.Izhitsacyrillic=1140,e.Izhitsadblgravecyrillic=1142,e.J=74,e.Jaarmenian=1345,e.Jcircle=9407,e.Jcircumflex=308,e.Jecyrillic=1032,e.Jheharmenian=1355,e.Jmonospace=65322,e.Jsmall=63338,e.K=75,e.KBsquare=13189,e.KKsquare=13261,e.Kabashkircyrillic=1184,e.Kacute=7728,e.Kacyrillic=1050,e.Kadescendercyrillic=1178,e.Kahookcyrillic=1219,e.Kappa=922,e.Kastrokecyrillic=1182,e.Kaverticalstrokecyrillic=1180,e.Kcaron=488,e.Kcedilla=310,e.Kcircle=9408,e.Kcommaaccent=310,e.Kdotbelow=7730,e.Keharmenian=1364,e.Kenarmenian=1343,e.Khacyrillic=1061,e.Kheicoptic=998,e.Khook=408,e.Kjecyrillic=1036,e.Klinebelow=7732,e.Kmonospace=65323,e.Koppacyrillic=1152,e.Koppagreek=990,e.Ksicyrillic=1134,e.Ksmall=63339,e.L=76,e.LJ=455,e.LL=63167,e.Lacute=313,e.Lambda=923,e.Lcaron=317,e.Lcedilla=315,e.Lcircle=9409,e.Lcircumflexbelow=7740,e.Lcommaaccent=315,e.Ldot=319,e.Ldotaccent=319,e.Ldotbelow=7734,e.Ldotbelowmacron=7736,e.Liwnarmenian=1340,e.Lj=456,e.Ljecyrillic=1033,e.Llinebelow=7738,e.Lmonospace=65324,e.Lslash=321,e.Lslashsmall=63225,e.Lsmall=63340,e.M=77,e.MBsquare=13190,e.Macron=63184,e.Macronsmall=63407,e.Macute=7742,e.Mcircle=9410,e.Mdotaccent=7744,e.Mdotbelow=7746,e.Menarmenian=1348,e.Mmonospace=65325,e.Msmall=63341,e.Mturned=412,e.Mu=924,e.N=78,e.NJ=458,e.Nacute=323,e.Ncaron=327,e.Ncedilla=325,e.Ncircle=9411,e.Ncircumflexbelow=7754,e.Ncommaaccent=325,e.Ndotaccent=7748,e.Ndotbelow=7750,e.Nhookleft=413,e.Nineroman=8552,e.Nj=459,e.Njecyrillic=1034,e.Nlinebelow=7752,e.Nmonospace=65326,e.Nowarmenian=1350,e.Nsmall=63342,e.Ntilde=209,e.Ntildesmall=63473,e.Nu=925,e.O=79,e.OE=338,e.OEsmall=63226,e.Oacute=211,e.Oacutesmall=63475,e.Obarredcyrillic=1256,e.Obarreddieresiscyrillic=1258,e.Obreve=334,e.Ocaron=465,e.Ocenteredtilde=415,e.Ocircle=9412,e.Ocircumflex=212,e.Ocircumflexacute=7888,e.Ocircumflexdotbelow=7896,e.Ocircumflexgrave=7890,e.Ocircumflexhookabove=7892,e.Ocircumflexsmall=63476,e.Ocircumflextilde=7894,e.Ocyrillic=1054,e.Odblacute=336,e.Odblgrave=524,e.Odieresis=214,e.Odieresiscyrillic=1254,e.Odieresissmall=63478,e.Odotbelow=7884,e.Ogoneksmall=63227,e.Ograve=210,e.Ogravesmall=63474,e.Oharmenian=1365,e.Ohm=8486,e.Ohookabove=7886,e.Ohorn=416,e.Ohornacute=7898,e.Ohorndotbelow=7906,e.Ohorngrave=7900,e.Ohornhookabove=7902,e.Ohorntilde=7904,e.Ohungarumlaut=336,e.Oi=418,e.Oinvertedbreve=526,e.Omacron=332,e.Omacronacute=7762,e.Omacrongrave=7760,e.Omega=8486,e.Omegacyrillic=1120,e.Omegagreek=937,e.Omegaroundcyrillic=1146,e.Omegatitlocyrillic=1148,e.Omegatonos=911,e.Omicron=927,e.Omicrontonos=908,e.Omonospace=65327,e.Oneroman=8544,e.Oogonek=490,e.Oogonekmacron=492,e.Oopen=390,e.Oslash=216,e.Oslashacute=510,e.Oslashsmall=63480,e.Osmall=63343,e.Ostrokeacute=510,e.Otcyrillic=1150,e.Otilde=213,e.Otildeacute=7756,e.Otildedieresis=7758,e.Otildesmall=63477,e.P=80,e.Pacute=7764,e.Pcircle=9413,e.Pdotaccent=7766,e.Pecyrillic=1055,e.Peharmenian=1354,e.Pemiddlehookcyrillic=1190,e.Phi=934,e.Phook=420,e.Pi=928,e.Piwrarmenian=1363,e.Pmonospace=65328,e.Psi=936,e.Psicyrillic=1136,e.Psmall=63344,e.Q=81,e.Qcircle=9414,e.Qmonospace=65329,e.Qsmall=63345,e.R=82,e.Raarmenian=1356,e.Racute=340,e.Rcaron=344,e.Rcedilla=342,e.Rcircle=9415,e.Rcommaaccent=342,e.Rdblgrave=528,e.Rdotaccent=7768,e.Rdotbelow=7770,e.Rdotbelowmacron=7772,e.Reharmenian=1360,e.Rfraktur=8476,e.Rho=929,e.Ringsmall=63228,e.Rinvertedbreve=530,e.Rlinebelow=7774,e.Rmonospace=65330,e.Rsmall=63346,e.Rsmallinverted=641,e.Rsmallinvertedsuperior=694,e.S=83,e.SF010000=9484,e.SF020000=9492,e.SF030000=9488,e.SF040000=9496,e.SF050000=9532,e.SF060000=9516,e.SF070000=9524,e.SF080000=9500,e.SF090000=9508,e.SF100000=9472,e.SF110000=9474,e.SF190000=9569,e.SF200000=9570,e.SF210000=9558,e.SF220000=9557,e.SF230000=9571,e.SF240000=9553,e.SF250000=9559,e.SF260000=9565,e.SF270000=9564,e.SF280000=9563,e.SF360000=9566,e.SF370000=9567,e.SF380000=9562,e.SF390000=9556,e.SF400000=9577,e.SF410000=9574,e.SF420000=9568,e.SF430000=9552,e.SF440000=9580,e.SF450000=9575,e.SF460000=9576,e.SF470000=9572,e.SF480000=9573,e.SF490000=9561,e.SF500000=9560,e.SF510000=9554,e.SF520000=9555,e.SF530000=9579,e.SF540000=9578,e.Sacute=346,e.Sacutedotaccent=7780,e.Sampigreek=992,e.Scaron=352,e.Scarondotaccent=7782,e.Scaronsmall=63229,e.Scedilla=350,e.Schwa=399,e.Schwacyrillic=1240,e.Schwadieresiscyrillic=1242,e.Scircle=9416,e.Scircumflex=348,e.Scommaaccent=536,e.Sdotaccent=7776,e.Sdotbelow=7778,e.Sdotbelowdotaccent=7784,e.Seharmenian=1357,e.Sevenroman=8550,e.Shaarmenian=1351,e.Shacyrillic=1064,e.Shchacyrillic=1065,e.Sheicoptic=994,e.Shhacyrillic=1210,e.Shimacoptic=1004,e.Sigma=931,e.Sixroman=8549,e.Smonospace=65331,e.Softsigncyrillic=1068,e.Ssmall=63347,e.Stigmagreek=986,e.T=84,e.Tau=932,e.Tbar=358,e.Tcaron=356,e.Tcedilla=354,e.Tcircle=9417,e.Tcircumflexbelow=7792,e.Tcommaaccent=354,e.Tdotaccent=7786,e.Tdotbelow=7788,e.Tecyrillic=1058,e.Tedescendercyrillic=1196,e.Tenroman=8553,e.Tetsecyrillic=1204,e.Theta=920,e.Thook=428,e.Thorn=222,e.Thornsmall=63486,e.Threeroman=8546,e.Tildesmall=63230,e.Tiwnarmenian=1359,e.Tlinebelow=7790,e.Tmonospace=65332,e.Toarmenian=1337,e.Tonefive=444,e.Tonesix=388,e.Tonetwo=423,e.Tretroflexhook=430,e.Tsecyrillic=1062,e.Tshecyrillic=1035,e.Tsmall=63348,e.Twelveroman=8555,e.Tworoman=8545,e.U=85,e.Uacute=218,e.Uacutesmall=63482,e.Ubreve=364,e.Ucaron=467,e.Ucircle=9418,e.Ucircumflex=219,e.Ucircumflexbelow=7798,e.Ucircumflexsmall=63483,e.Ucyrillic=1059,e.Udblacute=368,e.Udblgrave=532,e.Udieresis=220,e.Udieresisacute=471,e.Udieresisbelow=7794,e.Udieresiscaron=473,e.Udieresiscyrillic=1264,e.Udieresisgrave=475,e.Udieresismacron=469,e.Udieresissmall=63484,e.Udotbelow=7908,e.Ugrave=217,e.Ugravesmall=63481,e.Uhookabove=7910,e.Uhorn=431,e.Uhornacute=7912,e.Uhorndotbelow=7920,e.Uhorngrave=7914,e.Uhornhookabove=7916,e.Uhorntilde=7918,e.Uhungarumlaut=368,e.Uhungarumlautcyrillic=1266,e.Uinvertedbreve=534,e.Ukcyrillic=1144,e.Umacron=362,e.Umacroncyrillic=1262,e.Umacrondieresis=7802,e.Umonospace=65333,e.Uogonek=370,e.Upsilon=933,e.Upsilon1=978,e.Upsilonacutehooksymbolgreek=979,e.Upsilonafrican=433,e.Upsilondieresis=939,e.Upsilondieresishooksymbolgreek=980,e.Upsilonhooksymbol=978,e.Upsilontonos=910,e.Uring=366,e.Ushortcyrillic=1038,e.Usmall=63349,e.Ustraightcyrillic=1198,e.Ustraightstrokecyrillic=1200,e.Utilde=360,e.Utildeacute=7800,e.Utildebelow=7796,e.V=86,e.Vcircle=9419,e.Vdotbelow=7806,e.Vecyrillic=1042,e.Vewarmenian=1358,e.Vhook=434,e.Vmonospace=65334,e.Voarmenian=1352,e.Vsmall=63350,e.Vtilde=7804,e.W=87,e.Wacute=7810,e.Wcircle=9420,e.Wcircumflex=372,e.Wdieresis=7812,e.Wdotaccent=7814,e.Wdotbelow=7816,e.Wgrave=7808,e.Wmonospace=65335,e.Wsmall=63351,e.X=88,e.Xcircle=9421,e.Xdieresis=7820,e.Xdotaccent=7818,e.Xeharmenian=1341,e.Xi=926,e.Xmonospace=65336,e.Xsmall=63352,e.Y=89,e.Yacute=221,e.Yacutesmall=63485,e.Yatcyrillic=1122,e.Ycircle=9422,e.Ycircumflex=374,e.Ydieresis=376,e.Ydieresissmall=63487,e.Ydotaccent=7822,e.Ydotbelow=7924,e.Yericyrillic=1067,e.Yerudieresiscyrillic=1272,e.Ygrave=7922,e.Yhook=435,e.Yhookabove=7926,e.Yiarmenian=1349,e.Yicyrillic=1031,e.Yiwnarmenian=1362,e.Ymonospace=65337,e.Ysmall=63353,e.Ytilde=7928,e.Yusbigcyrillic=1130,e.Yusbigiotifiedcyrillic=1132,e.Yuslittlecyrillic=1126,e.Yuslittleiotifiedcyrillic=1128,e.Z=90,e.Zaarmenian=1334,e.Zacute=377,e.Zcaron=381,e.Zcaronsmall=63231,e.Zcircle=9423,e.Zcircumflex=7824,e.Zdot=379,e.Zdotaccent=379,e.Zdotbelow=7826,e.Zecyrillic=1047,e.Zedescendercyrillic=1176,e.Zedieresiscyrillic=1246,e.Zeta=918,e.Zhearmenian=1338,e.Zhebrevecyrillic=1217,e.Zhecyrillic=1046,e.Zhedescendercyrillic=1174,e.Zhedieresiscyrillic=1244,e.Zlinebelow=7828,e.Zmonospace=65338,e.Zsmall=63354,e.Zstroke=437,e.a=97,e.aabengali=2438,e.aacute=225,e.aadeva=2310,e.aagujarati=2694,e.aagurmukhi=2566,e.aamatragurmukhi=2622,e.aarusquare=13059,e.aavowelsignbengali=2494,e.aavowelsigndeva=2366,e.aavowelsigngujarati=2750,e.abbreviationmarkarmenian=1375,e.abbreviationsigndeva=2416,e.abengali=2437,e.abopomofo=12570,e.abreve=259,e.abreveacute=7855,e.abrevecyrillic=1233,e.abrevedotbelow=7863,e.abrevegrave=7857,e.abrevehookabove=7859,e.abrevetilde=7861,e.acaron=462,e.acircle=9424,e.acircumflex=226,e.acircumflexacute=7845,e.acircumflexdotbelow=7853,e.acircumflexgrave=7847,e.acircumflexhookabove=7849,e.acircumflextilde=7851,e.acute=180,e.acutebelowcmb=791,e.acutecmb=769,e.acutecomb=769,e.acutedeva=2388,e.acutelowmod=719,e.acutetonecmb=833,e.acyrillic=1072,e.adblgrave=513,e.addakgurmukhi=2673,e.adeva=2309,e.adieresis=228,e.adieresiscyrillic=1235,e.adieresismacron=479,e.adotbelow=7841,e.adotmacron=481,e.ae=230,e.aeacute=509,e.aekorean=12624,e.aemacron=483,e.afii00208=8213,e.afii08941=8356,e.afii10017=1040,e.afii10018=1041,e.afii10019=1042,e.afii10020=1043,e.afii10021=1044,e.afii10022=1045,e.afii10023=1025,e.afii10024=1046,e.afii10025=1047,e.afii10026=1048,e.afii10027=1049,e.afii10028=1050,e.afii10029=1051,e.afii10030=1052,e.afii10031=1053,e.afii10032=1054,e.afii10033=1055,e.afii10034=1056,e.afii10035=1057,e.afii10036=1058,e.afii10037=1059,e.afii10038=1060,e.afii10039=1061,e.afii10040=1062,e.afii10041=1063,e.afii10042=1064,e.afii10043=1065,e.afii10044=1066,e.afii10045=1067,e.afii10046=1068,e.afii10047=1069,e.afii10048=1070,e.afii10049=1071,e.afii10050=1168,e.afii10051=1026,e.afii10052=1027,e.afii10053=1028,e.afii10054=1029,e.afii10055=1030,e.afii10056=1031,e.afii10057=1032,e.afii10058=1033,e.afii10059=1034,e.afii10060=1035,e.afii10061=1036,e.afii10062=1038,e.afii10063=63172,e.afii10064=63173,e.afii10065=1072,e.afii10066=1073,e.afii10067=1074,e.afii10068=1075,e.afii10069=1076,e.afii10070=1077,e.afii10071=1105,e.afii10072=1078,e.afii10073=1079,e.afii10074=1080,e.afii10075=1081,e.afii10076=1082,e.afii10077=1083,e.afii10078=1084,e.afii10079=1085,e.afii10080=1086,e.afii10081=1087,e.afii10082=1088,e.afii10083=1089,e.afii10084=1090,e.afii10085=1091,e.afii10086=1092,e.afii10087=1093,e.afii10088=1094,e.afii10089=1095,e.afii10090=1096,e.afii10091=1097,e.afii10092=1098,e.afii10093=1099,e.afii10094=1100,e.afii10095=1101,e.afii10096=1102,e.afii10097=1103,e.afii10098=1169,e.afii10099=1106,e.afii10100=1107,e.afii10101=1108,e.afii10102=1109,e.afii10103=1110,e.afii10104=1111,e.afii10105=1112,e.afii10106=1113,e.afii10107=1114,e.afii10108=1115,e.afii10109=1116,e.afii10110=1118,e.afii10145=1039,e.afii10146=1122,e.afii10147=1138,e.afii10148=1140,e.afii10192=63174,e.afii10193=1119,e.afii10194=1123,e.afii10195=1139,e.afii10196=1141,e.afii10831=63175,e.afii10832=63176,e.afii10846=1241,e.afii299=8206,e.afii300=8207,e.afii301=8205,e.afii57381=1642,e.afii57388=1548,e.afii57392=1632,e.afii57393=1633,e.afii57394=1634,e.afii57395=1635,e.afii57396=1636,e.afii57397=1637,e.afii57398=1638,e.afii57399=1639,e.afii57400=1640,e.afii57401=1641,e.afii57403=1563,e.afii57407=1567,e.afii57409=1569,e.afii57410=1570,e.afii57411=1571,e.afii57412=1572,e.afii57413=1573,e.afii57414=1574,e.afii57415=1575,e.afii57416=1576,e.afii57417=1577,e.afii57418=1578,e.afii57419=1579,e.afii57420=1580,e.afii57421=1581,e.afii57422=1582,e.afii57423=1583,e.afii57424=1584,e.afii57425=1585,e.afii57426=1586,e.afii57427=1587,e.afii57428=1588,e.afii57429=1589,e.afii57430=1590,e.afii57431=1591,e.afii57432=1592,e.afii57433=1593,e.afii57434=1594,e.afii57440=1600,e.afii57441=1601,e.afii57442=1602,e.afii57443=1603,e.afii57444=1604,e.afii57445=1605,e.afii57446=1606,e.afii57448=1608,e.afii57449=1609,e.afii57450=1610,e.afii57451=1611,e.afii57452=1612,e.afii57453=1613,e.afii57454=1614,e.afii57455=1615,e.afii57456=1616,e.afii57457=1617,e.afii57458=1618,e.afii57470=1607,e.afii57505=1700,e.afii57506=1662,e.afii57507=1670,e.afii57508=1688,e.afii57509=1711,e.afii57511=1657,e.afii57512=1672,e.afii57513=1681,e.afii57514=1722,e.afii57519=1746,e.afii57534=1749,e.afii57636=8362,e.afii57645=1470,e.afii57658=1475,e.afii57664=1488,e.afii57665=1489,e.afii57666=1490,e.afii57667=1491,e.afii57668=1492,e.afii57669=1493,e.afii57670=1494,e.afii57671=1495,e.afii57672=1496,e.afii57673=1497,e.afii57674=1498,e.afii57675=1499,e.afii57676=1500,e.afii57677=1501,e.afii57678=1502,e.afii57679=1503,e.afii57680=1504,e.afii57681=1505,e.afii57682=1506,e.afii57683=1507,e.afii57684=1508,e.afii57685=1509,e.afii57686=1510,e.afii57687=1511,e.afii57688=1512,e.afii57689=1513,e.afii57690=1514,e.afii57694=64298,e.afii57695=64299,e.afii57700=64331,e.afii57705=64287,e.afii57716=1520,e.afii57717=1521,e.afii57718=1522,e.afii57723=64309,e.afii57793=1460,e.afii57794=1461,e.afii57795=1462,e.afii57796=1467,e.afii57797=1464,e.afii57798=1463,e.afii57799=1456,e.afii57800=1458,e.afii57801=1457,e.afii57802=1459,e.afii57803=1474,e.afii57804=1473,e.afii57806=1465,e.afii57807=1468,e.afii57839=1469,e.afii57841=1471,e.afii57842=1472,e.afii57929=700,e.afii61248=8453,e.afii61289=8467,e.afii61352=8470,e.afii61573=8236,e.afii61574=8237,e.afii61575=8238,e.afii61664=8204,e.afii63167=1645,e.afii64937=701,e.agrave=224,e.agujarati=2693,e.agurmukhi=2565,e.ahiragana=12354,e.ahookabove=7843,e.aibengali=2448,e.aibopomofo=12574,e.aideva=2320,e.aiecyrillic=1237,e.aigujarati=2704,e.aigurmukhi=2576,e.aimatragurmukhi=2632,e.ainarabic=1593,e.ainfinalarabic=65226,e.aininitialarabic=65227,e.ainmedialarabic=65228,e.ainvertedbreve=515,e.aivowelsignbengali=2504,e.aivowelsigndeva=2376,e.aivowelsigngujarati=2760,e.akatakana=12450,e.akatakanahalfwidth=65393,e.akorean=12623,e.alef=1488,e.alefarabic=1575,e.alefdageshhebrew=64304,e.aleffinalarabic=65166,e.alefhamzaabovearabic=1571,e.alefhamzaabovefinalarabic=65156,e.alefhamzabelowarabic=1573,e.alefhamzabelowfinalarabic=65160,e.alefhebrew=1488,e.aleflamedhebrew=64335,e.alefmaddaabovearabic=1570,e.alefmaddaabovefinalarabic=65154,e.alefmaksuraarabic=1609,e.alefmaksurafinalarabic=65264,e.alefmaksurainitialarabic=65267,e.alefmaksuramedialarabic=65268,e.alefpatahhebrew=64302,e.alefqamatshebrew=64303,e.aleph=8501,e.allequal=8780,e.alpha=945,e.alphatonos=940,e.amacron=257,e.amonospace=65345,e.ampersand=38,e.ampersandmonospace=65286,e.ampersandsmall=63270,e.amsquare=13250,e.anbopomofo=12578,e.angbopomofo=12580,e.angbracketleft=12296,e.angbracketright=12297,e.angkhankhuthai=3674,e.angle=8736,e.anglebracketleft=12296,e.anglebracketleftvertical=65087,e.anglebracketright=12297,e.anglebracketrightvertical=65088,e.angleleft=9001,e.angleright=9002,e.angstrom=8491,e.anoteleia=903,e.anudattadeva=2386,e.anusvarabengali=2434,e.anusvaradeva=2306,e.anusvaragujarati=2690,e.aogonek=261,e.apaatosquare=13056,e.aparen=9372,e.apostrophearmenian=1370,e.apostrophemod=700,e.apple=63743,e.approaches=8784,e.approxequal=8776,e.approxequalorimage=8786,e.approximatelyequal=8773,e.araeaekorean=12686,e.araeakorean=12685,e.arc=8978,e.arighthalfring=7834,e.aring=229,e.aringacute=507,e.aringbelow=7681,e.arrowboth=8596,e.arrowdashdown=8675,e.arrowdashleft=8672,e.arrowdashright=8674,e.arrowdashup=8673,e.arrowdblboth=8660,e.arrowdbldown=8659,e.arrowdblleft=8656,e.arrowdblright=8658,e.arrowdblup=8657,e.arrowdown=8595,e.arrowdownleft=8601,e.arrowdownright=8600,e.arrowdownwhite=8681,e.arrowheaddownmod=709,e.arrowheadleftmod=706,e.arrowheadrightmod=707,e.arrowheadupmod=708,e.arrowhorizex=63719,e.arrowleft=8592,e.arrowleftdbl=8656,e.arrowleftdblstroke=8653,e.arrowleftoverright=8646,e.arrowleftwhite=8678,e.arrowright=8594,e.arrowrightdblstroke=8655,e.arrowrightheavy=10142,e.arrowrightoverleft=8644,e.arrowrightwhite=8680,e.arrowtableft=8676,e.arrowtabright=8677,e.arrowup=8593,e.arrowupdn=8597,e.arrowupdnbse=8616,e.arrowupdownbase=8616,e.arrowupleft=8598,e.arrowupleftofdown=8645,e.arrowupright=8599,e.arrowupwhite=8679,e.arrowvertex=63718,e.asciicircum=94,e.asciicircummonospace=65342,e.asciitilde=126,e.asciitildemonospace=65374,e.ascript=593,e.ascriptturned=594,e.asmallhiragana=12353,e.asmallkatakana=12449,e.asmallkatakanahalfwidth=65383,e.asterisk=42,e.asteriskaltonearabic=1645,e.asteriskarabic=1645,e.asteriskmath=8727,e.asteriskmonospace=65290,e.asterisksmall=65121,e.asterism=8258,e.asuperior=63209,e.asymptoticallyequal=8771,e.at=64,e.atilde=227,e.atmonospace=65312,e.atsmall=65131,e.aturned=592,e.aubengali=2452,e.aubopomofo=12576,e.audeva=2324,e.augujarati=2708,e.augurmukhi=2580,e.aulengthmarkbengali=2519,e.aumatragurmukhi=2636,e.auvowelsignbengali=2508,e.auvowelsigndeva=2380,e.auvowelsigngujarati=2764,e.avagrahadeva=2365,e.aybarmenian=1377,e.ayin=1506,e.ayinaltonehebrew=64288,e.ayinhebrew=1506,e.b=98,e.babengali=2476,e.backslash=92,e.backslashmonospace=65340,e.badeva=2348,e.bagujarati=2732,e.bagurmukhi=2604,e.bahiragana=12400,e.bahtthai=3647,e.bakatakana=12496,e.bar=124,e.barmonospace=65372,e.bbopomofo=12549,e.bcircle=9425,e.bdotaccent=7683,e.bdotbelow=7685,e.beamedsixteenthnotes=9836,e.because=8757,e.becyrillic=1073,e.beharabic=1576,e.behfinalarabic=65168,e.behinitialarabic=65169,e.behiragana=12409,e.behmedialarabic=65170,e.behmeeminitialarabic=64671,e.behmeemisolatedarabic=64520,e.behnoonfinalarabic=64621,e.bekatakana=12505,e.benarmenian=1378,e.bet=1489,e.beta=946,e.betasymbolgreek=976,e.betdagesh=64305,e.betdageshhebrew=64305,e.bethebrew=1489,e.betrafehebrew=64332,e.bhabengali=2477,e.bhadeva=2349,e.bhagujarati=2733,e.bhagurmukhi=2605,e.bhook=595,e.bihiragana=12403,e.bikatakana=12499,e.bilabialclick=664,e.bindigurmukhi=2562,e.birusquare=13105,e.blackcircle=9679,e.blackdiamond=9670,e.blackdownpointingtriangle=9660,e.blackleftpointingpointer=9668,e.blackleftpointingtriangle=9664,e.blacklenticularbracketleft=12304,e.blacklenticularbracketleftvertical=65083,e.blacklenticularbracketright=12305,e.blacklenticularbracketrightvertical=65084,e.blacklowerlefttriangle=9699,e.blacklowerrighttriangle=9698,e.blackrectangle=9644,e.blackrightpointingpointer=9658,e.blackrightpointingtriangle=9654,e.blacksmallsquare=9642,e.blacksmilingface=9787,e.blacksquare=9632,e.blackstar=9733,e.blackupperlefttriangle=9700,e.blackupperrighttriangle=9701,e.blackuppointingsmalltriangle=9652,e.blackuppointingtriangle=9650,e.blank=9251,e.blinebelow=7687,e.block=9608,e.bmonospace=65346,e.bobaimaithai=3610,e.bohiragana=12412,e.bokatakana=12508,e.bparen=9373,e.bqsquare=13251,e.braceex=63732,e.braceleft=123,e.braceleftbt=63731,e.braceleftmid=63730,e.braceleftmonospace=65371,e.braceleftsmall=65115,e.bracelefttp=63729,e.braceleftvertical=65079,e.braceright=125,e.bracerightbt=63742,e.bracerightmid=63741,e.bracerightmonospace=65373,e.bracerightsmall=65116,e.bracerighttp=63740,e.bracerightvertical=65080,e.bracketleft=91,e.bracketleftbt=63728,e.bracketleftex=63727,e.bracketleftmonospace=65339,e.bracketlefttp=63726,e.bracketright=93,e.bracketrightbt=63739,e.bracketrightex=63738,e.bracketrightmonospace=65341,e.bracketrighttp=63737,e.breve=728,e.brevebelowcmb=814,e.brevecmb=774,e.breveinvertedbelowcmb=815,e.breveinvertedcmb=785,e.breveinverteddoublecmb=865,e.bridgebelowcmb=810,e.bridgeinvertedbelowcmb=826,e.brokenbar=166,e.bstroke=384,e.bsuperior=63210,e.btopbar=387,e.buhiragana=12406,e.bukatakana=12502,e.bullet=8226,e.bulletinverse=9688,e.bulletoperator=8729,e.bullseye=9678,e.c=99,e.caarmenian=1390,e.cabengali=2458,e.cacute=263,e.cadeva=2330,e.cagujarati=2714,e.cagurmukhi=2586,e.calsquare=13192,e.candrabindubengali=2433,e.candrabinducmb=784,e.candrabindudeva=2305,e.candrabindugujarati=2689,e.capslock=8682,e.careof=8453,e.caron=711,e.caronbelowcmb=812,e.caroncmb=780,e.carriagereturn=8629,e.cbopomofo=12568,e.ccaron=269,e.ccedilla=231,e.ccedillaacute=7689,e.ccircle=9426,e.ccircumflex=265,e.ccurl=597,e.cdot=267,e.cdotaccent=267,e.cdsquare=13253,e.cedilla=184,e.cedillacmb=807,e.cent=162,e.centigrade=8451,e.centinferior=63199,e.centmonospace=65504,e.centoldstyle=63394,e.centsuperior=63200,e.chaarmenian=1401,e.chabengali=2459,e.chadeva=2331,e.chagujarati=2715,e.chagurmukhi=2587,e.chbopomofo=12564,e.cheabkhasiancyrillic=1213,e.checkmark=10003,e.checyrillic=1095,e.chedescenderabkhasiancyrillic=1215,e.chedescendercyrillic=1207,e.chedieresiscyrillic=1269,e.cheharmenian=1395,e.chekhakassiancyrillic=1228,e.cheverticalstrokecyrillic=1209,e.chi=967,e.chieuchacirclekorean=12919,e.chieuchaparenkorean=12823,e.chieuchcirclekorean=12905,e.chieuchkorean=12618,e.chieuchparenkorean=12809,e.chochangthai=3594,e.chochanthai=3592,e.chochingthai=3593,e.chochoethai=3596,e.chook=392,e.cieucacirclekorean=12918,e.cieucaparenkorean=12822,e.cieuccirclekorean=12904,e.cieuckorean=12616,e.cieucparenkorean=12808,e.cieucuparenkorean=12828,e.circle=9675,e.circlecopyrt=169,e.circlemultiply=8855,e.circleot=8857,e.circleplus=8853,e.circlepostalmark=12342,e.circlewithlefthalfblack=9680,e.circlewithrighthalfblack=9681,e.circumflex=710,e.circumflexbelowcmb=813,e.circumflexcmb=770,e.clear=8999,e.clickalveolar=450,e.clickdental=448,e.clicklateral=449,e.clickretroflex=451,e.club=9827,e.clubsuitblack=9827,e.clubsuitwhite=9831,e.cmcubedsquare=13220,e.cmonospace=65347,e.cmsquaredsquare=13216,e.coarmenian=1409,e.colon=58,e.colonmonetary=8353,e.colonmonospace=65306,e.colonsign=8353,e.colonsmall=65109,e.colontriangularhalfmod=721,e.colontriangularmod=720,e.comma=44,e.commaabovecmb=787,e.commaaboverightcmb=789,e.commaaccent=63171,e.commaarabic=1548,e.commaarmenian=1373,e.commainferior=63201,e.commamonospace=65292,e.commareversedabovecmb=788,e.commareversedmod=701,e.commasmall=65104,e.commasuperior=63202,e.commaturnedabovecmb=786,e.commaturnedmod=699,e.compass=9788,e.congruent=8773,e.contourintegral=8750,e.control=8963,e.controlACK=6,e.controlBEL=7,e.controlBS=8,e.controlCAN=24,e.controlCR=13,e.controlDC1=17,e.controlDC2=18,e.controlDC3=19,e.controlDC4=20,e.controlDEL=127,e.controlDLE=16,e.controlEM=25,e.controlENQ=5,e.controlEOT=4,e.controlESC=27,e.controlETB=23,e.controlETX=3,e.controlFF=12,e.controlFS=28,e.controlGS=29,e.controlHT=9,e.controlLF=10,e.controlNAK=21,e.controlNULL=0,e.controlRS=30,e.controlSI=15,e.controlSO=14,e.controlSOT=2,e.controlSTX=1,e.controlSUB=26,e.controlSYN=22,e.controlUS=31,e.controlVT=11,e.copyright=169,e.copyrightsans=63721,e.copyrightserif=63193,e.cornerbracketleft=12300,e.cornerbracketlefthalfwidth=65378,e.cornerbracketleftvertical=65089,e.cornerbracketright=12301,e.cornerbracketrighthalfwidth=65379,e.cornerbracketrightvertical=65090,e.corporationsquare=13183,e.cosquare=13255,e.coverkgsquare=13254,e.cparen=9374,e.cruzeiro=8354,e.cstretched=663,e.curlyand=8911,e.curlyor=8910,e.currency=164,e.cyrBreve=63185,e.cyrFlex=63186,e.cyrbreve=63188,e.cyrflex=63189,e.d=100,e.daarmenian=1380,e.dabengali=2470,e.dadarabic=1590,e.dadeva=2342,e.dadfinalarabic=65214,e.dadinitialarabic=65215,e.dadmedialarabic=65216,e.dagesh=1468,e.dageshhebrew=1468,e.dagger=8224,e.daggerdbl=8225,e.dagujarati=2726,e.dagurmukhi=2598,e.dahiragana=12384,e.dakatakana=12480,e.dalarabic=1583,e.dalet=1491,e.daletdagesh=64307,e.daletdageshhebrew=64307,e.dalethebrew=1491,e.dalfinalarabic=65194,e.dammaarabic=1615,e.dammalowarabic=1615,e.dammatanaltonearabic=1612,e.dammatanarabic=1612,e.danda=2404,e.dargahebrew=1447,e.dargalefthebrew=1447,e.dasiapneumatacyrilliccmb=1157,e.dblGrave=63187,e.dblanglebracketleft=12298,e.dblanglebracketleftvertical=65085,e.dblanglebracketright=12299,e.dblanglebracketrightvertical=65086,e.dblarchinvertedbelowcmb=811,e.dblarrowleft=8660,e.dblarrowright=8658,e.dbldanda=2405,e.dblgrave=63190,e.dblgravecmb=783,e.dblintegral=8748,e.dbllowline=8215,e.dbllowlinecmb=819,e.dbloverlinecmb=831,e.dblprimemod=698,e.dblverticalbar=8214,e.dblverticallineabovecmb=782,e.dbopomofo=12553,e.dbsquare=13256,e.dcaron=271,e.dcedilla=7697,e.dcircle=9427,e.dcircumflexbelow=7699,e.dcroat=273,e.ddabengali=2465,e.ddadeva=2337,e.ddagujarati=2721,e.ddagurmukhi=2593,e.ddalarabic=1672,e.ddalfinalarabic=64393,e.dddhadeva=2396,e.ddhabengali=2466,e.ddhadeva=2338,e.ddhagujarati=2722,e.ddhagurmukhi=2594,e.ddotaccent=7691,e.ddotbelow=7693,e.decimalseparatorarabic=1643,e.decimalseparatorpersian=1643,e.decyrillic=1076,e.degree=176,e.dehihebrew=1453,e.dehiragana=12391,e.deicoptic=1007,e.dekatakana=12487,e.deleteleft=9003,e.deleteright=8998,e.delta=948,e.deltaturned=397,e.denominatorminusonenumeratorbengali=2552,e.dezh=676,e.dhabengali=2471,e.dhadeva=2343,e.dhagujarati=2727,e.dhagurmukhi=2599,e.dhook=599,e.dialytikatonos=901,e.dialytikatonoscmb=836,e.diamond=9830,e.diamondsuitwhite=9826,e.dieresis=168,e.dieresisacute=63191,e.dieresisbelowcmb=804,e.dieresiscmb=776,e.dieresisgrave=63192,e.dieresistonos=901,e.dihiragana=12386,e.dikatakana=12482,e.dittomark=12291,e.divide=247,e.divides=8739,e.divisionslash=8725,e.djecyrillic=1106,e.dkshade=9619,e.dlinebelow=7695,e.dlsquare=13207,e.dmacron=273,e.dmonospace=65348,e.dnblock=9604,e.dochadathai=3598,e.dodekthai=3604,e.dohiragana=12393,e.dokatakana=12489,e.dollar=36,e.dollarinferior=63203,e.dollarmonospace=65284,e.dollaroldstyle=63268,e.dollarsmall=65129,e.dollarsuperior=63204,e.dong=8363,e.dorusquare=13094,e.dotaccent=729,e.dotaccentcmb=775,e.dotbelowcmb=803,e.dotbelowcomb=803,e.dotkatakana=12539,e.dotlessi=305,e.dotlessj=63166,e.dotlessjstrokehook=644,e.dotmath=8901,e.dottedcircle=9676,e.doubleyodpatah=64287,e.doubleyodpatahhebrew=64287,e.downtackbelowcmb=798,e.downtackmod=725,e.dparen=9375,e.dsuperior=63211,e.dtail=598,e.dtopbar=396,e.duhiragana=12389,e.dukatakana=12485,e.dz=499,e.dzaltone=675,e.dzcaron=454,e.dzcurl=677,e.dzeabkhasiancyrillic=1249,e.dzecyrillic=1109,e.dzhecyrillic=1119,e.e=101,e.eacute=233,e.earth=9793,e.ebengali=2447,e.ebopomofo=12572,e.ebreve=277,e.ecandradeva=2317,e.ecandragujarati=2701,e.ecandravowelsigndeva=2373,e.ecandravowelsigngujarati=2757,e.ecaron=283,e.ecedillabreve=7709,e.echarmenian=1381,e.echyiwnarmenian=1415,e.ecircle=9428,e.ecircumflex=234,e.ecircumflexacute=7871,e.ecircumflexbelow=7705,e.ecircumflexdotbelow=7879,e.ecircumflexgrave=7873,e.ecircumflexhookabove=7875,e.ecircumflextilde=7877,e.ecyrillic=1108,e.edblgrave=517,e.edeva=2319,e.edieresis=235,e.edot=279,e.edotaccent=279,e.edotbelow=7865,e.eegurmukhi=2575,e.eematragurmukhi=2631,e.efcyrillic=1092,e.egrave=232,e.egujarati=2703,e.eharmenian=1383,e.ehbopomofo=12573,e.ehiragana=12360,e.ehookabove=7867,e.eibopomofo=12575,e.eight=56,e.eightarabic=1640,e.eightbengali=2542,e.eightcircle=9319,e.eightcircleinversesansserif=10129,e.eightdeva=2414,e.eighteencircle=9329,e.eighteenparen=9349,e.eighteenperiod=9369,e.eightgujarati=2798,e.eightgurmukhi=2670,e.eighthackarabic=1640,e.eighthangzhou=12328,e.eighthnotebeamed=9835,e.eightideographicparen=12839,e.eightinferior=8328,e.eightmonospace=65304,e.eightoldstyle=63288,e.eightparen=9339,e.eightperiod=9359,e.eightpersian=1784,e.eightroman=8567,e.eightsuperior=8312,e.eightthai=3672,e.einvertedbreve=519,e.eiotifiedcyrillic=1125,e.ekatakana=12456,e.ekatakanahalfwidth=65396,e.ekonkargurmukhi=2676,e.ekorean=12628,e.elcyrillic=1083,e.element=8712,e.elevencircle=9322,e.elevenparen=9342,e.elevenperiod=9362,e.elevenroman=8570,e.ellipsis=8230,e.ellipsisvertical=8942,e.emacron=275,e.emacronacute=7703,e.emacrongrave=7701,e.emcyrillic=1084,e.emdash=8212,e.emdashvertical=65073,e.emonospace=65349,e.emphasismarkarmenian=1371,e.emptyset=8709,e.enbopomofo=12579,e.encyrillic=1085,e.endash=8211,e.endashvertical=65074,e.endescendercyrillic=1187,e.eng=331,e.engbopomofo=12581,e.enghecyrillic=1189,e.enhookcyrillic=1224,e.enspace=8194,e.eogonek=281,e.eokorean=12627,e.eopen=603,e.eopenclosed=666,e.eopenreversed=604,e.eopenreversedclosed=606,e.eopenreversedhook=605,e.eparen=9376,e.epsilon=949,e.epsilontonos=941,e.equal=61,e.equalmonospace=65309,e.equalsmall=65126,e.equalsuperior=8316,e.equivalence=8801,e.erbopomofo=12582,e.ercyrillic=1088,e.ereversed=600,e.ereversedcyrillic=1101,e.escyrillic=1089,e.esdescendercyrillic=1195,e.esh=643,e.eshcurl=646,e.eshortdeva=2318,e.eshortvowelsigndeva=2374,e.eshreversedloop=426,e.eshsquatreversed=645,e.esmallhiragana=12359,e.esmallkatakana=12455,e.esmallkatakanahalfwidth=65386,e.estimated=8494,e.esuperior=63212,e.eta=951,e.etarmenian=1384,e.etatonos=942,e.eth=240,e.etilde=7869,e.etildebelow=7707,e.etnahtafoukhhebrew=1425,e.etnahtafoukhlefthebrew=1425,e.etnahtahebrew=1425,e.etnahtalefthebrew=1425,e.eturned=477,e.eukorean=12641,e.euro=8364,e.evowelsignbengali=2503,e.evowelsigndeva=2375,e.evowelsigngujarati=2759,e.exclam=33,e.exclamarmenian=1372,e.exclamdbl=8252,e.exclamdown=161,e.exclamdownsmall=63393,e.exclammonospace=65281,e.exclamsmall=63265,e.existential=8707,e.ezh=658,e.ezhcaron=495,e.ezhcurl=659,e.ezhreversed=441,e.ezhtail=442,e.f=102,e.fadeva=2398,e.fagurmukhi=2654,e.fahrenheit=8457,e.fathaarabic=1614,e.fathalowarabic=1614,e.fathatanarabic=1611,e.fbopomofo=12552,e.fcircle=9429,e.fdotaccent=7711,e.feharabic=1601,e.feharmenian=1414,e.fehfinalarabic=65234,e.fehinitialarabic=65235,e.fehmedialarabic=65236,e.feicoptic=997,e.female=9792,e.ff=64256,e.f_f=64256,e.ffi=64259,e.f_f_i=64259,e.ffl=64260,e.f_f_l=64260,e.fi=64257,e.f_i=64257,e.fifteencircle=9326,e.fifteenparen=9346,e.fifteenperiod=9366,e.figuredash=8210,e.filledbox=9632,e.filledrect=9644,e.finalkaf=1498,e.finalkafdagesh=64314,e.finalkafdageshhebrew=64314,e.finalkafhebrew=1498,e.finalmem=1501,e.finalmemhebrew=1501,e.finalnun=1503,e.finalnunhebrew=1503,e.finalpe=1507,e.finalpehebrew=1507,e.finaltsadi=1509,e.finaltsadihebrew=1509,e.firsttonechinese=713,e.fisheye=9673,e.fitacyrillic=1139,e.five=53,e.fivearabic=1637,e.fivebengali=2539,e.fivecircle=9316,e.fivecircleinversesansserif=10126,e.fivedeva=2411,e.fiveeighths=8541,e.fivegujarati=2795,e.fivegurmukhi=2667,e.fivehackarabic=1637,e.fivehangzhou=12325,e.fiveideographicparen=12836,e.fiveinferior=8325,e.fivemonospace=65301,e.fiveoldstyle=63285,e.fiveparen=9336,e.fiveperiod=9356,e.fivepersian=1781,e.fiveroman=8564,e.fivesuperior=8309,e.fivethai=3669,e.fl=64258,e.f_l=64258,e.florin=402,e.fmonospace=65350,e.fmsquare=13209,e.fofanthai=3615,e.fofathai=3613,e.fongmanthai=3663,e.forall=8704,e.four=52,e.fourarabic=1636,e.fourbengali=2538,e.fourcircle=9315,e.fourcircleinversesansserif=10125,e.fourdeva=2410,e.fourgujarati=2794,e.fourgurmukhi=2666,e.fourhackarabic=1636,e.fourhangzhou=12324,e.fourideographicparen=12835,e.fourinferior=8324,e.fourmonospace=65300,e.fournumeratorbengali=2551,e.fouroldstyle=63284,e.fourparen=9335,e.fourperiod=9355,e.fourpersian=1780,e.fourroman=8563,e.foursuperior=8308,e.fourteencircle=9325,e.fourteenparen=9345,e.fourteenperiod=9365,e.fourthai=3668,e.fourthtonechinese=715,e.fparen=9377,e.fraction=8260,e.franc=8355,e.g=103,e.gabengali=2455,e.gacute=501,e.gadeva=2327,e.gafarabic=1711,e.gaffinalarabic=64403,e.gafinitialarabic=64404,e.gafmedialarabic=64405,e.gagujarati=2711,e.gagurmukhi=2583,e.gahiragana=12364,e.gakatakana=12460,e.gamma=947,e.gammalatinsmall=611,e.gammasuperior=736,e.gangiacoptic=1003,e.gbopomofo=12557,e.gbreve=287,e.gcaron=487,e.gcedilla=291,e.gcircle=9430,e.gcircumflex=285,e.gcommaaccent=291,e.gdot=289,e.gdotaccent=289,e.gecyrillic=1075,e.gehiragana=12370,e.gekatakana=12466,e.geometricallyequal=8785,e.gereshaccenthebrew=1436,e.gereshhebrew=1523,e.gereshmuqdamhebrew=1437,e.germandbls=223,e.gershayimaccenthebrew=1438,e.gershayimhebrew=1524,e.getamark=12307,e.ghabengali=2456,e.ghadarmenian=1394,e.ghadeva=2328,e.ghagujarati=2712,e.ghagurmukhi=2584,e.ghainarabic=1594,e.ghainfinalarabic=65230,e.ghaininitialarabic=65231,e.ghainmedialarabic=65232,e.ghemiddlehookcyrillic=1173,e.ghestrokecyrillic=1171,e.gheupturncyrillic=1169,e.ghhadeva=2394,e.ghhagurmukhi=2650,e.ghook=608,e.ghzsquare=13203,e.gihiragana=12366,e.gikatakana=12462,e.gimarmenian=1379,e.gimel=1490,e.gimeldagesh=64306,e.gimeldageshhebrew=64306,e.gimelhebrew=1490,e.gjecyrillic=1107,e.glottalinvertedstroke=446,e.glottalstop=660,e.glottalstopinverted=662,e.glottalstopmod=704,e.glottalstopreversed=661,e.glottalstopreversedmod=705,e.glottalstopreversedsuperior=740,e.glottalstopstroke=673,e.glottalstopstrokereversed=674,e.gmacron=7713,e.gmonospace=65351,e.gohiragana=12372,e.gokatakana=12468,e.gparen=9378,e.gpasquare=13228,e.gradient=8711,e.grave=96,e.gravebelowcmb=790,e.gravecmb=768,e.gravecomb=768,e.gravedeva=2387,e.gravelowmod=718,e.gravemonospace=65344,e.gravetonecmb=832,e.greater=62,e.greaterequal=8805,e.greaterequalorless=8923,e.greatermonospace=65310,e.greaterorequivalent=8819,e.greaterorless=8823,e.greateroverequal=8807,e.greatersmall=65125,e.gscript=609,e.gstroke=485,e.guhiragana=12368,e.guillemotleft=171,e.guillemotright=187,e.guilsinglleft=8249,e.guilsinglright=8250,e.gukatakana=12464,e.guramusquare=13080,e.gysquare=13257,e.h=104,e.haabkhasiancyrillic=1193,e.haaltonearabic=1729,e.habengali=2489,e.hadescendercyrillic=1203,e.hadeva=2361,e.hagujarati=2745,e.hagurmukhi=2617,e.haharabic=1581,e.hahfinalarabic=65186,e.hahinitialarabic=65187,e.hahiragana=12399,e.hahmedialarabic=65188,e.haitusquare=13098,e.hakatakana=12495,e.hakatakanahalfwidth=65418,e.halantgurmukhi=2637,e.hamzaarabic=1569,e.hamzalowarabic=1569,e.hangulfiller=12644,e.hardsigncyrillic=1098,e.harpoonleftbarbup=8636,e.harpoonrightbarbup=8640,e.hasquare=13258,e.hatafpatah=1458,e.hatafpatah16=1458,e.hatafpatah23=1458,e.hatafpatah2f=1458,e.hatafpatahhebrew=1458,e.hatafpatahnarrowhebrew=1458,e.hatafpatahquarterhebrew=1458,e.hatafpatahwidehebrew=1458,e.hatafqamats=1459,e.hatafqamats1b=1459,e.hatafqamats28=1459,e.hatafqamats34=1459,e.hatafqamatshebrew=1459,e.hatafqamatsnarrowhebrew=1459,e.hatafqamatsquarterhebrew=1459,e.hatafqamatswidehebrew=1459,e.hatafsegol=1457,e.hatafsegol17=1457,e.hatafsegol24=1457,e.hatafsegol30=1457,e.hatafsegolhebrew=1457,e.hatafsegolnarrowhebrew=1457,e.hatafsegolquarterhebrew=1457,e.hatafsegolwidehebrew=1457,e.hbar=295,e.hbopomofo=12559,e.hbrevebelow=7723,e.hcedilla=7721,e.hcircle=9431,e.hcircumflex=293,e.hdieresis=7719,e.hdotaccent=7715,e.hdotbelow=7717,e.he=1492,e.heart=9829,e.heartsuitblack=9829,e.heartsuitwhite=9825,e.hedagesh=64308,e.hedageshhebrew=64308,e.hehaltonearabic=1729,e.heharabic=1607,e.hehebrew=1492,e.hehfinalaltonearabic=64423,e.hehfinalalttwoarabic=65258,e.hehfinalarabic=65258,e.hehhamzaabovefinalarabic=64421,e.hehhamzaaboveisolatedarabic=64420,e.hehinitialaltonearabic=64424,e.hehinitialarabic=65259,e.hehiragana=12408,e.hehmedialaltonearabic=64425,e.hehmedialarabic=65260,e.heiseierasquare=13179,e.hekatakana=12504,e.hekatakanahalfwidth=65421,e.hekutaarusquare=13110,e.henghook=615,e.herutusquare=13113,e.het=1495,e.hethebrew=1495,e.hhook=614,e.hhooksuperior=689,e.hieuhacirclekorean=12923,e.hieuhaparenkorean=12827,e.hieuhcirclekorean=12909,e.hieuhkorean=12622,e.hieuhparenkorean=12813,e.hihiragana=12402,e.hikatakana=12498,e.hikatakanahalfwidth=65419,e.hiriq=1460,e.hiriq14=1460,e.hiriq21=1460,e.hiriq2d=1460,e.hiriqhebrew=1460,e.hiriqnarrowhebrew=1460,e.hiriqquarterhebrew=1460,e.hiriqwidehebrew=1460,e.hlinebelow=7830,e.hmonospace=65352,e.hoarmenian=1392,e.hohipthai=3627,e.hohiragana=12411,e.hokatakana=12507,e.hokatakanahalfwidth=65422,e.holam=1465,e.holam19=1465,e.holam26=1465,e.holam32=1465,e.holamhebrew=1465,e.holamnarrowhebrew=1465,e.holamquarterhebrew=1465,e.holamwidehebrew=1465,e.honokhukthai=3630,e.hookabovecomb=777,e.hookcmb=777,e.hookpalatalizedbelowcmb=801,e.hookretroflexbelowcmb=802,e.hoonsquare=13122,e.horicoptic=1001,e.horizontalbar=8213,e.horncmb=795,e.hotsprings=9832,e.house=8962,e.hparen=9379,e.hsuperior=688,e.hturned=613,e.huhiragana=12405,e.huiitosquare=13107,e.hukatakana=12501,e.hukatakanahalfwidth=65420,e.hungarumlaut=733,e.hungarumlautcmb=779,e.hv=405,e.hyphen=45,e.hypheninferior=63205,e.hyphenmonospace=65293,e.hyphensmall=65123,e.hyphensuperior=63206,e.hyphentwo=8208,e.i=105,e.iacute=237,e.iacyrillic=1103,e.ibengali=2439,e.ibopomofo=12583,e.ibreve=301,e.icaron=464,e.icircle=9432,e.icircumflex=238,e.icyrillic=1110,e.idblgrave=521,e.ideographearthcircle=12943,e.ideographfirecircle=12939,e.ideographicallianceparen=12863,e.ideographiccallparen=12858,e.ideographiccentrecircle=12965,e.ideographicclose=12294,e.ideographiccomma=12289,e.ideographiccommaleft=65380,e.ideographiccongratulationparen=12855,e.ideographiccorrectcircle=12963,e.ideographicearthparen=12847,e.ideographicenterpriseparen=12861,e.ideographicexcellentcircle=12957,e.ideographicfestivalparen=12864,e.ideographicfinancialcircle=12950,e.ideographicfinancialparen=12854,e.ideographicfireparen=12843,e.ideographichaveparen=12850,e.ideographichighcircle=12964,e.ideographiciterationmark=12293,e.ideographiclaborcircle=12952,e.ideographiclaborparen=12856,e.ideographicleftcircle=12967,e.ideographiclowcircle=12966,e.ideographicmedicinecircle=12969,e.ideographicmetalparen=12846,e.ideographicmoonparen=12842,e.ideographicnameparen=12852,e.ideographicperiod=12290,e.ideographicprintcircle=12958,e.ideographicreachparen=12867,e.ideographicrepresentparen=12857,e.ideographicresourceparen=12862,e.ideographicrightcircle=12968,e.ideographicsecretcircle=12953,e.ideographicselfparen=12866,e.ideographicsocietyparen=12851,e.ideographicspace=12288,e.ideographicspecialparen=12853,e.ideographicstockparen=12849,e.ideographicstudyparen=12859,e.ideographicsunparen=12848,e.ideographicsuperviseparen=12860,e.ideographicwaterparen=12844,e.ideographicwoodparen=12845,e.ideographiczero=12295,e.ideographmetalcircle=12942,e.ideographmooncircle=12938,e.ideographnamecircle=12948,e.ideographsuncircle=12944,e.ideographwatercircle=12940,e.ideographwoodcircle=12941,e.ideva=2311,e.idieresis=239,e.idieresisacute=7727,e.idieresiscyrillic=1253,e.idotbelow=7883,e.iebrevecyrillic=1239,e.iecyrillic=1077,e.ieungacirclekorean=12917,e.ieungaparenkorean=12821,e.ieungcirclekorean=12903,e.ieungkorean=12615,e.ieungparenkorean=12807,e.igrave=236,e.igujarati=2695,e.igurmukhi=2567,e.ihiragana=12356,e.ihookabove=7881,e.iibengali=2440,e.iicyrillic=1080,e.iideva=2312,e.iigujarati=2696,e.iigurmukhi=2568,e.iimatragurmukhi=2624,e.iinvertedbreve=523,e.iishortcyrillic=1081,e.iivowelsignbengali=2496,e.iivowelsigndeva=2368,e.iivowelsigngujarati=2752,e.ij=307,e.ikatakana=12452,e.ikatakanahalfwidth=65394,e.ikorean=12643,e.ilde=732,e.iluyhebrew=1452,e.imacron=299,e.imacroncyrillic=1251,e.imageorapproximatelyequal=8787,e.imatragurmukhi=2623,e.imonospace=65353,e.increment=8710,e.infinity=8734,e.iniarmenian=1387,e.integral=8747,e.integralbottom=8993,e.integralbt=8993,e.integralex=63733,e.integraltop=8992,e.integraltp=8992,e.intersection=8745,e.intisquare=13061,e.invbullet=9688,e.invcircle=9689,e.invsmileface=9787,e.iocyrillic=1105,e.iogonek=303,e.iota=953,e.iotadieresis=970,e.iotadieresistonos=912,e.iotalatin=617,e.iotatonos=943,e.iparen=9380,e.irigurmukhi=2674,e.ismallhiragana=12355,e.ismallkatakana=12451,e.ismallkatakanahalfwidth=65384,e.issharbengali=2554,e.istroke=616,e.isuperior=63213,e.iterationhiragana=12445,e.iterationkatakana=12541,e.itilde=297,e.itildebelow=7725,e.iubopomofo=12585,e.iucyrillic=1102,e.ivowelsignbengali=2495,e.ivowelsigndeva=2367,e.ivowelsigngujarati=2751,e.izhitsacyrillic=1141,e.izhitsadblgravecyrillic=1143,e.j=106,e.jaarmenian=1393,e.jabengali=2460,e.jadeva=2332,e.jagujarati=2716,e.jagurmukhi=2588,e.jbopomofo=12560,e.jcaron=496,e.jcircle=9433,e.jcircumflex=309,e.jcrossedtail=669,e.jdotlessstroke=607,e.jecyrillic=1112,e.jeemarabic=1580,e.jeemfinalarabic=65182,e.jeeminitialarabic=65183,e.jeemmedialarabic=65184,e.jeharabic=1688,e.jehfinalarabic=64395,e.jhabengali=2461,e.jhadeva=2333,e.jhagujarati=2717,e.jhagurmukhi=2589,e.jheharmenian=1403,e.jis=12292,e.jmonospace=65354,e.jparen=9381,e.jsuperior=690,e.k=107,e.kabashkircyrillic=1185,e.kabengali=2453,e.kacute=7729,e.kacyrillic=1082,e.kadescendercyrillic=1179,e.kadeva=2325,e.kaf=1499,e.kafarabic=1603,e.kafdagesh=64315,e.kafdageshhebrew=64315,e.kaffinalarabic=65242,e.kafhebrew=1499,e.kafinitialarabic=65243,e.kafmedialarabic=65244,e.kafrafehebrew=64333,e.kagujarati=2709,e.kagurmukhi=2581,e.kahiragana=12363,e.kahookcyrillic=1220,e.kakatakana=12459,e.kakatakanahalfwidth=65398,e.kappa=954,e.kappasymbolgreek=1008,e.kapyeounmieumkorean=12657,e.kapyeounphieuphkorean=12676,e.kapyeounpieupkorean=12664,e.kapyeounssangpieupkorean=12665,e.karoriisquare=13069,e.kashidaautoarabic=1600,e.kashidaautonosidebearingarabic=1600,e.kasmallkatakana=12533,e.kasquare=13188,e.kasraarabic=1616,e.kasratanarabic=1613,e.kastrokecyrillic=1183,e.katahiraprolongmarkhalfwidth=65392,e.kaverticalstrokecyrillic=1181,e.kbopomofo=12558,e.kcalsquare=13193,e.kcaron=489,e.kcedilla=311,e.kcircle=9434,e.kcommaaccent=311,e.kdotbelow=7731,e.keharmenian=1412,e.kehiragana=12369,e.kekatakana=12465,e.kekatakanahalfwidth=65401,e.kenarmenian=1391,e.kesmallkatakana=12534,e.kgreenlandic=312,e.khabengali=2454,e.khacyrillic=1093,e.khadeva=2326,e.khagujarati=2710,e.khagurmukhi=2582,e.khaharabic=1582,e.khahfinalarabic=65190,e.khahinitialarabic=65191,e.khahmedialarabic=65192,e.kheicoptic=999,e.khhadeva=2393,e.khhagurmukhi=2649,e.khieukhacirclekorean=12920,e.khieukhaparenkorean=12824,e.khieukhcirclekorean=12906,e.khieukhkorean=12619,e.khieukhparenkorean=12810,e.khokhaithai=3586,e.khokhonthai=3589,e.khokhuatthai=3587,e.khokhwaithai=3588,e.khomutthai=3675,e.khook=409,e.khorakhangthai=3590,e.khzsquare=13201,e.kihiragana=12365,e.kikatakana=12461,e.kikatakanahalfwidth=65399,e.kiroguramusquare=13077,e.kiromeetorusquare=13078,e.kirosquare=13076,e.kiyeokacirclekorean=12910,e.kiyeokaparenkorean=12814,e.kiyeokcirclekorean=12896,e.kiyeokkorean=12593,e.kiyeokparenkorean=12800,e.kiyeoksioskorean=12595,e.kjecyrillic=1116,e.klinebelow=7733,e.klsquare=13208,e.kmcubedsquare=13222,e.kmonospace=65355,e.kmsquaredsquare=13218,e.kohiragana=12371,e.kohmsquare=13248,e.kokaithai=3585,e.kokatakana=12467,e.kokatakanahalfwidth=65402,e.kooposquare=13086,e.koppacyrillic=1153,e.koreanstandardsymbol=12927,e.koroniscmb=835,e.kparen=9382,e.kpasquare=13226,e.ksicyrillic=1135,e.ktsquare=13263,e.kturned=670,e.kuhiragana=12367,e.kukatakana=12463,e.kukatakanahalfwidth=65400,e.kvsquare=13240,e.kwsquare=13246,e.l=108,e.labengali=2482,e.lacute=314,e.ladeva=2354,e.lagujarati=2738,e.lagurmukhi=2610,e.lakkhangyaothai=3653,e.lamaleffinalarabic=65276,e.lamalefhamzaabovefinalarabic=65272,e.lamalefhamzaaboveisolatedarabic=65271,e.lamalefhamzabelowfinalarabic=65274,e.lamalefhamzabelowisolatedarabic=65273,e.lamalefisolatedarabic=65275,e.lamalefmaddaabovefinalarabic=65270,e.lamalefmaddaaboveisolatedarabic=65269,e.lamarabic=1604,e.lambda=955,e.lambdastroke=411,e.lamed=1500,e.lameddagesh=64316,e.lameddageshhebrew=64316,e.lamedhebrew=1500,e.lamfinalarabic=65246,e.lamhahinitialarabic=64714,e.laminitialarabic=65247,e.lamjeeminitialarabic=64713,e.lamkhahinitialarabic=64715,e.lamlamhehisolatedarabic=65010,e.lammedialarabic=65248,e.lammeemhahinitialarabic=64904,e.lammeeminitialarabic=64716,e.largecircle=9711,e.lbar=410,e.lbelt=620,e.lbopomofo=12556,e.lcaron=318,e.lcedilla=316,e.lcircle=9435,e.lcircumflexbelow=7741,e.lcommaaccent=316,e.ldot=320,e.ldotaccent=320,e.ldotbelow=7735,e.ldotbelowmacron=7737,e.leftangleabovecmb=794,e.lefttackbelowcmb=792,e.less=60,e.lessequal=8804,e.lessequalorgreater=8922,e.lessmonospace=65308,e.lessorequivalent=8818,e.lessorgreater=8822,e.lessoverequal=8806,e.lesssmall=65124,e.lezh=622,e.lfblock=9612,e.lhookretroflex=621,e.lira=8356,e.liwnarmenian=1388,e.lj=457,e.ljecyrillic=1113,e.ll=63168,e.lladeva=2355,e.llagujarati=2739,e.llinebelow=7739,e.llladeva=2356,e.llvocalicbengali=2529,e.llvocalicdeva=2401,e.llvocalicvowelsignbengali=2531,e.llvocalicvowelsigndeva=2403,e.lmiddletilde=619,e.lmonospace=65356,e.lmsquare=13264,e.lochulathai=3628,e.logicaland=8743,e.logicalnot=172,e.logicalnotreversed=8976,e.logicalor=8744,e.lolingthai=3621,e.longs=383,e.lowlinecenterline=65102,e.lowlinecmb=818,e.lowlinedashed=65101,e.lozenge=9674,e.lparen=9383,e.lslash=322,e.lsquare=8467,e.lsuperior=63214,e.ltshade=9617,e.luthai=3622,e.lvocalicbengali=2444,e.lvocalicdeva=2316,e.lvocalicvowelsignbengali=2530,e.lvocalicvowelsigndeva=2402,e.lxsquare=13267,e.m=109,e.mabengali=2478,e.macron=175,e.macronbelowcmb=817,e.macroncmb=772,e.macronlowmod=717,e.macronmonospace=65507,e.macute=7743,e.madeva=2350,e.magujarati=2734,e.magurmukhi=2606,e.mahapakhhebrew=1444,e.mahapakhlefthebrew=1444,e.mahiragana=12414,e.maichattawalowleftthai=63637,e.maichattawalowrightthai=63636,e.maichattawathai=3659,e.maichattawaupperleftthai=63635,e.maieklowleftthai=63628,e.maieklowrightthai=63627,e.maiekthai=3656,e.maiekupperleftthai=63626,e.maihanakatleftthai=63620,e.maihanakatthai=3633,e.maitaikhuleftthai=63625,e.maitaikhuthai=3655,e.maitholowleftthai=63631,e.maitholowrightthai=63630,e.maithothai=3657,e.maithoupperleftthai=63629,e.maitrilowleftthai=63634,e.maitrilowrightthai=63633,e.maitrithai=3658,e.maitriupperleftthai=63632,e.maiyamokthai=3654,e.makatakana=12510,e.makatakanahalfwidth=65423,e.male=9794,e.mansyonsquare=13127,e.maqafhebrew=1470,e.mars=9794,e.masoracirclehebrew=1455,e.masquare=13187,e.mbopomofo=12551,e.mbsquare=13268,e.mcircle=9436,e.mcubedsquare=13221,e.mdotaccent=7745,e.mdotbelow=7747,e.meemarabic=1605,e.meemfinalarabic=65250,e.meeminitialarabic=65251,e.meemmedialarabic=65252,e.meemmeeminitialarabic=64721,e.meemmeemisolatedarabic=64584,e.meetorusquare=13133,e.mehiragana=12417,e.meizierasquare=13182,e.mekatakana=12513,e.mekatakanahalfwidth=65426,e.mem=1502,e.memdagesh=64318,e.memdageshhebrew=64318,e.memhebrew=1502,e.menarmenian=1396,e.merkhahebrew=1445,e.merkhakefulahebrew=1446,e.merkhakefulalefthebrew=1446,e.merkhalefthebrew=1445,e.mhook=625,e.mhzsquare=13202,e.middledotkatakanahalfwidth=65381,e.middot=183,e.mieumacirclekorean=12914,e.mieumaparenkorean=12818,e.mieumcirclekorean=12900,e.mieumkorean=12609,e.mieumpansioskorean=12656,e.mieumparenkorean=12804,e.mieumpieupkorean=12654,e.mieumsioskorean=12655,e.mihiragana=12415,e.mikatakana=12511,e.mikatakanahalfwidth=65424,e.minus=8722,e.minusbelowcmb=800,e.minuscircle=8854,e.minusmod=727,e.minusplus=8723,e.minute=8242,e.miribaarusquare=13130,e.mirisquare=13129,e.mlonglegturned=624,e.mlsquare=13206,e.mmcubedsquare=13219,e.mmonospace=65357,e.mmsquaredsquare=13215,e.mohiragana=12418,e.mohmsquare=13249,e.mokatakana=12514,e.mokatakanahalfwidth=65427,e.molsquare=13270,e.momathai=3617,e.moverssquare=13223,e.moverssquaredsquare=13224,e.mparen=9384,e.mpasquare=13227,e.mssquare=13235,e.msuperior=63215,e.mturned=623,e.mu=181,e.mu1=181,e.muasquare=13186,e.muchgreater=8811,e.muchless=8810,e.mufsquare=13196,e.mugreek=956,e.mugsquare=13197,e.muhiragana=12416,e.mukatakana=12512,e.mukatakanahalfwidth=65425,e.mulsquare=13205,e.multiply=215,e.mumsquare=13211,e.munahhebrew=1443,e.munahlefthebrew=1443,e.musicalnote=9834,e.musicalnotedbl=9835,e.musicflatsign=9837,e.musicsharpsign=9839,e.mussquare=13234,e.muvsquare=13238,e.muwsquare=13244,e.mvmegasquare=13241,e.mvsquare=13239,e.mwmegasquare=13247,e.mwsquare=13245,e.n=110,e.nabengali=2472,e.nabla=8711,e.nacute=324,e.nadeva=2344,e.nagujarati=2728,e.nagurmukhi=2600,e.nahiragana=12394,e.nakatakana=12490,e.nakatakanahalfwidth=65413,e.napostrophe=329,e.nasquare=13185,e.nbopomofo=12555,e.nbspace=160,e.ncaron=328,e.ncedilla=326,e.ncircle=9437,e.ncircumflexbelow=7755,e.ncommaaccent=326,e.ndotaccent=7749,e.ndotbelow=7751,e.nehiragana=12397,e.nekatakana=12493,e.nekatakanahalfwidth=65416,e.newsheqelsign=8362,e.nfsquare=13195,e.ngabengali=2457,e.ngadeva=2329,e.ngagujarati=2713,e.ngagurmukhi=2585,e.ngonguthai=3591,e.nhiragana=12435,e.nhookleft=626,e.nhookretroflex=627,e.nieunacirclekorean=12911,e.nieunaparenkorean=12815,e.nieuncieuckorean=12597,e.nieuncirclekorean=12897,e.nieunhieuhkorean=12598,e.nieunkorean=12596,e.nieunpansioskorean=12648,e.nieunparenkorean=12801,e.nieunsioskorean=12647,e.nieuntikeutkorean=12646,e.nihiragana=12395,e.nikatakana=12491,e.nikatakanahalfwidth=65414,e.nikhahitleftthai=63641,e.nikhahitthai=3661,e.nine=57,e.ninearabic=1641,e.ninebengali=2543,e.ninecircle=9320,e.ninecircleinversesansserif=10130,e.ninedeva=2415,e.ninegujarati=2799,e.ninegurmukhi=2671,e.ninehackarabic=1641,e.ninehangzhou=12329,e.nineideographicparen=12840,e.nineinferior=8329,e.ninemonospace=65305,e.nineoldstyle=63289,e.nineparen=9340,e.nineperiod=9360,e.ninepersian=1785,e.nineroman=8568,e.ninesuperior=8313,e.nineteencircle=9330,e.nineteenparen=9350,e.nineteenperiod=9370,e.ninethai=3673,e.nj=460,e.njecyrillic=1114,e.nkatakana=12531,e.nkatakanahalfwidth=65437,e.nlegrightlong=414,e.nlinebelow=7753,e.nmonospace=65358,e.nmsquare=13210,e.nnabengali=2467,e.nnadeva=2339,e.nnagujarati=2723,e.nnagurmukhi=2595,e.nnnadeva=2345,e.nohiragana=12398,e.nokatakana=12494,e.nokatakanahalfwidth=65417,e.nonbreakingspace=160,e.nonenthai=3603,e.nonuthai=3609,e.noonarabic=1606,e.noonfinalarabic=65254,e.noonghunnaarabic=1722,e.noonghunnafinalarabic=64415,e.nooninitialarabic=65255,e.noonjeeminitialarabic=64722,e.noonjeemisolatedarabic=64587,e.noonmedialarabic=65256,e.noonmeeminitialarabic=64725,e.noonmeemisolatedarabic=64590,e.noonnoonfinalarabic=64653,e.notcontains=8716,e.notelement=8713,e.notelementof=8713,e.notequal=8800,e.notgreater=8815,e.notgreaternorequal=8817,e.notgreaternorless=8825,e.notidentical=8802,e.notless=8814,e.notlessnorequal=8816,e.notparallel=8742,e.notprecedes=8832,e.notsubset=8836,e.notsucceeds=8833,e.notsuperset=8837,e.nowarmenian=1398,e.nparen=9385,e.nssquare=13233,e.nsuperior=8319,e.ntilde=241,e.nu=957,e.nuhiragana=12396,e.nukatakana=12492,e.nukatakanahalfwidth=65415,e.nuktabengali=2492,e.nuktadeva=2364,e.nuktagujarati=2748,e.nuktagurmukhi=2620,e.numbersign=35,e.numbersignmonospace=65283,e.numbersignsmall=65119,e.numeralsigngreek=884,e.numeralsignlowergreek=885,e.numero=8470,e.nun=1504,e.nundagesh=64320,e.nundageshhebrew=64320,e.nunhebrew=1504,e.nvsquare=13237,e.nwsquare=13243,e.nyabengali=2462,e.nyadeva=2334,e.nyagujarati=2718,e.nyagurmukhi=2590,e.o=111,e.oacute=243,e.oangthai=3629,e.obarred=629,e.obarredcyrillic=1257,e.obarreddieresiscyrillic=1259,e.obengali=2451,e.obopomofo=12571,e.obreve=335,e.ocandradeva=2321,e.ocandragujarati=2705,e.ocandravowelsigndeva=2377,e.ocandravowelsigngujarati=2761,e.ocaron=466,e.ocircle=9438,e.ocircumflex=244,e.ocircumflexacute=7889,e.ocircumflexdotbelow=7897,e.ocircumflexgrave=7891,e.ocircumflexhookabove=7893,e.ocircumflextilde=7895,e.ocyrillic=1086,e.odblacute=337,e.odblgrave=525,e.odeva=2323,e.odieresis=246,e.odieresiscyrillic=1255,e.odotbelow=7885,e.oe=339,e.oekorean=12634,e.ogonek=731,e.ogonekcmb=808,e.ograve=242,e.ogujarati=2707,e.oharmenian=1413,e.ohiragana=12362,e.ohookabove=7887,e.ohorn=417,e.ohornacute=7899,e.ohorndotbelow=7907,e.ohorngrave=7901,e.ohornhookabove=7903,e.ohorntilde=7905,e.ohungarumlaut=337,e.oi=419,e.oinvertedbreve=527,e.okatakana=12458,e.okatakanahalfwidth=65397,e.okorean=12631,e.olehebrew=1451,e.omacron=333,e.omacronacute=7763,e.omacrongrave=7761,e.omdeva=2384,e.omega=969,e.omega1=982,e.omegacyrillic=1121,e.omegalatinclosed=631,e.omegaroundcyrillic=1147,e.omegatitlocyrillic=1149,e.omegatonos=974,e.omgujarati=2768,e.omicron=959,e.omicrontonos=972,e.omonospace=65359,e.one=49,e.onearabic=1633,e.onebengali=2535,e.onecircle=9312,e.onecircleinversesansserif=10122,e.onedeva=2407,e.onedotenleader=8228,e.oneeighth=8539,e.onefitted=63196,e.onegujarati=2791,e.onegurmukhi=2663,e.onehackarabic=1633,e.onehalf=189,e.onehangzhou=12321,e.oneideographicparen=12832,e.oneinferior=8321,e.onemonospace=65297,e.onenumeratorbengali=2548,e.oneoldstyle=63281,e.oneparen=9332,e.oneperiod=9352,e.onepersian=1777,e.onequarter=188,e.oneroman=8560,e.onesuperior=185,e.onethai=3665,e.onethird=8531,e.oogonek=491,e.oogonekmacron=493,e.oogurmukhi=2579,e.oomatragurmukhi=2635,e.oopen=596,e.oparen=9386,e.openbullet=9702,e.option=8997,e.ordfeminine=170,e.ordmasculine=186,e.orthogonal=8735,e.oshortdeva=2322,e.oshortvowelsigndeva=2378,e.oslash=248,e.oslashacute=511,e.osmallhiragana=12361,e.osmallkatakana=12457,e.osmallkatakanahalfwidth=65387,e.ostrokeacute=511,e.osuperior=63216,e.otcyrillic=1151,e.otilde=245,e.otildeacute=7757,e.otildedieresis=7759,e.oubopomofo=12577,e.overline=8254,e.overlinecenterline=65098,e.overlinecmb=773,e.overlinedashed=65097,e.overlinedblwavy=65100,e.overlinewavy=65099,e.overscore=175,e.ovowelsignbengali=2507,e.ovowelsigndeva=2379,e.ovowelsigngujarati=2763,e.p=112,e.paampssquare=13184,e.paasentosquare=13099,e.pabengali=2474,e.pacute=7765,e.padeva=2346,e.pagedown=8671,e.pageup=8670,e.pagujarati=2730,e.pagurmukhi=2602,e.pahiragana=12401,e.paiyannoithai=3631,e.pakatakana=12497,e.palatalizationcyrilliccmb=1156,e.palochkacyrillic=1216,e.pansioskorean=12671,e.paragraph=182,e.parallel=8741,e.parenleft=40,e.parenleftaltonearabic=64830,e.parenleftbt=63725,e.parenleftex=63724,e.parenleftinferior=8333,e.parenleftmonospace=65288,e.parenleftsmall=65113,e.parenleftsuperior=8317,e.parenlefttp=63723,e.parenleftvertical=65077,e.parenright=41,e.parenrightaltonearabic=64831,e.parenrightbt=63736,e.parenrightex=63735,e.parenrightinferior=8334,e.parenrightmonospace=65289,e.parenrightsmall=65114,e.parenrightsuperior=8318,e.parenrighttp=63734,e.parenrightvertical=65078,e.partialdiff=8706,e.paseqhebrew=1472,e.pashtahebrew=1433,e.pasquare=13225,e.patah=1463,e.patah11=1463,e.patah1d=1463,e.patah2a=1463,e.patahhebrew=1463,e.patahnarrowhebrew=1463,e.patahquarterhebrew=1463,e.patahwidehebrew=1463,e.pazerhebrew=1441,e.pbopomofo=12550,e.pcircle=9439,e.pdotaccent=7767,e.pe=1508,e.pecyrillic=1087,e.pedagesh=64324,e.pedageshhebrew=64324,e.peezisquare=13115,e.pefinaldageshhebrew=64323,e.peharabic=1662,e.peharmenian=1402,e.pehebrew=1508,e.pehfinalarabic=64343,e.pehinitialarabic=64344,e.pehiragana=12410,e.pehmedialarabic=64345,e.pekatakana=12506,e.pemiddlehookcyrillic=1191,e.perafehebrew=64334,e.percent=37,e.percentarabic=1642,e.percentmonospace=65285,e.percentsmall=65130,e.period=46,e.periodarmenian=1417,e.periodcentered=183,e.periodhalfwidth=65377,e.periodinferior=63207,e.periodmonospace=65294,e.periodsmall=65106,e.periodsuperior=63208,e.perispomenigreekcmb=834,e.perpendicular=8869,e.perthousand=8240,e.peseta=8359,e.pfsquare=13194,e.phabengali=2475,e.phadeva=2347,e.phagujarati=2731,e.phagurmukhi=2603,e.phi=966,e.phi1=981,e.phieuphacirclekorean=12922,e.phieuphaparenkorean=12826,e.phieuphcirclekorean=12908,e.phieuphkorean=12621,e.phieuphparenkorean=12812,e.philatin=632,e.phinthuthai=3642,e.phisymbolgreek=981,e.phook=421,e.phophanthai=3614,e.phophungthai=3612,e.phosamphaothai=3616,e.pi=960,e.pieupacirclekorean=12915,e.pieupaparenkorean=12819,e.pieupcieuckorean=12662,e.pieupcirclekorean=12901,e.pieupkiyeokkorean=12658,e.pieupkorean=12610,e.pieupparenkorean=12805,e.pieupsioskiyeokkorean=12660,e.pieupsioskorean=12612,e.pieupsiostikeutkorean=12661,e.pieupthieuthkorean=12663,e.pieuptikeutkorean=12659,e.pihiragana=12404,e.pikatakana=12500,e.pisymbolgreek=982,e.piwrarmenian=1411,e.planckover2pi=8463,e.planckover2pi1=8463,e.plus=43,e.plusbelowcmb=799,e.pluscircle=8853,e.plusminus=177,e.plusmod=726,e.plusmonospace=65291,e.plussmall=65122,e.plussuperior=8314,e.pmonospace=65360,e.pmsquare=13272,e.pohiragana=12413,e.pointingindexdownwhite=9759,e.pointingindexleftwhite=9756,e.pointingindexrightwhite=9758,e.pointingindexupwhite=9757,e.pokatakana=12509,e.poplathai=3611,e.postalmark=12306,e.postalmarkface=12320,e.pparen=9387,e.precedes=8826,e.prescription=8478,e.primemod=697,e.primereversed=8245,e.product=8719,e.projective=8965,e.prolongedkana=12540,e.propellor=8984,e.propersubset=8834,e.propersuperset=8835,e.proportion=8759,e.proportional=8733,e.psi=968,e.psicyrillic=1137,e.psilipneumatacyrilliccmb=1158,e.pssquare=13232,e.puhiragana=12407,e.pukatakana=12503,e.pvsquare=13236,e.pwsquare=13242,e.q=113,e.qadeva=2392,e.qadmahebrew=1448,e.qafarabic=1602,e.qaffinalarabic=65238,e.qafinitialarabic=65239,e.qafmedialarabic=65240,e.qamats=1464,e.qamats10=1464,e.qamats1a=1464,e.qamats1c=1464,e.qamats27=1464,e.qamats29=1464,e.qamats33=1464,e.qamatsde=1464,e.qamatshebrew=1464,e.qamatsnarrowhebrew=1464,e.qamatsqatanhebrew=1464,e.qamatsqatannarrowhebrew=1464,e.qamatsqatanquarterhebrew=1464,e.qamatsqatanwidehebrew=1464,e.qamatsquarterhebrew=1464,e.qamatswidehebrew=1464,e.qarneyparahebrew=1439,e.qbopomofo=12561,e.qcircle=9440,e.qhook=672,e.qmonospace=65361,e.qof=1511,e.qofdagesh=64327,e.qofdageshhebrew=64327,e.qofhebrew=1511,e.qparen=9388,e.quarternote=9833,e.qubuts=1467,e.qubuts18=1467,e.qubuts25=1467,e.qubuts31=1467,e.qubutshebrew=1467,e.qubutsnarrowhebrew=1467,e.qubutsquarterhebrew=1467,e.qubutswidehebrew=1467,e.question=63,e.questionarabic=1567,e.questionarmenian=1374,e.questiondown=191,e.questiondownsmall=63423,e.questiongreek=894,e.questionmonospace=65311,e.questionsmall=63295,e.quotedbl=34,e.quotedblbase=8222,e.quotedblleft=8220,e.quotedblmonospace=65282,e.quotedblprime=12318,e.quotedblprimereversed=12317,e.quotedblright=8221,e.quoteleft=8216,e.quoteleftreversed=8219,e.quotereversed=8219,e.quoteright=8217,e.quoterightn=329,e.quotesinglbase=8218,e.quotesingle=39,e.quotesinglemonospace=65287,e.r=114,e.raarmenian=1404,e.rabengali=2480,e.racute=341,e.radeva=2352,e.radical=8730,e.radicalex=63717,e.radoverssquare=13230,e.radoverssquaredsquare=13231,e.radsquare=13229,e.rafe=1471,e.rafehebrew=1471,e.ragujarati=2736,e.ragurmukhi=2608,e.rahiragana=12425,e.rakatakana=12521,e.rakatakanahalfwidth=65431,e.ralowerdiagonalbengali=2545,e.ramiddlediagonalbengali=2544,e.ramshorn=612,e.ratio=8758,e.rbopomofo=12566,e.rcaron=345,e.rcedilla=343,e.rcircle=9441,e.rcommaaccent=343,e.rdblgrave=529,e.rdotaccent=7769,e.rdotbelow=7771,e.rdotbelowmacron=7773,e.referencemark=8251,e.reflexsubset=8838,e.reflexsuperset=8839,e.registered=174,e.registersans=63720,e.registerserif=63194,e.reharabic=1585,e.reharmenian=1408,e.rehfinalarabic=65198,e.rehiragana=12428,e.rekatakana=12524,e.rekatakanahalfwidth=65434,e.resh=1512,e.reshdageshhebrew=64328,e.reshhebrew=1512,e.reversedtilde=8765,e.reviahebrew=1431,e.reviamugrashhebrew=1431,e.revlogicalnot=8976,e.rfishhook=638,e.rfishhookreversed=639,e.rhabengali=2525,e.rhadeva=2397,e.rho=961,e.rhook=637,e.rhookturned=635,e.rhookturnedsuperior=693,e.rhosymbolgreek=1009,e.rhotichookmod=734,e.rieulacirclekorean=12913,e.rieulaparenkorean=12817,e.rieulcirclekorean=12899,e.rieulhieuhkorean=12608,e.rieulkiyeokkorean=12602,e.rieulkiyeoksioskorean=12649,e.rieulkorean=12601,e.rieulmieumkorean=12603,e.rieulpansioskorean=12652,e.rieulparenkorean=12803,e.rieulphieuphkorean=12607,e.rieulpieupkorean=12604,e.rieulpieupsioskorean=12651,e.rieulsioskorean=12605,e.rieulthieuthkorean=12606,e.rieultikeutkorean=12650,e.rieulyeorinhieuhkorean=12653,e.rightangle=8735,e.righttackbelowcmb=793,e.righttriangle=8895,e.rihiragana=12426,e.rikatakana=12522,e.rikatakanahalfwidth=65432,e.ring=730,e.ringbelowcmb=805,e.ringcmb=778,e.ringhalfleft=703,e.ringhalfleftarmenian=1369,e.ringhalfleftbelowcmb=796,e.ringhalfleftcentered=723,e.ringhalfright=702,e.ringhalfrightbelowcmb=825,e.ringhalfrightcentered=722,e.rinvertedbreve=531,e.rittorusquare=13137,e.rlinebelow=7775,e.rlongleg=636,e.rlonglegturned=634,e.rmonospace=65362,e.rohiragana=12429,e.rokatakana=12525,e.rokatakanahalfwidth=65435,e.roruathai=3619,e.rparen=9389,e.rrabengali=2524,e.rradeva=2353,e.rragurmukhi=2652,e.rreharabic=1681,e.rrehfinalarabic=64397,e.rrvocalicbengali=2528,e.rrvocalicdeva=2400,e.rrvocalicgujarati=2784,e.rrvocalicvowelsignbengali=2500,e.rrvocalicvowelsigndeva=2372,e.rrvocalicvowelsigngujarati=2756,e.rsuperior=63217,e.rtblock=9616,e.rturned=633,e.rturnedsuperior=692,e.ruhiragana=12427,e.rukatakana=12523,e.rukatakanahalfwidth=65433,e.rupeemarkbengali=2546,e.rupeesignbengali=2547,e.rupiah=63197,e.ruthai=3620,e.rvocalicbengali=2443,e.rvocalicdeva=2315,e.rvocalicgujarati=2699,e.rvocalicvowelsignbengali=2499,e.rvocalicvowelsigndeva=2371,e.rvocalicvowelsigngujarati=2755,e.s=115,e.sabengali=2488,e.sacute=347,e.sacutedotaccent=7781,e.sadarabic=1589,e.sadeva=2360,e.sadfinalarabic=65210,e.sadinitialarabic=65211,e.sadmedialarabic=65212,e.sagujarati=2744,e.sagurmukhi=2616,e.sahiragana=12373,e.sakatakana=12469,e.sakatakanahalfwidth=65403,e.sallallahoualayhewasallamarabic=65018,e.samekh=1505,e.samekhdagesh=64321,e.samekhdageshhebrew=64321,e.samekhhebrew=1505,e.saraaathai=3634,e.saraaethai=3649,e.saraaimaimalaithai=3652,e.saraaimaimuanthai=3651,e.saraamthai=3635,e.saraathai=3632,e.saraethai=3648,e.saraiileftthai=63622,e.saraiithai=3637,e.saraileftthai=63621,e.saraithai=3636,e.saraothai=3650,e.saraueeleftthai=63624,e.saraueethai=3639,e.saraueleftthai=63623,e.sarauethai=3638,e.sarauthai=3640,e.sarauuthai=3641,e.sbopomofo=12569,e.scaron=353,e.scarondotaccent=7783,e.scedilla=351,e.schwa=601,e.schwacyrillic=1241,e.schwadieresiscyrillic=1243,e.schwahook=602,e.scircle=9442,e.scircumflex=349,e.scommaaccent=537,e.sdotaccent=7777,e.sdotbelow=7779,e.sdotbelowdotaccent=7785,e.seagullbelowcmb=828,e.second=8243,e.secondtonechinese=714,e.section=167,e.seenarabic=1587,e.seenfinalarabic=65202,e.seeninitialarabic=65203,e.seenmedialarabic=65204,e.segol=1462,e.segol13=1462,e.segol1f=1462,e.segol2c=1462,e.segolhebrew=1462,e.segolnarrowhebrew=1462,e.segolquarterhebrew=1462,e.segoltahebrew=1426,e.segolwidehebrew=1462,e.seharmenian=1405,e.sehiragana=12379,e.sekatakana=12475,e.sekatakanahalfwidth=65406,e.semicolon=59,e.semicolonarabic=1563,e.semicolonmonospace=65307,e.semicolonsmall=65108,e.semivoicedmarkkana=12444,e.semivoicedmarkkanahalfwidth=65439,e.sentisquare=13090,e.sentosquare=13091,e.seven=55,e.sevenarabic=1639,e.sevenbengali=2541,e.sevencircle=9318,e.sevencircleinversesansserif=10128,e.sevendeva=2413,e.seveneighths=8542,e.sevengujarati=2797,e.sevengurmukhi=2669,e.sevenhackarabic=1639,e.sevenhangzhou=12327,e.sevenideographicparen=12838,e.seveninferior=8327,e.sevenmonospace=65303,e.sevenoldstyle=63287,e.sevenparen=9338,e.sevenperiod=9358,e.sevenpersian=1783,e.sevenroman=8566,e.sevensuperior=8311,e.seventeencircle=9328,e.seventeenparen=9348,e.seventeenperiod=9368,e.seventhai=3671,e.sfthyphen=173,e.shaarmenian=1399,e.shabengali=2486,e.shacyrillic=1096,e.shaddaarabic=1617,e.shaddadammaarabic=64609,e.shaddadammatanarabic=64606,e.shaddafathaarabic=64608,e.shaddakasraarabic=64610,e.shaddakasratanarabic=64607,e.shade=9618,e.shadedark=9619,e.shadelight=9617,e.shademedium=9618,e.shadeva=2358,e.shagujarati=2742,e.shagurmukhi=2614,e.shalshelethebrew=1427,e.shbopomofo=12565,e.shchacyrillic=1097,e.sheenarabic=1588,e.sheenfinalarabic=65206,e.sheeninitialarabic=65207,e.sheenmedialarabic=65208,e.sheicoptic=995,e.sheqel=8362,e.sheqelhebrew=8362,e.sheva=1456,e.sheva115=1456,e.sheva15=1456,e.sheva22=1456,e.sheva2e=1456,e.shevahebrew=1456,e.shevanarrowhebrew=1456,e.shevaquarterhebrew=1456,e.shevawidehebrew=1456,e.shhacyrillic=1211,e.shimacoptic=1005,e.shin=1513,e.shindagesh=64329,e.shindageshhebrew=64329,e.shindageshshindot=64300,e.shindageshshindothebrew=64300,e.shindageshsindot=64301,e.shindageshsindothebrew=64301,e.shindothebrew=1473,e.shinhebrew=1513,e.shinshindot=64298,e.shinshindothebrew=64298,e.shinsindot=64299,e.shinsindothebrew=64299,e.shook=642,e.sigma=963,e.sigma1=962,e.sigmafinal=962,e.sigmalunatesymbolgreek=1010,e.sihiragana=12375,e.sikatakana=12471,e.sikatakanahalfwidth=65404,e.siluqhebrew=1469,e.siluqlefthebrew=1469,e.similar=8764,e.sindothebrew=1474,e.siosacirclekorean=12916,e.siosaparenkorean=12820,e.sioscieuckorean=12670,e.sioscirclekorean=12902,e.sioskiyeokkorean=12666,e.sioskorean=12613,e.siosnieunkorean=12667,e.siosparenkorean=12806,e.siospieupkorean=12669,e.siostikeutkorean=12668,e.six=54,e.sixarabic=1638,e.sixbengali=2540,e.sixcircle=9317,e.sixcircleinversesansserif=10127,e.sixdeva=2412,e.sixgujarati=2796,e.sixgurmukhi=2668,e.sixhackarabic=1638,e.sixhangzhou=12326,e.sixideographicparen=12837,e.sixinferior=8326,e.sixmonospace=65302,e.sixoldstyle=63286,e.sixparen=9337,e.sixperiod=9357,e.sixpersian=1782,e.sixroman=8565,e.sixsuperior=8310,e.sixteencircle=9327,e.sixteencurrencydenominatorbengali=2553,e.sixteenparen=9347,e.sixteenperiod=9367,e.sixthai=3670,e.slash=47,e.slashmonospace=65295,e.slong=383,e.slongdotaccent=7835,e.smileface=9786,e.smonospace=65363,e.sofpasuqhebrew=1475,e.softhyphen=173,e.softsigncyrillic=1100,e.sohiragana=12381,e.sokatakana=12477,e.sokatakanahalfwidth=65407,e.soliduslongoverlaycmb=824,e.solidusshortoverlaycmb=823,e.sorusithai=3625,e.sosalathai=3624,e.sosothai=3595,e.sosuathai=3626,e.space=32,e.spacehackarabic=32,e.spade=9824,e.spadesuitblack=9824,e.spadesuitwhite=9828,e.sparen=9390,e.squarebelowcmb=827,e.squarecc=13252,e.squarecm=13213,e.squarediagonalcrosshatchfill=9641,e.squarehorizontalfill=9636,e.squarekg=13199,e.squarekm=13214,e.squarekmcapital=13262,e.squareln=13265,e.squarelog=13266,e.squaremg=13198,e.squaremil=13269,e.squaremm=13212,e.squaremsquared=13217,e.squareorthogonalcrosshatchfill=9638,e.squareupperlefttolowerrightfill=9639,e.squareupperrighttolowerleftfill=9640,e.squareverticalfill=9637,e.squarewhitewithsmallblack=9635,e.srsquare=13275,e.ssabengali=2487,e.ssadeva=2359,e.ssagujarati=2743,e.ssangcieuckorean=12617,e.ssanghieuhkorean=12677,e.ssangieungkorean=12672,e.ssangkiyeokkorean=12594,e.ssangnieunkorean=12645,e.ssangpieupkorean=12611,e.ssangsioskorean=12614,e.ssangtikeutkorean=12600,e.ssuperior=63218,e.sterling=163,e.sterlingmonospace=65505,e.strokelongoverlaycmb=822,e.strokeshortoverlaycmb=821,e.subset=8834,e.subsetnotequal=8842,e.subsetorequal=8838,e.succeeds=8827,e.suchthat=8715,e.suhiragana=12377,e.sukatakana=12473,e.sukatakanahalfwidth=65405,e.sukunarabic=1618,e.summation=8721,e.sun=9788,e.superset=8835,e.supersetnotequal=8843,e.supersetorequal=8839,e.svsquare=13276,e.syouwaerasquare=13180,e.t=116,e.tabengali=2468,e.tackdown=8868,e.tackleft=8867,e.tadeva=2340,e.tagujarati=2724,e.tagurmukhi=2596,e.taharabic=1591,e.tahfinalarabic=65218,e.tahinitialarabic=65219,e.tahiragana=12383,e.tahmedialarabic=65220,e.taisyouerasquare=13181,e.takatakana=12479,e.takatakanahalfwidth=65408,e.tatweelarabic=1600,e.tau=964,e.tav=1514,e.tavdages=64330,e.tavdagesh=64330,e.tavdageshhebrew=64330,e.tavhebrew=1514,e.tbar=359,e.tbopomofo=12554,e.tcaron=357,e.tccurl=680,e.tcedilla=355,e.tcheharabic=1670,e.tchehfinalarabic=64379,e.tchehinitialarabic=64380,e.tchehmedialarabic=64381,e.tcircle=9443,e.tcircumflexbelow=7793,e.tcommaaccent=355,e.tdieresis=7831,e.tdotaccent=7787,e.tdotbelow=7789,e.tecyrillic=1090,e.tedescendercyrillic=1197,e.teharabic=1578,e.tehfinalarabic=65174,e.tehhahinitialarabic=64674,e.tehhahisolatedarabic=64524,e.tehinitialarabic=65175,e.tehiragana=12390,e.tehjeeminitialarabic=64673,e.tehjeemisolatedarabic=64523,e.tehmarbutaarabic=1577,e.tehmarbutafinalarabic=65172,e.tehmedialarabic=65176,e.tehmeeminitialarabic=64676,e.tehmeemisolatedarabic=64526,e.tehnoonfinalarabic=64627,e.tekatakana=12486,e.tekatakanahalfwidth=65411,e.telephone=8481,e.telephoneblack=9742,e.telishagedolahebrew=1440,e.telishaqetanahebrew=1449,e.tencircle=9321,e.tenideographicparen=12841,e.tenparen=9341,e.tenperiod=9361,e.tenroman=8569,e.tesh=679,e.tet=1496,e.tetdagesh=64312,e.tetdageshhebrew=64312,e.tethebrew=1496,e.tetsecyrillic=1205,e.tevirhebrew=1435,e.tevirlefthebrew=1435,e.thabengali=2469,e.thadeva=2341,e.thagujarati=2725,e.thagurmukhi=2597,e.thalarabic=1584,e.thalfinalarabic=65196,e.thanthakhatlowleftthai=63640,e.thanthakhatlowrightthai=63639,e.thanthakhatthai=3660,e.thanthakhatupperleftthai=63638,e.theharabic=1579,e.thehfinalarabic=65178,e.thehinitialarabic=65179,e.thehmedialarabic=65180,e.thereexists=8707,e.therefore=8756,e.theta=952,e.theta1=977,e.thetasymbolgreek=977,e.thieuthacirclekorean=12921,e.thieuthaparenkorean=12825,e.thieuthcirclekorean=12907,e.thieuthkorean=12620,e.thieuthparenkorean=12811,e.thirteencircle=9324,e.thirteenparen=9344,e.thirteenperiod=9364,e.thonangmonthothai=3601,e.thook=429,e.thophuthaothai=3602,e.thorn=254,e.thothahanthai=3607,e.thothanthai=3600,e.thothongthai=3608,e.thothungthai=3606,e.thousandcyrillic=1154,e.thousandsseparatorarabic=1644,e.thousandsseparatorpersian=1644,e.three=51,e.threearabic=1635,e.threebengali=2537,e.threecircle=9314,e.threecircleinversesansserif=10124,e.threedeva=2409,e.threeeighths=8540,e.threegujarati=2793,e.threegurmukhi=2665,e.threehackarabic=1635,e.threehangzhou=12323,e.threeideographicparen=12834,e.threeinferior=8323,e.threemonospace=65299,e.threenumeratorbengali=2550,e.threeoldstyle=63283,e.threeparen=9334,e.threeperiod=9354,e.threepersian=1779,e.threequarters=190,e.threequartersemdash=63198,e.threeroman=8562,e.threesuperior=179,e.threethai=3667,e.thzsquare=13204,e.tihiragana=12385,e.tikatakana=12481,e.tikatakanahalfwidth=65409,e.tikeutacirclekorean=12912,e.tikeutaparenkorean=12816,e.tikeutcirclekorean=12898,e.tikeutkorean=12599,e.tikeutparenkorean=12802,e.tilde=732,e.tildebelowcmb=816,e.tildecmb=771,e.tildecomb=771,e.tildedoublecmb=864,e.tildeoperator=8764,e.tildeoverlaycmb=820,e.tildeverticalcmb=830,e.timescircle=8855,e.tipehahebrew=1430,e.tipehalefthebrew=1430,e.tippigurmukhi=2672,e.titlocyrilliccmb=1155,e.tiwnarmenian=1407,e.tlinebelow=7791,e.tmonospace=65364,e.toarmenian=1385,e.tohiragana=12392,e.tokatakana=12488,e.tokatakanahalfwidth=65412,e.tonebarextrahighmod=741,e.tonebarextralowmod=745,e.tonebarhighmod=742,e.tonebarlowmod=744,e.tonebarmidmod=743,e.tonefive=445,e.tonesix=389,e.tonetwo=424,e.tonos=900,e.tonsquare=13095,e.topatakthai=3599,e.tortoiseshellbracketleft=12308,e.tortoiseshellbracketleftsmall=65117,e.tortoiseshellbracketleftvertical=65081,e.tortoiseshellbracketright=12309,e.tortoiseshellbracketrightsmall=65118,e.tortoiseshellbracketrightvertical=65082,e.totaothai=3605,e.tpalatalhook=427,e.tparen=9391,e.trademark=8482,e.trademarksans=63722,e.trademarkserif=63195,e.tretroflexhook=648,e.triagdn=9660,e.triaglf=9668,e.triagrt=9658,e.triagup=9650,e.ts=678,e.tsadi=1510,e.tsadidagesh=64326,e.tsadidageshhebrew=64326,e.tsadihebrew=1510,e.tsecyrillic=1094,e.tsere=1461,e.tsere12=1461,e.tsere1e=1461,e.tsere2b=1461,e.tserehebrew=1461,e.tserenarrowhebrew=1461,e.tserequarterhebrew=1461,e.tserewidehebrew=1461,e.tshecyrillic=1115,e.tsuperior=63219,e.ttabengali=2463,e.ttadeva=2335,e.ttagujarati=2719,e.ttagurmukhi=2591,e.tteharabic=1657,e.ttehfinalarabic=64359,e.ttehinitialarabic=64360,e.ttehmedialarabic=64361,e.tthabengali=2464,e.tthadeva=2336,e.tthagujarati=2720,e.tthagurmukhi=2592,e.tturned=647,e.tuhiragana=12388,e.tukatakana=12484,e.tukatakanahalfwidth=65410,e.tusmallhiragana=12387,e.tusmallkatakana=12483,e.tusmallkatakanahalfwidth=65391,e.twelvecircle=9323,e.twelveparen=9343,e.twelveperiod=9363,e.twelveroman=8571,e.twentycircle=9331,e.twentyhangzhou=21316,e.twentyparen=9351,e.twentyperiod=9371,e.two=50,e.twoarabic=1634,e.twobengali=2536,e.twocircle=9313,e.twocircleinversesansserif=10123,e.twodeva=2408,e.twodotenleader=8229,e.twodotleader=8229,e.twodotleadervertical=65072,e.twogujarati=2792,e.twogurmukhi=2664,e.twohackarabic=1634,e.twohangzhou=12322,e.twoideographicparen=12833,e.twoinferior=8322,e.twomonospace=65298,e.twonumeratorbengali=2549,e.twooldstyle=63282,e.twoparen=9333,e.twoperiod=9353,e.twopersian=1778,e.tworoman=8561,e.twostroke=443,e.twosuperior=178,e.twothai=3666,e.twothirds=8532,e.u=117,e.uacute=250,e.ubar=649,e.ubengali=2441,e.ubopomofo=12584,e.ubreve=365,e.ucaron=468,e.ucircle=9444,e.ucircumflex=251,e.ucircumflexbelow=7799,e.ucyrillic=1091,e.udattadeva=2385,e.udblacute=369,e.udblgrave=533,e.udeva=2313,e.udieresis=252,e.udieresisacute=472,e.udieresisbelow=7795,e.udieresiscaron=474,e.udieresiscyrillic=1265,e.udieresisgrave=476,e.udieresismacron=470,e.udotbelow=7909,e.ugrave=249,e.ugujarati=2697,e.ugurmukhi=2569,e.uhiragana=12358,e.uhookabove=7911,e.uhorn=432,e.uhornacute=7913,e.uhorndotbelow=7921,e.uhorngrave=7915,e.uhornhookabove=7917,e.uhorntilde=7919,e.uhungarumlaut=369,e.uhungarumlautcyrillic=1267,e.uinvertedbreve=535,e.ukatakana=12454,e.ukatakanahalfwidth=65395,e.ukcyrillic=1145,e.ukorean=12636,e.umacron=363,e.umacroncyrillic=1263,e.umacrondieresis=7803,e.umatragurmukhi=2625,e.umonospace=65365,e.underscore=95,e.underscoredbl=8215,e.underscoremonospace=65343,e.underscorevertical=65075,e.underscorewavy=65103,e.union=8746,e.universal=8704,e.uogonek=371,e.uparen=9392,e.upblock=9600,e.upperdothebrew=1476,e.upsilon=965,e.upsilondieresis=971,e.upsilondieresistonos=944,e.upsilonlatin=650,e.upsilontonos=973,e.uptackbelowcmb=797,e.uptackmod=724,e.uragurmukhi=2675,e.uring=367,e.ushortcyrillic=1118,e.usmallhiragana=12357,e.usmallkatakana=12453,e.usmallkatakanahalfwidth=65385,e.ustraightcyrillic=1199,e.ustraightstrokecyrillic=1201,e.utilde=361,e.utildeacute=7801,e.utildebelow=7797,e.uubengali=2442,e.uudeva=2314,e.uugujarati=2698,e.uugurmukhi=2570,e.uumatragurmukhi=2626,e.uuvowelsignbengali=2498,e.uuvowelsigndeva=2370,e.uuvowelsigngujarati=2754,e.uvowelsignbengali=2497,e.uvowelsigndeva=2369,e.uvowelsigngujarati=2753,e.v=118,e.vadeva=2357,e.vagujarati=2741,e.vagurmukhi=2613,e.vakatakana=12535,e.vav=1493,e.vavdagesh=64309,e.vavdagesh65=64309,e.vavdageshhebrew=64309,e.vavhebrew=1493,e.vavholam=64331,e.vavholamhebrew=64331,e.vavvavhebrew=1520,e.vavyodhebrew=1521,e.vcircle=9445,e.vdotbelow=7807,e.vecyrillic=1074,e.veharabic=1700,e.vehfinalarabic=64363,e.vehinitialarabic=64364,e.vehmedialarabic=64365,e.vekatakana=12537,e.venus=9792,e.verticalbar=124,e.verticallineabovecmb=781,e.verticallinebelowcmb=809,e.verticallinelowmod=716,e.verticallinemod=712,e.vewarmenian=1406,e.vhook=651,e.vikatakana=12536,e.viramabengali=2509,e.viramadeva=2381,e.viramagujarati=2765,e.visargabengali=2435,e.visargadeva=2307,e.visargagujarati=2691,e.vmonospace=65366,e.voarmenian=1400,e.voicediterationhiragana=12446,e.voicediterationkatakana=12542,e.voicedmarkkana=12443,e.voicedmarkkanahalfwidth=65438,e.vokatakana=12538,e.vparen=9393,e.vtilde=7805,e.vturned=652,e.vuhiragana=12436,e.vukatakana=12532,e.w=119,e.wacute=7811,e.waekorean=12633,e.wahiragana=12431,e.wakatakana=12527,e.wakatakanahalfwidth=65436,e.wakorean=12632,e.wasmallhiragana=12430,e.wasmallkatakana=12526,e.wattosquare=13143,e.wavedash=12316,e.wavyunderscorevertical=65076,e.wawarabic=1608,e.wawfinalarabic=65262,e.wawhamzaabovearabic=1572,e.wawhamzaabovefinalarabic=65158,e.wbsquare=13277,e.wcircle=9446,e.wcircumflex=373,e.wdieresis=7813,e.wdotaccent=7815,e.wdotbelow=7817,e.wehiragana=12433,e.weierstrass=8472,e.wekatakana=12529,e.wekorean=12638,e.weokorean=12637,e.wgrave=7809,e.whitebullet=9702,e.whitecircle=9675,e.whitecircleinverse=9689,e.whitecornerbracketleft=12302,e.whitecornerbracketleftvertical=65091,e.whitecornerbracketright=12303,e.whitecornerbracketrightvertical=65092,e.whitediamond=9671,e.whitediamondcontainingblacksmalldiamond=9672,e.whitedownpointingsmalltriangle=9663,e.whitedownpointingtriangle=9661,e.whiteleftpointingsmalltriangle=9667,e.whiteleftpointingtriangle=9665,e.whitelenticularbracketleft=12310,e.whitelenticularbracketright=12311,e.whiterightpointingsmalltriangle=9657,e.whiterightpointingtriangle=9655,e.whitesmallsquare=9643,e.whitesmilingface=9786,e.whitesquare=9633,e.whitestar=9734,e.whitetelephone=9743,e.whitetortoiseshellbracketleft=12312,e.whitetortoiseshellbracketright=12313,e.whiteuppointingsmalltriangle=9653,e.whiteuppointingtriangle=9651,e.wihiragana=12432,e.wikatakana=12528,e.wikorean=12639,e.wmonospace=65367,e.wohiragana=12434,e.wokatakana=12530,e.wokatakanahalfwidth=65382,e.won=8361,e.wonmonospace=65510,e.wowaenthai=3623,e.wparen=9394,e.wring=7832,e.wsuperior=695,e.wturned=653,e.wynn=447,e.x=120,e.xabovecmb=829,e.xbopomofo=12562,e.xcircle=9447,e.xdieresis=7821,e.xdotaccent=7819,e.xeharmenian=1389,e.xi=958,e.xmonospace=65368,e.xparen=9395,e.xsuperior=739,e.y=121,e.yaadosquare=13134,e.yabengali=2479,e.yacute=253,e.yadeva=2351,e.yaekorean=12626,e.yagujarati=2735,e.yagurmukhi=2607,e.yahiragana=12420,e.yakatakana=12516,e.yakatakanahalfwidth=65428,e.yakorean=12625,e.yamakkanthai=3662,e.yasmallhiragana=12419,e.yasmallkatakana=12515,e.yasmallkatakanahalfwidth=65388,e.yatcyrillic=1123,e.ycircle=9448,e.ycircumflex=375,e.ydieresis=255,e.ydotaccent=7823,e.ydotbelow=7925,e.yeharabic=1610,e.yehbarreearabic=1746,e.yehbarreefinalarabic=64431,e.yehfinalarabic=65266,e.yehhamzaabovearabic=1574,e.yehhamzaabovefinalarabic=65162,e.yehhamzaaboveinitialarabic=65163,e.yehhamzaabovemedialarabic=65164,e.yehinitialarabic=65267,e.yehmedialarabic=65268,e.yehmeeminitialarabic=64733,e.yehmeemisolatedarabic=64600,e.yehnoonfinalarabic=64660,e.yehthreedotsbelowarabic=1745,e.yekorean=12630,e.yen=165,e.yenmonospace=65509,e.yeokorean=12629,e.yeorinhieuhkorean=12678,e.yerahbenyomohebrew=1450,e.yerahbenyomolefthebrew=1450,e.yericyrillic=1099,e.yerudieresiscyrillic=1273,e.yesieungkorean=12673,e.yesieungpansioskorean=12675,e.yesieungsioskorean=12674,e.yetivhebrew=1434,e.ygrave=7923,e.yhook=436,e.yhookabove=7927,e.yiarmenian=1397,e.yicyrillic=1111,e.yikorean=12642,e.yinyang=9775,e.yiwnarmenian=1410,e.ymonospace=65369,e.yod=1497,e.yoddagesh=64313,e.yoddageshhebrew=64313,e.yodhebrew=1497,e.yodyodhebrew=1522,e.yodyodpatahhebrew=64287,e.yohiragana=12424,e.yoikorean=12681,e.yokatakana=12520,e.yokatakanahalfwidth=65430,e.yokorean=12635,e.yosmallhiragana=12423,e.yosmallkatakana=12519,e.yosmallkatakanahalfwidth=65390,e.yotgreek=1011,e.yoyaekorean=12680,e.yoyakorean=12679,e.yoyakthai=3618,e.yoyingthai=3597,e.yparen=9396,e.ypogegrammeni=890,e.ypogegrammenigreekcmb=837,e.yr=422,e.yring=7833,e.ysuperior=696,e.ytilde=7929,e.yturned=654,e.yuhiragana=12422,e.yuikorean=12684,e.yukatakana=12518,e.yukatakanahalfwidth=65429,e.yukorean=12640,e.yusbigcyrillic=1131,e.yusbigiotifiedcyrillic=1133,e.yuslittlecyrillic=1127,e.yuslittleiotifiedcyrillic=1129,e.yusmallhiragana=12421,e.yusmallkatakana=12517,e.yusmallkatakanahalfwidth=65389,e.yuyekorean=12683,e.yuyeokorean=12682,e.yyabengali=2527,e.yyadeva=2399,e.z=122,e.zaarmenian=1382,e.zacute=378,e.zadeva=2395,e.zagurmukhi=2651,e.zaharabic=1592,e.zahfinalarabic=65222,e.zahinitialarabic=65223,e.zahiragana=12374,e.zahmedialarabic=65224,e.zainarabic=1586,e.zainfinalarabic=65200,e.zakatakana=12470,e.zaqefgadolhebrew=1429,e.zaqefqatanhebrew=1428,e.zarqahebrew=1432,e.zayin=1494,e.zayindagesh=64310,e.zayindageshhebrew=64310,e.zayinhebrew=1494,e.zbopomofo=12567,e.zcaron=382,e.zcircle=9449,e.zcircumflex=7825,e.zcurl=657,e.zdot=380,e.zdotaccent=380,e.zdotbelow=7827,e.zecyrillic=1079,e.zedescendercyrillic=1177,e.zedieresiscyrillic=1247,e.zehiragana=12380,e.zekatakana=12476,e.zero=48,e.zeroarabic=1632,e.zerobengali=2534,e.zerodeva=2406,e.zerogujarati=2790,e.zerogurmukhi=2662,e.zerohackarabic=1632,e.zeroinferior=8320,e.zeromonospace=65296,e.zerooldstyle=63280,e.zeropersian=1776,e.zerosuperior=8304,e.zerothai=3664,e.zerowidthjoiner=65279,e.zerowidthnonjoiner=8204,e.zerowidthspace=8203,e.zeta=950,e.zhbopomofo=12563,e.zhearmenian=1386,e.zhebrevecyrillic=1218,e.zhecyrillic=1078,e.zhedescendercyrillic=1175,e.zhedieresiscyrillic=1245,e.zihiragana=12376,e.zikatakana=12472,e.zinorhebrew=1454,e.zlinebelow=7829,e.zmonospace=65370,e.zohiragana=12382,e.zokatakana=12478,e.zparen=9397,e.zretroflexhook=656,e.zstroke=438,e.zuhiragana=12378,e.zukatakana=12474,e[".notdef"]=0,e.angbracketleftbig=9001,e.angbracketleftBig=9001,e.angbracketleftbigg=9001,e.angbracketleftBigg=9001,e.angbracketrightBig=9002,e.angbracketrightbig=9002,e.angbracketrightBigg=9002,e.angbracketrightbigg=9002,e.arrowhookleft=8618,e.arrowhookright=8617,e.arrowlefttophalf=8636,e.arrowleftbothalf=8637,e.arrownortheast=8599,e.arrownorthwest=8598,e.arrowrighttophalf=8640,e.arrowrightbothalf=8641,e.arrowsoutheast=8600,e.arrowsouthwest=8601,e.backslashbig=8726,e.backslashBig=8726,e.backslashBigg=8726,e.backslashbigg=8726,e.bardbl=8214,e.bracehtipdownleft=65079,e.bracehtipdownright=65079,e.bracehtipupleft=65080,e.bracehtipupright=65080,e.braceleftBig=123,e.braceleftbig=123,e.braceleftbigg=123,e.braceleftBigg=123,e.bracerightBig=125,e.bracerightbig=125,e.bracerightbigg=125,e.bracerightBigg=125,e.bracketleftbig=91,e.bracketleftBig=91,e.bracketleftbigg=91,e.bracketleftBigg=91,e.bracketrightBig=93,e.bracketrightbig=93,e.bracketrightbigg=93,e.bracketrightBigg=93,e.ceilingleftbig=8968,e.ceilingleftBig=8968,e.ceilingleftBigg=8968,e.ceilingleftbigg=8968,e.ceilingrightbig=8969,e.ceilingrightBig=8969,e.ceilingrightbigg=8969,e.ceilingrightBigg=8969,e.circledotdisplay=8857,e.circledottext=8857,e.circlemultiplydisplay=8855,e.circlemultiplytext=8855,e.circleplusdisplay=8853,e.circleplustext=8853,e.contintegraldisplay=8750,e.contintegraltext=8750,e.coproductdisplay=8720,e.coproducttext=8720,e.floorleftBig=8970,e.floorleftbig=8970,e.floorleftbigg=8970,e.floorleftBigg=8970,e.floorrightbig=8971,e.floorrightBig=8971,e.floorrightBigg=8971,e.floorrightbigg=8971,e.hatwide=770,e.hatwider=770,e.hatwidest=770,e.intercal=7488,e.integraldisplay=8747,e.integraltext=8747,e.intersectiondisplay=8898,e.intersectiontext=8898,e.logicalanddisplay=8743,e.logicalandtext=8743,e.logicalordisplay=8744,e.logicalortext=8744,e.parenleftBig=40,e.parenleftbig=40,e.parenleftBigg=40,e.parenleftbigg=40,e.parenrightBig=41,e.parenrightbig=41,e.parenrightBigg=41,e.parenrightbigg=41,e.prime=8242,e.productdisplay=8719,e.producttext=8719,e.radicalbig=8730,e.radicalBig=8730,e.radicalBigg=8730,e.radicalbigg=8730,e.radicalbt=8730,e.radicaltp=8730,e.radicalvertex=8730,e.slashbig=47,e.slashBig=47,e.slashBigg=47,e.slashbigg=47,e.summationdisplay=8721,e.summationtext=8721,e.tildewide=732,e.tildewider=732,e.tildewidest=732,e.uniondisplay=8899,e.unionmultidisplay=8846,e.unionmultitext=8846,e.unionsqdisplay=8852,e.unionsqtext=8852,e.uniontext=8899,e.vextenddouble=8741,e.vextendsingle=8739});D.getGlyphsUnicode=w;const P=(0,i.getLookupTableFactory)(function(e){e.space=32,e.a1=9985,e.a2=9986,e.a202=9987,e.a3=9988,e.a4=9742,e.a5=9990,e.a119=9991,e.a118=9992,e.a117=9993,e.a11=9755,e.a12=9758,e.a13=9996,e.a14=9997,e.a15=9998,e.a16=9999,e.a105=1e4,e.a17=10001,e.a18=10002,e.a19=10003,e.a20=10004,e.a21=10005,e.a22=10006,e.a23=10007,e.a24=10008,e.a25=10009,e.a26=10010,e.a27=10011,e.a28=10012,e.a6=10013,e.a7=10014,e.a8=10015,e.a9=10016,e.a10=10017,e.a29=10018,e.a30=10019,e.a31=10020,e.a32=10021,e.a33=10022,e.a34=10023,e.a35=9733,e.a36=10025,e.a37=10026,e.a38=10027,e.a39=10028,e.a40=10029,e.a41=10030,e.a42=10031,e.a43=10032,e.a44=10033,e.a45=10034,e.a46=10035,e.a47=10036,e.a48=10037,e.a49=10038,e.a50=10039,e.a51=10040,e.a52=10041,e.a53=10042,e.a54=10043,e.a55=10044,e.a56=10045,e.a57=10046,e.a58=10047,e.a59=10048,e.a60=10049,e.a61=10050,e.a62=10051,e.a63=10052,e.a64=10053,e.a65=10054,e.a66=10055,e.a67=10056,e.a68=10057,e.a69=10058,e.a70=10059,e.a71=9679,e.a72=10061,e.a73=9632,e.a74=10063,e.a203=10064,e.a75=10065,e.a204=10066,e.a76=9650,e.a77=9660,e.a78=9670,e.a79=10070,e.a81=9687,e.a82=10072,e.a83=10073,e.a84=10074,e.a97=10075,e.a98=10076,e.a99=10077,e.a100=10078,e.a101=10081,e.a102=10082,e.a103=10083,e.a104=10084,e.a106=10085,e.a107=10086,e.a108=10087,e.a112=9827,e.a111=9830,e.a110=9829,e.a109=9824,e.a120=9312,e.a121=9313,e.a122=9314,e.a123=9315,e.a124=9316,e.a125=9317,e.a126=9318,e.a127=9319,e.a128=9320,e.a129=9321,e.a130=10102,e.a131=10103,e.a132=10104,e.a133=10105,e.a134=10106,e.a135=10107,e.a136=10108,e.a137=10109,e.a138=10110,e.a139=10111,e.a140=10112,e.a141=10113,e.a142=10114,e.a143=10115,e.a144=10116,e.a145=10117,e.a146=10118,e.a147=10119,e.a148=10120,e.a149=10121,e.a150=10122,e.a151=10123,e.a152=10124,e.a153=10125,e.a154=10126,e.a155=10127,e.a156=10128,e.a157=10129,e.a158=10130,e.a159=10131,e.a160=10132,e.a161=8594,e.a163=8596,e.a164=8597,e.a196=10136,e.a165=10137,e.a192=10138,e.a166=10139,e.a167=10140,e.a168=10141,e.a169=10142,e.a170=10143,e.a171=10144,e.a172=10145,e.a173=10146,e.a162=10147,e.a174=10148,e.a175=10149,e.a176=10150,e.a177=10151,e.a178=10152,e.a179=10153,e.a193=10154,e.a180=10155,e.a199=10156,e.a181=10157,e.a200=10158,e.a182=10159,e.a201=10161,e.a183=10162,e.a184=10163,e.a197=10164,e.a185=10165,e.a194=10166,e.a198=10167,e.a186=10168,e.a195=10169,e.a187=10170,e.a188=10171,e.a189=10172,e.a190=10173,e.a191=10174,e.a89=10088,e.a90=10089,e.a93=10090,e.a94=10091,e.a91=10092,e.a92=10093,e.a205=10094,e.a85=10095,e.a206=10096,e.a86=10097,e.a87=10098,e.a88=10099,e.a95=10100,e.a96=10101,e[".notdef"]=0});D.getDingbatsGlyphsUnicode=P},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.clearUnicodeCaches=O,D.getCharUnicodeCategory=C,D.getUnicodeForGlyph=e,D.getUnicodeRangeFor=o,D.mapSpecialUnicodeValues=P;var i=se(3);const w=(0,i.getLookupTableFactory)(function(d){d[63721]=169,d[63193]=169,d[63720]=174,d[63194]=174,d[63722]=8482,d[63195]=8482,d[63729]=9127,d[63730]=9128,d[63731]=9129,d[63740]=9131,d[63741]=9132,d[63742]=9133,d[63726]=9121,d[63727]=9122,d[63728]=9123,d[63737]=9124,d[63738]=9125,d[63739]=9126,d[63723]=9115,d[63724]=9116,d[63725]=9117,d[63734]=9118,d[63735]=9119,d[63736]=9120});function P(d){return d>=65520&&d<=65535?0:d>=62976&&d<=63743?w()[d]||d:d===173?45:d}function e(d,A){let n=A[d];if(n!==void 0)return n;if(!d)return-1;if(d[0]==="u"){const I=d.length;let k;if(I===7&&d[1]==="n"&&d[2]==="i")k=d.substring(3);else if(I>=5&&I<=7)k=d.substring(1);else return-1;if(k===k.toUpperCase()&&(n=parseInt(k,16),n>=0))return n}return-1}const t=[[0,127],[128,255],[256,383],[384,591],[592,687,7424,7551,7552,7615],[688,767,42752,42783],[768,879,7616,7679],[880,1023],[11392,11519],[1024,1279,1280,1327,11744,11775,42560,42655],[1328,1423],[1424,1535],[42240,42559],[1536,1791,1872,1919],[1984,2047],[2304,2431],[2432,2559],[2560,2687],[2688,2815],[2816,2943],[2944,3071],[3072,3199],[3200,3327],[3328,3455],[3584,3711],[3712,3839],[4256,4351,11520,11567],[6912,7039],[4352,4607],[7680,7935,11360,11391,42784,43007],[7936,8191],[8192,8303,11776,11903],[8304,8351],[8352,8399],[8400,8447],[8448,8527],[8528,8591],[8592,8703,10224,10239,10496,10623,11008,11263],[8704,8959,10752,11007,10176,10223,10624,10751],[8960,9215],[9216,9279],[9280,9311],[9312,9471],[9472,9599],[9600,9631],[9632,9727],[9728,9983],[9984,10175],[12288,12351],[12352,12447],[12448,12543,12784,12799],[12544,12591,12704,12735],[12592,12687],[43072,43135],[12800,13055],[13056,13311],[44032,55215],[55296,57343],[67840,67871],[19968,40959,11904,12031,12032,12255,12272,12287,13312,19903,131072,173791,12688,12703],[57344,63743],[12736,12783,63744,64255,194560,195103],[64256,64335],[64336,65023],[65056,65071],[65040,65055],[65104,65135],[65136,65279],[65280,65519],[65520,65535],[3840,4095],[1792,1871],[1920,1983],[3456,3583],[4096,4255],[4608,4991,4992,5023,11648,11743],[5024,5119],[5120,5759],[5760,5791],[5792,5887],[6016,6143],[6144,6319],[10240,10495],[40960,42127],[5888,5919,5920,5951,5952,5983,5984,6015],[66304,66351],[66352,66383],[66560,66639],[118784,119039,119040,119295,119296,119375],[119808,120831],[1044480,1048573],[65024,65039,917760,917999],[917504,917631],[6400,6479],[6480,6527],[6528,6623],[6656,6687],[11264,11359],[11568,11647],[19904,19967],[43008,43055],[65536,65663,65664,65791,65792,65855],[65856,65935],[66432,66463],[66464,66527],[66640,66687],[66688,66735],[67584,67647],[68096,68191],[119552,119647],[73728,74751,74752,74879],[119648,119679],[7040,7103],[7168,7247],[7248,7295],[43136,43231],[43264,43311],[43312,43359],[43520,43615],[65936,65999],[66e3,66047],[66208,66271,66176,66207,67872,67903],[127024,127135,126976,127023]];function o(d,A=-1){if(A!==-1){const n=t[A];for(let I=0,k=n.length;I<k;I+=2)if(d>=n[I]&&d<=n[I+1])return A}for(let n=0,I=t.length;n<I;n++){const k=t[n];for(let y=0,f=k.length;y<f;y+=2)if(d>=k[y]&&d<=k[y+1])return n}return-1}const K=new RegExp("^(\\s)|(\\p{Mn})|(\\p{Cf})$","u"),j=new Map;function C(d){const A=j.get(d);if(A)return A;const n=d.match(K),I={isWhitespace:!!(n!=null&&n[1]),isZeroWidthDiacritic:!!(n!=null&&n[2]),isInvisibleFormatMark:!!(n!=null&&n[3])};return j.set(d,I),I}function O(){j.clear()}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.getSerifFonts=D.getNonStdFontMap=D.getGlyphMapForStandardFonts=D.getFontNameToFileMap=void 0,D.getStandardFontName=d,D.getSymbolsFonts=D.getSupplementalGlyphMapForCalibri=D.getSupplementalGlyphMapForArialBlack=D.getStdFontMap=void 0,D.isKnownFontName=A;var i=se(3),w=se(38);const P=(0,i.getLookupTableFactory)(function(n){n["Times-Roman"]="Times-Roman",n.Helvetica="Helvetica",n.Courier="Courier",n.Symbol="Symbol",n["Times-Bold"]="Times-Bold",n["Helvetica-Bold"]="Helvetica-Bold",n["Courier-Bold"]="Courier-Bold",n.ZapfDingbats="ZapfDingbats",n["Times-Italic"]="Times-Italic",n["Helvetica-Oblique"]="Helvetica-Oblique",n["Courier-Oblique"]="Courier-Oblique",n["Times-BoldItalic"]="Times-BoldItalic",n["Helvetica-BoldOblique"]="Helvetica-BoldOblique",n["Courier-BoldOblique"]="Courier-BoldOblique",n.ArialNarrow="Helvetica",n["ArialNarrow-Bold"]="Helvetica-Bold",n["ArialNarrow-BoldItalic"]="Helvetica-BoldOblique",n["ArialNarrow-Italic"]="Helvetica-Oblique",n.ArialBlack="Helvetica",n["ArialBlack-Bold"]="Helvetica-Bold",n["ArialBlack-BoldItalic"]="Helvetica-BoldOblique",n["ArialBlack-Italic"]="Helvetica-Oblique",n["Arial-Black"]="Helvetica",n["Arial-Black-Bold"]="Helvetica-Bold",n["Arial-Black-BoldItalic"]="Helvetica-BoldOblique",n["Arial-Black-Italic"]="Helvetica-Oblique",n.Arial="Helvetica",n["Arial-Bold"]="Helvetica-Bold",n["Arial-BoldItalic"]="Helvetica-BoldOblique",n["Arial-Italic"]="Helvetica-Oblique",n.ArialMT="Helvetica",n["Arial-BoldItalicMT"]="Helvetica-BoldOblique",n["Arial-BoldMT"]="Helvetica-Bold",n["Arial-ItalicMT"]="Helvetica-Oblique",n["Arial-BoldItalicMT-BoldItalic"]="Helvetica-BoldOblique",n["Arial-BoldMT-Bold"]="Helvetica-Bold",n["Arial-ItalicMT-Italic"]="Helvetica-Oblique",n.ArialUnicodeMS="Helvetica",n["ArialUnicodeMS-Bold"]="Helvetica-Bold",n["ArialUnicodeMS-BoldItalic"]="Helvetica-BoldOblique",n["ArialUnicodeMS-Italic"]="Helvetica-Oblique",n["Courier-BoldItalic"]="Courier-BoldOblique",n["Courier-Italic"]="Courier-Oblique",n.CourierNew="Courier",n["CourierNew-Bold"]="Courier-Bold",n["CourierNew-BoldItalic"]="Courier-BoldOblique",n["CourierNew-Italic"]="Courier-Oblique",n["CourierNewPS-BoldItalicMT"]="Courier-BoldOblique",n["CourierNewPS-BoldMT"]="Courier-Bold",n["CourierNewPS-ItalicMT"]="Courier-Oblique",n.CourierNewPSMT="Courier",n["Helvetica-BoldItalic"]="Helvetica-BoldOblique",n["Helvetica-Italic"]="Helvetica-Oblique",n["Symbol-Bold"]="Symbol",n["Symbol-BoldItalic"]="Symbol",n["Symbol-Italic"]="Symbol",n.TimesNewRoman="Times-Roman",n["TimesNewRoman-Bold"]="Times-Bold",n["TimesNewRoman-BoldItalic"]="Times-BoldItalic",n["TimesNewRoman-Italic"]="Times-Italic",n.TimesNewRomanPS="Times-Roman",n["TimesNewRomanPS-Bold"]="Times-Bold",n["TimesNewRomanPS-BoldItalic"]="Times-BoldItalic",n["TimesNewRomanPS-BoldItalicMT"]="Times-BoldItalic",n["TimesNewRomanPS-BoldMT"]="Times-Bold",n["TimesNewRomanPS-Italic"]="Times-Italic",n["TimesNewRomanPS-ItalicMT"]="Times-Italic",n.TimesNewRomanPSMT="Times-Roman",n["TimesNewRomanPSMT-Bold"]="Times-Bold",n["TimesNewRomanPSMT-BoldItalic"]="Times-BoldItalic",n["TimesNewRomanPSMT-Italic"]="Times-Italic"});D.getStdFontMap=P;const e=(0,i.getLookupTableFactory)(function(n){n.Courier="FoxitFixed.pfb",n["Courier-Bold"]="FoxitFixedBold.pfb",n["Courier-BoldOblique"]="FoxitFixedBoldItalic.pfb",n["Courier-Oblique"]="FoxitFixedItalic.pfb",n.Helvetica="LiberationSans-Regular.ttf",n["Helvetica-Bold"]="LiberationSans-Bold.ttf",n["Helvetica-BoldOblique"]="LiberationSans-BoldItalic.ttf",n["Helvetica-Oblique"]="LiberationSans-Italic.ttf",n["Times-Roman"]="FoxitSerif.pfb",n["Times-Bold"]="FoxitSerifBold.pfb",n["Times-BoldItalic"]="FoxitSerifBoldItalic.pfb",n["Times-Italic"]="FoxitSerifItalic.pfb",n.Symbol="FoxitSymbol.pfb",n.ZapfDingbats="FoxitDingbats.pfb",n["LiberationSans-Regular"]="LiberationSans-Regular.ttf",n["LiberationSans-Bold"]="LiberationSans-Bold.ttf",n["LiberationSans-Italic"]="LiberationSans-Italic.ttf",n["LiberationSans-BoldItalic"]="LiberationSans-BoldItalic.ttf"});D.getFontNameToFileMap=e;const t=(0,i.getLookupTableFactory)(function(n){n.Calibri="Helvetica",n["Calibri-Bold"]="Helvetica-Bold",n["Calibri-BoldItalic"]="Helvetica-BoldOblique",n["Calibri-Italic"]="Helvetica-Oblique",n.CenturyGothic="Helvetica",n["CenturyGothic-Bold"]="Helvetica-Bold",n["CenturyGothic-BoldItalic"]="Helvetica-BoldOblique",n["CenturyGothic-Italic"]="Helvetica-Oblique",n.ComicSansMS="Comic Sans MS",n["ComicSansMS-Bold"]="Comic Sans MS-Bold",n["ComicSansMS-BoldItalic"]="Comic Sans MS-BoldItalic",n["ComicSansMS-Italic"]="Comic Sans MS-Italic",n.Impact="Helvetica",n["ItcSymbol-Bold"]="Helvetica-Bold",n["ItcSymbol-BoldItalic"]="Helvetica-BoldOblique",n["ItcSymbol-Book"]="Helvetica",n["ItcSymbol-BookItalic"]="Helvetica-Oblique",n["ItcSymbol-Medium"]="Helvetica",n["ItcSymbol-MediumItalic"]="Helvetica-Oblique",n.LucidaConsole="Courier",n["LucidaConsole-Bold"]="Courier-Bold",n["LucidaConsole-BoldItalic"]="Courier-BoldOblique",n["LucidaConsole-Italic"]="Courier-Oblique",n["LucidaSans-Demi"]="Helvetica-Bold",n["MS-Gothic"]="MS Gothic",n["MS-Gothic-Bold"]="MS Gothic-Bold",n["MS-Gothic-BoldItalic"]="MS Gothic-BoldItalic",n["MS-Gothic-Italic"]="MS Gothic-Italic",n["MS-Mincho"]="MS Mincho",n["MS-Mincho-Bold"]="MS Mincho-Bold",n["MS-Mincho-BoldItalic"]="MS Mincho-BoldItalic",n["MS-Mincho-Italic"]="MS Mincho-Italic",n["MS-PGothic"]="MS PGothic",n["MS-PGothic-Bold"]="MS PGothic-Bold",n["MS-PGothic-BoldItalic"]="MS PGothic-BoldItalic",n["MS-PGothic-Italic"]="MS PGothic-Italic",n["MS-PMincho"]="MS PMincho",n["MS-PMincho-Bold"]="MS PMincho-Bold",n["MS-PMincho-BoldItalic"]="MS PMincho-BoldItalic",n["MS-PMincho-Italic"]="MS PMincho-Italic",n.NuptialScript="Times-Italic",n.SegoeUISymbol="Helvetica"});D.getNonStdFontMap=t;const o=(0,i.getLookupTableFactory)(function(n){n["Adobe Jenson"]=!0,n["Adobe Text"]=!0,n.Albertus=!0,n.Aldus=!0,n.Alexandria=!0,n.Algerian=!0,n["American Typewriter"]=!0,n.Antiqua=!0,n.Apex=!0,n.Arno=!0,n.Aster=!0,n.Aurora=!0,n.Baskerville=!0,n.Bell=!0,n.Bembo=!0,n["Bembo Schoolbook"]=!0,n.Benguiat=!0,n["Berkeley Old Style"]=!0,n["Bernhard Modern"]=!0,n["Berthold City"]=!0,n.Bodoni=!0,n["Bauer Bodoni"]=!0,n["Book Antiqua"]=!0,n.Bookman=!0,n["Bordeaux Roman"]=!0,n["Californian FB"]=!0,n.Calisto=!0,n.Calvert=!0,n.Capitals=!0,n.Cambria=!0,n.Cartier=!0,n.Caslon=!0,n.Catull=!0,n.Centaur=!0,n["Century Old Style"]=!0,n["Century Schoolbook"]=!0,n.Chaparral=!0,n["Charis SIL"]=!0,n.Cheltenham=!0,n["Cholla Slab"]=!0,n.Clarendon=!0,n.Clearface=!0,n.Cochin=!0,n.Colonna=!0,n["Computer Modern"]=!0,n["Concrete Roman"]=!0,n.Constantia=!0,n["Cooper Black"]=!0,n.Corona=!0,n.Ecotype=!0,n.Egyptienne=!0,n.Elephant=!0,n.Excelsior=!0,n.Fairfield=!0,n["FF Scala"]=!0,n.Folkard=!0,n.Footlight=!0,n.FreeSerif=!0,n["Friz Quadrata"]=!0,n.Garamond=!0,n.Gentium=!0,n.Georgia=!0,n.Gloucester=!0,n["Goudy Old Style"]=!0,n["Goudy Schoolbook"]=!0,n["Goudy Pro Font"]=!0,n.Granjon=!0,n["Guardian Egyptian"]=!0,n.Heather=!0,n.Hercules=!0,n["High Tower Text"]=!0,n.Hiroshige=!0,n["Hoefler Text"]=!0,n["Humana Serif"]=!0,n.Imprint=!0,n["Ionic No. 5"]=!0,n.Janson=!0,n.Joanna=!0,n.Korinna=!0,n.Lexicon=!0,n.LiberationSerif=!0,n["Liberation Serif"]=!0,n["Linux Libertine"]=!0,n.Literaturnaya=!0,n.Lucida=!0,n["Lucida Bright"]=!0,n.Melior=!0,n.Memphis=!0,n.Miller=!0,n.Minion=!0,n.Modern=!0,n["Mona Lisa"]=!0,n["Mrs Eaves"]=!0,n["MS Serif"]=!0,n["Museo Slab"]=!0,n["New York"]=!0,n["Nimbus Roman"]=!0,n["NPS Rawlinson Roadway"]=!0,n.NuptialScript=!0,n.Palatino=!0,n.Perpetua=!0,n.Plantin=!0,n["Plantin Schoolbook"]=!0,n.Playbill=!0,n["Poor Richard"]=!0,n["Rawlinson Roadway"]=!0,n.Renault=!0,n.Requiem=!0,n.Rockwell=!0,n.Roman=!0,n["Rotis Serif"]=!0,n.Sabon=!0,n.Scala=!0,n.Seagull=!0,n.Sistina=!0,n.Souvenir=!0,n.STIX=!0,n["Stone Informal"]=!0,n["Stone Serif"]=!0,n.Sylfaen=!0,n.Times=!0,n.Trajan=!0,n.Trinité=!0,n["Trump Mediaeval"]=!0,n.Utopia=!0,n["Vale Type"]=!0,n["Bitstream Vera"]=!0,n["Vera Serif"]=!0,n.Versailles=!0,n.Wanted=!0,n.Weiss=!0,n["Wide Latin"]=!0,n.Windsor=!0,n.XITS=!0});D.getSerifFonts=o;const K=(0,i.getLookupTableFactory)(function(n){n.Dingbats=!0,n.Symbol=!0,n.ZapfDingbats=!0,n.Wingdings=!0,n["Wingdings-Bold"]=!0,n["Wingdings-Regular"]=!0});D.getSymbolsFonts=K;const j=(0,i.getLookupTableFactory)(function(n){n[2]=10,n[3]=32,n[4]=33,n[5]=34,n[6]=35,n[7]=36,n[8]=37,n[9]=38,n[10]=39,n[11]=40,n[12]=41,n[13]=42,n[14]=43,n[15]=44,n[16]=45,n[17]=46,n[18]=47,n[19]=48,n[20]=49,n[21]=50,n[22]=51,n[23]=52,n[24]=53,n[25]=54,n[26]=55,n[27]=56,n[28]=57,n[29]=58,n[30]=894,n[31]=60,n[32]=61,n[33]=62,n[34]=63,n[35]=64,n[36]=65,n[37]=66,n[38]=67,n[39]=68,n[40]=69,n[41]=70,n[42]=71,n[43]=72,n[44]=73,n[45]=74,n[46]=75,n[47]=76,n[48]=77,n[49]=78,n[50]=79,n[51]=80,n[52]=81,n[53]=82,n[54]=83,n[55]=84,n[56]=85,n[57]=86,n[58]=87,n[59]=88,n[60]=89,n[61]=90,n[62]=91,n[63]=92,n[64]=93,n[65]=94,n[66]=95,n[67]=96,n[68]=97,n[69]=98,n[70]=99,n[71]=100,n[72]=101,n[73]=102,n[74]=103,n[75]=104,n[76]=105,n[77]=106,n[78]=107,n[79]=108,n[80]=109,n[81]=110,n[82]=111,n[83]=112,n[84]=113,n[85]=114,n[86]=115,n[87]=116,n[88]=117,n[89]=118,n[90]=119,n[91]=120,n[92]=121,n[93]=122,n[94]=123,n[95]=124,n[96]=125,n[97]=126,n[98]=196,n[99]=197,n[100]=199,n[101]=201,n[102]=209,n[103]=214,n[104]=220,n[105]=225,n[106]=224,n[107]=226,n[108]=228,n[109]=227,n[110]=229,n[111]=231,n[112]=233,n[113]=232,n[114]=234,n[115]=235,n[116]=237,n[117]=236,n[118]=238,n[119]=239,n[120]=241,n[121]=243,n[122]=242,n[123]=244,n[124]=246,n[125]=245,n[126]=250,n[127]=249,n[128]=251,n[129]=252,n[130]=8224,n[131]=176,n[132]=162,n[133]=163,n[134]=167,n[135]=8226,n[136]=182,n[137]=223,n[138]=174,n[139]=169,n[140]=8482,n[141]=180,n[142]=168,n[143]=8800,n[144]=198,n[145]=216,n[146]=8734,n[147]=177,n[148]=8804,n[149]=8805,n[150]=165,n[151]=181,n[152]=8706,n[153]=8721,n[154]=8719,n[156]=8747,n[157]=170,n[158]=186,n[159]=8486,n[160]=230,n[161]=248,n[162]=191,n[163]=161,n[164]=172,n[165]=8730,n[166]=402,n[167]=8776,n[168]=8710,n[169]=171,n[170]=187,n[171]=8230,n[179]=8220,n[180]=8221,n[181]=8216,n[182]=8217,n[200]=193,n[203]=205,n[207]=211,n[210]=218,n[223]=711,n[224]=321,n[225]=322,n[226]=352,n[227]=353,n[228]=381,n[229]=382,n[233]=221,n[234]=253,n[252]=263,n[253]=268,n[254]=269,n[258]=258,n[260]=260,n[261]=261,n[265]=280,n[266]=281,n[267]=282,n[268]=283,n[269]=313,n[275]=323,n[276]=324,n[278]=328,n[283]=344,n[284]=345,n[285]=346,n[286]=347,n[292]=367,n[295]=377,n[296]=378,n[298]=380,n[305]=963,n[306]=964,n[307]=966,n[308]=8215,n[309]=8252,n[310]=8319,n[311]=8359,n[312]=8592,n[313]=8593,n[337]=9552,n[493]=1039,n[494]=1040,n[672]=1488,n[673]=1489,n[674]=1490,n[675]=1491,n[676]=1492,n[677]=1493,n[678]=1494,n[679]=1495,n[680]=1496,n[681]=1497,n[682]=1498,n[683]=1499,n[684]=1500,n[685]=1501,n[686]=1502,n[687]=1503,n[688]=1504,n[689]=1505,n[690]=1506,n[691]=1507,n[692]=1508,n[693]=1509,n[694]=1510,n[695]=1511,n[696]=1512,n[697]=1513,n[698]=1514,n[705]=1524,n[706]=8362,n[710]=64288,n[711]=64298,n[759]=1617,n[761]=1776,n[763]=1778,n[775]=1652,n[777]=1764,n[778]=1780,n[779]=1781,n[780]=1782,n[782]=771,n[783]=64726,n[786]=8363,n[788]=8532,n[790]=768,n[791]=769,n[792]=768,n[795]=803,n[797]=64336,n[798]=64337,n[799]=64342,n[800]=64343,n[801]=64344,n[802]=64345,n[803]=64362,n[804]=64363,n[805]=64364,n[2424]=7821,n[2425]=7822,n[2426]=7823,n[2427]=7824,n[2428]=7825,n[2429]=7826,n[2430]=7827,n[2433]=7682,n[2678]=8045,n[2679]=8046,n[2830]=1552,n[2838]=686,n[2840]=751,n[2842]=753,n[2843]=754,n[2844]=755,n[2846]=757,n[2856]=767,n[2857]=848,n[2858]=849,n[2862]=853,n[2863]=854,n[2864]=855,n[2865]=861,n[2866]=862,n[2906]=7460,n[2908]=7462,n[2909]=7463,n[2910]=7464,n[2912]=7466,n[2913]=7467,n[2914]=7468,n[2916]=7470,n[2917]=7471,n[2918]=7472,n[2920]=7474,n[2921]=7475,n[2922]=7476,n[2924]=7478,n[2925]=7479,n[2926]=7480,n[2928]=7482,n[2929]=7483,n[2930]=7484,n[2932]=7486,n[2933]=7487,n[2934]=7488,n[2936]=7490,n[2937]=7491,n[2938]=7492,n[2940]=7494,n[2941]=7495,n[2942]=7496,n[2944]=7498,n[2946]=7500,n[2948]=7502,n[2950]=7504,n[2951]=7505,n[2952]=7506,n[2954]=7508,n[2955]=7509,n[2956]=7510,n[2958]=7512,n[2959]=7513,n[2960]=7514,n[2962]=7516,n[2963]=7517,n[2964]=7518,n[2966]=7520,n[2967]=7521,n[2968]=7522,n[2970]=7524,n[2971]=7525,n[2972]=7526,n[2974]=7528,n[2975]=7529,n[2976]=7530,n[2978]=1537,n[2979]=1538,n[2980]=1539,n[2982]=1549,n[2983]=1551,n[2984]=1552,n[2986]=1554,n[2987]=1555,n[2988]=1556,n[2990]=1623,n[2991]=1624,n[2995]=1775,n[2999]=1791,n[3002]=64290,n[3003]=64291,n[3004]=64292,n[3006]=64294,n[3007]=64295,n[3008]=64296,n[3011]=1900,n[3014]=8223,n[3015]=8244,n[3017]=7532,n[3018]=7533,n[3019]=7534,n[3075]=7590,n[3076]=7591,n[3079]=7594,n[3080]=7595,n[3083]=7598,n[3084]=7599,n[3087]=7602,n[3088]=7603,n[3091]=7606,n[3092]=7607,n[3095]=7610,n[3096]=7611,n[3099]=7614,n[3100]=7615,n[3103]=7618,n[3104]=7619,n[3107]=8337,n[3108]=8338,n[3116]=1884,n[3119]=1885,n[3120]=1885,n[3123]=1886,n[3124]=1886,n[3127]=1887,n[3128]=1887,n[3131]=1888,n[3132]=1888,n[3135]=1889,n[3136]=1889,n[3139]=1890,n[3140]=1890,n[3143]=1891,n[3144]=1891,n[3147]=1892,n[3148]=1892,n[3153]=580,n[3154]=581,n[3157]=584,n[3158]=585,n[3161]=588,n[3162]=589,n[3165]=891,n[3166]=892,n[3169]=1274,n[3170]=1275,n[3173]=1278,n[3174]=1279,n[3181]=7622,n[3182]=7623,n[3282]=11799,n[3316]=578,n[3379]=42785,n[3393]=1159,n[3416]=8377});D.getGlyphMapForStandardFonts=j;const C=(0,i.getLookupTableFactory)(function(n){n[227]=322,n[264]=261,n[291]=346});D.getSupplementalGlyphMapForArialBlack=C;const O=(0,i.getLookupTableFactory)(function(n){n[1]=32,n[4]=65,n[5]=192,n[6]=193,n[9]=196,n[17]=66,n[18]=67,n[21]=268,n[24]=68,n[28]=69,n[29]=200,n[30]=201,n[32]=282,n[38]=70,n[39]=71,n[44]=72,n[47]=73,n[48]=204,n[49]=205,n[58]=74,n[60]=75,n[62]=76,n[68]=77,n[69]=78,n[75]=79,n[76]=210,n[80]=214,n[87]=80,n[89]=81,n[90]=82,n[92]=344,n[94]=83,n[97]=352,n[100]=84,n[104]=85,n[109]=220,n[115]=86,n[116]=87,n[121]=88,n[122]=89,n[124]=221,n[127]=90,n[129]=381,n[258]=97,n[259]=224,n[260]=225,n[263]=228,n[268]=261,n[271]=98,n[272]=99,n[273]=263,n[275]=269,n[282]=100,n[286]=101,n[287]=232,n[288]=233,n[290]=283,n[295]=281,n[296]=102,n[336]=103,n[346]=104,n[349]=105,n[350]=236,n[351]=237,n[361]=106,n[364]=107,n[367]=108,n[371]=322,n[373]=109,n[374]=110,n[381]=111,n[382]=242,n[383]=243,n[386]=246,n[393]=112,n[395]=113,n[396]=114,n[398]=345,n[400]=115,n[401]=347,n[403]=353,n[410]=116,n[437]=117,n[442]=252,n[448]=118,n[449]=119,n[454]=120,n[455]=121,n[457]=253,n[460]=122,n[462]=382,n[463]=380,n[853]=44,n[855]=58,n[856]=46,n[876]=47,n[878]=45,n[882]=45,n[894]=40,n[895]=41,n[896]=91,n[897]=93,n[923]=64,n[1004]=48,n[1005]=49,n[1006]=50,n[1007]=51,n[1008]=52,n[1009]=53,n[1010]=54,n[1011]=55,n[1012]=56,n[1013]=57,n[1081]=37,n[1085]=43,n[1086]=45});D.getSupplementalGlyphMapForCalibri=O;function d(n){const I=(0,w.normalizeFontName)(n);return P()[I]}function A(n){const I=(0,w.normalizeFontName)(n);return!!(P()[I]||t()[I]||o()[I]||K()[I])}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ToUnicodeMap=D.IdentityToUnicodeMap=void 0;var i=se(2);class w{constructor(t=[]){this._map=t}get length(){return this._map.length}forEach(t){for(const o in this._map)t(o,this._map[o].charCodeAt(0))}has(t){return this._map[t]!==void 0}get(t){return this._map[t]}charCodeOf(t){const o=this._map;if(o.length<=65536)return o.indexOf(t);for(const K in o)if(o[K]===t)return K|0;return-1}amend(t){for(const o in t)this._map[o]=t[o]}}D.ToUnicodeMap=w;class P{constructor(t,o){this.firstChar=t,this.lastChar=o}get length(){return this.lastChar+1-this.firstChar}forEach(t){for(let o=this.firstChar,K=this.lastChar;o<=K;o++)t(o,o)}has(t){return this.firstChar<=t&&t<=this.lastChar}get(t){if(this.firstChar<=t&&t<=this.lastChar)return String.fromCharCode(t)}charCodeOf(t){return Number.isInteger(t)&&t>=this.firstChar&&t<=this.lastChar?t:-1}amend(t){(0,i.unreachable)("Should not call amend()")}}D.IdentityToUnicodeMap=P},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.CFFFont=void 0;var i=se(35),w=se(38),P=se(2);class e{constructor(o,K){this.properties=K;const j=new i.CFFParser(o,K,w.SEAC_ANALYSIS_ENABLED);this.cff=j.parse(),this.cff.duplicateFirstGlyph();const C=new i.CFFCompiler(this.cff);this.seacs=this.cff.seacs;try{this.data=C.compile()}catch(O){(0,P.warn)("Failed to compile font "+K.loadedName),this.data=o}this._createBuiltInEncoding()}get numGlyphs(){return this.cff.charStrings.count}getCharset(){return this.cff.charset.charset}getGlyphMapping(){const o=this.cff,K=this.properties,{cidToGidMap:j,cMap:C}=K,O=o.charset.charset;let d,A;if(K.composite){let I;if((j==null?void 0:j.length)>0){I=Object.create(null);for(let y=0,f=j.length;y<f;y++){const R=j[y];R!==void 0&&(I[R]=y)}}d=Object.create(null);let k;if(o.isCIDFont)for(A=0;A<O.length;A++){const y=O[A];k=C.charCodeOf(y),(I==null?void 0:I[k])!==void 0&&(k=I[k]),d[k]=A}else for(A=0;A<o.charStrings.count;A++)k=C.charCodeOf(A),d[k]=A;return d}let n=o.encoding?o.encoding.encoding:null;return K.isInternalFont&&(n=K.defaultEncoding),d=(0,w.type1FontGlyphMapping)(K,n,O),d}hasGlyphId(o){return this.cff.hasGlyphId(o)}_createBuiltInEncoding(){const{charset:o,encoding:K}=this.cff;if(!o||!K)return;const j=o.charset,C=K.encoding,O=[];for(const d in C){const A=C[d];if(A>=0){const n=j[A];n&&(O[d]=n)}}O.length>0&&(this.properties.builtInEncoding=O)}}D.CFFFont=e},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.FontRendererFactory=void 0;var i=se(2),w=se(35),P=se(39),e=se(37),t=se(8);function o(l,x){return(l[x]<<24|l[x+1]<<16|l[x+2]<<8|l[x+3])>>>0}function K(l,x){return l[x]<<8|l[x+1]}function j(l,x){return(l[x]<<24|l[x+1]<<16)>>16}function C(l,x){return l[x]<<24>>24}function O(l,x){return j(l,x)/16384}function d(l){const x=l.length;let H=32768;return x<1240?H=107:x<33900&&(H=1131),H}function A(l,x,H){const s=K(l,x+2)===1?o(l,x+8):o(l,x+16),h=K(l,x+s);let F,N,U;if(h===4){K(l,x+s+2);const g=K(l,x+s+6)>>1;for(N=x+s+14,F=[],U=0;U<g;U++,N+=2)F[U]={end:K(l,N)};for(N+=2,U=0;U<g;U++,N+=2)F[U].start=K(l,N);for(U=0;U<g;U++,N+=2)F[U].idDelta=K(l,N);for(U=0;U<g;U++,N+=2){let S=K(l,N);if(S!==0){F[U].ids=[];for(let m=0,r=F[U].end-F[U].start+1;m<r;m++)F[U].ids[m]=K(l,N+S),S+=2}}return F}else if(h===12){const g=o(l,x+s+12);for(N=x+s+16,F=[],U=0;U<g;U++)x=o(l,N),F.push({start:x,end:o(l,N+4),idDelta:o(l,N+8)-x}),N+=12;return F}throw new i.FormatError(`unsupported cmap: ${h}`)}function n(l,x,H,s){var U,g,S;const h={},N=new w.CFFParser(new t.Stream(l,x,H-x),h,s).parse();return{glyphs:N.charStrings.objects,subrs:(g=(U=N.topDict.privateDict)==null?void 0:U.subrsIndex)==null?void 0:g.objects,gsubrs:(S=N.globalSubrIndex)==null?void 0:S.objects,isCFFCIDFont:N.isCIDFont,fdSelect:N.fdSelect,fdArray:N.fdArray}}function I(l,x,H){let s,h;H?(s=4,h=o):(s=2,h=(U,g)=>2*K(U,g));const F=[];let N=h(x,0);for(let U=s;U<x.length;U+=s){const g=h(x,U);F.push(l.subarray(N,g)),N=g}return F}function k(l,x){const H=x.codePointAt(0);let s=0,h=0,F=l.length-1;for(;h<F;){const N=h+F+1>>1;H<l[N].start?F=N-1:h=N}return l[h].start<=H&&H<=l[h].end&&(s=l[h].idDelta+(l[h].ids?l[h].ids[H-l[h].start]:H)&65535),{charCode:H,glyphId:s}}function y(l,x,H){function s(r,p){x.push({cmd:"moveTo",args:[r,p]})}function h(r,p){x.push({cmd:"lineTo",args:[r,p]})}function F(r,p,c,u){x.push({cmd:"quadraticCurveTo",args:[r,p,c,u]})}let N=0;const U=j(l,N);let g,S=0,m=0;if(N+=10,U<0)do{g=K(l,N);const r=K(l,N+2);N+=4;let p,c;g&1?(g&2?(p=j(l,N),c=j(l,N+2)):(p=K(l,N),c=K(l,N+2)),N+=4):g&2?(p=C(l,N++),c=C(l,N++)):(p=l[N++],c=l[N++]),g&2?(S=p,m=c):(S=0,m=0);let u=1,q=1,J=0,G=0;g&8?(u=q=O(l,N),N+=2):g&64?(u=O(l,N),q=O(l,N+2),N+=4):g&128&&(u=O(l,N),J=O(l,N+2),G=O(l,N+4),q=O(l,N+6),N+=8);const W=H.glyphs[r];W&&(x.push({cmd:"save"},{cmd:"transform",args:[u,J,G,q,S,m]}),y(W,x,H),x.push({cmd:"restore"}))}while(g&32);else{const r=[];let p,c;for(p=0;p<U;p++)r.push(K(l,N)),N+=2;const u=K(l,N);N+=2+u;const q=r.at(-1)+1,J=[];for(;J.length<q;){g=l[N++];let W=1;for(g&8&&(W+=l[N++]);W-- >0;)J.push({flags:g})}for(p=0;p<q;p++){switch(J[p].flags&18){case 0:S+=j(l,N),N+=2;break;case 2:S-=l[N++];break;case 18:S+=l[N++];break}J[p].x=S}for(p=0;p<q;p++){switch(J[p].flags&36){case 0:m+=j(l,N),N+=2;break;case 4:m-=l[N++];break;case 36:m+=l[N++];break}J[p].y=m}let G=0;for(N=0;N<U;N++){const W=r[N],ce=J.slice(G,W+1);if(ce[0].flags&1)ce.push(ce[0]);else if(ce.at(-1).flags&1)ce.unshift(ce.at(-1));else{const _={flags:1,x:(ce[0].x+ce.at(-1).x)/2,y:(ce[0].y+ce.at(-1).y)/2};ce.unshift(_),ce.push(_)}for(s(ce[0].x,ce[0].y),p=1,c=ce.length;p<c;p++)ce[p].flags&1?h(ce[p].x,ce[p].y):ce[p+1].flags&1?(F(ce[p].x,ce[p].y,ce[p+1].x,ce[p+1].y),p++):F(ce[p].x,ce[p].y,(ce[p].x+ce[p+1].x)/2,(ce[p].y+ce[p+1].y)/2);G=W+1}}}function f(l,x,H,s){function h(p,c){x.push({cmd:"moveTo",args:[p,c]})}function F(p,c){x.push({cmd:"lineTo",args:[p,c]})}function N(p,c,u,q,J,G){x.push({cmd:"bezierCurveTo",args:[p,c,u,q,J,G]})}const U=[];let g=0,S=0,m=0;function r(p){var u;let c=0;for(;c<p.length;){let q=!1,J=p[c++],G,W,ce,_,ie,L,oe,T,Q;switch(J){case 1:m+=U.length>>1,q=!0;break;case 3:m+=U.length>>1,q=!0;break;case 4:S+=U.pop(),h(g,S),q=!0;break;case 5:for(;U.length>0;)g+=U.shift(),S+=U.shift(),F(g,S);break;case 6:for(;U.length>0&&(g+=U.shift(),F(g,S),U.length!==0);)S+=U.shift(),F(g,S);break;case 7:for(;U.length>0&&(S+=U.shift(),F(g,S),U.length!==0);)g+=U.shift(),F(g,S);break;case 8:for(;U.length>0;)G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S);break;case 10:if(T=U.pop(),Q=null,H.isCFFCIDFont){const v=H.fdSelect.getFDIndex(s);if(v>=0&&v<H.fdArray.length){const $=H.fdArray[v];let Z;(u=$.privateDict)!=null&&u.subrsIndex&&(Z=$.privateDict.subrsIndex.objects),Z&&(T+=d(Z),Q=Z[T])}else(0,i.warn)("Invalid fd index for glyph index.")}else Q=H.subrs[T+H.subrsBias];Q&&r(Q);break;case 11:return;case 12:switch(J=p[c++],J){case 34:G=g+U.shift(),W=G+U.shift(),ie=S+U.shift(),g=W+U.shift(),N(G,S,W,ie,g,ie),G=g+U.shift(),W=G+U.shift(),g=W+U.shift(),N(G,ie,W,S,g,S);break;case 35:G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S),G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S),U.pop();break;case 36:G=g+U.shift(),ie=S+U.shift(),W=G+U.shift(),L=ie+U.shift(),g=W+U.shift(),N(G,ie,W,L,g,L),G=g+U.shift(),W=G+U.shift(),oe=L+U.shift(),g=W+U.shift(),N(G,L,W,oe,g,S);break;case 37:const v=g,$=S;G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S),G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W,S=_,Math.abs(g-v)>Math.abs(S-$)?g+=U.shift():S+=U.shift(),N(G,ce,W,_,g,S);break;default:throw new i.FormatError(`unknown operator: 12 ${J}`)}break;case 14:if(U.length>=4){const v=U.pop(),$=U.pop();S=U.pop(),g=U.pop(),x.push({cmd:"save"},{cmd:"translate",args:[g,S]});let Z=k(H.cmap,String.fromCharCode(H.glyphNameMap[e.StandardEncoding[v]]));f(H.glyphs[Z.glyphId],x,H,Z.glyphId),x.push({cmd:"restore"}),Z=k(H.cmap,String.fromCharCode(H.glyphNameMap[e.StandardEncoding[$]])),f(H.glyphs[Z.glyphId],x,H,Z.glyphId)}return;case 18:m+=U.length>>1,q=!0;break;case 19:m+=U.length>>1,c+=m+7>>3,q=!0;break;case 20:m+=U.length>>1,c+=m+7>>3,q=!0;break;case 21:S+=U.pop(),g+=U.pop(),h(g,S),q=!0;break;case 22:g+=U.pop(),h(g,S),q=!0;break;case 23:m+=U.length>>1,q=!0;break;case 24:for(;U.length>2;)G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S);g+=U.shift(),S+=U.shift(),F(g,S);break;case 25:for(;U.length>6;)g+=U.shift(),S+=U.shift(),F(g,S);G=g+U.shift(),ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+U.shift(),N(G,ce,W,_,g,S);break;case 26:for(U.length%2&&(g+=U.shift());U.length>0;)G=g,ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W,S=_+U.shift(),N(G,ce,W,_,g,S);break;case 27:for(U.length%2&&(S+=U.shift());U.length>0;)G=g+U.shift(),ce=S,W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_,N(G,ce,W,_,g,S);break;case 28:U.push((p[c]<<24|p[c+1]<<16)>>16),c+=2;break;case 29:T=U.pop()+H.gsubrsBias,Q=H.gsubrs[T],Q&&r(Q);break;case 30:for(;U.length>0&&(G=g,ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+(U.length===1?U.shift():0),N(G,ce,W,_,g,S),U.length!==0);)G=g+U.shift(),ce=S,W=G+U.shift(),_=ce+U.shift(),S=_+U.shift(),g=W+(U.length===1?U.shift():0),N(G,ce,W,_,g,S);break;case 31:for(;U.length>0&&(G=g+U.shift(),ce=S,W=G+U.shift(),_=ce+U.shift(),S=_+U.shift(),g=W+(U.length===1?U.shift():0),N(G,ce,W,_,g,S),U.length!==0);)G=g,ce=S+U.shift(),W=G+U.shift(),_=ce+U.shift(),g=W+U.shift(),S=_+(U.length===1?U.shift():0),N(G,ce,W,_,g,S);break;default:if(J<32)throw new i.FormatError(`unknown operator: ${J}`);J<247?U.push(J-139):J<251?U.push((J-247)*256+p[c++]+108):J<255?U.push(-(J-251)*256-p[c++]-108):(U.push((p[c]<<24|p[c+1]<<16|p[c+2]<<8|p[c+3])/65536),c+=4);break}q&&(U.length=0)}}r(l)}const R=[];class E{constructor(x){this.constructor===E&&(0,i.unreachable)("Cannot initialize CompiledFont."),this.fontMatrix=x,this.compiledGlyphs=Object.create(null),this.compiledCharCodeToGlyphId=Object.create(null)}getPathJs(x){const{charCode:H,glyphId:s}=k(this.cmap,x);let h=this.compiledGlyphs[s];if(!h)try{h=this.compileGlyph(this.glyphs[s],s),this.compiledGlyphs[s]=h}catch(F){throw this.compiledGlyphs[s]=R,this.compiledCharCodeToGlyphId[H]===void 0&&(this.compiledCharCodeToGlyphId[H]=s),F}return this.compiledCharCodeToGlyphId[H]===void 0&&(this.compiledCharCodeToGlyphId[H]=s),h}compileGlyph(x,H){if(!x||x.length===0||x[0]===14)return R;let s=this.fontMatrix;if(this.isCFFCIDFont){const F=this.fdSelect.getFDIndex(H);F>=0&&F<this.fdArray.length?s=this.fdArray[F].getByName("FontMatrix")||i.FONT_IDENTITY_MATRIX:(0,i.warn)("Invalid fd index for glyph index.")}const h=[{cmd:"save"},{cmd:"transform",args:s.slice()},{cmd:"scale",args:["size","-size"]}];return this.compileGlyphImpl(x,h,H),h.push({cmd:"restore"}),h}compileGlyphImpl(){(0,i.unreachable)("Children classes should implement this.")}hasBuiltPath(x){const{charCode:H,glyphId:s}=k(this.cmap,x);return this.compiledGlyphs[s]!==void 0&&this.compiledCharCodeToGlyphId[H]!==void 0}}class M extends E{constructor(x,H,s){super(s||[488e-6,0,0,488e-6,0,0]),this.glyphs=x,this.cmap=H}compileGlyphImpl(x,H){y(x,H,this)}}class b extends E{constructor(x,H,s,h){super(s||[.001,0,0,.001,0,0]),this.glyphs=x.glyphs,this.gsubrs=x.gsubrs||[],this.subrs=x.subrs||[],this.cmap=H,this.glyphNameMap=h||(0,P.getGlyphsUnicode)(),this.gsubrsBias=d(this.gsubrs),this.subrsBias=d(this.subrs),this.isCFFCIDFont=x.isCFFCIDFont,this.fdSelect=x.fdSelect,this.fdArray=x.fdArray}compileGlyphImpl(x,H,s){f(x,H,this,s)}}class V{static create(x,H){const s=new Uint8Array(x.data);let h,F,N,U,g,S;const m=K(s,4);for(let r=0,p=12;r<m;r++,p+=16){const c=(0,i.bytesToString)(s.subarray(p,p+4)),u=o(s,p+8),q=o(s,p+12);switch(c){case"cmap":h=A(s,u);break;case"glyf":F=s.subarray(u,u+q);break;case"loca":N=s.subarray(u,u+q);break;case"head":S=K(s,u+18),g=K(s,u+50);break;case"CFF ":U=n(s,u,u+q,H);break}}if(F){const r=S?[1/S,0,0,1/S,0,0]:x.fontMatrix;return new M(I(F,N,g),h,r)}return new b(U,h,x.fontMatrix,x.glyphNameMap)}}D.FontRendererFactory=V},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.getMetrics=D.getFontBasicMetrics=void 0;var i=se(3);const w=(0,i.getLookupTableFactory)(function(e){e.Courier=600,e["Courier-Bold"]=600,e["Courier-BoldOblique"]=600,e["Courier-Oblique"]=600,e.Helvetica=(0,i.getLookupTableFactory)(function(t){t.space=278,t.exclam=278,t.quotedbl=355,t.numbersign=556,t.dollar=556,t.percent=889,t.ampersand=667,t.quoteright=222,t.parenleft=333,t.parenright=333,t.asterisk=389,t.plus=584,t.comma=278,t.hyphen=333,t.period=278,t.slash=278,t.zero=556,t.one=556,t.two=556,t.three=556,t.four=556,t.five=556,t.six=556,t.seven=556,t.eight=556,t.nine=556,t.colon=278,t.semicolon=278,t.less=584,t.equal=584,t.greater=584,t.question=556,t.at=1015,t.A=667,t.B=667,t.C=722,t.D=722,t.E=667,t.F=611,t.G=778,t.H=722,t.I=278,t.J=500,t.K=667,t.L=556,t.M=833,t.N=722,t.O=778,t.P=667,t.Q=778,t.R=722,t.S=667,t.T=611,t.U=722,t.V=667,t.W=944,t.X=667,t.Y=667,t.Z=611,t.bracketleft=278,t.backslash=278,t.bracketright=278,t.asciicircum=469,t.underscore=556,t.quoteleft=222,t.a=556,t.b=556,t.c=500,t.d=556,t.e=556,t.f=278,t.g=556,t.h=556,t.i=222,t.j=222,t.k=500,t.l=222,t.m=833,t.n=556,t.o=556,t.p=556,t.q=556,t.r=333,t.s=500,t.t=278,t.u=556,t.v=500,t.w=722,t.x=500,t.y=500,t.z=500,t.braceleft=334,t.bar=260,t.braceright=334,t.asciitilde=584,t.exclamdown=333,t.cent=556,t.sterling=556,t.fraction=167,t.yen=556,t.florin=556,t.section=556,t.currency=556,t.quotesingle=191,t.quotedblleft=333,t.guillemotleft=556,t.guilsinglleft=333,t.guilsinglright=333,t.fi=500,t.fl=500,t.endash=556,t.dagger=556,t.daggerdbl=556,t.periodcentered=278,t.paragraph=537,t.bullet=350,t.quotesinglbase=222,t.quotedblbase=333,t.quotedblright=333,t.guillemotright=556,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=611,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=1e3,t.ordfeminine=370,t.Lslash=556,t.Oslash=778,t.OE=1e3,t.ordmasculine=365,t.ae=889,t.dotlessi=278,t.lslash=222,t.oslash=611,t.oe=944,t.germandbls=611,t.Idieresis=278,t.eacute=556,t.abreve=556,t.uhungarumlaut=556,t.ecaron=556,t.Ydieresis=667,t.divide=584,t.Yacute=667,t.Acircumflex=667,t.aacute=556,t.Ucircumflex=722,t.yacute=500,t.scommaaccent=500,t.ecircumflex=556,t.Uring=722,t.Udieresis=722,t.aogonek=556,t.Uacute=722,t.uogonek=556,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=737,t.Emacron=667,t.ccaron=500,t.aring=556,t.Ncommaaccent=722,t.lacute=222,t.agrave=556,t.Tcommaaccent=611,t.Cacute=722,t.atilde=556,t.Edotaccent=667,t.scaron=500,t.scedilla=500,t.iacute=278,t.lozenge=471,t.Rcaron=722,t.Gcommaaccent=778,t.ucircumflex=556,t.acircumflex=556,t.Amacron=667,t.rcaron=333,t.ccedilla=500,t.Zdotaccent=611,t.Thorn=667,t.Omacron=778,t.Racute=722,t.Sacute=667,t.dcaron=643,t.Umacron=722,t.uring=556,t.threesuperior=333,t.Ograve=778,t.Agrave=667,t.Abreve=667,t.multiply=584,t.uacute=556,t.Tcaron=611,t.partialdiff=476,t.ydieresis=500,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=556,t.edieresis=556,t.cacute=500,t.nacute=556,t.umacron=556,t.Ncaron=722,t.Iacute=278,t.plusminus=584,t.brokenbar=260,t.registered=737,t.Gbreve=778,t.Idotaccent=278,t.summation=600,t.Egrave=667,t.racute=333,t.omacron=556,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=722,t.lcommaaccent=222,t.tcaron=317,t.eogonek=556,t.Uogonek=722,t.Aacute=667,t.Adieresis=667,t.egrave=556,t.zacute=500,t.iogonek=222,t.Oacute=778,t.oacute=556,t.amacron=556,t.sacute=500,t.idieresis=278,t.Ocircumflex=778,t.Ugrave=722,t.Delta=612,t.thorn=556,t.twosuperior=333,t.Odieresis=778,t.mu=556,t.igrave=278,t.ohungarumlaut=556,t.Eogonek=667,t.dcroat=556,t.threequarters=834,t.Scedilla=667,t.lcaron=299,t.Kcommaaccent=667,t.Lacute=556,t.trademark=1e3,t.edotaccent=556,t.Igrave=278,t.Imacron=278,t.Lcaron=556,t.onehalf=834,t.lessequal=549,t.ocircumflex=556,t.ntilde=556,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=556,t.gbreve=556,t.onequarter=834,t.Scaron=667,t.Scommaaccent=667,t.Ohungarumlaut=778,t.degree=400,t.ograve=556,t.Ccaron=722,t.ugrave=556,t.radical=453,t.Dcaron=722,t.rcommaaccent=333,t.Ntilde=722,t.otilde=556,t.Rcommaaccent=722,t.Lcommaaccent=556,t.Atilde=667,t.Aogonek=667,t.Aring=667,t.Otilde=778,t.zdotaccent=500,t.Ecaron=667,t.Iogonek=278,t.kcommaaccent=500,t.minus=584,t.Icircumflex=278,t.ncaron=556,t.tcommaaccent=278,t.logicalnot=584,t.odieresis=556,t.udieresis=556,t.notequal=549,t.gcommaaccent=556,t.eth=556,t.zcaron=500,t.ncommaaccent=556,t.onesuperior=333,t.imacron=278,t.Euro=556}),e["Helvetica-Bold"]=(0,i.getLookupTableFactory)(function(t){t.space=278,t.exclam=333,t.quotedbl=474,t.numbersign=556,t.dollar=556,t.percent=889,t.ampersand=722,t.quoteright=278,t.parenleft=333,t.parenright=333,t.asterisk=389,t.plus=584,t.comma=278,t.hyphen=333,t.period=278,t.slash=278,t.zero=556,t.one=556,t.two=556,t.three=556,t.four=556,t.five=556,t.six=556,t.seven=556,t.eight=556,t.nine=556,t.colon=333,t.semicolon=333,t.less=584,t.equal=584,t.greater=584,t.question=611,t.at=975,t.A=722,t.B=722,t.C=722,t.D=722,t.E=667,t.F=611,t.G=778,t.H=722,t.I=278,t.J=556,t.K=722,t.L=611,t.M=833,t.N=722,t.O=778,t.P=667,t.Q=778,t.R=722,t.S=667,t.T=611,t.U=722,t.V=667,t.W=944,t.X=667,t.Y=667,t.Z=611,t.bracketleft=333,t.backslash=278,t.bracketright=333,t.asciicircum=584,t.underscore=556,t.quoteleft=278,t.a=556,t.b=611,t.c=556,t.d=611,t.e=556,t.f=333,t.g=611,t.h=611,t.i=278,t.j=278,t.k=556,t.l=278,t.m=889,t.n=611,t.o=611,t.p=611,t.q=611,t.r=389,t.s=556,t.t=333,t.u=611,t.v=556,t.w=778,t.x=556,t.y=556,t.z=500,t.braceleft=389,t.bar=280,t.braceright=389,t.asciitilde=584,t.exclamdown=333,t.cent=556,t.sterling=556,t.fraction=167,t.yen=556,t.florin=556,t.section=556,t.currency=556,t.quotesingle=238,t.quotedblleft=500,t.guillemotleft=556,t.guilsinglleft=333,t.guilsinglright=333,t.fi=611,t.fl=611,t.endash=556,t.dagger=556,t.daggerdbl=556,t.periodcentered=278,t.paragraph=556,t.bullet=350,t.quotesinglbase=278,t.quotedblbase=500,t.quotedblright=500,t.guillemotright=556,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=611,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=1e3,t.ordfeminine=370,t.Lslash=611,t.Oslash=778,t.OE=1e3,t.ordmasculine=365,t.ae=889,t.dotlessi=278,t.lslash=278,t.oslash=611,t.oe=944,t.germandbls=611,t.Idieresis=278,t.eacute=556,t.abreve=556,t.uhungarumlaut=611,t.ecaron=556,t.Ydieresis=667,t.divide=584,t.Yacute=667,t.Acircumflex=722,t.aacute=556,t.Ucircumflex=722,t.yacute=556,t.scommaaccent=556,t.ecircumflex=556,t.Uring=722,t.Udieresis=722,t.aogonek=556,t.Uacute=722,t.uogonek=611,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=737,t.Emacron=667,t.ccaron=556,t.aring=556,t.Ncommaaccent=722,t.lacute=278,t.agrave=556,t.Tcommaaccent=611,t.Cacute=722,t.atilde=556,t.Edotaccent=667,t.scaron=556,t.scedilla=556,t.iacute=278,t.lozenge=494,t.Rcaron=722,t.Gcommaaccent=778,t.ucircumflex=611,t.acircumflex=556,t.Amacron=722,t.rcaron=389,t.ccedilla=556,t.Zdotaccent=611,t.Thorn=667,t.Omacron=778,t.Racute=722,t.Sacute=667,t.dcaron=743,t.Umacron=722,t.uring=611,t.threesuperior=333,t.Ograve=778,t.Agrave=722,t.Abreve=722,t.multiply=584,t.uacute=611,t.Tcaron=611,t.partialdiff=494,t.ydieresis=556,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=556,t.edieresis=556,t.cacute=556,t.nacute=611,t.umacron=611,t.Ncaron=722,t.Iacute=278,t.plusminus=584,t.brokenbar=280,t.registered=737,t.Gbreve=778,t.Idotaccent=278,t.summation=600,t.Egrave=667,t.racute=389,t.omacron=611,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=722,t.lcommaaccent=278,t.tcaron=389,t.eogonek=556,t.Uogonek=722,t.Aacute=722,t.Adieresis=722,t.egrave=556,t.zacute=500,t.iogonek=278,t.Oacute=778,t.oacute=611,t.amacron=556,t.sacute=556,t.idieresis=278,t.Ocircumflex=778,t.Ugrave=722,t.Delta=612,t.thorn=611,t.twosuperior=333,t.Odieresis=778,t.mu=611,t.igrave=278,t.ohungarumlaut=611,t.Eogonek=667,t.dcroat=611,t.threequarters=834,t.Scedilla=667,t.lcaron=400,t.Kcommaaccent=722,t.Lacute=611,t.trademark=1e3,t.edotaccent=556,t.Igrave=278,t.Imacron=278,t.Lcaron=611,t.onehalf=834,t.lessequal=549,t.ocircumflex=611,t.ntilde=611,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=556,t.gbreve=611,t.onequarter=834,t.Scaron=667,t.Scommaaccent=667,t.Ohungarumlaut=778,t.degree=400,t.ograve=611,t.Ccaron=722,t.ugrave=611,t.radical=549,t.Dcaron=722,t.rcommaaccent=389,t.Ntilde=722,t.otilde=611,t.Rcommaaccent=722,t.Lcommaaccent=611,t.Atilde=722,t.Aogonek=722,t.Aring=722,t.Otilde=778,t.zdotaccent=500,t.Ecaron=667,t.Iogonek=278,t.kcommaaccent=556,t.minus=584,t.Icircumflex=278,t.ncaron=611,t.tcommaaccent=333,t.logicalnot=584,t.odieresis=611,t.udieresis=611,t.notequal=549,t.gcommaaccent=611,t.eth=611,t.zcaron=500,t.ncommaaccent=611,t.onesuperior=333,t.imacron=278,t.Euro=556}),e["Helvetica-BoldOblique"]=(0,i.getLookupTableFactory)(function(t){t.space=278,t.exclam=333,t.quotedbl=474,t.numbersign=556,t.dollar=556,t.percent=889,t.ampersand=722,t.quoteright=278,t.parenleft=333,t.parenright=333,t.asterisk=389,t.plus=584,t.comma=278,t.hyphen=333,t.period=278,t.slash=278,t.zero=556,t.one=556,t.two=556,t.three=556,t.four=556,t.five=556,t.six=556,t.seven=556,t.eight=556,t.nine=556,t.colon=333,t.semicolon=333,t.less=584,t.equal=584,t.greater=584,t.question=611,t.at=975,t.A=722,t.B=722,t.C=722,t.D=722,t.E=667,t.F=611,t.G=778,t.H=722,t.I=278,t.J=556,t.K=722,t.L=611,t.M=833,t.N=722,t.O=778,t.P=667,t.Q=778,t.R=722,t.S=667,t.T=611,t.U=722,t.V=667,t.W=944,t.X=667,t.Y=667,t.Z=611,t.bracketleft=333,t.backslash=278,t.bracketright=333,t.asciicircum=584,t.underscore=556,t.quoteleft=278,t.a=556,t.b=611,t.c=556,t.d=611,t.e=556,t.f=333,t.g=611,t.h=611,t.i=278,t.j=278,t.k=556,t.l=278,t.m=889,t.n=611,t.o=611,t.p=611,t.q=611,t.r=389,t.s=556,t.t=333,t.u=611,t.v=556,t.w=778,t.x=556,t.y=556,t.z=500,t.braceleft=389,t.bar=280,t.braceright=389,t.asciitilde=584,t.exclamdown=333,t.cent=556,t.sterling=556,t.fraction=167,t.yen=556,t.florin=556,t.section=556,t.currency=556,t.quotesingle=238,t.quotedblleft=500,t.guillemotleft=556,t.guilsinglleft=333,t.guilsinglright=333,t.fi=611,t.fl=611,t.endash=556,t.dagger=556,t.daggerdbl=556,t.periodcentered=278,t.paragraph=556,t.bullet=350,t.quotesinglbase=278,t.quotedblbase=500,t.quotedblright=500,t.guillemotright=556,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=611,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=1e3,t.ordfeminine=370,t.Lslash=611,t.Oslash=778,t.OE=1e3,t.ordmasculine=365,t.ae=889,t.dotlessi=278,t.lslash=278,t.oslash=611,t.oe=944,t.germandbls=611,t.Idieresis=278,t.eacute=556,t.abreve=556,t.uhungarumlaut=611,t.ecaron=556,t.Ydieresis=667,t.divide=584,t.Yacute=667,t.Acircumflex=722,t.aacute=556,t.Ucircumflex=722,t.yacute=556,t.scommaaccent=556,t.ecircumflex=556,t.Uring=722,t.Udieresis=722,t.aogonek=556,t.Uacute=722,t.uogonek=611,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=737,t.Emacron=667,t.ccaron=556,t.aring=556,t.Ncommaaccent=722,t.lacute=278,t.agrave=556,t.Tcommaaccent=611,t.Cacute=722,t.atilde=556,t.Edotaccent=667,t.scaron=556,t.scedilla=556,t.iacute=278,t.lozenge=494,t.Rcaron=722,t.Gcommaaccent=778,t.ucircumflex=611,t.acircumflex=556,t.Amacron=722,t.rcaron=389,t.ccedilla=556,t.Zdotaccent=611,t.Thorn=667,t.Omacron=778,t.Racute=722,t.Sacute=667,t.dcaron=743,t.Umacron=722,t.uring=611,t.threesuperior=333,t.Ograve=778,t.Agrave=722,t.Abreve=722,t.multiply=584,t.uacute=611,t.Tcaron=611,t.partialdiff=494,t.ydieresis=556,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=556,t.edieresis=556,t.cacute=556,t.nacute=611,t.umacron=611,t.Ncaron=722,t.Iacute=278,t.plusminus=584,t.brokenbar=280,t.registered=737,t.Gbreve=778,t.Idotaccent=278,t.summation=600,t.Egrave=667,t.racute=389,t.omacron=611,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=722,t.lcommaaccent=278,t.tcaron=389,t.eogonek=556,t.Uogonek=722,t.Aacute=722,t.Adieresis=722,t.egrave=556,t.zacute=500,t.iogonek=278,t.Oacute=778,t.oacute=611,t.amacron=556,t.sacute=556,t.idieresis=278,t.Ocircumflex=778,t.Ugrave=722,t.Delta=612,t.thorn=611,t.twosuperior=333,t.Odieresis=778,t.mu=611,t.igrave=278,t.ohungarumlaut=611,t.Eogonek=667,t.dcroat=611,t.threequarters=834,t.Scedilla=667,t.lcaron=400,t.Kcommaaccent=722,t.Lacute=611,t.trademark=1e3,t.edotaccent=556,t.Igrave=278,t.Imacron=278,t.Lcaron=611,t.onehalf=834,t.lessequal=549,t.ocircumflex=611,t.ntilde=611,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=556,t.gbreve=611,t.onequarter=834,t.Scaron=667,t.Scommaaccent=667,t.Ohungarumlaut=778,t.degree=400,t.ograve=611,t.Ccaron=722,t.ugrave=611,t.radical=549,t.Dcaron=722,t.rcommaaccent=389,t.Ntilde=722,t.otilde=611,t.Rcommaaccent=722,t.Lcommaaccent=611,t.Atilde=722,t.Aogonek=722,t.Aring=722,t.Otilde=778,t.zdotaccent=500,t.Ecaron=667,t.Iogonek=278,t.kcommaaccent=556,t.minus=584,t.Icircumflex=278,t.ncaron=611,t.tcommaaccent=333,t.logicalnot=584,t.odieresis=611,t.udieresis=611,t.notequal=549,t.gcommaaccent=611,t.eth=611,t.zcaron=500,t.ncommaaccent=611,t.onesuperior=333,t.imacron=278,t.Euro=556}),e["Helvetica-Oblique"]=(0,i.getLookupTableFactory)(function(t){t.space=278,t.exclam=278,t.quotedbl=355,t.numbersign=556,t.dollar=556,t.percent=889,t.ampersand=667,t.quoteright=222,t.parenleft=333,t.parenright=333,t.asterisk=389,t.plus=584,t.comma=278,t.hyphen=333,t.period=278,t.slash=278,t.zero=556,t.one=556,t.two=556,t.three=556,t.four=556,t.five=556,t.six=556,t.seven=556,t.eight=556,t.nine=556,t.colon=278,t.semicolon=278,t.less=584,t.equal=584,t.greater=584,t.question=556,t.at=1015,t.A=667,t.B=667,t.C=722,t.D=722,t.E=667,t.F=611,t.G=778,t.H=722,t.I=278,t.J=500,t.K=667,t.L=556,t.M=833,t.N=722,t.O=778,t.P=667,t.Q=778,t.R=722,t.S=667,t.T=611,t.U=722,t.V=667,t.W=944,t.X=667,t.Y=667,t.Z=611,t.bracketleft=278,t.backslash=278,t.bracketright=278,t.asciicircum=469,t.underscore=556,t.quoteleft=222,t.a=556,t.b=556,t.c=500,t.d=556,t.e=556,t.f=278,t.g=556,t.h=556,t.i=222,t.j=222,t.k=500,t.l=222,t.m=833,t.n=556,t.o=556,t.p=556,t.q=556,t.r=333,t.s=500,t.t=278,t.u=556,t.v=500,t.w=722,t.x=500,t.y=500,t.z=500,t.braceleft=334,t.bar=260,t.braceright=334,t.asciitilde=584,t.exclamdown=333,t.cent=556,t.sterling=556,t.fraction=167,t.yen=556,t.florin=556,t.section=556,t.currency=556,t.quotesingle=191,t.quotedblleft=333,t.guillemotleft=556,t.guilsinglleft=333,t.guilsinglright=333,t.fi=500,t.fl=500,t.endash=556,t.dagger=556,t.daggerdbl=556,t.periodcentered=278,t.paragraph=537,t.bullet=350,t.quotesinglbase=222,t.quotedblbase=333,t.quotedblright=333,t.guillemotright=556,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=611,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=1e3,t.ordfeminine=370,t.Lslash=556,t.Oslash=778,t.OE=1e3,t.ordmasculine=365,t.ae=889,t.dotlessi=278,t.lslash=222,t.oslash=611,t.oe=944,t.germandbls=611,t.Idieresis=278,t.eacute=556,t.abreve=556,t.uhungarumlaut=556,t.ecaron=556,t.Ydieresis=667,t.divide=584,t.Yacute=667,t.Acircumflex=667,t.aacute=556,t.Ucircumflex=722,t.yacute=500,t.scommaaccent=500,t.ecircumflex=556,t.Uring=722,t.Udieresis=722,t.aogonek=556,t.Uacute=722,t.uogonek=556,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=737,t.Emacron=667,t.ccaron=500,t.aring=556,t.Ncommaaccent=722,t.lacute=222,t.agrave=556,t.Tcommaaccent=611,t.Cacute=722,t.atilde=556,t.Edotaccent=667,t.scaron=500,t.scedilla=500,t.iacute=278,t.lozenge=471,t.Rcaron=722,t.Gcommaaccent=778,t.ucircumflex=556,t.acircumflex=556,t.Amacron=667,t.rcaron=333,t.ccedilla=500,t.Zdotaccent=611,t.Thorn=667,t.Omacron=778,t.Racute=722,t.Sacute=667,t.dcaron=643,t.Umacron=722,t.uring=556,t.threesuperior=333,t.Ograve=778,t.Agrave=667,t.Abreve=667,t.multiply=584,t.uacute=556,t.Tcaron=611,t.partialdiff=476,t.ydieresis=500,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=556,t.edieresis=556,t.cacute=500,t.nacute=556,t.umacron=556,t.Ncaron=722,t.Iacute=278,t.plusminus=584,t.brokenbar=260,t.registered=737,t.Gbreve=778,t.Idotaccent=278,t.summation=600,t.Egrave=667,t.racute=333,t.omacron=556,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=722,t.lcommaaccent=222,t.tcaron=317,t.eogonek=556,t.Uogonek=722,t.Aacute=667,t.Adieresis=667,t.egrave=556,t.zacute=500,t.iogonek=222,t.Oacute=778,t.oacute=556,t.amacron=556,t.sacute=500,t.idieresis=278,t.Ocircumflex=778,t.Ugrave=722,t.Delta=612,t.thorn=556,t.twosuperior=333,t.Odieresis=778,t.mu=556,t.igrave=278,t.ohungarumlaut=556,t.Eogonek=667,t.dcroat=556,t.threequarters=834,t.Scedilla=667,t.lcaron=299,t.Kcommaaccent=667,t.Lacute=556,t.trademark=1e3,t.edotaccent=556,t.Igrave=278,t.Imacron=278,t.Lcaron=556,t.onehalf=834,t.lessequal=549,t.ocircumflex=556,t.ntilde=556,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=556,t.gbreve=556,t.onequarter=834,t.Scaron=667,t.Scommaaccent=667,t.Ohungarumlaut=778,t.degree=400,t.ograve=556,t.Ccaron=722,t.ugrave=556,t.radical=453,t.Dcaron=722,t.rcommaaccent=333,t.Ntilde=722,t.otilde=556,t.Rcommaaccent=722,t.Lcommaaccent=556,t.Atilde=667,t.Aogonek=667,t.Aring=667,t.Otilde=778,t.zdotaccent=500,t.Ecaron=667,t.Iogonek=278,t.kcommaaccent=500,t.minus=584,t.Icircumflex=278,t.ncaron=556,t.tcommaaccent=278,t.logicalnot=584,t.odieresis=556,t.udieresis=556,t.notequal=549,t.gcommaaccent=556,t.eth=556,t.zcaron=500,t.ncommaaccent=556,t.onesuperior=333,t.imacron=278,t.Euro=556}),e.Symbol=(0,i.getLookupTableFactory)(function(t){t.space=250,t.exclam=333,t.universal=713,t.numbersign=500,t.existential=549,t.percent=833,t.ampersand=778,t.suchthat=439,t.parenleft=333,t.parenright=333,t.asteriskmath=500,t.plus=549,t.comma=250,t.minus=549,t.period=250,t.slash=278,t.zero=500,t.one=500,t.two=500,t.three=500,t.four=500,t.five=500,t.six=500,t.seven=500,t.eight=500,t.nine=500,t.colon=278,t.semicolon=278,t.less=549,t.equal=549,t.greater=549,t.question=444,t.congruent=549,t.Alpha=722,t.Beta=667,t.Chi=722,t.Delta=612,t.Epsilon=611,t.Phi=763,t.Gamma=603,t.Eta=722,t.Iota=333,t.theta1=631,t.Kappa=722,t.Lambda=686,t.Mu=889,t.Nu=722,t.Omicron=722,t.Pi=768,t.Theta=741,t.Rho=556,t.Sigma=592,t.Tau=611,t.Upsilon=690,t.sigma1=439,t.Omega=768,t.Xi=645,t.Psi=795,t.Zeta=611,t.bracketleft=333,t.therefore=863,t.bracketright=333,t.perpendicular=658,t.underscore=500,t.radicalex=500,t.alpha=631,t.beta=549,t.chi=549,t.delta=494,t.epsilon=439,t.phi=521,t.gamma=411,t.eta=603,t.iota=329,t.phi1=603,t.kappa=549,t.lambda=549,t.mu=576,t.nu=521,t.omicron=549,t.pi=549,t.theta=521,t.rho=549,t.sigma=603,t.tau=439,t.upsilon=576,t.omega1=713,t.omega=686,t.xi=493,t.psi=686,t.zeta=494,t.braceleft=480,t.bar=200,t.braceright=480,t.similar=549,t.Euro=750,t.Upsilon1=620,t.minute=247,t.lessequal=549,t.fraction=167,t.infinity=713,t.florin=500,t.club=753,t.diamond=753,t.heart=753,t.spade=753,t.arrowboth=1042,t.arrowleft=987,t.arrowup=603,t.arrowright=987,t.arrowdown=603,t.degree=400,t.plusminus=549,t.second=411,t.greaterequal=549,t.multiply=549,t.proportional=713,t.partialdiff=494,t.bullet=460,t.divide=549,t.notequal=549,t.equivalence=549,t.approxequal=549,t.ellipsis=1e3,t.arrowvertex=603,t.arrowhorizex=1e3,t.carriagereturn=658,t.aleph=823,t.Ifraktur=686,t.Rfraktur=795,t.weierstrass=987,t.circlemultiply=768,t.circleplus=768,t.emptyset=823,t.intersection=768,t.union=768,t.propersuperset=713,t.reflexsuperset=713,t.notsubset=713,t.propersubset=713,t.reflexsubset=713,t.element=713,t.notelement=713,t.angle=768,t.gradient=713,t.registerserif=790,t.copyrightserif=790,t.trademarkserif=890,t.product=823,t.radical=549,t.dotmath=250,t.logicalnot=713,t.logicaland=603,t.logicalor=603,t.arrowdblboth=1042,t.arrowdblleft=987,t.arrowdblup=603,t.arrowdblright=987,t.arrowdbldown=603,t.lozenge=494,t.angleleft=329,t.registersans=790,t.copyrightsans=790,t.trademarksans=786,t.summation=713,t.parenlefttp=384,t.parenleftex=384,t.parenleftbt=384,t.bracketlefttp=384,t.bracketleftex=384,t.bracketleftbt=384,t.bracelefttp=494,t.braceleftmid=494,t.braceleftbt=494,t.braceex=494,t.angleright=329,t.integral=274,t.integraltp=686,t.integralex=686,t.integralbt=686,t.parenrighttp=384,t.parenrightex=384,t.parenrightbt=384,t.bracketrighttp=384,t.bracketrightex=384,t.bracketrightbt=384,t.bracerighttp=494,t.bracerightmid=494,t.bracerightbt=494,t.apple=790}),e["Times-Roman"]=(0,i.getLookupTableFactory)(function(t){t.space=250,t.exclam=333,t.quotedbl=408,t.numbersign=500,t.dollar=500,t.percent=833,t.ampersand=778,t.quoteright=333,t.parenleft=333,t.parenright=333,t.asterisk=500,t.plus=564,t.comma=250,t.hyphen=333,t.period=250,t.slash=278,t.zero=500,t.one=500,t.two=500,t.three=500,t.four=500,t.five=500,t.six=500,t.seven=500,t.eight=500,t.nine=500,t.colon=278,t.semicolon=278,t.less=564,t.equal=564,t.greater=564,t.question=444,t.at=921,t.A=722,t.B=667,t.C=667,t.D=722,t.E=611,t.F=556,t.G=722,t.H=722,t.I=333,t.J=389,t.K=722,t.L=611,t.M=889,t.N=722,t.O=722,t.P=556,t.Q=722,t.R=667,t.S=556,t.T=611,t.U=722,t.V=722,t.W=944,t.X=722,t.Y=722,t.Z=611,t.bracketleft=333,t.backslash=278,t.bracketright=333,t.asciicircum=469,t.underscore=500,t.quoteleft=333,t.a=444,t.b=500,t.c=444,t.d=500,t.e=444,t.f=333,t.g=500,t.h=500,t.i=278,t.j=278,t.k=500,t.l=278,t.m=778,t.n=500,t.o=500,t.p=500,t.q=500,t.r=333,t.s=389,t.t=278,t.u=500,t.v=500,t.w=722,t.x=500,t.y=500,t.z=444,t.braceleft=480,t.bar=200,t.braceright=480,t.asciitilde=541,t.exclamdown=333,t.cent=500,t.sterling=500,t.fraction=167,t.yen=500,t.florin=500,t.section=500,t.currency=500,t.quotesingle=180,t.quotedblleft=444,t.guillemotleft=500,t.guilsinglleft=333,t.guilsinglright=333,t.fi=556,t.fl=556,t.endash=500,t.dagger=500,t.daggerdbl=500,t.periodcentered=250,t.paragraph=453,t.bullet=350,t.quotesinglbase=333,t.quotedblbase=444,t.quotedblright=444,t.guillemotright=500,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=444,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=889,t.ordfeminine=276,t.Lslash=611,t.Oslash=722,t.OE=889,t.ordmasculine=310,t.ae=667,t.dotlessi=278,t.lslash=278,t.oslash=500,t.oe=722,t.germandbls=500,t.Idieresis=333,t.eacute=444,t.abreve=444,t.uhungarumlaut=500,t.ecaron=444,t.Ydieresis=722,t.divide=564,t.Yacute=722,t.Acircumflex=722,t.aacute=444,t.Ucircumflex=722,t.yacute=500,t.scommaaccent=389,t.ecircumflex=444,t.Uring=722,t.Udieresis=722,t.aogonek=444,t.Uacute=722,t.uogonek=500,t.Edieresis=611,t.Dcroat=722,t.commaaccent=250,t.copyright=760,t.Emacron=611,t.ccaron=444,t.aring=444,t.Ncommaaccent=722,t.lacute=278,t.agrave=444,t.Tcommaaccent=611,t.Cacute=667,t.atilde=444,t.Edotaccent=611,t.scaron=389,t.scedilla=389,t.iacute=278,t.lozenge=471,t.Rcaron=667,t.Gcommaaccent=722,t.ucircumflex=500,t.acircumflex=444,t.Amacron=722,t.rcaron=333,t.ccedilla=444,t.Zdotaccent=611,t.Thorn=556,t.Omacron=722,t.Racute=667,t.Sacute=556,t.dcaron=588,t.Umacron=722,t.uring=500,t.threesuperior=300,t.Ograve=722,t.Agrave=722,t.Abreve=722,t.multiply=564,t.uacute=500,t.Tcaron=611,t.partialdiff=476,t.ydieresis=500,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=611,t.adieresis=444,t.edieresis=444,t.cacute=444,t.nacute=500,t.umacron=500,t.Ncaron=722,t.Iacute=333,t.plusminus=564,t.brokenbar=200,t.registered=760,t.Gbreve=722,t.Idotaccent=333,t.summation=600,t.Egrave=611,t.racute=333,t.omacron=500,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=667,t.lcommaaccent=278,t.tcaron=326,t.eogonek=444,t.Uogonek=722,t.Aacute=722,t.Adieresis=722,t.egrave=444,t.zacute=444,t.iogonek=278,t.Oacute=722,t.oacute=500,t.amacron=444,t.sacute=389,t.idieresis=278,t.Ocircumflex=722,t.Ugrave=722,t.Delta=612,t.thorn=500,t.twosuperior=300,t.Odieresis=722,t.mu=500,t.igrave=278,t.ohungarumlaut=500,t.Eogonek=611,t.dcroat=500,t.threequarters=750,t.Scedilla=556,t.lcaron=344,t.Kcommaaccent=722,t.Lacute=611,t.trademark=980,t.edotaccent=444,t.Igrave=333,t.Imacron=333,t.Lcaron=611,t.onehalf=750,t.lessequal=549,t.ocircumflex=500,t.ntilde=500,t.Uhungarumlaut=722,t.Eacute=611,t.emacron=444,t.gbreve=500,t.onequarter=750,t.Scaron=556,t.Scommaaccent=556,t.Ohungarumlaut=722,t.degree=400,t.ograve=500,t.Ccaron=667,t.ugrave=500,t.radical=453,t.Dcaron=722,t.rcommaaccent=333,t.Ntilde=722,t.otilde=500,t.Rcommaaccent=667,t.Lcommaaccent=611,t.Atilde=722,t.Aogonek=722,t.Aring=722,t.Otilde=722,t.zdotaccent=444,t.Ecaron=611,t.Iogonek=333,t.kcommaaccent=500,t.minus=564,t.Icircumflex=333,t.ncaron=500,t.tcommaaccent=278,t.logicalnot=564,t.odieresis=500,t.udieresis=500,t.notequal=549,t.gcommaaccent=500,t.eth=500,t.zcaron=444,t.ncommaaccent=500,t.onesuperior=300,t.imacron=278,t.Euro=500}),e["Times-Bold"]=(0,i.getLookupTableFactory)(function(t){t.space=250,t.exclam=333,t.quotedbl=555,t.numbersign=500,t.dollar=500,t.percent=1e3,t.ampersand=833,t.quoteright=333,t.parenleft=333,t.parenright=333,t.asterisk=500,t.plus=570,t.comma=250,t.hyphen=333,t.period=250,t.slash=278,t.zero=500,t.one=500,t.two=500,t.three=500,t.four=500,t.five=500,t.six=500,t.seven=500,t.eight=500,t.nine=500,t.colon=333,t.semicolon=333,t.less=570,t.equal=570,t.greater=570,t.question=500,t.at=930,t.A=722,t.B=667,t.C=722,t.D=722,t.E=667,t.F=611,t.G=778,t.H=778,t.I=389,t.J=500,t.K=778,t.L=667,t.M=944,t.N=722,t.O=778,t.P=611,t.Q=778,t.R=722,t.S=556,t.T=667,t.U=722,t.V=722,t.W=1e3,t.X=722,t.Y=722,t.Z=667,t.bracketleft=333,t.backslash=278,t.bracketright=333,t.asciicircum=581,t.underscore=500,t.quoteleft=333,t.a=500,t.b=556,t.c=444,t.d=556,t.e=444,t.f=333,t.g=500,t.h=556,t.i=278,t.j=333,t.k=556,t.l=278,t.m=833,t.n=556,t.o=500,t.p=556,t.q=556,t.r=444,t.s=389,t.t=333,t.u=556,t.v=500,t.w=722,t.x=500,t.y=500,t.z=444,t.braceleft=394,t.bar=220,t.braceright=394,t.asciitilde=520,t.exclamdown=333,t.cent=500,t.sterling=500,t.fraction=167,t.yen=500,t.florin=500,t.section=500,t.currency=500,t.quotesingle=278,t.quotedblleft=500,t.guillemotleft=500,t.guilsinglleft=333,t.guilsinglright=333,t.fi=556,t.fl=556,t.endash=500,t.dagger=500,t.daggerdbl=500,t.periodcentered=250,t.paragraph=540,t.bullet=350,t.quotesinglbase=333,t.quotedblbase=500,t.quotedblright=500,t.guillemotright=500,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=500,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=1e3,t.ordfeminine=300,t.Lslash=667,t.Oslash=778,t.OE=1e3,t.ordmasculine=330,t.ae=722,t.dotlessi=278,t.lslash=278,t.oslash=500,t.oe=722,t.germandbls=556,t.Idieresis=389,t.eacute=444,t.abreve=500,t.uhungarumlaut=556,t.ecaron=444,t.Ydieresis=722,t.divide=570,t.Yacute=722,t.Acircumflex=722,t.aacute=500,t.Ucircumflex=722,t.yacute=500,t.scommaaccent=389,t.ecircumflex=444,t.Uring=722,t.Udieresis=722,t.aogonek=500,t.Uacute=722,t.uogonek=556,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=747,t.Emacron=667,t.ccaron=444,t.aring=500,t.Ncommaaccent=722,t.lacute=278,t.agrave=500,t.Tcommaaccent=667,t.Cacute=722,t.atilde=500,t.Edotaccent=667,t.scaron=389,t.scedilla=389,t.iacute=278,t.lozenge=494,t.Rcaron=722,t.Gcommaaccent=778,t.ucircumflex=556,t.acircumflex=500,t.Amacron=722,t.rcaron=444,t.ccedilla=444,t.Zdotaccent=667,t.Thorn=611,t.Omacron=778,t.Racute=722,t.Sacute=556,t.dcaron=672,t.Umacron=722,t.uring=556,t.threesuperior=300,t.Ograve=778,t.Agrave=722,t.Abreve=722,t.multiply=570,t.uacute=556,t.Tcaron=667,t.partialdiff=494,t.ydieresis=500,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=500,t.edieresis=444,t.cacute=444,t.nacute=556,t.umacron=556,t.Ncaron=722,t.Iacute=389,t.plusminus=570,t.brokenbar=220,t.registered=747,t.Gbreve=778,t.Idotaccent=389,t.summation=600,t.Egrave=667,t.racute=444,t.omacron=500,t.Zacute=667,t.Zcaron=667,t.greaterequal=549,t.Eth=722,t.Ccedilla=722,t.lcommaaccent=278,t.tcaron=416,t.eogonek=444,t.Uogonek=722,t.Aacute=722,t.Adieresis=722,t.egrave=444,t.zacute=444,t.iogonek=278,t.Oacute=778,t.oacute=500,t.amacron=500,t.sacute=389,t.idieresis=278,t.Ocircumflex=778,t.Ugrave=722,t.Delta=612,t.thorn=556,t.twosuperior=300,t.Odieresis=778,t.mu=556,t.igrave=278,t.ohungarumlaut=500,t.Eogonek=667,t.dcroat=556,t.threequarters=750,t.Scedilla=556,t.lcaron=394,t.Kcommaaccent=778,t.Lacute=667,t.trademark=1e3,t.edotaccent=444,t.Igrave=389,t.Imacron=389,t.Lcaron=667,t.onehalf=750,t.lessequal=549,t.ocircumflex=500,t.ntilde=556,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=444,t.gbreve=500,t.onequarter=750,t.Scaron=556,t.Scommaaccent=556,t.Ohungarumlaut=778,t.degree=400,t.ograve=500,t.Ccaron=722,t.ugrave=556,t.radical=549,t.Dcaron=722,t.rcommaaccent=444,t.Ntilde=722,t.otilde=500,t.Rcommaaccent=722,t.Lcommaaccent=667,t.Atilde=722,t.Aogonek=722,t.Aring=722,t.Otilde=778,t.zdotaccent=444,t.Ecaron=667,t.Iogonek=389,t.kcommaaccent=556,t.minus=570,t.Icircumflex=389,t.ncaron=556,t.tcommaaccent=333,t.logicalnot=570,t.odieresis=500,t.udieresis=556,t.notequal=549,t.gcommaaccent=500,t.eth=500,t.zcaron=444,t.ncommaaccent=556,t.onesuperior=300,t.imacron=278,t.Euro=500}),e["Times-BoldItalic"]=(0,i.getLookupTableFactory)(function(t){t.space=250,t.exclam=389,t.quotedbl=555,t.numbersign=500,t.dollar=500,t.percent=833,t.ampersand=778,t.quoteright=333,t.parenleft=333,t.parenright=333,t.asterisk=500,t.plus=570,t.comma=250,t.hyphen=333,t.period=250,t.slash=278,t.zero=500,t.one=500,t.two=500,t.three=500,t.four=500,t.five=500,t.six=500,t.seven=500,t.eight=500,t.nine=500,t.colon=333,t.semicolon=333,t.less=570,t.equal=570,t.greater=570,t.question=500,t.at=832,t.A=667,t.B=667,t.C=667,t.D=722,t.E=667,t.F=667,t.G=722,t.H=778,t.I=389,t.J=500,t.K=667,t.L=611,t.M=889,t.N=722,t.O=722,t.P=611,t.Q=722,t.R=667,t.S=556,t.T=611,t.U=722,t.V=667,t.W=889,t.X=667,t.Y=611,t.Z=611,t.bracketleft=333,t.backslash=278,t.bracketright=333,t.asciicircum=570,t.underscore=500,t.quoteleft=333,t.a=500,t.b=500,t.c=444,t.d=500,t.e=444,t.f=333,t.g=500,t.h=556,t.i=278,t.j=278,t.k=500,t.l=278,t.m=778,t.n=556,t.o=500,t.p=500,t.q=500,t.r=389,t.s=389,t.t=278,t.u=556,t.v=444,t.w=667,t.x=500,t.y=444,t.z=389,t.braceleft=348,t.bar=220,t.braceright=348,t.asciitilde=570,t.exclamdown=389,t.cent=500,t.sterling=500,t.fraction=167,t.yen=500,t.florin=500,t.section=500,t.currency=500,t.quotesingle=278,t.quotedblleft=500,t.guillemotleft=500,t.guilsinglleft=333,t.guilsinglright=333,t.fi=556,t.fl=556,t.endash=500,t.dagger=500,t.daggerdbl=500,t.periodcentered=250,t.paragraph=500,t.bullet=350,t.quotesinglbase=333,t.quotedblbase=500,t.quotedblright=500,t.guillemotright=500,t.ellipsis=1e3,t.perthousand=1e3,t.questiondown=500,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=1e3,t.AE=944,t.ordfeminine=266,t.Lslash=611,t.Oslash=722,t.OE=944,t.ordmasculine=300,t.ae=722,t.dotlessi=278,t.lslash=278,t.oslash=500,t.oe=722,t.germandbls=500,t.Idieresis=389,t.eacute=444,t.abreve=500,t.uhungarumlaut=556,t.ecaron=444,t.Ydieresis=611,t.divide=570,t.Yacute=611,t.Acircumflex=667,t.aacute=500,t.Ucircumflex=722,t.yacute=444,t.scommaaccent=389,t.ecircumflex=444,t.Uring=722,t.Udieresis=722,t.aogonek=500,t.Uacute=722,t.uogonek=556,t.Edieresis=667,t.Dcroat=722,t.commaaccent=250,t.copyright=747,t.Emacron=667,t.ccaron=444,t.aring=500,t.Ncommaaccent=722,t.lacute=278,t.agrave=500,t.Tcommaaccent=611,t.Cacute=667,t.atilde=500,t.Edotaccent=667,t.scaron=389,t.scedilla=389,t.iacute=278,t.lozenge=494,t.Rcaron=667,t.Gcommaaccent=722,t.ucircumflex=556,t.acircumflex=500,t.Amacron=667,t.rcaron=389,t.ccedilla=444,t.Zdotaccent=611,t.Thorn=611,t.Omacron=722,t.Racute=667,t.Sacute=556,t.dcaron=608,t.Umacron=722,t.uring=556,t.threesuperior=300,t.Ograve=722,t.Agrave=667,t.Abreve=667,t.multiply=570,t.uacute=556,t.Tcaron=611,t.partialdiff=494,t.ydieresis=444,t.Nacute=722,t.icircumflex=278,t.Ecircumflex=667,t.adieresis=500,t.edieresis=444,t.cacute=444,t.nacute=556,t.umacron=556,t.Ncaron=722,t.Iacute=389,t.plusminus=570,t.brokenbar=220,t.registered=747,t.Gbreve=722,t.Idotaccent=389,t.summation=600,t.Egrave=667,t.racute=389,t.omacron=500,t.Zacute=611,t.Zcaron=611,t.greaterequal=549,t.Eth=722,t.Ccedilla=667,t.lcommaaccent=278,t.tcaron=366,t.eogonek=444,t.Uogonek=722,t.Aacute=667,t.Adieresis=667,t.egrave=444,t.zacute=389,t.iogonek=278,t.Oacute=722,t.oacute=500,t.amacron=500,t.sacute=389,t.idieresis=278,t.Ocircumflex=722,t.Ugrave=722,t.Delta=612,t.thorn=500,t.twosuperior=300,t.Odieresis=722,t.mu=576,t.igrave=278,t.ohungarumlaut=500,t.Eogonek=667,t.dcroat=500,t.threequarters=750,t.Scedilla=556,t.lcaron=382,t.Kcommaaccent=667,t.Lacute=611,t.trademark=1e3,t.edotaccent=444,t.Igrave=389,t.Imacron=389,t.Lcaron=611,t.onehalf=750,t.lessequal=549,t.ocircumflex=500,t.ntilde=556,t.Uhungarumlaut=722,t.Eacute=667,t.emacron=444,t.gbreve=500,t.onequarter=750,t.Scaron=556,t.Scommaaccent=556,t.Ohungarumlaut=722,t.degree=400,t.ograve=500,t.Ccaron=667,t.ugrave=556,t.radical=549,t.Dcaron=722,t.rcommaaccent=389,t.Ntilde=722,t.otilde=500,t.Rcommaaccent=667,t.Lcommaaccent=611,t.Atilde=667,t.Aogonek=667,t.Aring=667,t.Otilde=722,t.zdotaccent=389,t.Ecaron=667,t.Iogonek=389,t.kcommaaccent=500,t.minus=606,t.Icircumflex=389,t.ncaron=556,t.tcommaaccent=278,t.logicalnot=606,t.odieresis=500,t.udieresis=556,t.notequal=549,t.gcommaaccent=500,t.eth=500,t.zcaron=389,t.ncommaaccent=556,t.onesuperior=300,t.imacron=278,t.Euro=500}),e["Times-Italic"]=(0,i.getLookupTableFactory)(function(t){t.space=250,t.exclam=333,t.quotedbl=420,t.numbersign=500,t.dollar=500,t.percent=833,t.ampersand=778,t.quoteright=333,t.parenleft=333,t.parenright=333,t.asterisk=500,t.plus=675,t.comma=250,t.hyphen=333,t.period=250,t.slash=278,t.zero=500,t.one=500,t.two=500,t.three=500,t.four=500,t.five=500,t.six=500,t.seven=500,t.eight=500,t.nine=500,t.colon=333,t.semicolon=333,t.less=675,t.equal=675,t.greater=675,t.question=500,t.at=920,t.A=611,t.B=611,t.C=667,t.D=722,t.E=611,t.F=611,t.G=722,t.H=722,t.I=333,t.J=444,t.K=667,t.L=556,t.M=833,t.N=667,t.O=722,t.P=611,t.Q=722,t.R=611,t.S=500,t.T=556,t.U=722,t.V=611,t.W=833,t.X=611,t.Y=556,t.Z=556,t.bracketleft=389,t.backslash=278,t.bracketright=389,t.asciicircum=422,t.underscore=500,t.quoteleft=333,t.a=500,t.b=500,t.c=444,t.d=500,t.e=444,t.f=278,t.g=500,t.h=500,t.i=278,t.j=278,t.k=444,t.l=278,t.m=722,t.n=500,t.o=500,t.p=500,t.q=500,t.r=389,t.s=389,t.t=278,t.u=500,t.v=444,t.w=667,t.x=444,t.y=444,t.z=389,t.braceleft=400,t.bar=275,t.braceright=400,t.asciitilde=541,t.exclamdown=389,t.cent=500,t.sterling=500,t.fraction=167,t.yen=500,t.florin=500,t.section=500,t.currency=500,t.quotesingle=214,t.quotedblleft=556,t.guillemotleft=500,t.guilsinglleft=333,t.guilsinglright=333,t.fi=500,t.fl=500,t.endash=500,t.dagger=500,t.daggerdbl=500,t.periodcentered=250,t.paragraph=523,t.bullet=350,t.quotesinglbase=333,t.quotedblbase=556,t.quotedblright=556,t.guillemotright=500,t.ellipsis=889,t.perthousand=1e3,t.questiondown=500,t.grave=333,t.acute=333,t.circumflex=333,t.tilde=333,t.macron=333,t.breve=333,t.dotaccent=333,t.dieresis=333,t.ring=333,t.cedilla=333,t.hungarumlaut=333,t.ogonek=333,t.caron=333,t.emdash=889,t.AE=889,t.ordfeminine=276,t.Lslash=556,t.Oslash=722,t.OE=944,t.ordmasculine=310,t.ae=667,t.dotlessi=278,t.lslash=278,t.oslash=500,t.oe=667,t.germandbls=500,t.Idieresis=333,t.eacute=444,t.abreve=500,t.uhungarumlaut=500,t.ecaron=444,t.Ydieresis=556,t.divide=675,t.Yacute=556,t.Acircumflex=611,t.aacute=500,t.Ucircumflex=722,t.yacute=444,t.scommaaccent=389,t.ecircumflex=444,t.Uring=722,t.Udieresis=722,t.aogonek=500,t.Uacute=722,t.uogonek=500,t.Edieresis=611,t.Dcroat=722,t.commaaccent=250,t.copyright=760,t.Emacron=611,t.ccaron=444,t.aring=500,t.Ncommaaccent=667,t.lacute=278,t.agrave=500,t.Tcommaaccent=556,t.Cacute=667,t.atilde=500,t.Edotaccent=611,t.scaron=389,t.scedilla=389,t.iacute=278,t.lozenge=471,t.Rcaron=611,t.Gcommaaccent=722,t.ucircumflex=500,t.acircumflex=500,t.Amacron=611,t.rcaron=389,t.ccedilla=444,t.Zdotaccent=556,t.Thorn=611,t.Omacron=722,t.Racute=611,t.Sacute=500,t.dcaron=544,t.Umacron=722,t.uring=500,t.threesuperior=300,t.Ograve=722,t.Agrave=611,t.Abreve=611,t.multiply=675,t.uacute=500,t.Tcaron=556,t.partialdiff=476,t.ydieresis=444,t.Nacute=667,t.icircumflex=278,t.Ecircumflex=611,t.adieresis=500,t.edieresis=444,t.cacute=444,t.nacute=500,t.umacron=500,t.Ncaron=667,t.Iacute=333,t.plusminus=675,t.brokenbar=275,t.registered=760,t.Gbreve=722,t.Idotaccent=333,t.summation=600,t.Egrave=611,t.racute=389,t.omacron=500,t.Zacute=556,t.Zcaron=556,t.greaterequal=549,t.Eth=722,t.Ccedilla=667,t.lcommaaccent=278,t.tcaron=300,t.eogonek=444,t.Uogonek=722,t.Aacute=611,t.Adieresis=611,t.egrave=444,t.zacute=389,t.iogonek=278,t.Oacute=722,t.oacute=500,t.amacron=500,t.sacute=389,t.idieresis=278,t.Ocircumflex=722,t.Ugrave=722,t.Delta=612,t.thorn=500,t.twosuperior=300,t.Odieresis=722,t.mu=500,t.igrave=278,t.ohungarumlaut=500,t.Eogonek=611,t.dcroat=500,t.threequarters=750,t.Scedilla=500,t.lcaron=300,t.Kcommaaccent=667,t.Lacute=556,t.trademark=980,t.edotaccent=444,t.Igrave=333,t.Imacron=333,t.Lcaron=611,t.onehalf=750,t.lessequal=549,t.ocircumflex=500,t.ntilde=500,t.Uhungarumlaut=722,t.Eacute=611,t.emacron=444,t.gbreve=500,t.onequarter=750,t.Scaron=500,t.Scommaaccent=500,t.Ohungarumlaut=722,t.degree=400,t.ograve=500,t.Ccaron=667,t.ugrave=500,t.radical=453,t.Dcaron=722,t.rcommaaccent=389,t.Ntilde=667,t.otilde=500,t.Rcommaaccent=611,t.Lcommaaccent=556,t.Atilde=611,t.Aogonek=611,t.Aring=611,t.Otilde=722,t.zdotaccent=389,t.Ecaron=611,t.Iogonek=333,t.kcommaaccent=444,t.minus=675,t.Icircumflex=333,t.ncaron=500,t.tcommaaccent=278,t.logicalnot=675,t.odieresis=500,t.udieresis=500,t.notequal=549,t.gcommaaccent=500,t.eth=500,t.zcaron=389,t.ncommaaccent=500,t.onesuperior=300,t.imacron=278,t.Euro=500}),e.ZapfDingbats=(0,i.getLookupTableFactory)(function(t){t.space=278,t.a1=974,t.a2=961,t.a202=974,t.a3=980,t.a4=719,t.a5=789,t.a119=790,t.a118=791,t.a117=690,t.a11=960,t.a12=939,t.a13=549,t.a14=855,t.a15=911,t.a16=933,t.a105=911,t.a17=945,t.a18=974,t.a19=755,t.a20=846,t.a21=762,t.a22=761,t.a23=571,t.a24=677,t.a25=763,t.a26=760,t.a27=759,t.a28=754,t.a6=494,t.a7=552,t.a8=537,t.a9=577,t.a10=692,t.a29=786,t.a30=788,t.a31=788,t.a32=790,t.a33=793,t.a34=794,t.a35=816,t.a36=823,t.a37=789,t.a38=841,t.a39=823,t.a40=833,t.a41=816,t.a42=831,t.a43=923,t.a44=744,t.a45=723,t.a46=749,t.a47=790,t.a48=792,t.a49=695,t.a50=776,t.a51=768,t.a52=792,t.a53=759,t.a54=707,t.a55=708,t.a56=682,t.a57=701,t.a58=826,t.a59=815,t.a60=789,t.a61=789,t.a62=707,t.a63=687,t.a64=696,t.a65=689,t.a66=786,t.a67=787,t.a68=713,t.a69=791,t.a70=785,t.a71=791,t.a72=873,t.a73=761,t.a74=762,t.a203=762,t.a75=759,t.a204=759,t.a76=892,t.a77=892,t.a78=788,t.a79=784,t.a81=438,t.a82=138,t.a83=277,t.a84=415,t.a97=392,t.a98=392,t.a99=668,t.a100=668,t.a89=390,t.a90=390,t.a93=317,t.a94=317,t.a91=276,t.a92=276,t.a205=509,t.a85=509,t.a206=410,t.a86=410,t.a87=234,t.a88=234,t.a95=334,t.a96=334,t.a101=732,t.a102=544,t.a103=544,t.a104=910,t.a106=667,t.a107=760,t.a108=760,t.a112=776,t.a111=595,t.a110=694,t.a109=626,t.a120=788,t.a121=788,t.a122=788,t.a123=788,t.a124=788,t.a125=788,t.a126=788,t.a127=788,t.a128=788,t.a129=788,t.a130=788,t.a131=788,t.a132=788,t.a133=788,t.a134=788,t.a135=788,t.a136=788,t.a137=788,t.a138=788,t.a139=788,t.a140=788,t.a141=788,t.a142=788,t.a143=788,t.a144=788,t.a145=788,t.a146=788,t.a147=788,t.a148=788,t.a149=788,t.a150=788,t.a151=788,t.a152=788,t.a153=788,t.a154=788,t.a155=788,t.a156=788,t.a157=788,t.a158=788,t.a159=788,t.a160=894,t.a161=838,t.a163=1016,t.a164=458,t.a196=748,t.a165=924,t.a192=748,t.a166=918,t.a167=927,t.a168=928,t.a169=928,t.a170=834,t.a171=873,t.a172=828,t.a173=924,t.a162=924,t.a174=917,t.a175=930,t.a176=931,t.a177=463,t.a178=883,t.a179=836,t.a193=836,t.a180=867,t.a199=867,t.a181=696,t.a200=696,t.a182=874,t.a201=874,t.a183=760,t.a184=946,t.a197=771,t.a185=865,t.a194=771,t.a198=888,t.a186=967,t.a195=888,t.a187=831,t.a188=873,t.a189=927,t.a190=970,t.a191=918})});D.getMetrics=w;const P=(0,i.getLookupTableFactory)(function(e){e.Courier={ascent:629,descent:-157,capHeight:562,xHeight:-426},e["Courier-Bold"]={ascent:629,descent:-157,capHeight:562,xHeight:439},e["Courier-Oblique"]={ascent:629,descent:-157,capHeight:562,xHeight:426},e["Courier-BoldOblique"]={ascent:629,descent:-157,capHeight:562,xHeight:426},e.Helvetica={ascent:718,descent:-207,capHeight:718,xHeight:523},e["Helvetica-Bold"]={ascent:718,descent:-207,capHeight:718,xHeight:532},e["Helvetica-Oblique"]={ascent:718,descent:-207,capHeight:718,xHeight:523},e["Helvetica-BoldOblique"]={ascent:718,descent:-207,capHeight:718,xHeight:532},e["Times-Roman"]={ascent:683,descent:-217,capHeight:662,xHeight:450},e["Times-Bold"]={ascent:683,descent:-217,capHeight:676,xHeight:461},e["Times-Italic"]={ascent:683,descent:-217,capHeight:653,xHeight:441},e["Times-BoldItalic"]={ascent:683,descent:-217,capHeight:669,xHeight:462},e.Symbol={ascent:Math.NaN,descent:Math.NaN,capHeight:Math.NaN,xHeight:Math.NaN},e.ZapfDingbats={ascent:Math.NaN,descent:Math.NaN,capHeight:Math.NaN,xHeight:Math.NaN}});D.getFontBasicMetrics=P},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.GlyfTable=void 0;const se=1,i=2,w=4,P=8,e=16,t=32,o=64,K=1,j=2,C=8,O=32,d=64,A=128,n=256;class I{constructor({glyfTable:b,isGlyphLocationsLong:V,locaTable:l,numGlyphs:x}){this.glyphs=[];const H=new DataView(l.buffer,l.byteOffset,l.byteLength),s=new DataView(b.buffer,b.byteOffset,b.byteLength),h=V?4:2;let F=V?H.getUint32(0):2*H.getUint16(0),N=0;for(let U=0;U<x;U++){N+=h;const g=V?H.getUint32(N):2*H.getUint16(N);if(g===F){this.glyphs.push(new k({}));continue}const S=k.parse(F,s);this.glyphs.push(S),F=g}}getSize(){return this.glyphs.reduce((b,V)=>{const l=V.getSize();return b+(l+3&-4)},0)}write(){const b=this.getSize(),V=new DataView(new ArrayBuffer(b)),l=b>131070,x=l?4:2,H=new DataView(new ArrayBuffer((this.glyphs.length+1)*x));l?H.setUint32(0,0):H.setUint16(0,0);let s=0,h=0;for(const F of this.glyphs)s+=F.write(s,V),s=s+3&-4,h+=x,l?H.setUint32(h,s):H.setUint16(h,s>>1);return{isLocationLong:l,loca:new Uint8Array(H.buffer),glyf:new Uint8Array(V.buffer)}}scale(b){for(let V=0,l=this.glyphs.length;V<l;V++)this.glyphs[V].scale(b[V])}}D.GlyfTable=I;class k{constructor({header:b=null,simple:V=null,composites:l=null}){this.header=b,this.simple=V,this.composites=l}static parse(b,V){const[l,x]=y.parse(b,V);if(b+=l,x.numberOfContours<0){const s=[];for(;;){const[h,F]=E.parse(b,V);if(b+=h,s.push(F),!(F.flags&O))break}return new k({header:x,composites:s})}const H=R.parse(b,V,x.numberOfContours);return new k({header:x,simple:H})}getSize(){if(!this.header)return 0;const b=this.simple?this.simple.getSize():this.composites.reduce((V,l)=>V+l.getSize(),0);return this.header.getSize()+b}write(b,V){if(!this.header)return 0;const l=b;if(b+=this.header.write(b,V),this.simple)b+=this.simple.write(b,V);else for(const x of this.composites)b+=x.write(b,V);return b-l}scale(b){if(!this.header)return;const V=(this.header.xMin+this.header.xMax)/2;if(this.header.scale(V,b),this.simple)this.simple.scale(V,b);else for(const l of this.composites)l.scale(V,b)}}class y{constructor({numberOfContours:b,xMin:V,yMin:l,xMax:x,yMax:H}){this.numberOfContours=b,this.xMin=V,this.yMin=l,this.xMax=x,this.yMax=H}static parse(b,V){return[10,new y({numberOfContours:V.getInt16(b),xMin:V.getInt16(b+2),yMin:V.getInt16(b+4),xMax:V.getInt16(b+6),yMax:V.getInt16(b+8)})]}getSize(){return 10}write(b,V){return V.setInt16(b,this.numberOfContours),V.setInt16(b+2,this.xMin),V.setInt16(b+4,this.yMin),V.setInt16(b+6,this.xMax),V.setInt16(b+8,this.yMax),10}scale(b,V){this.xMin=Math.round(b+(this.xMin-b)*V),this.xMax=Math.round(b+(this.xMax-b)*V)}}class f{constructor({flags:b,xCoordinates:V,yCoordinates:l}){this.xCoordinates=V,this.yCoordinates=l,this.flags=b}}class R{constructor({contours:b,instructions:V}){this.contours=b,this.instructions=V}static parse(b,V,l){const x=[];for(let c=0;c<l;c++){const u=V.getUint16(b);b+=2,x.push(u)}const H=x[l-1]+1,s=V.getUint16(b);b+=2;const h=new Uint8Array(V).slice(b,b+s);b+=s;const F=[];for(let c=0;c<H;b++,c++){let u=V.getUint8(b);if(F.push(u),u&P){const q=V.getUint8(++b);u^=P;for(let J=0;J<q;J++)F.push(u);c+=q}}const N=[];let U=[],g=[],S=[];const m=[];let r=0,p=0;for(let c=0;c<H;c++){const u=F[c];if(u&i){const q=V.getUint8(b++);p+=u&e?q:-q,U.push(p)}else u&e||(p+=V.getInt16(b),b+=2),U.push(p);x[r]===c&&(r++,N.push(U),U=[])}p=0,r=0;for(let c=0;c<H;c++){const u=F[c];if(u&w){const q=V.getUint8(b++);p+=u&t?q:-q,g.push(p)}else u&t||(p+=V.getInt16(b),b+=2),g.push(p);S.push(u&se|u&o),x[r]===c&&(U=N[r],r++,m.push(new f({flags:S,xCoordinates:U,yCoordinates:g})),g=[],S=[])}return new R({contours:m,instructions:h})}getSize(){let b=this.contours.length*2+2+this.instructions.length,V=0,l=0;for(const x of this.contours){b+=x.flags.length;for(let H=0,s=x.xCoordinates.length;H<s;H++){const h=x.xCoordinates[H],F=x.yCoordinates[H];let N=Math.abs(h-V);N>255?b+=2:N>0&&(b+=1),V=h,N=Math.abs(F-l),N>255?b+=2:N>0&&(b+=1),l=F}}return b}write(b,V){const l=b,x=[],H=[],s=[];let h=0,F=0;for(const N of this.contours){for(let U=0,g=N.xCoordinates.length;U<g;U++){let S=N.flags[U];const m=N.xCoordinates[U];let r=m-h;if(r===0)S|=e,x.push(0);else{const c=Math.abs(r);c<=255?(S|=r>=0?i|e:i,x.push(c)):x.push(r)}h=m;const p=N.yCoordinates[U];if(r=p-F,r===0)S|=t,H.push(0);else{const c=Math.abs(r);c<=255?(S|=r>=0?w|t:w,H.push(c)):H.push(r)}F=p,s.push(S)}V.setUint16(b,x.length-1),b+=2}V.setUint16(b,this.instructions.length),b+=2,this.instructions.length&&(new Uint8Array(V.buffer,0,V.buffer.byteLength).set(this.instructions,b),b+=this.instructions.length);for(const N of s)V.setUint8(b++,N);for(let N=0,U=x.length;N<U;N++){const g=x[N],S=s[N];S&i?V.setUint8(b++,g):S&e||(V.setInt16(b,g),b+=2)}for(let N=0,U=H.length;N<U;N++){const g=H[N],S=s[N];S&w?V.setUint8(b++,g):S&t||(V.setInt16(b,g),b+=2)}return b-l}scale(b,V){for(const l of this.contours)if(l.xCoordinates.length!==0)for(let x=0,H=l.xCoordinates.length;x<H;x++)l.xCoordinates[x]=Math.round(b+(l.xCoordinates[x]-b)*V)}}class E{constructor({flags:b,glyphIndex:V,argument1:l,argument2:x,transf:H,instructions:s}){this.flags=b,this.glyphIndex=V,this.argument1=l,this.argument2=x,this.transf=H,this.instructions=s}static parse(b,V){const l=b,x=[];let H=V.getUint16(b);const s=V.getUint16(b+2);b+=4;let h,F;H&K?(H&j?(h=V.getInt16(b),F=V.getInt16(b+2)):(h=V.getUint16(b),F=V.getUint16(b+2)),b+=4,H^=K):(H&j?(h=V.getInt8(b),F=V.getInt8(b+1)):(h=V.getUint8(b),F=V.getUint8(b+1)),b+=2),H&C?(x.push(V.getUint16(b)),b+=2):H&d?(x.push(V.getUint16(b),V.getUint16(b+2)),b+=4):H&A&&(x.push(V.getUint16(b),V.getUint16(b+2),V.getUint16(b+4),V.getUint16(b+6)),b+=8);let N=null;if(H&n){const U=V.getUint16(b);b+=2,N=new Uint8Array(V).slice(b,b+U),b+=U}return[b-l,new E({flags:H,glyphIndex:s,argument1:h,argument2:F,transf:x,instructions:N})]}getSize(){let b=4+this.transf.length*2;return this.flags&n&&(b+=2+this.instructions.length),b+=2,this.flags&2?this.argument1>=-128&&this.argument1<=127&&this.argument2>=-128&&this.argument2<=127||(b+=2):this.argument1>=0&&this.argument1<=255&&this.argument2>=0&&this.argument2<=255||(b+=2),b}write(b,V){const l=b;return this.flags&j?this.argument1>=-128&&this.argument1<=127&&this.argument2>=-128&&this.argument2<=127||(this.flags|=K):this.argument1>=0&&this.argument1<=255&&this.argument2>=0&&this.argument2<=255||(this.flags|=K),V.setUint16(b,this.flags),V.setUint16(b+2,this.glyphIndex),b+=4,this.flags&K?(this.flags&j?(V.setInt16(b,this.argument1),V.setInt16(b+2,this.argument2)):(V.setUint16(b,this.argument1),V.setUint16(b+2,this.argument2)),b+=4):(V.setUint8(b,this.argument1),V.setUint8(b+1,this.argument2),b+=2),this.flags&n&&(V.setUint16(b,this.instructions.length),b+=2,this.instructions.length&&(new Uint8Array(V.buffer,0,V.buffer.byteLength).set(this.instructions,b),b+=this.instructions.length)),b-l}scale(b,V){}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.OpenTypeFileBuilder=void 0;var i=se(3),w=se(2);function P(C,O,d){C[O]=d>>8&255,C[O+1]=d&255}function e(C,O,d){C[O]=d>>24&255,C[O+1]=d>>16&255,C[O+2]=d>>8&255,C[O+3]=d&255}function t(C,O,d){if(d instanceof Uint8Array)C.set(d,O);else if(typeof d=="string")for(let A=0,n=d.length;A<n;A++)C[O++]=d.charCodeAt(A)&255;else for(const A of d)C[O++]=A&255}const o=12,K=16;class j{constructor(O){this.sfnt=O,this.tables=Object.create(null)}static getSearchParams(O,d){let A=1,n=0;for(;(A^O)>A;)A<<=1,n++;const I=A*d;return{range:I,entry:n,rangeShift:d*O-I}}toArray(){let O=this.sfnt;const d=this.tables,A=Object.keys(d);A.sort();const n=A.length;let I,k,y,f,R,E=o+n*K;const M=[E];for(I=0;I<n;I++){f=d[A[I]];const l=(f.length+3&-4)>>>0;E+=l,M.push(E)}const b=new Uint8Array(E);for(I=0;I<n;I++)f=d[A[I]],t(b,M[I],f);O==="true"&&(O=(0,w.string32)(65536)),b[0]=O.charCodeAt(0)&255,b[1]=O.charCodeAt(1)&255,b[2]=O.charCodeAt(2)&255,b[3]=O.charCodeAt(3)&255,P(b,4,n);const V=j.getSearchParams(n,16);for(P(b,6,V.range),P(b,8,V.entry),P(b,10,V.rangeShift),E=o,I=0;I<n;I++){R=A[I],b[E]=R.charCodeAt(0)&255,b[E+1]=R.charCodeAt(1)&255,b[E+2]=R.charCodeAt(2)&255,b[E+3]=R.charCodeAt(3)&255;let l=0;for(k=M[I],y=M[I+1];k<y;k+=4){const x=(0,i.readUint32)(b,k);l=l+x>>>0}e(b,E+4,l),e(b,E+8,M[I]),e(b,E+12,d[R].length),E+=K}return b}addTable(O,d){if(O in this.tables)throw new Error("Table "+O+" already exists");this.tables[O]=d}}D.OpenTypeFileBuilder=j},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Type1Font=void 0;var i=se(35),w=se(2),P=se(38),e=se(3),t=se(8),o=se(49);function K(d,A,n){const I=d.length,k=A.length,y=I-k;let f=n,R=!1;for(;f<y;){let E=0;for(;E<k&&d[f+E]===A[E];)E++;if(E>=k){for(f+=E;f<I&&(0,e.isWhiteSpace)(d[f]);)f++;R=!0;break}f++}return{found:R,length:f}}function j(d,A){const n=[101,101,120,101,99],I=d.pos;let k,y,f;try{k=d.getBytes(A),y=k.length}catch(M){}if(y===A&&(f=K(k,n,A-2*n.length),f.found&&f.length===A))return{stream:new t.Stream(k),length:A};(0,w.warn)('Invalid "Length1" property in Type1 font -- trying to recover.'),d.pos=I;const R=2048;let E;for(;;){const M=d.peekBytes(R);if(f=K(M,n,0),f.length===0)break;if(d.pos+=f.length,f.found){E=d.pos-I;break}}return d.pos=I,E?{stream:new t.Stream(d.getBytes(E)),length:E}:((0,w.warn)('Unable to recover "Length1" property in Type1 font -- using as is.'),{stream:new t.Stream(d.getBytes(A)),length:A})}function C(d,A){const n=d.getBytes();if(n.length===0)throw new w.FormatError("getEexecBlock - no font program found.");return{stream:new t.Stream(n),length:n.length}}class O{constructor(A,n,I){let y=I.length1;I.length2;let f=n.peekBytes(6);const R=f[0]===128&&f[1]===1;R&&(n.skip(6),y=f[5]<<24|f[4]<<16|f[3]<<8|f[2]);const E=j(n,y);new o.Type1Parser(E.stream,!1,P.SEAC_ANALYSIS_ENABLED).extractFontHeader(I),R&&(f=n.getBytes(6),f[5]<<24|f[4]<<16|f[3]<<8|f[2]);const b=C(n),l=new o.Type1Parser(b.stream,!0,P.SEAC_ANALYSIS_ENABLED).extractFontProgram(I);for(const h in l.properties)I[h]=l.properties[h];const x=l.charstrings,H=this.getType2Charstrings(x),s=this.getType2Subrs(l.subrs);this.charstrings=x,this.data=this.wrap(A,H,this.charstrings,s,I),this.seacs=this.getSeacs(l.charstrings)}get numGlyphs(){return this.charstrings.length+1}getCharset(){const A=[".notdef"];for(const{glyphName:n}of this.charstrings)A.push(n);return A}getGlyphMapping(A){const n=this.charstrings;if(A.composite){const R=Object.create(null);for(let E=0,M=n.length;E<M;E++){const b=A.cMap.charCodeOf(E);R[b]=E+1}return R}const I=[".notdef"];let k,y;for(y=0;y<n.length;y++)I.push(n[y].glyphName);const f=A.builtInEncoding;if(f){k=Object.create(null);for(const R in f)y=I.indexOf(f[R]),y>=0&&(k[R]=y)}return(0,P.type1FontGlyphMapping)(A,k,I)}hasGlyphId(A){return A<0||A>=this.numGlyphs?!1:A===0?!0:this.charstrings[A-1].charstring.length>0}getSeacs(A){const n=[];for(let I=0,k=A.length;I<k;I++){const y=A[I];y.seac&&(n[I+1]=y.seac)}return n}getType2Charstrings(A){const n=[];for(const I of A)n.push(I.charstring);return n}getType2Subrs(A){let n=0;const I=A.length;I<1133?n=107:I<33769?n=1131:n=32768;const k=[];let y;for(y=0;y<n;y++)k.push([11]);for(y=0;y<I;y++)k.push(A[y]);return k}wrap(A,n,I,k,y){const f=new i.CFF;f.header=new i.CFFHeader(1,0,4,4),f.names=[A];const R=new i.CFFTopDict;R.setByName("version",391),R.setByName("Notice",392),R.setByName("FullName",393),R.setByName("FamilyName",394),R.setByName("Weight",395),R.setByName("Encoding",null),R.setByName("FontMatrix",y.fontMatrix),R.setByName("FontBBox",y.bbox),R.setByName("charset",null),R.setByName("CharStrings",null),R.setByName("Private",null),f.topDict=R;const E=new i.CFFStrings;E.add("Version 0.11"),E.add("See original notice"),E.add(A),E.add(A),E.add("Medium"),f.strings=E,f.globalSubrIndex=new i.CFFIndex;const M=n.length,b=[".notdef"];let V,l;for(V=0;V<M;V++){const N=I[V].glyphName;i.CFFStandardStrings.indexOf(N)===-1&&E.add(N),b.push(N)}f.charset=new i.CFFCharset(!1,0,b);const x=new i.CFFIndex;for(x.add([139,14]),V=0;V<M;V++)x.add(n[V]);f.charStrings=x;const H=new i.CFFPrivateDict;H.setByName("Subrs",null);const s=["BlueValues","OtherBlues","FamilyBlues","FamilyOtherBlues","StemSnapH","StemSnapV","BlueShift","BlueFuzz","BlueScale","LanguageGroup","ExpansionFactor","ForceBold","StdHW","StdVW"];for(V=0,l=s.length;V<l;V++){const N=s[V];if(!(N in y.privateData))continue;const U=y.privateData[N];if(Array.isArray(U))for(let g=U.length-1;g>0;g--)U[g]-=U[g-1];H.setByName(N,U)}f.topDict.privateDict=H;const h=new i.CFFIndex;for(V=0,l=k.length;V<l;V++)h.add(k[V]);return H.subrsIndex=h,new i.CFFCompiler(f).compile()}}D.Type1Font=O},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Type1Parser=void 0;var i=se(37),w=se(3),P=se(8),e=se(2);const t=!1,o={hstem:[1],vstem:[3],vmoveto:[4],rlineto:[5],hlineto:[6],vlineto:[7],rrcurveto:[8],callsubr:[10],flex:[12,35],drop:[12,18],endchar:[14],rmoveto:[21],hmoveto:[22],vhcurveto:[30],hvcurveto:[31]};class K{constructor(){this.width=0,this.lsb=0,this.flexing=!1,this.output=[],this.stack=[]}convert(y,f,R){const E=y.length;let M=!1,b,V,l;for(let x=0;x<E;x++){let H=y[x];if(H<32){switch(H===12&&(H=(H<<8)+y[++x]),H){case 1:{this.stack=[];break}case 3:{this.stack=[];break}case 4:if(this.flexing){if(this.stack.length<1){M=!0;break}const U=this.stack.pop();this.stack.push(0,U);break}M=this.executeCommand(1,o.vmoveto);break;case 5:M=this.executeCommand(2,o.rlineto);break;case 6:M=this.executeCommand(1,o.hlineto);break;case 7:M=this.executeCommand(1,o.vlineto);break;case 8:M=this.executeCommand(6,o.rrcurveto);break;case 9:this.stack=[];break;case 10:if(this.stack.length<1){M=!0;break}if(l=this.stack.pop(),!f[l]){M=!0;break}M=this.convert(f[l],f,R);break;case 11:return M;case 13:if(this.stack.length<2){M=!0;break}b=this.stack.pop(),V=this.stack.pop(),this.lsb=V,this.width=b,this.stack.push(b,V),M=this.executeCommand(2,o.hmoveto);break;case 14:this.output.push(o.endchar[0]);break;case 21:if(this.flexing)break;M=this.executeCommand(2,o.rmoveto);break;case 22:if(this.flexing){this.stack.push(0);break}M=this.executeCommand(1,o.hmoveto);break;case 30:M=this.executeCommand(4,o.vhcurveto);break;case 31:M=this.executeCommand(4,o.hvcurveto);break;case 3072:this.stack=[];break;case 3073:{this.stack=[];break}case 3074:{this.stack=[];break}case 3078:if(R){const U=this.stack.at(-5);this.seac=this.stack.splice(-4,4),this.seac[0]+=this.lsb-U,M=this.executeCommand(0,o.endchar)}else M=this.executeCommand(4,o.endchar);break;case 3079:if(this.stack.length<4){M=!0;break}this.stack.pop(),b=this.stack.pop();const s=this.stack.pop();V=this.stack.pop(),this.lsb=V,this.width=b,this.stack.push(b,V,s),M=this.executeCommand(3,o.rmoveto);break;case 3084:if(this.stack.length<2){M=!0;break}const h=this.stack.pop(),F=this.stack.pop();this.stack.push(F/h);break;case 3088:if(this.stack.length<2){M=!0;break}l=this.stack.pop();const N=this.stack.pop();if(l===0&&N===3){const U=this.stack.splice(-17,17);this.stack.push(U[2]+U[0],U[3]+U[1],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14]),M=this.executeCommand(13,o.flex,!0),this.flexing=!1,this.stack.push(U[15],U[16])}else l===1&&N===0&&(this.flexing=!0);break;case 3089:break;case 3105:this.stack=[];break;default:(0,e.warn)('Unknown type 1 charstring command of "'+H+'"');break}if(M)break;continue}else H<=246?H-=139:H<=250?H=(H-247)*256+y[++x]+108:H<=254?H=-((H-251)*256)-y[++x]-108:H=(y[++x]&255)<<24|(y[++x]&255)<<16|(y[++x]&255)<<8|(y[++x]&255)<<0;this.stack.push(H)}return M}executeCommand(y,f,R){const E=this.stack.length;if(y>E)return!0;const M=E-y;for(let b=M;b<E;b++){let V=this.stack[b];Number.isInteger(V)?this.output.push(28,V>>8&255,V&255):(V=65536*V|0,this.output.push(255,V>>24&255,V>>16&255,V>>8&255,V&255))}return this.output.push(...f),R?this.stack.splice(M,y):this.stack.length=0,!1}}const j=55665,C=4330;function O(k){return k>=48&&k<=57||k>=65&&k<=70||k>=97&&k<=102}function d(k,y,f){if(f>=k.length)return new Uint8Array(0);const R=52845,E=22719;let M=y|0,b,V;for(b=0;b<f;b++)M=(k[b]+M)*R+E&65535;const l=k.length-f,x=new Uint8Array(l);for(b=f,V=0;V<l;b++,V++){const H=k[b];x[V]=H^M>>8,M=(H+M)*R+E&65535}return x}function A(k,y,f){let M=y|0;const b=k.length,V=b>>>1,l=new Uint8Array(V);let x,H;for(x=0,H=0;x<b;x++){const s=k[x];if(!O(s))continue;x++;let h;for(;x<b&&!O(h=k[x]);)x++;if(x<b){const F=parseInt(String.fromCharCode(s,h),16);l[H++]=F^M>>8,M=(F+M)*52845+22719&65535}}return l.slice(f,H)}function n(k){return k===47||k===91||k===93||k===123||k===125||k===40||k===41}class I{constructor(y,f,R){if(f){const E=y.getBytes(),M=!((O(E[0])||(0,w.isWhiteSpace)(E[0]))&&O(E[1])&&O(E[2])&&O(E[3])&&O(E[4])&&O(E[5])&&O(E[6])&&O(E[7]));y=new P.Stream(M?d(E,j,4):A(E,j,4))}this.seacAnalysisEnabled=!!R,this.stream=y,this.nextChar()}readNumberArray(){this.getToken();const y=[];for(;;){const f=this.getToken();if(f===null||f==="]"||f==="}")break;y.push(parseFloat(f||0))}return y}readNumber(){const y=this.getToken();return parseFloat(y||0)}readInt(){const y=this.getToken();return parseInt(y||0,10)|0}readBoolean(){return this.getToken()==="true"?1:0}nextChar(){return this.currentChar=this.stream.getByte()}prevChar(){return this.stream.skip(-2),this.currentChar=this.stream.getByte()}getToken(){let y=!1,f=this.currentChar;for(;;){if(f===-1)return null;if(y)(f===10||f===13)&&(y=!1);else if(f===37)y=!0;else if(!(0,w.isWhiteSpace)(f))break;f=this.nextChar()}if(n(f))return this.nextChar(),String.fromCharCode(f);let R="";do R+=String.fromCharCode(f),f=this.nextChar();while(f>=0&&!(0,w.isWhiteSpace)(f)&&!n(f));return R}readCharStrings(y,f){return f===-1?y:d(y,C,f)}extractFontProgram(y){const f=this.stream,R=[],E=[],M=Object.create(null);M.lenIV=4;const b={subrs:[],charstrings:[],properties:{privateData:M}};let V,l,x,H;for(;(V=this.getToken())!==null;)if(V==="/")switch(V=this.getToken(),V){case"CharStrings":for(this.getToken(),this.getToken(),this.getToken(),this.getToken();V=this.getToken(),!(V===null||V==="end");){if(V!=="/")continue;const h=this.getToken();l=this.readInt(),this.getToken(),x=l>0?f.getBytes(l):new Uint8Array(0),H=b.properties.privateData.lenIV;const F=this.readCharStrings(x,H);this.nextChar(),V=this.getToken(),V==="noaccess"?this.getToken():V==="/"&&this.prevChar(),E.push({glyph:h,encoded:F})}break;case"Subrs":for(this.readInt(),this.getToken();this.getToken()==="dup";){const h=this.readInt();l=this.readInt(),this.getToken(),x=l>0?f.getBytes(l):new Uint8Array(0),H=b.properties.privateData.lenIV;const F=this.readCharStrings(x,H);this.nextChar(),V=this.getToken(),V==="noaccess"&&this.getToken(),R[h]=F}break;case"BlueValues":case"OtherBlues":case"FamilyBlues":case"FamilyOtherBlues":const s=this.readNumberArray();s.length>0&&s.length%2===0&&t&&(b.properties.privateData[V]=s);break;case"StemSnapH":case"StemSnapV":b.properties.privateData[V]=this.readNumberArray();break;case"StdHW":case"StdVW":b.properties.privateData[V]=this.readNumberArray()[0];break;case"BlueShift":case"lenIV":case"BlueFuzz":case"BlueScale":case"LanguageGroup":b.properties.privateData[V]=this.readNumber();break;case"ExpansionFactor":b.properties.privateData[V]=this.readNumber()||.06;break;case"ForceBold":b.properties.privateData[V]=this.readBoolean();break}for(const{encoded:s,glyph:h}of E){const F=new K,N=F.convert(s,R,this.seacAnalysisEnabled);let U=F.output;N&&(U=[14]);const g={glyphName:h,charstring:U,width:F.width,lsb:F.lsb,seac:F.seac};if(h===".notdef"?b.charstrings.unshift(g):b.charstrings.push(g),y.builtInEncoding){const S=y.builtInEncoding.indexOf(h);S>-1&&y.widths[S]===void 0&&S>=y.firstChar&&S<=y.lastChar&&(y.widths[S]=F.width)}}return b}extractFontHeader(y){let f;for(;(f=this.getToken())!==null;)if(f==="/")switch(f=this.getToken(),f){case"FontMatrix":const R=this.readNumberArray();y.fontMatrix=R;break;case"Encoding":const E=this.getToken();let M;if(!/^\d+$/.test(E))M=(0,i.getEncoding)(E);else{M=[];const V=parseInt(E,10)|0;this.getToken();for(let l=0;l<V;l++){for(f=this.getToken();f!=="dup"&&f!=="def";)if(f=this.getToken(),f===null)return;if(f==="def")break;const x=this.readInt();this.getToken();const H=this.getToken();M[x]=H,this.getToken()}}y.builtInEncoding=M;break;case"FontBBox":const b=this.readNumberArray();y.ascent=Math.max(b[3],b[1]),y.descent=Math.min(b[1],b[3]),y.ascentScaled=!0;break}}}D.Type1Parser=I},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Pattern=void 0,D.clearPatternCaches=n,D.getTilingPatternIR=y;var i=se(2),w=se(5),P=se(12),e=se(3);const t={FUNCTION_BASED:1,AXIAL:2,RADIAL:3,FREE_FORM_MESH:4,LATTICE_FORM_MESH:5,COONS_PATCH_MESH:6,TENSOR_PATCH_MESH:7};class o{constructor(){(0,i.unreachable)("Cannot initialize Pattern.")}static parseShading(M,b,V,l,x){const H=M instanceof w.BaseStream?M.dict:M,s=H.get("ShadingType");try{switch(s){case t.AXIAL:case t.RADIAL:return new j(H,b,V,l,x);case t.FREE_FORM_MESH:case t.LATTICE_FORM_MESH:case t.COONS_PATCH_MESH:case t.TENSOR_PATCH_MESH:return new I(M,b,V,l,x);default:throw new i.FormatError("Unsupported ShadingType: "+s)}}catch(h){if(h instanceof e.MissingDataException)throw h;return(0,i.warn)(h),new k}}}D.Pattern=o;const f=class f{constructor(){this.constructor===f&&(0,i.unreachable)("Cannot initialize BaseShading.")}getIR(){(0,i.unreachable)("Abstract method `getIR` called.")}};jt(f,"SMALL_NUMBER",1e-6);let K=f;class j extends K{constructor(M,b,V,l,x){super(),this.coordsArr=M.getArray("Coords"),this.shadingType=M.get("ShadingType");const H=P.ColorSpace.parse({cs:M.getRaw("CS")||M.getRaw("ColorSpace"),xref:b,resources:V,pdfFunctionFactory:l,localColorSpaceCache:x}),s=M.getArray("BBox");this.bbox=Array.isArray(s)&&s.length===4?i.Util.normalizeRect(s):null;let h=0,F=1;if(M.has("Domain")){const te=M.getArray("Domain");h=te[0],F=te[1]}let N=!1,U=!1;if(M.has("Extend")){const te=M.getArray("Extend");N=te[0],U=te[1]}if(this.shadingType===t.RADIAL&&(!N||!U)){const[te,ne,X,re,ae,z]=this.coordsArr,le=Math.hypot(te-re,ne-ae);X<=z+le&&z<=X+le&&(0,i.warn)("Unsupported radial gradient.")}this.extendStart=N,this.extendEnd=U;const g=M.getRaw("Function"),S=l.createFromArray(g),m=840,r=(F-h)/m,p=this.colorStops=[];if(h>=F||r<=0){(0,i.info)("Bad shading domain.");return}const c=new Float32Array(H.numComps),u=new Float32Array(1);let q,J=0;u[0]=h,S(u,0,c,0);let G=H.getRgb(c,0);const W=i.Util.makeHexColor(G[0],G[1],G[2]);p.push([0,W]);let ce=1;u[0]=h+r,S(u,0,c,0);let _=H.getRgb(c,0),ie=_[0]-G[0]+1,L=_[1]-G[1]+1,oe=_[2]-G[2]+1,T=_[0]-G[0]-1,Q=_[1]-G[1]-1,v=_[2]-G[2]-1;for(let te=2;te<m;te++){u[0]=h+te*r,S(u,0,c,0),q=H.getRgb(c,0);const ne=te-J;if(ie=Math.min(ie,(q[0]-G[0]+1)/ne),L=Math.min(L,(q[1]-G[1]+1)/ne),oe=Math.min(oe,(q[2]-G[2]+1)/ne),T=Math.max(T,(q[0]-G[0]-1)/ne),Q=Math.max(Q,(q[1]-G[1]-1)/ne),v=Math.max(v,(q[2]-G[2]-1)/ne),!(T<=ie&&Q<=L&&v<=oe)){const re=i.Util.makeHexColor(_[0],_[1],_[2]);p.push([ce/m,re]),ie=q[0]-_[0]+1,L=q[1]-_[1]+1,oe=q[2]-_[2]+1,T=q[0]-_[0]-1,Q=q[1]-_[1]-1,v=q[2]-_[2]-1,J=ce,G=_}ce=te,_=q}const $=i.Util.makeHexColor(_[0],_[1],_[2]);p.push([1,$]);let Z="transparent";M.has("Background")&&(q=H.getRgb(M.get("Background"),0),Z=i.Util.makeHexColor(q[0],q[1],q[2])),N||(p.unshift([0,Z]),p[1][0]+=K.SMALL_NUMBER),U||(p.at(-1)[0]-=K.SMALL_NUMBER,p.push([1,Z])),this.colorStops=p}getIR(){const M=this.coordsArr,b=this.shadingType;let V,l,x,H,s;return b===t.AXIAL?(l=[M[0],M[1]],x=[M[2],M[3]],H=null,s=null,V="axial"):b===t.RADIAL?(l=[M[0],M[1]],x=[M[3],M[4]],H=M[2],s=M[5],V="radial"):(0,i.unreachable)(`getPattern type unknown: ${b}`),["RadialAxial",V,this.bbox,this.colorStops,l,x,H,s]}}class C{constructor(M,b){this.stream=M,this.context=b,this.buffer=0,this.bufferLength=0;const V=b.numComps;this.tmpCompsBuf=new Float32Array(V);const l=b.colorSpace.numComps;this.tmpCsCompsBuf=b.colorFn?new Float32Array(l):this.tmpCompsBuf}get hasData(){if(this.stream.end)return this.stream.pos<this.stream.end;if(this.bufferLength>0)return!0;const M=this.stream.getByte();return M<0?!1:(this.buffer=M,this.bufferLength=8,!0)}readBits(M){let b=this.buffer,V=this.bufferLength;if(M===32){if(V===0)return(this.stream.getByte()<<24|this.stream.getByte()<<16|this.stream.getByte()<<8|this.stream.getByte())>>>0;b=b<<24|this.stream.getByte()<<16|this.stream.getByte()<<8|this.stream.getByte();const l=this.stream.getByte();return this.buffer=l&(1<<V)-1,(b<<8-V|(l&255)>>V)>>>0}if(M===8&&V===0)return this.stream.getByte();for(;V<M;)b=b<<8|this.stream.getByte(),V+=8;return V-=M,this.bufferLength=V,this.buffer=b&(1<<V)-1,b>>V}align(){this.buffer=0,this.bufferLength=0}readFlag(){return this.readBits(this.context.bitsPerFlag)}readCoordinate(){const M=this.context.bitsPerCoordinate,b=this.readBits(M),V=this.readBits(M),l=this.context.decode,x=M<32?1/((1<<M)-1):23283064365386963e-26;return[b*x*(l[1]-l[0])+l[0],V*x*(l[3]-l[2])+l[2]]}readComponents(){const M=this.context.numComps,b=this.context.bitsPerComponent,V=b<32?1/((1<<b)-1):23283064365386963e-26,l=this.context.decode,x=this.tmpCompsBuf;for(let s=0,h=4;s<M;s++,h+=2){const F=this.readBits(b);x[s]=F*V*(l[h+1]-l[h])+l[h]}const H=this.tmpCsCompsBuf;return this.context.colorFn&&this.context.colorFn(x,0,H,0),this.context.colorSpace.getRgb(H,0)}}let O=Object.create(null);function d(E){const M=[];for(let b=0;b<=E;b++){const V=b/E,l=1-V;M.push(new Float32Array([Gt(l,3),3*V*Gt(l,2),3*Gt(V,2)*l,Gt(V,3)]))}return M}function A(E){return O[E]||(O[E]=d(E))}function n(){O=Object.create(null)}const R=class R extends K{constructor(M,b,V,l,x){if(super(),!(M instanceof w.BaseStream))throw new i.FormatError("Mesh data is not a stream");const H=M.dict;this.shadingType=H.get("ShadingType");const s=H.getArray("BBox");this.bbox=Array.isArray(s)&&s.length===4?i.Util.normalizeRect(s):null;const h=P.ColorSpace.parse({cs:H.getRaw("CS")||H.getRaw("ColorSpace"),xref:b,resources:V,pdfFunctionFactory:l,localColorSpaceCache:x});this.background=H.has("Background")?h.getRgb(H.get("Background"),0):null;const F=H.getRaw("Function"),N=F?l.createFromArray(F):null;this.coords=[],this.colors=[],this.figures=[];const U={bitsPerCoordinate:H.get("BitsPerCoordinate"),bitsPerComponent:H.get("BitsPerComponent"),bitsPerFlag:H.get("BitsPerFlag"),decode:H.getArray("Decode"),colorFn:N,colorSpace:h,numComps:N?1:h.numComps},g=new C(M,U);let S=!1;switch(this.shadingType){case t.FREE_FORM_MESH:this._decodeType4Shading(g);break;case t.LATTICE_FORM_MESH:const m=H.get("VerticesPerRow")|0;if(m<2)throw new i.FormatError("Invalid VerticesPerRow");this._decodeType5Shading(g,m);break;case t.COONS_PATCH_MESH:this._decodeType6Shading(g),S=!0;break;case t.TENSOR_PATCH_MESH:this._decodeType7Shading(g),S=!0;break;default:(0,i.unreachable)("Unsupported mesh type.");break}if(S){this._updateBounds();for(let m=0,r=this.figures.length;m<r;m++)this._buildFigureFromPatch(m)}this._updateBounds(),this._packData()}_decodeType4Shading(M){const b=this.coords,V=this.colors,l=[];let x=0;for(;M.hasData;){const H=M.readFlag(),s=M.readCoordinate(),h=M.readComponents();if(x===0){if(!(0<=H&&H<=2))throw new i.FormatError("Unknown type4 flag");switch(H){case 0:x=3;break;case 1:l.push(l.at(-2),l.at(-1)),x=1;break;case 2:l.push(l.at(-3),l.at(-1)),x=1;break}}l.push(b.length),b.push(s),V.push(h),x--,M.align()}this.figures.push({type:"triangles",coords:new Int32Array(l),colors:new Int32Array(l)})}_decodeType5Shading(M,b){const V=this.coords,l=this.colors,x=[];for(;M.hasData;){const H=M.readCoordinate(),s=M.readComponents();x.push(V.length),V.push(H),l.push(s)}this.figures.push({type:"lattice",coords:new Int32Array(x),colors:new Int32Array(x),verticesPerRow:b})}_decodeType6Shading(M){const b=this.coords,V=this.colors,l=new Int32Array(16),x=new Int32Array(4);for(;M.hasData;){const H=M.readFlag();if(!(0<=H&&H<=3))throw new i.FormatError("Unknown type6 flag");const s=b.length;for(let S=0,m=H!==0?8:12;S<m;S++)b.push(M.readCoordinate());const h=V.length;for(let S=0,m=H!==0?2:4;S<m;S++)V.push(M.readComponents());let F,N,U,g;switch(H){case 0:l[12]=s+3,l[13]=s+4,l[14]=s+5,l[15]=s+6,l[8]=s+2,l[11]=s+7,l[4]=s+1,l[7]=s+8,l[0]=s,l[1]=s+11,l[2]=s+10,l[3]=s+9,x[2]=h+1,x[3]=h+2,x[0]=h,x[1]=h+3;break;case 1:F=l[12],N=l[13],U=l[14],g=l[15],l[12]=g,l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=U,l[11]=s+3,l[4]=N,l[7]=s+4,l[0]=F,l[1]=s+7,l[2]=s+6,l[3]=s+5,F=x[2],N=x[3],x[2]=N,x[3]=h,x[0]=F,x[1]=h+1;break;case 2:F=l[15],N=l[11],l[12]=l[3],l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=l[7],l[11]=s+3,l[4]=N,l[7]=s+4,l[0]=F,l[1]=s+7,l[2]=s+6,l[3]=s+5,F=x[3],x[2]=x[1],x[3]=h,x[0]=F,x[1]=h+1;break;case 3:l[12]=l[0],l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=l[1],l[11]=s+3,l[4]=l[2],l[7]=s+4,l[0]=l[3],l[1]=s+7,l[2]=s+6,l[3]=s+5,x[2]=x[0],x[3]=h,x[0]=x[1],x[1]=h+1;break}l[5]=b.length,b.push([(-4*b[l[0]][0]-b[l[15]][0]+6*(b[l[4]][0]+b[l[1]][0])-2*(b[l[12]][0]+b[l[3]][0])+3*(b[l[13]][0]+b[l[7]][0]))/9,(-4*b[l[0]][1]-b[l[15]][1]+6*(b[l[4]][1]+b[l[1]][1])-2*(b[l[12]][1]+b[l[3]][1])+3*(b[l[13]][1]+b[l[7]][1]))/9]),l[6]=b.length,b.push([(-4*b[l[3]][0]-b[l[12]][0]+6*(b[l[2]][0]+b[l[7]][0])-2*(b[l[0]][0]+b[l[15]][0])+3*(b[l[4]][0]+b[l[14]][0]))/9,(-4*b[l[3]][1]-b[l[12]][1]+6*(b[l[2]][1]+b[l[7]][1])-2*(b[l[0]][1]+b[l[15]][1])+3*(b[l[4]][1]+b[l[14]][1]))/9]),l[9]=b.length,b.push([(-4*b[l[12]][0]-b[l[3]][0]+6*(b[l[8]][0]+b[l[13]][0])-2*(b[l[0]][0]+b[l[15]][0])+3*(b[l[11]][0]+b[l[1]][0]))/9,(-4*b[l[12]][1]-b[l[3]][1]+6*(b[l[8]][1]+b[l[13]][1])-2*(b[l[0]][1]+b[l[15]][1])+3*(b[l[11]][1]+b[l[1]][1]))/9]),l[10]=b.length,b.push([(-4*b[l[15]][0]-b[l[0]][0]+6*(b[l[11]][0]+b[l[14]][0])-2*(b[l[12]][0]+b[l[3]][0])+3*(b[l[2]][0]+b[l[8]][0]))/9,(-4*b[l[15]][1]-b[l[0]][1]+6*(b[l[11]][1]+b[l[14]][1])-2*(b[l[12]][1]+b[l[3]][1])+3*(b[l[2]][1]+b[l[8]][1]))/9]),this.figures.push({type:"patch",coords:new Int32Array(l),colors:new Int32Array(x)})}}_decodeType7Shading(M){const b=this.coords,V=this.colors,l=new Int32Array(16),x=new Int32Array(4);for(;M.hasData;){const H=M.readFlag();if(!(0<=H&&H<=3))throw new i.FormatError("Unknown type7 flag");const s=b.length;for(let S=0,m=H!==0?12:16;S<m;S++)b.push(M.readCoordinate());const h=V.length;for(let S=0,m=H!==0?2:4;S<m;S++)V.push(M.readComponents());let F,N,U,g;switch(H){case 0:l[12]=s+3,l[13]=s+4,l[14]=s+5,l[15]=s+6,l[8]=s+2,l[9]=s+13,l[10]=s+14,l[11]=s+7,l[4]=s+1,l[5]=s+12,l[6]=s+15,l[7]=s+8,l[0]=s,l[1]=s+11,l[2]=s+10,l[3]=s+9,x[2]=h+1,x[3]=h+2,x[0]=h,x[1]=h+3;break;case 1:F=l[12],N=l[13],U=l[14],g=l[15],l[12]=g,l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=U,l[9]=s+9,l[10]=s+10,l[11]=s+3,l[4]=N,l[5]=s+8,l[6]=s+11,l[7]=s+4,l[0]=F,l[1]=s+7,l[2]=s+6,l[3]=s+5,F=x[2],N=x[3],x[2]=N,x[3]=h,x[0]=F,x[1]=h+1;break;case 2:F=l[15],N=l[11],l[12]=l[3],l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=l[7],l[9]=s+9,l[10]=s+10,l[11]=s+3,l[4]=N,l[5]=s+8,l[6]=s+11,l[7]=s+4,l[0]=F,l[1]=s+7,l[2]=s+6,l[3]=s+5,F=x[3],x[2]=x[1],x[3]=h,x[0]=F,x[1]=h+1;break;case 3:l[12]=l[0],l[13]=s+0,l[14]=s+1,l[15]=s+2,l[8]=l[1],l[9]=s+9,l[10]=s+10,l[11]=s+3,l[4]=l[2],l[5]=s+8,l[6]=s+11,l[7]=s+4,l[0]=l[3],l[1]=s+7,l[2]=s+6,l[3]=s+5,x[2]=x[0],x[3]=h,x[0]=x[1],x[1]=h+1;break}this.figures.push({type:"patch",coords:new Int32Array(l),colors:new Int32Array(x)})}}_buildFigureFromPatch(M){const b=this.figures[M];(0,i.assert)(b.type==="patch","Unexpected patch mesh figure");const V=this.coords,l=this.colors,x=b.coords,H=b.colors,s=Math.min(V[x[0]][0],V[x[3]][0],V[x[12]][0],V[x[15]][0]),h=Math.min(V[x[0]][1],V[x[3]][1],V[x[12]][1],V[x[15]][1]),F=Math.max(V[x[0]][0],V[x[3]][0],V[x[12]][0],V[x[15]][0]),N=Math.max(V[x[0]][1],V[x[3]][1],V[x[12]][1],V[x[15]][1]);let U=Math.ceil((F-s)*R.TRIANGLE_DENSITY/(this.bounds[2]-this.bounds[0]));U=Math.max(R.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,Math.min(R.MAX_SPLIT_PATCH_CHUNKS_AMOUNT,U));let g=Math.ceil((N-h)*R.TRIANGLE_DENSITY/(this.bounds[3]-this.bounds[1]));g=Math.max(R.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,Math.min(R.MAX_SPLIT_PATCH_CHUNKS_AMOUNT,g));const S=U+1,m=new Int32Array((g+1)*S),r=new Int32Array((g+1)*S);let p=0;const c=new Uint8Array(3),u=new Uint8Array(3),q=l[H[0]],J=l[H[1]],G=l[H[2]],W=l[H[3]],ce=A(g),_=A(U);for(let ie=0;ie<=g;ie++){c[0]=(q[0]*(g-ie)+G[0]*ie)/g|0,c[1]=(q[1]*(g-ie)+G[1]*ie)/g|0,c[2]=(q[2]*(g-ie)+G[2]*ie)/g|0,u[0]=(J[0]*(g-ie)+W[0]*ie)/g|0,u[1]=(J[1]*(g-ie)+W[1]*ie)/g|0,u[2]=(J[2]*(g-ie)+W[2]*ie)/g|0;for(let L=0;L<=U;L++,p++){if((ie===0||ie===g)&&(L===0||L===U))continue;let oe=0,T=0,Q=0;for(let $=0;$<=3;$++)for(let Z=0;Z<=3;Z++,Q++){const te=ce[ie][$]*_[L][Z];oe+=V[x[Q]][0]*te,T+=V[x[Q]][1]*te}m[p]=V.length,V.push([oe,T]),r[p]=l.length;const v=new Uint8Array(3);v[0]=(c[0]*(U-L)+u[0]*L)/U|0,v[1]=(c[1]*(U-L)+u[1]*L)/U|0,v[2]=(c[2]*(U-L)+u[2]*L)/U|0,l.push(v)}}m[0]=x[0],r[0]=H[0],m[U]=x[3],r[U]=H[1],m[S*g]=x[12],r[S*g]=H[2],m[S*g+U]=x[15],r[S*g+U]=H[3],this.figures[M]={type:"lattice",coords:m,colors:r,verticesPerRow:S}}_updateBounds(){let M=this.coords[0][0],b=this.coords[0][1],V=M,l=b;for(let x=1,H=this.coords.length;x<H;x++){const s=this.coords[x][0],h=this.coords[x][1];M=M>s?s:M,b=b>h?h:b,V=V<s?s:V,l=l<h?h:l}this.bounds=[M,b,V,l]}_packData(){let M,b,V,l;const x=this.coords,H=new Float32Array(x.length*2);for(M=0,V=0,b=x.length;M<b;M++){const N=x[M];H[V++]=N[0],H[V++]=N[1]}this.coords=H;const s=this.colors,h=new Uint8Array(s.length*3);for(M=0,V=0,b=s.length;M<b;M++){const N=s[M];h[V++]=N[0],h[V++]=N[1],h[V++]=N[2]}this.colors=h;const F=this.figures;for(M=0,b=F.length;M<b;M++){const N=F[M],U=N.coords,g=N.colors;for(V=0,l=U.length;V<l;V++)U[V]*=2,g[V]*=3}}getIR(){return["Mesh",this.shadingType,this.coords,this.colors,this.figures,this.bounds,this.bbox,this.background]}};jt(R,"MIN_SPLIT_PATCH_CHUNKS_AMOUNT",3),jt(R,"MAX_SPLIT_PATCH_CHUNKS_AMOUNT",20),jt(R,"TRIANGLE_DENSITY",20);let I=R;class k extends K{getIR(){return["Dummy"]}}function y(E,M,b){const V=M.getArray("Matrix"),l=i.Util.normalizeRect(M.getArray("BBox")),x=M.get("XStep"),H=M.get("YStep"),s=M.get("PaintType"),h=M.get("TilingType");if(l[2]-l[0]===0||l[3]-l[1]===0)throw new i.FormatError(`Invalid getTilingPatternIR /BBox array: [${l}].`);return["TilingPattern",b,E,V,l,x,H,s,h]}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.getXfaFontDict=A,D.getXfaFontName=O;var i=se(52),w=se(4),P=se(53),e=se(54),t=se(55),o=se(56),K=se(3),j=se(38);const C=(0,K.getLookupTableFactory)(function(n){n["MyriadPro-Regular"]=n["PdfJS-Fallback-Regular"]={name:"LiberationSans-Regular",factors:t.MyriadProRegularFactors,baseWidths:e.LiberationSansRegularWidths,baseMapping:e.LiberationSansRegularMapping,metrics:t.MyriadProRegularMetrics},n["MyriadPro-Bold"]=n["PdfJS-Fallback-Bold"]={name:"LiberationSans-Bold",factors:t.MyriadProBoldFactors,baseWidths:e.LiberationSansBoldWidths,baseMapping:e.LiberationSansBoldMapping,metrics:t.MyriadProBoldMetrics},n["MyriadPro-It"]=n["MyriadPro-Italic"]=n["PdfJS-Fallback-Italic"]={name:"LiberationSans-Italic",factors:t.MyriadProItalicFactors,baseWidths:e.LiberationSansItalicWidths,baseMapping:e.LiberationSansItalicMapping,metrics:t.MyriadProItalicMetrics},n["MyriadPro-BoldIt"]=n["MyriadPro-BoldItalic"]=n["PdfJS-Fallback-BoldItalic"]={name:"LiberationSans-BoldItalic",factors:t.MyriadProBoldItalicFactors,baseWidths:e.LiberationSansBoldItalicWidths,baseMapping:e.LiberationSansBoldItalicMapping,metrics:t.MyriadProBoldItalicMetrics},n.ArialMT=n.Arial=n["Arial-Regular"]={name:"LiberationSans-Regular",baseWidths:e.LiberationSansRegularWidths,baseMapping:e.LiberationSansRegularMapping},n["Arial-BoldMT"]=n["Arial-Bold"]={name:"LiberationSans-Bold",baseWidths:e.LiberationSansBoldWidths,baseMapping:e.LiberationSansBoldMapping},n["Arial-ItalicMT"]=n["Arial-Italic"]={name:"LiberationSans-Italic",baseWidths:e.LiberationSansItalicWidths,baseMapping:e.LiberationSansItalicMapping},n["Arial-BoldItalicMT"]=n["Arial-BoldItalic"]={name:"LiberationSans-BoldItalic",baseWidths:e.LiberationSansBoldItalicWidths,baseMapping:e.LiberationSansBoldItalicMapping},n["Calibri-Regular"]={name:"LiberationSans-Regular",factors:i.CalibriRegularFactors,baseWidths:e.LiberationSansRegularWidths,baseMapping:e.LiberationSansRegularMapping,metrics:i.CalibriRegularMetrics},n["Calibri-Bold"]={name:"LiberationSans-Bold",factors:i.CalibriBoldFactors,baseWidths:e.LiberationSansBoldWidths,baseMapping:e.LiberationSansBoldMapping,metrics:i.CalibriBoldMetrics},n["Calibri-Italic"]={name:"LiberationSans-Italic",factors:i.CalibriItalicFactors,baseWidths:e.LiberationSansItalicWidths,baseMapping:e.LiberationSansItalicMapping,metrics:i.CalibriItalicMetrics},n["Calibri-BoldItalic"]={name:"LiberationSans-BoldItalic",factors:i.CalibriBoldItalicFactors,baseWidths:e.LiberationSansBoldItalicWidths,baseMapping:e.LiberationSansBoldItalicMapping,metrics:i.CalibriBoldItalicMetrics},n["Segoeui-Regular"]={name:"LiberationSans-Regular",factors:o.SegoeuiRegularFactors,baseWidths:e.LiberationSansRegularWidths,baseMapping:e.LiberationSansRegularMapping,metrics:o.SegoeuiRegularMetrics},n["Segoeui-Bold"]={name:"LiberationSans-Bold",factors:o.SegoeuiBoldFactors,baseWidths:e.LiberationSansBoldWidths,baseMapping:e.LiberationSansBoldMapping,metrics:o.SegoeuiBoldMetrics},n["Segoeui-Italic"]={name:"LiberationSans-Italic",factors:o.SegoeuiItalicFactors,baseWidths:e.LiberationSansItalicWidths,baseMapping:e.LiberationSansItalicMapping,metrics:o.SegoeuiItalicMetrics},n["Segoeui-BoldItalic"]={name:"LiberationSans-BoldItalic",factors:o.SegoeuiBoldItalicFactors,baseWidths:e.LiberationSansBoldItalicWidths,baseMapping:e.LiberationSansBoldItalicMapping,metrics:o.SegoeuiBoldItalicMetrics},n["Helvetica-Regular"]=n.Helvetica={name:"LiberationSans-Regular",factors:P.HelveticaRegularFactors,baseWidths:e.LiberationSansRegularWidths,baseMapping:e.LiberationSansRegularMapping,metrics:P.HelveticaRegularMetrics},n["Helvetica-Bold"]={name:"LiberationSans-Bold",factors:P.HelveticaBoldFactors,baseWidths:e.LiberationSansBoldWidths,baseMapping:e.LiberationSansBoldMapping,metrics:P.HelveticaBoldMetrics},n["Helvetica-Italic"]={name:"LiberationSans-Italic",factors:P.HelveticaItalicFactors,baseWidths:e.LiberationSansItalicWidths,baseMapping:e.LiberationSansItalicMapping,metrics:P.HelveticaItalicMetrics},n["Helvetica-BoldItalic"]={name:"LiberationSans-BoldItalic",factors:P.HelveticaBoldItalicFactors,baseWidths:e.LiberationSansBoldItalicWidths,baseMapping:e.LiberationSansBoldItalicMapping,metrics:P.HelveticaBoldItalicMetrics}});function O(n){const I=(0,j.normalizeFontName)(n);return C()[I]}function d(n){const I=O(n);if(!I)return null;const{baseWidths:k,baseMapping:y,factors:f}=I,R=f?k.map((V,l)=>V*f[l]):k;let E=-2,M;const b=[];for(const[V,l]of y.map((x,H)=>[x,H]).sort(([x],[H])=>x-H))V!==-1&&(V===E+1?(M.push(R[l]),E+=1):(E=V,M=[R[l]],b.push(V,M)));return b}function A(n){const I=d(n),k=new w.Dict(null);k.set("BaseFont",w.Name.get(n)),k.set("Type",w.Name.get("Font")),k.set("Subtype",w.Name.get("CIDFontType2")),k.set("Encoding",w.Name.get("Identity-H")),k.set("CIDToGIDMap",w.Name.get("Identity")),k.set("W",I),k.set("FirstChar",I[0]),k.set("LastChar",I.at(-2)+I.at(-1).length-1);const y=new w.Dict(null);k.set("FontDescriptor",y);const f=new w.Dict(null);return f.set("Ordering","Identity"),f.set("Registry","Adobe"),f.set("Supplement",0),k.set("CIDSystemInfo",f),k}},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.CalibriRegularMetrics=D.CalibriRegularFactors=D.CalibriItalicMetrics=D.CalibriItalicFactors=D.CalibriBoldMetrics=D.CalibriBoldItalicMetrics=D.CalibriBoldItalicFactors=D.CalibriBoldFactors=void 0;const se=[1.3877,1,1,1,.97801,.92482,.89552,.91133,.81988,.97566,.98152,.93548,.93548,1.2798,.85284,.92794,1,.96134,1.54657,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.82845,.82845,.85284,.85284,.85284,.75859,.92138,.83908,.7762,.73293,.87289,.73133,.7514,.81921,.87356,.95958,.59526,.75727,.69225,1.04924,.9121,.86943,.79795,.88198,.77958,.70864,.81055,.90399,.88653,.96017,.82577,.77892,.78257,.97507,1.54657,.97507,.85284,.89552,.90176,.88762,.8785,.75241,.8785,.90518,.95015,.77618,.8785,.88401,.91916,.86304,.88401,.91488,.8785,.8801,.8785,.8785,.91343,.7173,1.04106,.8785,.85075,.95794,.82616,.85162,.79492,.88331,1.69808,.88331,.85284,.97801,.89552,.91133,.89552,.91133,1.7801,.89552,1.24487,1.13254,1.12401,.96839,.85284,.68787,.70645,.85592,.90747,1.01466,1.0088,.90323,1,1.07463,1,.91056,.75806,1.19118,.96839,.78864,.82845,.84133,.75859,.83908,.83908,.83908,.83908,.83908,.83908,.77539,.73293,.73133,.73133,.73133,.73133,.95958,.95958,.95958,.95958,.88506,.9121,.86943,.86943,.86943,.86943,.86943,.85284,.87508,.90399,.90399,.90399,.90399,.77892,.79795,.90807,.88762,.88762,.88762,.88762,.88762,.88762,.8715,.75241,.90518,.90518,.90518,.90518,.88401,.88401,.88401,.88401,.8785,.8785,.8801,.8801,.8801,.8801,.8801,.90747,.89049,.8785,.8785,.8785,.8785,.85162,.8785,.85162,.83908,.88762,.83908,.88762,.83908,.88762,.73293,.75241,.73293,.75241,.73293,.75241,.73293,.75241,.87289,.83016,.88506,.93125,.73133,.90518,.73133,.90518,.73133,.90518,.73133,.90518,.73133,.90518,.81921,.77618,.81921,.77618,.81921,.77618,1,1,.87356,.8785,.91075,.89608,.95958,.88401,.95958,.88401,.95958,.88401,.95958,.88401,.95958,.88401,.76229,.90167,.59526,.91916,1,1,.86304,.69225,.88401,1,1,.70424,.79468,.91926,.88175,.70823,.94903,.9121,.8785,1,1,.9121,.8785,.87802,.88656,.8785,.86943,.8801,.86943,.8801,.86943,.8801,.87402,.89291,.77958,.91343,1,1,.77958,.91343,.70864,.7173,.70864,.7173,.70864,.7173,.70864,.7173,1,1,.81055,.75841,.81055,1.06452,.90399,.8785,.90399,.8785,.90399,.8785,.90399,.8785,.90399,.8785,.90399,.8785,.96017,.95794,.77892,.85162,.77892,.78257,.79492,.78257,.79492,.78257,.79492,.9297,.56892,.83908,.88762,.77539,.8715,.87508,.89049,1,1,.81055,1.04106,1.20528,1.20528,1,1.15543,.70674,.98387,.94721,1.33431,1.45894,.95161,1.06303,.83908,.80352,.57184,.6965,.56289,.82001,.56029,.81235,1.02988,.83908,.7762,.68156,.80367,.73133,.78257,.87356,.86943,.95958,.75727,.89019,1.04924,.9121,.7648,.86943,.87356,.79795,.78275,.81055,.77892,.9762,.82577,.99819,.84896,.95958,.77892,.96108,1.01407,.89049,1.02988,.94211,.96108,.8936,.84021,.87842,.96399,.79109,.89049,1.00813,1.02988,.86077,.87445,.92099,.84723,.86513,.8801,.75638,.85714,.78216,.79586,.87965,.94211,.97747,.78287,.97926,.84971,1.02988,.94211,.8801,.94211,.84971,.73133,1,1,1,1,1,1,1,1,1,1,1,1,.90264,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.90518,1,1,1,1,1,1,1,1,1,1,1,1,.90548,1,1,1,1,1,1,.96017,.95794,.96017,.95794,.96017,.95794,.77892,.85162,1,1,.89552,.90527,1,.90363,.92794,.92794,.92794,.92794,.87012,.87012,.87012,.89552,.89552,1.42259,.71143,1.06152,1,1,1.03372,1.03372,.97171,1.4956,2.2807,.93835,.83406,.91133,.84107,.91133,1,1,1,.72021,1,1.23108,.83489,.88525,.88525,.81499,.90527,1.81055,.90527,1.81055,1.31006,1.53711,.94434,1.08696,1,.95018,.77192,.85284,.90747,1.17534,.69825,.9716,1.37077,.90747,.90747,.85356,.90747,.90747,1.44947,.85284,.8941,.8941,.70572,.8,.70572,.70572,.70572,.70572,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.99862,.99862,1,1,1,1,1,1.08004,.91027,1,1,1,.99862,1,1,1,1,1,1,1,1,1,1,1,1,.90727,.90727,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.CalibriBoldFactors=se;const i={lineHeight:1.2207,lineGap:.2207};D.CalibriBoldMetrics=i;const w=[1.3877,1,1,1,.97801,.92482,.89552,.91133,.81988,.97566,.98152,.93548,.93548,1.2798,.85284,.92794,1,.96134,1.56239,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.82845,.82845,.85284,.85284,.85284,.75859,.92138,.83908,.7762,.71805,.87289,.73133,.7514,.81921,.87356,.95958,.59526,.75727,.69225,1.04924,.90872,.85938,.79795,.87068,.77958,.69766,.81055,.90399,.88653,.96068,.82577,.77892,.78257,.97507,1.529,.97507,.85284,.89552,.90176,.94908,.86411,.74012,.86411,.88323,.95015,.86411,.86331,.88401,.91916,.86304,.88401,.9039,.86331,.86331,.86411,.86411,.90464,.70852,1.04106,.86331,.84372,.95794,.82616,.84548,.79492,.88331,1.69808,.88331,.85284,.97801,.89552,.91133,.89552,.91133,1.7801,.89552,1.24487,1.13254,1.19129,.96839,.85284,.68787,.70645,.85592,.90747,1.01466,1.0088,.90323,1,1.07463,1,.91056,.75806,1.19118,.96839,.78864,.82845,.84133,.75859,.83908,.83908,.83908,.83908,.83908,.83908,.77539,.71805,.73133,.73133,.73133,.73133,.95958,.95958,.95958,.95958,.88506,.90872,.85938,.85938,.85938,.85938,.85938,.85284,.87068,.90399,.90399,.90399,.90399,.77892,.79795,.90807,.94908,.94908,.94908,.94908,.94908,.94908,.85887,.74012,.88323,.88323,.88323,.88323,.88401,.88401,.88401,.88401,.8785,.86331,.86331,.86331,.86331,.86331,.86331,.90747,.89049,.86331,.86331,.86331,.86331,.84548,.86411,.84548,.83908,.94908,.83908,.94908,.83908,.94908,.71805,.74012,.71805,.74012,.71805,.74012,.71805,.74012,.87289,.79538,.88506,.92726,.73133,.88323,.73133,.88323,.73133,.88323,.73133,.88323,.73133,.88323,.81921,.86411,.81921,.86411,.81921,.86411,1,1,.87356,.86331,.91075,.8777,.95958,.88401,.95958,.88401,.95958,.88401,.95958,.88401,.95958,.88401,.76467,.90167,.59526,.91916,1,1,.86304,.69225,.88401,1,1,.70424,.77312,.91926,.88175,.70823,.94903,.90872,.86331,1,1,.90872,.86331,.86906,.88116,.86331,.85938,.86331,.85938,.86331,.85938,.86331,.87402,.86549,.77958,.90464,1,1,.77958,.90464,.69766,.70852,.69766,.70852,.69766,.70852,.69766,.70852,1,1,.81055,.75841,.81055,1.06452,.90399,.86331,.90399,.86331,.90399,.86331,.90399,.86331,.90399,.86331,.90399,.86331,.96068,.95794,.77892,.84548,.77892,.78257,.79492,.78257,.79492,.78257,.79492,.9297,.56892,.83908,.94908,.77539,.85887,.87068,.89049,1,1,.81055,1.04106,1.20528,1.20528,1,1.15543,.70088,.98387,.94721,1.33431,1.45894,.95161,1.48387,.83908,.80352,.57118,.6965,.56347,.79179,.55853,.80346,1.02988,.83908,.7762,.67174,.86036,.73133,.78257,.87356,.86441,.95958,.75727,.89019,1.04924,.90872,.74889,.85938,.87891,.79795,.7957,.81055,.77892,.97447,.82577,.97466,.87179,.95958,.77892,.94252,.95612,.8753,1.02988,.92733,.94252,.87411,.84021,.8728,.95612,.74081,.8753,1.02189,1.02988,.84814,.87445,.91822,.84723,.85668,.86331,.81344,.87581,.76422,.82046,.96057,.92733,.99375,.78022,.95452,.86015,1.02988,.92733,.86331,.92733,.86015,.73133,1,1,1,1,1,1,1,1,1,1,1,1,.90631,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.88323,1,1,1,1,1,1,1,1,1,1,1,1,.85174,1,1,1,1,1,1,.96068,.95794,.96068,.95794,.96068,.95794,.77892,.84548,1,1,.89552,.90527,1,.90363,.92794,.92794,.92794,.89807,.87012,.87012,.87012,.89552,.89552,1.42259,.71094,1.06152,1,1,1.03372,1.03372,.97171,1.4956,2.2807,.92972,.83406,.91133,.83326,.91133,1,1,1,.72021,1,1.23108,.83489,.88525,.88525,.81499,.90616,1.81055,.90527,1.81055,1.3107,1.53711,.94434,1.08696,1,.95018,.77192,.85284,.90747,1.17534,.69825,.9716,1.37077,.90747,.90747,.85356,.90747,.90747,1.44947,.85284,.8941,.8941,.70572,.8,.70572,.70572,.70572,.70572,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.99862,.99862,1,1,1,1,1,1.08004,.91027,1,1,1,.99862,1,1,1,1,1,1,1,1,1,1,1,1,.90727,.90727,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.CalibriBoldItalicFactors=w;const P={lineHeight:1.2207,lineGap:.2207};D.CalibriBoldItalicMetrics=P;const e=[1.3877,1,1,1,1.17223,1.1293,.89552,.91133,.80395,1.02269,1.15601,.91056,.91056,1.2798,.85284,.89807,1,.90861,1.39543,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.96309,.96309,.85284,.85284,.85284,.83319,.88071,.8675,.81552,.72346,.85193,.73206,.7522,.81105,.86275,.90685,.6377,.77892,.75593,1.02638,.89249,.84118,.77452,.85374,.75186,.67789,.79776,.88844,.85066,.94309,.77818,.7306,.76659,1.10369,1.38313,1.10369,1.06139,.89552,.8739,.9245,.9245,.83203,.9245,.85865,1.09842,.9245,.9245,1.03297,1.07692,.90918,1.03297,.94959,.9245,.92274,.9245,.9245,1.02933,.77832,1.20562,.9245,.8916,.98986,.86621,.89453,.79004,.94152,1.77256,.94152,.85284,.97801,.89552,.91133,.89552,.91133,1.91729,.89552,1.17889,1.13254,1.16359,.92098,.85284,.68787,.71353,.84737,.90747,1.0088,1.0044,.87683,1,1.09091,1,.92229,.739,1.15642,.92098,.76288,.80504,.80972,.75859,.8675,.8675,.8675,.8675,.8675,.8675,.76318,.72346,.73206,.73206,.73206,.73206,.90685,.90685,.90685,.90685,.86477,.89249,.84118,.84118,.84118,.84118,.84118,.85284,.84557,.88844,.88844,.88844,.88844,.7306,.77452,.86331,.9245,.9245,.9245,.9245,.9245,.9245,.84843,.83203,.85865,.85865,.85865,.85865,.82601,.82601,.82601,.82601,.94469,.9245,.92274,.92274,.92274,.92274,.92274,.90747,.86651,.9245,.9245,.9245,.9245,.89453,.9245,.89453,.8675,.9245,.8675,.9245,.8675,.9245,.72346,.83203,.72346,.83203,.72346,.83203,.72346,.83203,.85193,.8875,.86477,.99034,.73206,.85865,.73206,.85865,.73206,.85865,.73206,.85865,.73206,.85865,.81105,.9245,.81105,.9245,.81105,.9245,1,1,.86275,.9245,.90872,.93591,.90685,.82601,.90685,.82601,.90685,.82601,.90685,1.03297,.90685,.82601,.77896,1.05611,.6377,1.07692,1,1,.90918,.75593,1.03297,1,1,.76032,.9375,.98156,.93407,.77261,1.11429,.89249,.9245,1,1,.89249,.9245,.92534,.86698,.9245,.84118,.92274,.84118,.92274,.84118,.92274,.8667,.86291,.75186,1.02933,1,1,.75186,1.02933,.67789,.77832,.67789,.77832,.67789,.77832,.67789,.77832,1,1,.79776,.97655,.79776,1.23023,.88844,.9245,.88844,.9245,.88844,.9245,.88844,.9245,.88844,.9245,.88844,.9245,.94309,.98986,.7306,.89453,.7306,.76659,.79004,.76659,.79004,.76659,.79004,1.09231,.54873,.8675,.9245,.76318,.84843,.84557,.86651,1,1,.79776,1.20562,1.18622,1.18622,1,1.1437,.67009,.96334,.93695,1.35191,1.40909,.95161,1.48387,.8675,.90861,.6192,.7363,.64824,.82411,.56321,.85696,1.23516,.8675,.81552,.7286,.84134,.73206,.76659,.86275,.84369,.90685,.77892,.85871,1.02638,.89249,.75828,.84118,.85984,.77452,.76466,.79776,.7306,.90782,.77818,.903,.87291,.90685,.7306,.99058,1.03667,.94635,1.23516,.9849,.99058,.92393,.8916,.942,1.03667,.75026,.94635,1.0297,1.23516,.90918,.94048,.98217,.89746,.84153,.92274,.82507,.88832,.84438,.88178,1.03525,.9849,1.00225,.78086,.97248,.89404,1.23516,.9849,.92274,.9849,.89404,.73206,1,1,1,1,1,1,1,1,1,1,1,1,.89693,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.85865,1,1,1,1,1,1,1,1,1,1,1,1,.90933,1,1,1,1,1,1,.94309,.98986,.94309,.98986,.94309,.98986,.7306,.89453,1,1,.89552,.90527,1,.90186,1.12308,1.12308,1.12308,1.12308,1.2566,1.2566,1.2566,.89552,.89552,1.42259,.68994,1.03809,1,1,1.0176,1.0176,1.11523,1.4956,2.01462,.97858,.82616,.91133,.83437,.91133,1,1,1,.70508,1,1.23108,.79801,.84426,.84426,.774,.90572,1.81055,.90749,1.81055,1.28809,1.55469,.94434,1.07806,1,.97094,.7589,.85284,.90747,1.19658,.69825,.97622,1.33512,.90747,.90747,.85284,.90747,.90747,1.44947,.85284,.8941,.8941,.70572,.8,.70572,.70572,.70572,.70572,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.99862,.99862,1,1,1,1,1,1.0336,.91027,1,1,1,.99862,1,1,1,1,1,1,1,1,1,1,1,1,1.05859,1.05859,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.CalibriItalicFactors=e;const t={lineHeight:1.2207,lineGap:.2207};D.CalibriItalicMetrics=t;const o=[1.3877,1,1,1,1.17223,1.1293,.89552,.91133,.80395,1.02269,1.15601,.91056,.91056,1.2798,.85284,.89807,1,.90861,1.39016,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.91133,.96309,.96309,.85284,.85284,.85284,.83319,.88071,.8675,.81552,.73834,.85193,.73206,.7522,.81105,.86275,.90685,.6377,.77892,.75593,1.02638,.89385,.85122,.77452,.86503,.75186,.68887,.79776,.88844,.85066,.94258,.77818,.7306,.76659,1.10369,1.39016,1.10369,1.06139,.89552,.8739,.86128,.94469,.8457,.94469,.89464,1.09842,.84636,.94469,1.03297,1.07692,.90918,1.03297,.95897,.94469,.9482,.94469,.94469,1.04692,.78223,1.20562,.94469,.90332,.98986,.86621,.90527,.79004,.94152,1.77256,.94152,.85284,.97801,.89552,.91133,.89552,.91133,1.91729,.89552,1.17889,1.13254,1.08707,.92098,.85284,.68787,.71353,.84737,.90747,1.0088,1.0044,.87683,1,1.09091,1,.92229,.739,1.15642,.92098,.76288,.80504,.80972,.75859,.8675,.8675,.8675,.8675,.8675,.8675,.76318,.73834,.73206,.73206,.73206,.73206,.90685,.90685,.90685,.90685,.86477,.89385,.85122,.85122,.85122,.85122,.85122,.85284,.85311,.88844,.88844,.88844,.88844,.7306,.77452,.86331,.86128,.86128,.86128,.86128,.86128,.86128,.8693,.8457,.89464,.89464,.89464,.89464,.82601,.82601,.82601,.82601,.94469,.94469,.9482,.9482,.9482,.9482,.9482,.90747,.86651,.94469,.94469,.94469,.94469,.90527,.94469,.90527,.8675,.86128,.8675,.86128,.8675,.86128,.73834,.8457,.73834,.8457,.73834,.8457,.73834,.8457,.85193,.92454,.86477,.9921,.73206,.89464,.73206,.89464,.73206,.89464,.73206,.89464,.73206,.89464,.81105,.84636,.81105,.84636,.81105,.84636,1,1,.86275,.94469,.90872,.95786,.90685,.82601,.90685,.82601,.90685,.82601,.90685,1.03297,.90685,.82601,.77741,1.05611,.6377,1.07692,1,1,.90918,.75593,1.03297,1,1,.76032,.90452,.98156,1.11842,.77261,1.11429,.89385,.94469,1,1,.89385,.94469,.95877,.86901,.94469,.85122,.9482,.85122,.9482,.85122,.9482,.8667,.90016,.75186,1.04692,1,1,.75186,1.04692,.68887,.78223,.68887,.78223,.68887,.78223,.68887,.78223,1,1,.79776,.92188,.79776,1.23023,.88844,.94469,.88844,.94469,.88844,.94469,.88844,.94469,.88844,.94469,.88844,.94469,.94258,.98986,.7306,.90527,.7306,.76659,.79004,.76659,.79004,.76659,.79004,1.09231,.54873,.8675,.86128,.76318,.8693,.85311,.86651,1,1,.79776,1.20562,1.18622,1.18622,1,1.1437,.67742,.96334,.93695,1.35191,1.40909,.95161,1.48387,.86686,.90861,.62267,.74359,.65649,.85498,.56963,.88254,1.23516,.8675,.81552,.75443,.84503,.73206,.76659,.86275,.85122,.90685,.77892,.85746,1.02638,.89385,.75657,.85122,.86275,.77452,.74171,.79776,.7306,.95165,.77818,.89772,.88831,.90685,.7306,.98142,1.02191,.96576,1.23516,.99018,.98142,.9236,.89258,.94035,1.02191,.78848,.96576,.9561,1.23516,.90918,.92578,.95424,.89746,.83969,.9482,.80113,.89442,.85208,.86155,.98022,.99018,1.00452,.81209,.99247,.89181,1.23516,.99018,.9482,.99018,.89181,.73206,1,1,1,1,1,1,1,1,1,1,1,1,.88844,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.89464,1,1,1,1,1,1,1,1,1,1,1,1,.96766,1,1,1,1,1,1,.94258,.98986,.94258,.98986,.94258,.98986,.7306,.90527,1,1,.89552,.90527,1,.90186,1.12308,1.12308,1.12308,1.12308,1.2566,1.2566,1.2566,.89552,.89552,1.42259,.69043,1.03809,1,1,1.0176,1.0176,1.11523,1.4956,2.01462,.99331,.82616,.91133,.84286,.91133,1,1,1,.70508,1,1.23108,.79801,.84426,.84426,.774,.90527,1.81055,.90527,1.81055,1.28809,1.55469,.94434,1.07806,1,.97094,.7589,.85284,.90747,1.19658,.69825,.97622,1.33512,.90747,.90747,.85356,.90747,.90747,1.44947,.85284,.8941,.8941,.70572,.8,.70572,.70572,.70572,.70572,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.99862,.99862,1,1,1,1,1,1.0336,.91027,1,1,1,.99862,1,1,1,1,1,1,1,1,1,1,1,1,1.05859,1.05859,1,1,1,1.07185,.99413,.96334,1.08065,1,1,1,1,1,1,1,1,1,1,1];D.CalibriRegularFactors=o;const K={lineHeight:1.2207,lineGap:.2207};D.CalibriRegularMetrics=K},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.HelveticaRegularMetrics=D.HelveticaRegularFactors=D.HelveticaItalicMetrics=D.HelveticaItalicFactors=D.HelveticaBoldMetrics=D.HelveticaBoldItalicMetrics=D.HelveticaBoldItalicFactors=D.HelveticaBoldFactors=void 0;const se=[.76116,1,1,1.0006,.99998,.99974,.99973,.99973,.99982,.99977,1.00087,.99998,.99998,.99959,1.00003,1.0006,.99998,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99998,1,1.00003,1.00003,1.00003,1.00026,.9999,.99977,.99977,.99977,.99977,1.00001,1.00026,1.00022,.99977,1.0006,.99973,.99977,1.00026,.99999,.99977,1.00022,1.00001,1.00022,.99977,1.00001,1.00026,.99977,1.00001,1.00016,1.00001,1.00001,1.00026,.99998,1.0006,.99998,1.00003,.99973,.99998,.99973,1.00026,.99973,1.00026,.99973,.99998,1.00026,1.00026,1.0006,1.0006,.99973,1.0006,.99982,1.00026,1.00026,1.00026,1.00026,.99959,.99973,.99998,1.00026,.99973,1.00022,.99973,.99973,1,.99959,1.00077,.99959,1.00003,.99998,.99973,.99973,.99973,.99973,1.00077,.99973,.99998,1.00025,.99968,.99973,1.00003,1.00025,.60299,1.00024,1.06409,1,1,.99998,1,.99973,1.0006,.99998,1,.99936,.99973,1.00002,1.00002,1.00002,1.00026,.99977,.99977,.99977,.99977,.99977,.99977,1,.99977,1.00001,1.00001,1.00001,1.00001,1.0006,1.0006,1.0006,1.0006,.99977,.99977,1.00022,1.00022,1.00022,1.00022,1.00022,1.00003,1.00022,.99977,.99977,.99977,.99977,1.00001,1.00001,1.00026,.99973,.99973,.99973,.99973,.99973,.99973,.99982,.99973,.99973,.99973,.99973,.99973,1.0006,1.0006,1.0006,1.0006,1.00026,1.00026,1.00026,1.00026,1.00026,1.00026,1.00026,1.06409,1.00026,1.00026,1.00026,1.00026,1.00026,.99973,1.00026,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,1.03374,.99977,1.00026,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,.99977,1.00026,.99977,1.00026,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.00042,.99973,.99973,1.0006,.99977,.99973,.99973,1.00026,1.0006,1.00026,1.0006,1.00026,1.03828,1.00026,.99999,1.00026,1.0006,.99977,1.00026,.99977,1.00026,.99977,1.00026,.9993,.9998,1.00026,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,1,1.00016,.99977,.99959,.99977,.99959,.99977,.99959,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00026,.99998,1.00026,.8121,1.00026,.99998,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,1.00016,1.00022,1.00001,.99973,1.00001,1.00026,1,1.00026,1,1.00026,1,1.0006,.99973,.99977,.99973,1,.99982,1.00022,1.00026,1.00001,.99973,1.00026,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,1.00034,.99977,1,.99997,1.00026,1.00078,1.00036,.99973,1.00013,1.0006,.99977,.99977,.99988,.85148,1.00001,1.00026,.99977,1.00022,1.0006,.99977,1.00001,.99999,.99977,1.00069,1.00022,.99977,1.00001,.99984,1.00026,1.00001,1.00024,1.00001,.9999,1,1.0006,1.00001,1.00041,.99962,1.00026,1.0006,.99995,1.00041,.99942,.99973,.99927,1.00082,.99902,1.00026,1.00087,1.0006,1.00069,.99973,.99867,.99973,.9993,1.00026,1.00049,1.00056,1,.99988,.99935,.99995,.99954,1.00055,.99945,1.00032,1.0006,.99995,1.00026,.99995,1.00032,1.00001,1.00008,.99971,1.00019,.9994,1.00001,1.0006,1.00044,.99973,1.00023,1.00047,1,.99942,.99561,.99989,1.00035,.99977,1.00035,.99977,1.00019,.99944,1.00001,1.00021,.99926,1.00035,1.00035,.99942,1.00048,.99999,.99977,1.00022,1.00035,1.00001,.99977,1.00026,.99989,1.00057,1.00001,.99936,1.00052,1.00012,.99996,1.00043,1,1.00035,.9994,.99976,1.00035,.99973,1.00052,1.00041,1.00119,1.00037,.99973,1.00002,.99986,1.00041,1.00041,.99902,.9996,1.00034,.99999,1.00026,.99999,1.00026,.99973,1.00052,.99973,1,.99973,1.00041,1.00075,.9994,1.0003,.99999,1,1.00041,.99955,1,.99915,.99973,.99973,1.00026,1.00119,.99955,.99973,1.0006,.99911,1.0006,1.00026,.99972,1.00026,.99902,1.00041,.99973,.99999,1,1,1.00038,1.0005,1.00016,1.00022,1.00016,1.00022,1.00016,1.00022,1.00001,.99973,1,1,.99973,1,1,.99955,1.0006,1.0006,1.0006,1.0006,1,1,1,.99973,.99973,.99972,1,1,1.00106,.99999,.99998,.99998,.99999,.99998,1.66475,1,.99973,.99973,1.00023,.99973,.99971,1.00047,1.00023,1,.99991,.99984,1.00002,1.00002,1.00002,1.00002,1,1,1,1,1,1,1,.99972,1,1.20985,1.39713,1.00003,1.00031,1.00015,1,.99561,1.00027,1.00031,1.00031,.99915,1.00031,1.00031,.99999,1.00003,.99999,.99999,1.41144,1.6,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.40579,1.40579,1.36625,.99999,1,.99861,.99861,1,1.00026,1.00026,1.00026,1.00026,.99972,.99999,.99999,.99999,.99999,1.40483,1,.99977,1.00054,1,1,.99953,.99962,1.00042,.9995,1,1,1,1,1,1,1,1,.99998,.99998,.99998,.99998,1,1,1,1,1,1,1,1,1,1,1];D.HelveticaBoldFactors=se;const i={lineHeight:1.2,lineGap:.2};D.HelveticaBoldMetrics=i;const w=[.76116,1,1,1.0006,.99998,.99974,.99973,.99973,.99982,.99977,1.00087,.99998,.99998,.99959,1.00003,1.0006,.99998,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99998,1,1.00003,1.00003,1.00003,1.00026,.9999,.99977,.99977,.99977,.99977,1.00001,1.00026,1.00022,.99977,1.0006,.99973,.99977,1.00026,.99999,.99977,1.00022,1.00001,1.00022,.99977,1.00001,1.00026,.99977,1.00001,1.00016,1.00001,1.00001,1.00026,.99998,1.0006,.99998,1.00003,.99973,.99998,.99973,1.00026,.99973,1.00026,.99973,.99998,1.00026,1.00026,1.0006,1.0006,.99973,1.0006,.99982,1.00026,1.00026,1.00026,1.00026,.99959,.99973,.99998,1.00026,.99973,1.00022,.99973,.99973,1,.99959,1.00077,.99959,1.00003,.99998,.99973,.99973,.99973,.99973,1.00077,.99973,.99998,1.00025,.99968,.99973,1.00003,1.00025,.60299,1.00024,1.06409,1,1,.99998,1,.99973,1.0006,.99998,1,.99936,.99973,1.00002,1.00002,1.00002,1.00026,.99977,.99977,.99977,.99977,.99977,.99977,1,.99977,1.00001,1.00001,1.00001,1.00001,1.0006,1.0006,1.0006,1.0006,.99977,.99977,1.00022,1.00022,1.00022,1.00022,1.00022,1.00003,1.00022,.99977,.99977,.99977,.99977,1.00001,1.00001,1.00026,.99973,.99973,.99973,.99973,.99973,.99973,.99982,.99973,.99973,.99973,.99973,.99973,1.0006,1.0006,1.0006,1.0006,1.00026,1.00026,1.00026,1.00026,1.00026,1.00026,1.00026,1.06409,1.00026,1.00026,1.00026,1.00026,1.00026,.99973,1.00026,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,1.0044,.99977,1.00026,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,.99977,1.00026,.99977,1.00026,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,.99971,.99973,.99973,1.0006,.99977,.99973,.99973,1.00026,1.0006,1.00026,1.0006,1.00026,1.01011,1.00026,.99999,1.00026,1.0006,.99977,1.00026,.99977,1.00026,.99977,1.00026,.9993,.9998,1.00026,1.00022,1.00026,1.00022,1.00026,1.00022,1.00026,1,1.00016,.99977,.99959,.99977,.99959,.99977,.99959,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00026,.99998,1.00026,.8121,1.00026,.99998,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,.99977,1.00026,1.00016,1.00022,1.00001,.99973,1.00001,1.00026,1,1.00026,1,1.00026,1,1.0006,.99973,.99977,.99973,1,.99982,1.00022,1.00026,1.00001,.99973,1.00026,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99977,1,1,1.00026,.99969,.99972,.99981,.9998,1.0006,.99977,.99977,1.00022,.91155,1.00001,1.00026,.99977,1.00022,1.0006,.99977,1.00001,.99999,.99977,.99966,1.00022,1.00032,1.00001,.99944,1.00026,1.00001,.99968,1.00001,1.00047,1,1.0006,1.00001,.99981,1.00101,1.00026,1.0006,.99948,.99981,1.00064,.99973,.99942,1.00101,1.00061,1.00026,1.00069,1.0006,1.00014,.99973,1.01322,.99973,1.00065,1.00026,1.00012,.99923,1,1.00064,1.00076,.99948,1.00055,1.00063,1.00007,.99943,1.0006,.99948,1.00026,.99948,.99943,1.00001,1.00001,1.00029,1.00038,1.00035,1.00001,1.0006,1.0006,.99973,.99978,1.00001,1.00057,.99989,.99967,.99964,.99967,.99977,.99999,.99977,1.00038,.99977,1.00001,.99973,1.00066,.99967,.99967,1.00041,.99998,.99999,.99977,1.00022,.99967,1.00001,.99977,1.00026,.99964,1.00031,1.00001,.99999,.99999,1,1.00023,1,1,.99999,1.00035,1.00001,.99999,.99973,.99977,.99999,1.00058,.99973,.99973,.99955,.9995,1.00026,1.00026,1.00032,.99989,1.00034,.99999,1.00026,1.00026,1.00026,.99973,.45998,.99973,1.00026,.99973,1.00001,.99999,.99982,.99994,.99996,1,1.00042,1.00044,1.00029,1.00023,.99973,.99973,1.00026,.99949,1.00002,.99973,1.0006,1.0006,1.0006,.99975,1.00026,1.00026,1.00032,.98685,.99973,1.00026,1,1,.99966,1.00044,1.00016,1.00022,1.00016,1.00022,1.00016,1.00022,1.00001,.99973,1,1,.99973,1,1,.99955,1.0006,1.0006,1.0006,1.0006,1,1,1,.99973,.99973,.99972,1,1,1.00106,.99999,.99998,.99998,.99999,.99998,1.66475,1,.99973,.99973,1,.99973,.99971,.99978,1,1,.99991,.99984,1.00002,1.00002,1.00002,1.00002,1.00098,1,1,1,1.00049,1,1,.99972,1,1.20985,1.39713,1.00003,1.00031,1.00015,1,.99561,1.00027,1.00031,1.00031,.99915,1.00031,1.00031,.99999,1.00003,.99999,.99999,1.41144,1.6,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.40579,1.40579,1.36625,.99999,1,.99861,.99861,1,1.00026,1.00026,1.00026,1.00026,.99972,.99999,.99999,.99999,.99999,1.40483,1,.99977,1.00054,1,1,.99953,.99962,1.00042,.9995,1,1,1,1,1,1,1,1,.99998,.99998,.99998,.99998,1,1,1,1,1,1,1,1,1,1,1];D.HelveticaBoldItalicFactors=w;const P={lineHeight:1.35,lineGap:.2};D.HelveticaBoldItalicMetrics=P;const e=[.76116,1,1,1.0006,1.0006,1.00006,.99973,.99973,.99982,1.00001,1.00043,.99998,.99998,.99959,1.00003,1.0006,.99998,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,1.0006,1,1.00003,1.00003,1.00003,.99973,.99987,1.00001,1.00001,.99977,.99977,1.00001,1.00026,1.00022,.99977,1.0006,1,1.00001,.99973,.99999,.99977,1.00022,1.00001,1.00022,.99977,1.00001,1.00026,.99977,1.00001,1.00016,1.00001,1.00001,1.00026,1.0006,1.0006,1.0006,.99949,.99973,.99998,.99973,.99973,1,.99973,.99973,1.0006,.99973,.99973,.99924,.99924,1,.99924,.99999,.99973,.99973,.99973,.99973,.99998,1,1.0006,.99973,1,.99977,1,1,1,1.00005,1.0009,1.00005,1.00003,.99998,.99973,.99973,.99973,.99973,1.0009,.99973,.99998,1.00025,.99968,.99973,1.00003,1.00025,.60299,1.00024,1.06409,1,1,.99998,1,.9998,1.0006,.99998,1,.99936,.99973,1.00002,1.00002,1.00002,1.00026,1.00001,1.00001,1.00001,1.00001,1.00001,1.00001,1,.99977,1.00001,1.00001,1.00001,1.00001,1.0006,1.0006,1.0006,1.0006,.99977,.99977,1.00022,1.00022,1.00022,1.00022,1.00022,1.00003,1.00022,.99977,.99977,.99977,.99977,1.00001,1.00001,1.00026,.99973,.99973,.99973,.99973,.99973,.99973,.99982,1,.99973,.99973,.99973,.99973,1.0006,1.0006,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,1.06409,1.00026,.99973,.99973,.99973,.99973,1,.99973,1,1.00001,.99973,1.00001,.99973,1.00001,.99973,.99977,1,.99977,1,.99977,1,.99977,1,.99977,1.0288,.99977,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,.99977,.99973,.99977,.99973,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,.99924,1.0006,1.0006,.99946,1.00034,1,.99924,1.00001,1,1,.99973,.99924,.99973,.99924,.99973,1.06311,.99973,1.00024,.99973,.99924,.99977,.99973,.99977,.99973,.99977,.99973,1.00041,.9998,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,1,1.00016,.99977,.99998,.99977,.99998,.99977,.99998,1.00001,1,1.00001,1,1.00001,1,1.00001,1,1.00026,1.0006,1.00026,.89547,1.00026,1.0006,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,1.00016,.99977,1.00001,1,1.00001,1.00026,1,1.00026,1,1.00026,1,.99924,.99973,1.00001,.99973,1,.99982,1.00022,1.00026,1.00001,1,1.00026,1.0006,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,1.00001,1,1.00054,.99977,1.00084,1.00007,.99973,1.00013,.99924,1.00001,1.00001,.99945,.91221,1.00001,1.00026,.99977,1.00022,1.0006,1.00001,1.00001,.99999,.99977,.99933,1.00022,1.00054,1.00001,1.00065,1.00026,1.00001,1.0001,1.00001,1.00052,1,1.0006,1.00001,.99945,.99897,.99968,.99924,1.00036,.99945,.99949,1,1.0006,.99897,.99918,.99968,.99911,.99924,1,.99962,1.01487,1,1.0005,.99973,1.00012,1.00043,1,.99995,.99994,1.00036,.99947,1.00019,1.00063,1.00025,.99924,1.00036,.99973,1.00036,1.00025,1.00001,1.00001,1.00027,1.0001,1.00068,1.00001,1.0006,1.0006,1,1.00008,.99957,.99972,.9994,.99954,.99975,1.00051,1.00001,1.00019,1.00001,1.0001,.99986,1.00001,1.00001,1.00038,.99954,.99954,.9994,1.00066,.99999,.99977,1.00022,1.00054,1.00001,.99977,1.00026,.99975,1.0001,1.00001,.99993,.9995,.99955,1.00016,.99978,.99974,1.00019,1.00022,.99955,1.00053,.99973,1.00089,1.00005,.99967,1.00048,.99973,1.00002,1.00034,.99973,.99973,.99964,1.00006,1.00066,.99947,.99973,.98894,.99973,1,.44898,1,.99946,1,1.00039,1.00082,.99991,.99991,.99985,1.00022,1.00023,1.00061,1.00006,.99966,.99973,.99973,.99973,1.00019,1.0008,1,.99924,.99924,.99924,.99983,1.00044,.99973,.99964,.98332,1,.99973,1,1,.99962,.99895,1.00016,.99977,1.00016,.99977,1.00016,.99977,1.00001,1,1,1,.99973,1,1,.99955,.99924,.99924,.99924,.99924,.99998,.99998,.99998,.99973,.99973,.99972,1,1,1.00267,.99999,.99998,.99998,1,.99998,1.66475,1,.99973,.99973,1.00023,.99973,1.00423,.99925,.99999,1,.99991,.99984,1.00002,1.00002,1.00002,1.00002,1.00049,1,1.00245,1,1,1,1,.96329,1,1.20985,1.39713,1.00003,.8254,1.00015,1,1.00035,1.00027,1.00031,1.00031,1.00003,1.00031,1.00031,.99999,1.00003,.99999,.99999,1.41144,1.6,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.40579,1.40579,1.36625,.99999,1,.99861,.99861,1,1.00026,1.00026,1.00026,1.00026,.95317,.99999,.99999,.99999,.99999,1.40483,1,.99977,1.00054,1,1,.99953,.99962,1.00042,.9995,1,1,1,1,1,1,1,1,.99998,.99998,.99998,.99998,1,1,1,1,1,1,1,1,1,1,1];D.HelveticaItalicFactors=e;const t={lineHeight:1.35,lineGap:.2};D.HelveticaItalicMetrics=t;const o=[.76116,1,1,1.0006,1.0006,1.00006,.99973,.99973,.99982,1.00001,1.00043,.99998,.99998,.99959,1.00003,1.0006,.99998,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,.99973,1.0006,1,1.00003,1.00003,1.00003,.99973,.99987,1.00001,1.00001,.99977,.99977,1.00001,1.00026,1.00022,.99977,1.0006,1,1.00001,.99973,.99999,.99977,1.00022,1.00001,1.00022,.99977,1.00001,1.00026,.99977,1.00001,1.00016,1.00001,1.00001,1.00026,1.0006,1.0006,1.0006,.99949,.99973,.99998,.99973,.99973,1,.99973,.99973,1.0006,.99973,.99973,.99924,.99924,1,.99924,.99999,.99973,.99973,.99973,.99973,.99998,1,1.0006,.99973,1,.99977,1,1,1,1.00005,1.0009,1.00005,1.00003,.99998,.99973,.99973,.99973,.99973,1.0009,.99973,.99998,1.00025,.99968,.99973,1.00003,1.00025,.60299,1.00024,1.06409,1,1,.99998,1,.9998,1.0006,.99998,1,.99936,.99973,1.00002,1.00002,1.00002,1.00026,1.00001,1.00001,1.00001,1.00001,1.00001,1.00001,1,.99977,1.00001,1.00001,1.00001,1.00001,1.0006,1.0006,1.0006,1.0006,.99977,.99977,1.00022,1.00022,1.00022,1.00022,1.00022,1.00003,1.00022,.99977,.99977,.99977,.99977,1.00001,1.00001,1.00026,.99973,.99973,.99973,.99973,.99973,.99973,.99982,1,.99973,.99973,.99973,.99973,1.0006,1.0006,1.0006,1.0006,.99973,.99973,.99973,.99973,.99973,.99973,.99973,1.06409,1.00026,.99973,.99973,.99973,.99973,1,.99973,1,1.00001,.99973,1.00001,.99973,1.00001,.99973,.99977,1,.99977,1,.99977,1,.99977,1,.99977,1.04596,.99977,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00001,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,.99977,.99973,.99977,.99973,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,1.0006,.99924,1.0006,1.0006,1.00019,1.00034,1,.99924,1.00001,1,1,.99973,.99924,.99973,.99924,.99973,1.02572,.99973,1.00005,.99973,.99924,.99977,.99973,.99977,.99973,.99977,.99973,.99999,.9998,.99973,1.00022,.99973,1.00022,.99973,1.00022,.99973,1,1.00016,.99977,.99998,.99977,.99998,.99977,.99998,1.00001,1,1.00001,1,1.00001,1,1.00001,1,1.00026,1.0006,1.00026,.84533,1.00026,1.0006,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,.99977,.99973,1.00016,.99977,1.00001,1,1.00001,1.00026,1,1.00026,1,1.00026,1,.99924,.99973,1.00001,.99973,1,.99982,1.00022,1.00026,1.00001,1,1.00026,1.0006,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99998,.99928,1,.99977,1.00013,1.00055,.99947,.99945,.99941,.99924,1.00001,1.00001,1.0004,.91621,1.00001,1.00026,.99977,1.00022,1.0006,1.00001,1.00005,.99999,.99977,1.00015,1.00022,.99977,1.00001,.99973,1.00026,1.00001,1.00019,1.00001,.99946,1,1.0006,1.00001,.99978,1.00045,.99973,.99924,1.00023,.99978,.99966,1,1.00065,1.00045,1.00019,.99973,.99973,.99924,1,1,.96499,1,1.00055,.99973,1.00008,1.00027,1,.9997,.99995,1.00023,.99933,1.00019,1.00015,1.00031,.99924,1.00023,.99973,1.00023,1.00031,1.00001,.99928,1.00029,1.00092,1.00035,1.00001,1.0006,1.0006,1,.99988,.99975,1,1.00082,.99561,.9996,1.00035,1.00001,.99962,1.00001,1.00092,.99964,1.00001,.99963,.99999,1.00035,1.00035,1.00082,.99962,.99999,.99977,1.00022,1.00035,1.00001,.99977,1.00026,.9996,.99967,1.00001,1.00034,1.00074,1.00054,1.00053,1.00063,.99971,.99962,1.00035,.99975,.99977,.99973,1.00043,.99953,1.0007,.99915,.99973,1.00008,.99892,1.00073,1.00073,1.00114,.99915,1.00073,.99955,.99973,1.00092,.99973,1,.99998,1,1.0003,1,1.00043,1.00001,.99969,1.0003,1,1.00035,1.00001,.9995,1,1.00092,.99973,.99973,.99973,1.0007,.9995,1,.99924,1.0006,.99924,.99972,1.00062,.99973,1.00114,1.00073,1,.99955,1,1,1.00047,.99968,1.00016,.99977,1.00016,.99977,1.00016,.99977,1.00001,1,1,1,.99973,1,1,.99955,.99924,.99924,.99924,.99924,.99998,.99998,.99998,.99973,.99973,.99972,1,1,1.00267,.99999,.99998,.99998,1,.99998,1.66475,1,.99973,.99973,1.00023,.99973,.99971,.99925,1.00023,1,.99991,.99984,1.00002,1.00002,1.00002,1.00002,1,1,1,1,1,1,1,.96329,1,1.20985,1.39713,1.00003,.8254,1.00015,1,1.00035,1.00027,1.00031,1.00031,.99915,1.00031,1.00031,.99999,1.00003,.99999,.99999,1.41144,1.6,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.41144,1.40579,1.40579,1.36625,.99999,1,.99861,.99861,1,1.00026,1.00026,1.00026,1.00026,.95317,.99999,.99999,.99999,.99999,1.40483,1,.99977,1.00054,1,1,.99953,.99962,1.00042,.9995,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.HelveticaRegularFactors=o;const K={lineHeight:1.2,lineGap:.2};D.HelveticaRegularMetrics=K},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.LiberationSansRegularWidths=D.LiberationSansRegularMapping=D.LiberationSansItalicWidths=D.LiberationSansItalicMapping=D.LiberationSansBoldWidths=D.LiberationSansBoldMapping=D.LiberationSansBoldItalicWidths=D.LiberationSansBoldItalicMapping=void 0;const se=[365,0,333,278,333,474,556,556,889,722,238,333,333,389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,333,333,584,584,584,611,975,722,722,722,722,667,611,778,722,278,556,722,611,833,722,778,667,778,722,667,611,722,667,944,667,667,611,333,278,333,584,556,333,556,611,556,611,556,333,611,611,278,278,556,278,889,611,611,611,611,389,556,333,611,556,778,556,556,500,389,280,389,584,333,556,556,556,556,280,556,333,737,370,556,584,737,552,400,549,333,333,333,576,556,278,333,333,365,556,834,834,834,611,722,722,722,722,722,722,1e3,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,556,556,556,556,556,278,278,278,278,611,611,611,611,611,611,611,549,611,611,611,611,611,556,611,556,722,556,722,556,722,556,722,556,722,556,722,556,722,556,722,719,722,611,667,556,667,556,667,556,667,556,667,556,778,611,778,611,778,611,778,611,722,611,722,611,278,278,278,278,278,278,278,278,278,278,785,556,556,278,722,556,556,611,278,611,278,611,385,611,479,611,278,722,611,722,611,722,611,708,723,611,778,611,778,611,778,611,1e3,944,722,389,722,389,722,389,667,556,667,556,667,556,667,556,611,333,611,479,611,333,722,611,722,611,722,611,722,611,722,611,722,611,944,778,667,556,667,611,500,611,500,611,500,278,556,722,556,1e3,889,778,611,667,556,611,333,333,333,333,333,333,333,333,333,333,333,465,722,333,853,906,474,825,927,838,278,722,722,601,719,667,611,722,778,278,722,667,833,722,644,778,722,667,600,611,667,821,667,809,802,278,667,615,451,611,278,582,615,610,556,606,475,460,611,541,278,558,556,612,556,445,611,766,619,520,684,446,582,715,576,753,845,278,582,611,582,845,667,669,885,567,711,667,278,276,556,1094,1062,875,610,722,622,719,722,719,722,567,712,667,904,626,719,719,610,702,833,722,778,719,667,722,611,622,854,667,730,703,1005,1019,870,979,719,711,1031,719,556,618,615,417,635,556,709,497,615,615,500,635,740,604,611,604,611,556,490,556,875,556,615,581,833,844,729,854,615,552,854,583,556,556,611,417,552,556,278,281,278,969,906,611,500,615,556,604,778,611,487,447,944,778,944,778,944,778,667,556,333,333,556,1e3,1e3,552,278,278,278,278,500,500,500,556,556,350,1e3,1e3,240,479,333,333,604,333,167,396,556,556,1094,556,885,489,1115,1e3,768,600,834,834,834,834,1e3,500,1e3,500,1e3,500,500,494,612,823,713,584,549,713,979,722,274,549,549,583,549,549,604,584,604,604,708,625,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,729,604,604,354,354,1e3,990,990,990,990,494,604,604,604,604,354,1021,1052,917,750,750,531,656,594,510,500,750,750,611,611,333,333,333,333,333,333,333,333,222,222,333,333,333,333,333,333,333,333];D.LiberationSansBoldWidths=se;const i=[-1,-1,-1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,402,506,507,508,509,510,511,536,537,538,539,710,711,713,728,729,730,731,732,733,900,901,902,903,904,905,906,908,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1138,1139,1168,1169,7808,7809,7810,7811,7812,7813,7922,7923,8208,8209,8211,8212,8213,8215,8216,8217,8218,8219,8220,8221,8222,8224,8225,8226,8230,8240,8242,8243,8249,8250,8252,8254,8260,8319,8355,8356,8359,8364,8453,8467,8470,8482,8486,8494,8539,8540,8541,8542,8592,8593,8594,8595,8596,8597,8616,8706,8710,8719,8721,8722,8730,8734,8735,8745,8747,8776,8800,8801,8804,8805,8962,8976,8992,8993,9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9600,9604,9608,9612,9616,9617,9618,9619,9632,9633,9642,9643,9644,9650,9658,9660,9668,9674,9675,9679,9688,9689,9702,9786,9787,9788,9792,9794,9824,9827,9829,9830,9834,9835,9836,61441,61442,61445,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];D.LiberationSansBoldMapping=i;const w=[365,0,333,278,333,474,556,556,889,722,238,333,333,389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,333,333,584,584,584,611,975,722,722,722,722,667,611,778,722,278,556,722,611,833,722,778,667,778,722,667,611,722,667,944,667,667,611,333,278,333,584,556,333,556,611,556,611,556,333,611,611,278,278,556,278,889,611,611,611,611,389,556,333,611,556,778,556,556,500,389,280,389,584,333,556,556,556,556,280,556,333,737,370,556,584,737,552,400,549,333,333,333,576,556,278,333,333,365,556,834,834,834,611,722,722,722,722,722,722,1e3,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,556,556,556,556,556,278,278,278,278,611,611,611,611,611,611,611,549,611,611,611,611,611,556,611,556,722,556,722,556,722,556,722,556,722,556,722,556,722,556,722,740,722,611,667,556,667,556,667,556,667,556,667,556,778,611,778,611,778,611,778,611,722,611,722,611,278,278,278,278,278,278,278,278,278,278,782,556,556,278,722,556,556,611,278,611,278,611,396,611,479,611,278,722,611,722,611,722,611,708,723,611,778,611,778,611,778,611,1e3,944,722,389,722,389,722,389,667,556,667,556,667,556,667,556,611,333,611,479,611,333,722,611,722,611,722,611,722,611,722,611,722,611,944,778,667,556,667,611,500,611,500,611,500,278,556,722,556,1e3,889,778,611,667,556,611,333,333,333,333,333,333,333,333,333,333,333,333,722,333,854,906,473,844,930,847,278,722,722,610,671,667,611,722,778,278,722,667,833,722,657,778,718,667,590,611,667,822,667,829,781,278,667,620,479,611,278,591,620,621,556,610,479,492,611,558,278,566,556,603,556,450,611,712,605,532,664,409,591,704,578,773,834,278,591,611,591,834,667,667,886,614,719,667,278,278,556,1094,1042,854,622,719,677,719,722,708,722,614,722,667,927,643,719,719,615,687,833,722,778,719,667,722,611,677,781,667,729,708,979,989,854,1e3,708,719,1042,729,556,619,604,534,618,556,736,510,611,611,507,622,740,604,611,611,611,556,889,556,885,556,646,583,889,935,707,854,594,552,865,589,556,556,611,469,563,556,278,278,278,969,906,611,507,619,556,611,778,611,575,467,944,778,944,778,944,778,667,556,333,333,556,1e3,1e3,552,278,278,278,278,500,500,500,556,556,350,1e3,1e3,240,479,333,333,604,333,167,396,556,556,1104,556,885,516,1146,1e3,768,600,834,834,834,834,999,500,1e3,500,1e3,500,500,494,612,823,713,584,549,713,979,722,274,549,549,583,549,549,604,584,604,604,708,625,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,729,604,604,354,354,1e3,990,990,990,990,494,604,604,604,604,354,1021,1052,917,750,750,531,656,594,510,500,750,750,611,611,333,333,333,333,333,333,333,333,222,222,333,333,333,333,333,333,333,333];D.LiberationSansBoldItalicWidths=w;const P=[-1,-1,-1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,402,506,507,508,509,510,511,536,537,538,539,710,711,713,728,729,730,731,732,733,900,901,902,903,904,905,906,908,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1138,1139,1168,1169,7808,7809,7810,7811,7812,7813,7922,7923,8208,8209,8211,8212,8213,8215,8216,8217,8218,8219,8220,8221,8222,8224,8225,8226,8230,8240,8242,8243,8249,8250,8252,8254,8260,8319,8355,8356,8359,8364,8453,8467,8470,8482,8486,8494,8539,8540,8541,8542,8592,8593,8594,8595,8596,8597,8616,8706,8710,8719,8721,8722,8730,8734,8735,8745,8747,8776,8800,8801,8804,8805,8962,8976,8992,8993,9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9600,9604,9608,9612,9616,9617,9618,9619,9632,9633,9642,9643,9644,9650,9658,9660,9668,9674,9675,9679,9688,9689,9702,9786,9787,9788,9792,9794,9824,9827,9829,9830,9834,9835,9836,61441,61442,61445,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];D.LiberationSansBoldItalicMapping=P;const e=[365,0,333,278,278,355,556,556,889,667,191,333,333,389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,333,556,556,556,556,260,556,333,737,370,556,584,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,667,667,667,667,1e3,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500,667,556,667,556,667,556,722,500,722,500,722,500,722,500,722,625,722,556,667,556,667,556,667,556,667,556,667,556,778,556,778,556,778,556,778,556,722,556,722,556,278,278,278,278,278,278,278,222,278,278,733,444,500,222,667,500,500,556,222,556,222,556,281,556,400,556,222,722,556,722,556,722,556,615,723,556,778,556,778,556,778,556,1e3,944,722,333,722,333,722,333,667,500,667,500,667,500,667,500,611,278,611,354,611,278,722,556,722,556,722,556,722,556,722,556,722,556,944,722,667,500,667,611,500,611,500,611,500,222,556,667,556,1e3,889,778,611,667,500,611,278,333,333,333,333,333,333,333,333,333,333,333,667,278,789,846,389,794,865,775,222,667,667,570,671,667,611,722,778,278,667,667,833,722,648,778,725,667,600,611,667,837,667,831,761,278,667,570,439,555,222,550,570,571,500,556,439,463,555,542,222,500,492,548,500,447,556,670,573,486,603,374,550,652,546,728,779,222,550,556,550,779,667,667,843,544,708,667,278,278,500,1066,982,844,589,715,639,724,667,651,667,544,704,667,917,614,715,715,589,686,833,722,778,725,667,722,611,639,795,667,727,673,920,923,805,886,651,694,1022,682,556,562,522,493,553,556,688,465,556,556,472,564,686,550,556,556,556,500,833,500,835,500,572,518,830,851,621,736,526,492,752,534,556,556,556,378,496,500,222,222,222,910,828,556,472,565,500,556,778,556,492,339,944,722,944,722,944,722,667,500,333,333,556,1e3,1e3,552,222,222,222,222,333,333,333,556,556,350,1e3,1e3,188,354,333,333,500,333,167,365,556,556,1094,556,885,323,1083,1e3,768,600,834,834,834,834,1e3,500,998,500,1e3,500,500,494,612,823,713,584,549,713,979,719,274,549,549,584,549,549,604,584,604,604,708,625,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,729,604,604,354,354,1e3,990,990,990,990,494,604,604,604,604,354,1021,1052,917,750,750,531,656,594,510,500,750,750,500,500,333,333,333,333,333,333,333,333,222,222,294,294,324,324,316,328,398,285];D.LiberationSansItalicWidths=e;const t=[-1,-1,-1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,402,506,507,508,509,510,511,536,537,538,539,710,711,713,728,729,730,731,732,733,900,901,902,903,904,905,906,908,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1138,1139,1168,1169,7808,7809,7810,7811,7812,7813,7922,7923,8208,8209,8211,8212,8213,8215,8216,8217,8218,8219,8220,8221,8222,8224,8225,8226,8230,8240,8242,8243,8249,8250,8252,8254,8260,8319,8355,8356,8359,8364,8453,8467,8470,8482,8486,8494,8539,8540,8541,8542,8592,8593,8594,8595,8596,8597,8616,8706,8710,8719,8721,8722,8730,8734,8735,8745,8747,8776,8800,8801,8804,8805,8962,8976,8992,8993,9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9600,9604,9608,9612,9616,9617,9618,9619,9632,9633,9642,9643,9644,9650,9658,9660,9668,9674,9675,9679,9688,9689,9702,9786,9787,9788,9792,9794,9824,9827,9829,9830,9834,9835,9836,61441,61442,61445,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];D.LiberationSansItalicMapping=t;const o=[365,0,333,278,278,355,556,556,889,667,191,333,333,389,584,278,333,278,278,556,556,556,556,556,556,556,556,556,556,278,278,584,584,584,556,1015,667,667,722,722,667,611,778,722,278,500,667,556,833,722,778,667,778,722,667,611,722,667,944,667,667,611,278,278,278,469,556,333,556,556,500,556,556,278,556,556,222,222,500,222,833,556,556,556,556,333,500,278,556,500,722,500,500,500,334,260,334,584,333,556,556,556,556,260,556,333,737,370,556,584,737,552,400,549,333,333,333,576,537,278,333,333,365,556,834,834,834,611,667,667,667,667,667,667,1e3,722,667,667,667,667,278,278,278,278,722,722,778,778,778,778,778,584,778,722,722,722,722,667,667,611,556,556,556,556,556,556,889,500,556,556,556,556,278,278,278,278,556,556,556,556,556,556,556,549,611,556,556,556,556,500,556,500,667,556,667,556,667,556,722,500,722,500,722,500,722,500,722,615,722,556,667,556,667,556,667,556,667,556,667,556,778,556,778,556,778,556,778,556,722,556,722,556,278,278,278,278,278,278,278,222,278,278,735,444,500,222,667,500,500,556,222,556,222,556,292,556,334,556,222,722,556,722,556,722,556,604,723,556,778,556,778,556,778,556,1e3,944,722,333,722,333,722,333,667,500,667,500,667,500,667,500,611,278,611,375,611,278,722,556,722,556,722,556,722,556,722,556,722,556,944,722,667,500,667,611,500,611,500,611,500,222,556,667,556,1e3,889,778,611,667,500,611,278,333,333,333,333,333,333,333,333,333,333,333,667,278,784,838,384,774,855,752,222,667,667,551,668,667,611,722,778,278,667,668,833,722,650,778,722,667,618,611,667,798,667,835,748,278,667,578,446,556,222,547,578,575,500,557,446,441,556,556,222,500,500,576,500,448,556,690,569,482,617,395,547,648,525,713,781,222,547,556,547,781,667,667,865,542,719,667,278,278,500,1057,1010,854,583,722,635,719,667,656,667,542,677,667,923,604,719,719,583,656,833,722,778,719,667,722,611,635,760,667,740,667,917,938,792,885,656,719,1010,722,556,573,531,365,583,556,669,458,559,559,438,583,688,552,556,542,556,500,458,500,823,500,573,521,802,823,625,719,521,510,750,542,556,556,556,365,510,500,222,278,222,906,812,556,438,559,500,552,778,556,489,411,944,722,944,722,944,722,667,500,333,333,556,1e3,1e3,552,222,222,222,222,333,333,333,556,556,350,1e3,1e3,188,354,333,333,500,333,167,365,556,556,1094,556,885,323,1073,1e3,768,600,834,834,834,834,1e3,500,1e3,500,1e3,500,500,494,612,823,713,584,549,713,979,719,274,549,549,583,549,549,604,584,604,604,708,625,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,708,729,604,604,354,354,1e3,990,990,990,990,494,604,604,604,604,354,1021,1052,917,750,750,531,656,594,510,500,750,750,500,500,333,333,333,333,333,333,333,333,222,222,294,294,324,324,316,328,398,285];D.LiberationSansRegularWidths=o;const K=[-1,-1,-1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,402,506,507,508,509,510,511,536,537,538,539,710,711,713,728,729,730,731,732,733,900,901,902,903,904,905,906,908,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1138,1139,1168,1169,7808,7809,7810,7811,7812,7813,7922,7923,8208,8209,8211,8212,8213,8215,8216,8217,8218,8219,8220,8221,8222,8224,8225,8226,8230,8240,8242,8243,8249,8250,8252,8254,8260,8319,8355,8356,8359,8364,8453,8467,8470,8482,8486,8494,8539,8540,8541,8542,8592,8593,8594,8595,8596,8597,8616,8706,8710,8719,8721,8722,8730,8734,8735,8745,8747,8776,8800,8801,8804,8805,8962,8976,8992,8993,9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9600,9604,9608,9612,9616,9617,9618,9619,9632,9633,9642,9643,9644,9650,9658,9660,9668,9674,9675,9679,9688,9689,9702,9786,9787,9788,9792,9794,9824,9827,9829,9830,9834,9835,9836,61441,61442,61445,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];D.LiberationSansRegularMapping=K},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.MyriadProRegularMetrics=D.MyriadProRegularFactors=D.MyriadProItalicMetrics=D.MyriadProItalicFactors=D.MyriadProBoldMetrics=D.MyriadProBoldItalicMetrics=D.MyriadProBoldItalicFactors=D.MyriadProBoldFactors=void 0;const se=[1.36898,1,1,.72706,.80479,.83734,.98894,.99793,.9897,.93884,.86209,.94292,.94292,1.16661,1.02058,.93582,.96694,.93582,1.19137,.99793,.99793,.99793,.99793,.99793,.99793,.99793,.99793,.99793,.99793,.78076,.78076,1.02058,1.02058,1.02058,.72851,.78966,.90838,.83637,.82391,.96376,.80061,.86275,.8768,.95407,1.0258,.73901,.85022,.83655,1.0156,.95546,.92179,.87107,.92179,.82114,.8096,.89713,.94438,.95353,.94083,.91905,.90406,.9446,.94292,1.18777,.94292,1.02058,.89903,.90088,.94938,.97898,.81093,.97571,.94938,1.024,.9577,.95933,.98621,1.0474,.97455,.98981,.9672,.95933,.9446,.97898,.97407,.97646,.78036,1.10208,.95442,.95298,.97579,.9332,.94039,.938,.80687,1.01149,.80687,1.02058,.80479,.99793,.99793,.99793,.99793,1.01149,1.00872,.90088,.91882,1.0213,.8361,1.02058,.62295,.54324,.89022,1.08595,1,1,.90088,1,.97455,.93582,.90088,1,1.05686,.8361,.99642,.99642,.99642,.72851,.90838,.90838,.90838,.90838,.90838,.90838,.868,.82391,.80061,.80061,.80061,.80061,1.0258,1.0258,1.0258,1.0258,.97484,.95546,.92179,.92179,.92179,.92179,.92179,1.02058,.92179,.94438,.94438,.94438,.94438,.90406,.86958,.98225,.94938,.94938,.94938,.94938,.94938,.94938,.9031,.81093,.94938,.94938,.94938,.94938,.98621,.98621,.98621,.98621,.93969,.95933,.9446,.9446,.9446,.9446,.9446,1.08595,.9446,.95442,.95442,.95442,.95442,.94039,.97898,.94039,.90838,.94938,.90838,.94938,.90838,.94938,.82391,.81093,.82391,.81093,.82391,.81093,.82391,.81093,.96376,.84313,.97484,.97571,.80061,.94938,.80061,.94938,.80061,.94938,.80061,.94938,.80061,.94938,.8768,.9577,.8768,.9577,.8768,.9577,1,1,.95407,.95933,.97069,.95933,1.0258,.98621,1.0258,.98621,1.0258,.98621,1.0258,.98621,1.0258,.98621,.887,1.01591,.73901,1.0474,1,1,.97455,.83655,.98981,1,1,.83655,.73977,.83655,.73903,.84638,1.033,.95546,.95933,1,1,.95546,.95933,.8271,.95417,.95933,.92179,.9446,.92179,.9446,.92179,.9446,.936,.91964,.82114,.97646,1,1,.82114,.97646,.8096,.78036,.8096,.78036,1,1,.8096,.78036,1,1,.89713,.77452,.89713,1.10208,.94438,.95442,.94438,.95442,.94438,.95442,.94438,.95442,.94438,.95442,.94438,.95442,.94083,.97579,.90406,.94039,.90406,.9446,.938,.9446,.938,.9446,.938,1,.99793,.90838,.94938,.868,.9031,.92179,.9446,1,1,.89713,1.10208,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90989,.9358,.91945,.83181,.75261,.87992,.82976,.96034,.83689,.97268,1.0078,.90838,.83637,.8019,.90157,.80061,.9446,.95407,.92436,1.0258,.85022,.97153,1.0156,.95546,.89192,.92179,.92361,.87107,.96318,.89713,.93704,.95638,.91905,.91709,.92796,1.0258,.93704,.94836,1.0373,.95933,1.0078,.95871,.94836,.96174,.92601,.9498,.98607,.95776,.95933,1.05453,1.0078,.98275,.9314,.95617,.91701,1.05993,.9446,.78367,.9553,1,.86832,1.0128,.95871,.99394,.87548,.96361,.86774,1.0078,.95871,.9446,.95871,.86774,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.94083,.97579,.94083,.97579,.94083,.97579,.90406,.94039,.96694,1,.89903,1,1,1,.93582,.93582,.93582,1,.908,.908,.918,.94219,.94219,.96544,1,1.285,1,1,.81079,.81079,1,1,.74854,1,1,1,1,.99793,1,1,1,.65,1,1.36145,1,1,1,1,1,1,1,1,1,1,1,1.17173,1,.80535,.76169,1.02058,1.0732,1.05486,1,1,1.30692,1.08595,1.08595,1,1.08595,1.08595,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.16161,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.MyriadProBoldFactors=se;const i={lineHeight:1.2,lineGap:.2};D.MyriadProBoldMetrics=i;const w=[1.36898,1,1,.66227,.80779,.81625,.97276,.97276,.97733,.92222,.83266,.94292,.94292,1.16148,1.02058,.93582,.96694,.93582,1.17337,.97276,.97276,.97276,.97276,.97276,.97276,.97276,.97276,.97276,.97276,.78076,.78076,1.02058,1.02058,1.02058,.71541,.76813,.85576,.80591,.80729,.94299,.77512,.83655,.86523,.92222,.98621,.71743,.81698,.79726,.98558,.92222,.90637,.83809,.90637,.80729,.76463,.86275,.90699,.91605,.9154,.85308,.85458,.90531,.94292,1.21296,.94292,1.02058,.89903,1.18616,.99613,.91677,.78216,.91677,.90083,.98796,.9135,.92168,.95381,.98981,.95298,.95381,.93459,.92168,.91513,.92004,.91677,.95077,.748,1.04502,.91677,.92061,.94236,.89544,.89364,.9,.80687,.8578,.80687,1.02058,.80779,.97276,.97276,.97276,.97276,.8578,.99973,1.18616,.91339,1.08074,.82891,1.02058,.55509,.71526,.89022,1.08595,1,1,1.18616,1,.96736,.93582,1.18616,1,1.04864,.82711,.99043,.99043,.99043,.71541,.85576,.85576,.85576,.85576,.85576,.85576,.845,.80729,.77512,.77512,.77512,.77512,.98621,.98621,.98621,.98621,.95961,.92222,.90637,.90637,.90637,.90637,.90637,1.02058,.90251,.90699,.90699,.90699,.90699,.85458,.83659,.94951,.99613,.99613,.99613,.99613,.99613,.99613,.85811,.78216,.90083,.90083,.90083,.90083,.95381,.95381,.95381,.95381,.9135,.92168,.91513,.91513,.91513,.91513,.91513,1.08595,.91677,.91677,.91677,.91677,.91677,.89364,.92332,.89364,.85576,.99613,.85576,.99613,.85576,.99613,.80729,.78216,.80729,.78216,.80729,.78216,.80729,.78216,.94299,.76783,.95961,.91677,.77512,.90083,.77512,.90083,.77512,.90083,.77512,.90083,.77512,.90083,.86523,.9135,.86523,.9135,.86523,.9135,1,1,.92222,.92168,.92222,.92168,.98621,.95381,.98621,.95381,.98621,.95381,.98621,.95381,.98621,.95381,.86036,.97096,.71743,.98981,1,1,.95298,.79726,.95381,1,1,.79726,.6894,.79726,.74321,.81691,1.0006,.92222,.92168,1,1,.92222,.92168,.79464,.92098,.92168,.90637,.91513,.90637,.91513,.90637,.91513,.909,.87514,.80729,.95077,1,1,.80729,.95077,.76463,.748,.76463,.748,1,1,.76463,.748,1,1,.86275,.72651,.86275,1.04502,.90699,.91677,.90699,.91677,.90699,.91677,.90699,.91677,.90699,.91677,.90699,.91677,.9154,.94236,.85458,.89364,.85458,.90531,.9,.90531,.9,.90531,.9,1,.97276,.85576,.99613,.845,.85811,.90251,.91677,1,1,.86275,1.04502,1.18616,1.18616,1.18616,1.18616,1.18616,1.18616,1.18616,1.18616,1.18616,1.00899,1.30628,.85576,.80178,.66862,.7927,.69323,.88127,.72459,.89711,.95381,.85576,.80591,.7805,.94729,.77512,.90531,.92222,.90637,.98621,.81698,.92655,.98558,.92222,.85359,.90637,.90976,.83809,.94523,.86275,.83509,.93157,.85308,.83392,.92346,.98621,.83509,.92886,.91324,.92168,.95381,.90646,.92886,.90557,.86847,.90276,.91324,.86842,.92168,.99531,.95381,.9224,.85408,.92699,.86847,1.0051,.91513,.80487,.93481,1,.88159,1.05214,.90646,.97355,.81539,.89398,.85923,.95381,.90646,.91513,.90646,.85923,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.9154,.94236,.9154,.94236,.9154,.94236,.85458,.89364,.96694,1,.89903,1,1,1,.91782,.91782,.91782,1,.896,.896,.896,.9332,.9332,.95973,1,1.26,1,1,.80479,.80178,1,1,.85633,1,1,1,1,.97276,1,1,1,.698,1,1.36145,1,1,1,1,1,1,1,1,1,1,1,1.14542,1,.79199,.78694,1.02058,1.03493,1.05486,1,1,1.23026,1.08595,1.08595,1,1.08595,1.08595,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.20006,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.MyriadProBoldItalicFactors=w;const P={lineHeight:1.2,lineGap:.2};D.MyriadProBoldItalicMetrics=P;const e=[1.36898,1,1,.65507,.84943,.85639,.88465,.88465,.86936,.88307,.86948,.85283,.85283,1.06383,1.02058,.75945,.9219,.75945,1.17337,.88465,.88465,.88465,.88465,.88465,.88465,.88465,.88465,.88465,.88465,.75945,.75945,1.02058,1.02058,1.02058,.69046,.70926,.85158,.77812,.76852,.89591,.70466,.76125,.80094,.86822,.83864,.728,.77212,.79475,.93637,.87514,.8588,.76013,.8588,.72421,.69866,.77598,.85991,.80811,.87832,.78112,.77512,.8562,1.0222,1.18417,1.0222,1.27014,.89903,1.15012,.93859,.94399,.846,.94399,.81453,1.0186,.94219,.96017,1.03075,1.02175,.912,1.03075,.96998,.96017,.93859,.94399,.94399,.95493,.746,1.12658,.94578,.91,.979,.882,.882,.83,.85034,.83537,.85034,1.02058,.70869,.88465,.88465,.88465,.88465,.83537,.90083,1.15012,.9161,.94565,.73541,1.02058,.53609,.69353,.79519,1.08595,1,1,1.15012,1,.91974,.75945,1.15012,1,.9446,.73361,.9005,.9005,.9005,.62864,.85158,.85158,.85158,.85158,.85158,.85158,.773,.76852,.70466,.70466,.70466,.70466,.83864,.83864,.83864,.83864,.90561,.87514,.8588,.8588,.8588,.8588,.8588,1.02058,.85751,.85991,.85991,.85991,.85991,.77512,.76013,.88075,.93859,.93859,.93859,.93859,.93859,.93859,.8075,.846,.81453,.81453,.81453,.81453,.82424,.82424,.82424,.82424,.9278,.96017,.93859,.93859,.93859,.93859,.93859,1.08595,.8562,.94578,.94578,.94578,.94578,.882,.94578,.882,.85158,.93859,.85158,.93859,.85158,.93859,.76852,.846,.76852,.846,.76852,.846,.76852,.846,.89591,.8544,.90561,.94399,.70466,.81453,.70466,.81453,.70466,.81453,.70466,.81453,.70466,.81453,.80094,.94219,.80094,.94219,.80094,.94219,1,1,.86822,.96017,.86822,.96017,.83864,.82424,.83864,.82424,.83864,.82424,.83864,1.03075,.83864,.82424,.81402,1.02738,.728,1.02175,1,1,.912,.79475,1.03075,1,1,.79475,.83911,.79475,.66266,.80553,1.06676,.87514,.96017,1,1,.87514,.96017,.86865,.87396,.96017,.8588,.93859,.8588,.93859,.8588,.93859,.867,.84759,.72421,.95493,1,1,.72421,.95493,.69866,.746,.69866,.746,1,1,.69866,.746,1,1,.77598,.88417,.77598,1.12658,.85991,.94578,.85991,.94578,.85991,.94578,.85991,.94578,.85991,.94578,.85991,.94578,.87832,.979,.77512,.882,.77512,.8562,.83,.8562,.83,.8562,.83,1,.88465,.85158,.93859,.773,.8075,.85751,.8562,1,1,.77598,1.12658,1.15012,1.15012,1.15012,1.15012,1.15012,1.15313,1.15012,1.15012,1.15012,1.08106,1.03901,.85158,.77025,.62264,.7646,.65351,.86026,.69461,.89947,1.03075,.85158,.77812,.76449,.88836,.70466,.8562,.86822,.8588,.83864,.77212,.85308,.93637,.87514,.82352,.8588,.85701,.76013,.89058,.77598,.8156,.82565,.78112,.77899,.89386,.83864,.8156,.9486,.92388,.96186,1.03075,.91123,.9486,.93298,.878,.93942,.92388,.84596,.96186,.95119,1.03075,.922,.88787,.95829,.88,.93559,.93859,.78815,.93758,1,.89217,1.03737,.91123,.93969,.77487,.85769,.86799,1.03075,.91123,.93859,.91123,.86799,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.87832,.979,.87832,.979,.87832,.979,.77512,.882,.9219,1,.89903,1,1,1,.87321,.87321,.87321,1,1.027,1.027,1.027,.86847,.86847,.79121,1,1.124,1,1,.73572,.73572,1,1,.85034,1,1,1,1,.88465,1,1,1,.669,1,1.36145,1,1,1,1,1,1,1,1,1,1,1,1.04828,1,.74948,.75187,1.02058,.98391,1.02119,1,1,1.06233,1.08595,1.08595,1,1.08595,1.08595,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.05233,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.MyriadProItalicFactors=e;const t={lineHeight:1.2,lineGap:.2};D.MyriadProItalicMetrics=t;const o=[1.36898,1,1,.76305,.82784,.94935,.89364,.92241,.89073,.90706,.98472,.85283,.85283,1.0664,1.02058,.74505,.9219,.74505,1.23456,.92241,.92241,.92241,.92241,.92241,.92241,.92241,.92241,.92241,.92241,.74505,.74505,1.02058,1.02058,1.02058,.73002,.72601,.91755,.8126,.80314,.92222,.73764,.79726,.83051,.90284,.86023,.74,.8126,.84869,.96518,.91115,.8858,.79761,.8858,.74498,.73914,.81363,.89591,.83659,.89633,.85608,.8111,.90531,1.0222,1.22736,1.0222,1.27014,.89903,.90088,.86667,1.0231,.896,1.01411,.90083,1.05099,1.00512,.99793,1.05326,1.09377,.938,1.06226,1.00119,.99793,.98714,1.0231,1.01231,.98196,.792,1.19137,.99074,.962,1.01915,.926,.942,.856,.85034,.92006,.85034,1.02058,.69067,.92241,.92241,.92241,.92241,.92006,.9332,.90088,.91882,.93484,.75339,1.02058,.56866,.54324,.79519,1.08595,1,1,.90088,1,.95325,.74505,.90088,1,.97198,.75339,.91009,.91009,.91009,.66466,.91755,.91755,.91755,.91755,.91755,.91755,.788,.80314,.73764,.73764,.73764,.73764,.86023,.86023,.86023,.86023,.92915,.91115,.8858,.8858,.8858,.8858,.8858,1.02058,.8858,.89591,.89591,.89591,.89591,.8111,.79611,.89713,.86667,.86667,.86667,.86667,.86667,.86667,.86936,.896,.90083,.90083,.90083,.90083,.84224,.84224,.84224,.84224,.97276,.99793,.98714,.98714,.98714,.98714,.98714,1.08595,.89876,.99074,.99074,.99074,.99074,.942,1.0231,.942,.91755,.86667,.91755,.86667,.91755,.86667,.80314,.896,.80314,.896,.80314,.896,.80314,.896,.92222,.93372,.92915,1.01411,.73764,.90083,.73764,.90083,.73764,.90083,.73764,.90083,.73764,.90083,.83051,1.00512,.83051,1.00512,.83051,1.00512,1,1,.90284,.99793,.90976,.99793,.86023,.84224,.86023,.84224,.86023,.84224,.86023,1.05326,.86023,.84224,.82873,1.07469,.74,1.09377,1,1,.938,.84869,1.06226,1,1,.84869,.83704,.84869,.81441,.85588,1.08927,.91115,.99793,1,1,.91115,.99793,.91887,.90991,.99793,.8858,.98714,.8858,.98714,.8858,.98714,.894,.91434,.74498,.98196,1,1,.74498,.98196,.73914,.792,.73914,.792,1,1,.73914,.792,1,1,.81363,.904,.81363,1.19137,.89591,.99074,.89591,.99074,.89591,.99074,.89591,.99074,.89591,.99074,.89591,.99074,.89633,1.01915,.8111,.942,.8111,.90531,.856,.90531,.856,.90531,.856,1,.92241,.91755,.86667,.788,.86936,.8858,.89876,1,1,.81363,1.19137,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90088,.90388,1.03901,.92138,.78105,.7154,.86169,.80513,.94007,.82528,.98612,1.06226,.91755,.8126,.81884,.92819,.73764,.90531,.90284,.8858,.86023,.8126,.91172,.96518,.91115,.83089,.8858,.87791,.79761,.89297,.81363,.88157,.89992,.85608,.81992,.94307,.86023,.88157,.95308,.98699,.99793,1.06226,.95817,.95308,.97358,.928,.98088,.98699,.92761,.99793,.96017,1.06226,.986,.944,.95978,.938,.96705,.98714,.80442,.98972,1,.89762,1.04552,.95817,.99007,.87064,.91879,.88888,1.06226,.95817,.98714,.95817,.88888,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.89633,1.01915,.89633,1.01915,.89633,1.01915,.8111,.942,.9219,1,.89903,1,1,1,.93173,.93173,.93173,1,1.06304,1.06304,1.06904,.89903,.89903,.80549,1,1.156,1,1,.76575,.76575,1,1,.72458,1,1,1,1,.92241,1,1,1,.619,1,1.36145,1,1,1,1,1,1,1,1,1,1,1,1.07257,1,.74705,.71119,1.02058,1.024,1.02119,1,1,1.1536,1.08595,1.08595,1,1.08595,1.08595,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.05638,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.MyriadProRegularFactors=o;const K={lineHeight:1.2,lineGap:.2};D.MyriadProRegularMetrics=K},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.SegoeuiRegularMetrics=D.SegoeuiRegularFactors=D.SegoeuiItalicMetrics=D.SegoeuiItalicFactors=D.SegoeuiBoldMetrics=D.SegoeuiBoldItalicMetrics=D.SegoeuiBoldItalicFactors=D.SegoeuiBoldFactors=void 0;const se=[1.76738,1,1,.99297,.9824,1.04016,1.06497,1.03424,.97529,1.17647,1.23203,1.1085,1.1085,1.16939,1.2107,.9754,1.21408,.9754,1.59578,1.03424,1.03424,1.03424,1.03424,1.03424,1.03424,1.03424,1.03424,1.03424,1.03424,.81378,.81378,1.2107,1.2107,1.2107,.71703,.97847,.97363,.88776,.8641,1.02096,.79795,.85132,.914,1.06085,1.1406,.8007,.89858,.83693,1.14889,1.09398,.97489,.92094,.97489,.90399,.84041,.95923,1.00135,1,1.06467,.98243,.90996,.99361,1.1085,1.56942,1.1085,1.2107,.74627,.94282,.96752,1.01519,.86304,1.01359,.97278,1.15103,1.01359,.98561,1.02285,1.02285,1.00527,1.02285,1.0302,.99041,1.0008,1.01519,1.01359,1.02258,.79104,1.16862,.99041,.97454,1.02511,.99298,.96752,.95801,.94856,1.16579,.94856,1.2107,.9824,1.03424,1.03424,1,1.03424,1.16579,.8727,1.3871,1.18622,1.10818,1.04478,1.2107,1.18622,.75155,.94994,1.28826,1.21408,1.21408,.91056,1,.91572,.9754,.64663,1.18328,1.24866,1.04478,1.14169,1.15749,1.17389,.71703,.97363,.97363,.97363,.97363,.97363,.97363,.93506,.8641,.79795,.79795,.79795,.79795,1.1406,1.1406,1.1406,1.1406,1.02096,1.09398,.97426,.97426,.97426,.97426,.97426,1.2107,.97489,1.00135,1.00135,1.00135,1.00135,.90996,.92094,1.02798,.96752,.96752,.96752,.96752,.96752,.96752,.93136,.86304,.97278,.97278,.97278,.97278,1.02285,1.02285,1.02285,1.02285,.97122,.99041,1,1,1,1,1,1.28826,1.0008,.99041,.99041,.99041,.99041,.96752,1.01519,.96752,.97363,.96752,.97363,.96752,.97363,.96752,.8641,.86304,.8641,.86304,.8641,.86304,.8641,.86304,1.02096,1.03057,1.02096,1.03517,.79795,.97278,.79795,.97278,.79795,.97278,.79795,.97278,.79795,.97278,.914,1.01359,.914,1.01359,.914,1.01359,1,1,1.06085,.98561,1.06085,1.00879,1.1406,1.02285,1.1406,1.02285,1.1406,1.02285,1.1406,1.02285,1.1406,1.02285,.97138,1.08692,.8007,1.02285,1,1,1.00527,.83693,1.02285,1,1,.83693,.9455,.83693,.90418,.83693,1.13005,1.09398,.99041,1,1,1.09398,.99041,.96692,1.09251,.99041,.97489,1.0008,.97489,1.0008,.97489,1.0008,.93994,.97931,.90399,1.02258,1,1,.90399,1.02258,.84041,.79104,.84041,.79104,.84041,.79104,.84041,.79104,1,1,.95923,1.07034,.95923,1.16862,1.00135,.99041,1.00135,.99041,1.00135,.99041,1.00135,.99041,1.00135,.99041,1.00135,.99041,1.06467,1.02511,.90996,.96752,.90996,.99361,.95801,.99361,.95801,.99361,.95801,1.07733,1.03424,.97363,.96752,.93506,.93136,.97489,1.0008,1,1,.95923,1.16862,1.15103,1.15103,1.01173,1.03959,.75953,.81378,.79912,1.15103,1.21994,.95161,.87815,1.01149,.81525,.7676,.98167,1.01134,1.02546,.84097,1.03089,1.18102,.97363,.88776,.85134,.97826,.79795,.99361,1.06085,.97489,1.1406,.89858,1.0388,1.14889,1.09398,.86039,.97489,1.0595,.92094,.94793,.95923,.90996,.99346,.98243,1.02112,.95493,1.1406,.90996,1.03574,1.02597,1.0008,1.18102,1.06628,1.03574,1.0192,1.01932,1.00886,.97531,1.0106,1.0008,1.13189,1.18102,1.02277,.98683,1.0016,.99561,1.07237,1.0008,.90434,.99921,.93803,.8965,1.23085,1.06628,1.04983,.96268,1.0499,.98439,1.18102,1.06628,1.0008,1.06628,.98439,.79795,1,1,1,1,1,1,1,1,1,1,1,1,1.09466,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.97278,1,1,1,1,1,1,1,1,1,1,1,1,1.02065,1,1,1,1,1,1,1.06467,1.02511,1.06467,1.02511,1.06467,1.02511,.90996,.96752,1,1.21408,.89903,1,1,.75155,1.04394,1.04394,1.04394,1.04394,.98633,.98633,.98633,.73047,.73047,1.20642,.91211,1.25635,1.222,1.02956,1.03372,1.03372,.96039,1.24633,1,1.12454,.93503,1.03424,1.19687,1.03424,1,1,1,.771,1,1,1.15749,1.15749,1.15749,1.10948,.86279,.94434,.86279,.94434,.86182,1,1,1.16897,1,.96085,.90137,1.2107,1.18416,1.13973,.69825,.9716,2.10339,1.29004,1.29004,1.21172,1.29004,1.29004,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.42603,1,.99862,.99862,1,.87025,.87025,.87025,.87025,1.18874,1.42603,1,1.42603,1.42603,.99862,1,1,1,1,1,1.2886,1.04315,1.15296,1.34163,1,1,1,1.09193,1.09193,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.SegoeuiBoldFactors=se;const i={lineHeight:1.33008,lineGap:0};D.SegoeuiBoldMetrics=i;const w=[1.76738,1,1,.98946,1.03959,1.04016,1.02809,1.036,.97639,1.10953,1.23203,1.11144,1.11144,1.16939,1.21237,.9754,1.21261,.9754,1.59754,1.036,1.036,1.036,1.036,1.036,1.036,1.036,1.036,1.036,1.036,.81378,.81378,1.21237,1.21237,1.21237,.73541,.97847,.97363,.89723,.87897,1.0426,.79429,.85292,.91149,1.05815,1.1406,.79631,.90128,.83853,1.04396,1.10615,.97552,.94436,.97552,.88641,.80527,.96083,1.00135,1,1.06777,.9817,.91142,.99361,1.11144,1.57293,1.11144,1.21237,.74627,1.31818,1.06585,.97042,.83055,.97042,.93503,1.1261,.97042,.97922,1.14236,.94552,1.01054,1.14236,1.02471,.97922,.94165,.97042,.97042,1.0276,.78929,1.1261,.97922,.95874,1.02197,.98507,.96752,.97168,.95107,1.16579,.95107,1.21237,1.03959,1.036,1.036,1,1.036,1.16579,.87357,1.31818,1.18754,1.26781,1.05356,1.21237,1.18622,.79487,.94994,1.29004,1.24047,1.24047,1.31818,1,.91484,.9754,1.31818,1.1349,1.24866,1.05356,1.13934,1.15574,1.17389,.73541,.97363,.97363,.97363,.97363,.97363,.97363,.94385,.87897,.79429,.79429,.79429,.79429,1.1406,1.1406,1.1406,1.1406,1.0426,1.10615,.97552,.97552,.97552,.97552,.97552,1.21237,.97552,1.00135,1.00135,1.00135,1.00135,.91142,.94436,.98721,1.06585,1.06585,1.06585,1.06585,1.06585,1.06585,.96705,.83055,.93503,.93503,.93503,.93503,1.14236,1.14236,1.14236,1.14236,.93125,.97922,.94165,.94165,.94165,.94165,.94165,1.29004,.94165,.97922,.97922,.97922,.97922,.96752,.97042,.96752,.97363,1.06585,.97363,1.06585,.97363,1.06585,.87897,.83055,.87897,.83055,.87897,.83055,.87897,.83055,1.0426,1.0033,1.0426,.97042,.79429,.93503,.79429,.93503,.79429,.93503,.79429,.93503,.79429,.93503,.91149,.97042,.91149,.97042,.91149,.97042,1,1,1.05815,.97922,1.05815,.97922,1.1406,1.14236,1.1406,1.14236,1.1406,1.14236,1.1406,1.14236,1.1406,1.14236,.97441,1.04302,.79631,1.01582,1,1,1.01054,.83853,1.14236,1,1,.83853,1.09125,.83853,.90418,.83853,1.19508,1.10615,.97922,1,1,1.10615,.97922,1.01034,1.10466,.97922,.97552,.94165,.97552,.94165,.97552,.94165,.91602,.91981,.88641,1.0276,1,1,.88641,1.0276,.80527,.78929,.80527,.78929,.80527,.78929,.80527,.78929,1,1,.96083,1.05403,.95923,1.16862,1.00135,.97922,1.00135,.97922,1.00135,.97922,1.00135,.97922,1.00135,.97922,1.00135,.97922,1.06777,1.02197,.91142,.96752,.91142,.99361,.97168,.99361,.97168,.99361,.97168,1.23199,1.036,.97363,1.06585,.94385,.96705,.97552,.94165,1,1,.96083,1.1261,1.31818,1.31818,1.31818,1.31818,1.31818,1.31818,1.31818,1.31818,1.31818,.95161,1.27126,1.00811,.83284,.77702,.99137,.95253,1.0347,.86142,1.07205,1.14236,.97363,.89723,.86869,1.09818,.79429,.99361,1.05815,.97552,1.1406,.90128,1.06662,1.04396,1.10615,.84918,.97552,1.04694,.94436,.98015,.96083,.91142,1.00356,.9817,1.01945,.98999,1.1406,.91142,1.04961,.9898,1.00639,1.14236,1.07514,1.04961,.99607,1.02897,1.008,.9898,.95134,1.00639,1.11121,1.14236,1.00518,.97981,1.02186,1,1.08578,.94165,.99314,.98387,.93028,.93377,1.35125,1.07514,1.10687,.93491,1.04232,1.00351,1.14236,1.07514,.94165,1.07514,1.00351,.79429,1,1,1,1,1,1,1,1,1,1,1,1,1.09097,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.93503,1,1,1,1,1,1,1,1,1,1,1,1,.96609,1,1,1,1,1,1,1.06777,1.02197,1.06777,1.02197,1.06777,1.02197,.91142,.96752,1,1.21261,.89903,1,1,.75155,1.04745,1.04745,1.04745,1.04394,.98633,.98633,.98633,.72959,.72959,1.20502,.91406,1.26514,1.222,1.02956,1.03372,1.03372,.96039,1.24633,1,1.09125,.93327,1.03336,1.16541,1.036,1,1,1,.771,1,1,1.15574,1.15574,1.15574,1.15574,.86364,.94434,.86279,.94434,.86224,1,1,1.16798,1,.96085,.90068,1.21237,1.18416,1.13904,.69825,.9716,2.10339,1.29004,1.29004,1.21339,1.29004,1.29004,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.42603,1,.99862,.99862,1,.87025,.87025,.87025,.87025,1.18775,1.42603,1,1.42603,1.42603,.99862,1,1,1,1,1,1.2886,1.04315,1.15296,1.34163,1,1,1,1.13269,1.13269,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.SegoeuiBoldItalicFactors=w;const P={lineHeight:1.33008,lineGap:0};D.SegoeuiBoldItalicMetrics=P;const e=[1.76738,1,1,.98946,1.14763,1.05365,1.06234,.96927,.92586,1.15373,1.18414,.91349,.91349,1.07403,1.17308,.78383,1.20088,.78383,1.42531,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.78383,.78383,1.17308,1.17308,1.17308,.77349,.94565,.94729,.85944,.88506,.9858,.74817,.80016,.88449,.98039,.95782,.69238,.89898,.83231,.98183,1.03989,.96924,.86237,.96924,.80595,.74524,.86091,.95402,.94143,.98448,.8858,.83089,.93285,1.0949,1.39016,1.0949,1.45994,.74627,1.04839,.97454,.97454,.87207,.97454,.87533,1.06151,.97454,1.00176,1.16484,1.08132,.98047,1.16484,1.02989,1.01054,.96225,.97454,.97454,1.06598,.79004,1.16344,1.00351,.94629,.9973,.91016,.96777,.9043,.91082,.92481,.91082,1.17308,.95748,.96927,.96927,1,.96927,.92481,.80597,1.04839,1.23393,1.1781,.9245,1.17308,1.20808,.63218,.94261,1.24822,1.09971,1.09971,1.04839,1,.85273,.78032,1.04839,1.09971,1.22326,.9245,1.09836,1.13525,1.15222,.70424,.94729,.94729,.94729,.94729,.94729,.94729,.85498,.88506,.74817,.74817,.74817,.74817,.95782,.95782,.95782,.95782,.9858,1.03989,.96924,.96924,.96924,.96924,.96924,1.17308,.96924,.95402,.95402,.95402,.95402,.83089,.86237,.88409,.97454,.97454,.97454,.97454,.97454,.97454,.92916,.87207,.87533,.87533,.87533,.87533,.93146,.93146,.93146,.93146,.93854,1.01054,.96225,.96225,.96225,.96225,.96225,1.24822,.8761,1.00351,1.00351,1.00351,1.00351,.96777,.97454,.96777,.94729,.97454,.94729,.97454,.94729,.97454,.88506,.87207,.88506,.87207,.88506,.87207,.88506,.87207,.9858,.95391,.9858,.97454,.74817,.87533,.74817,.87533,.74817,.87533,.74817,.87533,.74817,.87533,.88449,.97454,.88449,.97454,.88449,.97454,1,1,.98039,1.00176,.98039,1.00176,.95782,.93146,.95782,.93146,.95782,.93146,.95782,1.16484,.95782,.93146,.84421,1.12761,.69238,1.08132,1,1,.98047,.83231,1.16484,1,1,.84723,1.04861,.84723,.78755,.83231,1.23736,1.03989,1.01054,1,1,1.03989,1.01054,.9857,1.03849,1.01054,.96924,.96225,.96924,.96225,.96924,.96225,.92383,.90171,.80595,1.06598,1,1,.80595,1.06598,.74524,.79004,.74524,.79004,.74524,.79004,.74524,.79004,1,1,.86091,1.02759,.85771,1.16344,.95402,1.00351,.95402,1.00351,.95402,1.00351,.95402,1.00351,.95402,1.00351,.95402,1.00351,.98448,.9973,.83089,.96777,.83089,.93285,.9043,.93285,.9043,.93285,.9043,1.31868,.96927,.94729,.97454,.85498,.92916,.96924,.8761,1,1,.86091,1.16344,1.04839,1.04839,1.04839,1.04839,1.04839,1.04839,1.04839,1.04839,1.04839,.81965,.81965,.94729,.78032,.71022,.90883,.84171,.99877,.77596,1.05734,1.2,.94729,.85944,.82791,.9607,.74817,.93285,.98039,.96924,.95782,.89898,.98316,.98183,1.03989,.78614,.96924,.97642,.86237,.86075,.86091,.83089,.90082,.8858,.97296,1.01284,.95782,.83089,1.0976,1.04,1.03342,1.2,1.0675,1.0976,.98205,1.03809,1.05097,1.04,.95364,1.03342,1.05401,1.2,1.02148,1.0119,1.04724,1.0127,1.02732,.96225,.8965,.97783,.93574,.94818,1.30679,1.0675,1.11826,.99821,1.0557,1.0326,1.2,1.0675,.96225,1.0675,1.0326,.74817,1,1,1,1,1,1,1,1,1,1,1,1,1.03754,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.87533,1,1,1,1,1,1,1,1,1,1,1,1,.98705,1,1,1,1,1,1,.98448,.9973,.98448,.9973,.98448,.9973,.83089,.96777,1,1.20088,.89903,1,1,.75155,.94945,.94945,.94945,.94945,1.12317,1.12317,1.12317,.67603,.67603,1.15621,.73584,1.21191,1.22135,1.06483,.94868,.94868,.95996,1.24633,1,1.07497,.87709,.96927,1.01473,.96927,1,1,1,.77295,1,1,1.09836,1.09836,1.09836,1.01522,.86321,.94434,.8649,.94434,.86182,1,1,1.083,1,.91578,.86438,1.17308,1.18416,1.14589,.69825,.97622,1.96791,1.24822,1.24822,1.17308,1.24822,1.24822,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.42603,1,.99862,.99862,1,.87025,.87025,.87025,.87025,1.17984,1.42603,1,1.42603,1.42603,.99862,1,1,1,1,1,1.2886,1.04315,1.15296,1.34163,1,1,1,1.10742,1.10742,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];D.SegoeuiItalicFactors=e;const t={lineHeight:1.33008,lineGap:0};D.SegoeuiItalicMetrics=t;const o=[1.76738,1,1,.98594,1.02285,1.10454,1.06234,.96927,.92037,1.19985,1.2046,.90616,.90616,1.07152,1.1714,.78032,1.20088,.78032,1.40246,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.96927,.78032,.78032,1.1714,1.1714,1.1714,.80597,.94084,.96706,.85944,.85734,.97093,.75842,.79936,.88198,.9831,.95782,.71387,.86969,.84636,1.07796,1.03584,.96924,.83968,.96924,.82826,.79649,.85771,.95132,.93119,.98965,.88433,.8287,.93365,1.08612,1.3638,1.08612,1.45786,.74627,.80499,.91484,1.05707,.92383,1.05882,.9403,1.12654,1.05882,1.01756,1.09011,1.09011,.99414,1.09011,1.034,1.01756,1.05356,1.05707,1.05882,1.04399,.84863,1.21968,1.01756,.95801,1.00068,.91797,.96777,.9043,.90351,.92105,.90351,1.1714,.85337,.96927,.96927,.99912,.96927,.92105,.80597,1.2434,1.20808,1.05937,.90957,1.1714,1.20808,.75155,.94261,1.24644,1.09971,1.09971,.84751,1,.85273,.78032,.61584,1.05425,1.17914,.90957,1.08665,1.11593,1.14169,.73381,.96706,.96706,.96706,.96706,.96706,.96706,.86035,.85734,.75842,.75842,.75842,.75842,.95782,.95782,.95782,.95782,.97093,1.03584,.96924,.96924,.96924,.96924,.96924,1.1714,.96924,.95132,.95132,.95132,.95132,.8287,.83968,.89049,.91484,.91484,.91484,.91484,.91484,.91484,.93575,.92383,.9403,.9403,.9403,.9403,.8717,.8717,.8717,.8717,1.00527,1.01756,1.05356,1.05356,1.05356,1.05356,1.05356,1.24644,.95923,1.01756,1.01756,1.01756,1.01756,.96777,1.05707,.96777,.96706,.91484,.96706,.91484,.96706,.91484,.85734,.92383,.85734,.92383,.85734,.92383,.85734,.92383,.97093,1.0969,.97093,1.05882,.75842,.9403,.75842,.9403,.75842,.9403,.75842,.9403,.75842,.9403,.88198,1.05882,.88198,1.05882,.88198,1.05882,1,1,.9831,1.01756,.9831,1.01756,.95782,.8717,.95782,.8717,.95782,.8717,.95782,1.09011,.95782,.8717,.84784,1.11551,.71387,1.09011,1,1,.99414,.84636,1.09011,1,1,.84636,1.0536,.84636,.94298,.84636,1.23297,1.03584,1.01756,1,1,1.03584,1.01756,1.00323,1.03444,1.01756,.96924,1.05356,.96924,1.05356,.96924,1.05356,.93066,.98293,.82826,1.04399,1,1,.82826,1.04399,.79649,.84863,.79649,.84863,.79649,.84863,.79649,.84863,1,1,.85771,1.17318,.85771,1.21968,.95132,1.01756,.95132,1.01756,.95132,1.01756,.95132,1.01756,.95132,1.01756,.95132,1.01756,.98965,1.00068,.8287,.96777,.8287,.93365,.9043,.93365,.9043,.93365,.9043,1.08571,.96927,.96706,.91484,.86035,.93575,.96924,.95923,1,1,.85771,1.21968,1.11437,1.11437,.93109,.91202,.60411,.84164,.55572,1.01173,.97361,.81818,.81818,.96635,.78032,.72727,.92366,.98601,1.03405,.77968,1.09799,1.2,.96706,.85944,.85638,.96491,.75842,.93365,.9831,.96924,.95782,.86969,.94152,1.07796,1.03584,.78437,.96924,.98715,.83968,.83491,.85771,.8287,.94492,.88433,.9287,1.0098,.95782,.8287,1.0625,.98248,1.03424,1.2,1.01071,1.0625,.95246,1.03809,1.04912,.98248,1.00221,1.03424,1.05443,1.2,1.04785,.99609,1.00169,1.05176,.99346,1.05356,.9087,1.03004,.95542,.93117,1.23362,1.01071,1.07831,1.02512,1.05205,1.03502,1.2,1.01071,1.05356,1.01071,1.03502,.75842,1,1,1,1,1,1,1,1,1,1,1,1,1.03719,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.9403,1,1,1,1,1,1,1,1,1,1,1,1,1.04021,1,1,1,1,1,1,.98965,1.00068,.98965,1.00068,.98965,1.00068,.8287,.96777,1,1.20088,.89903,1,1,.75155,1.03077,1.03077,1.03077,1.03077,1.13196,1.13196,1.13196,.67428,.67428,1.16039,.73291,1.20996,1.22135,1.06483,.94868,.94868,.95996,1.24633,1,1.07497,.87796,.96927,1.01518,.96927,1,1,1,.77295,1,1,1.10539,1.10539,1.11358,1.06967,.86279,.94434,.86279,.94434,.86182,1,1,1.083,1,.91578,.86507,1.1714,1.18416,1.14589,.69825,.97622,1.9697,1.24822,1.24822,1.17238,1.24822,1.24822,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.42603,1,.99862,.99862,1,.87025,.87025,.87025,.87025,1.18083,1.42603,1,1.42603,1.42603,.99862,1,1,1,1,1,1.2886,1.04315,1.15296,1.34163,1,1,1,1.10938,1.10938,1,1,1,1.05425,1.09971,1.09971,1.09971,1,1,1,1,1,1,1,1,1,1,1];D.SegoeuiRegularFactors=o;const K={lineHeight:1.33008,lineGap:0};D.SegoeuiRegularMetrics=K},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PostScriptEvaluator=D.PostScriptCompiler=D.PDFFunctionFactory=void 0,D.isPDFFunction=C;var i=se(4),w=se(2),P=se(58),e=se(5),t=se(59);class o{constructor({xref:h,isEvalSupported:F=!0}){this.xref=h,this.isEvalSupported=F!==!1}create(h){const F=this.getCached(h);if(F)return F;const N=j.parse({xref:this.xref,isEvalSupported:this.isEvalSupported,fn:h instanceof i.Ref?this.xref.fetch(h):h});return this._cache(h,N),N}createFromArray(h){const F=this.getCached(h);if(F)return F;const N=j.parseArray({xref:this.xref,isEvalSupported:this.isEvalSupported,fnObj:h instanceof i.Ref?this.xref.fetch(h):h});return this._cache(h,N),N}getCached(h){var N;let F;if(h instanceof i.Ref?F=h:h instanceof i.Dict?F=h.objId:h instanceof e.BaseStream&&(F=(N=h.dict)==null?void 0:N.objId),F){const U=this._localFunctionCache.getByRef(F);if(U)return U}return null}_cache(h,F){var U;if(!F)throw new Error('PDFFunctionFactory._cache - expected "parsedFunction" argument.');let N;h instanceof i.Ref?N=h:h instanceof i.Dict?N=h.objId:h instanceof e.BaseStream&&(N=(U=h.dict)==null?void 0:U.objId),N&&this._localFunctionCache.set(null,N,F)}get _localFunctionCache(){return(0,w.shadow)(this,"_localFunctionCache",new t.LocalFunctionCache)}}D.PDFFunctionFactory=o;function K(s){if(!Array.isArray(s))return null;const h=s.length;for(let F=0;F<h;F++)if(typeof s[F]!="number"){const N=new Array(h);for(let U=0;U<h;U++)N[U]=+s[U];return N}return s}class j{static getSampleArray(h,F,N,U){let g,S,m=1;for(g=0,S=h.length;g<S;g++)m*=h[g];m*=F;const r=new Array(m);let p=0,c=0;const u=1/(Gt(2,N)-1),q=U.getBytes((m*N+7)/8);let J=0;for(g=0;g<m;g++){for(;p<N;)c<<=8,c|=q[J++],p+=8;p-=N,r[g]=(c>>p)*u,c&=(1<<p)-1}return r}static parse({xref:h,isEvalSupported:F,fn:N}){const U=N.dict||N;switch(U.get("FunctionType")){case 0:return this.constructSampled({xref:h,isEvalSupported:F,fn:N,dict:U});case 1:break;case 2:return this.constructInterpolated({xref:h,isEvalSupported:F,dict:U});case 3:return this.constructStiched({xref:h,isEvalSupported:F,dict:U});case 4:return this.constructPostScript({xref:h,isEvalSupported:F,fn:N,dict:U})}throw new w.FormatError("Unknown type of function")}static parseArray({xref:h,isEvalSupported:F,fnObj:N}){if(!Array.isArray(N))return this.parse({xref:h,isEvalSupported:F,fn:N});const U=[];for(const g of N)U.push(this.parse({xref:h,isEvalSupported:F,fn:h.fetchIfRef(g)}));return function(g,S,m,r){for(let p=0,c=U.length;p<c;p++)U[p](g,S,m,r+p)}}static constructSampled({xref:h,isEvalSupported:F,fn:N,dict:U}){function g(_){const ie=_.length,L=[];let oe=0;for(let T=0;T<ie;T+=2)L[oe++]=[_[T],_[T+1]];return L}function S(_,ie,L,oe,T){return oe+(_-ie)*((T-oe)/(L-ie))}let m=K(U.getArray("Domain")),r=K(U.getArray("Range"));if(!m||!r)throw new w.FormatError("No domain or range");const p=m.length/2,c=r.length/2;m=g(m),r=g(r);const u=K(U.getArray("Size")),q=U.get("BitsPerSample"),J=U.get("Order")||1;J!==1&&(0,w.info)("No support for cubic spline interpolation: "+J);let G=K(U.getArray("Encode"));if(G)G=g(G);else{G=[];for(let _=0;_<p;++_)G.push([0,u[_]-1])}let W=K(U.getArray("Decode"));W=W?g(W):r;const ce=this.getSampleArray(u,c,q,N);return function(ie,L,oe,T){const Q=1<<p,v=new Float64Array(Q),$=new Uint32Array(Q);let Z,te;for(te=0;te<Q;te++)v[te]=1;let ne=c,X=1;for(Z=0;Z<p;++Z){const re=m[Z][0],ae=m[Z][1],z=Math.min(Math.max(ie[L+Z],re),ae);let le=S(z,re,ae,G[Z][0],G[Z][1]);const ue=u[Z];le=Math.min(Math.max(le,0),ue-1);const ge=le<ue-1?Math.floor(le):le-1,ke=ge+1-le,me=le-ge,fe=ge*ne,xe=fe+ne;for(te=0;te<Q;te++)te&X?(v[te]*=me,$[te]+=xe):(v[te]*=ke,$[te]+=fe);ne*=ue,X<<=1}for(te=0;te<c;++te){let re=0;for(Z=0;Z<Q;Z++)re+=ce[$[Z]+te]*v[Z];re=S(re,0,1,W[te][0],W[te][1]),oe[T+te]=Math.min(Math.max(re,r[te][0]),r[te][1])}}}static constructInterpolated({xref:h,isEvalSupported:F,dict:N}){const U=K(N.getArray("C0"))||[0],g=K(N.getArray("C1"))||[1],S=N.get("N"),m=[];for(let p=0,c=U.length;p<c;++p)m.push(g[p]-U[p]);const r=m.length;return function(c,u,q,J){const G=S===1?c[u]:Gt(c[u],S);for(let W=0;W<r;++W)q[J+W]=U[W]+G*m[W]}}static constructStiched({xref:h,isEvalSupported:F,dict:N}){const U=K(N.getArray("Domain"));if(!U)throw new w.FormatError("No domain");if(U.length/2!==1)throw new w.FormatError("Bad domain for stiched function");const S=[];for(const c of N.get("Functions"))S.push(this.parse({xref:h,isEvalSupported:F,fn:h.fetchIfRef(c)}));const m=K(N.getArray("Bounds")),r=K(N.getArray("Encode")),p=new Float32Array(1);return function(u,q,J,G){const ce=function($,Z,te){return $>te?$=te:$<Z&&($=Z),$}(u[q],U[0],U[1]),_=m.length;let ie;for(ie=0;ie<_&&!(ce<m[ie]);++ie);let L=U[0];ie>0&&(L=m[ie-1]);let oe=U[1];ie<m.length&&(oe=m[ie]);const T=r[2*ie],Q=r[2*ie+1];p[0]=L===oe?T:T+(ce-L)*(Q-T)/(oe-L),S[ie](p,0,J,G)}}static constructPostScript({xref:h,isEvalSupported:F,fn:N,dict:U}){const g=K(U.getArray("Domain")),S=K(U.getArray("Range"));if(!g)throw new w.FormatError("No domain.");if(!S)throw new w.FormatError("No range.");const m=new P.PostScriptLexer(N),p=new P.PostScriptParser(m).parse();if(F&&w.FeatureTest.isEvalSupported){const _=new x().compile(p,g,S);if(_)return new Function("src","srcOffset","dest","destOffset",_)}(0,w.info)("Unable to compile PS function");const c=S.length>>1,u=g.length>>1,q=new d(p),J=Object.create(null);let W=2048*4;const ce=new Float32Array(u);return function(ie,L,oe,T){let Q,v,$="";const Z=ce;for(Q=0;Q<u;Q++)v=ie[L+Q],Z[Q]=v,$+=v+"_";const te=J[$];if(te!==void 0){oe.set(te,T);return}const ne=new Float32Array(c),X=q.execute(Z),re=X.length-c;for(Q=0;Q<c;Q++){v=X[re+Q];let ae=S[Q*2];v<ae?v=ae:(ae=S[Q*2+1],v>ae&&(v=ae)),ne[Q]=v}W>0&&(W--,J[$]=ne),oe.set(ne,T)}}}function C(s){let h;if(s instanceof i.Dict)h=s;else if(s instanceof e.BaseStream)h=s.dict;else return!1;return h.has("FunctionType")}const H=class H{constructor(h){this.stack=h?Array.from(h):[]}push(h){if(this.stack.length>=H.MAX_STACK_SIZE)throw new Error("PostScript function stack overflow.");this.stack.push(h)}pop(){if(this.stack.length<=0)throw new Error("PostScript function stack underflow.");return this.stack.pop()}copy(h){if(this.stack.length+h>=H.MAX_STACK_SIZE)throw new Error("PostScript function stack overflow.");const F=this.stack;for(let N=F.length-h,U=h-1;U>=0;U--,N++)F.push(F[N])}index(h){this.push(this.stack[this.stack.length-h-1])}roll(h,F){const N=this.stack,U=N.length-h,g=N.length-1,S=U+(F-Math.floor(F/h)*h);for(let m=U,r=g;m<r;m++,r--){const p=N[m];N[m]=N[r],N[r]=p}for(let m=U,r=S-1;m<r;m++,r--){const p=N[m];N[m]=N[r],N[r]=p}for(let m=S,r=g;m<r;m++,r--){const p=N[m];N[m]=N[r],N[r]=p}}};jt(H,"MAX_STACK_SIZE",100);let O=H;class d{constructor(h){this.operators=h}execute(h){const F=new O(h);let N=0;const U=this.operators,g=U.length;let S,m,r;for(;N<g;){if(S=U[N++],typeof S=="number"){F.push(S);continue}switch(S){case"jz":r=F.pop(),m=F.pop(),m||(N=r);break;case"j":m=F.pop(),N=m;break;case"abs":m=F.pop(),F.push(Math.abs(m));break;case"add":r=F.pop(),m=F.pop(),F.push(m+r);break;case"and":r=F.pop(),m=F.pop(),typeof m=="boolean"&&typeof r=="boolean"?F.push(m&&r):F.push(m&r);break;case"atan":r=F.pop(),m=F.pop(),m=Math.atan2(m,r)/Math.PI*180,m<0&&(m+=360),F.push(m);break;case"bitshift":r=F.pop(),m=F.pop(),m>0?F.push(m<<r):F.push(m>>r);break;case"ceiling":m=F.pop(),F.push(Math.ceil(m));break;case"copy":m=F.pop(),F.copy(m);break;case"cos":m=F.pop(),F.push(Math.cos(m%360/180*Math.PI));break;case"cvi":m=F.pop()|0,F.push(m);break;case"cvr":break;case"div":r=F.pop(),m=F.pop(),F.push(m/r);break;case"dup":F.copy(1);break;case"eq":r=F.pop(),m=F.pop(),F.push(m===r);break;case"exch":F.roll(2,1);break;case"exp":r=F.pop(),m=F.pop(),F.push(Gt(m,r));break;case"false":F.push(!1);break;case"floor":m=F.pop(),F.push(Math.floor(m));break;case"ge":r=F.pop(),m=F.pop(),F.push(m>=r);break;case"gt":r=F.pop(),m=F.pop(),F.push(m>r);break;case"idiv":r=F.pop(),m=F.pop(),F.push(m/r|0);break;case"index":m=F.pop(),F.index(m);break;case"le":r=F.pop(),m=F.pop(),F.push(m<=r);break;case"ln":m=F.pop(),F.push(Math.log(m));break;case"log":m=F.pop(),F.push(Math.log10(m));break;case"lt":r=F.pop(),m=F.pop(),F.push(m<r);break;case"mod":r=F.pop(),m=F.pop(),F.push(m%r);break;case"mul":r=F.pop(),m=F.pop(),F.push(m*r);break;case"ne":r=F.pop(),m=F.pop(),F.push(m!==r);break;case"neg":m=F.pop(),F.push(-m);break;case"not":m=F.pop(),typeof m=="boolean"?F.push(!m):F.push(~m);break;case"or":r=F.pop(),m=F.pop(),typeof m=="boolean"&&typeof r=="boolean"?F.push(m||r):F.push(m|r);break;case"pop":F.pop();break;case"roll":r=F.pop(),m=F.pop(),F.roll(m,r);break;case"round":m=F.pop(),F.push(Math.round(m));break;case"sin":m=F.pop(),F.push(Math.sin(m%360/180*Math.PI));break;case"sqrt":m=F.pop(),F.push(Math.sqrt(m));break;case"sub":r=F.pop(),m=F.pop(),F.push(m-r);break;case"true":F.push(!0);break;case"truncate":m=F.pop(),m=m<0?Math.ceil(m):Math.floor(m),F.push(m);break;case"xor":r=F.pop(),m=F.pop(),typeof m=="boolean"&&typeof r=="boolean"?F.push(m!==r):F.push(m^r);break;default:throw new w.FormatError(`Unknown operator ${S}`)}}return F.stack}}D.PostScriptEvaluator=d;class A{constructor(h){this.type=h}visit(h){(0,w.unreachable)("abstract method")}}class n extends A{constructor(h,F,N){super("args"),this.index=h,this.min=F,this.max=N}visit(h){h.visitArgument(this)}}class I extends A{constructor(h){super("literal"),this.number=h,this.min=h,this.max=h}visit(h){h.visitLiteral(this)}}class k extends A{constructor(h,F,N,U,g){super("binary"),this.op=h,this.arg1=F,this.arg2=N,this.min=U,this.max=g}visit(h){h.visitBinaryOperation(this)}}class y extends A{constructor(h,F){super("max"),this.arg=h,this.min=h.min,this.max=F}visit(h){h.visitMin(this)}}class f extends A{constructor(h,F,N){super("var"),this.index=h,this.min=F,this.max=N}visit(h){h.visitVariable(this)}}class R extends A{constructor(h,F){super("definition"),this.variable=h,this.arg=F}visit(h){h.visitVariableDefinition(this)}}class E{constructor(){this.parts=[]}visitArgument(h){this.parts.push("Math.max(",h.min,", Math.min(",h.max,", src[srcOffset + ",h.index,"]))")}visitVariable(h){this.parts.push("v",h.index)}visitLiteral(h){this.parts.push(h.number)}visitBinaryOperation(h){this.parts.push("("),h.arg1.visit(this),this.parts.push(" ",h.op," "),h.arg2.visit(this),this.parts.push(")")}visitVariableDefinition(h){this.parts.push("var "),h.variable.visit(this),this.parts.push(" = "),h.arg.visit(this),this.parts.push(";")}visitMin(h){this.parts.push("Math.min("),h.arg.visit(this),this.parts.push(", ",h.max,")")}toString(){return this.parts.join("")}}function M(s,h){return h.type==="literal"&&h.number===0?s:s.type==="literal"&&s.number===0?h:h.type==="literal"&&s.type==="literal"?new I(s.number+h.number):new k("+",s,h,s.min+h.min,s.max+h.max)}function b(s,h){if(h.type==="literal"){if(h.number===0)return new I(0);if(h.number===1)return s;if(s.type==="literal")return new I(s.number*h.number)}if(s.type==="literal"){if(s.number===0)return new I(0);if(s.number===1)return h}const F=Math.min(s.min*h.min,s.min*h.max,s.max*h.min,s.max*h.max),N=Math.max(s.min*h.min,s.min*h.max,s.max*h.min,s.max*h.max);return new k("*",s,h,F,N)}function V(s,h){if(h.type==="literal"){if(h.number===0)return s;if(s.type==="literal")return new I(s.number-h.number)}return h.type==="binary"&&h.op==="-"&&s.type==="literal"&&s.number===1&&h.arg1.type==="literal"&&h.arg1.number===1?h.arg2:new k("-",s,h,s.min-h.max,s.max-h.min)}function l(s,h){return s.min>=h?new I(h):s.max<=h?s:new y(s,h)}class x{compile(h,F,N){const U=[],g=[],S=F.length>>1,m=N.length>>1;let r=0,p,c,u,q,J,G,W,ce;for(let ie=0;ie<S;ie++)U.push(new n(ie,F[ie*2],F[ie*2+1]));for(let ie=0,L=h.length;ie<L;ie++){if(ce=h[ie],typeof ce=="number"){U.push(new I(ce));continue}switch(ce){case"add":if(U.length<2)return null;q=U.pop(),u=U.pop(),U.push(M(u,q));break;case"cvr":if(U.length<1)return null;break;case"mul":if(U.length<2)return null;q=U.pop(),u=U.pop(),U.push(b(u,q));break;case"sub":if(U.length<2)return null;q=U.pop(),u=U.pop(),U.push(V(u,q));break;case"exch":if(U.length<2)return null;J=U.pop(),G=U.pop(),U.push(J,G);break;case"pop":if(U.length<1)return null;U.pop();break;case"index":if(U.length<1||(u=U.pop(),u.type!=="literal")||(p=u.number,p<0||!Number.isInteger(p)||U.length<p))return null;if(J=U[U.length-p-1],J.type==="literal"||J.type==="var"){U.push(J);break}W=new f(r++,J.min,J.max),U[U.length-p-1]=W,U.push(W),g.push(new R(W,J));break;case"dup":if(U.length<1)return null;if(typeof h[ie+1]=="number"&&h[ie+2]==="gt"&&h[ie+3]===ie+7&&h[ie+4]==="jz"&&h[ie+5]==="pop"&&h[ie+6]===h[ie+1]){u=U.pop(),U.push(l(u,h[ie+1])),ie+=6;break}if(J=U.at(-1),J.type==="literal"||J.type==="var"){U.push(J);break}W=new f(r++,J.min,J.max),U[U.length-1]=W,U.push(W),g.push(new R(W,J));break;case"roll":if(U.length<2||(q=U.pop(),u=U.pop(),q.type!=="literal"||u.type!=="literal")||(c=q.number,p=u.number,p<=0||!Number.isInteger(p)||!Number.isInteger(c)||U.length<p))return null;if(c=(c%p+p)%p,c===0)break;U.push(...U.splice(U.length-p,p-c));break;default:return null}}if(U.length!==m)return null;const _=[];for(const ie of g){const L=new E;ie.visit(L),_.push(L.toString())}for(let ie=0,L=U.length;ie<L;ie++){const oe=U[ie],T=new E;oe.visit(T);const Q=N[ie*2],v=N[ie*2+1],$=[T.toString()];Q>oe.min&&($.unshift("Math.max(",Q,", "),$.push(")")),v<oe.max&&($.unshift("Math.min(",v,", "),$.push(")")),$.unshift("dest[destOffset + ",ie,"] = "),$.push(";"),_.push($.join(""))}return _.join(`
`)}}D.PostScriptCompiler=x},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PostScriptParser=D.PostScriptLexer=void 0;var i=se(2),w=se(4),P=se(3);class e{constructor(C){this.lexer=C,this.operators=[],this.token=null,this.prev=null}nextToken(){this.prev=this.token,this.token=this.lexer.getToken()}accept(C){return this.token.type===C?(this.nextToken(),!0):!1}expect(C){if(this.accept(C))return!0;throw new i.FormatError(`Unexpected symbol: found ${this.token.type} expected ${C}.`)}parse(){return this.nextToken(),this.expect(t.LBRACE),this.parseBlock(),this.expect(t.RBRACE),this.operators}parseBlock(){for(;;)if(this.accept(t.NUMBER))this.operators.push(this.prev.value);else if(this.accept(t.OPERATOR))this.operators.push(this.prev.value);else if(this.accept(t.LBRACE))this.parseCondition();else return}parseCondition(){const C=this.operators.length;if(this.operators.push(null,null),this.parseBlock(),this.expect(t.RBRACE),this.accept(t.IF))this.operators[C]=this.operators.length,this.operators[C+1]="jz";else if(this.accept(t.LBRACE)){const O=this.operators.length;this.operators.push(null,null);const d=this.operators.length;this.parseBlock(),this.expect(t.RBRACE),this.expect(t.IFELSE),this.operators[O]=this.operators.length,this.operators[O+1]="j",this.operators[C]=d,this.operators[C+1]="jz"}else throw new i.FormatError("PS Function: error parsing conditional.")}}D.PostScriptParser=e;const t={LBRACE:0,RBRACE:1,NUMBER:2,OPERATOR:3,IF:4,IFELSE:5};class o{static get opCache(){return(0,i.shadow)(this,"opCache",Object.create(null))}constructor(C,O){this.type=C,this.value=O}static getOperator(C){var O;return(O=o.opCache)[C]||(O[C]=new o(t.OPERATOR,C))}static get LBRACE(){return(0,i.shadow)(this,"LBRACE",new o(t.LBRACE,"{"))}static get RBRACE(){return(0,i.shadow)(this,"RBRACE",new o(t.RBRACE,"}"))}static get IF(){return(0,i.shadow)(this,"IF",new o(t.IF,"IF"))}static get IFELSE(){return(0,i.shadow)(this,"IFELSE",new o(t.IFELSE,"IFELSE"))}}class K{constructor(C){this.stream=C,this.nextChar(),this.strBuf=[]}nextChar(){return this.currentChar=this.stream.getByte()}getToken(){let C=!1,O=this.currentChar;for(;;){if(O<0)return w.EOF;if(C)(O===10||O===13)&&(C=!1);else if(O===37)C=!0;else if(!(0,P.isWhiteSpace)(O))break;O=this.nextChar()}switch(O|0){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 43:case 45:case 46:return new o(t.NUMBER,this.getNumber());case 123:return this.nextChar(),o.LBRACE;case 125:return this.nextChar(),o.RBRACE}const d=this.strBuf;for(d.length=0,d[0]=String.fromCharCode(O);(O=this.nextChar())>=0&&(O>=65&&O<=90||O>=97&&O<=122);)d.push(String.fromCharCode(O));const A=d.join("");switch(A.toLowerCase()){case"if":return o.IF;case"ifelse":return o.IFELSE;default:return o.getOperator(A)}}getNumber(){let C=this.currentChar;const O=this.strBuf;for(O.length=0,O[0]=String.fromCharCode(C);(C=this.nextChar())>=0&&(C>=48&&C<=57||C===45||C===46);)O.push(String.fromCharCode(C));const d=parseFloat(O.join(""));if(isNaN(d))throw new i.FormatError(`Invalid floating point number: ${d}`);return d}}D.PostScriptLexer=K},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.RegionalImageCache=D.LocalTilingPatternCache=D.LocalImageCache=D.LocalGStateCache=D.LocalFunctionCache=D.LocalColorSpaceCache=D.GlobalImageCache=void 0;var i=se(2),w=se(4);class P{constructor(n){this.constructor===P&&(0,i.unreachable)("Cannot initialize BaseLocalCache."),this._onlyRefs=(n==null?void 0:n.onlyRefs)===!0,this._onlyRefs||(this._nameRefMap=new Map,this._imageMap=new Map),this._imageCache=new w.RefSetCache}getByName(n){this._onlyRefs&&(0,i.unreachable)("Should not call `getByName` method.");const I=this._nameRefMap.get(n);return I?this.getByRef(I):this._imageMap.get(n)||null}getByRef(n){return this._imageCache.get(n)||null}set(n,I,k){(0,i.unreachable)("Abstract method `set` called.")}}class e extends P{set(n,I=null,k){if(typeof n!="string")throw new Error('LocalImageCache.set - expected "name" argument.');if(I){if(this._imageCache.has(I))return;this._nameRefMap.set(n,I),this._imageCache.put(I,k);return}this._imageMap.has(n)||this._imageMap.set(n,k)}}D.LocalImageCache=e;class t extends P{set(n=null,I=null,k){if(typeof n!="string"&&!I)throw new Error('LocalColorSpaceCache.set - expected "name" and/or "ref" argument.');if(I){if(this._imageCache.has(I))return;n!==null&&this._nameRefMap.set(n,I),this._imageCache.put(I,k);return}this._imageMap.has(n)||this._imageMap.set(n,k)}}D.LocalColorSpaceCache=t;class o extends P{constructor(n){super({onlyRefs:!0})}set(n=null,I,k){if(!I)throw new Error('LocalFunctionCache.set - expected "ref" argument.');this._imageCache.has(I)||this._imageCache.put(I,k)}}D.LocalFunctionCache=o;class K extends P{set(n,I=null,k){if(typeof n!="string")throw new Error('LocalGStateCache.set - expected "name" argument.');if(I){if(this._imageCache.has(I))return;this._nameRefMap.set(n,I),this._imageCache.put(I,k);return}this._imageMap.has(n)||this._imageMap.set(n,k)}}D.LocalGStateCache=K;class j extends P{constructor(n){super({onlyRefs:!0})}set(n=null,I,k){if(!I)throw new Error('LocalTilingPatternCache.set - expected "ref" argument.');this._imageCache.has(I)||this._imageCache.put(I,k)}}D.LocalTilingPatternCache=j;class C extends P{constructor(n){super({onlyRefs:!0})}set(n=null,I,k){if(!I)throw new Error('RegionalImageCache.set - expected "ref" argument.');this._imageCache.has(I)||this._imageCache.put(I,k)}}D.RegionalImageCache=C;const d=class d{constructor(){this._refCache=new w.RefSetCache,this._imageCache=new w.RefSetCache}get _byteSize(){let n=0;for(const I of this._imageCache)n+=I.byteSize;return n}get _cacheLimitReached(){return!(this._imageCache.size<d.MIN_IMAGES_TO_CACHE||this._byteSize<d.MAX_BYTE_SIZE)}shouldCache(n,I){let k=this._refCache.get(n);return k||(k=new Set,this._refCache.put(n,k)),k.add(I),!(k.size<d.NUM_PAGES_THRESHOLD||!this._imageCache.has(n)&&this._cacheLimitReached)}addByteSize(n,I){const k=this._imageCache.get(n);k&&(k.byteSize||(k.byteSize=I))}getData(n,I){const k=this._refCache.get(n);if(!k||k.size<d.NUM_PAGES_THRESHOLD)return null;const y=this._imageCache.get(n);return y?(k.add(I),y):null}setData(n,I){if(!this._refCache.has(n))throw new Error('GlobalImageCache.setData - expected "shouldCache" to have been called.');if(!this._imageCache.has(n)){if(this._cacheLimitReached){(0,i.warn)("GlobalImageCache.setData - cache limit reached.");return}this._imageCache.put(n,I)}}clear(n=!1){n||this._refCache.clear(),this._imageCache.clear()}};jt(d,"NUM_PAGES_THRESHOLD",2),jt(d,"MIN_IMAGES_TO_CACHE",10),jt(d,"MAX_BYTE_SIZE",5*i.MAX_IMAGE_SIZE_TO_CACHE);let O=d;D.GlobalImageCache=O},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.bidi=A;var i=se(2);const w=["BN","BN","BN","BN","BN","BN","BN","BN","BN","S","B","S","WS","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","B","B","B","S","WS","ON","ON","ET","ET","ET","ON","ON","ON","ON","ON","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","ON","ON","ON","ON","ON","ON","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","ON","ON","ON","ON","ON","ON","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","ON","ON","ON","ON","BN","BN","BN","BN","BN","BN","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","CS","ON","ET","ET","ET","ET","ON","ON","ON","ON","L","ON","ON","BN","ON","ON","ET","ET","EN","EN","ON","L","ON","ON","ON","EN","L","ON","ON","ON","ON","ON","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","ON","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","ON","L","L","L","L","L","L","L","L"],P=["AN","AN","AN","AN","AN","AN","ON","ON","AL","ET","ET","AL","CS","AL","ON","ON","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","AN","AN","AN","AN","AN","AN","AN","AN","AN","ET","AN","AN","AL","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","ON","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","NSM","NSM","ON","NSM","NSM","NSM","NSM","AL","AL","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","AL","AL","AL","AL","AL","AL"];function e(n){return(n&1)!==0}function t(n){return(n&1)===0}function o(n,I,k){let y,f;for(y=I,f=n.length;y<f;++y)if(n[y]!==k)return y;return y}function K(n,I,k,y){for(let f=I;f<k;++f)n[f]=y}function j(n,I,k){for(let y=I,f=k-1;y<f;++y,--f){const R=n[y];n[y]=n[f],n[f]=R}}function C(n,I,k=!1){let y="ltr";return k?y="ttb":I||(y="rtl"),{str:n,dir:y}}const O=[],d=[];function A(n,I=-1,k=!1){let y=!0;const f=n.length;if(f===0||k)return C(n,y,k);O.length=f,d.length=f;let R=0,E,M;for(E=0;E<f;++E){O[E]=n.charAt(E);const U=n.charCodeAt(E);let g="L";U<=255?g=w[U]:1424<=U&&U<=1524?g="R":1536<=U&&U<=1791?(g=P[U&255],g||(0,i.warn)("Bidi: invalid Unicode character "+U.toString(16))):(1792<=U&&U<=2220||64336<=U&&U<=65023||65136<=U&&U<=65279)&&(g="AL"),(g==="R"||g==="AL"||g==="AN")&&R++,d[E]=g}if(R===0)return y=!0,C(n,y);I===-1&&(R/f<.3&&f>4?(y=!0,I=0):(y=!1,I=1));const b=[];for(E=0;E<f;++E)b[E]=I;const V=e(I)?"R":"L",l=V,x=l;let H=l;for(E=0;E<f;++E)d[E]==="NSM"?d[E]=H:H=d[E];H=l;let s;for(E=0;E<f;++E)s=d[E],s==="EN"?d[E]=H==="AL"?"AN":"EN":(s==="R"||s==="L"||s==="AL")&&(H=s);for(E=0;E<f;++E)s=d[E],s==="AL"&&(d[E]="R");for(E=1;E<f-1;++E)d[E]==="ES"&&d[E-1]==="EN"&&d[E+1]==="EN"&&(d[E]="EN"),d[E]==="CS"&&(d[E-1]==="EN"||d[E-1]==="AN")&&d[E+1]===d[E-1]&&(d[E]=d[E-1]);for(E=0;E<f;++E)if(d[E]==="EN"){for(let U=E-1;U>=0&&d[U]==="ET";--U)d[U]="EN";for(let U=E+1;U<f&&d[U]==="ET";++U)d[U]="EN"}for(E=0;E<f;++E)s=d[E],(s==="WS"||s==="ES"||s==="ET"||s==="CS")&&(d[E]="ON");for(H=l,E=0;E<f;++E)s=d[E],s==="EN"?d[E]=H==="L"?"L":"EN":(s==="R"||s==="L")&&(H=s);for(E=0;E<f;++E)if(d[E]==="ON"){const U=o(d,E+1,"ON");let g=l;E>0&&(g=d[E-1]);let S=x;U+1<f&&(S=d[U+1]),g!=="L"&&(g="R"),S!=="L"&&(S="R"),g===S&&K(d,E,U,g),E=U-1}for(E=0;E<f;++E)d[E]==="ON"&&(d[E]=V);for(E=0;E<f;++E)s=d[E],t(b[E])?s==="R"?b[E]+=1:(s==="AN"||s==="EN")&&(b[E]+=2):(s==="L"||s==="AN"||s==="EN")&&(b[E]+=1);let h=-1,F=99,N;for(E=0,M=b.length;E<M;++E)N=b[E],h<N&&(h=N),F>N&&e(N)&&(F=N);for(N=h;N>=F;--N){let U=-1;for(E=0,M=b.length;E<M;++E)b[E]<N?U>=0&&(j(O,U,E),U=-1):U<0&&(U=E);U>=0&&j(O,U,b.length)}for(E=0,M=O.length;E<M;++E){const U=O[E];(U==="<"||U===">")&&(O[E]="")}return C(O.join(""),y)}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.getFontSubstitution=d;var i=se(38),w=se(3);const P={style:"normal",weight:"normal"},e={style:"normal",weight:"bold"},t={style:"italic",weight:"normal"},o={style:"italic",weight:"bold"},K=new Map([["Times-Roman",{local:["Times New Roman","Times-Roman","Times","Liberation Serif","Nimbus Roman","Nimbus Roman L","Tinos","Thorndale","TeX Gyre Termes","FreeSerif","DejaVu Serif","Bitstream Vera Serif","Ubuntu"],style:P,ultimate:"serif"}],["Times-Bold",{alias:"Times-Roman",style:e,ultimate:"serif"}],["Times-Italic",{alias:"Times-Roman",style:t,ultimate:"serif"}],["Times-BoldItalic",{alias:"Times-Roman",style:o,ultimate:"serif"}],["Helvetica",{local:["Helvetica","Helvetica Neue","Arial","Arial Nova","Liberation Sans","Arimo","Nimbus Sans","Nimbus Sans L","A030","TeX Gyre Heros","FreeSans","DejaVu Sans","Albany","Bitstream Vera Sans","Arial Unicode MS","Microsoft Sans Serif","Apple Symbols","Cantarell"],path:"LiberationSans-Regular.ttf",style:P,ultimate:"sans-serif"}],["Helvetica-Bold",{alias:"Helvetica",path:"LiberationSans-Bold.ttf",style:e,ultimate:"sans-serif"}],["Helvetica-Oblique",{alias:"Helvetica",path:"LiberationSans-Italic.ttf",style:t,ultimate:"sans-serif"}],["Helvetica-BoldOblique",{alias:"Helvetica",path:"LiberationSans-BoldItalic.ttf",style:o,ultimate:"sans-serif"}],["Courier",{local:["Courier","Courier New","Liberation Mono","Nimbus Mono","Nimbus Mono L","Cousine","Cumberland","TeX Gyre Cursor","FreeMono"],style:P,ultimate:"monospace"}],["Courier-Bold",{alias:"Courier",style:e,ultimate:"monospace"}],["Courier-Oblique",{alias:"Courier",style:t,ultimate:"monospace"}],["Courier-BoldOblique",{alias:"Courier",style:o,ultimate:"monospace"}],["ArialBlack",{local:["Arial Black"],style:{style:"normal",weight:"900"},fallback:"Helvetica-Bold"}],["ArialBlack-Bold",{alias:"ArialBlack"}],["ArialBlack-Italic",{alias:"ArialBlack",style:{style:"italic",weight:"900"},fallback:"Helvetica-BoldOblique"}],["ArialBlack-BoldItalic",{alias:"ArialBlack-Italic"}],["ArialNarrow",{local:["Arial Narrow","Liberation Sans Narrow","Helvetica Condensed","Nimbus Sans Narrow","TeX Gyre Heros Cn"],style:P,fallback:"Helvetica"}],["ArialNarrow-Bold",{alias:"ArialNarrow",style:e,fallback:"Helvetica-Bold"}],["ArialNarrow-Italic",{alias:"ArialNarrow",style:t,fallback:"Helvetica-Oblique"}],["ArialNarrow-BoldItalic",{alias:"ArialNarrow",style:o,fallback:"Helvetica-BoldOblique"}],["Calibri",{local:["Calibri","Carlito"],style:P,fallback:"Helvetica"}],["Calibri-Bold",{alias:"Calibri",style:e,fallback:"Helvetica-Bold"}],["Calibri-Italic",{alias:"Calibri",style:t,fallback:"Helvetica-Oblique"}],["Calibri-BoldItalic",{alias:"Calibri",style:o,fallback:"Helvetica-BoldOblique"}],["Wingdings",{local:["Wingdings","URW Dingbats"],style:P}],["Wingdings-Regular",{alias:"Wingdings"}],["Wingdings-Bold",{alias:"Wingdings"}]]),j=new Map([["Arial-Black","ArialBlack"]]);function C(A){switch(A){case e:return"Bold";case t:return"Italic";case o:return"Bold Italic";default:if((A==null?void 0:A.weight)==="bold")return"Bold";if((A==null?void 0:A.style)==="italic")return"Italic"}return""}function O({alias:A,local:n,path:I,fallback:k,style:y,ultimate:f},R,E,M=!0,b=!0,V=""){const l={style:null,ultimate:null};if(n){const x=V?` ${V}`:"";for(const H of n)R.push(`local(${H}${x})`)}if(A){const x=K.get(A),H=V||C(y);Object.assign(l,O(x,R,E,M&&!k,b&&!I,H))}if(y&&(l.style=y),f&&(l.ultimate=f),M&&k){const x=K.get(k),{ultimate:H}=O(x,R,E,M,b&&!I,V);l.ultimate||(l.ultimate=H)}return b&&I&&E&&R.push(`url(${E}${I})`),l}function d(A,n,I,k,y){k=(0,i.normalizeFontName)(k);const f=k;let R=A.get(f);if(R)return R;let E=K.get(k);if(!E){for(const[h,F]of j)if(k.startsWith(h)){k=`${F}${k.substring(h.length)}`,E=K.get(k);break}}let M=!1;E||(E=K.get(y),M=!0);const b=`${n.getDocId()}_s${n.createFontId()}`;if(!E){if(!(0,w.validateFontName)(k))return A.set(f,null),null;const h=/bold/gi.test(k),F=/oblique|italic/gi.test(k),N=h&&F&&o||h&&e||F&&t||P;return R={css:b,guessFallback:!0,loadedName:b,baseFontName:k,src:`local(${k})`,style:N},A.set(f,R),R}const V=[];M&&(0,w.validateFontName)(k)&&V.push(`local(${k})`);const{style:l,ultimate:x}=O(E,V,I),H=x===null,s=H?"":`,${x}`;return R={css:`${b}${s}`,guessFallback:H,loadedName:b,baseFontName:k,src:V.join(","),style:l},A.set(f,R),R}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ImageResizer=void 0;var i=se(2);const w=2048,P=65537,e=128;class t{constructor(K,j){this._imgData=K,this._isMask=j}static needsToBeResized(K,j){if(K<=this._goodSquareLength&&j<=this._goodSquareLength)return!1;const{MAX_DIM:C}=this;if(K>C||j>C)return!0;const O=K*j;if(this._hasMaxArea)return O>this.MAX_AREA;if(O<Gt(this._goodSquareLength,2))return!1;if(this._areGoodDims(K,j))return this._goodSquareLength=Math.max(this._goodSquareLength,Math.floor(Math.sqrt(K*j))),!1;this._goodSquareLength=this._guessMax(this._goodSquareLength,C,e,0);const d=this.MAX_AREA=Gt(this._goodSquareLength,2);return O>d}static get MAX_DIM(){return(0,i.shadow)(this,"MAX_DIM",this._guessMax(w,P,0,1))}static get MAX_AREA(){return this._hasMaxArea=!0,(0,i.shadow)(this,"MAX_AREA",Gt(this._guessMax(t._goodSquareLength,this.MAX_DIM,e,0),2))}static set MAX_AREA(K){K>=0&&(this._hasMaxArea=!0,(0,i.shadow)(this,"MAX_AREA",K))}static setMaxArea(K){this._hasMaxArea||(this.MAX_AREA=K>>2)}static _areGoodDims(K,j){try{const C=new OffscreenCanvas(K,j),O=C.getContext("2d");O.fillRect(0,0,1,1);const d=O.getImageData(0,0,1,1).data[3];return C.width=C.height=1,d!==0}catch(C){return!1}}static _guessMax(K,j,C,O){for(;K+C+1<j;){const d=Math.floor((K+j)/2),A=O||d;this._areGoodDims(d,A)?K=d:j=d}return K}static createImage(K,j=!1){return rt(this,null,function*(){return new t(K,j)._createImage()})}_createImage(){return rt(this,null,function*(){const K=this._encodeBMP(),j=new Blob([K.buffer],{type:"image/bmp"}),C=createImageBitmap(j),{MAX_AREA:O,MAX_DIM:d}=t,{_imgData:A}=this,{width:n,height:I}=A,k=Math.max(n/d,I/d,Math.sqrt(n*I/O)),y=Math.max(k,2),f=Math.round(10*(k+1.25))/10/y,R=Math.floor(Math.log2(f)),E=new Array(R+2).fill(2);E[0]=y,E.splice(-1,1,f/(1<<R));let M=n,b=I,V=yield C;for(const l of E){const x=M,H=b;M=Math.floor(M/l)-1,b=Math.floor(b/l)-1;const s=new OffscreenCanvas(M,b);s.getContext("2d").drawImage(V,0,0,x,H,0,0,M,b),V=s.transferToImageBitmap()}return A.data=null,A.bitmap=V,A.width=M,A.height=b,A})}_encodeBMP(){const{width:K,height:j,kind:C}=this._imgData;let O=this._imgData.data,d,A=new Uint8Array(0),n=A,I=0;switch(C){case i.ImageKind.GRAYSCALE_1BPP:{d=1,A=new Uint8Array(this._isMask?[255,255,255,255,0,0,0,0]:[0,0,0,0,255,255,255,255]);const b=K+7>>3,V=b+3&-4;if(b!==V){const l=new Uint8Array(V*j);let x=0;for(let H=0,s=j*b;H<s;H+=b,x+=V)l.set(O.subarray(H,H+b),x);O=l}break}case i.ImageKind.RGB_24BPP:{if(d=24,K&3){const b=3*K,V=b+3&-4,l=V-b,x=new Uint8Array(V*j);let H=0;for(let s=0,h=j*b;s<h;s+=b){const F=O.subarray(s,s+b);for(let N=0;N<b;N+=3)x[H++]=F[N+2],x[H++]=F[N+1],x[H++]=F[N];H+=l}O=x}else for(let b=0,V=O.length;b<V;b+=3){const l=O[b];O[b]=O[b+2],O[b+2]=l}break}case i.ImageKind.RGBA_32BPP:d=32,I=3,n=new Uint8Array(68);const M=new DataView(n.buffer);i.FeatureTest.isLittleEndian?(M.setUint32(0,255,!0),M.setUint32(4,65280,!0),M.setUint32(8,16711680,!0),M.setUint32(12,4278190080,!0)):(M.setUint32(0,4278190080,!0),M.setUint32(4,16711680,!0),M.setUint32(8,65280,!0),M.setUint32(12,255,!0));break;default:throw new Error("invalid format")}let k=0;const y=40+n.length,f=14+y+A.length+O.length,R=new Uint8Array(f),E=new DataView(R.buffer);return E.setUint16(k,19778,!0),k+=2,E.setUint32(k,f,!0),k+=4,E.setUint32(k,0,!0),k+=4,E.setUint32(k,14+y+A.length,!0),k+=4,E.setUint32(k,y,!0),k+=4,E.setInt32(k,K,!0),k+=4,E.setInt32(k,-j,!0),k+=4,E.setUint16(k,1,!0),k+=2,E.setUint16(k,d,!0),k+=2,E.setUint32(k,I,!0),k+=4,E.setUint32(k,0,!0),k+=4,E.setInt32(k,0,!0),k+=4,E.setInt32(k,0,!0),k+=4,E.setUint32(k,A.length/4,!0),k+=4,E.setUint32(k,0,!0),k+=4,R.set(n,k),k+=n.length,R.set(A,k),k+=A.length,R.set(O,k),R}}D.ImageResizer=t,t._goodSquareLength=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.MurmurHash3_64=void 0;var i=se(2);const w=3285377520,P=4294901760,e=65535;class t{constructor(K){this.h1=K?K&4294967295:w,this.h2=K?K&4294967295:w}update(K){let j,C;if(typeof K=="string"){j=new Uint8Array(K.length*2),C=0;for(let b=0,V=K.length;b<V;b++){const l=K.charCodeAt(b);l<=255?j[C++]=l:(j[C++]=l>>>8,j[C++]=l&255)}}else if((0,i.isArrayBuffer)(K))j=K.slice(),C=j.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const O=C>>2,d=C-O*4,A=new Uint32Array(j.buffer,0,O);let n=0,I=0,k=this.h1,y=this.h2;const f=3432918353,R=461845907,E=f&e,M=R&e;for(let b=0;b<O;b++)b&1?(n=A[b],n=n*f&P|n*E&e,n=n<<15|n>>>17,n=n*R&P|n*M&e,k^=n,k=k<<13|k>>>19,k=k*5+3864292196):(I=A[b],I=I*f&P|I*E&e,I=I<<15|I>>>17,I=I*R&P|I*M&e,y^=I,y=y<<13|y>>>19,y=y*5+3864292196);switch(n=0,d){case 3:n^=j[O*4+2]<<16;case 2:n^=j[O*4+1]<<8;case 1:n^=j[O*4],n=n*f&P|n*E&e,n=n<<15|n>>>17,n=n*R&P|n*M&e,O&1?k^=n:y^=n}this.h1=k,this.h2=y}hexdigest(){let K=this.h1,j=this.h2;return K^=j>>>1,K=K*3981806797&P|K*36045&e,j=j*4283543511&P|((j<<16|K>>>16)*2950163797&P)>>>16,K^=j>>>1,K=K*444984403&P|K*60499&e,j=j*3301882366&P|((j<<16|K>>>16)*3120437893&P)>>>16,K^=j>>>1,(K>>>0).toString(16).padStart(8,"0")+(j>>>0).toString(16).padStart(8,"0")}}D.MurmurHash3_64=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.OperatorList=void 0;var i=se(2);function w(j,C,O,d,A){let n=j;for(let I=0,k=C.length-1;I<k;I++){const y=C[I];n=n[y]||(n[y]=[])}n[C.at(-1)]={checkFn:O,iterateFn:d,processFn:A}}const P=[];w(P,[i.OPS.save,i.OPS.transform,i.OPS.paintInlineImageXObject,i.OPS.restore],null,function(C,O){const d=C.fnArray,A=C.iCurr-3,n=(O-A)%4;switch(n){case 0:return d[O]===i.OPS.save;case 1:return d[O]===i.OPS.transform;case 2:return d[O]===i.OPS.paintInlineImageXObject;case 3:return d[O]===i.OPS.restore}throw new Error(`iterateInlineImageGroup - invalid pos: ${n}`)},function(C,O){const k=C.fnArray,y=C.argsArray,f=C.iCurr,R=f-3,E=f-2,M=f-1,b=Math.min(Math.floor((O-R)/4),200);if(b<10)return O-(O-R)%4;let V=0;const l=[];let x=0,H=1,s=1;for(let S=0;S<b;S++){const m=y[E+(S<<2)],r=y[M+(S<<2)][0];H+r.width>1e3&&(V=Math.max(V,H),s+=x+2,H=0,x=0),l.push({transform:m,x:H,y:s,w:r.width,h:r.height}),H+=r.width+2,x=Math.max(x,r.height)}const h=Math.max(V,H)+1,F=s+x+1,N=new Uint8Array(h*F*4),U=h<<2;for(let S=0;S<b;S++){const m=y[M+(S<<2)][0].data,r=l[S].w<<2;let p=0,c=l[S].x+l[S].y*h<<2;N.set(m.subarray(0,r),c-U);for(let u=0,q=l[S].h;u<q;u++)N.set(m.subarray(p,p+r),c),p+=r,c+=U;for(N.set(m.subarray(p-r,p),c);c>=0;)m[c-4]=m[c],m[c-3]=m[c+1],m[c-2]=m[c+2],m[c-1]=m[c+3],m[c+r]=m[c+r-4],m[c+r+1]=m[c+r-3],m[c+r+2]=m[c+r-2],m[c+r+3]=m[c+r-1],c-=U}const g={width:h,height:F};if(C.isOffscreenCanvasSupported){const S=new OffscreenCanvas(h,F);S.getContext("2d").putImageData(new ImageData(new Uint8ClampedArray(N.buffer),h,F),0,0),g.bitmap=S.transferToImageBitmap(),g.data=null}else g.kind=i.ImageKind.RGBA_32BPP,g.data=N;return k.splice(R,b*4,i.OPS.paintInlineImageXObjectGroup),y.splice(R,b*4,[g,l]),R+1}),w(P,[i.OPS.save,i.OPS.transform,i.OPS.paintImageMaskXObject,i.OPS.restore],null,function(C,O){const d=C.fnArray,A=C.iCurr-3,n=(O-A)%4;switch(n){case 0:return d[O]===i.OPS.save;case 1:return d[O]===i.OPS.transform;case 2:return d[O]===i.OPS.paintImageMaskXObject;case 3:return d[O]===i.OPS.restore}throw new Error(`iterateImageMaskGroup - invalid pos: ${n}`)},function(C,O){const I=C.fnArray,k=C.argsArray,y=C.iCurr,f=y-3,R=y-2,E=y-1;let M=Math.floor((O-f)/4);if(M<10)return O-(O-f)%4;let b=!1,V,l;const x=k[E][0],H=k[R][0],s=k[R][1],h=k[R][2],F=k[R][3];if(s===h){b=!0,V=R+4;let N=E+4;for(let U=1;U<M;U++,V+=4,N+=4)if(l=k[V],k[N][0]!==x||l[0]!==H||l[1]!==s||l[2]!==h||l[3]!==F){U<10?b=!1:M=U;break}}if(b){M=Math.min(M,1e3);const N=new Float32Array(M*2);V=R;for(let U=0;U<M;U++,V+=4)l=k[V],N[U<<1]=l[4],N[(U<<1)+1]=l[5];I.splice(f,M*4,i.OPS.paintImageMaskXObjectRepeat),k.splice(f,M*4,[x,H,s,h,F,N])}else{M=Math.min(M,100);const N=[];for(let U=0;U<M;U++){l=k[R+(U<<2)];const g=k[E+(U<<2)][0];N.push({data:g.data,width:g.width,height:g.height,interpolate:g.interpolate,count:g.count,transform:l})}I.splice(f,M*4,i.OPS.paintImageMaskXObjectGroup),k.splice(f,M*4,[N])}return f+1}),w(P,[i.OPS.save,i.OPS.transform,i.OPS.paintImageXObject,i.OPS.restore],function(j){const C=j.argsArray,O=j.iCurr-2;return C[O][1]===0&&C[O][2]===0},function(C,O){const d=C.fnArray,A=C.argsArray,n=C.iCurr-3,I=(O-n)%4;switch(I){case 0:return d[O]===i.OPS.save;case 1:if(d[O]!==i.OPS.transform)return!1;const k=C.iCurr-2,y=A[k][0],f=A[k][3];return!(A[O][0]!==y||A[O][1]!==0||A[O][2]!==0||A[O][3]!==f);case 2:if(d[O]!==i.OPS.paintImageXObject)return!1;const R=C.iCurr-1,E=A[R][0];return A[O][0]===E;case 3:return d[O]===i.OPS.restore}throw new Error(`iterateImageGroup - invalid pos: ${I}`)},function(j,C){const A=j.fnArray,n=j.argsArray,I=j.iCurr,k=I-3,y=I-2,f=I-1,R=n[f][0],E=n[y][0],M=n[y][3],b=Math.min(Math.floor((C-k)/4),1e3);if(b<3)return C-(C-k)%4;const V=new Float32Array(b*2);let l=y;for(let H=0;H<b;H++,l+=4){const s=n[l];V[H<<1]=s[4],V[(H<<1)+1]=s[5]}const x=[R,E,M,V];return A.splice(k,b*4,i.OPS.paintImageXObjectRepeat),n.splice(k,b*4,x),k+1}),w(P,[i.OPS.beginText,i.OPS.setFont,i.OPS.setTextMatrix,i.OPS.showText,i.OPS.endText],null,function(C,O){const d=C.fnArray,A=C.argsArray,n=C.iCurr-4,I=(O-n)%5;switch(I){case 0:return d[O]===i.OPS.beginText;case 1:return d[O]===i.OPS.setFont;case 2:return d[O]===i.OPS.setTextMatrix;case 3:if(d[O]!==i.OPS.showText)return!1;const k=C.iCurr-3,y=A[k][0],f=A[k][1];return!(A[O][0]!==y||A[O][1]!==f);case 4:return d[O]===i.OPS.endText}throw new Error(`iterateShowTextGroup - invalid pos: ${I}`)},function(j,C){const A=j.fnArray,n=j.argsArray,I=j.iCurr,k=I-4,y=I-3,f=I-2,R=I-1,E=I,M=n[y][0],b=n[y][1];let V=Math.min(Math.floor((C-k)/5),1e3);if(V<3)return C-(C-k)%5;let l=k;k>=4&&A[k-4]===A[y]&&A[k-3]===A[f]&&A[k-2]===A[R]&&A[k-1]===A[E]&&n[k-4][0]===M&&n[k-4][1]===b&&(V++,l-=5);let x=l+4;for(let H=1;H<V;H++)A.splice(x,3),n.splice(x,3),x+=2;return x+1});class e{constructor(C){this.queue=C}_optimize(){}push(C,O){this.queue.fnArray.push(C),this.queue.argsArray.push(O),this._optimize()}flush(){}reset(){}}class t extends e{constructor(C){super(C),this.state=null,this.context={iCurr:0,fnArray:C.fnArray,argsArray:C.argsArray,isOffscreenCanvasSupported:!1},this.match=null,this.lastProcessed=0}set isOffscreenCanvasSupported(C){this.context.isOffscreenCanvasSupported=C}_optimize(){const C=this.queue.fnArray;let O=this.lastProcessed,d=C.length,A=this.state,n=this.match;if(!A&&!n&&O+1===d&&!P[C[O]]){this.lastProcessed=d;return}const I=this.context;for(;O<d;){if(n){if((0,n.iterateFn)(I,O)){O++;continue}if(O=(0,n.processFn)(I,O+1),d=C.length,n=null,A=null,O>=d)break}if(A=(A||P)[C[O]],!A||Array.isArray(A)){O++;continue}if(I.iCurr=O,O++,A.checkFn&&!(0,A.checkFn)(I)){A=null;continue}n=A,A=null}this.state=A,this.match=n,this.lastProcessed=O}flush(){for(;this.match;){const C=this.queue.fnArray.length;this.lastProcessed=(0,this.match.processFn)(this.context,C),this.match=null,this.state=null,this._optimize()}}reset(){this.state=null,this.match=null,this.lastProcessed=0}}const K=class K{constructor(C=0,O){this._streamSink=O,this.fnArray=[],this.argsArray=[],this.optimizer=O&&!(C&i.RenderingIntentFlag.OPLIST)?new t(this):new e(this),this.dependencies=new Set,this._totalLength=0,this.weight=0,this._resolved=O?null:Promise.resolve()}set isOffscreenCanvasSupported(C){this.optimizer.isOffscreenCanvasSupported=C}get length(){return this.argsArray.length}get ready(){return this._resolved||this._streamSink.ready}get totalLength(){return this._totalLength+this.length}addOp(C,O){this.optimizer.push(C,O),this.weight++,this._streamSink&&(this.weight>=K.CHUNK_SIZE?this.flush():this.weight>=K.CHUNK_SIZE_ABOUT&&(C===i.OPS.restore||C===i.OPS.endText)&&this.flush())}addImageOps(C,O,d){d!==void 0&&this.addOp(i.OPS.beginMarkedContentProps,["OC",d]),this.addOp(C,O),d!==void 0&&this.addOp(i.OPS.endMarkedContent,[])}addDependency(C){this.dependencies.has(C)||(this.dependencies.add(C),this.addOp(i.OPS.dependency,[C]))}addDependencies(C){for(const O of C)this.addDependency(O)}addOpList(C){if(!(C instanceof K)){(0,i.warn)('addOpList - ignoring invalid "opList" parameter.');return}for(const O of C.dependencies)this.dependencies.add(O);for(let O=0,d=C.length;O<d;O++)this.addOp(C.fnArray[O],C.argsArray[O])}getIR(){return{fnArray:this.fnArray,argsArray:this.argsArray,length:this.length}}get _transfers(){var n;const C=[],{fnArray:O,argsArray:d,length:A}=this;for(let I=0;I<A;I++)switch(O[I]){case i.OPS.paintInlineImageXObject:case i.OPS.paintInlineImageXObjectGroup:case i.OPS.paintImageMaskXObject:const k=d[I][0];!k.cached&&((n=k.data)==null?void 0:n.buffer)instanceof ArrayBuffer&&C.push(k.data.buffer);break}return C}flush(C=!1,O=null){this.optimizer.flush();const d=this.length;this._totalLength+=d,this._streamSink.enqueue({fnArray:this.fnArray,argsArray:this.argsArray,lastChunk:C,separateAnnots:O,length:d},1,this._transfers),this.dependencies.clear(),this.fnArray.length=0,this.argsArray.length=0,this.weight=0,this.optimizer.reset()}};jt(K,"CHUNK_SIZE",1e3),jt(K,"CHUNK_SIZE_ABOUT",K.CHUNK_SIZE-5);let o=K;D.OperatorList=o},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PDFImage=void 0;var i=se(2),w=se(28),P=se(5),e=se(12),t=se(18),o=se(62),K=se(26),j=se(30),C=se(4);function O(n,I,k,y){return n=I+n*k,n<0?n=0:n>y&&(n=y),n}function d(n,I,k,y,f,R){const E=f*R;let M;I<=8?M=new Uint8Array(E):I<=16?M=new Uint16Array(E):M=new Uint32Array(E);const b=k/f,V=y/R;let l,x,H,s=0,h;const F=new Uint16Array(f),N=k;for(l=0;l<f;l++)F[l]=Math.floor(l*b);for(l=0;l<R;l++)for(H=Math.floor(l*V)*N,x=0;x<f;x++)h=H+F[x],M[s++]=n[h];return M}class A{constructor({xref:I,res:k,image:y,isInline:f=!1,smask:R=null,mask:E=null,isMask:M=!1,pdfFunctionFactory:b,localColorSpaceCache:V}){var N;this.image=y;const l=y.dict,x=l.get("F","Filter");let H;if(x instanceof C.Name)H=x.name;else if(Array.isArray(x)){const U=I.fetchIfRef(x[0]);U instanceof C.Name&&(H=U.name)}switch(H){case"JPXDecode":const U=new j.JpxImage;U.parseImageProperties(y.stream),y.stream.reset(),y.width=U.width,y.height=U.height,y.bitsPerComponent=U.bitsPerComponent,y.numComps=U.componentsCount;break;case"JBIG2Decode":y.bitsPerComponent=1,y.numComps=1;break}let s=l.get("W","Width"),h=l.get("H","Height");if(Number.isInteger(y.width)&&y.width>0&&Number.isInteger(y.height)&&y.height>0&&(y.width!==s||y.height!==h)&&((0,i.warn)("PDFImage - using the Width/Height of the image data, rather than the image dictionary."),s=y.width,h=y.height),s<1||h<1)throw new i.FormatError(`Invalid image width: ${s} or height: ${h}`);this.width=s,this.height=h,this.interpolate=l.get("I","Interpolate"),this.imageMask=l.get("IM","ImageMask")||!1,this.matte=l.get("Matte")||!1;let F=y.bitsPerComponent;if(!F&&(F=l.get("BPC","BitsPerComponent"),!F))if(this.imageMask)F=1;else throw new i.FormatError(`Bits per component missing in image: ${this.imageMask}`);if(this.bpc=F,!this.imageMask){let U=l.getRaw("CS")||l.getRaw("ColorSpace");if(!U)switch((0,i.info)("JPX images (which do not require color spaces)"),y.numComps){case 1:U=C.Name.get("DeviceGray");break;case 3:U=C.Name.get("DeviceRGB");break;case 4:U=C.Name.get("DeviceCMYK");break;default:throw new Error(`JPX images with ${y.numComps} color components not supported.`)}this.colorSpace=e.ColorSpace.parse({cs:U,xref:I,resources:f?k:null,pdfFunctionFactory:b,localColorSpaceCache:V}),this.numComps=this.colorSpace.numComps}if(this.decode=l.getArray("D","Decode"),this.needsDecode=!1,this.decode&&(this.colorSpace&&!this.colorSpace.isDefaultDecode(this.decode,F)||M&&!e.ColorSpace.isDefaultDecode(this.decode,1))){this.needsDecode=!0;const U=(1<<F)-1;this.decodeCoefficients=[],this.decodeAddends=[];const g=((N=this.colorSpace)==null?void 0:N.name)==="Indexed";for(let S=0,m=0;S<this.decode.length;S+=2,++m){const r=this.decode[S],p=this.decode[S+1];this.decodeCoefficients[m]=g?(p-r)/U:p-r,this.decodeAddends[m]=g?r:U*r}}R?this.smask=new A({xref:I,res:k,image:R,isInline:f,pdfFunctionFactory:b,localColorSpaceCache:V}):E&&(E instanceof P.BaseStream?E.dict.get("IM","ImageMask")?this.mask=new A({xref:I,res:k,image:E,isInline:f,isMask:!0,pdfFunctionFactory:b,localColorSpaceCache:V}):(0,i.warn)("Ignoring /Mask in image without /ImageMask."):this.mask=E)}static buildImage(M){return rt(this,arguments,function*({xref:I,res:k,image:y,isInline:f=!1,pdfFunctionFactory:R,localColorSpaceCache:E}){const b=y;let V=null,l=null;const x=y.dict.get("SMask"),H=y.dict.get("Mask");return x?x instanceof P.BaseStream?V=x:(0,i.warn)("Unsupported /SMask format."):H&&(H instanceof P.BaseStream||Array.isArray(H)?l=H:(0,i.warn)("Unsupported /Mask format.")),new A({xref:I,res:k,image:b,isInline:f,smask:V,mask:l,pdfFunctionFactory:R,localColorSpaceCache:E})})}static createRawMask({imgArray:I,width:k,height:y,imageIsFromDecodeStream:f,inverseDecode:R,interpolate:E}){const M=(k+7>>3)*y,b=I.byteLength,V=M===b;let l,x;if(f&&(!R||V)?l=I:R?(l=new Uint8Array(M),l.set(I),l.fill(255,b)):l=new Uint8Array(I),R)for(x=0;x<b;x++)l[x]^=255;return{data:l,width:k,height:y,interpolate:E}}static createMask(b){return rt(this,arguments,function*({imgArray:I,width:k,height:y,imageIsFromDecodeStream:f,inverseDecode:R,interpolate:E,isOffscreenCanvasSupported:M=!1}){const V=k===1&&y===1&&R===(I.length===0||!!(I[0]&128));if(V)return{isSingleOpaquePixel:V};if(M){if(o.ImageResizer.needsToBeResized(k,y)){const h=new Uint8ClampedArray(k*y*4);return(0,w.convertBlackAndWhiteToRGBA)({src:I,dest:h,width:k,height:y,nonBlackColor:0,inverseDecode:R}),o.ImageResizer.createImage({kind:i.ImageKind.RGBA_32BPP,data:h,width:k,height:y,interpolate:E})}const l=new OffscreenCanvas(k,y),x=l.getContext("2d"),H=x.createImageData(k,y);(0,w.convertBlackAndWhiteToRGBA)({src:I,dest:H.data,width:k,height:y,nonBlackColor:0,inverseDecode:R}),x.putImageData(H,0,0);const s=l.transferToImageBitmap();return{data:null,width:k,height:y,interpolate:E,bitmap:s}}return this.createRawMask({imgArray:I,width:k,height:y,inverseDecode:R,imageIsFromDecodeStream:f,interpolate:E})})}get drawWidth(){var I,k;return Math.max(this.width,((I=this.smask)==null?void 0:I.width)||0,((k=this.mask)==null?void 0:k.width)||0)}get drawHeight(){var I,k;return Math.max(this.height,((I=this.smask)==null?void 0:I.height)||0,((k=this.mask)==null?void 0:k.height)||0)}decodeBuffer(I){const k=this.bpc,y=this.numComps,f=this.decodeAddends,R=this.decodeCoefficients,E=(1<<k)-1;let M,b;if(k===1){for(M=0,b=I.length;M<b;M++)I[M]=+!I[M];return}let V=0;for(M=0,b=this.width*this.height;M<b;M++)for(let l=0;l<y;l++)I[V]=O(I[V],f[l],R[l],E),V++}getComponents(I){const k=this.bpc;if(k===8)return I;const y=this.width,f=this.height,R=this.numComps,E=y*f*R;let M=0,b;k<=8?b=new Uint8Array(E):k<=16?b=new Uint16Array(E):b=new Uint32Array(E);const V=y*R,l=(1<<k)-1;let x=0,H,s;if(k===1){let h,F,N;for(let U=0;U<f;U++){for(F=x+(V&-8),N=x+V;x<F;)s=I[M++],b[x]=s>>7&1,b[x+1]=s>>6&1,b[x+2]=s>>5&1,b[x+3]=s>>4&1,b[x+4]=s>>3&1,b[x+5]=s>>2&1,b[x+6]=s>>1&1,b[x+7]=s&1,x+=8;if(x<N)for(s=I[M++],h=128;x<N;)b[x++]=+!!(s&h),h>>=1}}else{let h=0;for(s=0,x=0,H=E;x<H;++x){for(x%V===0&&(s=0,h=0);h<k;)s=s<<8|I[M++],h+=8;const F=h-k;let N=s>>F;N<0?N=0:N>l&&(N=l),b[x]=N,s&=(1<<F)-1,h=F}}return b}fillOpacity(I,k,y,f,R){const E=this.smask,M=this.mask;let b,V,l,x,H,s;if(E)V=E.width,l=E.height,b=new Uint8ClampedArray(V*l),E.fillGrayBuffer(b),(V!==k||l!==y)&&(b=d(b,E.bpc,V,l,k,y));else if(M)if(M instanceof A){for(V=M.width,l=M.height,b=new Uint8ClampedArray(V*l),M.numComps=1,M.fillGrayBuffer(b),x=0,H=V*l;x<H;++x)b[x]=255-b[x];(V!==k||l!==y)&&(b=d(b,M.bpc,V,l,k,y))}else if(Array.isArray(M)){b=new Uint8ClampedArray(k*y);const h=this.numComps;for(x=0,H=k*y;x<H;++x){let F=0;const N=x*h;for(s=0;s<h;++s){const U=R[N+s],g=s*2;if(U<M[g]||U>M[g+1]){F=255;break}}b[x]=F}}else throw new i.FormatError("Unknown mask format.");if(b)for(x=0,s=3,H=k*f;x<H;++x,s+=4)I[s]=b[x];else for(x=0,s=3,H=k*f;x<H;++x,s+=4)I[s]=255}undoPreblend(I,k,y){var l;const f=(l=this.smask)==null?void 0:l.matte;if(!f)return;const R=this.colorSpace.getRgb(f,0),E=R[0],M=R[1],b=R[2],V=k*y*4;for(let x=0;x<V;x+=4){const H=I[x+3];if(H===0){I[x]=255,I[x+1]=255,I[x+2]=255;continue}const s=255/H;I[x]=(I[x]-E)*s+E,I[x+1]=(I[x+1]-M)*s+M,I[x+2]=(I[x+2]-b)*s+b}}createImageData(I=!1,k=!1){return rt(this,null,function*(){const y=this.drawWidth,f=this.drawHeight,R={width:y,height:f,interpolate:this.interpolate,kind:0,data:null},E=this.numComps,M=this.width,b=this.height,V=this.bpc,l=M*E*V+7>>3,x=k&&o.ImageResizer.needsToBeResized(y,f);if(!I){let r;if(this.colorSpace.name==="DeviceGray"&&V===1?r=i.ImageKind.GRAYSCALE_1BPP:this.colorSpace.name==="DeviceRGB"&&V===8&&!this.needsDecode&&(r=i.ImageKind.RGB_24BPP),r&&!this.smask&&!this.mask&&y===M&&f===b){const p=this.getImageBytes(b*l,{});if(k)return x?o.ImageResizer.createImage({data:p,kind:r,width:y,height:f,interpolate:this.interpolate},this.needsDecode):this.createBitmap(r,M,b,p);if(R.kind=r,R.data=p,this.needsDecode){(0,i.assert)(r===i.ImageKind.GRAYSCALE_1BPP,"PDFImage.createImageData: The image must be grayscale.");const c=R.data;for(let u=0,q=c.length;u<q;u++)c[u]^=255}return R}if(this.image instanceof K.JpegStream&&!this.smask&&!this.mask&&!this.needsDecode){let p=b*l;if(k&&!x){let c=!1;switch(this.colorSpace.name){case"DeviceGray":p*=4,c=!0;break;case"DeviceRGB":p=p/3*4,c=!0;break;case"DeviceCMYK":c=!0;break}if(c){const u=this.getImageBytes(p,{drawWidth:y,drawHeight:f,forceRGBA:!0});return this.createBitmap(i.ImageKind.RGBA_32BPP,y,f,u)}}else switch(this.colorSpace.name){case"DeviceGray":p*=3;case"DeviceRGB":case"DeviceCMYK":return R.kind=i.ImageKind.RGB_24BPP,R.data=this.getImageBytes(p,{drawWidth:y,drawHeight:f,forceRGB:!0}),x?o.ImageResizer.createImage(R):R}}}const H=this.getImageBytes(b*l,{internal:!0}),s=0|H.length/l*f/b,h=this.getComponents(H);let F,N,U,g,S,m;if(k&&!x&&(U=new OffscreenCanvas(y,f),g=U.getContext("2d"),S=g.createImageData(y,f),m=S.data),R.kind=i.ImageKind.RGBA_32BPP,!I&&!this.smask&&!this.mask?(!k||x?(R.kind=i.ImageKind.RGB_24BPP,m=new Uint8ClampedArray(y*f*3),F=0):(new Uint32Array(m.buffer).fill(i.FeatureTest.isLittleEndian?4278190080:255),F=1),N=!1):((!k||x)&&(m=new Uint8ClampedArray(y*f*4)),F=1,N=!0,this.fillOpacity(m,y,f,s,h)),this.needsDecode&&this.decodeBuffer(h),this.colorSpace.fillRgb(m,M,b,y,f,s,V,h,F),N&&this.undoPreblend(m,y,s),k&&!x){g.putImageData(S,0,0);const r=U.transferToImageBitmap();return{data:null,width:y,height:f,bitmap:r,interpolate:this.interpolate}}return R.data=m,x?o.ImageResizer.createImage(R):R})}fillGrayBuffer(I){const k=this.numComps;if(k!==1)throw new i.FormatError(`Reading gray scale from a color image: ${k}`);const y=this.width,f=this.height,R=this.bpc,E=y*k*R+7>>3,M=this.getImageBytes(f*E,{internal:!0}),b=this.getComponents(M);let V,l;if(R===1){if(l=y*f,this.needsDecode)for(V=0;V<l;++V)I[V]=b[V]-1&255;else for(V=0;V<l;++V)I[V]=-b[V]&255;return}this.needsDecode&&this.decodeBuffer(b),l=y*f;const x=255/((1<<R)-1);for(V=0;V<l;++V)I[V]=x*b[V]}createBitmap(I,k,y,f){const R=new OffscreenCanvas(k,y),E=R.getContext("2d");let M;I===i.ImageKind.RGBA_32BPP?M=new ImageData(f,k,y):(M=E.createImageData(k,y),(0,w.convertToRGBA)({kind:I,src:f,dest:new Uint32Array(M.data.buffer),width:k,height:y,inverseDecode:this.needsDecode})),E.putImageData(M,0,0);const b=R.transferToImageBitmap();return{data:null,width:k,height:y,bitmap:b,interpolate:this.interpolate}}getImageBytes(I,{drawWidth:k,drawHeight:y,forceRGBA:f=!1,forceRGB:R=!1,internal:E=!1}){this.image.reset(),this.image.drawWidth=k||this.width,this.image.drawHeight=y||this.height,this.image.forceRGBA=!!f,this.image.forceRGB=!!R;const M=this.image.getBytes(I);return E||this.image instanceof t.DecodeStream?M:((0,i.assert)(M instanceof Uint8Array,'PDFImage.getImageBytes: Unsupported "imageBytes" type.'),new Uint8Array(M))}}D.PDFImage=A},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Catalog=void 0;var i=se(3),w=se(2),P=se(4),e=se(67),t=se(5),o=se(68),K=se(12),j=se(69),C=se(59),O=se(70),d=se(72);function A(I){return I instanceof P.Dict&&(I=I.get("D")),Array.isArray(I)?I:null}class n{constructor(k,y){if(this.pdfManager=k,this.xref=y,this._catDict=y.getCatalogObj(),!(this._catDict instanceof P.Dict))throw new w.FormatError("Catalog object is not a dictionary.");this.toplevelPagesDict,this._actualNumPages=null,this.fontCache=new P.RefSetCache,this.builtInCMapCache=new Map,this.standardFontDataCache=new Map,this.globalImageCache=new C.GlobalImageCache,this.pageKidsCountCache=new P.RefSetCache,this.pageIndexCache=new P.RefSetCache,this.nonBlendModesSet=new P.RefSet,this.systemFontCache=new Map}cloneDict(){return this._catDict.clone()}get version(){const k=this._catDict.get("Version");if(k instanceof P.Name){if(i.PDF_VERSION_REGEXP.test(k.name))return(0,w.shadow)(this,"version",k.name);(0,w.warn)(`Invalid PDF catalog version: ${k.name}`)}return(0,w.shadow)(this,"version",null)}get lang(){const k=this._catDict.get("Lang");return(0,w.shadow)(this,"lang",typeof k=="string"?(0,w.stringToPDFString)(k):null)}get needsRendering(){const k=this._catDict.get("NeedsRendering");return(0,w.shadow)(this,"needsRendering",typeof k=="boolean"?k:!1)}get collection(){let k=null;try{const y=this._catDict.get("Collection");y instanceof P.Dict&&y.size>0&&(k=y)}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.info)("Cannot fetch Collection entry; assuming no collection is present.")}return(0,w.shadow)(this,"collection",k)}get acroForm(){let k=null;try{const y=this._catDict.get("AcroForm");y instanceof P.Dict&&y.size>0&&(k=y)}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.info)("Cannot fetch AcroForm entry; assuming no forms are present.")}return(0,w.shadow)(this,"acroForm",k)}get acroFormRef(){const k=this._catDict.getRaw("AcroForm");return(0,w.shadow)(this,"acroFormRef",k instanceof P.Ref?k:null)}get metadata(){var f;const k=this._catDict.getRaw("Metadata");if(!(k instanceof P.Ref))return(0,w.shadow)(this,"metadata",null);let y=null;try{const R=this.xref.fetch(k,!((f=this.xref.encrypt)!=null&&f.encryptMetadata));if(R instanceof t.BaseStream&&R.dict instanceof P.Dict){const E=R.dict.get("Type"),M=R.dict.get("Subtype");if((0,P.isName)(E,"Metadata")&&(0,P.isName)(M,"XML")){const b=(0,w.stringToUTF8String)(R.getString());b&&(y=new O.MetadataParser(b).serializable)}}}catch(R){if(R instanceof i.MissingDataException)throw R;(0,w.info)(`Skipping invalid Metadata: "${R}".`)}return(0,w.shadow)(this,"metadata",y)}get markInfo(){let k=null;try{k=this._readMarkInfo()}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)("Unable to read mark info.")}return(0,w.shadow)(this,"markInfo",k)}_readMarkInfo(){const k=this._catDict.get("MarkInfo");if(!(k instanceof P.Dict))return null;const y={Marked:!1,UserProperties:!1,Suspects:!1};for(const f in y){const R=k.get(f);typeof R=="boolean"&&(y[f]=R)}return y}get structTreeRoot(){let k=null;try{k=this._readStructTreeRoot()}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)("Unable read to structTreeRoot info.")}return(0,w.shadow)(this,"structTreeRoot",k)}_readStructTreeRoot(){const k=this._catDict.getRaw("StructTreeRoot"),y=this.xref.fetchIfRef(k);if(!(y instanceof P.Dict))return null;const f=new d.StructTreeRoot(y,k);return f.init(),f}get toplevelPagesDict(){const k=this._catDict.get("Pages");if(!(k instanceof P.Dict))throw new w.FormatError("Invalid top-level pages dictionary.");return(0,w.shadow)(this,"toplevelPagesDict",k)}get documentOutline(){let k=null;try{k=this._readDocumentOutline()}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)("Unable to read document outline.")}return(0,w.shadow)(this,"documentOutline",k)}_readDocumentOutline(){let k=this._catDict.get("Outlines");if(!(k instanceof P.Dict)||(k=k.getRaw("First"),!(k instanceof P.Ref)))return null;const y={items:[]},f=[{obj:k,parent:y}],R=new P.RefSet;R.put(k);const E=this.xref,M=new Uint8ClampedArray(3);for(;f.length>0;){const b=f.shift(),V=E.fetchIfRef(b.obj);if(V===null)continue;if(!V.has("Title"))throw new w.FormatError("Invalid outline item encountered.");const l={url:null,dest:null,action:null};n.parseDestDictionary({destDict:V,resultObj:l,docBaseUrl:this.baseUrl,docAttachments:this.attachments});const x=V.get("Title"),H=V.get("F")||0,s=V.getArray("C"),h=V.get("Count");let F=M;Array.isArray(s)&&s.length===3&&(s[0]!==0||s[1]!==0||s[2]!==0)&&(F=K.ColorSpace.singletons.rgb.getRgb(s,0));const N={action:l.action,attachment:l.attachment,dest:l.dest,url:l.url,unsafeUrl:l.unsafeUrl,newWindow:l.newWindow,setOCGState:l.setOCGState,title:(0,w.stringToPDFString)(x),color:F,count:Number.isInteger(h)?h:void 0,bold:!!(H&2),italic:!!(H&1),items:[]};b.parent.items.push(N),k=V.getRaw("First"),k instanceof P.Ref&&!R.has(k)&&(f.push({obj:k,parent:N}),R.put(k)),k=V.getRaw("Next"),k instanceof P.Ref&&!R.has(k)&&(f.push({obj:k,parent:b.parent}),R.put(k))}return y.items.length>0?y.items:null}get permissions(){let k=null;try{k=this._readPermissions()}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)("Unable to read permissions.")}return(0,w.shadow)(this,"permissions",k)}_readPermissions(){const k=this.xref.trailer.get("Encrypt");if(!(k instanceof P.Dict))return null;let y=k.get("P");if(typeof y!="number")return null;y+=4294967296;const f=[];for(const R in w.PermissionFlag){const E=w.PermissionFlag[R];y&E&&f.push(E)}return f}get optionalContentConfig(){let k=null;try{const y=this._catDict.get("OCProperties");if(!y)return(0,w.shadow)(this,"optionalContentConfig",null);const f=y.get("D");if(!f)return(0,w.shadow)(this,"optionalContentConfig",null);const R=y.get("OCGs");if(!Array.isArray(R))return(0,w.shadow)(this,"optionalContentConfig",null);const E=[],M=[];for(const b of R){if(!(b instanceof P.Ref))continue;M.push(b);const V=this.xref.fetchIfRef(b);E.push({id:b.toString(),name:typeof V.get("Name")=="string"?(0,w.stringToPDFString)(V.get("Name")):null,intent:typeof V.get("Intent")=="string"?(0,w.stringToPDFString)(V.get("Intent")):null})}k=this._readOptionalContentConfig(f,M),k.groups=E}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)(`Unable to read optional content config: ${y}`)}return(0,w.shadow)(this,"optionalContentConfig",k)}_readOptionalContentConfig(k,y){function f(l){const x=[];if(Array.isArray(l))for(const H of l)H instanceof P.Ref&&y.includes(H)&&x.push(H.toString());return x}function R(l,x=0){if(!Array.isArray(l))return null;const H=[];for(const h of l){if(h instanceof P.Ref&&y.includes(h)){b.put(h),H.push(h.toString());continue}const F=E(h,x);F&&H.push(F)}if(x>0)return H;const s=[];for(const h of y)b.has(h)||s.push(h.toString());return s.length&&H.push({name:null,order:s}),H}function E(l,x){if(++x>V)return(0,w.warn)("parseNestedOrder - reached MAX_NESTED_LEVELS."),null;const H=M.fetchIfRef(l);if(!Array.isArray(H))return null;const s=M.fetchIfRef(H[0]);if(typeof s!="string")return null;const h=R(H.slice(1),x);return!h||!h.length?null:{name:(0,w.stringToPDFString)(s),order:h}}const M=this.xref,b=new P.RefSet,V=10;return{name:typeof k.get("Name")=="string"?(0,w.stringToPDFString)(k.get("Name")):null,creator:typeof k.get("Creator")=="string"?(0,w.stringToPDFString)(k.get("Creator")):null,baseState:k.get("BaseState")instanceof P.Name?k.get("BaseState").name:null,on:f(k.get("ON")),off:f(k.get("OFF")),order:R(k.get("Order")),groups:null}}setActualNumPages(k=null){this._actualNumPages=k}get hasActualNumPages(){return this._actualNumPages!==null}get _pagesCount(){const k=this.toplevelPagesDict.get("Count");if(!Number.isInteger(k))throw new w.FormatError("Page count in top-level pages dictionary is not an integer.");return(0,w.shadow)(this,"_pagesCount",k)}get numPages(){return this.hasActualNumPages?this._actualNumPages:this._pagesCount}get destinations(){const k=this._readDests(),y=Object.create(null);if(k instanceof e.NameTree)for(const[f,R]of k.getAll()){const E=A(R);E&&(y[(0,w.stringToPDFString)(f)]=E)}else k instanceof P.Dict&&k.forEach(function(f,R){const E=A(R);E&&(y[f]=E)});return(0,w.shadow)(this,"destinations",y)}getDestination(k){const y=this._readDests();if(y instanceof e.NameTree){const f=A(y.get(k));if(f)return f;const R=this.destinations[k];if(R)return(0,w.warn)(`Found "${k}" at an incorrect position in the NameTree.`),R}else if(y instanceof P.Dict){const f=A(y.get(k));if(f)return f}return null}_readDests(){const k=this._catDict.get("Names");if(k!=null&&k.has("Dests"))return new e.NameTree(k.getRaw("Dests"),this.xref);if(this._catDict.has("Dests"))return this._catDict.get("Dests")}get pageLabels(){let k=null;try{k=this._readPageLabels()}catch(y){if(y instanceof i.MissingDataException)throw y;(0,w.warn)("Unable to read page labels.")}return(0,w.shadow)(this,"pageLabels",k)}_readPageLabels(){const k=this._catDict.getRaw("PageLabels");if(!k)return null;const y=new Array(this.numPages);let f=null,R="";const M=new e.NumberTree(k,this.xref).getAll();let b="",V=1;for(let l=0,x=this.numPages;l<x;l++){const H=M.get(l);if(H!==void 0){if(!(H instanceof P.Dict))throw new w.FormatError("PageLabel is not a dictionary.");if(H.has("Type")&&!(0,P.isName)(H.get("Type"),"PageLabel"))throw new w.FormatError("Invalid type in PageLabel dictionary.");if(H.has("S")){const s=H.get("S");if(!(s instanceof P.Name))throw new w.FormatError("Invalid style in PageLabel dictionary.");f=s.name}else f=null;if(H.has("P")){const s=H.get("P");if(typeof s!="string")throw new w.FormatError("Invalid prefix in PageLabel dictionary.");R=(0,w.stringToPDFString)(s)}else R="";if(H.has("St")){const s=H.get("St");if(!(Number.isInteger(s)&&s>=1))throw new w.FormatError("Invalid start in PageLabel dictionary.");V=s}else V=1}switch(f){case"D":b=V;break;case"R":case"r":b=(0,i.toRomanNumerals)(V,f==="r");break;case"A":case"a":const s=26,N=f==="a"?97:65,U=V-1;b=String.fromCharCode(N+U%s).repeat(Math.floor(U/s)+1);break;default:if(f)throw new w.FormatError(`Invalid style "${f}" in PageLabel dictionary.`);b=""}y[l]=R+b,V++}return y}get pageLayout(){const k=this._catDict.get("PageLayout");let y="";if(k instanceof P.Name)switch(k.name){case"SinglePage":case"OneColumn":case"TwoColumnLeft":case"TwoColumnRight":case"TwoPageLeft":case"TwoPageRight":y=k.name}return(0,w.shadow)(this,"pageLayout",y)}get pageMode(){const k=this._catDict.get("PageMode");let y="UseNone";if(k instanceof P.Name)switch(k.name){case"UseNone":case"UseOutlines":case"UseThumbs":case"FullScreen":case"UseOC":case"UseAttachments":y=k.name}return(0,w.shadow)(this,"pageMode",y)}get viewerPreferences(){const k=this._catDict.get("ViewerPreferences");if(!(k instanceof P.Dict))return(0,w.shadow)(this,"viewerPreferences",null);let y=null;for(const f of k.getKeys()){const R=k.get(f);let E;switch(f){case"HideToolbar":case"HideMenubar":case"HideWindowUI":case"FitWindow":case"CenterWindow":case"DisplayDocTitle":case"PickTrayByPDFSize":typeof R=="boolean"&&(E=R);break;case"NonFullScreenPageMode":if(R instanceof P.Name)switch(R.name){case"UseNone":case"UseOutlines":case"UseThumbs":case"UseOC":E=R.name;break;default:E="UseNone"}break;case"Direction":if(R instanceof P.Name)switch(R.name){case"L2R":case"R2L":E=R.name;break;default:E="L2R"}break;case"ViewArea":case"ViewClip":case"PrintArea":case"PrintClip":if(R instanceof P.Name)switch(R.name){case"MediaBox":case"CropBox":case"BleedBox":case"TrimBox":case"ArtBox":E=R.name;break;default:E="CropBox"}break;case"PrintScaling":if(R instanceof P.Name)switch(R.name){case"None":case"AppDefault":E=R.name;break;default:E="AppDefault"}break;case"Duplex":if(R instanceof P.Name)switch(R.name){case"Simplex":case"DuplexFlipShortEdge":case"DuplexFlipLongEdge":E=R.name;break;default:E="None"}break;case"PrintPageRange":Array.isArray(R)&&R.length%2===0&&R.every((b,V,l)=>Number.isInteger(b)&&b>0&&(V===0||b>=l[V-1])&&b<=this.numPages)&&(E=R);break;case"NumCopies":Number.isInteger(R)&&R>0&&(E=R);break;default:(0,w.warn)(`Ignoring non-standard key in ViewerPreferences: ${f}.`);continue}if(E===void 0){(0,w.warn)(`Bad value, for key "${f}", in ViewerPreferences: ${R}.`);continue}y||(y=Object.create(null)),y[f]=E}return(0,w.shadow)(this,"viewerPreferences",y)}get openAction(){const k=this._catDict.get("OpenAction"),y=Object.create(null);if(k instanceof P.Dict){const f=new P.Dict(this.xref);f.set("A",k);const R={url:null,dest:null,action:null};n.parseDestDictionary({destDict:f,resultObj:R}),Array.isArray(R.dest)?y.dest=R.dest:R.action&&(y.action=R.action)}else Array.isArray(k)&&(y.dest=k);return(0,w.shadow)(this,"openAction",(0,w.objectSize)(y)>0?y:null)}get attachments(){const k=this._catDict.get("Names");let y=null;if(k instanceof P.Dict&&k.has("EmbeddedFiles")){const f=new e.NameTree(k.getRaw("EmbeddedFiles"),this.xref);for(const[R,E]of f.getAll()){const M=new j.FileSpec(E,this.xref);y||(y=Object.create(null)),y[(0,w.stringToPDFString)(R)]=M.serializable}}return(0,w.shadow)(this,"attachments",y)}get xfaImages(){const k=this._catDict.get("Names");let y=null;if(k instanceof P.Dict&&k.has("XFAImages")){const f=new e.NameTree(k.getRaw("XFAImages"),this.xref);for(const[R,E]of f.getAll())y||(y=new P.Dict(this.xref)),y.set((0,w.stringToPDFString)(R),E)}return(0,w.shadow)(this,"xfaImages",y)}_collectJavaScript(){const k=this._catDict.get("Names");let y=null;function f(E,M){if(!(M instanceof P.Dict)||!(0,P.isName)(M.get("S"),"JavaScript"))return;let b=M.get("JS");if(b instanceof t.BaseStream)b=b.getString();else if(typeof b!="string")return;b=(0,w.stringToPDFString)(b).replaceAll("\0",""),b&&(y||(y=new Map)).set(E,b)}if(k instanceof P.Dict&&k.has("JavaScript")){const E=new e.NameTree(k.getRaw("JavaScript"),this.xref);for(const[M,b]of E.getAll())f((0,w.stringToPDFString)(M),b)}const R=this._catDict.get("OpenAction");return R&&f("OpenAction",R),y}get jsActions(){const k=this._collectJavaScript();let y=(0,i.collectActions)(this.xref,this._catDict,w.DocumentActionEventType);if(k){y||(y=Object.create(null));for(const[f,R]of k)f in y?y[f].push(R):y[f]=[R]}return(0,w.shadow)(this,"jsActions",y)}fontFallback(k,y){return rt(this,null,function*(){const f=yield Promise.all(this.fontCache);for(const R of f)if(R.loadedName===k){R.fallback(y);return}})}cleanup(k=!1){return rt(this,null,function*(){(0,o.clearGlobalCaches)(),this.globalImageCache.clear(k),this.pageKidsCountCache.clear(),this.pageIndexCache.clear(),this.nonBlendModesSet.clear();const y=yield Promise.all(this.fontCache);for(const{dict:f}of y)delete f.cacheKey;this.fontCache.clear(),this.builtInCMapCache.clear(),this.standardFontDataCache.clear(),this.systemFontCache.clear()})}getPageDict(k){return rt(this,null,function*(){const y=[this.toplevelPagesDict],f=new P.RefSet,R=this._catDict.getRaw("Pages");R instanceof P.Ref&&f.put(R);const E=this.xref,M=this.pageKidsCountCache,b=this.pageIndexCache;let V=0;for(;y.length;){const l=y.pop();if(l instanceof P.Ref){const h=M.get(l);if(h>=0&&V+h<=k){V+=h;continue}if(f.has(l))throw new w.FormatError("Pages tree contains circular reference.");f.put(l);const F=yield E.fetchAsync(l);if(F instanceof P.Dict){let N=F.getRaw("Type");if(N instanceof P.Ref&&(N=yield E.fetchAsync(N)),(0,P.isName)(N,"Page")||!F.has("Kids")){if(M.has(l)||M.put(l,1),b.has(l)||b.put(l,V),V===k)return[F,l];V++;continue}}y.push(F);continue}if(!(l instanceof P.Dict))throw new w.FormatError("Page dictionary kid reference points to wrong type of object.");const{objId:x}=l;let H=l.getRaw("Count");if(H instanceof P.Ref&&(H=yield E.fetchAsync(H)),Number.isInteger(H)&&H>=0&&(x&&!M.has(x)&&M.put(x,H),V+H<=k)){V+=H;continue}let s=l.getRaw("Kids");if(s instanceof P.Ref&&(s=yield E.fetchAsync(s)),!Array.isArray(s)){let h=l.getRaw("Type");if(h instanceof P.Ref&&(h=yield E.fetchAsync(h)),(0,P.isName)(h,"Page")||!l.has("Kids")){if(V===k)return[l,null];V++;continue}throw new w.FormatError("Page dictionary kids object is not an array.")}for(let h=s.length-1;h>=0;h--)y.push(s[h])}throw new Error(`Page index ${k} not found.`)})}getAllPageDicts(k=!1){return rt(this,null,function*(){const{ignoreErrors:y}=this.pdfManager.evaluatorOptions,f=[{currentNode:this.toplevelPagesDict,posInKids:0}],R=new P.RefSet,E=this._catDict.getRaw("Pages");E instanceof P.Ref&&R.put(E);const M=new Map,b=this.xref,V=this.pageIndexCache;let l=0;function x(s,h){h&&!V.has(h)&&V.put(h,l),M.set(l++,[s,h])}function H(s){if(s instanceof i.XRefEntryException&&!k)throw s;k&&y&&l===0&&((0,w.warn)(`getAllPageDicts - Skipping invalid first page: "${s}".`),s=P.Dict.empty),M.set(l++,[s,null])}for(;f.length>0;){const s=f.at(-1),{currentNode:h,posInKids:F}=s;let N=h.getRaw("Kids");if(N instanceof P.Ref)try{N=yield b.fetchAsync(N)}catch(m){H(m);break}if(!Array.isArray(N)){H(new w.FormatError("Page dictionary kids object is not an array."));break}if(F>=N.length){f.pop();continue}const U=N[F];let g;if(U instanceof P.Ref){if(R.has(U)){H(new w.FormatError("Pages tree contains circular reference."));break}R.put(U);try{g=yield b.fetchAsync(U)}catch(m){H(m);break}}else g=U;if(!(g instanceof P.Dict)){H(new w.FormatError("Page dictionary kid reference points to wrong type of object."));break}let S=g.getRaw("Type");if(S instanceof P.Ref)try{S=yield b.fetchAsync(S)}catch(m){H(m);break}(0,P.isName)(S,"Page")||!g.has("Kids")?x(g,U instanceof P.Ref?U:null):f.push({currentNode:g,posInKids:0}),s.posInKids++}return M})}getPageIndex(k){const y=this.pageIndexCache.get(k);if(y!==void 0)return Promise.resolve(y);const f=this.xref;function R(b){let V=0,l;return f.fetchAsync(b).then(function(x){if((0,P.isRefsEqual)(b,k)&&!(0,P.isDict)(x,"Page")&&!(x instanceof P.Dict&&!x.has("Type")&&x.has("Contents")))throw new w.FormatError("The reference does not point to a /Page dictionary.");if(!x)return null;if(!(x instanceof P.Dict))throw new w.FormatError("Node must be a dictionary.");return l=x.getRaw("Parent"),x.getAsync("Parent")}).then(function(x){if(!x)return null;if(!(x instanceof P.Dict))throw new w.FormatError("Parent must be a dictionary.");return x.getAsync("Kids")}).then(function(x){if(!x)return null;const H=[];let s=!1;for(const h of x){if(!(h instanceof P.Ref))throw new w.FormatError("Kid must be a reference.");if((0,P.isRefsEqual)(h,b)){s=!0;break}H.push(f.fetchAsync(h).then(function(F){if(!(F instanceof P.Dict))throw new w.FormatError("Kid node must be a dictionary.");F.has("Count")?V+=F.get("Count"):V++}))}if(!s)throw new w.FormatError("Kid reference not found in parent's kids.");return Promise.all(H).then(function(){return[V,l]})})}let E=0;const M=b=>R(b).then(V=>{if(!V)return this.pageIndexCache.put(k,E),E;const[l,x]=V;return E+=l,M(x)});return M(k)}get baseUrl(){const k=this._catDict.get("URI");if(k instanceof P.Dict){const y=k.get("Base");if(typeof y=="string"){const f=(0,w.createValidAbsoluteUrl)(y,null,{tryConvertEncoding:!0});if(f)return(0,w.shadow)(this,"baseUrl",f.href)}}return(0,w.shadow)(this,"baseUrl",this.pdfManager.docBaseUrl)}static parseDestDictionary({destDict:k,resultObj:y,docBaseUrl:f=null,docAttachments:R=null}){if(!(k instanceof P.Dict)){(0,w.warn)("parseDestDictionary: `destDict` must be a dictionary.");return}let E=k.get("A"),M,b;if(E instanceof P.Dict||(k.has("Dest")?E=k.get("Dest"):(E=k.get("AA"),E instanceof P.Dict&&(E.has("D")?E=E.get("D"):E.has("U")&&(E=E.get("U"))))),E instanceof P.Dict){const V=E.get("S");if(!(V instanceof P.Name)){(0,w.warn)("parseDestDictionary: Invalid type in Action dictionary.");return}const l=V.name;switch(l){case"ResetForm":const x=E.get("Flags"),H=((typeof x=="number"?x:0)&1)===0,s=[],h=[];for(const G of E.get("Fields")||[])G instanceof P.Ref?h.push(G.toString()):typeof G=="string"&&s.push((0,w.stringToPDFString)(G));y.resetForm={fields:s,refs:h,include:H};break;case"URI":M=E.get("URI"),M instanceof P.Name&&(M="/"+M.name);break;case"GoTo":b=E.get("D");break;case"Launch":case"GoToR":const F=E.get("F");F instanceof P.Dict?M=F.get("F")||null:typeof F=="string"&&(M=F);let N=E.get("D");if(N&&(N instanceof P.Name&&(N=N.name),typeof M=="string")){const G=M.split("#")[0];typeof N=="string"?M=G+"#"+N:Array.isArray(N)&&(M=G+"#"+JSON.stringify(N))}const U=E.get("NewWindow");typeof U=="boolean"&&(y.newWindow=U);break;case"GoToE":const g=E.get("T");let S;if(R&&g instanceof P.Dict){const G=g.get("R"),W=g.get("N");(0,P.isName)(G,"C")&&typeof W=="string"&&(S=R[(0,w.stringToPDFString)(W)])}S?y.attachment=S:(0,w.warn)('parseDestDictionary - unimplemented "GoToE" action.');break;case"Named":const m=E.get("N");m instanceof P.Name&&(y.action=m.name);break;case"SetOCGState":const r=E.get("State"),p=E.get("PreserveRB");if(!Array.isArray(r)||r.length===0)break;const c=[];for(const G of r)if(G instanceof P.Name)switch(G.name){case"ON":case"OFF":case"Toggle":c.push(G.name);break}else G instanceof P.Ref&&c.push(G.toString());if(c.length!==r.length)break;y.setOCGState={state:c,preserveRB:typeof p=="boolean"?p:!0};break;case"JavaScript":const u=E.get("JS");let q;u instanceof t.BaseStream?q=u.getString():typeof u=="string"&&(q=u);const J=q&&(0,i.recoverJsURL)((0,w.stringToPDFString)(q));if(J){M=J.url,y.newWindow=J.newWindow;break}default:if(l==="JavaScript"||l==="SubmitForm")break;(0,w.warn)(`parseDestDictionary - unsupported action: "${l}".`);break}}else k.has("Dest")&&(b=k.get("Dest"));if(typeof M=="string"){const V=(0,w.createValidAbsoluteUrl)(M,f,{addDefaultProtocol:!0,tryConvertEncoding:!0});V&&(y.url=V.href),y.unsafeUrl=M}b&&(b instanceof P.Name&&(b=b.name),typeof b=="string"?y.dest=(0,w.stringToPDFString)(b):Array.isArray(b)&&(y.dest=b))}}D.Catalog=n},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.NumberTree=D.NameTree=void 0;var i=se(4),w=se(2);class P{constructor(K,j,C){this.constructor===P&&(0,w.unreachable)("Cannot initialize NameOrNumberTree."),this.root=K,this.xref=j,this._type=C}getAll(){const K=new Map;if(!this.root)return K;const j=this.xref,C=new i.RefSet;C.put(this.root);const O=[this.root];for(;O.length>0;){const d=j.fetchIfRef(O.shift());if(!(d instanceof i.Dict))continue;if(d.has("Kids")){const n=d.get("Kids");if(!Array.isArray(n))continue;for(const I of n){if(C.has(I))throw new w.FormatError(`Duplicate entry in "${this._type}" tree.`);O.push(I),C.put(I)}continue}const A=d.get(this._type);if(Array.isArray(A))for(let n=0,I=A.length;n<I;n+=2)K.set(j.fetchIfRef(A[n]),j.fetchIfRef(A[n+1]))}return K}get(K){if(!this.root)return null;const j=this.xref;let C=j.fetchIfRef(this.root),O=0;const d=10;for(;C.has("Kids");){if(++O>d)return(0,w.warn)(`Search depth limit reached for "${this._type}" tree.`),null;const n=C.get("Kids");if(!Array.isArray(n))return null;let I=0,k=n.length-1;for(;I<=k;){const y=I+k>>1,f=j.fetchIfRef(n[y]),R=f.get("Limits");if(K<j.fetchIfRef(R[0]))k=y-1;else if(K>j.fetchIfRef(R[1]))I=y+1;else{C=f;break}}if(I>k)return null}const A=C.get(this._type);if(Array.isArray(A)){let n=0,I=A.length-2;for(;n<=I;){const k=n+I>>1,y=k+(k&1),f=j.fetchIfRef(A[y]);if(K<f)I=y-2;else if(K>f)n=y+2;else return j.fetchIfRef(A[y+1])}}return null}}class e extends P{constructor(K,j){super(K,j,"Names")}}D.NameTree=e;class t extends P{constructor(K,j){super(K,j,"Nums")}}D.NumberTree=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.clearGlobalCaches=e;var i=se(50),w=se(4),P=se(40);function e(){(0,i.clearPatternCaches)(),(0,w.clearPrimitiveCaches)(),(0,P.clearUnicodeCaches)()}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.FileSpec=void 0;var i=se(2),w=se(5),P=se(4);function e(o){return o.has("UF")?o.get("UF"):o.has("F")?o.get("F"):o.has("Unix")?o.get("Unix"):o.has("Mac")?o.get("Mac"):o.has("DOS")?o.get("DOS"):null}class t{constructor(K,j){K instanceof P.Dict&&(this.xref=j,this.root=K,K.has("FS")&&(this.fs=K.get("FS")),this.description=K.has("Desc")?(0,i.stringToPDFString)(K.get("Desc")):"",K.has("RF")&&(0,i.warn)("Related file specifications are not supported"),this.contentAvailable=!0,K.has("EF")||(this.contentAvailable=!1,(0,i.warn)("Non-embedded file specifications are not supported")))}get filename(){if(!this._filename&&this.root){const K=e(this.root)||"unnamed";this._filename=(0,i.stringToPDFString)(K).replaceAll("\\\\","\\").replaceAll("\\/","/").replaceAll("\\","/")}return this._filename}get content(){if(!this.contentAvailable)return null;!this.contentRef&&this.root&&(this.contentRef=e(this.root.get("EF")));let K=null;if(this.contentRef){const j=this.xref.fetchIfRef(this.contentRef);j instanceof w.BaseStream?K=j.getBytes():(0,i.warn)("Embedded file specification points to non-existing/invalid content")}else(0,i.warn)("Embedded file specification does not have a content");return K}get serializable(){return{filename:this.filename,content:this.content}}}D.FileSpec=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.MetadataParser=void 0;var i=se(71);class w{constructor(e){e=this._repair(e);const o=new i.SimpleXMLParser({lowerCaseName:!0}).parseFromString(e);this._metadataMap=new Map,this._data=e,o&&this._parse(o)}_repair(e){return e.replace(/^[^<]+/,"").replaceAll(/>\\376\\377([^<]+)/g,function(t,o){const K=o.replaceAll(/\\([0-3])([0-7])([0-7])/g,function(C,O,d,A){return String.fromCharCode(O*64+d*8+A*1)}).replaceAll(/&(amp|apos|gt|lt|quot);/g,function(C,O){switch(O){case"amp":return"&";case"apos":return"'";case"gt":return">";case"lt":return"<";case"quot":return'"'}throw new Error(`_repair: ${O} isn't defined.`)}),j=[">"];for(let C=0,O=K.length;C<O;C+=2){const d=K.charCodeAt(C)*256+K.charCodeAt(C+1);d>=32&&d<127&&d!==60&&d!==62&&d!==38?j.push(String.fromCharCode(d)):j.push("&#x"+(65536+d).toString(16).substring(1)+";")}return j.join("")})}_getSequence(e){const t=e.nodeName;return t!=="rdf:bag"&&t!=="rdf:seq"&&t!=="rdf:alt"?null:e.childNodes.filter(o=>o.nodeName==="rdf:li")}_parseArray(e){if(!e.hasChildNodes())return;const[t]=e.childNodes,o=this._getSequence(t)||[];this._metadataMap.set(e.nodeName,o.map(K=>K.textContent.trim()))}_parse(e){let t=e.documentElement;if(t.nodeName!=="rdf:rdf")for(t=t.firstChild;t&&t.nodeName!=="rdf:rdf";)t=t.nextSibling;if(!(!t||t.nodeName!=="rdf:rdf"||!t.hasChildNodes())){for(const o of t.childNodes)if(o.nodeName==="rdf:description")for(const K of o.childNodes){const j=K.nodeName;switch(j){case"#text":continue;case"dc:creator":case"dc:subject":this._parseArray(K);continue}this._metadataMap.set(j,K.textContent.trim())}}}get serializable(){return{parsedData:this._metadataMap,rawData:this._data}}}D.MetadataParser=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XMLParserErrorCode=D.XMLParserBase=D.SimpleXMLParser=D.SimpleDOMNode=void 0;var i=se(3);const w={NoError:0,EndOfDocument:-1,UnterminatedCdat:-2,UnterminatedXmlDeclaration:-3,UnterminatedDoctypeDeclaration:-4,UnterminatedComment:-5,MalformedElement:-6,OutOfMemory:-7,UnterminatedAttributeValue:-8,UnterminatedElement:-9,ElementNeverBegun:-10};D.XMLParserErrorCode=w;function P(j,C){const O=j[C];return O===" "||O===`
`||O==="\r"||O==="	"}function e(j){for(let C=0,O=j.length;C<O;C++)if(!P(j,C))return!1;return!0}class t{_resolveEntities(C){return C.replaceAll(/&([^;]+);/g,(O,d)=>{if(d.substring(0,2)==="#x")return String.fromCodePoint(parseInt(d.substring(2),16));if(d.substring(0,1)==="#")return String.fromCodePoint(parseInt(d.substring(1),10));switch(d){case"lt":return"<";case"gt":return">";case"amp":return"&";case"quot":return'"';case"apos":return"'"}return this.onResolveEntity(d)})}_parseContent(C,O){const d=[];let A=O;function n(){for(;A<C.length&&P(C,A);)++A}for(;A<C.length&&!P(C,A)&&C[A]!==">"&&C[A]!=="/";)++A;const I=C.substring(O,A);for(n();A<C.length&&C[A]!==">"&&C[A]!=="/"&&C[A]!=="?";){n();let k="",y="";for(;A<C.length&&!P(C,A)&&C[A]!=="=";)k+=C[A],++A;if(n(),C[A]!=="=")return null;++A,n();const f=C[A];if(f!=='"'&&f!=="'")return null;const R=C.indexOf(f,++A);if(R<0)return null;y=C.substring(A,R),d.push({name:k,value:this._resolveEntities(y)}),A=R+1,n()}return{name:I,attributes:d,parsed:A-O}}_parseProcessingInstruction(C,O){let d=O;function A(){for(;d<C.length&&P(C,d);)++d}for(;d<C.length&&!P(C,d)&&C[d]!==">"&&C[d]!=="?"&&C[d]!=="/";)++d;const n=C.substring(O,d);A();const I=d;for(;d<C.length&&(C[d]!=="?"||C[d+1]!==">");)++d;const k=C.substring(I,d);return{name:n,value:k,parsed:d-O}}parseXml(C){let O=0;for(;O<C.length;){const d=C[O];let A=O;if(d==="<"){++A;const n=C[A];let I;switch(n){case"/":if(++A,I=C.indexOf(">",A),I<0){this.onError(w.UnterminatedElement);return}this.onEndElement(C.substring(A,I)),A=I+1;break;case"?":++A;const k=this._parseProcessingInstruction(C,A);if(C.substring(A+k.parsed,A+k.parsed+2)!=="?>"){this.onError(w.UnterminatedXmlDeclaration);return}this.onPi(k.name,k.value),A+=k.parsed+2;break;case"!":if(C.substring(A+1,A+3)==="--"){if(I=C.indexOf("-->",A+3),I<0){this.onError(w.UnterminatedComment);return}this.onComment(C.substring(A+3,I)),A=I+3}else if(C.substring(A+1,A+8)==="[CDATA["){if(I=C.indexOf("]]>",A+8),I<0){this.onError(w.UnterminatedCdat);return}this.onCdata(C.substring(A+8,I)),A=I+3}else if(C.substring(A+1,A+8)==="DOCTYPE"){const R=C.indexOf("[",A+8);let E=!1;if(I=C.indexOf(">",A+8),I<0){this.onError(w.UnterminatedDoctypeDeclaration);return}if(R>0&&I>R){if(I=C.indexOf("]>",A+8),I<0){this.onError(w.UnterminatedDoctypeDeclaration);return}E=!0}const M=C.substring(A+8,I+(E?1:0));this.onDoctype(M),A=I+(E?2:1)}else{this.onError(w.MalformedElement);return}break;default:const y=this._parseContent(C,A);if(y===null){this.onError(w.MalformedElement);return}let f=!1;if(C.substring(A+y.parsed,A+y.parsed+2)==="/>")f=!0;else if(C.substring(A+y.parsed,A+y.parsed+1)!==">"){this.onError(w.UnterminatedElement);return}this.onBeginElement(y.name,y.attributes,f),A+=y.parsed+(f?2:1);break}}else{for(;A<C.length&&C[A]!=="<";)A++;const n=C.substring(O,A);this.onText(this._resolveEntities(n))}O=A}}onResolveEntity(C){return`&${C};`}onPi(C,O){}onComment(C){}onCdata(C){}onDoctype(C){}onText(C){}onBeginElement(C,O,d){}onEndElement(C){}onError(C){}}D.XMLParserBase=t;class o{constructor(C,O){this.nodeName=C,this.nodeValue=O,Object.defineProperty(this,"parentNode",{value:null,writable:!0})}get firstChild(){var C;return(C=this.childNodes)==null?void 0:C[0]}get nextSibling(){const C=this.parentNode.childNodes;if(!C)return;const O=C.indexOf(this);if(O!==-1)return C[O+1]}get textContent(){return this.childNodes?this.childNodes.map(function(C){return C.textContent}).join(""):this.nodeValue||""}get children(){return this.childNodes||[]}hasChildNodes(){var C;return((C=this.childNodes)==null?void 0:C.length)>0}searchNode(C,O){var I;if(O>=C.length)return this;const d=C[O];if(d.name.startsWith("#")&&O<C.length-1)return this.searchNode(C,O+1);const A=[];let n=this;for(;;){if(d.name===n.nodeName)if(d.pos===0){const k=n.searchNode(C,O+1);if(k!==null)return k}else{if(A.length===0)return null;{const[k]=A.pop();let y=0;for(const f of k.childNodes)if(d.name===f.nodeName){if(y===d.pos)return f.searchNode(C,O+1);y++}return n.searchNode(C,O+1)}}if(((I=n.childNodes)==null?void 0:I.length)>0)A.push([n,0]),n=n.childNodes[0];else{if(A.length===0)return null;for(;A.length!==0;){const[k,y]=A.pop(),f=y+1;if(f<k.childNodes.length){A.push([k,f]),n=k.childNodes[f];break}}if(A.length===0)return null}}}dump(C){if(this.nodeName==="#text"){C.push((0,i.encodeToXmlString)(this.nodeValue));return}if(C.push(`<${this.nodeName}`),this.attributes)for(const O of this.attributes)C.push(` ${O.name}="${(0,i.encodeToXmlString)(O.value)}"`);if(this.hasChildNodes()){C.push(">");for(const O of this.childNodes)O.dump(C);C.push(`</${this.nodeName}>`)}else this.nodeValue?C.push(`>${(0,i.encodeToXmlString)(this.nodeValue)}</${this.nodeName}>`):C.push("/>")}}D.SimpleDOMNode=o;class K extends t{constructor({hasAttributes:C=!1,lowerCaseName:O=!1}){super(),this._currentFragment=null,this._stack=null,this._errorCode=w.NoError,this._hasAttributes=C,this._lowerCaseName=O}parseFromString(C){if(this._currentFragment=[],this._stack=[],this._errorCode=w.NoError,this.parseXml(C),this._errorCode!==w.NoError)return;const[O]=this._currentFragment;if(O)return{documentElement:O}}onText(C){if(e(C))return;const O=new o("#text",C);this._currentFragment.push(O)}onCdata(C){const O=new o("#text",C);this._currentFragment.push(O)}onBeginElement(C,O,d){this._lowerCaseName&&(C=C.toLowerCase());const A=new o(C);A.childNodes=[],this._hasAttributes&&(A.attributes=O),this._currentFragment.push(A),!d&&(this._stack.push(this._currentFragment),this._currentFragment=A.childNodes)}onEndElement(C){this._currentFragment=this._stack.pop()||[];const O=this._currentFragment.at(-1);if(!O)return null;for(const d of O.childNodes)d.parentNode=O;return O}onError(C){this._errorCode=C}}D.SimpleXMLParser=K},(Fe,D,se)=>{var d,_a,n,la,k,$a,f,es;Object.defineProperty(D,"__esModule",{value:!0}),D.StructTreeRoot=D.StructTreePage=void 0;var i=se(2),w=se(4),P=se(67),e=se(73);const t=40,o={PAGE_CONTENT:1,STREAM_CONTENT:2,OBJECT:3,ANNOTATION:4,ELEMENT:5},E=class E{constructor(b,V){De(this,d);this.dict=b,this.ref=V instanceof w.Ref?V:null,this.roleMap=new Map,this.structParentIds=null}init(){this.readRoleMap()}addAnnotationIdToPage(b,V){Re(this,d,_a).call(this,b,V,o.ANNOTATION)}readRoleMap(){const b=this.dict.get("RoleMap");b instanceof w.Dict&&b.forEach((V,l)=>{l instanceof w.Name&&this.roleMap.set(V,l.name)})}static canCreateStructureTree(x){return rt(this,arguments,function*({catalogRef:b,pdfManager:V,newAnnotationsByPage:l}){var h;if(!(b instanceof w.Ref))return(0,i.warn)("Cannot save the struct tree: no catalog reference."),!1;let H=0,s=!0;for(const[F,N]of l){const{ref:U}=yield V.getPage(F);if(!(U instanceof w.Ref)){(0,i.warn)(`Cannot save the struct tree: page ${F} has no ref.`),s=!0;break}for(const g of N)(h=g.accessibilityData)!=null&&h.type&&(g.parentTreeId=H++,s=!1)}if(s){for(const F of l.values())for(const N of F)delete N.parentTreeId;return!1}return!0})}static createStructureTree(s){return rt(this,arguments,function*({newAnnotationsByPage:b,xref:V,catalogRef:l,pdfManager:x,newRefs:H}){const h=x.catalog.cloneDict(),F=V.getNewTemporaryRef();h.set("StructTreeRoot",F);const N=[];yield(0,e.writeObject)(l,h,N,V),H.push({ref:l,data:N.join("")});const U=new w.Dict(V);U.set("Type",w.Name.get("StructTreeRoot"));const g=V.getNewTemporaryRef();U.set("ParentTree",g);const S=[];U.set("K",S);const m=new w.Dict(V),r=[];m.set("Nums",r);const p=yield Re(this,n,la).call(this,{newAnnotationsByPage:b,structTreeRootRef:F,kids:S,nums:r,xref:V,pdfManager:x,newRefs:H,buffer:N});U.set("ParentTreeNextKey",p),N.length=0,yield(0,e.writeObject)(g,m,N,V),H.push({ref:g,data:N.join("")}),N.length=0,yield(0,e.writeObject)(F,U,N,V),H.push({ref:F,data:N.join("")})})}canUpdateStructTree(l){return rt(this,arguments,function*({pdfManager:b,newAnnotationsByPage:V}){var N,U;if(!this.ref)return(0,i.warn)("Cannot update the struct tree: no root reference."),!1;let x=this.dict.get("ParentTreeNextKey");if(!Number.isInteger(x)||x<0)return(0,i.warn)("Cannot update the struct tree: invalid next key."),!1;const H=this.dict.get("ParentTree");if(!(H instanceof w.Dict))return(0,i.warn)("Cannot update the struct tree: ParentTree isn't a dict."),!1;const s=H.get("Nums");if(!Array.isArray(s))return(0,i.warn)("Cannot update the struct tree: nums isn't an array."),!1;const{numPages:h}=b.catalog;for(const g of V.keys()){const{pageDict:S,ref:m}=yield b.getPage(g);if(!(m instanceof w.Ref))return(0,i.warn)(`Cannot save the struct tree: page ${g} has no ref.`),!1;const r=S.get("StructParents");if(!Number.isInteger(r)||r<0||r>=h)return(0,i.warn)(`Cannot save the struct tree: page ${g} has no id.`),!1}let F=!0;for(const[g,S]of V){const{pageDict:m}=yield b.getPage(g);Re(N=E,k,$a).call(N,{elements:S,xref:this.dict.xref,pageDict:m,parentTree:H});for(const r of S)(U=r.accessibilityData)!=null&&U.type&&(r.parentTreeId=x++,F=!1)}if(F){for(const g of V.values())for(const S of g)delete S.parentTreeId,delete S.structTreeParent;return!1}return!0})}updateStructureTree(x){return rt(this,arguments,function*({newAnnotationsByPage:b,pdfManager:V,newRefs:l}){var c;const H=this.dict.xref,s=this.dict.clone(),h=this.ref;let F=s.getRaw("ParentTree"),N;F instanceof w.Ref?N=H.fetch(F):(N=F,F=H.getNewTemporaryRef(),s.set("ParentTree",F)),N=N.clone();let U=N.getRaw("Nums"),g=null;U instanceof w.Ref&&(g=U,U=H.fetch(g)),U=U.slice(),g||N.set("Nums",U);let S=s.getRaw("K"),m=null;S instanceof w.Ref?(m=S,S=H.fetch(m)):(m=H.getNewTemporaryRef(),s.set("K",m)),S=Array.isArray(S)?S.slice():[S];const r=[],p=yield Re(c=E,n,la).call(c,{newAnnotationsByPage:b,structTreeRootRef:h,kids:S,nums:U,xref:H,pdfManager:V,newRefs:l,buffer:r});s.set("ParentTreeNextKey",p),r.length=0,yield(0,e.writeObject)(m,S,r,H),l.push({ref:m,data:r.join("")}),g&&(r.length=0,yield(0,e.writeObject)(g,U,r,H),l.push({ref:g,data:r.join("")})),r.length=0,yield(0,e.writeObject)(F,N,r,H),l.push({ref:F,data:r.join("")}),r.length=0,yield(0,e.writeObject)(h,s,r,H),l.push({ref:h,data:r.join("")})})}};d=new WeakSet,_a=function(b,V,l){if(!(b instanceof w.Ref)||V<0)return;this.structParentIds||(this.structParentIds=new w.RefSetCache);let x=this.structParentIds.get(b);x||(x=[],this.structParentIds.put(b,x)),x.push([V,l])},n=new WeakSet,la=function(N){return rt(this,arguments,function*({newAnnotationsByPage:b,structTreeRootRef:V,kids:l,nums:x,xref:H,pdfManager:s,newRefs:h,buffer:F}){const U=w.Name.get("OBJR");let g=-1/0;for(const[S,m]of b){const{ref:r}=yield s.getPage(S);for(const{accessibilityData:{type:p,title:c,lang:u,alt:q,expanded:J,actualText:G},ref:W,parentTreeId:ce,structTreeParent:_}of m){g=Math.max(g,ce);const ie=H.getNewTemporaryRef(),L=new w.Dict(H);L.set("S",w.Name.get(p)),c&&L.set("T",c),u&&L.set("Lang",u),q&&L.set("Alt",q),J&&L.set("E",J),G&&L.set("ActualText",G),_?yield Re(this,f,es).call(this,{structTreeParent:_,tagDict:L,newTagRef:ie,fallbackRef:V,xref:H,newRefs:h,buffer:F}):L.set("P",V);const oe=new w.Dict(H);L.set("K",oe),oe.set("Type",U),oe.set("Pg",r),oe.set("Obj",W),F.length=0,yield(0,e.writeObject)(ie,L,F,H),h.push({ref:ie,data:F.join("")}),x.push(ce,ie),l.push(ie)}}return g+1})},k=new WeakSet,$a=function({elements:b,xref:V,pageDict:l,parentTree:x}){const H=new Map;for(const U of b)if(U.structTreeParentId){const g=parseInt(U.structTreeParentId.split("_mc")[1],10);H.set(g,U)}const s=l.get("StructParents"),F=new P.NumberTree(x,V).get(s);if(!Array.isArray(F))return;const N=(U,g,S)=>{const m=H.get(U);if(m){const r=g.getRaw("P"),p=V.fetchIfRef(r);return r instanceof w.Ref&&p instanceof w.Dict&&(m.structTreeParent={ref:S,dict:g}),!0}return!1};for(const U of F){if(!(U instanceof w.Ref))continue;const g=V.fetch(U),S=g.get("K");if(Number.isInteger(S)){N(S,g,U);continue}if(Array.isArray(S)){for(let m of S)if(m=V.fetchIfRef(m),Number.isInteger(m)&&N(m,g,U))break}}},f=new WeakSet,es=function(N){return rt(this,arguments,function*({structTreeParent:{ref:b,dict:V},tagDict:l,newTagRef:x,fallbackRef:H,xref:s,newRefs:h,buffer:F}){const U=V.getRaw("P");let g=s.fetchIfRef(U);l.set("P",U);let S=!1,m,r=g.getRaw("K");if(r instanceof w.Ref?m=s.fetch(r):(m=r,r=s.getNewTemporaryRef(),g=g.clone(),g.set("K",r),S=!0),Array.isArray(m)){const p=m.indexOf(b);if(p>=0)m=m.slice(),m.splice(p+1,0,x);else{(0,i.warn)("Cannot update the struct tree: parent kid not found."),l.set("P",H);return}}else m instanceof w.Dict&&(m=[r,x],r=s.getNewTemporaryRef(),g.set("K",r),S=!0);F.length=0,yield(0,e.writeObject)(r,m,F,s),h.push({ref:r,data:F.join("")}),S&&(F.length=0,yield(0,e.writeObject)(U,g,F,s),h.push({ref:U,data:F.join("")}))})},De(E,n),De(E,k),De(E,f);let K=E;D.StructTreeRoot=K;class j{constructor(b,V){this.tree=b,this.dict=V,this.kids=[],this.parseKids()}get role(){const b=this.dict.get("S"),V=b instanceof w.Name?b.name:"",{root:l}=this.tree;return l.roleMap.has(V)?l.roleMap.get(V):V}parseKids(){let b=null;const V=this.dict.getRaw("Pg");V instanceof w.Ref&&(b=V.toString());const l=this.dict.get("K");if(Array.isArray(l))for(const x of l){const H=this.parseKid(b,x);H&&this.kids.push(H)}else{const x=this.parseKid(b,l);x&&this.kids.push(x)}}parseKid(b,V){if(Number.isInteger(V))return this.tree.pageDict.objId!==b?null:new C({type:o.PAGE_CONTENT,mcid:V,pageObjId:b});let l=null;if(V instanceof w.Ref?l=this.dict.xref.fetch(V):V instanceof w.Dict&&(l=V),!l)return null;const x=l.getRaw("Pg");x instanceof w.Ref&&(b=x.toString());const H=l.get("Type")instanceof w.Name?l.get("Type").name:null;if(H==="MCR"){if(this.tree.pageDict.objId!==b)return null;const s=l.getRaw("Stm");return new C({type:o.STREAM_CONTENT,refObjId:s instanceof w.Ref?s.toString():null,pageObjId:b,mcid:l.get("MCID")})}if(H==="OBJR"){if(this.tree.pageDict.objId!==b)return null;const s=l.getRaw("Obj");return new C({type:o.OBJECT,refObjId:s instanceof w.Ref?s.toString():null,pageObjId:b})}return new C({type:o.ELEMENT,dict:l})}}class C{constructor({type:b,dict:V=null,mcid:l=null,pageObjId:x=null,refObjId:H=null}){this.type=b,this.dict=V,this.mcid=l,this.pageObjId=x,this.refObjId=H,this.parentNode=null}}class O{constructor(b,V){this.root=b,this.rootDict=b?b.dict:null,this.pageDict=V,this.nodes=[]}parse(b){var h,F;if(!this.root||!this.rootDict)return;const V=this.rootDict.get("ParentTree");if(!V)return;const l=this.pageDict.get("StructParents"),x=b instanceof w.Ref&&((h=this.root.structParentIds)==null?void 0:h.get(b));if(!Number.isInteger(l)&&!x)return;const H=new Map,s=new P.NumberTree(V,this.rootDict.xref);if(Number.isInteger(l)){const N=s.get(l);if(Array.isArray(N))for(const U of N)U instanceof w.Ref&&this.addNode(this.rootDict.xref.fetch(U),H)}if(x)for(const[N,U]of x){const g=s.get(N);if(g){const S=this.addNode(this.rootDict.xref.fetchIfRef(g),H);((F=S==null?void 0:S.kids)==null?void 0:F.length)===1&&S.kids[0].type===o.OBJECT&&(S.kids[0].type=U)}}}addNode(b,V,l=0){if(l>t)return(0,i.warn)("StructTree MAX_DEPTH reached."),null;if(V.has(b))return V.get(b);const x=new j(this,b);V.set(b,x);const H=b.get("P");if(!H||(0,w.isName)(H.get("Type"),"StructTreeRoot"))return this.addTopLevelNode(b,x)||V.delete(b),x;const s=this.addNode(H,V,l+1);if(!s)return x;let h=!1;for(const F of s.kids)F.type===o.ELEMENT&&F.dict===b&&(F.parentNode=x,h=!0);return h||V.delete(b),x}addTopLevelNode(b,V){const l=this.rootDict.get("K");if(!l)return!1;if(l instanceof w.Dict)return l.objId!==b.objId?!1:(this.nodes[0]=V,!0);if(!Array.isArray(l))return!0;let x=!1;for(let H=0;H<l.length;H++){const s=l[H];(s==null?void 0:s.toString())===b.objId&&(this.nodes[H]=V,x=!0)}return x}get serializable(){function b(l,x,H=0){if(H>t){(0,i.warn)("StructTree too deep to be fully serialized.");return}const s=Object.create(null);s.role=l.role,s.children=[],x.children.push(s);const h=l.dict.get("Alt");typeof h=="string"&&(s.alt=(0,i.stringToPDFString)(h));const F=l.dict.get("Lang");typeof F=="string"&&(s.lang=(0,i.stringToPDFString)(F));for(const N of l.kids){const U=N.type===o.ELEMENT?N.parentNode:null;if(U){b(U,s,H+1);continue}else N.type===o.PAGE_CONTENT||N.type===o.STREAM_CONTENT?s.children.push({type:"content",id:`p${N.pageObjId}_mc${N.mcid}`}):N.type===o.OBJECT?s.children.push({type:"object",id:N.refObjId}):N.type===o.ANNOTATION&&s.children.push({type:"annotation",id:`${i.AnnotationPrefix}${N.refObjId}`})}}const V=Object.create(null);V.children=[],V.role="Root";for(const l of this.nodes)l&&b(l,V);return V}}D.StructTreePage=O},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.incrementalUpdate=R,D.writeDict=j,D.writeObject=K;var i=se(2),w=se(4),P=se(3),e=se(71),t=se(5),o=se(74);function K(l,x,H,s){return rt(this,arguments,function*(E,M,b,{encrypt:V=null}){const h=V==null?void 0:V.createCipherTransform(E.num,E.gen);b.push(`${E.num} ${E.gen} obj
`),M instanceof w.Dict?yield j(M,b,h):M instanceof t.BaseStream?yield C(M,b,h):Array.isArray(M)&&(yield O(M,b,h)),b.push(`
endobj
`)})}function j(E,M,b){return rt(this,null,function*(){M.push("<<");for(const V of E.getKeys())M.push(` /${(0,P.escapePDFName)(V)} `),yield d(E.getRaw(V),M,b);M.push(">>")})}function C(E,M,b){return rt(this,null,function*(){let V=E.getString();const{dict:l}=E,[x,H]=yield Promise.all([l.getAsync("Filter"),l.getAsync("DecodeParms")]),s=Array.isArray(x)?yield l.xref.fetchIfRefAsync(x[0]):x,h=(0,w.isName)(s,"FlateDecode");if(typeof CompressionStream!="undefined"&&(V.length>=256||h))try{const N=(0,i.stringToBytes)(V),U=new CompressionStream("deflate"),g=U.writable.getWriter();g.write(N),g.close();const S=yield new Response(U.readable).arrayBuffer();V=(0,i.bytesToString)(new Uint8Array(S));let m,r;x?h||(m=Array.isArray(x)?[w.Name.get("FlateDecode"),...x]:[w.Name.get("FlateDecode"),x],H&&(r=Array.isArray(H)?[null,...H]:[null,H])):m=w.Name.get("FlateDecode"),m&&l.set("Filter",m),r&&l.set("DecodeParms",r)}catch(N){(0,i.info)(`writeStream - cannot compress data: "${N}".`)}b&&(V=b.encryptString(V)),l.set("Length",V.length),yield j(l,M,b),M.push(` stream
`,V,`
endstream`)})}function O(E,M,b){return rt(this,null,function*(){M.push("[");let V=!0;for(const l of E)V?V=!1:M.push(" "),yield d(l,M,b);M.push("]")})}function d(E,M,b){return rt(this,null,function*(){E instanceof w.Name?M.push(`/${(0,P.escapePDFName)(E.name)}`):E instanceof w.Ref?M.push(`${E.num} ${E.gen} R`):Array.isArray(E)?yield O(E,M,b):typeof E=="string"?(b&&(E=b.encryptString(E)),M.push(`(${(0,P.escapeString)(E)})`)):typeof E=="number"?M.push((0,P.numberToString)(E)):typeof E=="boolean"?M.push(E.toString()):E instanceof w.Dict?yield j(E,M,b):E instanceof t.BaseStream?yield C(E,M,b):E===null?M.push("null"):(0,i.warn)(`Unhandled value in writer: ${typeof E}, please file a bug.`)})}function A(E,M,b,V){for(let l=M+b-1;l>b-1;l--)V[l]=E&255,E>>=8;return b+M}function n(E,M,b){for(let V=0,l=E.length;V<l;V++)b[M+V]=E.charCodeAt(V)&255}function I(E,M){const b=Math.floor(Date.now()/1e3),V=M.filename||"",l=[b.toString(),V,E.toString()];let x=l.reduce((h,F)=>h+F.length,0);for(const h of Object.values(M.info))l.push(h),x+=h.length;const H=new Uint8Array(x);let s=0;for(const h of l)n(h,s,H),s+=h.length;return(0,i.bytesToString)((0,o.calculateMD5)(H))}function k(E,M){const b=new e.SimpleXMLParser({hasAttributes:!0}).parseFromString(E);for(const{xfa:l}of M){if(!l)continue;const{path:x,value:H}=l;if(!x)continue;const s=(0,P.parseXFAPath)(x);let h=b.documentElement.searchNode(s,0);!h&&s.length>1&&(h=b.documentElement.searchNode([s.at(-1)],0)),h?h.childNodes=Array.isArray(H)?H.map(F=>new e.SimpleDOMNode("value",F)):[new e.SimpleDOMNode("#text",H)]:(0,i.warn)(`Node not found for path: ${x}`)}const V=[];return b.documentElement.dump(V),V.join("")}function y(h){return rt(this,arguments,function*({xref:E,acroForm:M,acroFormRef:b,hasXfa:V,hasXfaDatasetsEntry:l,xfaDatasetsRef:x,needAppearances:H,newRefs:s}){if(V&&!l&&!x&&(0,i.warn)("XFA - Cannot save it"),!H&&(!V||!x||l))return;const F=M.clone();if(V&&!l){const U=M.get("XFA").slice();U.splice(2,0,"datasets"),U.splice(3,0,x),F.set("XFA",U)}H&&F.set("NeedAppearances",!0);const N=[];yield K(b,F,N,E),s.push({ref:b,data:N.join("")})})}function f({xfaData:E,xfaDatasetsRef:M,newRefs:b,xref:V}){if(E===null){const H=V.fetchIfRef(M);E=k(H.getString(),b)}const l=V.encrypt;l&&(E=l.createCipherTransform(M.num,M.gen).encryptString(E));const x=`${M.num} ${M.gen} obj
<< /Type /EmbeddedFile /Length ${E.length}>>
stream
`+E+`
endstream
endobj
`;b.push({ref:M,data:x})}function R(U){return rt(this,arguments,function*({originalData:E,xrefInfo:M,newRefs:b,xref:V=null,hasXfa:l=!1,xfaDatasetsRef:x=null,hasXfaDatasetsEntry:H=!1,needAppearances:s,acroFormRef:h=null,acroForm:F=null,xfaData:N=null}){yield y({xref:V,acroForm:F,acroFormRef:h,hasXfa:l,hasXfaDatasetsEntry:H,xfaDatasetsRef:x,needAppearances:s,newRefs:b}),l&&f({xfaData:N,xfaDatasetsRef:x,newRefs:b,xref:V});const g=new w.Dict(null),S=M.newRef;let m,r;const p=E.at(-1);p===10||p===13?(m=[],r=E.length):(m=[`
`],r=E.length+1),g.set("Size",S.num+1),g.set("Prev",M.startXRef),g.set("Type",w.Name.get("XRef")),M.rootRef!==null&&g.set("Root",M.rootRef),M.infoRef!==null&&g.set("Info",M.infoRef),M.encryptRef!==null&&g.set("Encrypt",M.encryptRef),b.push({ref:S,data:""}),b=b.sort((T,Q)=>T.ref.num-Q.ref.num);const c=[[0,1,65535]],u=[0,1];let q=0;for(const{ref:T,data:Q}of b)q=Math.max(q,r),c.push([1,r,Math.min(T.gen,65535)]),r+=Q.length,u.push(T.num,1),m.push(Q);if(g.set("Index",u),Array.isArray(M.fileIds)&&M.fileIds.length>0){const T=I(r,M);g.set("ID",[M.fileIds[0],T])}const G=[1,Math.ceil(Math.log2(q)/8),2],ce=(G[0]+G[1]+G[2])*c.length;g.set("W",G),g.set("Length",ce),m.push(`${S.num} ${S.gen} obj
`),yield j(g,m,null),m.push(` stream
`);const _=m.reduce((T,Q)=>T+Q.length,0),ie=`
endstream
endobj
startxref
${r}
%%EOF
`,L=new Uint8Array(E.length+_+ce+ie.length);L.set(E);let oe=E.length;for(const T of m)n(T,oe,L),oe+=T.length;for(const[T,Q,v]of c)oe=A(T,G[0],oe,L),oe=A(Q,G[1],oe,L),oe=A(v,G[2],oe,L);return n(ie,oe,L),L})}},(Fe,D,se)=>{var R,E,ts,b,ua,l,is,H,nn,h,ha;Object.defineProperty(D,"__esModule",{value:!0}),D.calculateSHA256=D.calculateMD5=D.PDF20=D.PDF17=D.CipherTransformFactory=D.ARCFourCipher=D.AES256Cipher=D.AES128Cipher=void 0,D.calculateSHA384=C,D.calculateSHA512=void 0;var i=se(2),w=se(4),P=se(75);class e{constructor(g){this.a=0,this.b=0;const S=new Uint8Array(256),m=g.length;for(let r=0;r<256;++r)S[r]=r;for(let r=0,p=0;r<256;++r){const c=S[r];p=p+c+g[r%m]&255,S[r]=S[p],S[p]=c}this.s=S}encryptBlock(g){let S=this.a,m=this.b;const r=this.s,p=g.length,c=new Uint8Array(p);for(let u=0;u<p;++u){S=S+1&255;const q=r[S];m=m+q&255;const J=r[m];r[S]=J,r[m]=q,c[u]=g[u]^r[q+J&255]}return this.a=S,this.b=m,c}decryptBlock(g){return this.encryptBlock(g)}encrypt(g){return this.encryptBlock(g)}}D.ARCFourCipher=e;const t=function(){const g=new Uint8Array([7,12,17,22,7,12,17,22,7,12,17,22,7,12,17,22,5,9,14,20,5,9,14,20,5,9,14,20,5,9,14,20,4,11,16,23,4,11,16,23,4,11,16,23,4,11,16,23,6,10,15,21,6,10,15,21,6,10,15,21,6,10,15,21]),S=new Int32Array([-680876936,-389564586,606105819,-1044525330,-176418897,1200080426,-1473231341,-45705983,1770035416,-1958414417,-42063,-1990404162,1804603682,-40341101,-1502002290,1236535329,-165796510,-1069501632,643717713,-373897302,-701558691,38016083,-660478335,-405537848,568446438,-1019803690,-187363961,1163531501,-1444681467,-51403784,1735328473,-1926607734,-378558,-2022574463,1839030562,-35309556,-1530992060,1272893353,-155497632,-1094730640,681279174,-358537222,-722521979,76029189,-640364487,-421815835,530742520,-995338651,-198630844,1126891415,-1416354905,-57434055,1700485571,-1894986606,-1051523,-2054922799,1873313359,-30611744,-1560198380,1309151649,-145523070,-1120210379,718787259,-343485551]);function m(r,p,c){let u=1732584193,q=-271733879,J=-1732584194,G=271733878;const W=c+72&-64,ce=new Uint8Array(W);let _,ie;for(_=0;_<c;++_)ce[_]=r[p++];ce[_++]=128;const L=W-8;for(;_<L;)ce[_++]=0;ce[_++]=c<<3&255,ce[_++]=c>>5&255,ce[_++]=c>>13&255,ce[_++]=c>>21&255,ce[_++]=c>>>29&255,ce[_++]=0,ce[_++]=0,ce[_++]=0;const oe=new Int32Array(16);for(_=0;_<W;){for(ie=0;ie<16;++ie,_+=4)oe[ie]=ce[_]|ce[_+1]<<8|ce[_+2]<<16|ce[_+3]<<24;let T=u,Q=q,v=J,$=G,Z,te;for(ie=0;ie<64;++ie){ie<16?(Z=Q&v|~Q&$,te=ie):ie<32?(Z=$&Q|~$&v,te=5*ie+1&15):ie<48?(Z=Q^v^$,te=3*ie+5&15):(Z=v^(Q|~$),te=7*ie&15);const ne=$,X=T+Z+S[ie]+oe[te]|0,re=g[ie];$=v,v=Q,Q=Q+(X<<re|X>>>32-re)|0,T=ne}u=u+T|0,q=q+Q|0,J=J+v|0,G=G+$|0}return new Uint8Array([u&255,u>>8&255,u>>16&255,u>>>24&255,q&255,q>>8&255,q>>16&255,q>>>24&255,J&255,J>>8&255,J>>16&255,J>>>24&255,G&255,G>>8&255,G>>16&255,G>>>24&255])}return m}();D.calculateMD5=t;class o{constructor(g,S){this.high=g|0,this.low=S|0}and(g){this.high&=g.high,this.low&=g.low}xor(g){this.high^=g.high,this.low^=g.low}or(g){this.high|=g.high,this.low|=g.low}shiftRight(g){g>=32?(this.low=this.high>>>g-32|0,this.high=0):(this.low=this.low>>>g|this.high<<32-g,this.high=this.high>>>g|0)}shiftLeft(g){g>=32?(this.high=this.low<<g-32,this.low=0):(this.high=this.high<<g|this.low>>>32-g,this.low<<=g)}rotateRight(g){let S,m;g&32?(m=this.low,S=this.high):(S=this.low,m=this.high),g&=31,this.low=S>>>g|m<<32-g,this.high=m>>>g|S<<32-g}not(){this.high=~this.high,this.low=~this.low}add(g){const S=(this.low>>>0)+(g.low>>>0);let m=(this.high>>>0)+(g.high>>>0);S>4294967295&&(m+=1),this.low=S|0,this.high=m|0}copyTo(g,S){g[S]=this.high>>>24&255,g[S+1]=this.high>>16&255,g[S+2]=this.high>>8&255,g[S+3]=this.high&255,g[S+4]=this.low>>>24&255,g[S+5]=this.low>>16&255,g[S+6]=this.low>>8&255,g[S+7]=this.low&255}assign(g){this.high=g.high,this.low=g.low}}const K=function(){function g(G,W){return G>>>W|G<<32-W}function S(G,W,ce){return G&W^~G&ce}function m(G,W,ce){return G&W^G&ce^W&ce}function r(G){return g(G,2)^g(G,13)^g(G,22)}function p(G){return g(G,6)^g(G,11)^g(G,25)}function c(G){return g(G,7)^g(G,18)^G>>>3}function u(G){return g(G,17)^g(G,19)^G>>>10}const q=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function J(G,W,ce){let _=1779033703,ie=3144134277,L=1013904242,oe=2773480762,T=1359893119,Q=2600822924,v=528734635,$=1541459225;const Z=Math.ceil((ce+9)/64)*64,te=new Uint8Array(Z);let ne,X;for(ne=0;ne<ce;++ne)te[ne]=G[W++];te[ne++]=128;const re=Z-8;for(;ne<re;)te[ne++]=0;te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=ce>>>29&255,te[ne++]=ce>>21&255,te[ne++]=ce>>13&255,te[ne++]=ce>>5&255,te[ne++]=ce<<3&255;const ae=new Uint32Array(64);for(ne=0;ne<Z;){for(X=0;X<16;++X)ae[X]=te[ne]<<24|te[ne+1]<<16|te[ne+2]<<8|te[ne+3],ne+=4;for(X=16;X<64;++X)ae[X]=u(ae[X-2])+ae[X-7]+c(ae[X-15])+ae[X-16]|0;let z=_,le=ie,ue=L,ge=oe,ke=T,me=Q,fe=v,xe=$,pe,we;for(X=0;X<64;++X)pe=xe+p(ke)+S(ke,me,fe)+q[X]+ae[X],we=r(z)+m(z,le,ue),xe=fe,fe=me,me=ke,ke=ge+pe|0,ge=ue,ue=le,le=z,z=pe+we|0;_=_+z|0,ie=ie+le|0,L=L+ue|0,oe=oe+ge|0,T=T+ke|0,Q=Q+me|0,v=v+fe|0,$=$+xe|0}return new Uint8Array([_>>24&255,_>>16&255,_>>8&255,_&255,ie>>24&255,ie>>16&255,ie>>8&255,ie&255,L>>24&255,L>>16&255,L>>8&255,L&255,oe>>24&255,oe>>16&255,oe>>8&255,oe&255,T>>24&255,T>>16&255,T>>8&255,T&255,Q>>24&255,Q>>16&255,Q>>8&255,Q&255,v>>24&255,v>>16&255,v>>8&255,v&255,$>>24&255,$>>16&255,$>>8&255,$&255])}return J}();D.calculateSHA256=K;const j=function(){function g(J,G,W,ce,_){J.assign(G),J.and(W),_.assign(G),_.not(),_.and(ce),J.xor(_)}function S(J,G,W,ce,_){J.assign(G),J.and(W),_.assign(G),_.and(ce),J.xor(_),_.assign(W),_.and(ce),J.xor(_)}function m(J,G,W){J.assign(G),J.rotateRight(28),W.assign(G),W.rotateRight(34),J.xor(W),W.assign(G),W.rotateRight(39),J.xor(W)}function r(J,G,W){J.assign(G),J.rotateRight(14),W.assign(G),W.rotateRight(18),J.xor(W),W.assign(G),W.rotateRight(41),J.xor(W)}function p(J,G,W){J.assign(G),J.rotateRight(1),W.assign(G),W.rotateRight(8),J.xor(W),W.assign(G),W.shiftRight(7),J.xor(W)}function c(J,G,W){J.assign(G),J.rotateRight(19),W.assign(G),W.rotateRight(61),J.xor(W),W.assign(G),W.shiftRight(6),J.xor(W)}const u=[new o(1116352408,3609767458),new o(1899447441,602891725),new o(3049323471,3964484399),new o(3921009573,2173295548),new o(961987163,4081628472),new o(1508970993,3053834265),new o(2453635748,2937671579),new o(2870763221,3664609560),new o(3624381080,2734883394),new o(310598401,1164996542),new o(607225278,1323610764),new o(1426881987,3590304994),new o(1925078388,4068182383),new o(2162078206,991336113),new o(2614888103,633803317),new o(3248222580,3479774868),new o(3835390401,2666613458),new o(4022224774,944711139),new o(264347078,2341262773),new o(604807628,2007800933),new o(770255983,1495990901),new o(1249150122,1856431235),new o(1555081692,3175218132),new o(1996064986,2198950837),new o(2554220882,3999719339),new o(2821834349,766784016),new o(2952996808,2566594879),new o(3210313671,3203337956),new o(3336571891,1034457026),new o(3584528711,2466948901),new o(113926993,3758326383),new o(338241895,168717936),new o(666307205,1188179964),new o(773529912,1546045734),new o(1294757372,1522805485),new o(1396182291,2643833823),new o(1695183700,2343527390),new o(1986661051,1014477480),new o(2177026350,1206759142),new o(2456956037,344077627),new o(2730485921,1290863460),new o(2820302411,3158454273),new o(3259730800,3505952657),new o(3345764771,106217008),new o(3516065817,3606008344),new o(3600352804,1432725776),new o(4094571909,1467031594),new o(275423344,851169720),new o(430227734,3100823752),new o(506948616,1363258195),new o(659060556,3750685593),new o(883997877,3785050280),new o(958139571,3318307427),new o(1322822218,3812723403),new o(1537002063,2003034995),new o(1747873779,3602036899),new o(1955562222,1575990012),new o(2024104815,1125592928),new o(2227730452,2716904306),new o(2361852424,442776044),new o(2428436474,593698344),new o(2756734187,3733110249),new o(3204031479,2999351573),new o(3329325298,3815920427),new o(3391569614,3928383900),new o(3515267271,566280711),new o(3940187606,3454069534),new o(4118630271,4000239992),new o(116418474,1914138554),new o(174292421,2731055270),new o(289380356,3203993006),new o(460393269,320620315),new o(685471733,587496836),new o(852142971,1086792851),new o(1017036298,365543100),new o(1126000580,2618297676),new o(1288033470,3409855158),new o(1501505948,4234509866),new o(1607167915,987167468),new o(1816402316,1246189591)];function q(J,G,W,ce=!1){let _,ie,L,oe,T,Q,v,$;ce?(_=new o(3418070365,3238371032),ie=new o(1654270250,914150663),L=new o(2438529370,812702999),oe=new o(355462360,4144912697),T=new o(1731405415,4290775857),Q=new o(2394180231,1750603025),v=new o(3675008525,1694076839),$=new o(1203062813,3204075428)):(_=new o(1779033703,4089235720),ie=new o(3144134277,2227873595),L=new o(1013904242,4271175723),oe=new o(2773480762,1595750129),T=new o(1359893119,2917565137),Q=new o(2600822924,725511199),v=new o(528734635,4215389547),$=new o(1541459225,327033209));const Z=Math.ceil((W+17)/128)*128,te=new Uint8Array(Z);let ne,X;for(ne=0;ne<W;++ne)te[ne]=J[G++];te[ne++]=128;const re=Z-16;for(;ne<re;)te[ne++]=0;te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=0,te[ne++]=W>>>29&255,te[ne++]=W>>21&255,te[ne++]=W>>13&255,te[ne++]=W>>5&255,te[ne++]=W<<3&255;const ae=new Array(80);for(ne=0;ne<80;ne++)ae[ne]=new o(0,0);let z=new o(0,0),le=new o(0,0),ue=new o(0,0),ge=new o(0,0),ke=new o(0,0),me=new o(0,0),fe=new o(0,0),xe=new o(0,0);const pe=new o(0,0),we=new o(0,0),Oe=new o(0,0),Te=new o(0,0);let Ce;for(ne=0;ne<Z;){for(X=0;X<16;++X)ae[X].high=te[ne]<<24|te[ne+1]<<16|te[ne+2]<<8|te[ne+3],ae[X].low=te[ne+4]<<24|te[ne+5]<<16|te[ne+6]<<8|te[ne+7],ne+=8;for(X=16;X<80;++X)Ce=ae[X],c(Ce,ae[X-2],Te),Ce.add(ae[X-7]),p(Oe,ae[X-15],Te),Ce.add(Oe),Ce.add(ae[X-16]);for(z.assign(_),le.assign(ie),ue.assign(L),ge.assign(oe),ke.assign(T),me.assign(Q),fe.assign(v),xe.assign($),X=0;X<80;++X)pe.assign(xe),r(Oe,ke,Te),pe.add(Oe),g(Oe,ke,me,fe,Te),pe.add(Oe),pe.add(u[X]),pe.add(ae[X]),m(we,z,Te),S(Oe,z,le,ue,Te),we.add(Oe),Ce=xe,xe=fe,fe=me,me=ke,ge.add(pe),ke=ge,ge=ue,ue=le,le=z,Ce.assign(pe),Ce.add(we),z=Ce;_.add(z),ie.add(le),L.add(ue),oe.add(ge),T.add(ke),Q.add(me),v.add(fe),$.add(xe)}let Ae;return ce?(Ae=new Uint8Array(48),_.copyTo(Ae,0),ie.copyTo(Ae,8),L.copyTo(Ae,16),oe.copyTo(Ae,24),T.copyTo(Ae,32),Q.copyTo(Ae,40)):(Ae=new Uint8Array(64),_.copyTo(Ae,0),ie.copyTo(Ae,8),L.copyTo(Ae,16),oe.copyTo(Ae,24),T.copyTo(Ae,32),Q.copyTo(Ae,40),v.copyTo(Ae,48),$.copyTo(Ae,56)),Ae}return q}();D.calculateSHA512=j;function C(U,g,S){return j(U,g,S,!0)}class O{decryptBlock(g){return g}encrypt(g){return g}}class d{constructor(){this.constructor===d&&(0,i.unreachable)("Cannot initialize AESBaseCipher."),this._s=new Uint8Array([99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]),this._inv_s=new Uint8Array([82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125]),this._mix=new Uint32Array([0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795]),this._mixCol=new Uint8Array(256);for(let g=0;g<256;g++)this._mixCol[g]=g<128?g<<1:g<<1^27;this.buffer=new Uint8Array(16),this.bufferPosition=0}_expandKey(g){(0,i.unreachable)("Cannot call `_expandKey` on the base class")}_decrypt(g,S){let m,r,p;const c=new Uint8Array(16);c.set(g);for(let u=0,q=this._keySize;u<16;++u,++q)c[u]^=S[q];for(let u=this._cyclesOfRepetition-1;u>=1;--u){m=c[13],c[13]=c[9],c[9]=c[5],c[5]=c[1],c[1]=m,m=c[14],r=c[10],c[14]=c[6],c[10]=c[2],c[6]=m,c[2]=r,m=c[15],r=c[11],p=c[7],c[15]=c[3],c[11]=m,c[7]=r,c[3]=p;for(let q=0;q<16;++q)c[q]=this._inv_s[c[q]];for(let q=0,J=u*16;q<16;++q,++J)c[q]^=S[J];for(let q=0;q<16;q+=4){const J=this._mix[c[q]],G=this._mix[c[q+1]],W=this._mix[c[q+2]],ce=this._mix[c[q+3]];m=J^G>>>8^G<<24^W>>>16^W<<16^ce>>>24^ce<<8,c[q]=m>>>24&255,c[q+1]=m>>16&255,c[q+2]=m>>8&255,c[q+3]=m&255}}m=c[13],c[13]=c[9],c[9]=c[5],c[5]=c[1],c[1]=m,m=c[14],r=c[10],c[14]=c[6],c[10]=c[2],c[6]=m,c[2]=r,m=c[15],r=c[11],p=c[7],c[15]=c[3],c[11]=m,c[7]=r,c[3]=p;for(let u=0;u<16;++u)c[u]=this._inv_s[c[u]],c[u]^=S[u];return c}_encrypt(g,S){const m=this._s;let r,p,c;const u=new Uint8Array(16);u.set(g);for(let q=0;q<16;++q)u[q]^=S[q];for(let q=1;q<this._cyclesOfRepetition;q++){for(let J=0;J<16;++J)u[J]=m[u[J]];c=u[1],u[1]=u[5],u[5]=u[9],u[9]=u[13],u[13]=c,c=u[2],p=u[6],u[2]=u[10],u[6]=u[14],u[10]=c,u[14]=p,c=u[3],p=u[7],r=u[11],u[3]=u[15],u[7]=c,u[11]=p,u[15]=r;for(let J=0;J<16;J+=4){const G=u[J+0],W=u[J+1],ce=u[J+2],_=u[J+3];r=G^W^ce^_,u[J+0]^=r^this._mixCol[G^W],u[J+1]^=r^this._mixCol[W^ce],u[J+2]^=r^this._mixCol[ce^_],u[J+3]^=r^this._mixCol[_^G]}for(let J=0,G=q*16;J<16;++J,++G)u[J]^=S[G]}for(let q=0;q<16;++q)u[q]=m[u[q]];c=u[1],u[1]=u[5],u[5]=u[9],u[9]=u[13],u[13]=c,c=u[2],p=u[6],u[2]=u[10],u[6]=u[14],u[10]=c,u[14]=p,c=u[3],p=u[7],r=u[11],u[3]=u[15],u[7]=c,u[11]=p,u[15]=r;for(let q=0,J=this._keySize;q<16;++q,++J)u[q]^=S[J];return u}_decryptBlock2(g,S){const m=g.length;let r=this.buffer,p=this.bufferPosition;const c=[];let u=this.iv;for(let G=0;G<m;++G){if(r[p]=g[G],++p,p<16)continue;const W=this._decrypt(r,this._key);for(let ce=0;ce<16;++ce)W[ce]^=u[ce];u=r,c.push(W),r=new Uint8Array(16),p=0}if(this.buffer=r,this.bufferLength=p,this.iv=u,c.length===0)return new Uint8Array(0);let q=16*c.length;if(S){const G=c.at(-1);let W=G[15];if(W<=16){for(let ce=15,_=16-W;ce>=_;--ce)if(G[ce]!==W){W=0;break}q-=W,c[c.length-1]=G.subarray(0,16-W)}}const J=new Uint8Array(q);for(let G=0,W=0,ce=c.length;G<ce;++G,W+=16)J.set(c[G],W);return J}decryptBlock(g,S,m=null){const r=g.length,p=this.buffer;let c=this.bufferPosition;if(m)this.iv=m;else{for(let u=0;c<16&&u<r;++u,++c)p[c]=g[u];if(c<16)return this.bufferLength=c,new Uint8Array(0);this.iv=p,g=g.subarray(16)}return this.buffer=new Uint8Array(16),this.bufferLength=0,this.decryptBlock=this._decryptBlock2,this.decryptBlock(g,S)}encrypt(g,S){const m=g.length;let r=this.buffer,p=this.bufferPosition;const c=[];S||(S=new Uint8Array(16));for(let J=0;J<m;++J){if(r[p]=g[J],++p,p<16)continue;for(let W=0;W<16;++W)r[W]^=S[W];const G=this._encrypt(r,this._key);S=G,c.push(G),r=new Uint8Array(16),p=0}if(this.buffer=r,this.bufferLength=p,this.iv=S,c.length===0)return new Uint8Array(0);const u=16*c.length,q=new Uint8Array(u);for(let J=0,G=0,W=c.length;J<W;++J,G+=16)q.set(c[J],G);return q}}class A extends d{constructor(g){super(),this._cyclesOfRepetition=10,this._keySize=160,this._rcon=new Uint8Array([141,1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145,57,114,228,211,189,97,194,159,37,74,148,51,102,204,131,29,58,116,232,203,141,1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145,57,114,228,211,189,97,194,159,37,74,148,51,102,204,131,29,58,116,232,203,141,1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145,57,114,228,211,189,97,194,159,37,74,148,51,102,204,131,29,58,116,232,203,141,1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145,57,114,228,211,189,97,194,159,37,74,148,51,102,204,131,29,58,116,232,203,141,1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145,57,114,228,211,189,97,194,159,37,74,148,51,102,204,131,29,58,116,232,203,141]),this._key=this._expandKey(g)}_expandKey(g){const m=this._s,r=this._rcon,p=new Uint8Array(176);p.set(g);for(let c=16,u=1;c<176;++u){let q=p[c-3],J=p[c-2],G=p[c-1],W=p[c-4];q=m[q],J=m[J],G=m[G],W=m[W],q^=r[u];for(let ce=0;ce<4;++ce)p[c]=q^=p[c-16],c++,p[c]=J^=p[c-16],c++,p[c]=G^=p[c-16],c++,p[c]=W^=p[c-16],c++}return p}}D.AES128Cipher=A;class n extends d{constructor(g){super(),this._cyclesOfRepetition=14,this._keySize=224,this._key=this._expandKey(g)}_expandKey(g){const m=this._s,r=new Uint8Array(240);r.set(g);let p=1,c,u,q,J;for(let G=32,W=1;G<240;++W){G%32===16?(c=m[c],u=m[u],q=m[q],J=m[J]):G%32===0&&(c=r[G-3],u=r[G-2],q=r[G-1],J=r[G-4],c=m[c],u=m[u],q=m[q],J=m[J],c^=p,(p<<=1)>=256&&(p=(p^27)&255));for(let ce=0;ce<4;++ce)r[G]=c^=r[G-32],G++,r[G]=u^=r[G-32],G++,r[G]=q^=r[G-32],G++,r[G]=J^=r[G-32],G++}return r}}D.AES256Cipher=n;class I{checkOwnerPassword(g,S,m,r){const p=new Uint8Array(g.length+56);p.set(g,0),p.set(S,g.length),p.set(m,g.length+S.length);const c=K(p,0,p.length);return(0,i.isArrayEqual)(c,r)}checkUserPassword(g,S,m){const r=new Uint8Array(g.length+8);r.set(g,0),r.set(S,g.length);const p=K(r,0,r.length);return(0,i.isArrayEqual)(p,m)}getOwnerKey(g,S,m,r){const p=new Uint8Array(g.length+56);p.set(g,0),p.set(S,g.length),p.set(m,g.length+S.length);const c=K(p,0,p.length);return new n(c).decryptBlock(r,!1,new Uint8Array(16))}getUserKey(g,S,m){const r=new Uint8Array(g.length+8);r.set(g,0),r.set(S,g.length);const p=K(r,0,r.length);return new n(p).decryptBlock(m,!1,new Uint8Array(16))}}D.PDF17=I;class k{_hash(g,S,m){let r=K(S,0,S.length).subarray(0,32),p=[0],c=0;for(;c<64||p.at(-1)>c-32;){const u=g.length+r.length+m.length,q=new Uint8Array(u);let J=0;q.set(g,J),J+=g.length,q.set(r,J),J+=r.length,q.set(m,J);const G=new Uint8Array(u*64);for(let _=0,ie=0;_<64;_++,ie+=u)G.set(q,ie);p=new A(r.subarray(0,16)).encrypt(G,r.subarray(16,32));const ce=p.slice(0,16).reduce((_,ie)=>_+ie,0)%3;ce===0?r=K(p,0,p.length):ce===1?r=C(p,0,p.length):ce===2&&(r=j(p,0,p.length)),c++}return r.subarray(0,32)}checkOwnerPassword(g,S,m,r){const p=new Uint8Array(g.length+56);p.set(g,0),p.set(S,g.length),p.set(m,g.length+S.length);const c=this._hash(g,p,m);return(0,i.isArrayEqual)(c,r)}checkUserPassword(g,S,m){const r=new Uint8Array(g.length+8);r.set(g,0),r.set(S,g.length);const p=this._hash(g,r,[]);return(0,i.isArrayEqual)(p,m)}getOwnerKey(g,S,m,r){const p=new Uint8Array(g.length+56);p.set(g,0),p.set(S,g.length),p.set(m,g.length+S.length);const c=this._hash(g,p,m);return new n(c).decryptBlock(r,!1,new Uint8Array(16))}getUserKey(g,S,m){const r=new Uint8Array(g.length+8);r.set(g,0),r.set(S,g.length);const p=this._hash(g,r,[]);return new n(p).decryptBlock(m,!1,new Uint8Array(16))}}D.PDF20=k;class y{constructor(g,S){this.StringCipherConstructor=g,this.StreamCipherConstructor=S}createStream(g,S){const m=new this.StreamCipherConstructor;return new P.DecryptStream(g,S,function(p,c){return m.decryptBlock(p,c)})}decryptString(g){const S=new this.StringCipherConstructor;let m=(0,i.stringToBytes)(g);return m=S.decryptBlock(m,!0),(0,i.bytesToString)(m)}encryptString(g){const S=new this.StringCipherConstructor;if(S instanceof d){const p=16-g.length%16;g+=String.fromCharCode(p).repeat(p);const c=new Uint8Array(16);if(typeof crypto!="undefined")crypto.getRandomValues(c);else for(let J=0;J<16;J++)c[J]=Math.floor(256*Math.random());let u=(0,i.stringToBytes)(g);u=S.encrypt(u,c);const q=new Uint8Array(16+u.length);return q.set(c),q.set(u,16),(0,i.bytesToString)(q)}let m=(0,i.stringToBytes)(g);return m=S.encrypt(m),(0,i.bytesToString)(m)}}const N=class N{constructor(g,S,m){De(this,E);De(this,b);De(this,l);De(this,H);De(this,h);const r=g.get("Filter");if(!(0,w.isName)(r,"Standard"))throw new i.FormatError("unknown encryption method");this.filterName=r.name,this.dict=g;const p=g.get("V");if(!Number.isInteger(p)||p!==1&&p!==2&&p!==4&&p!==5)throw new i.FormatError("unsupported encryption algorithm");this.algorithm=p;let c=g.get("Length");if(!c)if(p<=3)c=40;else{const T=g.get("CF"),Q=g.get("StmF");if(T instanceof w.Dict&&Q instanceof w.Name){T.suppressEncryption=!0;const v=T.get(Q.name);c=(v==null?void 0:v.get("Length"))||128,c<40&&(c<<=3)}}if(!Number.isInteger(c)||c<40||c%8!==0)throw new i.FormatError("invalid key length");const u=(0,i.stringToBytes)(g.get("O")),q=(0,i.stringToBytes)(g.get("U")),J=u.subarray(0,32),G=q.subarray(0,32),W=g.get("P"),ce=g.get("R"),_=(p===4||p===5)&&g.get("EncryptMetadata")!==!1;this.encryptMetadata=_;const ie=(0,i.stringToBytes)(S);let L;if(m){if(ce===6)try{m=(0,i.utf8StringToString)(m)}catch(T){(0,i.warn)("CipherTransformFactory: Unable to convert UTF8 encoded password.")}L=(0,i.stringToBytes)(m)}let oe;if(p!==5)oe=Re(this,b,ua).call(this,ie,L,J,G,W,ce,c,_);else{const T=u.subarray(32,40),Q=u.subarray(40,48),v=q.subarray(0,48),$=q.subarray(32,40),Z=q.subarray(40,48),te=(0,i.stringToBytes)(g.get("OE")),ne=(0,i.stringToBytes)(g.get("UE")),X=(0,i.stringToBytes)(g.get("Perms"));oe=Re(this,E,ts).call(this,ce,L,J,T,Q,v,G,$,Z,te,ne,X)}if(!oe&&!m)throw new i.PasswordException("No password given",i.PasswordResponses.NEED_PASSWORD);if(!oe&&m){const T=Re(this,l,is).call(this,L,J,ce,c);oe=Re(this,b,ua).call(this,ie,T,J,G,W,ce,c,_)}if(!oe)throw new i.PasswordException("Incorrect Password",i.PasswordResponses.INCORRECT_PASSWORD);if(this.encryptionKey=oe,p>=4){const T=g.get("CF");T instanceof w.Dict&&(T.suppressEncryption=!0),this.cf=T,this.stmf=g.get("StmF")||w.Name.get("Identity"),this.strf=g.get("StrF")||w.Name.get("Identity"),this.eff=g.get("EFF")||this.stmf}}createCipherTransform(g,S){if(this.algorithm===4||this.algorithm===5)return new y(Re(this,h,ha).call(this,this.cf,this.strf,g,S,this.encryptionKey),Re(this,h,ha).call(this,this.cf,this.stmf,g,S,this.encryptionKey));const m=Re(this,H,nn).call(this,g,S,this.encryptionKey,!1),r=function(){return new e(m)};return new y(r,r)}};R=new WeakMap,E=new WeakSet,ts=function(g,S,m,r,p,c,u,q,J,G,W,ce){if(S){const ie=Math.min(127,S.length);S=S.subarray(0,ie)}else S=[];const _=g===6?new k:new I;return _.checkUserPassword(S,q,u)?_.getUserKey(S,J,W):S.length&&_.checkOwnerPassword(S,r,c,m)?_.getOwnerKey(S,p,c,G):null},b=new WeakSet,ua=function(g,S,m,r,p,c,u,q){const J=40+m.length+g.length,G=new Uint8Array(J);let W=0,ce,_;if(S)for(_=Math.min(32,S.length);W<_;++W)G[W]=S[W];for(ce=0;W<32;)G[W++]=he(N,R)[ce++];for(ce=0,_=m.length;ce<_;++ce)G[W++]=m[ce];for(G[W++]=p&255,G[W++]=p>>8&255,G[W++]=p>>16&255,G[W++]=p>>>24&255,ce=0,_=g.length;ce<_;++ce)G[W++]=g[ce];c>=4&&!q&&(G[W++]=255,G[W++]=255,G[W++]=255,G[W++]=255);let ie=t(G,0,W);const L=u>>3;if(c>=3)for(ce=0;ce<50;++ce)ie=t(ie,0,L);const oe=ie.subarray(0,L);let T,Q;if(c>=3){for(W=0;W<32;++W)G[W]=he(N,R)[W];for(ce=0,_=g.length;ce<_;++ce)G[W++]=g[ce];T=new e(oe),Q=T.encryptBlock(t(G,0,W)),_=oe.length;const v=new Uint8Array(_);for(ce=1;ce<=19;++ce){for(let $=0;$<_;++$)v[$]=oe[$]^ce;T=new e(v),Q=T.encryptBlock(Q)}for(ce=0,_=Q.length;ce<_;++ce)if(r[ce]!==Q[ce])return null}else for(T=new e(oe),Q=T.encryptBlock(he(N,R)),ce=0,_=Q.length;ce<_;++ce)if(r[ce]!==Q[ce])return null;return oe},l=new WeakSet,is=function(g,S,m,r){const p=new Uint8Array(32);let c=0;const u=Math.min(32,g.length);for(;c<u;++c)p[c]=g[c];let q=0;for(;c<32;)p[c++]=he(N,R)[q++];let J=t(p,0,c);const G=r>>3;if(m>=3)for(q=0;q<50;++q)J=t(J,0,J.length);let W,ce;if(m>=3){ce=S;const _=new Uint8Array(G);for(q=19;q>=0;q--){for(let ie=0;ie<G;++ie)_[ie]=J[ie]^q;W=new e(_),ce=W.encryptBlock(ce)}}else W=new e(J.subarray(0,G)),ce=W.encryptBlock(S);return ce},H=new WeakSet,nn=function(g,S,m,r=!1){const p=new Uint8Array(m.length+9),c=m.length;let u;for(u=0;u<c;++u)p[u]=m[u];return p[u++]=g&255,p[u++]=g>>8&255,p[u++]=g>>16&255,p[u++]=S&255,p[u++]=S>>8&255,r&&(p[u++]=115,p[u++]=65,p[u++]=108,p[u++]=84),t(p,0,u).subarray(0,Math.min(m.length+5,16))},h=new WeakSet,ha=function(g,S,m,r,p){if(!(S instanceof w.Name))throw new i.FormatError("Invalid crypt filter name.");const c=this,u=g.get(S.name),q=u==null?void 0:u.get("CFM");if(!q||q.name==="None")return function(){return new O};if(q.name==="V2")return function(){var J;return new e(Re(J=c,H,nn).call(J,m,r,p,!1))};if(q.name==="AESV2")return function(){var J;return new A(Re(J=c,H,nn).call(J,m,r,p,!0))};if(q.name==="AESV3")return function(){return new n(p)};throw new i.FormatError("Unknown crypto method")},De(N,R,new Uint8Array([40,191,78,94,78,117,138,65,100,0,78,86,255,250,1,8,46,46,0,182,208,104,62,128,47,12,169,254,100,83,105,122]));let f=N;D.CipherTransformFactory=f},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.DecryptStream=void 0;var i=se(18);const w=512;class P extends i.DecodeStream{constructor(t,o,K){super(o),this.str=t,this.dict=t.dict,this.decrypt=K,this.nextChunk=null,this.initialized=!1}readBlock(){var d;let t;if(this.initialized?t=this.nextChunk:(t=this.str.getBytes(w),this.initialized=!0),!t||t.length===0){this.eof=!0;return}this.nextChunk=this.str.getBytes(w);const o=((d=this.nextChunk)==null?void 0:d.length)>0,K=this.decrypt;t=K(t,!o);const j=this.bufferLength,C=j+t.length;this.ensureBuffer(C).set(t,j),this.bufferLength=C}}D.DecryptStream=P},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ObjectLoader=void 0;var i=se(4),w=se(5),P=se(3),e=se(2);function t(j){return j instanceof i.Ref||j instanceof i.Dict||j instanceof w.BaseStream||Array.isArray(j)}function o(j,C){if(j instanceof i.Dict)j=j.getRawValues();else if(j instanceof w.BaseStream)j=j.dict.getRawValues();else if(!Array.isArray(j))return;for(const O of j)t(O)&&C.push(O)}class K{constructor(C,O,d){this.dict=C,this.keys=O,this.xref=d,this.refSet=null}load(){return rt(this,null,function*(){if(this.xref.stream.isDataLoaded)return;const{keys:C,dict:O}=this;this.refSet=new i.RefSet;const d=[];for(const A of C){const n=O.getRaw(A);n!==void 0&&d.push(n)}return this._walk(d)})}_walk(C){return rt(this,null,function*(){const O=[],d=[];for(;C.length;){let A=C.pop();if(A instanceof i.Ref){if(this.refSet.has(A))continue;try{this.refSet.put(A),A=this.xref.fetch(A)}catch(n){if(!(n instanceof P.MissingDataException)){(0,e.warn)(`ObjectLoader._walk - requesting all data: "${n}".`),this.refSet=null;const{manager:I}=this.xref.stream;return I.requestAllChunks()}O.push(A),d.push({begin:n.begin,end:n.end})}}if(A instanceof w.BaseStream){const n=A.getBaseStreams();if(n){let I=!1;for(const k of n)k.isDataLoaded||(I=!0,d.push({begin:k.start,end:k.end}));I&&O.push(A)}}o(A,C)}if(d.length){yield this.xref.stream.manager.requestRanges(d);for(const A of O)A instanceof i.Ref&&this.refSet.remove(A);return this._walk(O)}this.refSet=null})}}D.ObjectLoader=K},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XFAFactory=void 0;var i=se(78),w=se(79),P=se(89),e=se(85),t=se(84),o=se(2),K=se(90),j=se(100);class C{constructor(d){try{this.root=new K.XFAParser().parse(C._createDocument(d));const A=new w.Binder(this.root);this.form=A.bind(),this.dataHandler=new P.DataHandler(this.root,A.getData()),this.form[i.$globalData].template=this.form}catch(A){(0,o.warn)(`XFA - an error occurred during parsing and binding: ${A}`)}}isValid(){return this.root&&this.form}_createPagesHelper(){const d=this.form[i.$toPages]();return new Promise((A,n)=>{const I=()=>{try{const k=d.next();k.done?A(k.value):setTimeout(I,0)}catch(k){n(k)}};setTimeout(I,0)})}_createPages(){return rt(this,null,function*(){try{this.pages=yield this._createPagesHelper(),this.dims=this.pages.children.map(d=>{const{width:A,height:n}=d.attributes.style;return[0,0,parseInt(A),parseInt(n)]})}catch(d){(0,o.warn)(`XFA - an error occurred during layout: ${d}`)}})}getBoundingBox(d){return this.dims[d]}getNumPages(){return rt(this,null,function*(){return this.pages||(yield this._createPages()),this.dims.length})}setImages(d){this.form[i.$globalData].images=d}setFonts(d){this.form[i.$globalData].fontFinder=new e.FontFinder(d);const A=[];for(let n of this.form[i.$globalData].usedTypefaces)n=(0,t.stripQuotes)(n),this.form[i.$globalData].fontFinder.find(n)||A.push(n);return A.length>0?A:null}appendFonts(d,A){this.form[i.$globalData].fontFinder.add(d,A)}getPages(){return rt(this,null,function*(){this.pages||(yield this._createPages());const d=this.pages;return this.pages=null,d})}serializeData(d){return this.dataHandler.serialize(d)}static _createDocument(d){return d["/xdp:xdp"]?Object.values(d).join(""):d["xdp:xdp"]}static getRichTextAsHtml(d){if(!d||typeof d!="string")return null;try{let A=new K.XFAParser(j.XhtmlNamespace,!0).parse(d);if(!["body","xhtml"].includes(A[i.$nodeName])){const y=j.XhtmlNamespace.body({});y[i.$appendChild](A),A=y}const n=A[i.$toHTML]();if(!n.success)return null;const{html:I}=n,{attributes:k}=I;return k&&(k.class&&(k.class=k.class.filter(y=>!y.startsWith("xfa"))),k.dir="auto"),{html:I,str:A[i.$text]()}}catch(A){(0,o.warn)(`XFA - an error occurred during parsing of rich text: ${A}`)}return null}}D.XFAFactory=C},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.$uid=D.$toStyle=D.$toString=D.$toPages=D.$toHTML=D.$text=D.$tabIndex=D.$setValue=D.$setSetAttributes=D.$setId=D.$searchNode=D.$root=D.$resolvePrototypes=D.$removeChild=D.$pushPara=D.$pushGlyphs=D.$popPara=D.$onText=D.$onChildCheck=D.$onChild=D.$nsAttributes=D.$nodeName=D.$namespaceId=D.$lastAttribute=D.$isUsable=D.$isTransparent=D.$isThereMoreWidth=D.$isSplittable=D.$isNsAgnostic=D.$isDescendent=D.$isDataValue=D.$isCDATAXml=D.$isBindable=D.$insertAt=D.$indexOf=D.$ids=D.$hasSettableValue=D.$globalData=D.$getTemplateRoot=D.$getSubformParent=D.$getRealChildrenByNameIt=D.$getParent=D.$getNextPage=D.$getExtra=D.$getDataValue=D.$getContainedChildren=D.$getChildrenByNameIt=D.$getChildrenByName=D.$getChildrenByClass=D.$getChildren=D.$getAvailableSpace=D.$getAttributes=D.$getAttributeIt=D.$flushHTML=D.$finalize=D.$extra=D.$dump=D.$data=D.$content=D.$consumed=D.$clone=D.$cleanup=D.$cleanPage=D.$clean=D.$childrenToHTML=D.$appendChild=D.$addHTML=D.$acceptWhitespace=void 0;const se=Symbol();D.$acceptWhitespace=se;const i=Symbol();D.$addHTML=i;const w=Symbol();D.$appendChild=w;const P=Symbol();D.$childrenToHTML=P;const e=Symbol();D.$clean=e;const t=Symbol();D.$cleanPage=t;const o=Symbol();D.$cleanup=o;const K=Symbol();D.$clone=K;const j=Symbol();D.$consumed=j;const C=Symbol("content");D.$content=C;const O=Symbol("data");D.$data=O;const d=Symbol();D.$dump=d;const A=Symbol("extra");D.$extra=A;const n=Symbol();D.$finalize=n;const I=Symbol();D.$flushHTML=I;const k=Symbol();D.$getAttributeIt=k;const y=Symbol();D.$getAttributes=y;const f=Symbol();D.$getAvailableSpace=f;const R=Symbol();D.$getChildrenByClass=R;const E=Symbol();D.$getChildrenByName=E;const M=Symbol();D.$getChildrenByNameIt=M;const b=Symbol();D.$getDataValue=b;const V=Symbol();D.$getExtra=V;const l=Symbol();D.$getRealChildrenByNameIt=l;const x=Symbol();D.$getChildren=x;const H=Symbol();D.$getContainedChildren=H;const s=Symbol();D.$getNextPage=s;const h=Symbol();D.$getSubformParent=h;const F=Symbol();D.$getParent=F;const N=Symbol();D.$getTemplateRoot=N;const U=Symbol();D.$globalData=U;const g=Symbol();D.$hasSettableValue=g;const S=Symbol();D.$ids=S;const m=Symbol();D.$indexOf=m;const r=Symbol();D.$insertAt=r;const p=Symbol();D.$isCDATAXml=p;const c=Symbol();D.$isBindable=c;const u=Symbol();D.$isDataValue=u;const q=Symbol();D.$isDescendent=q;const J=Symbol();D.$isNsAgnostic=J;const G=Symbol();D.$isSplittable=G;const W=Symbol();D.$isThereMoreWidth=W;const ce=Symbol();D.$isTransparent=ce;const _=Symbol();D.$isUsable=_;const ie=Symbol();D.$lastAttribute=ie;const L=Symbol("namespaceId");D.$namespaceId=L;const oe=Symbol("nodeName");D.$nodeName=oe;const T=Symbol();D.$nsAttributes=T;const Q=Symbol();D.$onChild=Q;const v=Symbol();D.$onChildCheck=v;const $=Symbol();D.$onText=$;const Z=Symbol();D.$pushGlyphs=Z;const te=Symbol();D.$popPara=te;const ne=Symbol();D.$pushPara=ne;const X=Symbol();D.$removeChild=X;const re=Symbol("root");D.$root=re;const ae=Symbol();D.$resolvePrototypes=ae;const z=Symbol();D.$searchNode=z;const le=Symbol();D.$setId=le;const ue=Symbol();D.$setSetAttributes=ue;const ge=Symbol();D.$setValue=ge;const ke=Symbol();D.$tabIndex=ke;const me=Symbol();D.$text=me;const fe=Symbol();D.$toPages=fe;const xe=Symbol();D.$toHTML=xe;const pe=Symbol();D.$toString=pe;const we=Symbol();D.$toStyle=we;const Oe=Symbol("uid");D.$uid=Oe},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Binder=void 0;var i=se(78),w=se(80),P=se(88),e=se(87),t=se(81),o=se(2);const K=t.NamespaceIds.datasets.id;function j(O){const d=new w.Text({});return d[i.$content]=O,d}class C{constructor(d){var A;this.root=d,this.datasets=d.datasets,this.data=((A=d.datasets)==null?void 0:A.data)||new e.XmlObject(t.NamespaceIds.datasets.id,"data"),this.emptyMerge=this.data[i.$getChildren]().length===0,this.root.form=this.form=d.template[i.$clone]()}_isConsumeData(){return!this.emptyMerge&&this._mergeMode}_isMatchTemplate(){return!this._isConsumeData()}bind(){return this._bindElement(this.form,this.data),this.form}getData(){return this.data}_bindValue(d,A,n){var I,k;if(d[i.$data]=A,d[i.$hasSettableValue]())if(A[i.$isDataValue]()){const y=A[i.$getDataValue]();d[i.$setValue](j(y))}else if(d instanceof w.Field&&((k=(I=d.ui)==null?void 0:I.choiceList)==null?void 0:k.open)==="multiSelect"){const y=A[i.$getChildren]().map(f=>f[i.$content].trim()).join(`
`);d[i.$setValue](j(y))}else this._isConsumeData()&&(0,o.warn)("XFA - Nodes haven't the same type.");else!A[i.$isDataValue]()||this._isMatchTemplate()?this._bindElement(d,A):(0,o.warn)("XFA - Nodes haven't the same type.")}_findDataByNameToConsume(d,A,n,I){if(!d)return null;let k,y;for(let f=0;f<3;f++){for(k=n[i.$getRealChildrenByNameIt](d,!1,!0);y=k.next().value,!!y;)if(A===y[i.$isDataValue]())return y;if(n[i.$namespaceId]===t.NamespaceIds.datasets.id&&n[i.$nodeName]==="data")break;n=n[i.$getParent]()}return I?(k=this.data[i.$getRealChildrenByNameIt](d,!0,!1),y=k.next().value,y||(k=this.data[i.$getAttributeIt](d,!0),y=k.next().value,y!=null&&y[i.$isDataValue]())?y:null):null}_setProperties(d,A){if(d.hasOwnProperty("setProperty"))for(const{ref:n,target:I,connection:k}of d.setProperty.children){if(k||!n)continue;const y=(0,P.searchNode)(this.root,A,n,!1,!1);if(!y){(0,o.warn)(`XFA - Invalid reference: ${n}.`);continue}const[f]=y;if(!f[i.$isDescendent](this.data)){(0,o.warn)("XFA - Invalid node: must be a data node.");continue}const R=(0,P.searchNode)(this.root,d,I,!1,!1);if(!R){(0,o.warn)(`XFA - Invalid target: ${I}.`);continue}const[E]=R;if(!E[i.$isDescendent](d)){(0,o.warn)("XFA - Invalid target: must be a property or subproperty.");continue}const M=E[i.$getParent]();if(E instanceof w.SetProperty||M instanceof w.SetProperty){(0,o.warn)("XFA - Invalid target: cannot be a setProperty or one of its properties.");continue}if(E instanceof w.BindItems||M instanceof w.BindItems){(0,o.warn)("XFA - Invalid target: cannot be a bindItems or one of its properties.");continue}const b=f[i.$text](),V=E[i.$nodeName];if(E instanceof e.XFAAttribute){const l=Object.create(null);l[V]=b;const x=Reflect.construct(Object.getPrototypeOf(M).constructor,[l]);M[V]=x[V];continue}if(!E.hasOwnProperty(i.$content)){(0,o.warn)("XFA - Invalid node to use in setProperty");continue}E[i.$data]=f,E[i.$content]=b,E[i.$finalize]()}}_bindItems(d,A){if(!d.hasOwnProperty("items")||!d.hasOwnProperty("bindItems")||d.bindItems.isEmpty())return;for(const k of d.items.children)d[i.$removeChild](k);d.items.clear();const n=new w.Items({}),I=new w.Items({});d[i.$appendChild](n),d.items.push(n),d[i.$appendChild](I),d.items.push(I);for(const{ref:k,labelRef:y,valueRef:f,connection:R}of d.bindItems.children){if(R||!k)continue;const E=(0,P.searchNode)(this.root,A,k,!1,!1);if(!E){(0,o.warn)(`XFA - Invalid reference: ${k}.`);continue}for(const M of E){if(!M[i.$isDescendent](this.datasets)){(0,o.warn)(`XFA - Invalid ref (${k}): must be a datasets child.`);continue}const b=(0,P.searchNode)(this.root,M,y,!0,!1);if(!b){(0,o.warn)(`XFA - Invalid label: ${y}.`);continue}const[V]=b;if(!V[i.$isDescendent](this.datasets)){(0,o.warn)("XFA - Invalid label: must be a datasets child.");continue}const l=(0,P.searchNode)(this.root,M,f,!0,!1);if(!l){(0,o.warn)(`XFA - Invalid value: ${f}.`);continue}const[x]=l;if(!x[i.$isDescendent](this.datasets)){(0,o.warn)("XFA - Invalid value: must be a datasets child.");continue}const H=j(V[i.$text]()),s=j(x[i.$text]());n[i.$appendChild](H),n.text.push(H),I[i.$appendChild](s),I.text.push(s)}}}_bindOccurrences(d,A,n){let I;if(A.length>1&&(I=d[i.$clone](),I[i.$removeChild](I.occur),I.occur=null),this._bindValue(d,A[0],n),this._setProperties(d,A[0]),this._bindItems(d,A[0]),A.length===1)return;const k=d[i.$getParent](),y=d[i.$nodeName],f=k[i.$indexOf](d);for(let R=1,E=A.length;R<E;R++){const M=A[R],b=I[i.$clone]();k[y].push(b),k[i.$insertAt](f+R,b),this._bindValue(b,M,n),this._setProperties(b,M),this._bindItems(b,M)}}_createOccurrences(d){if(!this.emptyMerge)return;const{occur:A}=d;if(!A||A.initial<=1)return;const n=d[i.$getParent](),I=d[i.$nodeName];if(!(n[I]instanceof e.XFAObjectArray))return;let k;d.name?k=n[I].children.filter(R=>R.name===d.name).length:k=n[I].children.length;const y=n[i.$indexOf](d)+1,f=A.initial-k;if(f){const R=d[i.$clone]();R[i.$removeChild](R.occur),R.occur=null,n[I].push(R),n[i.$insertAt](y,R);for(let E=1;E<f;E++){const M=R[i.$clone]();n[I].push(M),n[i.$insertAt](y+E,M)}}}_getOccurInfo(d){const{name:A,occur:n}=d;if(!n||!A)return[1,1];const I=n.max===-1?1/0:n.max;return[n.min,I]}_setAndBind(d,A){this._setProperties(d,A),this._bindItems(d,A),this._bindElement(d,A)}_bindElement(d,A){const n=[];this._createOccurrences(d);for(const I of d[i.$getChildren]()){if(I[i.$data])continue;if(this._mergeMode===void 0&&I[i.$nodeName]==="subform"){this._mergeMode=I.mergeMode==="consumeData";const b=A[i.$getChildren]();if(b.length>0)this._bindOccurrences(I,[b[0]],null);else if(this.emptyMerge){const V=A[i.$namespaceId]===K?-1:A[i.$namespaceId],l=I[i.$data]=new e.XmlObject(V,I.name||"root");A[i.$appendChild](l),this._bindElement(I,l)}continue}if(!I[i.$isBindable]())continue;let k=!1,y=null,f=null,R=null;if(I.bind){switch(I.bind.match){case"none":this._setAndBind(I,A);continue;case"global":k=!0;break;case"dataRef":if(!I.bind.ref){(0,o.warn)(`XFA - ref is empty in node ${I[i.$nodeName]}.`),this._setAndBind(I,A);continue}f=I.bind.ref;break}I.bind.picture&&(y=I.bind.picture[i.$content])}const[E,M]=this._getOccurInfo(I);if(f)if(R=(0,P.searchNode)(this.root,A,f,!0,!1),R===null){if(R=(0,P.createDataNode)(this.data,A,f),!R)continue;this._isConsumeData()&&(R[i.$consumed]=!0),this._setAndBind(I,R);continue}else this._isConsumeData()&&(R=R.filter(b=>!b[i.$consumed])),R.length>M?R=R.slice(0,M):R.length===0&&(R=null),R&&this._isConsumeData()&&R.forEach(b=>{b[i.$consumed]=!0});else{if(!I.name){this._setAndBind(I,A);continue}if(this._isConsumeData()){const b=[];for(;b.length<M;){const V=this._findDataByNameToConsume(I.name,I[i.$hasSettableValue](),A,k);if(!V)break;V[i.$consumed]=!0,b.push(V)}R=b.length>0?b:null}else{if(R=A[i.$getRealChildrenByNameIt](I.name,!1,this.emptyMerge).next().value,!R){if(E===0){n.push(I);continue}const b=A[i.$namespaceId]===K?-1:A[i.$namespaceId];R=I[i.$data]=new e.XmlObject(b,I.name),this.emptyMerge&&(R[i.$consumed]=!0),A[i.$appendChild](R),this._setAndBind(I,R);continue}this.emptyMerge&&(R[i.$consumed]=!0),R=[R]}}R?this._bindOccurrences(I,R,y):E>0?this._setAndBind(I,A):n.push(I)}n.forEach(I=>I[i.$getParent]()[i.$removeChild](I))}}D.Binder=C},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Value=D.Text=D.TemplateNamespace=D.Template=D.SetProperty=D.Items=D.Field=D.BindItems=void 0;var i=se(78),w=se(81),P=se(82),e=se(83),t=se(87),o=se(84),K=se(2),j=se(85),C=se(3),O=se(88);const d=w.NamespaceIds.template.id,A="http://www.w3.org/2000/svg",n=2,I=3,k=5e3,y=/^H(\d+)$/,f=new Set(["image/gif","image/jpeg","image/jpg","image/pjpeg","image/png","image/apng","image/x-png","image/bmp","image/x-ms-bmp","image/tiff","image/tif","application/octet-stream"]),R=[[[66,77],"image/bmp"],[[255,216,255],"image/jpeg"],[[73,73,42,0],"image/tiff"],[[77,77,0,42],"image/tiff"],[[71,73,70,56,57,97],"image/gif"],[[137,80,78,71,13,10,26,10],"image/png"]];function E(Me){if(!Me||!Me.border)return{w:0,h:0};const a=Me.border[i.$getExtra]();return a?{w:a.widths[0]+a.widths[2]+a.insets[0]+a.insets[2],h:a.widths[1]+a.widths[3]+a.insets[1]+a.insets[3]}:{w:0,h:0}}function M(Me){return Me.margin&&(Me.margin.topInset||Me.margin.rightInset||Me.margin.bottomInset||Me.margin.leftInset)}function b(Me,a){if(!Me.value){const ee=new ui({});Me[i.$appendChild](ee),Me.value=ee}Me.value[i.$setValue](a)}function*V(Me){for(const a of Me[i.$getChildren]()){if(a instanceof bi){yield*ai(a[i.$getContainedChildren]());continue}yield a}}function l(Me){var a;return((a=Me.validate)==null?void 0:a.nullTest)==="error"}function x(Me){for(;Me;){if(!Me.traversal){Me[i.$tabIndex]=Me[i.$getParent]()[i.$tabIndex];return}if(Me[i.$tabIndex])return;let a=null;for(const Ze of Me.traversal[i.$getChildren]())if(Ze.operation==="next"){a=Ze;break}if(!a||!a.ref){Me[i.$tabIndex]=Me[i.$getParent]()[i.$tabIndex];return}const ee=Me[i.$getTemplateRoot]();Me[i.$tabIndex]=++ee[i.$tabIndex];const Ke=ee[i.$searchNode](a.ref,Me);if(!Ke)return;Me=Ke[0]}}function H(Me,a){var Ke;const ee=Me.assist;if(ee){const Ze=ee[i.$toHTML]();Ze&&(a.title=Ze);const pt=ee.role.match(y);if(pt){const mt="heading",It=pt[1];a.role=mt,a["aria-level"]=It}}if(Me.layout==="table")a.role="table";else if(Me.layout==="row")a.role="row";else{const Ze=Me[i.$getParent]();Ze.layout==="row"&&(a.role=((Ke=Ze.assist)==null?void 0:Ke.role)==="TH"?"columnheader":"cell")}}function s(Me){if(!Me.assist)return null;const a=Me.assist;return a.speak&&a.speak[i.$content]!==""?a.speak[i.$content]:a.toolTip?a.toolTip[i.$content]:null}function h(Me){return o.HTMLResult.success({name:"div",attributes:{class:["xfaRich"],style:Object.create(null)},children:[{name:"span",attributes:{style:Object.create(null)},value:Me}]})}function F(Me){const a=Me[i.$getTemplateRoot]();a[i.$extra].firstUnsplittable===null&&(a[i.$extra].firstUnsplittable=Me,a[i.$extra].noLayoutFailure=!0)}function N(Me){const a=Me[i.$getTemplateRoot]();a[i.$extra].firstUnsplittable===Me&&(a[i.$extra].noLayoutFailure=!1)}function U(Me){if(Me[i.$extra]||(Me[i.$extra]=Object.create(null),Me.targetType==="auto"))return!1;const a=Me[i.$getTemplateRoot]();let ee=null;if(Me.target){if(ee=a[i.$searchNode](Me.target,Me[i.$getParent]()),!ee)return!1;ee=ee[0]}const{currentPageArea:Ke,currentContentArea:Ze}=a[i.$extra];if(Me.targetType==="pageArea")return ee instanceof qt||(ee=null),Me.startNew?(Me[i.$extra].target=ee||Ke,!0):ee&&ee!==Ke?(Me[i.$extra].target=ee,!0):!1;ee instanceof re||(ee=null);const nt=ee&&ee[i.$getParent]();let pt,mt=nt;if(Me.startNew)if(ee){const It=nt.contentArea.children,Rt=It.indexOf(Ze),Jt=It.indexOf(ee);Rt!==-1&&Rt<Jt&&(mt=null),pt=Jt-1}else pt=Ke.contentArea.children.indexOf(Ze);else if(ee&&ee!==Ze)pt=nt.contentArea.children.indexOf(ee)-1,mt=nt===Ke?null:nt;else return!1;return Me[i.$extra].target=mt,Me[i.$extra].index=pt,!0}function g(Me,a,ee){const Ke=Me[i.$getTemplateRoot](),Ze=Ke[i.$extra].noLayoutFailure,nt=a[i.$getSubformParent];a[i.$getSubformParent]=()=>Me,Ke[i.$extra].noLayoutFailure=!0;const pt=a[i.$toHTML](ee);Me[i.$addHTML](pt.html,pt.bbox),Ke[i.$extra].noLayoutFailure=Ze,a[i.$getSubformParent]=nt}class S extends t.StringObject{constructor(a){super(d,"appearanceFilter"),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||""}}class m extends t.XFAObject{constructor(a){super(d,"arc",!0),this.circular=(0,o.getInteger)({data:a.circular,defaultValue:0,validate:ee=>ee===1}),this.hand=(0,o.getStringOption)(a.hand,["even","left","right"]),this.id=a.id||"",this.startAngle=(0,o.getFloat)({data:a.startAngle,defaultValue:0,validate:ee=>!0}),this.sweepAngle=(0,o.getFloat)({data:a.sweepAngle,defaultValue:360,validate:ee=>!0}),this.use=a.use||"",this.usehref=a.usehref||"",this.edge=null,this.fill=null}[i.$toHTML](){var It;const a=this.edge||new we({}),ee=a[i.$toStyle](),Ke=Object.create(null);((It=this.fill)==null?void 0:It.presence)==="visible"?Object.assign(Ke,this.fill[i.$toStyle]()):Ke.fill="transparent",Ke.strokeWidth=(0,e.measureToString)(a.presence==="visible"?a.thickness:0),Ke.stroke=ee.color;let Ze;const nt={xmlns:A,style:{width:"100%",height:"100%",overflow:"visible"}};if(this.sweepAngle===360)Ze={name:"ellipse",attributes:{xmlns:A,cx:"50%",cy:"50%",rx:"50%",ry:"50%",style:Ke}};else{const Rt=this.startAngle*Math.PI/180,Jt=this.sweepAngle*Math.PI/180,Qt=this.sweepAngle>180?1:0,[Nt,Mt,Wt,Et]=[50*(1+Math.cos(Rt)),50*(1-Math.sin(Rt)),50*(1+Math.cos(Rt+Jt)),50*(1-Math.sin(Rt+Jt))];Ze={name:"path",attributes:{xmlns:A,d:`M ${Nt} ${Mt} A 50 50 0 ${Qt} 0 ${Wt} ${Et}`,vectorEffect:"non-scaling-stroke",style:Ke}},Object.assign(nt,{viewBox:"0 0 100 100",preserveAspectRatio:"none"})}const pt={name:"svg",children:[Ze],attributes:nt},mt=this[i.$getParent]()[i.$getParent]();return M(mt)?o.HTMLResult.success({name:"div",attributes:{style:{display:"inline",width:"100%",height:"100%"}},children:[pt]}):(pt.attributes.style.position="absolute",o.HTMLResult.success(pt))}}class r extends t.XFAObject{constructor(a){super(d,"area",!0),this.colSpan=(0,o.getInteger)({data:a.colSpan,defaultValue:1,validate:ee=>ee>=1||ee===-1}),this.id=a.id||"",this.name=a.name||"",this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.desc=null,this.extras=null,this.area=new t.XFAObjectArray,this.draw=new t.XFAObjectArray,this.exObject=new t.XFAObjectArray,this.exclGroup=new t.XFAObjectArray,this.field=new t.XFAObjectArray,this.subform=new t.XFAObjectArray,this.subformSet=new t.XFAObjectArray}*[i.$getContainedChildren](){yield*ai(V(this))}[i.$isTransparent](){return!0}[i.$isBindable](){return!0}[i.$addHTML](a,ee){const[Ke,Ze,nt,pt]=ee;this[i.$extra].width=Math.max(this[i.$extra].width,Ke+nt),this[i.$extra].height=Math.max(this[i.$extra].height,Ze+pt),this[i.$extra].children.push(a)}[i.$getAvailableSpace](){return this[i.$extra].availableSpace}[i.$toHTML](a){const ee=(0,e.toStyle)(this,"position"),Ke={style:ee,id:this[i.$uid],class:["xfaArea"]};(0,e.isPrintOnly)(this)&&Ke.class.push("xfaPrintOnly"),this.name&&(Ke.xfaName=this.name);const Ze=[];this[i.$extra]={children:Ze,width:0,height:0,availableSpace:a};const nt=this[i.$childrenToHTML]({filter:new Set(["area","draw","field","exclGroup","subform","subformSet"]),include:!0});if(!nt.success)return nt.isBreak()?nt:(delete this[i.$extra],o.HTMLResult.FAILURE);ee.width=(0,e.measureToString)(this[i.$extra].width),ee.height=(0,e.measureToString)(this[i.$extra].height);const pt={name:"div",attributes:Ke,children:Ze},mt=[this.x,this.y,this[i.$extra].width,this[i.$extra].height];return delete this[i.$extra],o.HTMLResult.success(pt,mt)}}class p extends t.XFAObject{constructor(a){super(d,"assist",!0),this.id=a.id||"",this.role=a.role||"",this.use=a.use||"",this.usehref=a.usehref||"",this.speak=null,this.toolTip=null}[i.$toHTML](){var a;return((a=this.toolTip)==null?void 0:a[i.$content])||null}}class c extends t.XFAObject{constructor(a){super(d,"barcode",!0),this.charEncoding=(0,o.getKeyword)({data:a.charEncoding?a.charEncoding.toLowerCase():"",defaultValue:"",validate:ee=>["utf-8","big-five","fontspecific","gbk","gb-18030","gb-2312","ksc-5601","none","shift-jis","ucs-2","utf-16"].includes(ee)||ee.match(/iso-8859-\d{2}/)}),this.checksum=(0,o.getStringOption)(a.checksum,["none","1mod10","1mod10_1mod11","2mod10","auto"]),this.dataColumnCount=(0,o.getInteger)({data:a.dataColumnCount,defaultValue:-1,validate:ee=>ee>=0}),this.dataLength=(0,o.getInteger)({data:a.dataLength,defaultValue:-1,validate:ee=>ee>=0}),this.dataPrep=(0,o.getStringOption)(a.dataPrep,["none","flateCompress"]),this.dataRowCount=(0,o.getInteger)({data:a.dataRowCount,defaultValue:-1,validate:ee=>ee>=0}),this.endChar=a.endChar||"",this.errorCorrectionLevel=(0,o.getInteger)({data:a.errorCorrectionLevel,defaultValue:-1,validate:ee=>ee>=0&&ee<=8}),this.id=a.id||"",this.moduleHeight=(0,o.getMeasurement)(a.moduleHeight,"5mm"),this.moduleWidth=(0,o.getMeasurement)(a.moduleWidth,"0.25mm"),this.printCheckDigit=(0,o.getInteger)({data:a.printCheckDigit,defaultValue:0,validate:ee=>ee===1}),this.rowColumnRatio=(0,o.getRatio)(a.rowColumnRatio),this.startChar=a.startChar||"",this.textLocation=(0,o.getStringOption)(a.textLocation,["below","above","aboveEmbedded","belowEmbedded","none"]),this.truncate=(0,o.getInteger)({data:a.truncate,defaultValue:0,validate:ee=>ee===1}),this.type=(0,o.getStringOption)(a.type?a.type.toLowerCase():"",["aztec","codabar","code2of5industrial","code2of5interleaved","code2of5matrix","code2of5standard","code3of9","code3of9extended","code11","code49","code93","code128","code128a","code128b","code128c","code128sscc","datamatrix","ean8","ean8add2","ean8add5","ean13","ean13add2","ean13add5","ean13pwcd","fim","logmars","maxicode","msi","pdf417","pdf417macro","plessey","postauscust2","postauscust3","postausreplypaid","postausstandard","postukrm4scc","postusdpbc","postusimb","postusstandard","postus5zip","qrcode","rfid","rss14","rss14expanded","rss14limited","rss14stacked","rss14stackedomni","rss14truncated","telepen","ucc128","ucc128random","ucc128sscc","upca","upcaadd2","upcaadd5","upcapwcd","upce","upceadd2","upceadd5","upcean2","upcean5","upsmaxicode"]),this.upsMode=(0,o.getStringOption)(a.upsMode,["usCarrier","internationalCarrier","secureSymbol","standardSymbol"]),this.use=a.use||"",this.usehref=a.usehref||"",this.wideNarrowRatio=(0,o.getRatio)(a.wideNarrowRatio),this.encrypt=null,this.extras=null}}class u extends t.XFAObject{constructor(a){super(d,"bind",!0),this.match=(0,o.getStringOption)(a.match,["once","dataRef","global","none"]),this.ref=a.ref||"",this.picture=null}}class q extends t.XFAObject{constructor(a){super(d,"bindItems"),this.connection=a.connection||"",this.labelRef=a.labelRef||"",this.ref=a.ref||"",this.valueRef=a.valueRef||""}}D.BindItems=q;class J extends t.XFAObject{constructor(a){super(d,"bookend"),this.id=a.id||"",this.leader=a.leader||"",this.trailer=a.trailer||"",this.use=a.use||"",this.usehref=a.usehref||""}}class G extends t.Option01{constructor(a){super(d,"boolean"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$toHTML](a){return h(this[i.$content]===1?"1":"0")}}class W extends t.XFAObject{constructor(a){super(d,"border",!0),this.break=(0,o.getStringOption)(a.break,["close","open"]),this.hand=(0,o.getStringOption)(a.hand,["even","left","right"]),this.id=a.id||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.corner=new t.XFAObjectArray(4),this.edge=new t.XFAObjectArray(4),this.extras=null,this.fill=null,this.margin=null}[i.$getExtra](){if(!this[i.$extra]){const a=this.edge.children.slice();if(a.length<4){const Ze=a.at(-1)||new we({});for(let nt=a.length;nt<4;nt++)a.push(Ze)}const ee=a.map(Ze=>Ze.thickness),Ke=[0,0,0,0];this.margin&&(Ke[0]=this.margin.topInset,Ke[1]=this.margin.rightInset,Ke[2]=this.margin.bottomInset,Ke[3]=this.margin.leftInset),this[i.$extra]={widths:ee,insets:Ke,edges:a}}return this[i.$extra]}[i.$toStyle](){var Ze;const{edges:a}=this[i.$getExtra](),ee=a.map(nt=>{const pt=nt[i.$toStyle]();return pt.color||(pt.color="#000000"),pt}),Ke=Object.create(null);if(this.margin&&Object.assign(Ke,this.margin[i.$toStyle]()),((Ze=this.fill)==null?void 0:Ze.presence)==="visible"&&Object.assign(Ke,this.fill[i.$toStyle]()),this.corner.children.some(nt=>nt.radius!==0)){const nt=this.corner.children.map(pt=>pt[i.$toStyle]());if(nt.length===2||nt.length===3){const pt=nt.at(-1);for(let mt=nt.length;mt<4;mt++)nt.push(pt)}Ke.borderRadius=nt.map(pt=>pt.radius).join(" ")}switch(this.presence){case"invisible":case"hidden":Ke.borderStyle="";break;case"inactive":Ke.borderStyle="none";break;default:Ke.borderStyle=ee.map(nt=>nt.style).join(" ");break}return Ke.borderWidth=ee.map(nt=>nt.width).join(" "),Ke.borderColor=ee.map(nt=>nt.color).join(" "),Ke}}class ce extends t.XFAObject{constructor(a){super(d,"break",!0),this.after=(0,o.getStringOption)(a.after,["auto","contentArea","pageArea","pageEven","pageOdd"]),this.afterTarget=a.afterTarget||"",this.before=(0,o.getStringOption)(a.before,["auto","contentArea","pageArea","pageEven","pageOdd"]),this.beforeTarget=a.beforeTarget||"",this.bookendLeader=a.bookendLeader||"",this.bookendTrailer=a.bookendTrailer||"",this.id=a.id||"",this.overflowLeader=a.overflowLeader||"",this.overflowTarget=a.overflowTarget||"",this.overflowTrailer=a.overflowTrailer||"",this.startNew=(0,o.getInteger)({data:a.startNew,defaultValue:0,validate:ee=>ee===1}),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}}class _ extends t.XFAObject{constructor(a){super(d,"breakAfter",!0),this.id=a.id||"",this.leader=a.leader||"",this.startNew=(0,o.getInteger)({data:a.startNew,defaultValue:0,validate:ee=>ee===1}),this.target=a.target||"",this.targetType=(0,o.getStringOption)(a.targetType,["auto","contentArea","pageArea"]),this.trailer=a.trailer||"",this.use=a.use||"",this.usehref=a.usehref||"",this.script=null}}class ie extends t.XFAObject{constructor(a){super(d,"breakBefore",!0),this.id=a.id||"",this.leader=a.leader||"",this.startNew=(0,o.getInteger)({data:a.startNew,defaultValue:0,validate:ee=>ee===1}),this.target=a.target||"",this.targetType=(0,o.getStringOption)(a.targetType,["auto","contentArea","pageArea"]),this.trailer=a.trailer||"",this.use=a.use||"",this.usehref=a.usehref||"",this.script=null}[i.$toHTML](a){return this[i.$extra]={},o.HTMLResult.FAILURE}}class L extends t.XFAObject{constructor(a){super(d,"button",!0),this.highlight=(0,o.getStringOption)(a.highlight,["inverted","none","outline","push"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}[i.$toHTML](a){const Ke=this[i.$getParent]()[i.$getParent](),Ze={name:"button",attributes:{id:this[i.$uid],class:["xfaButton"],style:{}},children:[]};for(const nt of Ke.event.children){if(nt.activity!=="click"||!nt.script)continue;const pt=(0,C.recoverJsURL)(nt.script[i.$content]);if(!pt)continue;const mt=(0,e.fixURL)(pt.url);mt&&Ze.children.push({name:"a",attributes:{id:"link"+this[i.$uid],href:mt,newWindow:pt.newWindow,class:["xfaLink"],style:{}},children:[]})}return o.HTMLResult.success(Ze)}}class oe extends t.XFAObject{constructor(a){super(d,"calculate",!0),this.id=a.id||"",this.override=(0,o.getStringOption)(a.override,["disabled","error","ignore","warning"]),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.message=null,this.script=null}}class T extends t.XFAObject{constructor(a){super(d,"caption",!0),this.id=a.id||"",this.placement=(0,o.getStringOption)(a.placement,["left","bottom","inline","right","top"]),this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.reserve=Math.ceil((0,o.getMeasurement)(a.reserve)),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.font=null,this.margin=null,this.para=null,this.value=null}[i.$setValue](a){b(this,a)}[i.$getExtra](a){if(!this[i.$extra]){let{width:ee,height:Ke}=a;switch(this.placement){case"left":case"right":case"inline":ee=this.reserve<=0?ee:this.reserve;break;case"top":case"bottom":Ke=this.reserve<=0?Ke:this.reserve;break}this[i.$extra]=(0,e.layoutNode)(this,{width:ee,height:Ke})}return this[i.$extra]}[i.$toHTML](a){if(!this.value)return o.HTMLResult.EMPTY;this[i.$pushPara]();const ee=this.value[i.$toHTML](a).html;if(!ee)return this[i.$popPara](),o.HTMLResult.EMPTY;const Ke=this.reserve;if(this.reserve<=0){const{w:pt,h:mt}=this[i.$getExtra](a);switch(this.placement){case"left":case"right":case"inline":this.reserve=pt;break;case"top":case"bottom":this.reserve=mt;break}}const Ze=[];typeof ee=="string"?Ze.push({name:"#text",value:ee}):Ze.push(ee);const nt=(0,e.toStyle)(this,"font","margin","visibility");switch(this.placement){case"left":case"right":this.reserve>0&&(nt.width=(0,e.measureToString)(this.reserve));break;case"top":case"bottom":this.reserve>0&&(nt.height=(0,e.measureToString)(this.reserve));break}return(0,e.setPara)(this,null,ee),this[i.$popPara](),this.reserve=Ke,o.HTMLResult.success({name:"div",attributes:{style:nt,class:["xfaCaption"]},children:Ze})}}class Q extends t.StringObject{constructor(a){super(d,"certificate"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}}class v extends t.XFAObject{constructor(a){super(d,"certificates",!0),this.credentialServerPolicy=(0,o.getStringOption)(a.credentialServerPolicy,["optional","required"]),this.id=a.id||"",this.url=a.url||"",this.urlPolicy=a.urlPolicy||"",this.use=a.use||"",this.usehref=a.usehref||"",this.encryption=null,this.issuers=null,this.keyUsage=null,this.oids=null,this.signing=null,this.subjectDNs=null}}class $ extends t.XFAObject{constructor(a){super(d,"checkButton",!0),this.id=a.id||"",this.mark=(0,o.getStringOption)(a.mark,["default","check","circle","cross","diamond","square","star"]),this.shape=(0,o.getStringOption)(a.shape,["square","round"]),this.size=(0,o.getMeasurement)(a.size,"10pt"),this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.extras=null,this.margin=null}[i.$toHTML](a){var Yt,vt,$t;const ee=(0,e.toStyle)("margin"),Ke=(0,e.measureToString)(this.size);ee.width=ee.height=Ke;let Ze,nt,pt;const mt=this[i.$getParent]()[i.$getParent](),It=mt.items.children.length&&mt.items.children[0][i.$toHTML]().html||[],Rt={on:(It[0]!==void 0?It[0]:"on").toString(),off:(It[1]!==void 0?It[1]:"off").toString()},Qt=(((Yt=mt.value)==null?void 0:Yt[i.$text]())||"off")===Rt.on||void 0,Nt=mt[i.$getSubformParent](),Mt=mt[i.$uid];let Wt;Nt instanceof Ee?(pt=Nt[i.$uid],Ze="radio",nt="xfaRadio",Wt=((vt=Nt[i.$data])==null?void 0:vt[i.$uid])||Nt[i.$uid]):(Ze="checkbox",nt="xfaCheckbox",Wt=(($t=mt[i.$data])==null?void 0:$t[i.$uid])||mt[i.$uid]);const Et={name:"input",attributes:{class:[nt],style:ee,fieldId:Mt,dataId:Wt,type:Ze,checked:Qt,xfaOn:Rt.on,xfaOff:Rt.off,"aria-label":s(mt),"aria-required":!1}};return pt&&(Et.attributes.name=pt),l(mt)&&(Et.attributes["aria-required"]=!0,Et.attributes.required=!0),o.HTMLResult.success({name:"label",attributes:{class:["xfaLabel"]},children:[Et]})}}class Z extends t.XFAObject{constructor(a){super(d,"choiceList",!0),this.commitOn=(0,o.getStringOption)(a.commitOn,["select","exit"]),this.id=a.id||"",this.open=(0,o.getStringOption)(a.open,["userControl","always","multiSelect","onEntry"]),this.textEntry=(0,o.getInteger)({data:a.textEntry,defaultValue:0,validate:ee=>ee===1}),this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.extras=null,this.margin=null}[i.$toHTML](a){var Rt,Jt,Qt;const ee=(0,e.toStyle)(this,"border","margin"),Ze=this[i.$getParent]()[i.$getParent](),pt={fontSize:`calc(${((Rt=Ze.font)==null?void 0:Rt.size)||10}px * var(--scale-factor))`},mt=[];if(Ze.items.children.length>0){const Nt=Ze.items;let Mt=0,Wt=0;Nt.children.length===2&&(Mt=Nt.children[0].save,Wt=1-Mt);const Et=Nt.children[Mt][i.$toHTML]().html,Yt=Nt.children[Wt][i.$toHTML]().html;let vt=!1;const $t=((Jt=Ze.value)==null?void 0:Jt[i.$text]())||"";for(let zt=0,Tt=Et.length;zt<Tt;zt++){const yt={name:"option",attributes:{value:Yt[zt]||Et[zt],style:pt},value:Et[zt]};Yt[zt]===$t&&(yt.attributes.selected=vt=!0),mt.push(yt)}vt||mt.splice(0,0,{name:"option",attributes:{hidden:!0,selected:!0},value:" "})}const It={class:["xfaSelect"],fieldId:Ze[i.$uid],dataId:((Qt=Ze[i.$data])==null?void 0:Qt[i.$uid])||Ze[i.$uid],style:ee,"aria-label":s(Ze),"aria-required":!1};return l(Ze)&&(It["aria-required"]=!0,It.required=!0),this.open==="multiSelect"&&(It.multiple=!0),o.HTMLResult.success({name:"label",attributes:{class:["xfaLabel"]},children:[{name:"select",children:mt,attributes:It}]})}}class te extends t.XFAObject{constructor(a){super(d,"color",!0),this.cSpace=(0,o.getStringOption)(a.cSpace,["SRGB"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.value=a.value?(0,o.getColor)(a.value):"",this.extras=null}[i.$hasSettableValue](){return!1}[i.$toStyle](){return this.value?K.Util.makeHexColor(this.value.r,this.value.g,this.value.b):null}}class ne extends t.XFAObject{constructor(a){super(d,"comb"),this.id=a.id||"",this.numberOfCells=(0,o.getInteger)({data:a.numberOfCells,defaultValue:0,validate:ee=>ee>=0}),this.use=a.use||"",this.usehref=a.usehref||""}}class X extends t.XFAObject{constructor(a){super(d,"connect",!0),this.connection=a.connection||"",this.id=a.id||"",this.ref=a.ref||"",this.usage=(0,o.getStringOption)(a.usage,["exportAndImport","exportOnly","importOnly"]),this.use=a.use||"",this.usehref=a.usehref||"",this.picture=null}}class re extends t.XFAObject{constructor(a){super(d,"contentArea",!0),this.h=(0,o.getMeasurement)(a.h),this.id=a.id||"",this.name=a.name||"",this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.w=(0,o.getMeasurement)(a.w),this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.desc=null,this.extras=null}[i.$toHTML](a){const ee=(0,e.measureToString)(this.x),Ke=(0,e.measureToString)(this.y),Ze={left:ee,top:Ke,width:(0,e.measureToString)(this.w),height:(0,e.measureToString)(this.h)},nt=["xfaContentarea"];return(0,e.isPrintOnly)(this)&&nt.push("xfaPrintOnly"),o.HTMLResult.success({name:"div",children:[],attributes:{style:Ze,class:nt,id:this[i.$uid]}})}}class ae extends t.XFAObject{constructor(a){super(d,"corner",!0),this.id=a.id||"",this.inverted=(0,o.getInteger)({data:a.inverted,defaultValue:0,validate:ee=>ee===1}),this.join=(0,o.getStringOption)(a.join,["square","round"]),this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.radius=(0,o.getMeasurement)(a.radius),this.stroke=(0,o.getStringOption)(a.stroke,["solid","dashDot","dashDotDot","dashed","dotted","embossed","etched","lowered","raised"]),this.thickness=(0,o.getMeasurement)(a.thickness,"0.5pt"),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](){const a=(0,e.toStyle)(this,"visibility");return a.radius=(0,e.measureToString)(this.join==="square"?0:this.radius),a}}class z extends t.ContentObject{constructor(a){super(d,"date"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=this[i.$content].trim();this[i.$content]=a?new Date(a):null}[i.$toHTML](a){return h(this[i.$content]?this[i.$content].toString():"")}}class le extends t.ContentObject{constructor(a){super(d,"dateTime"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=this[i.$content].trim();this[i.$content]=a?new Date(a):null}[i.$toHTML](a){return h(this[i.$content]?this[i.$content].toString():"")}}class ue extends t.XFAObject{constructor(a){super(d,"dateTimeEdit",!0),this.hScrollPolicy=(0,o.getStringOption)(a.hScrollPolicy,["auto","off","on"]),this.id=a.id||"",this.picker=(0,o.getStringOption)(a.picker,["host","none"]),this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.comb=null,this.extras=null,this.margin=null}[i.$toHTML](a){var nt;const ee=(0,e.toStyle)(this,"border","font","margin"),Ke=this[i.$getParent]()[i.$getParent](),Ze={name:"input",attributes:{type:"text",fieldId:Ke[i.$uid],dataId:((nt=Ke[i.$data])==null?void 0:nt[i.$uid])||Ke[i.$uid],class:["xfaTextfield"],style:ee,"aria-label":s(Ke),"aria-required":!1}};return l(Ke)&&(Ze.attributes["aria-required"]=!0,Ze.attributes.required=!0),o.HTMLResult.success({name:"label",attributes:{class:["xfaLabel"]},children:[Ze]})}}class ge extends t.ContentObject{constructor(a){super(d,"decimal"),this.fracDigits=(0,o.getInteger)({data:a.fracDigits,defaultValue:2,validate:ee=>!0}),this.id=a.id||"",this.leadDigits=(0,o.getInteger)({data:a.leadDigits,defaultValue:-1,validate:ee=>!0}),this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=parseFloat(this[i.$content].trim());this[i.$content]=isNaN(a)?null:a}[i.$toHTML](a){return h(this[i.$content]!==null?this[i.$content].toString():"")}}class ke extends t.XFAObject{constructor(a){super(d,"defaultUi",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}}class me extends t.XFAObject{constructor(a){super(d,"desc",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.boolean=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.time=new t.XFAObjectArray}}class fe extends t.OptionObject{constructor(a){super(d,"digestMethod",["","SHA1","SHA256","SHA512","RIPEMD160"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||""}}class xe extends t.XFAObject{constructor(a){super(d,"digestMethods",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.digestMethod=new t.XFAObjectArray}}class pe extends t.XFAObject{constructor(a){super(d,"draw",!0),this.anchorType=(0,o.getStringOption)(a.anchorType,["topLeft","bottomCenter","bottomLeft","bottomRight","middleCenter","middleLeft","middleRight","topCenter","topRight"]),this.colSpan=(0,o.getInteger)({data:a.colSpan,defaultValue:1,validate:ee=>ee>=1||ee===-1}),this.h=a.h?(0,o.getMeasurement)(a.h):"",this.hAlign=(0,o.getStringOption)(a.hAlign,["left","center","justify","justifyAll","radix","right"]),this.id=a.id||"",this.locale=a.locale||"",this.maxH=(0,o.getMeasurement)(a.maxH,"0pt"),this.maxW=(0,o.getMeasurement)(a.maxW,"0pt"),this.minH=(0,o.getMeasurement)(a.minH,"0pt"),this.minW=(0,o.getMeasurement)(a.minW,"0pt"),this.name=a.name||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.relevant=(0,o.getRelevant)(a.relevant),this.rotate=(0,o.getInteger)({data:a.rotate,defaultValue:0,validate:ee=>ee%90===0}),this.use=a.use||"",this.usehref=a.usehref||"",this.w=a.w?(0,o.getMeasurement)(a.w):"",this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.assist=null,this.border=null,this.caption=null,this.desc=null,this.extras=null,this.font=null,this.keep=null,this.margin=null,this.para=null,this.traversal=null,this.ui=null,this.value=null,this.setProperty=new t.XFAObjectArray}[i.$setValue](a){b(this,a)}[i.$toHTML](a){if(x(this),this.presence==="hidden"||this.presence==="inactive")return o.HTMLResult.EMPTY;(0,e.fixDimensions)(this),this[i.$pushPara]();const ee=this.w,Ke=this.h,{w:Ze,h:nt,isBroken:pt}=(0,e.layoutNode)(this,a);if(Ze&&this.w===""){if(pt&&this[i.$getSubformParent]()[i.$isThereMoreWidth]())return this[i.$popPara](),o.HTMLResult.FAILURE;this.w=Ze}if(nt&&this.h===""&&(this.h=nt),F(this),!(0,P.checkDimensions)(this,a))return this.w=ee,this.h=Ke,this[i.$popPara](),o.HTMLResult.FAILURE;N(this);const mt=(0,e.toStyle)(this,"font","hAlign","dimensions","position","presence","rotate","anchorType","border","margin");(0,e.setMinMaxDimensions)(this,mt),mt.margin&&(mt.padding=mt.margin,delete mt.margin);const It=["xfaDraw"];this.font&&It.push("xfaFont"),(0,e.isPrintOnly)(this)&&It.push("xfaPrintOnly");const Rt={style:mt,id:this[i.$uid],class:It};this.name&&(Rt.xfaName=this.name);const Jt={name:"div",attributes:Rt,children:[]};H(this,Rt);const Qt=(0,e.computeBbox)(this,Jt,a),Nt=this.value?this.value[i.$toHTML](a).html:null;return Nt===null?(this.w=ee,this.h=Ke,this[i.$popPara](),o.HTMLResult.success((0,e.createWrapper)(this,Jt),Qt)):(Jt.children.push(Nt),(0,e.setPara)(this,mt,Nt),this.w=ee,this.h=Ke,this[i.$popPara](),o.HTMLResult.success((0,e.createWrapper)(this,Jt),Qt))}}class we extends t.XFAObject{constructor(a){super(d,"edge",!0),this.cap=(0,o.getStringOption)(a.cap,["square","butt","round"]),this.id=a.id||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.stroke=(0,o.getStringOption)(a.stroke,["solid","dashDot","dashDotDot","dashed","dotted","embossed","etched","lowered","raised"]),this.thickness=(0,o.getMeasurement)(a.thickness,"0.5pt"),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](){const a=(0,e.toStyle)(this,"visibility");if(Object.assign(a,{linecap:this.cap,width:(0,e.measureToString)(this.thickness),color:this.color?this.color[i.$toStyle]():"#000000",style:""}),this.presence!=="visible")a.style="none";else switch(this.stroke){case"solid":a.style="solid";break;case"dashDot":a.style="dashed";break;case"dashDotDot":a.style="dashed";break;case"dashed":a.style="dashed";break;case"dotted":a.style="dotted";break;case"embossed":a.style="ridge";break;case"etched":a.style="groove";break;case"lowered":a.style="inset";break;case"raised":a.style="outset";break}return a}}class Oe extends t.OptionObject{constructor(a){super(d,"encoding",["adbe.x509.rsa_sha1","adbe.pkcs7.detached","adbe.pkcs7.sha1"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||""}}class Te extends t.XFAObject{constructor(a){super(d,"encodings",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.encoding=new t.XFAObjectArray}}class Ce extends t.XFAObject{constructor(a){super(d,"encrypt",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.certificate=null}}class Ae extends t.XFAObject{constructor(a){super(d,"encryptData",!0),this.id=a.id||"",this.operation=(0,o.getStringOption)(a.operation,["encrypt","decrypt"]),this.target=a.target||"",this.use=a.use||"",this.usehref=a.usehref||"",this.filter=null,this.manifest=null}}class Se extends t.XFAObject{constructor(a){super(d,"encryption",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.certificate=new t.XFAObjectArray}}class He extends t.OptionObject{constructor(a){super(d,"encryptionMethod",["","AES256-CBC","TRIPLEDES-CBC","AES128-CBC","AES192-CBC"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||""}}class Ve extends t.XFAObject{constructor(a){super(d,"encryptionMethods",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.encryptionMethod=new t.XFAObjectArray}}class Le extends t.XFAObject{constructor(a){super(d,"event",!0),this.activity=(0,o.getStringOption)(a.activity,["click","change","docClose","docReady","enter","exit","full","indexChange","initialize","mouseDown","mouseEnter","mouseExit","mouseUp","postExecute","postOpen","postPrint","postSave","postSign","postSubmit","preExecute","preOpen","prePrint","preSave","preSign","preSubmit","ready","validationState"]),this.id=a.id||"",this.listen=(0,o.getStringOption)(a.listen,["refOnly","refAndDescendents"]),this.name=a.name||"",this.ref=a.ref||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.encryptData=null,this.execute=null,this.script=null,this.signData=null,this.submit=null}}class Ye extends t.ContentObject{constructor(a){super(d,"exData"),this.contentType=a.contentType||"",this.href=a.href||"",this.id=a.id||"",this.maxLength=(0,o.getInteger)({data:a.maxLength,defaultValue:-1,validate:ee=>ee>=-1}),this.name=a.name||"",this.rid=a.rid||"",this.transferEncoding=(0,o.getStringOption)(a.transferEncoding,["none","base64","package"]),this.use=a.use||"",this.usehref=a.usehref||""}[i.$isCDATAXml](){return this.contentType==="text/html"}[i.$onChild](a){return this.contentType==="text/html"&&a[i.$namespaceId]===w.NamespaceIds.xhtml.id?(this[i.$content]=a,!0):this.contentType==="text/xml"?(this[i.$content]=a,!0):!1}[i.$toHTML](a){return this.contentType!=="text/html"||!this[i.$content]?o.HTMLResult.EMPTY:this[i.$content][i.$toHTML](a)}}class lt extends t.XFAObject{constructor(a){super(d,"exObject",!0),this.archive=a.archive||"",this.classId=a.classId||"",this.codeBase=a.codeBase||"",this.codeType=a.codeType||"",this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.boolean=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.exObject=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.time=new t.XFAObjectArray}}class Ee extends t.XFAObject{constructor(a){super(d,"exclGroup",!0),this.access=(0,o.getStringOption)(a.access,["open","nonInteractive","protected","readOnly"]),this.accessKey=a.accessKey||"",this.anchorType=(0,o.getStringOption)(a.anchorType,["topLeft","bottomCenter","bottomLeft","bottomRight","middleCenter","middleLeft","middleRight","topCenter","topRight"]),this.colSpan=(0,o.getInteger)({data:a.colSpan,defaultValue:1,validate:ee=>ee>=1||ee===-1}),this.h=a.h?(0,o.getMeasurement)(a.h):"",this.hAlign=(0,o.getStringOption)(a.hAlign,["left","center","justify","justifyAll","radix","right"]),this.id=a.id||"",this.layout=(0,o.getStringOption)(a.layout,["position","lr-tb","rl-row","rl-tb","row","table","tb"]),this.maxH=(0,o.getMeasurement)(a.maxH,"0pt"),this.maxW=(0,o.getMeasurement)(a.maxW,"0pt"),this.minH=(0,o.getMeasurement)(a.minH,"0pt"),this.minW=(0,o.getMeasurement)(a.minW,"0pt"),this.name=a.name||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.w=a.w?(0,o.getMeasurement)(a.w):"",this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.assist=null,this.bind=null,this.border=null,this.calculate=null,this.caption=null,this.desc=null,this.extras=null,this.margin=null,this.para=null,this.traversal=null,this.validate=null,this.connect=new t.XFAObjectArray,this.event=new t.XFAObjectArray,this.field=new t.XFAObjectArray,this.setProperty=new t.XFAObjectArray}[i.$isBindable](){return!0}[i.$hasSettableValue](){return!0}[i.$setValue](a){for(const ee of this.field.children){if(!ee.value){const Ke=new ui({});ee[i.$appendChild](Ke),ee.value=Ke}ee.value[i.$setValue](a)}}[i.$isThereMoreWidth](){return this.layout.endsWith("-tb")&&this[i.$extra].attempt===0&&this[i.$extra].numberInLine>0||this[i.$getParent]()[i.$isThereMoreWidth]()}[i.$isSplittable](){var ee;const a=this[i.$getSubformParent]();return a[i.$isSplittable]()?this[i.$extra]._isSplittable!==void 0?this[i.$extra]._isSplittable:this.layout==="position"||this.layout.includes("row")?(this[i.$extra]._isSplittable=!1,!1):(ee=a.layout)!=null&&ee.endsWith("-tb")&&a[i.$extra].numberInLine!==0?!1:(this[i.$extra]._isSplittable=!0,!0):!1}[i.$flushHTML](){return(0,P.flushHTML)(this)}[i.$addHTML](a,ee){(0,P.addHTML)(this,a,ee)}[i.$getAvailableSpace](){return(0,P.getAvailableSpace)(this)}[i.$toHTML](a){if(x(this),this.presence==="hidden"||this.presence==="inactive"||this.h===0||this.w===0)return o.HTMLResult.EMPTY;(0,e.fixDimensions)(this);const ee=[],Ke={id:this[i.$uid],class:[]};(0,e.setAccess)(this,Ke.class),this[i.$extra]||(this[i.$extra]=Object.create(null)),Object.assign(this[i.$extra],{children:ee,attributes:Ke,attempt:0,line:null,numberInLine:0,availableSpace:{width:Math.min(this.w||1/0,a.width),height:Math.min(this.h||1/0,a.height)},width:0,height:0,prevHeight:0,currentWidth:0});const Ze=this[i.$isSplittable]();if(Ze||F(this),!(0,P.checkDimensions)(this,a))return o.HTMLResult.FAILURE;const nt=new Set(["field"]);if(this.layout.includes("row")){const vt=this[i.$getSubformParent]().columnWidths;Array.isArray(vt)&&vt.length>0&&(this[i.$extra].columnWidths=vt,this[i.$extra].currentColumn=0)}const pt=(0,e.toStyle)(this,"anchorType","dimensions","position","presence","border","margin","hAlign"),mt=["xfaExclgroup"],It=(0,e.layoutClass)(this);It&&mt.push(It),(0,e.isPrintOnly)(this)&&mt.push("xfaPrintOnly"),Ke.style=pt,Ke.class=mt,this.name&&(Ke.xfaName=this.name),this[i.$pushPara]();const Rt=this.layout==="lr-tb"||this.layout==="rl-tb",Jt=Rt?n:1;for(;this[i.$extra].attempt<Jt;this[i.$extra].attempt++){Rt&&this[i.$extra].attempt===n-1&&(this[i.$extra].numberInLine=0);const vt=this[i.$childrenToHTML]({filter:nt,include:!0});if(vt.success)break;if(vt.isBreak())return this[i.$popPara](),vt;if(Rt&&this[i.$extra].attempt===0&&this[i.$extra].numberInLine===0&&!this[i.$getTemplateRoot]()[i.$extra].noLayoutFailure){this[i.$extra].attempt=Jt;break}}if(this[i.$popPara](),Ze||N(this),this[i.$extra].attempt===Jt)return Ze||delete this[i.$extra],o.HTMLResult.FAILURE;let Qt=0,Nt=0;this.margin&&(Qt=this.margin.leftInset+this.margin.rightInset,Nt=this.margin.topInset+this.margin.bottomInset);const Mt=Math.max(this[i.$extra].width+Qt,this.w||0),Wt=Math.max(this[i.$extra].height+Nt,this.h||0),Et=[this.x,this.y,Mt,Wt];this.w===""&&(pt.width=(0,e.measureToString)(Mt)),this.h===""&&(pt.height=(0,e.measureToString)(Wt));const Yt={name:"div",attributes:Ke,children:ee};return H(this,Ke),delete this[i.$extra],o.HTMLResult.success((0,e.createWrapper)(this,Yt),Et)}}class ut extends t.XFAObject{constructor(a){super(d,"execute"),this.connection=a.connection||"",this.executeType=(0,o.getStringOption)(a.executeType,["import","remerge"]),this.id=a.id||"",this.runAt=(0,o.getStringOption)(a.runAt,["client","both","server"]),this.use=a.use||"",this.usehref=a.usehref||""}}class _e extends t.XFAObject{constructor(a){super(d,"extras",!0),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||"",this.boolean=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.extras=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.time=new t.XFAObjectArray}}class Ie extends t.XFAObject{constructor(a){super(d,"field",!0),this.access=(0,o.getStringOption)(a.access,["open","nonInteractive","protected","readOnly"]),this.accessKey=a.accessKey||"",this.anchorType=(0,o.getStringOption)(a.anchorType,["topLeft","bottomCenter","bottomLeft","bottomRight","middleCenter","middleLeft","middleRight","topCenter","topRight"]),this.colSpan=(0,o.getInteger)({data:a.colSpan,defaultValue:1,validate:ee=>ee>=1||ee===-1}),this.h=a.h?(0,o.getMeasurement)(a.h):"",this.hAlign=(0,o.getStringOption)(a.hAlign,["left","center","justify","justifyAll","radix","right"]),this.id=a.id||"",this.locale=a.locale||"",this.maxH=(0,o.getMeasurement)(a.maxH,"0pt"),this.maxW=(0,o.getMeasurement)(a.maxW,"0pt"),this.minH=(0,o.getMeasurement)(a.minH,"0pt"),this.minW=(0,o.getMeasurement)(a.minW,"0pt"),this.name=a.name||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.relevant=(0,o.getRelevant)(a.relevant),this.rotate=(0,o.getInteger)({data:a.rotate,defaultValue:0,validate:ee=>ee%90===0}),this.use=a.use||"",this.usehref=a.usehref||"",this.w=a.w?(0,o.getMeasurement)(a.w):"",this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.assist=null,this.bind=null,this.border=null,this.calculate=null,this.caption=null,this.desc=null,this.extras=null,this.font=null,this.format=null,this.items=new t.XFAObjectArray(2),this.keep=null,this.margin=null,this.para=null,this.traversal=null,this.ui=null,this.validate=null,this.value=null,this.bindItems=new t.XFAObjectArray,this.connect=new t.XFAObjectArray,this.event=new t.XFAObjectArray,this.setProperty=new t.XFAObjectArray}[i.$isBindable](){return!0}[i.$setValue](a){b(this,a)}[i.$toHTML](a){var vt,$t,zt;if(x(this),!this.ui){this.ui=new yi({}),this.ui[i.$globalData]=this[i.$globalData],this[i.$appendChild](this.ui);let Tt;switch(this.items.children.length){case 0:Tt=new Hi({}),this.ui.textEdit=Tt;break;case 1:Tt=new $({}),this.ui.checkButton=Tt;break;case 2:Tt=new Z({}),this.ui.choiceList=Tt;break}this.ui[i.$appendChild](Tt)}if(!this.ui||this.presence==="hidden"||this.presence==="inactive"||this.h===0||this.w===0)return o.HTMLResult.EMPTY;this.caption&&delete this.caption[i.$extra],this[i.$pushPara]();const ee=this.caption?this.caption[i.$toHTML](a).html:null,Ke=this.w,Ze=this.h;let nt=0,pt=0;this.margin&&(nt=this.margin.leftInset+this.margin.rightInset,pt=this.margin.topInset+this.margin.bottomInset);let mt=null;if(this.w===""||this.h===""){let Tt=null,yt=null,ii=0,ei=0;if(this.ui.checkButton)ii=ei=this.ui.checkButton.size;else{const{w:ri,h:ni}=(0,e.layoutNode)(this,a);ri!==null?(ii=ri,ei=ni):ei=(0,j.getMetrics)(this.font,!0).lineNoGap}if(mt=E(this.ui[i.$getExtra]()),ii+=mt.w,ei+=mt.h,this.caption){const{w:ri,h:ni,isBroken:Zt}=this.caption[i.$getExtra](a);if(Zt&&this[i.$getSubformParent]()[i.$isThereMoreWidth]())return this[i.$popPara](),o.HTMLResult.FAILURE;switch(Tt=ri,yt=ni,this.caption.placement){case"left":case"right":case"inline":Tt+=ii;break;case"top":case"bottom":yt+=ei;break}}else Tt=ii,yt=ei;Tt&&this.w===""&&(Tt+=nt,this.w=Math.min(this.maxW<=0?1/0:this.maxW,this.minW+1<Tt?Tt:this.minW)),yt&&this.h===""&&(yt+=pt,this.h=Math.min(this.maxH<=0?1/0:this.maxH,this.minH+1<yt?yt:this.minH))}if(this[i.$popPara](),(0,e.fixDimensions)(this),F(this),!(0,P.checkDimensions)(this,a))return this.w=Ke,this.h=Ze,this[i.$popPara](),o.HTMLResult.FAILURE;N(this);const It=(0,e.toStyle)(this,"font","dimensions","position","rotate","anchorType","presence","margin","hAlign");(0,e.setMinMaxDimensions)(this,It);const Rt=["xfaField"];this.font&&Rt.push("xfaFont"),(0,e.isPrintOnly)(this)&&Rt.push("xfaPrintOnly");const Jt={style:It,id:this[i.$uid],class:Rt};It.margin&&(It.padding=It.margin,delete It.margin),(0,e.setAccess)(this,Rt),this.name&&(Jt.xfaName=this.name);const Qt=[],Nt={name:"div",attributes:Jt,children:Qt};H(this,Jt);const Mt=this.border?this.border[i.$toStyle]():null,Wt=(0,e.computeBbox)(this,Nt,a),Et=this.ui[i.$toHTML]().html;if(!Et)return Object.assign(It,Mt),o.HTMLResult.success((0,e.createWrapper)(this,Nt),Wt);this[i.$tabIndex]&&((vt=Et.children)!=null&&vt[0]?Et.children[0].attributes.tabindex=this[i.$tabIndex]:Et.attributes.tabindex=this[i.$tabIndex]),Et.attributes.style||(Et.attributes.style=Object.create(null));let Yt=null;if(this.ui.button?(Et.children.length===1&&([Yt]=Et.children.splice(0,1)),Object.assign(Et.attributes.style,Mt)):Object.assign(It,Mt),Qt.push(Et),this.value){if(this.ui.imageEdit)Et.children.push(this.value[i.$toHTML]().html);else if(!this.ui.button){let Tt="";if(this.value.exData)Tt=this.value.exData[i.$text]();else if(this.value.text)Tt=this.value.text[i.$getExtra]();else{const yt=this.value[i.$toHTML]().html;yt!==null&&(Tt=yt.children[0].value)}this.ui.textEdit&&(($t=this.value.text)!=null&&$t.maxChars)&&(Et.children[0].attributes.maxLength=this.value.text.maxChars),Tt&&(this.ui.numericEdit&&(Tt=parseFloat(Tt),Tt=isNaN(Tt)?"":Tt.toString()),Et.children[0].name==="textarea"?Et.children[0].attributes.textContent=Tt:Et.children[0].attributes.value=Tt)}}if(!this.ui.imageEdit&&((zt=Et.children)!=null&&zt[0])&&this.h){mt=mt||E(this.ui[i.$getExtra]());let Tt=0;if(this.caption&&["top","bottom"].includes(this.caption.placement)){Tt=this.caption.reserve,Tt<=0&&(Tt=this.caption[i.$getExtra](a).h);const yt=this.h-Tt-pt-mt.h;Et.children[0].attributes.style.height=(0,e.measureToString)(yt)}else Et.children[0].attributes.style.height="100%"}if(Yt&&Et.children.push(Yt),!ee)return Et.attributes.class&&Et.attributes.class.push("xfaLeft"),this.w=Ke,this.h=Ze,o.HTMLResult.success((0,e.createWrapper)(this,Nt),Wt);if(this.ui.button)return It.padding&&delete It.padding,ee.name==="div"&&(ee.name="span"),Et.children.push(ee),o.HTMLResult.success(Nt,Wt);switch(this.ui.checkButton&&(ee.attributes.class[0]="xfaCaptionForCheckButton"),Et.attributes.class||(Et.attributes.class=[]),Et.children.splice(0,0,ee),this.caption.placement){case"left":Et.attributes.class.push("xfaLeft");break;case"right":Et.attributes.class.push("xfaRight");break;case"top":Et.attributes.class.push("xfaTop");break;case"bottom":Et.attributes.class.push("xfaBottom");break;case"inline":Et.attributes.class.push("xfaLeft");break}return this.w=Ke,this.h=Ze,o.HTMLResult.success((0,e.createWrapper)(this,Nt),Wt)}}D.Field=Ie;class de extends t.XFAObject{constructor(a){super(d,"fill",!0),this.id=a.id||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null,this.linear=null,this.pattern=null,this.radial=null,this.solid=null,this.stipple=null}[i.$toStyle](){var mt;const a=this[i.$getParent](),Ke=a[i.$getParent]()[i.$getParent](),Ze=Object.create(null);let nt="color",pt=nt;a instanceof W&&(nt="background-color",pt="background",Ke instanceof yi&&(Ze.backgroundColor="white")),(a instanceof Vt||a instanceof m)&&(nt=pt="fill",Ze.fill="white");for(const It of Object.getOwnPropertyNames(this)){if(It==="extras"||It==="color")continue;const Rt=this[It];if(!(Rt instanceof t.XFAObject))continue;const Jt=Rt[i.$toStyle](this.color);return Jt&&(Ze[Jt.startsWith("#")?nt:pt]=Jt),Ze}if((mt=this.color)!=null&&mt.value){const It=this.color[i.$toStyle]();Ze[It.startsWith("#")?nt:pt]=It}return Ze}}class be extends t.XFAObject{constructor(a){super(d,"filter",!0),this.addRevocationInfo=(0,o.getStringOption)(a.addRevocationInfo,["","required","optional","none"]),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||"",this.version=(0,o.getInteger)({data:this.version,defaultValue:5,validate:ee=>ee>=1&&ee<=5}),this.appearanceFilter=null,this.certificates=null,this.digestMethods=null,this.encodings=null,this.encryptionMethods=null,this.handler=null,this.lockDocument=null,this.mdp=null,this.reasons=null,this.timeStamp=null}}class Be extends t.ContentObject{constructor(a){super(d,"float"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=parseFloat(this[i.$content].trim());this[i.$content]=isNaN(a)?null:a}[i.$toHTML](a){return h(this[i.$content]!==null?this[i.$content].toString():"")}}class Pe extends t.XFAObject{constructor(a){super(d,"font",!0),this.baselineShift=(0,o.getMeasurement)(a.baselineShift),this.fontHorizontalScale=(0,o.getFloat)({data:a.fontHorizontalScale,defaultValue:100,validate:ee=>ee>=0}),this.fontVerticalScale=(0,o.getFloat)({data:a.fontVerticalScale,defaultValue:100,validate:ee=>ee>=0}),this.id=a.id||"",this.kerningMode=(0,o.getStringOption)(a.kerningMode,["none","pair"]),this.letterSpacing=(0,o.getMeasurement)(a.letterSpacing,"0"),this.lineThrough=(0,o.getInteger)({data:a.lineThrough,defaultValue:0,validate:ee=>ee===1||ee===2}),this.lineThroughPeriod=(0,o.getStringOption)(a.lineThroughPeriod,["all","word"]),this.overline=(0,o.getInteger)({data:a.overline,defaultValue:0,validate:ee=>ee===1||ee===2}),this.overlinePeriod=(0,o.getStringOption)(a.overlinePeriod,["all","word"]),this.posture=(0,o.getStringOption)(a.posture,["normal","italic"]),this.size=(0,o.getMeasurement)(a.size,"10pt"),this.typeface=a.typeface||"Courier",this.underline=(0,o.getInteger)({data:a.underline,defaultValue:0,validate:ee=>ee===1||ee===2}),this.underlinePeriod=(0,o.getStringOption)(a.underlinePeriod,["all","word"]),this.use=a.use||"",this.usehref=a.usehref||"",this.weight=(0,o.getStringOption)(a.weight,["normal","bold"]),this.extras=null,this.fill=null}[i.$clean](a){super[i.$clean](a),this[i.$globalData].usedTypefaces.add(this.typeface)}[i.$toStyle](){const a=(0,e.toStyle)(this,"fill"),ee=a.color;return ee&&(ee==="#000000"?delete a.color:ee.startsWith("#")||(a.background=ee,a.backgroundClip="text",a.color="transparent")),this.baselineShift&&(a.verticalAlign=(0,e.measureToString)(this.baselineShift)),a.fontKerning=this.kerningMode==="none"?"none":"normal",a.letterSpacing=(0,e.measureToString)(this.letterSpacing),this.lineThrough!==0&&(a.textDecoration="line-through",this.lineThrough===2&&(a.textDecorationStyle="double")),this.overline!==0&&(a.textDecoration="overline",this.overline===2&&(a.textDecorationStyle="double")),a.fontStyle=this.posture,a.fontSize=(0,e.measureToString)(.99*this.size),(0,e.setFontFamily)(this,this,this[i.$globalData].fontFinder,a),this.underline!==0&&(a.textDecoration="underline",this.underline===2&&(a.textDecorationStyle="double")),a.fontWeight=this.weight,a}}class je extends t.XFAObject{constructor(a){super(d,"format",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.picture=null}}class Je extends t.StringObject{constructor(a){super(d,"handler"),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||""}}class $e extends t.XFAObject{constructor(a){super(d,"hyphenation"),this.excludeAllCaps=(0,o.getInteger)({data:a.excludeAllCaps,defaultValue:0,validate:ee=>ee===1}),this.excludeInitialCap=(0,o.getInteger)({data:a.excludeInitialCap,defaultValue:0,validate:ee=>ee===1}),this.hyphenate=(0,o.getInteger)({data:a.hyphenate,defaultValue:0,validate:ee=>ee===1}),this.id=a.id||"",this.pushCharacterCount=(0,o.getInteger)({data:a.pushCharacterCount,defaultValue:3,validate:ee=>ee>=0}),this.remainCharacterCount=(0,o.getInteger)({data:a.remainCharacterCount,defaultValue:3,validate:ee=>ee>=0}),this.use=a.use||"",this.usehref=a.usehref||"",this.wordCharacterCount=(0,o.getInteger)({data:a.wordCharacterCount,defaultValue:7,validate:ee=>ee>=0})}}class ve extends t.StringObject{constructor(a){super(d,"image"),this.aspect=(0,o.getStringOption)(a.aspect,["fit","actual","height","none","width"]),this.contentType=a.contentType||"",this.href=a.href||"",this.id=a.id||"",this.name=a.name||"",this.transferEncoding=(0,o.getStringOption)(a.transferEncoding,["base64","none","package"]),this.use=a.use||"",this.usehref=a.usehref||""}[i.$toHTML](){if(this.contentType&&!f.has(this.contentType.toLowerCase()))return o.HTMLResult.EMPTY;let a=this[i.$globalData].images&&this[i.$globalData].images.get(this.href);if(!a&&(this.href||!this[i.$content])||(!a&&this.transferEncoding==="base64"&&(a=(0,K.stringToBytes)(atob(this[i.$content]))),!a))return o.HTMLResult.EMPTY;if(!this.contentType){for(const[nt,pt]of R)if(a.length>nt.length&&nt.every((mt,It)=>mt===a[It])){this.contentType=pt;break}if(!this.contentType)return o.HTMLResult.EMPTY}const ee=new Blob([a],{type:this.contentType});let Ke;switch(this.aspect){case"fit":case"actual":break;case"height":Ke={height:"100%",objectFit:"fill"};break;case"none":Ke={width:"100%",height:"100%",objectFit:"fill"};break;case"width":Ke={width:"100%",objectFit:"fill"};break}const Ze=this[i.$getParent]();return o.HTMLResult.success({name:"img",attributes:{class:["xfaImage"],style:Ke,src:URL.createObjectURL(ee),alt:Ze?s(Ze[i.$getParent]()):null}})}}class We extends t.XFAObject{constructor(a){super(d,"imageEdit",!0),this.data=(0,o.getStringOption)(a.data,["link","embed"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.extras=null,this.margin=null}[i.$toHTML](a){return this.data==="embed"?o.HTMLResult.success({name:"div",children:[],attributes:{}}):o.HTMLResult.EMPTY}}class tt extends t.ContentObject{constructor(a){super(d,"integer"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=parseInt(this[i.$content].trim(),10);this[i.$content]=isNaN(a)?null:a}[i.$toHTML](a){return h(this[i.$content]!==null?this[i.$content].toString():"")}}class at extends t.XFAObject{constructor(a){super(d,"issuers",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.certificate=new t.XFAObjectArray}}class ct extends t.XFAObject{constructor(a){super(d,"items",!0),this.id=a.id||"",this.name=a.name||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.ref=a.ref||"",this.save=(0,o.getInteger)({data:a.save,defaultValue:0,validate:ee=>ee===1}),this.use=a.use||"",this.usehref=a.usehref||"",this.boolean=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.time=new t.XFAObjectArray}[i.$toHTML](){const a=[];for(const ee of this[i.$getChildren]())a.push(ee[i.$text]());return o.HTMLResult.success(a)}}D.Items=ct;class gt extends t.XFAObject{constructor(a){super(d,"keep",!0),this.id=a.id||"";const ee=["none","contentArea","pageArea"];this.intact=(0,o.getStringOption)(a.intact,ee),this.next=(0,o.getStringOption)(a.next,ee),this.previous=(0,o.getStringOption)(a.previous,ee),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}}class ht extends t.XFAObject{constructor(a){super(d,"keyUsage");const ee=["","yes","no"];this.crlSign=(0,o.getStringOption)(a.crlSign,ee),this.dataEncipherment=(0,o.getStringOption)(a.dataEncipherment,ee),this.decipherOnly=(0,o.getStringOption)(a.decipherOnly,ee),this.digitalSignature=(0,o.getStringOption)(a.digitalSignature,ee),this.encipherOnly=(0,o.getStringOption)(a.encipherOnly,ee),this.id=a.id||"",this.keyAgreement=(0,o.getStringOption)(a.keyAgreement,ee),this.keyCertSign=(0,o.getStringOption)(a.keyCertSign,ee),this.keyEncipherment=(0,o.getStringOption)(a.keyEncipherment,ee),this.nonRepudiation=(0,o.getStringOption)(a.nonRepudiation,ee),this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||""}}class kt extends t.XFAObject{constructor(a){super(d,"line",!0),this.hand=(0,o.getStringOption)(a.hand,["even","left","right"]),this.id=a.id||"",this.slope=(0,o.getStringOption)(a.slope,["\\","/"]),this.use=a.use||"",this.usehref=a.usehref||"",this.edge=null}[i.$toHTML](){const a=this[i.$getParent]()[i.$getParent](),ee=this.edge||new we({}),Ke=ee[i.$toStyle](),Ze=Object.create(null),nt=ee.presence==="visible"?ee.thickness:0;Ze.strokeWidth=(0,e.measureToString)(nt),Ze.stroke=Ke.color;let pt,mt,It,Rt,Jt="100%",Qt="100%";a.w<=nt?([pt,mt,It,Rt]=["50%",0,"50%","100%"],Jt=Ze.strokeWidth):a.h<=nt?([pt,mt,It,Rt]=[0,"50%","100%","50%"],Qt=Ze.strokeWidth):this.slope==="\\"?[pt,mt,It,Rt]=[0,0,"100%","100%"]:[pt,mt,It,Rt]=[0,"100%","100%",0];const Mt={name:"svg",children:[{name:"line",attributes:{xmlns:A,x1:pt,y1:mt,x2:It,y2:Rt,style:Ze}}],attributes:{xmlns:A,width:Jt,height:Qt,style:{overflow:"visible"}}};return M(a)?o.HTMLResult.success({name:"div",attributes:{style:{display:"inline",width:"100%",height:"100%"}},children:[Mt]}):(Mt.attributes.style.position="absolute",o.HTMLResult.success(Mt))}}class Dt extends t.XFAObject{constructor(a){super(d,"linear",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["toRight","toBottom","toLeft","toTop"]),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](a){a=a?a[i.$toStyle]():"#FFFFFF";const ee=this.type.replace(/([RBLT])/," $1").toLowerCase(),Ke=this.color?this.color[i.$toStyle]():"#000000";return`linear-gradient(${ee}, ${a}, ${Ke})`}}class ze extends t.ContentObject{constructor(a){super(d,"lockDocument"),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){this[i.$content]=(0,o.getStringOption)(this[i.$content],["auto","0","1"])}}class Ge extends t.XFAObject{constructor(a){super(d,"manifest",!0),this.action=(0,o.getStringOption)(a.action,["include","all","exclude"]),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.ref=new t.XFAObjectArray}}class et extends t.XFAObject{constructor(a){super(d,"margin",!0),this.bottomInset=(0,o.getMeasurement)(a.bottomInset,"0"),this.id=a.id||"",this.leftInset=(0,o.getMeasurement)(a.leftInset,"0"),this.rightInset=(0,o.getMeasurement)(a.rightInset,"0"),this.topInset=(0,o.getMeasurement)(a.topInset,"0"),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}[i.$toStyle](){return{margin:(0,e.measureToString)(this.topInset)+" "+(0,e.measureToString)(this.rightInset)+" "+(0,e.measureToString)(this.bottomInset)+" "+(0,e.measureToString)(this.leftInset)}}}class ot extends t.XFAObject{constructor(a){super(d,"mdp"),this.id=a.id||"",this.permissions=(0,o.getInteger)({data:a.permissions,defaultValue:2,validate:ee=>ee===1||ee===3}),this.signatureType=(0,o.getStringOption)(a.signatureType,["filler","author"]),this.use=a.use||"",this.usehref=a.usehref||""}}class dt extends t.XFAObject{constructor(a){super(d,"medium"),this.id=a.id||"",this.imagingBBox=(0,o.getBBox)(a.imagingBBox),this.long=(0,o.getMeasurement)(a.long),this.orientation=(0,o.getStringOption)(a.orientation,["portrait","landscape"]),this.short=(0,o.getMeasurement)(a.short),this.stock=a.stock||"",this.trayIn=(0,o.getStringOption)(a.trayIn,["auto","delegate","pageFront"]),this.trayOut=(0,o.getStringOption)(a.trayOut,["auto","delegate"]),this.use=a.use||"",this.usehref=a.usehref||""}}class bt extends t.XFAObject{constructor(a){super(d,"message",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.text=new t.XFAObjectArray}}class At extends t.XFAObject{constructor(a){super(d,"numericEdit",!0),this.hScrollPolicy=(0,o.getStringOption)(a.hScrollPolicy,["auto","off","on"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.comb=null,this.extras=null,this.margin=null}[i.$toHTML](a){var nt;const ee=(0,e.toStyle)(this,"border","font","margin"),Ke=this[i.$getParent]()[i.$getParent](),Ze={name:"input",attributes:{type:"text",fieldId:Ke[i.$uid],dataId:((nt=Ke[i.$data])==null?void 0:nt[i.$uid])||Ke[i.$uid],class:["xfaTextfield"],style:ee,"aria-label":s(Ke),"aria-required":!1}};return l(Ke)&&(Ze.attributes["aria-required"]=!0,Ze.attributes.required=!0),o.HTMLResult.success({name:"label",attributes:{class:["xfaLabel"]},children:[Ze]})}}class st extends t.XFAObject{constructor(a){super(d,"occur",!0),this.id=a.id||"",this.initial=a.initial!==""?(0,o.getInteger)({data:a.initial,defaultValue:"",validate:ee=>!0}):"",this.max=a.max!==""?(0,o.getInteger)({data:a.max,defaultValue:1,validate:ee=>!0}):"",this.min=a.min!==""?(0,o.getInteger)({data:a.min,defaultValue:1,validate:ee=>!0}):"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}[i.$clean](){const a=this[i.$getParent](),ee=this.min;this.min===""&&(this.min=a instanceof qt||a instanceof Bt?0:1),this.max===""&&(ee===""?this.max=a instanceof qt||a instanceof Bt?-1:1:this.max=this.min),this.max!==-1&&this.max<this.min&&(this.max=this.min),this.initial===""&&(this.initial=a instanceof Ii?1:this.min)}}class xt extends t.StringObject{constructor(a){super(d,"oid"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}}class wt extends t.XFAObject{constructor(a){super(d,"oids",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.oid=new t.XFAObjectArray}}class Pt extends t.XFAObject{constructor(a){super(d,"overflow"),this.id=a.id||"",this.leader=a.leader||"",this.target=a.target||"",this.trailer=a.trailer||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$getExtra](){if(!this[i.$extra]){const a=this[i.$getParent](),ee=this[i.$getTemplateRoot](),Ke=ee[i.$searchNode](this.target,a),Ze=ee[i.$searchNode](this.leader,a),nt=ee[i.$searchNode](this.trailer,a);this[i.$extra]={target:(Ke==null?void 0:Ke[0])||null,leader:(Ze==null?void 0:Ze[0])||null,trailer:(nt==null?void 0:nt[0])||null,addLeader:!1,addTrailer:!1}}return this[i.$extra]}}class qt extends t.XFAObject{constructor(a){super(d,"pageArea",!0),this.blankOrNotBlank=(0,o.getStringOption)(a.blankOrNotBlank,["any","blank","notBlank"]),this.id=a.id||"",this.initialNumber=(0,o.getInteger)({data:a.initialNumber,defaultValue:1,validate:ee=>!0}),this.name=a.name||"",this.numbered=(0,o.getInteger)({data:a.numbered,defaultValue:1,validate:ee=>!0}),this.oddOrEven=(0,o.getStringOption)(a.oddOrEven,["any","even","odd"]),this.pagePosition=(0,o.getStringOption)(a.pagePosition,["any","first","last","only","rest"]),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.desc=null,this.extras=null,this.medium=null,this.occur=null,this.area=new t.XFAObjectArray,this.contentArea=new t.XFAObjectArray,this.draw=new t.XFAObjectArray,this.exclGroup=new t.XFAObjectArray,this.field=new t.XFAObjectArray,this.subform=new t.XFAObjectArray}[i.$isUsable](){return this[i.$extra]?!this.occur||this.occur.max===-1||this[i.$extra].numberOfUse<this.occur.max:(this[i.$extra]={numberOfUse:0},!0)}[i.$cleanPage](){delete this[i.$extra]}[i.$getNextPage](){this[i.$extra]||(this[i.$extra]={numberOfUse:0});const a=this[i.$getParent]();return a.relation==="orderedOccurrence"&&this[i.$isUsable]()?(this[i.$extra].numberOfUse+=1,this):a[i.$getNextPage]()}[i.$getAvailableSpace](){return this[i.$extra].space||{width:0,height:0}}[i.$toHTML](){this[i.$extra]||(this[i.$extra]={numberOfUse:1});const a=[];this[i.$extra].children=a;const ee=Object.create(null);if(this.medium&&this.medium.short&&this.medium.long){if(ee.width=(0,e.measureToString)(this.medium.short),ee.height=(0,e.measureToString)(this.medium.long),this[i.$extra].space={width:this.medium.short,height:this.medium.long},this.medium.orientation==="landscape"){const Ke=ee.width;ee.width=ee.height,ee.height=Ke,this[i.$extra].space={width:this.medium.long,height:this.medium.short}}}else(0,K.warn)("XFA - No medium specified in pageArea: please file a bug.");return this[i.$childrenToHTML]({filter:new Set(["area","draw","field","subform"]),include:!0}),this[i.$childrenToHTML]({filter:new Set(["contentArea"]),include:!0}),o.HTMLResult.success({name:"div",children:a,attributes:{class:["xfaPage"],id:this[i.$uid],style:ee,xfaName:this.name}})}}class Bt extends t.XFAObject{constructor(a){super(d,"pageSet",!0),this.duplexImposition=(0,o.getStringOption)(a.duplexImposition,["longEdge","shortEdge"]),this.id=a.id||"",this.name=a.name||"",this.relation=(0,o.getStringOption)(a.relation,["orderedOccurrence","duplexPaginated","simplexPaginated"]),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.occur=null,this.pageArea=new t.XFAObjectArray,this.pageSet=new t.XFAObjectArray}[i.$cleanPage](){for(const a of this.pageArea.children)a[i.$cleanPage]();for(const a of this.pageSet.children)a[i.$cleanPage]()}[i.$isUsable](){return!this.occur||this.occur.max===-1||this[i.$extra].numberOfUse<this.occur.max}[i.$getNextPage](){if(this[i.$extra]||(this[i.$extra]={numberOfUse:1,pageIndex:-1,pageSetIndex:-1}),this.relation==="orderedOccurrence"){if(this[i.$extra].pageIndex+1<this.pageArea.children.length)return this[i.$extra].pageIndex+=1,this.pageArea.children[this[i.$extra].pageIndex][i.$getNextPage]();if(this[i.$extra].pageSetIndex+1<this.pageSet.children.length)return this[i.$extra].pageSetIndex+=1,this.pageSet.children[this[i.$extra].pageSetIndex][i.$getNextPage]();if(this[i.$isUsable]())return this[i.$extra].numberOfUse+=1,this[i.$extra].pageIndex=-1,this[i.$extra].pageSetIndex=-1,this[i.$getNextPage]();const nt=this[i.$getParent]();return nt instanceof Bt?nt[i.$getNextPage]():(this[i.$cleanPage](),this[i.$getNextPage]())}const a=this[i.$getTemplateRoot]()[i.$extra].pageNumber,ee=a%2===0?"even":"odd",Ke=a===0?"first":"rest";let Ze=this.pageArea.children.find(nt=>nt.oddOrEven===ee&&nt.pagePosition===Ke);return Ze||(Ze=this.pageArea.children.find(nt=>nt.oddOrEven==="any"&&nt.pagePosition===Ke),Ze)||(Ze=this.pageArea.children.find(nt=>nt.oddOrEven==="any"&&nt.pagePosition==="any"),Ze)?Ze:this.pageArea.children[0]}}class Ut extends t.XFAObject{constructor(a){super(d,"para",!0),this.hAlign=(0,o.getStringOption)(a.hAlign,["left","center","justify","justifyAll","radix","right"]),this.id=a.id||"",this.lineHeight=a.lineHeight?(0,o.getMeasurement)(a.lineHeight,"0pt"):"",this.marginLeft=a.marginLeft?(0,o.getMeasurement)(a.marginLeft,"0pt"):"",this.marginRight=a.marginRight?(0,o.getMeasurement)(a.marginRight,"0pt"):"",this.orphans=(0,o.getInteger)({data:a.orphans,defaultValue:0,validate:ee=>ee>=0}),this.preserve=a.preserve||"",this.radixOffset=a.radixOffset?(0,o.getMeasurement)(a.radixOffset,"0pt"):"",this.spaceAbove=a.spaceAbove?(0,o.getMeasurement)(a.spaceAbove,"0pt"):"",this.spaceBelow=a.spaceBelow?(0,o.getMeasurement)(a.spaceBelow,"0pt"):"",this.tabDefault=a.tabDefault?(0,o.getMeasurement)(this.tabDefault):"",this.tabStops=(a.tabStops||"").trim().split(/\s+/).map((ee,Ke)=>Ke%2===1?(0,o.getMeasurement)(ee):ee),this.textIndent=a.textIndent?(0,o.getMeasurement)(a.textIndent,"0pt"):"",this.use=a.use||"",this.usehref=a.usehref||"",this.vAlign=(0,o.getStringOption)(a.vAlign,["top","bottom","middle"]),this.widows=(0,o.getInteger)({data:a.widows,defaultValue:0,validate:ee=>ee>=0}),this.hyphenation=null}[i.$toStyle](){const a=(0,e.toStyle)(this,"hAlign");return this.marginLeft!==""&&(a.paddingLeft=(0,e.measureToString)(this.marginLeft)),this.marginRight!==""&&(a.paddingight=(0,e.measureToString)(this.marginRight)),this.spaceAbove!==""&&(a.paddingTop=(0,e.measureToString)(this.spaceAbove)),this.spaceBelow!==""&&(a.paddingBottom=(0,e.measureToString)(this.spaceBelow)),this.textIndent!==""&&(a.textIndent=(0,e.measureToString)(this.textIndent),(0,e.fixTextIndent)(a)),this.lineHeight>0&&(a.lineHeight=(0,e.measureToString)(this.lineHeight)),this.tabDefault!==""&&(a.tabSize=(0,e.measureToString)(this.tabDefault)),this.tabStops.length>0,this.hyphenatation&&Object.assign(a,this.hyphenatation[i.$toStyle]()),a}}class St extends t.XFAObject{constructor(a){super(d,"passwordEdit",!0),this.hScrollPolicy=(0,o.getStringOption)(a.hScrollPolicy,["auto","off","on"]),this.id=a.id||"",this.passwordChar=a.passwordChar||"*",this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.extras=null,this.margin=null}}class Ot extends t.XFAObject{constructor(a){super(d,"pattern",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["crossHatch","crossDiagonal","diagonalLeft","diagonalRight","horizontal","vertical"]),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](a){a=a?a[i.$toStyle]():"#FFFFFF";const ee=this.color?this.color[i.$toStyle]():"#000000",Ke=5,Ze="repeating-linear-gradient",nt=`${a},${a} ${Ke}px,${ee} ${Ke}px,${ee} ${2*Ke}px`;switch(this.type){case"crossHatch":return`${Ze}(to top,${nt}) ${Ze}(to right,${nt})`;case"crossDiagonal":return`${Ze}(45deg,${nt}) ${Ze}(-45deg,${nt})`;case"diagonalLeft":return`${Ze}(45deg,${nt})`;case"diagonalRight":return`${Ze}(-45deg,${nt})`;case"horizontal":return`${Ze}(to top,${nt})`;case"vertical":return`${Ze}(to right,${nt})`}return""}}class ft extends t.StringObject{constructor(a){super(d,"picture"),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||""}}class Ct extends t.XFAObject{constructor(a){super(d,"proto",!0),this.appearanceFilter=new t.XFAObjectArray,this.arc=new t.XFAObjectArray,this.area=new t.XFAObjectArray,this.assist=new t.XFAObjectArray,this.barcode=new t.XFAObjectArray,this.bindItems=new t.XFAObjectArray,this.bookend=new t.XFAObjectArray,this.boolean=new t.XFAObjectArray,this.border=new t.XFAObjectArray,this.break=new t.XFAObjectArray,this.breakAfter=new t.XFAObjectArray,this.breakBefore=new t.XFAObjectArray,this.button=new t.XFAObjectArray,this.calculate=new t.XFAObjectArray,this.caption=new t.XFAObjectArray,this.certificate=new t.XFAObjectArray,this.certificates=new t.XFAObjectArray,this.checkButton=new t.XFAObjectArray,this.choiceList=new t.XFAObjectArray,this.color=new t.XFAObjectArray,this.comb=new t.XFAObjectArray,this.connect=new t.XFAObjectArray,this.contentArea=new t.XFAObjectArray,this.corner=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.dateTimeEdit=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.defaultUi=new t.XFAObjectArray,this.desc=new t.XFAObjectArray,this.digestMethod=new t.XFAObjectArray,this.digestMethods=new t.XFAObjectArray,this.draw=new t.XFAObjectArray,this.edge=new t.XFAObjectArray,this.encoding=new t.XFAObjectArray,this.encodings=new t.XFAObjectArray,this.encrypt=new t.XFAObjectArray,this.encryptData=new t.XFAObjectArray,this.encryption=new t.XFAObjectArray,this.encryptionMethod=new t.XFAObjectArray,this.encryptionMethods=new t.XFAObjectArray,this.event=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.exObject=new t.XFAObjectArray,this.exclGroup=new t.XFAObjectArray,this.execute=new t.XFAObjectArray,this.extras=new t.XFAObjectArray,this.field=new t.XFAObjectArray,this.fill=new t.XFAObjectArray,this.filter=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.font=new t.XFAObjectArray,this.format=new t.XFAObjectArray,this.handler=new t.XFAObjectArray,this.hyphenation=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.imageEdit=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.issuers=new t.XFAObjectArray,this.items=new t.XFAObjectArray,this.keep=new t.XFAObjectArray,this.keyUsage=new t.XFAObjectArray,this.line=new t.XFAObjectArray,this.linear=new t.XFAObjectArray,this.lockDocument=new t.XFAObjectArray,this.manifest=new t.XFAObjectArray,this.margin=new t.XFAObjectArray,this.mdp=new t.XFAObjectArray,this.medium=new t.XFAObjectArray,this.message=new t.XFAObjectArray,this.numericEdit=new t.XFAObjectArray,this.occur=new t.XFAObjectArray,this.oid=new t.XFAObjectArray,this.oids=new t.XFAObjectArray,this.overflow=new t.XFAObjectArray,this.pageArea=new t.XFAObjectArray,this.pageSet=new t.XFAObjectArray,this.para=new t.XFAObjectArray,this.passwordEdit=new t.XFAObjectArray,this.pattern=new t.XFAObjectArray,this.picture=new t.XFAObjectArray,this.radial=new t.XFAObjectArray,this.reason=new t.XFAObjectArray,this.reasons=new t.XFAObjectArray,this.rectangle=new t.XFAObjectArray,this.ref=new t.XFAObjectArray,this.script=new t.XFAObjectArray,this.setProperty=new t.XFAObjectArray,this.signData=new t.XFAObjectArray,this.signature=new t.XFAObjectArray,this.signing=new t.XFAObjectArray,this.solid=new t.XFAObjectArray,this.speak=new t.XFAObjectArray,this.stipple=new t.XFAObjectArray,this.subform=new t.XFAObjectArray,this.subformSet=new t.XFAObjectArray,this.subjectDN=new t.XFAObjectArray,this.subjectDNs=new t.XFAObjectArray,this.submit=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.textEdit=new t.XFAObjectArray,this.time=new t.XFAObjectArray,this.timeStamp=new t.XFAObjectArray,this.toolTip=new t.XFAObjectArray,this.traversal=new t.XFAObjectArray,this.traverse=new t.XFAObjectArray,this.ui=new t.XFAObjectArray,this.validate=new t.XFAObjectArray,this.value=new t.XFAObjectArray,this.variables=new t.XFAObjectArray}}class Ht extends t.XFAObject{constructor(a){super(d,"radial",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["toEdge","toCenter"]),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](a){a=a?a[i.$toStyle]():"#FFFFFF";const ee=this.color?this.color[i.$toStyle]():"#000000";return`radial-gradient(circle at center, ${this.type==="toEdge"?`${a},${ee}`:`${ee},${a}`})`}}class Xt extends t.StringObject{constructor(a){super(d,"reason"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}}class Ft extends t.XFAObject{constructor(a){super(d,"reasons",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.reason=new t.XFAObjectArray}}class Vt extends t.XFAObject{constructor(a){super(d,"rectangle",!0),this.hand=(0,o.getStringOption)(a.hand,["even","left","right"]),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.corner=new t.XFAObjectArray(4),this.edge=new t.XFAObjectArray(4),this.fill=null}[i.$toHTML](){var Rt;const a=this.edge.children.length?this.edge.children[0]:new we({}),ee=a[i.$toStyle](),Ke=Object.create(null);((Rt=this.fill)==null?void 0:Rt.presence)==="visible"?Object.assign(Ke,this.fill[i.$toStyle]()):Ke.fill="transparent",Ke.strokeWidth=(0,e.measureToString)(a.presence==="visible"?a.thickness:0),Ke.stroke=ee.color;const nt=(this.corner.children.length?this.corner.children[0]:new ae({}))[i.$toStyle](),mt={name:"svg",children:[{name:"rect",attributes:{xmlns:A,width:"100%",height:"100%",x:0,y:0,rx:nt.radius,ry:nt.radius,style:Ke}}],attributes:{xmlns:A,style:{overflow:"visible"},width:"100%",height:"100%"}},It=this[i.$getParent]()[i.$getParent]();return M(It)?o.HTMLResult.success({name:"div",attributes:{style:{display:"inline",width:"100%",height:"100%"}},children:[mt]}):(mt.attributes.style.position="absolute",o.HTMLResult.success(mt))}}class Kt extends t.StringObject{constructor(a){super(d,"ref"),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||""}}class Lt extends t.StringObject{constructor(a){super(d,"script"),this.binding=a.binding||"",this.contentType=a.contentType||"",this.id=a.id||"",this.name=a.name||"",this.runAt=(0,o.getStringOption)(a.runAt,["client","both","server"]),this.use=a.use||"",this.usehref=a.usehref||""}}class _t extends t.XFAObject{constructor(a){super(d,"setProperty"),this.connection=a.connection||"",this.ref=a.ref||"",this.target=a.target||""}}D.SetProperty=_t;class oi extends t.XFAObject{constructor(a){super(d,"signData",!0),this.id=a.id||"",this.operation=(0,o.getStringOption)(a.operation,["sign","clear","verify"]),this.ref=a.ref||"",this.target=a.target||"",this.use=a.use||"",this.usehref=a.usehref||"",this.filter=null,this.manifest=null}}class sn extends t.XFAObject{constructor(a){super(d,"signature",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["PDF1.3","PDF1.6"]),this.use=a.use||"",this.usehref=a.usehref||"",this.border=null,this.extras=null,this.filter=null,this.manifest=null,this.margin=null}}class rn extends t.XFAObject{constructor(a){super(d,"signing",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.certificate=new t.XFAObjectArray}}class on extends t.XFAObject{constructor(a){super(d,"solid",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null}[i.$toStyle](a){return a?a[i.$toStyle]():"#FFFFFF"}}class cn extends t.StringObject{constructor(a){super(d,"speak"),this.disable=(0,o.getInteger)({data:a.disable,defaultValue:0,validate:ee=>ee===1}),this.id=a.id||"",this.priority=(0,o.getStringOption)(a.priority,["custom","caption","name","toolTip"]),this.rid=a.rid||"",this.use=a.use||"",this.usehref=a.usehref||""}}class ln extends t.XFAObject{constructor(a){super(d,"stipple",!0),this.id=a.id||"",this.rate=(0,o.getInteger)({data:a.rate,defaultValue:50,validate:ee=>ee>=0&&ee<=100}),this.use=a.use||"",this.usehref=a.usehref||"",this.color=null,this.extras=null}[i.$toStyle](a){const ee=this.rate/100;return K.Util.makeHexColor(Math.round(a.value.r*(1-ee)+this.value.r*ee),Math.round(a.value.g*(1-ee)+this.value.g*ee),Math.round(a.value.b*(1-ee)+this.value.b*ee))}}class Ei extends t.XFAObject{constructor(a){super(d,"subform",!0),this.access=(0,o.getStringOption)(a.access,["open","nonInteractive","protected","readOnly"]),this.allowMacro=(0,o.getInteger)({data:a.allowMacro,defaultValue:0,validate:ee=>ee===1}),this.anchorType=(0,o.getStringOption)(a.anchorType,["topLeft","bottomCenter","bottomLeft","bottomRight","middleCenter","middleLeft","middleRight","topCenter","topRight"]),this.colSpan=(0,o.getInteger)({data:a.colSpan,defaultValue:1,validate:ee=>ee>=1||ee===-1}),this.columnWidths=(a.columnWidths||"").trim().split(/\s+/).map(ee=>ee==="-1"?-1:(0,o.getMeasurement)(ee)),this.h=a.h?(0,o.getMeasurement)(a.h):"",this.hAlign=(0,o.getStringOption)(a.hAlign,["left","center","justify","justifyAll","radix","right"]),this.id=a.id||"",this.layout=(0,o.getStringOption)(a.layout,["position","lr-tb","rl-row","rl-tb","row","table","tb"]),this.locale=a.locale||"",this.maxH=(0,o.getMeasurement)(a.maxH,"0pt"),this.maxW=(0,o.getMeasurement)(a.maxW,"0pt"),this.mergeMode=(0,o.getStringOption)(a.mergeMode,["consumeData","matchTemplate"]),this.minH=(0,o.getMeasurement)(a.minH,"0pt"),this.minW=(0,o.getMeasurement)(a.minW,"0pt"),this.name=a.name||"",this.presence=(0,o.getStringOption)(a.presence,["visible","hidden","inactive","invisible"]),this.relevant=(0,o.getRelevant)(a.relevant),this.restoreState=(0,o.getStringOption)(a.restoreState,["manual","auto"]),this.scope=(0,o.getStringOption)(a.scope,["name","none"]),this.use=a.use||"",this.usehref=a.usehref||"",this.w=a.w?(0,o.getMeasurement)(a.w):"",this.x=(0,o.getMeasurement)(a.x,"0pt"),this.y=(0,o.getMeasurement)(a.y,"0pt"),this.assist=null,this.bind=null,this.bookend=null,this.border=null,this.break=null,this.calculate=null,this.desc=null,this.extras=null,this.keep=null,this.margin=null,this.occur=null,this.overflow=null,this.pageSet=null,this.para=null,this.traversal=null,this.validate=null,this.variables=null,this.area=new t.XFAObjectArray,this.breakAfter=new t.XFAObjectArray,this.breakBefore=new t.XFAObjectArray,this.connect=new t.XFAObjectArray,this.draw=new t.XFAObjectArray,this.event=new t.XFAObjectArray,this.exObject=new t.XFAObjectArray,this.exclGroup=new t.XFAObjectArray,this.field=new t.XFAObjectArray,this.proto=new t.XFAObjectArray,this.setProperty=new t.XFAObjectArray,this.subform=new t.XFAObjectArray,this.subformSet=new t.XFAObjectArray}[i.$getSubformParent](){const a=this[i.$getParent]();return a instanceof bi?a[i.$getSubformParent]():a}[i.$isBindable](){return!0}[i.$isThereMoreWidth](){return this.layout.endsWith("-tb")&&this[i.$extra].attempt===0&&this[i.$extra].numberInLine>0||this[i.$getParent]()[i.$isThereMoreWidth]()}*[i.$getContainedChildren](){yield*ai(V(this))}[i.$flushHTML](){return(0,P.flushHTML)(this)}[i.$addHTML](a,ee){(0,P.addHTML)(this,a,ee)}[i.$getAvailableSpace](){return(0,P.getAvailableSpace)(this)}[i.$isSplittable](){var ee;const a=this[i.$getSubformParent]();return a[i.$isSplittable]()?this[i.$extra]._isSplittable!==void 0?this[i.$extra]._isSplittable:this.layout==="position"||this.layout.includes("row")?(this[i.$extra]._isSplittable=!1,!1):this.keep&&this.keep.intact!=="none"?(this[i.$extra]._isSplittable=!1,!1):(ee=a.layout)!=null&&ee.endsWith("-tb")&&a[i.$extra].numberInLine!==0?!1:(this[i.$extra]._isSplittable=!0,!0):!1}[i.$toHTML](a){var Tt;if(x(this),this.break){if(this.break.after!=="auto"||this.break.afterTarget!==""){const yt=new _({targetType:this.break.after,target:this.break.afterTarget,startNew:this.break.startNew.toString()});yt[i.$globalData]=this[i.$globalData],this[i.$appendChild](yt),this.breakAfter.push(yt)}if(this.break.before!=="auto"||this.break.beforeTarget!==""){const yt=new ie({targetType:this.break.before,target:this.break.beforeTarget,startNew:this.break.startNew.toString()});yt[i.$globalData]=this[i.$globalData],this[i.$appendChild](yt),this.breakBefore.push(yt)}if(this.break.overflowTarget!==""){const yt=new Pt({target:this.break.overflowTarget,leader:this.break.overflowLeader,trailer:this.break.overflowTrailer});yt[i.$globalData]=this[i.$globalData],this[i.$appendChild](yt),this.overflow.push(yt)}this[i.$removeChild](this.break),this.break=null}if(this.presence==="hidden"||this.presence==="inactive")return o.HTMLResult.EMPTY;if((this.breakBefore.children.length>1||this.breakAfter.children.length>1)&&(0,K.warn)("XFA - Several breakBefore or breakAfter in subforms: please file a bug."),this.breakBefore.children.length>=1){const yt=this.breakBefore.children[0];if(U(yt))return o.HTMLResult.breakNode(yt)}if((Tt=this[i.$extra])!=null&&Tt.afterBreakAfter)return o.HTMLResult.EMPTY;(0,e.fixDimensions)(this);const ee=[],Ke={id:this[i.$uid],class:[]};(0,e.setAccess)(this,Ke.class),this[i.$extra]||(this[i.$extra]=Object.create(null)),Object.assign(this[i.$extra],{children:ee,line:null,attributes:Ke,attempt:0,numberInLine:0,availableSpace:{width:Math.min(this.w||1/0,a.width),height:Math.min(this.h||1/0,a.height)},width:0,height:0,prevHeight:0,currentWidth:0});const Ze=this[i.$getTemplateRoot](),nt=Ze[i.$extra].noLayoutFailure,pt=this[i.$isSplittable]();if(pt||F(this),!(0,P.checkDimensions)(this,a))return o.HTMLResult.FAILURE;const mt=new Set(["area","draw","exclGroup","field","subform","subformSet"]);if(this.layout.includes("row")){const yt=this[i.$getSubformParent]().columnWidths;Array.isArray(yt)&&yt.length>0&&(this[i.$extra].columnWidths=yt,this[i.$extra].currentColumn=0)}const It=(0,e.toStyle)(this,"anchorType","dimensions","position","presence","border","margin","hAlign"),Rt=["xfaSubform"],Jt=(0,e.layoutClass)(this);if(Jt&&Rt.push(Jt),Ke.style=It,Ke.class=Rt,this.name&&(Ke.xfaName=this.name),this.overflow){const yt=this.overflow[i.$getExtra]();yt.addLeader&&(yt.addLeader=!1,g(this,yt.leader,a))}this[i.$pushPara]();const Qt=this.layout==="lr-tb"||this.layout==="rl-tb",Nt=Qt?n:1;for(;this[i.$extra].attempt<Nt;this[i.$extra].attempt++){Qt&&this[i.$extra].attempt===n-1&&(this[i.$extra].numberInLine=0);const yt=this[i.$childrenToHTML]({filter:mt,include:!0});if(yt.success)break;if(yt.isBreak())return this[i.$popPara](),yt;if(Qt&&this[i.$extra].attempt===0&&this[i.$extra].numberInLine===0&&!Ze[i.$extra].noLayoutFailure){this[i.$extra].attempt=Nt;break}}if(this[i.$popPara](),pt||N(this),Ze[i.$extra].noLayoutFailure=nt,this[i.$extra].attempt===Nt)return this.overflow&&(this[i.$getTemplateRoot]()[i.$extra].overflowNode=this.overflow),pt||delete this[i.$extra],o.HTMLResult.FAILURE;if(this.overflow){const yt=this.overflow[i.$getExtra]();yt.addTrailer&&(yt.addTrailer=!1,g(this,yt.trailer,a))}let Mt=0,Wt=0;this.margin&&(Mt=this.margin.leftInset+this.margin.rightInset,Wt=this.margin.topInset+this.margin.bottomInset);const Et=Math.max(this[i.$extra].width+Mt,this.w||0),Yt=Math.max(this[i.$extra].height+Wt,this.h||0),vt=[this.x,this.y,Et,Yt];if(this.w===""&&(It.width=(0,e.measureToString)(Et)),this.h===""&&(It.height=(0,e.measureToString)(Yt)),(It.width==="0px"||It.height==="0px")&&ee.length===0)return o.HTMLResult.EMPTY;const $t={name:"div",attributes:Ke,children:ee};H(this,Ke);const zt=o.HTMLResult.success((0,e.createWrapper)(this,$t),vt);if(this.breakAfter.children.length>=1){const yt=this.breakAfter.children[0];if(U(yt))return this[i.$extra].afterBreakAfter=zt,o.HTMLResult.breakNode(yt)}return delete this[i.$extra],zt}}class bi extends t.XFAObject{constructor(a){super(d,"subformSet",!0),this.id=a.id||"",this.name=a.name||"",this.relation=(0,o.getStringOption)(a.relation,["ordered","choice","unordered"]),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.bookend=null,this.break=null,this.desc=null,this.extras=null,this.occur=null,this.overflow=null,this.breakAfter=new t.XFAObjectArray,this.breakBefore=new t.XFAObjectArray,this.subform=new t.XFAObjectArray,this.subformSet=new t.XFAObjectArray}*[i.$getContainedChildren](){yield*ai(V(this))}[i.$getSubformParent](){let a=this[i.$getParent]();for(;!(a instanceof Ei);)a=a[i.$getParent]();return a}[i.$isBindable](){return!0}}class un extends t.ContentObject{constructor(a){super(d,"subjectDN"),this.delimiter=a.delimiter||",",this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){this[i.$content]=new Map(this[i.$content].split(this.delimiter).map(a=>(a=a.split("=",2),a[0]=a[0].trim(),a)))}}class hn extends t.XFAObject{constructor(a){super(d,"subjectDNs",!0),this.id=a.id||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||"",this.subjectDN=new t.XFAObjectArray}}class dn extends t.XFAObject{constructor(a){super(d,"submit",!0),this.embedPDF=(0,o.getInteger)({data:a.embedPDF,defaultValue:0,validate:ee=>ee===1}),this.format=(0,o.getStringOption)(a.format,["xdp","formdata","pdf","urlencoded","xfd","xml"]),this.id=a.id||"",this.target=a.target||"",this.textEncoding=(0,o.getKeyword)({data:a.textEncoding?a.textEncoding.toLowerCase():"",defaultValue:"",validate:ee=>["utf-8","big-five","fontspecific","gbk","gb-18030","gb-2312","ksc-5601","none","shift-jis","ucs-2","utf-16"].includes(ee)||ee.match(/iso-8859-\d{2}/)}),this.use=a.use||"",this.usehref=a.usehref||"",this.xdpContent=a.xdpContent||"",this.encrypt=null,this.encryptData=new t.XFAObjectArray,this.signData=new t.XFAObjectArray}}class Ii extends t.XFAObject{constructor(a){super(d,"template",!0),this.baseProfile=(0,o.getStringOption)(a.baseProfile,["full","interactiveForms"]),this.extras=null,this.subform=new t.XFAObjectArray}[i.$finalize](){this.subform.children.length===0&&(0,K.warn)("XFA - No subforms in template node."),this.subform.children.length>=2&&(0,K.warn)("XFA - Several subforms in template node: please file a bug."),this[i.$tabIndex]=k}[i.$isSplittable](){return!0}[i.$searchNode](a,ee){return a.startsWith("#")?[this[i.$ids].get(a.slice(1))]:(0,O.searchNode)(this,ee,a,!0,!0)}*[i.$toPages](){var Wt,Et,Yt;if(!this.subform.children.length)return o.HTMLResult.success({name:"div",children:[]});this[i.$extra]={overflowNode:null,firstUnsplittable:null,currentContentArea:null,currentPageArea:null,noLayoutFailure:!1,pageNumber:1,pagePosition:"first",oddOrEven:"odd",blankOrNotBlank:"nonBlank",paraStack:[]};const a=this.subform.children[0];a.pageSet[i.$cleanPage]();const ee=a.pageSet.pageArea.children,Ke={name:"div",children:[]};let Ze=null,nt=null,pt=null;if(a.breakBefore.children.length>=1?(nt=a.breakBefore.children[0],pt=nt.target):a.subform.children.length>=1&&a.subform.children[0].breakBefore.children.length>=1?(nt=a.subform.children[0].breakBefore.children[0],pt=nt.target):(Wt=a.break)!=null&&Wt.beforeTarget?(nt=a.break,pt=nt.beforeTarget):a.subform.children.length>=1&&((Et=a.subform.children[0].break)!=null&&Et.beforeTarget)&&(nt=a.subform.children[0].break,pt=nt.beforeTarget),nt){const vt=this[i.$searchNode](pt,nt[i.$getParent]());vt instanceof qt&&(Ze=vt,nt[i.$extra]={})}Ze||(Ze=ee[0]),Ze[i.$extra]={numberOfUse:1};const mt=Ze[i.$getParent]();mt[i.$extra]={numberOfUse:1,pageIndex:mt.pageArea.children.indexOf(Ze),pageSetIndex:0};let It,Rt=null,Jt=null,Qt=!0,Nt=0,Mt=0;for(;;){if(Qt)Nt=0;else if(Ke.children.pop(),++Nt===I)return(0,K.warn)("XFA - Something goes wrong: please file a bug."),Ke;It=null,this[i.$extra].currentPageArea=Ze;const vt=Ze[i.$toHTML]().html;Ke.children.push(vt),Rt&&(this[i.$extra].noLayoutFailure=!0,vt.children.push(Rt[i.$toHTML](Ze[i.$extra].space).html),Rt=null),Jt&&(this[i.$extra].noLayoutFailure=!0,vt.children.push(Jt[i.$toHTML](Ze[i.$extra].space).html),Jt=null);const $t=Ze.contentArea.children,zt=vt.children.filter(yt=>yt.attributes.class.includes("xfaContentarea"));Qt=!1,this[i.$extra].firstUnsplittable=null,this[i.$extra].noLayoutFailure=!1;const Tt=yt=>{var ei;const ii=a[i.$flushHTML]();ii&&(Qt||(Qt=((ei=ii.children)==null?void 0:ei.length)>0),zt[yt].children.push(ii))};for(let yt=Mt,ii=$t.length;yt<ii;yt++){const ei=this[i.$extra].currentContentArea=$t[yt],ri={width:ei.w,height:ei.h};Mt=0,Rt&&(zt[yt].children.push(Rt[i.$toHTML](ri).html),Rt=null),Jt&&(zt[yt].children.push(Jt[i.$toHTML](ri).html),Jt=null);const ni=a[i.$toHTML](ri);if(ni.success)return ni.html?(Qt||(Qt=((Yt=ni.html.children)==null?void 0:Yt.length)>0),zt[yt].children.push(ni.html)):!Qt&&Ke.children.length>1&&Ke.children.pop(),Ke;if(ni.isBreak()){const Zt=ni.breakNode;if(Tt(yt),Zt.targetType==="auto")continue;Zt.leader&&(Rt=this[i.$searchNode](Zt.leader,Zt[i.$getParent]()),Rt=Rt?Rt[0]:null),Zt.trailer&&(Jt=this[i.$searchNode](Zt.trailer,Zt[i.$getParent]()),Jt=Jt?Jt[0]:null),Zt.targetType==="pageArea"?(It=Zt[i.$extra].target,yt=1/0):Zt[i.$extra].target?(It=Zt[i.$extra].target,Mt=Zt[i.$extra].index+1,yt=1/0):yt=Zt[i.$extra].index;continue}if(this[i.$extra].overflowNode){const Zt=this[i.$extra].overflowNode;this[i.$extra].overflowNode=null;const qi=Zt[i.$getExtra](),di=qi.target;qi.addLeader=qi.leader!==null,qi.addTrailer=qi.trailer!==null,Tt(yt);const ss=yt;if(yt=1/0,di instanceof qt)It=di;else if(di instanceof re){const ji=$t.indexOf(di);ji!==-1?ji>ss?yt=ji-1:Mt=ji:(It=di[i.$getParent](),Mt=It.contentArea.children.indexOf(di))}continue}Tt(yt)}this[i.$extra].pageNumber+=1,It&&(It[i.$isUsable]()?It[i.$extra].numberOfUse+=1:It=null),Ze=It||Ze[i.$getNextPage](),yield null}}}D.Template=Ii;class Pi extends t.ContentObject{constructor(a){super(d,"text"),this.id=a.id||"",this.maxChars=(0,o.getInteger)({data:a.maxChars,defaultValue:0,validate:ee=>ee>=0}),this.name=a.name||"",this.rid=a.rid||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$acceptWhitespace](){return!0}[i.$onChild](a){return a[i.$namespaceId]===w.NamespaceIds.xhtml.id?(this[i.$content]=a,!0):((0,K.warn)(`XFA - Invalid content in Text: ${a[i.$nodeName]}.`),!1)}[i.$onText](a){this[i.$content]instanceof t.XFAObject||super[i.$onText](a)}[i.$finalize](){typeof this[i.$content]=="string"&&(this[i.$content]=this[i.$content].replaceAll(`\r
`,`
`))}[i.$getExtra](){return typeof this[i.$content]=="string"?this[i.$content].split(/[\u2029\u2028\n]/).reduce((a,ee)=>(ee&&a.push(ee),a),[]).join(`
`):this[i.$content][i.$text]()}[i.$toHTML](a){if(typeof this[i.$content]=="string"){const ee=h(this[i.$content]).html;return this[i.$content].includes("\u2029")?(ee.name="div",ee.children=[],this[i.$content].split("\u2029").map(Ke=>Ke.split(/[\u2028\n]/).reduce((Ze,nt)=>(Ze.push({name:"span",value:nt},{name:"br"}),Ze),[])).forEach(Ke=>{ee.children.push({name:"p",children:Ke})})):/[\u2028\n]/.test(this[i.$content])&&(ee.name="div",ee.children=[],this[i.$content].split(/[\u2028\n]/).forEach(Ke=>{ee.children.push({name:"span",value:Ke},{name:"br"})})),o.HTMLResult.success(ee)}return this[i.$content][i.$toHTML](a)}}D.Text=Pi;class Hi extends t.XFAObject{constructor(a){super(d,"textEdit",!0),this.allowRichText=(0,o.getInteger)({data:a.allowRichText,defaultValue:0,validate:ee=>ee===1}),this.hScrollPolicy=(0,o.getStringOption)(a.hScrollPolicy,["auto","off","on"]),this.id=a.id||"",this.multiLine=(0,o.getInteger)({data:a.multiLine,defaultValue:"",validate:ee=>ee===0||ee===1}),this.use=a.use||"",this.usehref=a.usehref||"",this.vScrollPolicy=(0,o.getStringOption)(a.vScrollPolicy,["auto","off","on"]),this.border=null,this.comb=null,this.extras=null,this.margin=null}[i.$toHTML](a){var nt,pt;const ee=(0,e.toStyle)(this,"border","font","margin");let Ke;const Ze=this[i.$getParent]()[i.$getParent]();return this.multiLine===""&&(this.multiLine=Ze instanceof pe?1:0),this.multiLine===1?Ke={name:"textarea",attributes:{dataId:((nt=Ze[i.$data])==null?void 0:nt[i.$uid])||Ze[i.$uid],fieldId:Ze[i.$uid],class:["xfaTextfield"],style:ee,"aria-label":s(Ze),"aria-required":!1}}:Ke={name:"input",attributes:{type:"text",dataId:((pt=Ze[i.$data])==null?void 0:pt[i.$uid])||Ze[i.$uid],fieldId:Ze[i.$uid],class:["xfaTextfield"],style:ee,"aria-label":s(Ze),"aria-required":!1}},l(Ze)&&(Ke.attributes["aria-required"]=!0,Ke.attributes.required=!0),o.HTMLResult.success({name:"label",attributes:{class:["xfaLabel"]},children:[Ke]})}}class An extends t.StringObject{constructor(a){super(d,"time"),this.id=a.id||"",this.name=a.name||"",this.use=a.use||"",this.usehref=a.usehref||""}[i.$finalize](){const a=this[i.$content].trim();this[i.$content]=a?new Date(a):null}[i.$toHTML](a){return h(this[i.$content]?this[i.$content].toString():"")}}class gn extends t.XFAObject{constructor(a){super(d,"timeStamp"),this.id=a.id||"",this.server=a.server||"",this.type=(0,o.getStringOption)(a.type,["optional","required"]),this.use=a.use||"",this.usehref=a.usehref||""}}class pn extends t.StringObject{constructor(a){super(d,"toolTip"),this.id=a.id||"",this.rid=a.rid||"",this.use=a.use||"",this.usehref=a.usehref||""}}class fn extends t.XFAObject{constructor(a){super(d,"traversal",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.traverse=new t.XFAObjectArray}}class xn extends t.XFAObject{constructor(a){super(d,"traverse",!0),this.id=a.id||"",this.operation=(0,o.getStringOption)(a.operation,["next","back","down","first","left","right","up"]),this.ref=a.ref||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.script=null}get name(){return this.operation}[i.$isTransparent](){return!1}}class yi extends t.XFAObject{constructor(a){super(d,"ui",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.picture=null,this.barcode=null,this.button=null,this.checkButton=null,this.choiceList=null,this.dateTimeEdit=null,this.defaultUi=null,this.imageEdit=null,this.numericEdit=null,this.passwordEdit=null,this.signature=null,this.textEdit=null}[i.$getExtra](){if(this[i.$extra]===void 0){for(const a of Object.getOwnPropertyNames(this)){if(a==="extras"||a==="picture")continue;const ee=this[a];if(ee instanceof t.XFAObject)return this[i.$extra]=ee,ee}this[i.$extra]=null}return this[i.$extra]}[i.$toHTML](a){const ee=this[i.$getExtra]();return ee?ee[i.$toHTML](a):o.HTMLResult.EMPTY}}class Sn extends t.XFAObject{constructor(a){super(d,"validate",!0),this.formatTest=(0,o.getStringOption)(a.formatTest,["warning","disabled","error"]),this.id=a.id||"",this.nullTest=(0,o.getStringOption)(a.nullTest,["disabled","error","warning"]),this.scriptTest=(0,o.getStringOption)(a.scriptTest,["error","disabled","warning"]),this.use=a.use||"",this.usehref=a.usehref||"",this.extras=null,this.message=null,this.picture=null,this.script=null}}class ui extends t.XFAObject{constructor(a){super(d,"value",!0),this.id=a.id||"",this.override=(0,o.getInteger)({data:a.override,defaultValue:0,validate:ee=>ee===1}),this.relevant=(0,o.getRelevant)(a.relevant),this.use=a.use||"",this.usehref=a.usehref||"",this.arc=null,this.boolean=null,this.date=null,this.dateTime=null,this.decimal=null,this.exData=null,this.float=null,this.image=null,this.integer=null,this.line=null,this.rectangle=null,this.text=null,this.time=null}[i.$setValue](a){var Ze;const ee=this[i.$getParent]();if(ee instanceof Ie&&(Ze=ee.ui)!=null&&Ze.imageEdit){this.image||(this.image=new ve({}),this[i.$appendChild](this.image)),this.image[i.$content]=a[i.$content];return}const Ke=a[i.$nodeName];if(this[Ke]!==null){this[Ke][i.$content]=a[i.$content];return}for(const nt of Object.getOwnPropertyNames(this)){const pt=this[nt];pt instanceof t.XFAObject&&(this[nt]=null,this[i.$removeChild](pt))}this[a[i.$nodeName]]=a,this[i.$appendChild](a)}[i.$text](){if(this.exData)return typeof this.exData[i.$content]=="string"?this.exData[i.$content].trim():this.exData[i.$content][i.$text]().trim();for(const a of Object.getOwnPropertyNames(this)){if(a==="image")continue;const ee=this[a];if(ee instanceof t.XFAObject)return(ee[i.$content]||"").toString().trim()}return null}[i.$toHTML](a){for(const ee of Object.getOwnPropertyNames(this)){const Ke=this[ee];if(Ke instanceof t.XFAObject)return Ke[i.$toHTML](a)}return o.HTMLResult.EMPTY}}D.Value=ui;class mn extends t.XFAObject{constructor(a){super(d,"variables",!0),this.id=a.id||"",this.use=a.use||"",this.usehref=a.usehref||"",this.boolean=new t.XFAObjectArray,this.date=new t.XFAObjectArray,this.dateTime=new t.XFAObjectArray,this.decimal=new t.XFAObjectArray,this.exData=new t.XFAObjectArray,this.float=new t.XFAObjectArray,this.image=new t.XFAObjectArray,this.integer=new t.XFAObjectArray,this.manifest=new t.XFAObjectArray,this.script=new t.XFAObjectArray,this.text=new t.XFAObjectArray,this.time=new t.XFAObjectArray}[i.$isTransparent](){return!0}}class hi{static[w.$buildXFAObject](a,ee){if(hi.hasOwnProperty(a)){const Ke=hi[a](ee);return Ke[i.$setSetAttributes](ee),Ke}}static appearanceFilter(a){return new S(a)}static arc(a){return new m(a)}static area(a){return new r(a)}static assist(a){return new p(a)}static barcode(a){return new c(a)}static bind(a){return new u(a)}static bindItems(a){return new q(a)}static bookend(a){return new J(a)}static boolean(a){return new G(a)}static border(a){return new W(a)}static break(a){return new ce(a)}static breakAfter(a){return new _(a)}static breakBefore(a){return new ie(a)}static button(a){return new L(a)}static calculate(a){return new oe(a)}static caption(a){return new T(a)}static certificate(a){return new Q(a)}static certificates(a){return new v(a)}static checkButton(a){return new $(a)}static choiceList(a){return new Z(a)}static color(a){return new te(a)}static comb(a){return new ne(a)}static connect(a){return new X(a)}static contentArea(a){return new re(a)}static corner(a){return new ae(a)}static date(a){return new z(a)}static dateTime(a){return new le(a)}static dateTimeEdit(a){return new ue(a)}static decimal(a){return new ge(a)}static defaultUi(a){return new ke(a)}static desc(a){return new me(a)}static digestMethod(a){return new fe(a)}static digestMethods(a){return new xe(a)}static draw(a){return new pe(a)}static edge(a){return new we(a)}static encoding(a){return new Oe(a)}static encodings(a){return new Te(a)}static encrypt(a){return new Ce(a)}static encryptData(a){return new Ae(a)}static encryption(a){return new Se(a)}static encryptionMethod(a){return new He(a)}static encryptionMethods(a){return new Ve(a)}static event(a){return new Le(a)}static exData(a){return new Ye(a)}static exObject(a){return new lt(a)}static exclGroup(a){return new Ee(a)}static execute(a){return new ut(a)}static extras(a){return new _e(a)}static field(a){return new Ie(a)}static fill(a){return new de(a)}static filter(a){return new be(a)}static float(a){return new Be(a)}static font(a){return new Pe(a)}static format(a){return new je(a)}static handler(a){return new Je(a)}static hyphenation(a){return new $e(a)}static image(a){return new ve(a)}static imageEdit(a){return new We(a)}static integer(a){return new tt(a)}static issuers(a){return new at(a)}static items(a){return new ct(a)}static keep(a){return new gt(a)}static keyUsage(a){return new ht(a)}static line(a){return new kt(a)}static linear(a){return new Dt(a)}static lockDocument(a){return new ze(a)}static manifest(a){return new Ge(a)}static margin(a){return new et(a)}static mdp(a){return new ot(a)}static medium(a){return new dt(a)}static message(a){return new bt(a)}static numericEdit(a){return new At(a)}static occur(a){return new st(a)}static oid(a){return new xt(a)}static oids(a){return new wt(a)}static overflow(a){return new Pt(a)}static pageArea(a){return new qt(a)}static pageSet(a){return new Bt(a)}static para(a){return new Ut(a)}static passwordEdit(a){return new St(a)}static pattern(a){return new Ot(a)}static picture(a){return new ft(a)}static proto(a){return new Ct(a)}static radial(a){return new Ht(a)}static reason(a){return new Xt(a)}static reasons(a){return new Ft(a)}static rectangle(a){return new Vt(a)}static ref(a){return new Kt(a)}static script(a){return new Lt(a)}static setProperty(a){return new _t(a)}static signData(a){return new oi(a)}static signature(a){return new sn(a)}static signing(a){return new rn(a)}static solid(a){return new on(a)}static speak(a){return new cn(a)}static stipple(a){return new ln(a)}static subform(a){return new Ei(a)}static subformSet(a){return new bi(a)}static subjectDN(a){return new un(a)}static subjectDNs(a){return new hn(a)}static submit(a){return new dn(a)}static template(a){return new Ii(a)}static text(a){return new Pi(a)}static textEdit(a){return new Hi(a)}static time(a){return new An(a)}static timeStamp(a){return new gn(a)}static toolTip(a){return new pn(a)}static traversal(a){return new fn(a)}static traverse(a){return new xn(a)}static ui(a){return new yi(a)}static validate(a){return new Sn(a)}static value(a){return new ui(a)}static variables(a){return new mn(a)}}D.TemplateNamespace=hi},(Fe,D)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.NamespaceIds=D.$buildXFAObject=void 0;const se=Symbol();D.$buildXFAObject=se;const i={config:{id:0,check:w=>w.startsWith("http://www.xfa.org/schema/xci/")},connectionSet:{id:1,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-connection-set/")},datasets:{id:2,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-data/")},form:{id:3,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-form/")},localeSet:{id:4,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-locale-set/")},pdf:{id:5,check:w=>w==="http://ns.adobe.com/xdp/pdf/"},signature:{id:6,check:w=>w==="http://www.w3.org/2000/09/xmldsig#"},sourceSet:{id:7,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-source-set/")},stylesheet:{id:8,check:w=>w==="http://www.w3.org/1999/XSL/Transform"},template:{id:9,check:w=>w.startsWith("http://www.xfa.org/schema/xfa-template/")},xdc:{id:10,check:w=>w.startsWith("http://www.xfa.org/schema/xdc/")},xdp:{id:11,check:w=>w==="http://ns.adobe.com/xdp/"},xfdf:{id:12,check:w=>w==="http://ns.adobe.com/xfdf/"},xhtml:{id:13,check:w=>w==="http://www.w3.org/1999/xhtml"},xmpmeta:{id:14,check:w=>w==="http://ns.adobe.com/xmpmeta/"}};D.NamespaceIds=i},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.addHTML=t,D.checkDimensions=j,D.flushHTML=e,D.getAvailableSpace=o;var i=se(78),w=se(83);function P(C,O){return{name:"div",attributes:{class:[C.layout==="lr-tb"?"xfaLr":"xfaRl"]},children:O}}function e(C){if(!C[i.$extra])return null;const d={name:"div",attributes:C[i.$extra].attributes,children:C[i.$extra].children};if(C[i.$extra].failingNode){const A=C[i.$extra].failingNode[i.$flushHTML]();A&&(C.layout.endsWith("-tb")?d.children.push(P(C,[A])):d.children.push(A))}return d.children.length===0?null:d}function t(C,O,d){const A=C[i.$extra],n=A.availableSpace,[I,k,y,f]=d;switch(C.layout){case"position":{A.width=Math.max(A.width,I+y),A.height=Math.max(A.height,k+f),A.children.push(O);break}case"lr-tb":case"rl-tb":(!A.line||A.attempt===1)&&(A.line=P(C,[]),A.children.push(A.line),A.numberInLine=0),A.numberInLine+=1,A.line.children.push(O),A.attempt===0?(A.currentWidth+=y,A.height=Math.max(A.height,A.prevHeight+f)):(A.currentWidth=y,A.prevHeight=A.height,A.height+=f,A.attempt=0),A.width=Math.max(A.width,A.currentWidth);break;case"rl-row":case"row":{A.children.push(O),A.width+=y,A.height=Math.max(A.height,f);const R=(0,w.measureToString)(A.height);for(const E of A.children)E.attributes.style.height=R;break}case"table":{A.width=Math.min(n.width,Math.max(A.width,y)),A.height+=f,A.children.push(O);break}case"tb":{A.width=Math.min(n.width,Math.max(A.width,y)),A.height+=f,A.children.push(O);break}}}function o(C){const O=C[i.$extra].availableSpace,d=C.margin?C.margin.topInset+C.margin.bottomInset:0,A=C.margin?C.margin.leftInset+C.margin.rightInset:0;switch(C.layout){case"lr-tb":case"rl-tb":return C[i.$extra].attempt===0?{width:O.width-A-C[i.$extra].currentWidth,height:O.height-d-C[i.$extra].prevHeight}:{width:O.width-A,height:O.height-d-C[i.$extra].height};case"rl-row":case"row":return{width:C[i.$extra].columnWidths.slice(C[i.$extra].currentColumn).reduce((I,k)=>I+k),height:O.height-A};case"table":case"tb":return{width:O.width-A,height:O.height-d-C[i.$extra].height};case"position":default:return O}}function K(C){let O=C.w===""?NaN:C.w,d=C.h===""?NaN:C.h,[A,n]=[0,0];switch(C.anchorType||""){case"bottomCenter":[A,n]=[O/2,d];break;case"bottomLeft":[A,n]=[0,d];break;case"bottomRight":[A,n]=[O,d];break;case"middleCenter":[A,n]=[O/2,d/2];break;case"middleLeft":[A,n]=[0,d/2];break;case"middleRight":[A,n]=[O,d/2];break;case"topCenter":[A,n]=[O/2,0];break;case"topRight":[A,n]=[O,0];break}let I,k;switch(C.rotate||0){case 0:[I,k]=[-A,-n];break;case 90:[I,k]=[-n,A],[O,d]=[d,-O];break;case 180:[I,k]=[A,n],[O,d]=[-O,-d];break;case 270:[I,k]=[n,-A],[O,d]=[-d,O];break}return[C.x+I+Math.min(0,O),C.y+k+Math.min(0,d),Math.abs(O),Math.abs(d)]}function j(C,O){var f;if(C[i.$getTemplateRoot]()[i.$extra].firstUnsplittable===null||C.w===0||C.h===0)return!0;const d=2,A=C[i.$getSubformParent](),n=((f=A[i.$extra])==null?void 0:f.attempt)||0,[,I,k,y]=K(C);switch(A.layout){case"lr-tb":case"rl-tb":return n===0?C[i.$getTemplateRoot]()[i.$extra].noLayoutFailure?C.w!==""?Math.round(k-O.width)<=d:O.width>d:C.h!==""&&Math.round(y-O.height)>d?!1:C.w!==""?Math.round(k-O.width)<=d?!0:A[i.$extra].numberInLine===0?O.height>d:!1:O.width>d:C[i.$getTemplateRoot]()[i.$extra].noLayoutFailure?!0:C.h!==""&&Math.round(y-O.height)>d?!1:C.w===""||Math.round(k-O.width)<=d?O.height>d:A[i.$isThereMoreWidth]()?!1:O.height>d;case"table":case"tb":return C[i.$getTemplateRoot]()[i.$extra].noLayoutFailure?!0:C.h!==""&&!C[i.$isSplittable]()?Math.round(y-O.height)<=d:C.w===""||Math.round(k-O.width)<=d?O.height>d:A[i.$isThereMoreWidth]()?!1:O.height>d;case"position":if(C[i.$getTemplateRoot]()[i.$extra].noLayoutFailure||C.h===""||Math.round(y+I-O.height)<=d)return!0;const R=C[i.$getTemplateRoot]()[i.$extra].currentContentArea;return y+I>R.h;case"rl-row":case"row":return C[i.$getTemplateRoot]()[i.$extra].noLayoutFailure?!0:C.h!==""?Math.round(y-O.height)<=d:!0;default:return!0}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.computeBbox=A,D.createWrapper=y,D.fixDimensions=n,D.fixTextIndent=f,D.fixURL=l,D.isPrintOnly=E,D.layoutClass=I,D.layoutNode=d,D.measureToString=K,D.setAccess=R,D.setFontFamily=V,D.setMinMaxDimensions=C,D.setPara=b,D.toStyle=k;var i=se(78),w=se(2),P=se(84),e=se(85),t=se(86),o=se(87);function K(x){return typeof x=="string"?"0px":Number.isInteger(x)?`${x}px`:`${x.toFixed(2)}px`}const j={anchorType(x,H){const s=x[i.$getSubformParent]();if(!(!s||s.layout&&s.layout!=="position"))switch("transform"in H||(H.transform=""),x.anchorType){case"bottomCenter":H.transform+="translate(-50%, -100%)";break;case"bottomLeft":H.transform+="translate(0,-100%)";break;case"bottomRight":H.transform+="translate(-100%,-100%)";break;case"middleCenter":H.transform+="translate(-50%,-50%)";break;case"middleLeft":H.transform+="translate(0,-50%)";break;case"middleRight":H.transform+="translate(-100%,-50%)";break;case"topCenter":H.transform+="translate(-50%,0)";break;case"topRight":H.transform+="translate(-100%,0)";break}},dimensions(x,H){var N;const s=x[i.$getSubformParent]();let h=x.w;const F=x.h;if((N=s.layout)!=null&&N.includes("row")){const U=s[i.$extra],g=x.colSpan;let S;g===-1?(S=U.columnWidths.slice(U.currentColumn).reduce((m,r)=>m+r,0),U.currentColumn=0):(S=U.columnWidths.slice(U.currentColumn,U.currentColumn+g).reduce((m,r)=>m+r,0),U.currentColumn=(U.currentColumn+x.colSpan)%U.columnWidths.length),isNaN(S)||(h=x.w=S)}H.width=h!==""?K(h):"auto",H.height=F!==""?K(F):"auto"},position(x,H){const s=x[i.$getSubformParent]();s!=null&&s.layout&&s.layout!=="position"||(H.position="absolute",H.left=K(x.x),H.top=K(x.y))},rotate(x,H){x.rotate&&("transform"in H||(H.transform=""),H.transform+=`rotate(-${x.rotate}deg)`,H.transformOrigin="top left")},presence(x,H){switch(x.presence){case"invisible":H.visibility="hidden";break;case"hidden":case"inactive":H.display="none";break}},hAlign(x,H){if(x[i.$nodeName]==="para")switch(x.hAlign){case"justifyAll":H.textAlign="justify-all";break;case"radix":H.textAlign="left";break;default:H.textAlign=x.hAlign}else switch(x.hAlign){case"left":H.alignSelf="start";break;case"center":H.alignSelf="center";break;case"right":H.alignSelf="end";break}},margin(x,H){x.margin&&(H.margin=x.margin[i.$toStyle]().margin)}};function C(x,H){x[i.$getSubformParent]().layout==="position"&&(x.minW>0&&(H.minWidth=K(x.minW)),x.maxW>0&&(H.maxWidth=K(x.maxW)),x.minH>0&&(H.minHeight=K(x.minH)),x.maxH>0&&(H.maxHeight=K(x.maxH)))}function O(x,H,s,h,F,N){const U=new t.TextMeasure(H,s,h,F);return typeof x=="string"?U.addString(x):x[i.$pushGlyphs](U),U.compute(N)}function d(x,H){let s=null,h=null,F=!1;if((!x.w||!x.h)&&x.value){let N=0,U=0;x.margin&&(N=x.margin.leftInset+x.margin.rightInset,U=x.margin.topInset+x.margin.bottomInset);let g=null,S=null;x.para&&(S=Object.create(null),g=x.para.lineHeight===""?null:x.para.lineHeight,S.top=x.para.spaceAbove===""?0:x.para.spaceAbove,S.bottom=x.para.spaceBelow===""?0:x.para.spaceBelow,S.left=x.para.marginLeft===""?0:x.para.marginLeft,S.right=x.para.marginRight===""?0:x.para.marginRight);let m=x.font;if(!m){const c=x[i.$getTemplateRoot]();let u=x[i.$getParent]();for(;u&&u!==c;){if(u.font){m=u.font;break}u=u[i.$getParent]()}}const r=(x.w||H.width)-N,p=x[i.$globalData].fontFinder;if(x.value.exData&&x.value.exData[i.$content]&&x.value.exData.contentType==="text/html"){const c=O(x.value.exData[i.$content],m,S,g,p,r);h=c.width,s=c.height,F=c.isBroken}else{const c=x.value[i.$text]();if(c){const u=O(c,m,S,g,p,r);h=u.width,s=u.height,F=u.isBroken}}h!==null&&!x.w&&(h+=N),s!==null&&!x.h&&(s+=U)}return{w:h,h:s,isBroken:F}}function A(x,H,s){let h;if(x.w!==""&&x.h!=="")h=[x.x,x.y,x.w,x.h];else{if(!s)return null;let F=x.w;if(F===""){if(x.maxW===0){const U=x[i.$getSubformParent]();F=U.layout==="position"&&U.w!==""?0:x.minW}else F=Math.min(x.maxW,s.width);H.attributes.style.width=K(F)}let N=x.h;if(N===""){if(x.maxH===0){const U=x[i.$getSubformParent]();N=U.layout==="position"&&U.h!==""?0:x.minH}else N=Math.min(x.maxH,s.height);H.attributes.style.height=K(N)}h=[x.x,x.y,F,N]}return h}function n(x){var s;const H=x[i.$getSubformParent]();if((s=H.layout)!=null&&s.includes("row")){const h=H[i.$extra],F=x.colSpan;let N;F===-1?N=h.columnWidths.slice(h.currentColumn).reduce((U,g)=>U+g,0):N=h.columnWidths.slice(h.currentColumn,h.currentColumn+F).reduce((U,g)=>U+g,0),isNaN(N)||(x.w=N)}H.layout&&H.layout!=="position"&&(x.x=x.y=0),x.layout==="table"&&x.w===""&&Array.isArray(x.columnWidths)&&(x.w=x.columnWidths.reduce((h,F)=>h+F,0))}function I(x){switch(x.layout){case"position":return"xfaPosition";case"lr-tb":return"xfaLrTb";case"rl-row":return"xfaRlRow";case"rl-tb":return"xfaRlTb";case"row":return"xfaRow";case"table":return"xfaTable";case"tb":return"xfaTb";default:return"xfaPosition"}}function k(x,...H){const s=Object.create(null);for(const h of H){const F=x[h];if(F!==null){if(j.hasOwnProperty(h)){j[h](x,s);continue}if(F instanceof o.XFAObject){const N=F[i.$toStyle]();N?Object.assign(s,N):(0,w.warn)(`(DEBUG) - XFA - style for ${h} not implemented yet`)}}}return s}function y(x,H){const{attributes:s}=H,{style:h}=s,F={name:"div",attributes:{class:["xfaWrapper"],style:Object.create(null)},children:[]};if(s.class.push("xfaWrapped"),x.border){const{widths:N,insets:U}=x.border[i.$extra];let g,S,m=U[0],r=U[3];const p=U[0]+U[2],c=U[1]+U[3];switch(x.border.hand){case"even":m-=N[0]/2,r-=N[3]/2,g=`calc(100% + ${(N[1]+N[3])/2-c}px)`,S=`calc(100% + ${(N[0]+N[2])/2-p}px)`;break;case"left":m-=N[0],r-=N[3],g=`calc(100% + ${N[1]+N[3]-c}px)`,S=`calc(100% + ${N[0]+N[2]-p}px)`;break;case"right":g=c?`calc(100% - ${c}px)`:"100%",S=p?`calc(100% - ${p}px)`:"100%";break}const u=["xfaBorder"];E(x.border)&&u.push("xfaPrintOnly");const q={name:"div",attributes:{class:u,style:{top:`${m}px`,left:`${r}px`,width:g,height:S}},children:[]};for(const J of["border","borderWidth","borderColor","borderRadius","borderStyle"])h[J]!==void 0&&(q.attributes.style[J]=h[J],delete h[J]);F.children.push(q,H)}else F.children.push(H);for(const N of["background","backgroundClip","top","left","width","height","minWidth","minHeight","maxWidth","maxHeight","transform","transformOrigin","visibility"])h[N]!==void 0&&(F.attributes.style[N]=h[N],delete h[N]);return F.attributes.style.position=h.position==="absolute"?"absolute":"relative",delete h.position,h.alignSelf&&(F.attributes.style.alignSelf=h.alignSelf,delete h.alignSelf),F}function f(x){const H=(0,P.getMeasurement)(x.textIndent,"0px");if(H>=0)return;const h="padding"+((x.textAlign==="right"?"right":"left")==="left"?"Left":"Right"),F=(0,P.getMeasurement)(x[h],"0px");x[h]=`${F-H}px`}function R(x,H){switch(x.access){case"nonInteractive":H.push("xfaNonInteractive");break;case"readOnly":H.push("xfaReadOnly");break;case"protected":H.push("xfaDisabled");break}}function E(x){return x.relevant.length>0&&!x.relevant[0].excluded&&x.relevant[0].viewname==="print"}function M(x){const H=x[i.$getTemplateRoot]()[i.$extra].paraStack;return H.length?H.at(-1):null}function b(x,H,s){var h;if((h=s.attributes.class)!=null&&h.includes("xfaRich")){H&&(x.h===""&&(H.height="auto"),x.w===""&&(H.width="auto"));const F=M(x);if(F){const N=s.attributes.style;switch(N.display="flex",N.flexDirection="column",F.vAlign){case"top":N.justifyContent="start";break;case"bottom":N.justifyContent="end";break;case"middle":N.justifyContent="center";break}const U=F[i.$toStyle]();for(const[g,S]of Object.entries(U))g in N||(N[g]=S)}}}function V(x,H,s,h){if(!s){delete h.fontFamily;return}const F=(0,P.stripQuotes)(x.typeface);h.fontFamily=`"${F}"`;const N=s.find(F);if(N){const{fontFamily:U}=N.regular.cssFontInfo;U!==F&&(h.fontFamily=`"${U}"`);const g=M(H);if(g&&g.lineHeight!==""||h.lineHeight)return;const S=(0,e.selectFont)(x,N);S&&(h.lineHeight=Math.max(1.2,S.lineHeight))}}function l(x){const H=(0,w.createValidAbsoluteUrl)(x,null,{addDefaultProtocol:!0,tryConvertEncoding:!0});return H?H.href:null}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.HTMLResult=void 0,D.getBBox=n,D.getColor=A,D.getFloat=o,D.getInteger=t,D.getKeyword=K,D.getMeasurement=C,D.getRatio=O,D.getRelevant=d,D.getStringOption=j,D.stripQuotes=e;var i=se(2);const w={pt:k=>k,cm:k=>k/2.54*72,mm:k=>k/(10*2.54)*72,in:k=>k*72,px:k=>k},P=/([+-]?\d+\.?\d*)(.*)/;function e(k){return k.startsWith("'")||k.startsWith('"')?k.slice(1,-1):k}function t({data:k,defaultValue:y,validate:f}){if(!k)return y;k=k.trim();const R=parseInt(k,10);return!isNaN(R)&&f(R)?R:y}function o({data:k,defaultValue:y,validate:f}){if(!k)return y;k=k.trim();const R=parseFloat(k);return!isNaN(R)&&f(R)?R:y}function K({data:k,defaultValue:y,validate:f}){return k?(k=k.trim(),f(k)?k:y):y}function j(k,y){return K({data:k,defaultValue:y[0],validate:f=>y.includes(f)})}function C(k,y="0"){if(y||(y="0"),!k)return C(y);const f=k.trim().match(P);if(!f)return C(y);const[,R,E]=f,M=parseFloat(R);if(isNaN(M))return C(y);if(M===0)return 0;const b=w[E];return b?b(M):M}function O(k){if(!k)return{num:1,den:1};const y=k.trim().split(/\s*:\s*/).map(E=>parseFloat(E)).filter(E=>!isNaN(E));if(y.length===1&&y.push(1),y.length===0)return{num:1,den:1};const[f,R]=y;return{num:f,den:R}}function d(k){return k?k.trim().split(/\s+/).map(y=>({excluded:y[0]==="-",viewname:y.substring(1)})):[]}function A(k,y=[0,0,0]){let[f,R,E]=y;if(!k)return{r:f,g:R,b:E};const M=k.trim().split(/\s*,\s*/).map(b=>Math.min(Math.max(0,parseInt(b.trim(),10)),255)).map(b=>isNaN(b)?0:b);return M.length<3?{r:f,g:R,b:E}:([f,R,E]=M,{r:f,g:R,b:E})}function n(k){if(!k)return{x:-1,y:-1,width:-1,height:-1};const f=k.trim().split(/\s*,\s*/).map(V=>C(V,"-1"));if(f.length<4||f[2]<0||f[3]<0)return{x:-1,y:-1,width:-1,height:-1};const[R,E,M,b]=f;return{x:R,y:E,width:M,height:b}}class I{static get FAILURE(){return(0,i.shadow)(this,"FAILURE",new I(!1,null,null,null))}static get EMPTY(){return(0,i.shadow)(this,"EMPTY",new I(!0,null,null,null))}constructor(y,f,R,E){this.success=y,this.html=f,this.bbox=R,this.breakNode=E}isBreak(){return!!this.breakNode}static breakNode(y){return new I(!1,null,null,y)}static success(y,f=null){return new I(!0,y,f,null)}}D.HTMLResult=I},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.FontFinder=void 0,D.getMetrics=o,D.selectFont=t;var i=se(78),w=se(84),P=se(2);class e{constructor(j){this.fonts=new Map,this.cache=new Map,this.warned=new Set,this.defaultFont=null,this.add(j)}add(j,C=null){for(const d of j)this.addPdfFont(d);for(const d of this.fonts.values())d.regular||(d.regular=d.italic||d.bold||d.bolditalic);if(!C||C.size===0)return;const O=this.fonts.get("PdfJS-Fallback-PdfJS-XFA");for(const d of C)this.fonts.set(d,O)}addPdfFont(j){var I,k,y;const C=j.cssFontInfo,O=C.fontFamily;let d=this.fonts.get(O);d||(d=Object.create(null),this.fonts.set(O,d),this.defaultFont||(this.defaultFont=d));let A="";const n=parseFloat(C.fontWeight);parseFloat(C.italicAngle)!==0?A=n>=700?"bolditalic":"italic":n>=700&&(A="bold"),A||((j.name.includes("Bold")||(I=j.psName)!=null&&I.includes("Bold"))&&(A="bold"),(j.name.includes("Italic")||j.name.endsWith("It")||(k=j.psName)!=null&&k.includes("Italic")||(y=j.psName)!=null&&y.endsWith("It"))&&(A+="italic")),A||(A="regular"),d[A]=j}getDefault(){return this.defaultFont}find(j,C=!0){var I,k;let O=this.fonts.get(j)||this.cache.get(j);if(O)return O;const d=/,|-|_| |bolditalic|bold|italic|regular|it/gi;let A=j.replaceAll(d,"");if(O=this.fonts.get(A),O)return this.cache.set(j,O),O;A=A.toLowerCase();const n=[];for(const[y,f]of this.fonts.entries())y.replaceAll(d,"").toLowerCase().startsWith(A)&&n.push(f);if(n.length===0)for(const[,y]of this.fonts.entries())(I=y.regular.name)!=null&&I.replaceAll(d,"").toLowerCase().startsWith(A)&&n.push(y);if(n.length===0){A=A.replaceAll(/psmt|mt/gi,"");for(const[y,f]of this.fonts.entries())y.replaceAll(d,"").toLowerCase().startsWith(A)&&n.push(f)}if(n.length===0)for(const y of this.fonts.values())(k=y.regular.name)!=null&&k.replaceAll(d,"").toLowerCase().startsWith(A)&&n.push(y);return n.length>=1?(n.length!==1&&C&&(0,P.warn)(`XFA - Too many choices to guess the correct font: ${j}`),this.cache.set(j,n[0]),n[0]):(C&&!this.warned.has(j)&&(this.warned.add(j),(0,P.warn)(`XFA - Cannot find the font: ${j}`)),null)}}D.FontFinder=e;function t(K,j){return K.posture==="italic"?K.weight==="bold"?j.bolditalic:j.italic:K.weight==="bold"?j.bold:j.regular}function o(K,j=!1){let C=null;if(K){const n=(0,w.stripQuotes)(K.typeface),I=K[i.$globalData].fontFinder.find(n);C=t(K,I)}if(!C)return{lineHeight:12,lineGap:2,lineNoGap:10};const O=K.size||10,d=C.lineHeight?Math.max(j?0:1.2,C.lineHeight):1.2,A=C.lineGap===void 0?.2:C.lineGap;return{lineHeight:d*O,lineGap:A*O,lineNoGap:Math.max(1,d-A)*O}}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.TextMeasure=void 0;var i=se(85);const w=1.02;class P{constructor(K,j,C,O){if(this.lineHeight=C,this.paraMargin=j||{top:0,bottom:0,left:0,right:0},!K){[this.pdfFont,this.xfaFont]=this.defaultFont(O);return}this.xfaFont={typeface:K.typeface,posture:K.posture,weight:K.weight,size:K.size,letterSpacing:K.letterSpacing};const d=O.find(K.typeface);if(!d){[this.pdfFont,this.xfaFont]=this.defaultFont(O);return}this.pdfFont=(0,i.selectFont)(K,d),this.pdfFont||([this.pdfFont,this.xfaFont]=this.defaultFont(O))}defaultFont(K){const j=K.find("Helvetica",!1)||K.find("Myriad Pro",!1)||K.find("Arial",!1)||K.getDefault();if(j!=null&&j.regular){const O=j.regular,A={typeface:O.cssFontInfo.fontFamily,posture:"normal",weight:"normal",size:10,letterSpacing:0};return[O,A]}return[null,{typeface:"Courier",posture:"normal",weight:"normal",size:10,letterSpacing:0}]}}class e{constructor(K,j,C,O){this.fontFinder=O,this.stack=[new P(K,j,C,O)]}pushData(K,j,C){const O=this.stack.at(-1);for(const A of["typeface","posture","weight","size","letterSpacing"])K[A]||(K[A]=O.xfaFont[A]);for(const A of["top","bottom","left","right"])isNaN(j[A])&&(j[A]=O.paraMargin[A]);const d=new P(K,j,C||O.lineHeight,this.fontFinder);d.pdfFont||(d.pdfFont=O.pdfFont),this.stack.push(d)}popFont(){this.stack.pop()}topFont(){return this.stack.at(-1)}}class t{constructor(K,j,C,O){this.glyphs=[],this.fontSelector=new e(K,j,C,O),this.extraHeight=0}pushData(K,j,C){this.fontSelector.pushData(K,j,C)}popFont(K){return this.fontSelector.popFont()}addPara(){const K=this.fontSelector.topFont();this.extraHeight+=K.paraMargin.top+K.paraMargin.bottom}addString(K){if(!K)return;const j=this.fontSelector.topFont(),C=j.xfaFont.size;if(j.pdfFont){const O=j.xfaFont.letterSpacing,d=j.pdfFont,A=d.lineHeight||1.2,n=j.lineHeight||Math.max(1.2,A)*C,I=d.lineGap===void 0?.2:d.lineGap,k=A-I,y=Math.max(1,k)*C,f=C/1e3,R=d.defaultWidth||d.charsToGlyphs(" ")[0].width;for(const E of K.split(/[\u2029\n]/)){const M=d.encodeString(E).join(""),b=d.charsToGlyphs(M);for(const V of b){const l=V.width||R;this.glyphs.push([l*f+O,n,y,V.unicode,!1])}this.glyphs.push([0,0,0,`
`,!0])}this.glyphs.pop();return}for(const O of K.split(/[\u2029\n]/)){for(const d of O.split(""))this.glyphs.push([C,1.2*C,C,d,!1]);this.glyphs.push([0,0,0,`
`,!0])}this.glyphs.pop()}compute(K){let j=-1,C=0,O=0,d=0,A=0,n=0,I=!1,k=!0;for(let y=0,f=this.glyphs.length;y<f;y++){const[R,E,M,b,V]=this.glyphs[y],l=b===" ",x=k?M:E;if(V){O=Math.max(O,A),A=0,d+=n,n=x,j=-1,C=0,k=!1;continue}if(l){A+R>K?(O=Math.max(O,A),A=0,d+=n,n=x,j=-1,C=0,I=!0,k=!1):(n=Math.max(x,n),C=A,A+=R,j=y);continue}if(A+R>K){d+=n,n=x,j!==-1?(y=j,O=Math.max(O,C),A=0,j=-1,C=0):(O=Math.max(O,A),A=R),I=!0,k=!1;continue}A+=R,n=Math.max(x,n)}return O=Math.max(O,A),d+=n+this.extraHeight,{width:w*O,height:d,isBroken:I}}}D.TextMeasure=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XmlObject=D.XFAObjectArray=D.XFAObject=D.XFAAttribute=D.StringObject=D.OptionObject=D.Option10=D.Option01=D.IntegerObject=D.ContentObject=void 0;var i=se(78),w=se(84),P=se(2),e=se(3),t=se(81),o=se(88);const K=Symbol(),j=Symbol(),C=Symbol(),O=Symbol("_children"),d=Symbol(),A=Symbol(),n=Symbol(),I=Symbol(),k=Symbol(),y=Symbol(),f=Symbol(),R=Symbol(),E=Symbol(),M=Symbol("parent"),b=Symbol(),V=Symbol(),l=Symbol();let x=0;const H=t.NamespaceIds.datasets.id;class s{constructor(u,q,J=!1){this[i.$namespaceId]=u,this[i.$nodeName]=q,this[f]=J,this[M]=null,this[O]=[],this[i.$uid]=`${q}${x++}`,this[i.$globalData]=null}get isXFAObject(){return!0}get isXFAObjectArray(){return!1}createNodes(u){let q=this,J=null;for(const{name:G,index:W}of u){for(let ce=0,_=isFinite(W)?W:0;ce<=_;ce++){const ie=q[i.$namespaceId]===H?-1:q[i.$namespaceId];J=new N(ie,G),q[i.$appendChild](J)}q=J}return J}[i.$onChild](u){if(!this[f]||!this[i.$onChildCheck](u))return!1;const q=u[i.$nodeName],J=this[q];if(J instanceof h){if(J.push(u))return this[i.$appendChild](u),!0}else return J!==null&&this[i.$removeChild](J),this[q]=u,this[i.$appendChild](u),!0;let G="";return this.id?G=` (id: ${this.id})`:this.name&&(G=` (name: ${this.name} ${this.h.value})`),(0,P.warn)(`XFA - node "${this[i.$nodeName]}"${G} has already enough "${q}"!`),!1}[i.$onChildCheck](u){return this.hasOwnProperty(u[i.$nodeName])&&u[i.$namespaceId]===this[i.$namespaceId]}[i.$isNsAgnostic](){return!1}[i.$acceptWhitespace](){return!1}[i.$isCDATAXml](){return!1}[i.$isBindable](){return!1}[i.$popPara](){this.para&&this[i.$getTemplateRoot]()[i.$extra].paraStack.pop()}[i.$pushPara](){this[i.$getTemplateRoot]()[i.$extra].paraStack.push(this.para)}[i.$setId](u){this.id&&this[i.$namespaceId]===t.NamespaceIds.template.id&&u.set(this.id,this)}[i.$getTemplateRoot](){return this[i.$globalData].template}[i.$isSplittable](){return!1}[i.$isThereMoreWidth](){return!1}[i.$appendChild](u){u[M]=this,this[O].push(u),!u[i.$globalData]&&this[i.$globalData]&&(u[i.$globalData]=this[i.$globalData])}[i.$removeChild](u){const q=this[O].indexOf(u);this[O].splice(q,1)}[i.$hasSettableValue](){return this.hasOwnProperty("value")}[i.$setValue](u){}[i.$onText](u){}[i.$finalize](){}[i.$clean](u){delete this[f],this[i.$cleanup]&&(u.clean(this[i.$cleanup]),delete this[i.$cleanup])}[i.$indexOf](u){return this[O].indexOf(u)}[i.$insertAt](u,q){q[M]=this,this[O].splice(u,0,q),!q[i.$globalData]&&this[i.$globalData]&&(q[i.$globalData]=this[i.$globalData])}[i.$isTransparent](){return!this.name}[i.$lastAttribute](){return""}[i.$text](){return this[O].length===0?this[i.$content]:this[O].map(u=>u[i.$text]()).join("")}get[C](){const u=Object.getPrototypeOf(this);if(!u._attributes){const q=u._attributes=new Set;for(const J of Object.getOwnPropertyNames(this)){if(this[J]===null||this[J]instanceof s||this[J]instanceof h)break;q.add(J)}}return(0,P.shadow)(this,C,u._attributes)}[i.$isDescendent](u){let q=this;for(;q;){if(q===u)return!0;q=q[i.$getParent]()}return!1}[i.$getParent](){return this[M]}[i.$getSubformParent](){return this[i.$getParent]()}[i.$getChildren](u=null){return u?this[u]:this[O]}[i.$dump](){const u=Object.create(null);this[i.$content]&&(u.$content=this[i.$content]);for(const q of Object.getOwnPropertyNames(this)){const J=this[q];J!==null&&(J instanceof s?u[q]=J[i.$dump]():J instanceof h?J.isEmpty()||(u[q]=J.dump()):u[q]=J)}return u}[i.$toStyle](){return null}[i.$toHTML](){return w.HTMLResult.EMPTY}*[i.$getContainedChildren](){for(const u of this[i.$getChildren]())yield u}*[I](u,q){for(const J of this[i.$getContainedChildren]())if(!u||q===u.has(J[i.$nodeName])){const G=this[i.$getAvailableSpace](),W=J[i.$toHTML](G);W.success||(this[i.$extra].failingNode=J),yield W}}[i.$flushHTML](){return null}[i.$addHTML](u,q){this[i.$extra].children.push(u)}[i.$getAvailableSpace](){}[i.$childrenToHTML]({filter:u=null,include:q=!0}){if(!this[i.$extra].generator)this[i.$extra].generator=this[I](u,q);else{const J=this[i.$getAvailableSpace](),G=this[i.$extra].failingNode[i.$toHTML](J);if(!G.success)return G;G.html&&this[i.$addHTML](G.html,G.bbox),delete this[i.$extra].failingNode}for(;;){const J=this[i.$extra].generator.next();if(J.done)break;const G=J.value;if(!G.success)return G;G.html&&this[i.$addHTML](G.html,G.bbox)}return this[i.$extra].generator=null,w.HTMLResult.EMPTY}[i.$setSetAttributes](u){this[V]=new Set(Object.keys(u))}[y](u){const q=this[C],J=this[V];return[...u].filter(G=>q.has(G)&&!J.has(G))}[i.$resolvePrototypes](u,q=new Set){for(const J of this[O])J[b](u,q)}[b](u,q){const J=this[k](u,q);J?this[K](J,u,q):this[i.$resolvePrototypes](u,q)}[k](u,q){const{use:J,usehref:G}=this;if(!J&&!G)return null;let W=null,ce=null,_=null,ie=J;if(G?(ie=G,G.startsWith("#som(")&&G.endsWith(")")?ce=G.slice(5,-1):G.startsWith(".#som(")&&G.endsWith(")")?ce=G.slice(6,-1):G.startsWith("#")?_=G.slice(1):G.startsWith(".#")&&(_=G.slice(2))):J.startsWith("#")?_=J.slice(1):ce=J,this.use=this.usehref="",_?W=u.get(_):(W=(0,o.searchNode)(u.get(i.$root),this,ce,!0,!1),W&&(W=W[0])),!W)return(0,P.warn)(`XFA - Invalid prototype reference: ${ie}.`),null;if(W[i.$nodeName]!==this[i.$nodeName])return(0,P.warn)(`XFA - Incompatible prototype: ${W[i.$nodeName]} !== ${this[i.$nodeName]}.`),null;if(q.has(W))return(0,P.warn)("XFA - Cycle detected in prototypes use."),null;q.add(W);const L=W[k](u,q);return L&&W[K](L,u,q),W[i.$resolvePrototypes](u,q),q.delete(W),W}[K](u,q,J){if(J.has(u)){(0,P.warn)("XFA - Cycle detected in prototypes use.");return}!this[i.$content]&&u[i.$content]&&(this[i.$content]=u[i.$content]),new Set(J).add(u);for(const W of this[y](u[V]))this[W]=u[W],this[V]&&this[V].add(W);for(const W of Object.getOwnPropertyNames(this)){if(this[C].has(W))continue;const ce=this[W],_=u[W];if(ce instanceof h){for(const ie of ce[O])ie[b](q,J);for(let ie=ce[O].length,L=_[O].length;ie<L;ie++){const oe=u[O][ie][i.$clone]();if(ce.push(oe))oe[M]=this,this[O].push(oe),oe[b](q,J);else break}continue}if(ce!==null){ce[i.$resolvePrototypes](q,J),_&&ce[K](_,q,J);continue}if(_!==null){const ie=_[i.$clone]();ie[M]=this,this[W]=ie,this[O].push(ie),ie[b](q,J)}}}static[d](u){return Array.isArray(u)?u.map(q=>s[d](q)):typeof u=="object"&&u!==null?Object.assign({},u):u}[i.$clone](){const u=Object.create(Object.getPrototypeOf(this));for(const q of Object.getOwnPropertySymbols(this))try{u[q]=this[q]}catch(J){(0,P.shadow)(u,q,this[q])}u[i.$uid]=`${u[i.$nodeName]}${x++}`,u[O]=[];for(const q of Object.getOwnPropertyNames(this)){if(this[C].has(q)){u[q]=s[d](this[q]);continue}const J=this[q];u[q]=J instanceof h?new h(J[R]):null}for(const q of this[O]){const J=q[i.$nodeName],G=q[i.$clone]();u[O].push(G),G[M]=u,u[J]===null?u[J]=G:u[J][O].push(G)}return u}[i.$getChildren](u=null){return u?this[O].filter(q=>q[i.$nodeName]===u):this[O]}[i.$getChildrenByClass](u){return this[u]}[i.$getChildrenByName](u,q,J=!0){return Array.from(this[i.$getChildrenByNameIt](u,q,J))}*[i.$getChildrenByNameIt](u,q,J=!0){if(u==="parent"){yield this[M];return}for(const G of this[O])G[i.$nodeName]===u&&(yield G),G.name===u&&(yield G),(q||G[i.$isTransparent]())&&(yield*ai(G[i.$getChildrenByNameIt](u,q,!1)));J&&this[C].has(u)&&(yield new F(this,u,this[u]))}}D.XFAObject=s;class h{constructor(u=1/0){this[R]=u,this[O]=[]}get isXFAObject(){return!1}get isXFAObjectArray(){return!0}push(u){return this[O].length<=this[R]?(this[O].push(u),!0):((0,P.warn)(`XFA - node "${u[i.$nodeName]}" accepts no more than ${this[R]} children`),!1)}isEmpty(){return this[O].length===0}dump(){return this[O].length===1?this[O][0][i.$dump]():this[O].map(u=>u[i.$dump]())}[i.$clone](){const u=new h(this[R]);return u[O]=this[O].map(q=>q[i.$clone]()),u}get children(){return this[O]}clear(){this[O].length=0}}D.XFAObjectArray=h;class F{constructor(u,q,J){this[M]=u,this[i.$nodeName]=q,this[i.$content]=J,this[i.$consumed]=!1,this[i.$uid]=`attribute${x++}`}[i.$getParent](){return this[M]}[i.$isDataValue](){return!0}[i.$getDataValue](){return this[i.$content].trim()}[i.$setValue](u){u=u.value||"",this[i.$content]=u.toString()}[i.$text](){return this[i.$content]}[i.$isDescendent](u){return this[M]===u||this[M][i.$isDescendent](u)}}D.XFAAttribute=F;class N extends s{constructor(u,q,J={}){if(super(u,q),this[i.$content]="",this[A]=null,q!=="#text"){const G=new Map;this[j]=G;for(const[W,ce]of Object.entries(J))G.set(W,new F(this,W,ce));if(J.hasOwnProperty(i.$nsAttributes)){const W=J[i.$nsAttributes].xfa.dataNode;W!==void 0&&(W==="dataGroup"?this[A]=!1:W==="dataValue"&&(this[A]=!0))}}this[i.$consumed]=!1}[i.$toString](u){const q=this[i.$nodeName];if(q==="#text"){u.push((0,e.encodeToXmlString)(this[i.$content]));return}const J=(0,P.utf8StringToString)(q),G=this[i.$namespaceId]===H?"xfa:":"";u.push(`<${G}${J}`);for(const[W,ce]of this[j].entries()){const _=(0,P.utf8StringToString)(W);u.push(` ${_}="${(0,e.encodeToXmlString)(ce[i.$content])}"`)}if(this[A]!==null&&(this[A]?u.push(' xfa:dataNode="dataValue"'):u.push(' xfa:dataNode="dataGroup"')),!this[i.$content]&&this[O].length===0){u.push("/>");return}if(u.push(">"),this[i.$content])typeof this[i.$content]=="string"?u.push((0,e.encodeToXmlString)(this[i.$content])):this[i.$content][i.$toString](u);else for(const W of this[O])W[i.$toString](u);u.push(`</${G}${J}>`)}[i.$onChild](u){if(this[i.$content]){const q=new N(this[i.$namespaceId],"#text");this[i.$appendChild](q),q[i.$content]=this[i.$content],this[i.$content]=""}return this[i.$appendChild](u),!0}[i.$onText](u){this[i.$content]+=u}[i.$finalize](){if(this[i.$content]&&this[O].length>0){const u=new N(this[i.$namespaceId],"#text");this[i.$appendChild](u),u[i.$content]=this[i.$content],delete this[i.$content]}}[i.$toHTML](){return this[i.$nodeName]==="#text"?w.HTMLResult.success({name:"#text",value:this[i.$content]}):w.HTMLResult.EMPTY}[i.$getChildren](u=null){return u?this[O].filter(q=>q[i.$nodeName]===u):this[O]}[i.$getAttributes](){return this[j]}[i.$getChildrenByClass](u){const q=this[j].get(u);return q!==void 0?q:this[i.$getChildren](u)}*[i.$getChildrenByNameIt](u,q){const J=this[j].get(u);J&&(yield J);for(const G of this[O])G[i.$nodeName]===u&&(yield G),q&&(yield*ai(G[i.$getChildrenByNameIt](u,q)))}*[i.$getAttributeIt](u,q){const J=this[j].get(u);J&&(!q||!J[i.$consumed])&&(yield J);for(const G of this[O])yield*ai(G[i.$getAttributeIt](u,q))}*[i.$getRealChildrenByNameIt](u,q,J){for(const G of this[O])G[i.$nodeName]===u&&(!J||!G[i.$consumed])&&(yield G),q&&(yield*ai(G[i.$getRealChildrenByNameIt](u,q,J)))}[i.$isDataValue](){return this[A]===null?this[O].length===0||this[O][0][i.$namespaceId]===t.NamespaceIds.xhtml.id:this[A]}[i.$getDataValue](){return this[A]===null?this[O].length===0?this[i.$content].trim():this[O][0][i.$namespaceId]===t.NamespaceIds.xhtml.id?this[O][0][i.$text]().trim():null:this[i.$content].trim()}[i.$setValue](u){u=u.value||"",this[i.$content]=u.toString()}[i.$dump](u=!1){const q=Object.create(null);u&&(q.$ns=this[i.$namespaceId]),this[i.$content]&&(q.$content=this[i.$content]),q.$name=this[i.$nodeName],q.children=[];for(const J of this[O])q.children.push(J[i.$dump](u));q.attributes=Object.create(null);for(const[J,G]of this[j])q.attributes[J]=G[i.$content];return q}}D.XmlObject=N;class U extends s{constructor(u,q){super(u,q),this[i.$content]=""}[i.$onText](u){this[i.$content]+=u}[i.$finalize](){}}D.ContentObject=U;class g extends U{constructor(u,q,J){super(u,q),this[E]=J}[i.$finalize](){this[i.$content]=(0,w.getKeyword)({data:this[i.$content],defaultValue:this[E][0],validate:u=>this[E].includes(u)})}[i.$clean](u){super[i.$clean](u),delete this[E]}}D.OptionObject=g;class S extends U{[i.$finalize](){this[i.$content]=this[i.$content].trim()}}D.StringObject=S;class m extends U{constructor(u,q,J,G){super(u,q),this[n]=J,this[l]=G}[i.$finalize](){this[i.$content]=(0,w.getInteger)({data:this[i.$content],defaultValue:this[n],validate:this[l]})}[i.$clean](u){super[i.$clean](u),delete this[n],delete this[l]}}D.IntegerObject=m;class r extends m{constructor(u,q){super(u,q,0,J=>J===1)}}D.Option01=r;class p extends m{constructor(u,q){super(u,q,1,J=>J===0)}}D.Option10=p},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.createDataNode=d,D.searchNode=O;var i=se(78),w=se(2);const P=/^[^.[]+/,e=/^[^\]]+/,t={dot:0,dotDot:1,dotHash:2,dotBracket:3,dotParen:4},o=new Map([["$data",(A,n)=>A.datasets?A.datasets.data:A],["$record",(A,n)=>(A.datasets?A.datasets.data:A)[i.$getChildren]()[0]],["$template",(A,n)=>A.template],["$connectionSet",(A,n)=>A.connectionSet],["$form",(A,n)=>A.form],["$layout",(A,n)=>A.layout],["$host",(A,n)=>A.host],["$dataWindow",(A,n)=>A.dataWindow],["$event",(A,n)=>A.event],["!",(A,n)=>A.datasets],["$xfa",(A,n)=>A],["xfa",(A,n)=>A],["$",(A,n)=>n]]),K=new WeakMap;function j(A){return A=A.trim(),A==="*"?1/0:parseInt(A,10)||0}function C(A,n,I=!0){let k=A.match(P);if(!k)return null;let[y]=k;const f=[{name:y,cacheName:"."+y,index:0,js:null,formCalc:null,operator:t.dot}];let R=y.length;for(;R<A.length;){const E=R;if(A.charAt(R++)==="["){if(k=A.slice(R).match(e),!k)return(0,w.warn)("XFA - Invalid index in SOM expression"),null;f.at(-1).index=j(k[0]),R+=k[0].length+1;continue}let b;switch(A.charAt(R)){case".":if(!n)return null;R++,b=t.dotDot;break;case"#":R++,b=t.dotHash;break;case"[":if(I)return(0,w.warn)("XFA - SOM expression contains a FormCalc subexpression which is not supported for now."),null;b=t.dotBracket;break;case"(":if(I)return(0,w.warn)("XFA - SOM expression contains a JavaScript subexpression which is not supported for now."),null;b=t.dotParen;break;default:b=t.dot;break}if(k=A.slice(R).match(P),!k)break;[y]=k,R+=y.length,f.push({name:y,cacheName:A.slice(E,R),operator:b,index:0,js:null,formCalc:null})}return f}function O(A,n,I,k=!0,y=!0){const f=C(I,k);if(!f)return null;const R=o.get(f[0].name);let E=0,M;R?(M=!0,A=[R(A,n)],E=1):(M=n===null,A=[n||A]);for(let b=f.length;E<b;E++){const{name:V,cacheName:l,operator:x,index:H}=f[E],s=[];for(const h of A){if(!h.isXFAObject)continue;let F,N;if(y&&(N=K.get(h),N||(N=new Map,K.set(h,N)),F=N.get(l)),!F){switch(x){case t.dot:F=h[i.$getChildrenByName](V,!1);break;case t.dotDot:F=h[i.$getChildrenByName](V,!0);break;case t.dotHash:F=h[i.$getChildrenByClass](V),F=F.isXFAObjectArray?F.children:[F];break}y&&N.set(l,F)}F.length>0&&s.push(F)}if(s.length===0&&!M&&E===0){if(n=n[i.$getParent](),!n)return null;E=-1,A=[n];continue}A=isFinite(H)?s.filter(h=>H<h.length).map(h=>h[H]):s.flat()}return A.length===0?null:A}function d(A,n,I){const k=C(I);if(!k||k.some(R=>R.operator===t.dotDot))return null;const y=o.get(k[0].name);let f=0;y?(A=y(A,n),f=1):A=n||A;for(let R=k.length;f<R;f++){const{name:E,operator:M,index:b}=k[f];if(!isFinite(b))return k[f].index=0,A.createNodes(k.slice(f));let V;switch(M){case t.dot:V=A[i.$getChildrenByName](E,!1);break;case t.dotDot:V=A[i.$getChildrenByName](E,!0);break;case t.dotHash:V=A[i.$getChildrenByClass](E),V=V.isXFAObjectArray?V.children:[V];break}if(V.length===0)return A.createNodes(k.slice(f));if(b<V.length){const l=V[b];if(!l.isXFAObject)return(0,w.warn)("XFA - Cannot create a node."),null;A=l}else return k[f].index=b-V.length,A.createNodes(k.slice(f))}return null}},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.DataHandler=void 0;var i=se(78);class w{constructor(e,t){this.data=t,this.dataset=e.datasets||null}serialize(e){const t=[[-1,this.data[i.$getChildren]()]];for(;t.length>0;){const K=t.at(-1),[j,C]=K;if(j+1===C.length){t.pop();continue}const O=C[++K[0]],d=e.get(O[i.$uid]);if(d)O[i.$setValue](d);else{const n=O[i.$getAttributes]();for(const I of n.values()){const k=e.get(I[i.$uid]);if(k){I[i.$setValue](k);break}}}const A=O[i.$getChildren]();A.length>0&&t.push([-1,A])}const o=['<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">'];if(this.dataset)for(const K of this.dataset[i.$getChildren]())K[i.$nodeName]!=="data"&&K[i.$toString](o);return this.data[i.$toString](o),o.push("</xfa:datasets>"),o.join("")}}D.DataHandler=w},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XFAParser=void 0;var i=se(78),w=se(71),P=se(91),e=se(2);class t extends w.XMLParserBase{constructor(K=null,j=!1){super(),this._builder=new P.Builder(K),this._stack=[],this._globalData={usedTypefaces:new Set},this._ids=new Map,this._current=this._builder.buildRoot(this._ids),this._errorCode=w.XMLParserErrorCode.NoError,this._whiteRegex=/^\s+$/,this._nbsps=/\xa0+/g,this._richText=j}parse(K){if(this.parseXml(K),this._errorCode===w.XMLParserErrorCode.NoError)return this._current[i.$finalize](),this._current.element}onText(K){if(K=K.replace(this._nbsps,j=>j.slice(1)+" "),this._richText||this._current[i.$acceptWhitespace]()){this._current[i.$onText](K,this._richText);return}this._whiteRegex.test(K)||this._current[i.$onText](K.trim())}onCdata(K){this._current[i.$onText](K)}_mkAttributes(K,j){let C=null,O=null;const d=Object.create({});for(const{name:A,value:n}of K)if(A==="xmlns")C?(0,e.warn)(`XFA - multiple namespace definition in <${j}>`):C=n;else if(A.startsWith("xmlns:")){const I=A.substring(6);O||(O=[]),O.push({prefix:I,value:n})}else{const I=A.indexOf(":");if(I===-1)d[A]=n;else{let k=d[i.$nsAttributes];k||(k=d[i.$nsAttributes]=Object.create(null));const[y,f]=[A.slice(0,I),A.slice(I+1)],R=k[y]||(k[y]=Object.create(null));R[f]=n}}return[C,O,d]}_getNameAndPrefix(K,j){const C=K.indexOf(":");return C===-1?[K,null]:[K.substring(C+1),j?"":K.substring(0,C)]}onBeginElement(K,j,C){const[O,d,A]=this._mkAttributes(j,K),[n,I]=this._getNameAndPrefix(K,this._builder.isNsAgnostic()),k=this._builder.build({nsPrefix:I,name:n,attributes:A,namespace:O,prefixes:d});if(k[i.$globalData]=this._globalData,C){k[i.$finalize](),this._current[i.$onChild](k)&&k[i.$setId](this._ids),k[i.$clean](this._builder);return}this._stack.push(this._current),this._current=k}onEndElement(K){const j=this._current;if(j[i.$isCDATAXml]()&&typeof j[i.$content]=="string"){const C=new t;C._globalData=this._globalData;const O=C.parse(j[i.$content]);j[i.$content]=null,j[i.$onChild](O)}j[i.$finalize](),this._current=this._stack.pop(),this._current[i.$onChild](j)&&j[i.$setId](this._ids),j[i.$clean](this._builder)}onError(K){this._errorCode=K}}D.XFAParser=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.Builder=void 0;var i=se(81),w=se(78),P=se(92),e=se(80),t=se(101),o=se(2),K=se(87);class j extends K.XFAObject{constructor(A){super(-1,"root",Object.create(null)),this.element=null,this[w.$ids]=A}[w.$onChild](A){return this.element=A,!0}[w.$finalize](){super[w.$finalize](),this.element.template instanceof e.Template&&(this[w.$ids].set(w.$root,this.element),this.element.template[w.$resolvePrototypes](this[w.$ids]),this.element.template[w.$ids]=this[w.$ids])}}class C extends K.XFAObject{constructor(){super(-1,"",Object.create(null))}[w.$onChild](A){return!1}}class O{constructor(A=null){this._namespaceStack=[],this._nsAgnosticLevel=0,this._namespacePrefixes=new Map,this._namespaces=new Map,this._nextNsId=Math.max(...Object.values(i.NamespaceIds).map(({id:n})=>n)),this._currentNamespace=A||new t.UnknownNamespace(++this._nextNsId)}buildRoot(A){return new j(A)}build({nsPrefix:A,name:n,attributes:I,namespace:k,prefixes:y}){const f=k!==null;if(f&&(this._namespaceStack.push(this._currentNamespace),this._currentNamespace=this._searchNamespace(k)),y&&this._addNamespacePrefix(y),I.hasOwnProperty(w.$nsAttributes)){const M=P.NamespaceSetUp.datasets,b=I[w.$nsAttributes];let V=null;for(const[l,x]of Object.entries(b))if(this._getNamespaceToUse(l)===M){V={xfa:x};break}V?I[w.$nsAttributes]=V:delete I[w.$nsAttributes]}const R=this._getNamespaceToUse(A),E=(R==null?void 0:R[i.$buildXFAObject](n,I))||new C;return E[w.$isNsAgnostic]()&&this._nsAgnosticLevel++,(f||y||E[w.$isNsAgnostic]())&&(E[w.$cleanup]={hasNamespace:f,prefixes:y,nsAgnostic:E[w.$isNsAgnostic]()}),E}isNsAgnostic(){return this._nsAgnosticLevel>0}_searchNamespace(A){let n=this._namespaces.get(A);if(n)return n;for(const[I,{check:k}]of Object.entries(i.NamespaceIds))if(k(A)){if(n=P.NamespaceSetUp[I],n)return this._namespaces.set(A,n),n;break}return n=new t.UnknownNamespace(++this._nextNsId),this._namespaces.set(A,n),n}_addNamespacePrefix(A){for(const{prefix:n,value:I}of A){const k=this._searchNamespace(I);let y=this._namespacePrefixes.get(n);y||(y=[],this._namespacePrefixes.set(n,y)),y.push(k)}}_getNamespaceToUse(A){if(!A)return this._currentNamespace;const n=this._namespacePrefixes.get(A);return(n==null?void 0:n.length)>0?n.at(-1):((0,o.warn)(`Unknown namespace prefix: ${A}.`),null)}clean(A){const{hasNamespace:n,prefixes:I,nsAgnostic:k}=A;n&&(this._currentNamespace=this._namespaceStack.pop()),I&&I.forEach(({prefix:y})=>{this._namespacePrefixes.get(y).pop()}),k&&this._nsAgnosticLevel--}}D.Builder=O},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.NamespaceSetUp=void 0;var i=se(93),w=se(94),P=se(95),e=se(96),t=se(97),o=se(98),K=se(80),j=se(99),C=se(100);const O={config:i.ConfigNamespace,connection:w.ConnectionSetNamespace,datasets:P.DatasetsNamespace,localeSet:e.LocaleSetNamespace,signature:t.SignatureNamespace,stylesheet:o.StylesheetNamespace,template:K.TemplateNamespace,xdp:j.XdpNamespace,xhtml:C.XhtmlNamespace};D.NamespaceSetUp=O},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ConfigNamespace=void 0;var i=se(81),w=se(78),P=se(87),e=se(84),t=se(2);const o=i.NamespaceIds.config.id;class K extends P.XFAObject{constructor(ee){super(o,"acrobat",!0),this.acrobat7=null,this.autoSave=null,this.common=null,this.validate=null,this.validateApprovalSignatures=null,this.submitUrl=new P.XFAObjectArray}}class j extends P.XFAObject{constructor(ee){super(o,"acrobat7",!0),this.dynamicRender=null}}class C extends P.OptionObject{constructor(ee){super(o,"ADBE_JSConsole",["delegate","Enable","Disable"])}}class O extends P.OptionObject{constructor(ee){super(o,"ADBE_JSDebugger",["delegate","Enable","Disable"])}}class d extends P.Option01{constructor(ee){super(o,"addSilentPrint")}}class A extends P.Option01{constructor(ee){super(o,"addViewerPreferences")}}class n extends P.Option10{constructor(ee){super(o,"adjustData")}}class I extends P.IntegerObject{constructor(ee){super(o,"adobeExtensionLevel",0,Ke=>Ke>=1&&Ke<=8)}}class k extends P.XFAObject{constructor(ee){super(o,"agent",!0),this.name=ee.name?ee.name.trim():"",this.common=new P.XFAObjectArray}}class y extends P.ContentObject{constructor(ee){super(o,"alwaysEmbed")}}class f extends P.StringObject{constructor(ee){super(o,"amd")}}class R extends P.XFAObject{constructor(ee){super(o,"area"),this.level=(0,e.getInteger)({data:ee.level,defaultValue:0,validate:Ke=>Ke>=1&&Ke<=3}),this.name=(0,e.getStringOption)(ee.name,["","barcode","coreinit","deviceDriver","font","general","layout","merge","script","signature","sourceSet","templateCache"])}}class E extends P.OptionObject{constructor(ee){super(o,"attributes",["preserve","delegate","ignore"])}}class M extends P.OptionObject{constructor(ee){super(o,"autoSave",["disabled","enabled"])}}class b extends P.StringObject{constructor(ee){super(o,"base")}}class V extends P.XFAObject{constructor(ee){super(o,"batchOutput"),this.format=(0,e.getStringOption)(ee.format,["none","concat","zip","zipCompress"])}}class l extends P.ContentObject{constructor(ee){super(o,"behaviorOverride")}[w.$finalize](){this[w.$content]=new Map(this[w.$content].trim().split(/\s+/).filter(ee=>ee.includes(":")).map(ee=>ee.split(":",2)))}}class x extends P.XFAObject{constructor(ee){super(o,"cache",!0),this.templateCache=null}}class H extends P.Option01{constructor(ee){super(o,"change")}}class s extends P.XFAObject{constructor(ee){super(o,"common",!0),this.data=null,this.locale=null,this.localeSet=null,this.messaging=null,this.suppressBanner=null,this.template=null,this.validationMessaging=null,this.versionControl=null,this.log=new P.XFAObjectArray}}class h extends P.XFAObject{constructor(ee){super(o,"compress"),this.scope=(0,e.getStringOption)(ee.scope,["imageOnly","document"])}}class F extends P.Option01{constructor(ee){super(o,"compressLogicalStructure")}}class N extends P.Option10{constructor(ee){super(o,"compressObjectStream")}}class U extends P.XFAObject{constructor(ee){super(o,"compression",!0),this.compressLogicalStructure=null,this.compressObjectStream=null,this.level=null,this.type=null}}class g extends P.XFAObject{constructor(ee){super(o,"config",!0),this.acrobat=null,this.present=null,this.trace=null,this.agent=new P.XFAObjectArray}}class S extends P.OptionObject{constructor(ee){super(o,"conformance",["A","B"])}}class m extends P.Option01{constructor(ee){super(o,"contentCopy")}}class r extends P.IntegerObject{constructor(ee){super(o,"copies",1,Ke=>Ke>=1)}}class p extends P.StringObject{constructor(ee){super(o,"creator")}}class c extends P.IntegerObject{constructor(ee){super(o,"currentPage",0,Ke=>Ke>=0)}}class u extends P.XFAObject{constructor(ee){super(o,"data",!0),this.adjustData=null,this.attributes=null,this.incrementalLoad=null,this.outputXSL=null,this.range=null,this.record=null,this.startNode=null,this.uri=null,this.window=null,this.xsl=null,this.excludeNS=new P.XFAObjectArray,this.transform=new P.XFAObjectArray}}class q extends P.XFAObject{constructor(ee){super(o,"debug",!0),this.uri=null}}class J extends P.ContentObject{constructor(ee){super(o,"defaultTypeface"),this.writingScript=(0,e.getStringOption)(ee.writingScript,["*","Arabic","Cyrillic","EastEuropeanRoman","Greek","Hebrew","Japanese","Korean","Roman","SimplifiedChinese","Thai","TraditionalChinese","Vietnamese"])}}class G extends P.OptionObject{constructor(ee){super(o,"destination",["pdf","pcl","ps","webClient","zpl"])}}class W extends P.Option01{constructor(ee){super(o,"documentAssembly")}}class ce extends P.XFAObject{constructor(ee){super(o,"driver",!0),this.name=ee.name?ee.name.trim():"",this.fontInfo=null,this.xdc=null}}class _ extends P.OptionObject{constructor(ee){super(o,"duplexOption",["simplex","duplexFlipLongEdge","duplexFlipShortEdge"])}}class ie extends P.OptionObject{constructor(ee){super(o,"dynamicRender",["forbidden","required"])}}class L extends P.Option01{constructor(ee){super(o,"embed")}}class oe extends P.Option01{constructor(ee){super(o,"encrypt")}}class T extends P.XFAObject{constructor(ee){super(o,"encryption",!0),this.encrypt=null,this.encryptionLevel=null,this.permissions=null}}class Q extends P.OptionObject{constructor(ee){super(o,"encryptionLevel",["40bit","128bit"])}}class v extends P.StringObject{constructor(ee){super(o,"enforce")}}class $ extends P.XFAObject{constructor(ee){super(o,"equate"),this.force=(0,e.getInteger)({data:ee.force,defaultValue:1,validate:Ke=>Ke===0}),this.from=ee.from||"",this.to=ee.to||""}}class Z extends P.XFAObject{constructor(ee){super(o,"equateRange"),this.from=ee.from||"",this.to=ee.to||"",this._unicodeRange=ee.unicodeRange||""}get unicodeRange(){const ee=[],Ke=/U\+([0-9a-fA-F]+)/,Ze=this._unicodeRange;for(let nt of Ze.split(",").map(pt=>pt.trim()).filter(pt=>!!pt))nt=nt.split("-",2).map(pt=>{const mt=pt.match(Ke);return mt?parseInt(mt[1],16):0}),nt.length===1&&nt.push(nt[0]),ee.push(nt);return(0,t.shadow)(this,"unicodeRange",ee)}}class te extends P.ContentObject{constructor(ee){super(o,"exclude")}[w.$finalize](){this[w.$content]=this[w.$content].trim().split(/\s+/).filter(ee=>ee&&["calculate","close","enter","exit","initialize","ready","validate"].includes(ee))}}class ne extends P.StringObject{constructor(ee){super(o,"excludeNS")}}class X extends P.OptionObject{constructor(ee){super(o,"flipLabel",["usePrinterSetting","on","off"])}}class re extends P.XFAObject{constructor(ee){super(o,"fontInfo",!0),this.embed=null,this.map=null,this.subsetBelow=null,this.alwaysEmbed=new P.XFAObjectArray,this.defaultTypeface=new P.XFAObjectArray,this.neverEmbed=new P.XFAObjectArray}}class ae extends P.Option01{constructor(ee){super(o,"formFieldFilling")}}class z extends P.StringObject{constructor(ee){super(o,"groupParent")}}class le extends P.OptionObject{constructor(ee){super(o,"ifEmpty",["dataValue","dataGroup","ignore","remove"])}}class ue extends P.StringObject{constructor(ee){super(o,"includeXDPContent")}}class ge extends P.OptionObject{constructor(ee){super(o,"incrementalLoad",["none","forwardOnly"])}}class ke extends P.Option01{constructor(ee){super(o,"incrementalMerge")}}class me extends P.Option01{constructor(ee){super(o,"interactive")}}class fe extends P.OptionObject{constructor(ee){super(o,"jog",["usePrinterSetting","none","pageSet"])}}class xe extends P.XFAObject{constructor(ee){super(o,"labelPrinter",!0),this.name=(0,e.getStringOption)(ee.name,["zpl","dpl","ipl","tcpl"]),this.batchOutput=null,this.flipLabel=null,this.fontInfo=null,this.xdc=null}}class pe extends P.OptionObject{constructor(ee){super(o,"layout",["paginate","panel"])}}class we extends P.IntegerObject{constructor(ee){super(o,"level",0,Ke=>Ke>0)}}class Oe extends P.Option01{constructor(ee){super(o,"linearized")}}class Te extends P.StringObject{constructor(ee){super(o,"locale")}}class Ce extends P.StringObject{constructor(ee){super(o,"localeSet")}}class Ae extends P.XFAObject{constructor(ee){super(o,"log",!0),this.mode=null,this.threshold=null,this.to=null,this.uri=null}}class Se extends P.XFAObject{constructor(ee){super(o,"map",!0),this.equate=new P.XFAObjectArray,this.equateRange=new P.XFAObjectArray}}class He extends P.XFAObject{constructor(ee){super(o,"mediumInfo",!0),this.map=null}}class Ve extends P.XFAObject{constructor(ee){super(o,"message",!0),this.msgId=null,this.severity=null}}class Le extends P.XFAObject{constructor(ee){super(o,"messaging",!0),this.message=new P.XFAObjectArray}}class Ye extends P.OptionObject{constructor(ee){super(o,"mode",["append","overwrite"])}}class lt extends P.Option01{constructor(ee){super(o,"modifyAnnots")}}class Ee extends P.IntegerObject{constructor(ee){super(o,"msgId",1,Ke=>Ke>=1)}}class ut extends P.StringObject{constructor(ee){super(o,"nameAttr")}}class _e extends P.ContentObject{constructor(ee){super(o,"neverEmbed")}}class Ie extends P.IntegerObject{constructor(ee){super(o,"numberOfCopies",null,Ke=>Ke>=2&&Ke<=5)}}class de extends P.XFAObject{constructor(ee){super(o,"openAction",!0),this.destination=null}}class be extends P.XFAObject{constructor(ee){super(o,"output",!0),this.to=null,this.type=null,this.uri=null}}class Be extends P.StringObject{constructor(ee){super(o,"outputBin")}}class Pe extends P.XFAObject{constructor(ee){super(o,"outputXSL",!0),this.uri=null}}class je extends P.OptionObject{constructor(ee){super(o,"overprint",["none","both","draw","field"])}}class Je extends P.StringObject{constructor(ee){super(o,"packets")}[w.$finalize](){this[w.$content]!=="*"&&(this[w.$content]=this[w.$content].trim().split(/\s+/).filter(ee=>["config","datasets","template","xfdf","xslt"].includes(ee)))}}class $e extends P.XFAObject{constructor(ee){super(o,"pageOffset"),this.x=(0,e.getInteger)({data:ee.x,defaultValue:"useXDCSetting",validate:Ke=>!0}),this.y=(0,e.getInteger)({data:ee.y,defaultValue:"useXDCSetting",validate:Ke=>!0})}}class ve extends P.StringObject{constructor(ee){super(o,"pageRange")}[w.$finalize](){const ee=this[w.$content].trim().split(/\s+/).map(Ze=>parseInt(Ze,10)),Ke=[];for(let Ze=0,nt=ee.length;Ze<nt;Ze+=2)Ke.push(ee.slice(Ze,Ze+2));this[w.$content]=Ke}}class We extends P.OptionObject{constructor(ee){super(o,"pagination",["simplex","duplexShortEdge","duplexLongEdge"])}}class tt extends P.OptionObject{constructor(ee){super(o,"paginationOverride",["none","forceDuplex","forceDuplexLongEdge","forceDuplexShortEdge","forceSimplex"])}}class at extends P.IntegerObject{constructor(ee){super(o,"part",1,Ke=>!1)}}class ct extends P.XFAObject{constructor(ee){super(o,"pcl",!0),this.name=ee.name||"",this.batchOutput=null,this.fontInfo=null,this.jog=null,this.mediumInfo=null,this.outputBin=null,this.pageOffset=null,this.staple=null,this.xdc=null}}class gt extends P.XFAObject{constructor(ee){super(o,"pdf",!0),this.name=ee.name||"",this.adobeExtensionLevel=null,this.batchOutput=null,this.compression=null,this.creator=null,this.encryption=null,this.fontInfo=null,this.interactive=null,this.linearized=null,this.openAction=null,this.pdfa=null,this.producer=null,this.renderPolicy=null,this.scriptModel=null,this.silentPrint=null,this.submitFormat=null,this.tagged=null,this.version=null,this.viewerPreferences=null,this.xdc=null}}class ht extends P.XFAObject{constructor(ee){super(o,"pdfa",!0),this.amd=null,this.conformance=null,this.includeXDPContent=null,this.part=null}}class kt extends P.XFAObject{constructor(ee){super(o,"permissions",!0),this.accessibleContent=null,this.change=null,this.contentCopy=null,this.documentAssembly=null,this.formFieldFilling=null,this.modifyAnnots=null,this.plaintextMetadata=null,this.print=null,this.printHighQuality=null}}class Dt extends P.Option01{constructor(ee){super(o,"pickTrayByPDFSize")}}class ze extends P.StringObject{constructor(ee){super(o,"picture")}}class Ge extends P.Option01{constructor(ee){super(o,"plaintextMetadata")}}class et extends P.OptionObject{constructor(ee){super(o,"presence",["preserve","dissolve","dissolveStructure","ignore","remove"])}}class ot extends P.XFAObject{constructor(ee){super(o,"present",!0),this.behaviorOverride=null,this.cache=null,this.common=null,this.copies=null,this.destination=null,this.incrementalMerge=null,this.layout=null,this.output=null,this.overprint=null,this.pagination=null,this.paginationOverride=null,this.script=null,this.validate=null,this.xdp=null,this.driver=new P.XFAObjectArray,this.labelPrinter=new P.XFAObjectArray,this.pcl=new P.XFAObjectArray,this.pdf=new P.XFAObjectArray,this.ps=new P.XFAObjectArray,this.submitUrl=new P.XFAObjectArray,this.webClient=new P.XFAObjectArray,this.zpl=new P.XFAObjectArray}}class dt extends P.Option01{constructor(ee){super(o,"print")}}class bt extends P.Option01{constructor(ee){super(o,"printHighQuality")}}class At extends P.OptionObject{constructor(ee){super(o,"printScaling",["appdefault","noScaling"])}}class st extends P.StringObject{constructor(ee){super(o,"printerName")}}class xt extends P.StringObject{constructor(ee){super(o,"producer")}}class wt extends P.XFAObject{constructor(ee){super(o,"ps",!0),this.name=ee.name||"",this.batchOutput=null,this.fontInfo=null,this.jog=null,this.mediumInfo=null,this.outputBin=null,this.staple=null,this.xdc=null}}class Pt extends P.ContentObject{constructor(ee){super(o,"range")}[w.$finalize](){this[w.$content]=this[w.$content].trim().split(/\s*,\s*/,2).map(ee=>ee.split("-").map(Ke=>parseInt(Ke.trim(),10))).filter(ee=>ee.every(Ke=>!isNaN(Ke))).map(ee=>(ee.length===1&&ee.push(ee[0]),ee))}}class qt extends P.ContentObject{constructor(ee){super(o,"record")}[w.$finalize](){this[w.$content]=this[w.$content].trim();const ee=parseInt(this[w.$content],10);!isNaN(ee)&&ee>=0&&(this[w.$content]=ee)}}class Bt extends P.ContentObject{constructor(ee){super(o,"relevant")}[w.$finalize](){this[w.$content]=this[w.$content].trim().split(/\s+/)}}class Ut extends P.ContentObject{constructor(ee){super(o,"rename")}[w.$finalize](){this[w.$content]=this[w.$content].trim(),(this[w.$content].toLowerCase().startsWith("xml")||new RegExp("[\\p{L}_][\\p{L}\\d._\\p{M}-]*","u").test(this[w.$content]))&&(0,t.warn)("XFA - Rename: invalid XFA name")}}class St extends P.OptionObject{constructor(ee){super(o,"renderPolicy",["server","client"])}}class Ot extends P.OptionObject{constructor(ee){super(o,"runScripts",["both","client","none","server"])}}class ft extends P.XFAObject{constructor(ee){super(o,"script",!0),this.currentPage=null,this.exclude=null,this.runScripts=null}}class Ct extends P.OptionObject{constructor(ee){super(o,"scriptModel",["XFA","none"])}}class Ht extends P.OptionObject{constructor(ee){super(o,"severity",["ignore","error","information","trace","warning"])}}class Xt extends P.XFAObject{constructor(ee){super(o,"silentPrint",!0),this.addSilentPrint=null,this.printerName=null}}class Ft extends P.XFAObject{constructor(ee){super(o,"staple"),this.mode=(0,e.getStringOption)(ee.mode,["usePrinterSetting","on","off"])}}class Vt extends P.StringObject{constructor(ee){super(o,"startNode")}}class Kt extends P.IntegerObject{constructor(ee){super(o,"startPage",0,Ke=>!0)}}class Lt extends P.OptionObject{constructor(ee){super(o,"submitFormat",["html","delegate","fdf","xml","pdf"])}}class _t extends P.StringObject{constructor(ee){super(o,"submitUrl")}}class oi extends P.IntegerObject{constructor(ee){super(o,"subsetBelow",100,Ke=>Ke>=0&&Ke<=100)}}class sn extends P.Option01{constructor(ee){super(o,"suppressBanner")}}class rn extends P.Option01{constructor(ee){super(o,"tagged")}}class on extends P.XFAObject{constructor(ee){super(o,"template",!0),this.base=null,this.relevant=null,this.startPage=null,this.uri=null,this.xsl=null}}class cn extends P.OptionObject{constructor(ee){super(o,"threshold",["trace","error","information","warning"])}}class ln extends P.OptionObject{constructor(ee){super(o,"to",["null","memory","stderr","stdout","system","uri"])}}class Ei extends P.XFAObject{constructor(ee){super(o,"templateCache"),this.maxEntries=(0,e.getInteger)({data:ee.maxEntries,defaultValue:5,validate:Ke=>Ke>=0})}}class bi extends P.XFAObject{constructor(ee){super(o,"trace",!0),this.area=new P.XFAObjectArray}}class un extends P.XFAObject{constructor(ee){super(o,"transform",!0),this.groupParent=null,this.ifEmpty=null,this.nameAttr=null,this.picture=null,this.presence=null,this.rename=null,this.whitespace=null}}class hn extends P.OptionObject{constructor(ee){super(o,"type",["none","ascii85","asciiHex","ccittfax","flate","lzw","runLength","native","xdp","mergedXDP"])}}class dn extends P.StringObject{constructor(ee){super(o,"uri")}}class Ii extends P.OptionObject{constructor(ee){super(o,"validate",["preSubmit","prePrint","preExecute","preSave"])}}class Pi extends P.ContentObject{constructor(ee){super(o,"validateApprovalSignatures")}[w.$finalize](){this[w.$content]=this[w.$content].trim().split(/\s+/).filter(ee=>["docReady","postSign"].includes(ee))}}class Hi extends P.OptionObject{constructor(ee){super(o,"validationMessaging",["allMessagesIndividually","allMessagesTogether","firstMessageOnly","noMessages"])}}class An extends P.OptionObject{constructor(ee){super(o,"version",["1.7","1.6","1.5","1.4","1.3","1.2"])}}class gn extends P.XFAObject{constructor(ee){super(o,"VersionControl"),this.outputBelow=(0,e.getStringOption)(ee.outputBelow,["warn","error","update"]),this.sourceAbove=(0,e.getStringOption)(ee.sourceAbove,["warn","error"]),this.sourceBelow=(0,e.getStringOption)(ee.sourceBelow,["update","maintain"])}}class pn extends P.XFAObject{constructor(ee){super(o,"viewerPreferences",!0),this.ADBE_JSConsole=null,this.ADBE_JSDebugger=null,this.addViewerPreferences=null,this.duplexOption=null,this.enforce=null,this.numberOfCopies=null,this.pageRange=null,this.pickTrayByPDFSize=null,this.printScaling=null}}class fn extends P.XFAObject{constructor(ee){super(o,"webClient",!0),this.name=ee.name?ee.name.trim():"",this.fontInfo=null,this.xdc=null}}class xn extends P.OptionObject{constructor(ee){super(o,"whitespace",["preserve","ltrim","normalize","rtrim","trim"])}}class yi extends P.ContentObject{constructor(ee){super(o,"window")}[w.$finalize](){const ee=this[w.$content].trim().split(/\s*,\s*/,2).map(Ke=>parseInt(Ke,10));if(ee.some(Ke=>isNaN(Ke))){this[w.$content]=[0,0];return}ee.length===1&&ee.push(ee[0]),this[w.$content]=ee}}class Sn extends P.XFAObject{constructor(ee){super(o,"xdc",!0),this.uri=new P.XFAObjectArray,this.xsl=new P.XFAObjectArray}}class ui extends P.XFAObject{constructor(ee){super(o,"xdp",!0),this.packets=null}}class mn extends P.XFAObject{constructor(ee){super(o,"xsl",!0),this.debug=null,this.uri=null}}class hi extends P.XFAObject{constructor(ee){super(o,"zpl",!0),this.name=ee.name?ee.name.trim():"",this.batchOutput=null,this.flipLabel=null,this.fontInfo=null,this.xdc=null}}class Me{static[i.$buildXFAObject](ee,Ke){if(Me.hasOwnProperty(ee))return Me[ee](Ke)}static acrobat(ee){return new K(ee)}static acrobat7(ee){return new j(ee)}static ADBE_JSConsole(ee){return new C(ee)}static ADBE_JSDebugger(ee){return new O(ee)}static addSilentPrint(ee){return new d(ee)}static addViewerPreferences(ee){return new A(ee)}static adjustData(ee){return new n(ee)}static adobeExtensionLevel(ee){return new I(ee)}static agent(ee){return new k(ee)}static alwaysEmbed(ee){return new y(ee)}static amd(ee){return new f(ee)}static area(ee){return new R(ee)}static attributes(ee){return new E(ee)}static autoSave(ee){return new M(ee)}static base(ee){return new b(ee)}static batchOutput(ee){return new V(ee)}static behaviorOverride(ee){return new l(ee)}static cache(ee){return new x(ee)}static change(ee){return new H(ee)}static common(ee){return new s(ee)}static compress(ee){return new h(ee)}static compressLogicalStructure(ee){return new F(ee)}static compressObjectStream(ee){return new N(ee)}static compression(ee){return new U(ee)}static config(ee){return new g(ee)}static conformance(ee){return new S(ee)}static contentCopy(ee){return new m(ee)}static copies(ee){return new r(ee)}static creator(ee){return new p(ee)}static currentPage(ee){return new c(ee)}static data(ee){return new u(ee)}static debug(ee){return new q(ee)}static defaultTypeface(ee){return new J(ee)}static destination(ee){return new G(ee)}static documentAssembly(ee){return new W(ee)}static driver(ee){return new ce(ee)}static duplexOption(ee){return new _(ee)}static dynamicRender(ee){return new ie(ee)}static embed(ee){return new L(ee)}static encrypt(ee){return new oe(ee)}static encryption(ee){return new T(ee)}static encryptionLevel(ee){return new Q(ee)}static enforce(ee){return new v(ee)}static equate(ee){return new $(ee)}static equateRange(ee){return new Z(ee)}static exclude(ee){return new te(ee)}static excludeNS(ee){return new ne(ee)}static flipLabel(ee){return new X(ee)}static fontInfo(ee){return new re(ee)}static formFieldFilling(ee){return new ae(ee)}static groupParent(ee){return new z(ee)}static ifEmpty(ee){return new le(ee)}static includeXDPContent(ee){return new ue(ee)}static incrementalLoad(ee){return new ge(ee)}static incrementalMerge(ee){return new ke(ee)}static interactive(ee){return new me(ee)}static jog(ee){return new fe(ee)}static labelPrinter(ee){return new xe(ee)}static layout(ee){return new pe(ee)}static level(ee){return new we(ee)}static linearized(ee){return new Oe(ee)}static locale(ee){return new Te(ee)}static localeSet(ee){return new Ce(ee)}static log(ee){return new Ae(ee)}static map(ee){return new Se(ee)}static mediumInfo(ee){return new He(ee)}static message(ee){return new Ve(ee)}static messaging(ee){return new Le(ee)}static mode(ee){return new Ye(ee)}static modifyAnnots(ee){return new lt(ee)}static msgId(ee){return new Ee(ee)}static nameAttr(ee){return new ut(ee)}static neverEmbed(ee){return new _e(ee)}static numberOfCopies(ee){return new Ie(ee)}static openAction(ee){return new de(ee)}static output(ee){return new be(ee)}static outputBin(ee){return new Be(ee)}static outputXSL(ee){return new Pe(ee)}static overprint(ee){return new je(ee)}static packets(ee){return new Je(ee)}static pageOffset(ee){return new $e(ee)}static pageRange(ee){return new ve(ee)}static pagination(ee){return new We(ee)}static paginationOverride(ee){return new tt(ee)}static part(ee){return new at(ee)}static pcl(ee){return new ct(ee)}static pdf(ee){return new gt(ee)}static pdfa(ee){return new ht(ee)}static permissions(ee){return new kt(ee)}static pickTrayByPDFSize(ee){return new Dt(ee)}static picture(ee){return new ze(ee)}static plaintextMetadata(ee){return new Ge(ee)}static presence(ee){return new et(ee)}static present(ee){return new ot(ee)}static print(ee){return new dt(ee)}static printHighQuality(ee){return new bt(ee)}static printScaling(ee){return new At(ee)}static printerName(ee){return new st(ee)}static producer(ee){return new xt(ee)}static ps(ee){return new wt(ee)}static range(ee){return new Pt(ee)}static record(ee){return new qt(ee)}static relevant(ee){return new Bt(ee)}static rename(ee){return new Ut(ee)}static renderPolicy(ee){return new St(ee)}static runScripts(ee){return new Ot(ee)}static script(ee){return new ft(ee)}static scriptModel(ee){return new Ct(ee)}static severity(ee){return new Ht(ee)}static silentPrint(ee){return new Xt(ee)}static staple(ee){return new Ft(ee)}static startNode(ee){return new Vt(ee)}static startPage(ee){return new Kt(ee)}static submitFormat(ee){return new Lt(ee)}static submitUrl(ee){return new _t(ee)}static subsetBelow(ee){return new oi(ee)}static suppressBanner(ee){return new sn(ee)}static tagged(ee){return new rn(ee)}static template(ee){return new on(ee)}static templateCache(ee){return new Ei(ee)}static threshold(ee){return new cn(ee)}static to(ee){return new ln(ee)}static trace(ee){return new bi(ee)}static transform(ee){return new un(ee)}static type(ee){return new hn(ee)}static uri(ee){return new dn(ee)}static validate(ee){return new Ii(ee)}static validateApprovalSignatures(ee){return new Pi(ee)}static validationMessaging(ee){return new Hi(ee)}static version(ee){return new An(ee)}static versionControl(ee){return new gn(ee)}static viewerPreferences(ee){return new pn(ee)}static webClient(ee){return new fn(ee)}static whitespace(ee){return new xn(ee)}static window(ee){return new yi(ee)}static xdc(ee){return new Sn(ee)}static xdp(ee){return new ui(ee)}static xsl(ee){return new mn(ee)}static zpl(ee){return new hi(ee)}}D.ConfigNamespace=Me},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.ConnectionSetNamespace=void 0;var i=se(81),w=se(87);const P=i.NamespaceIds.connectionSet.id;class e extends w.XFAObject{constructor(R){super(P,"connectionSet",!0),this.wsdlConnection=new w.XFAObjectArray,this.xmlConnection=new w.XFAObjectArray,this.xsdConnection=new w.XFAObjectArray}}class t extends w.XFAObject{constructor(R){super(P,"effectiveInputPolicy"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class o extends w.XFAObject{constructor(R){super(P,"effectiveOutputPolicy"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class K extends w.StringObject{constructor(R){super(P,"operation"),this.id=R.id||"",this.input=R.input||"",this.name=R.name||"",this.output=R.output||"",this.use=R.use||"",this.usehref=R.usehref||""}}class j extends w.StringObject{constructor(R){super(P,"rootElement"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class C extends w.StringObject{constructor(R){super(P,"soapAction"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class O extends w.StringObject{constructor(R){super(P,"soapAddress"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class d extends w.StringObject{constructor(R){super(P,"uri"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class A extends w.StringObject{constructor(R){super(P,"wsdlAddress"),this.id=R.id||"",this.name=R.name||"",this.use=R.use||"",this.usehref=R.usehref||""}}class n extends w.XFAObject{constructor(R){super(P,"wsdlConnection",!0),this.dataDescription=R.dataDescription||"",this.name=R.name||"",this.effectiveInputPolicy=null,this.effectiveOutputPolicy=null,this.operation=null,this.soapAction=null,this.soapAddress=null,this.wsdlAddress=null}}class I extends w.XFAObject{constructor(R){super(P,"xmlConnection",!0),this.dataDescription=R.dataDescription||"",this.name=R.name||"",this.uri=null}}class k extends w.XFAObject{constructor(R){super(P,"xsdConnection",!0),this.dataDescription=R.dataDescription||"",this.name=R.name||"",this.rootElement=null,this.uri=null}}class y{static[i.$buildXFAObject](R,E){if(y.hasOwnProperty(R))return y[R](E)}static connectionSet(R){return new e(R)}static effectiveInputPolicy(R){return new t(R)}static effectiveOutputPolicy(R){return new o(R)}static operation(R){return new K(R)}static rootElement(R){return new j(R)}static soapAction(R){return new C(R)}static soapAddress(R){return new O(R)}static uri(R){return new d(R)}static wsdlAddress(R){return new A(R)}static wsdlConnection(R){return new n(R)}static xmlConnection(R){return new I(R)}static xsdConnection(R){return new k(R)}}D.ConnectionSetNamespace=y},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.DatasetsNamespace=void 0;var i=se(78),w=se(81),P=se(87);const e=w.NamespaceIds.datasets.id;class t extends P.XmlObject{constructor(C){super(e,"data",C)}[i.$isNsAgnostic](){return!0}}class o extends P.XFAObject{constructor(C){super(e,"datasets",!0),this.data=null,this.Signature=null}[i.$onChild](C){const O=C[i.$nodeName];(O==="data"&&C[i.$namespaceId]===e||O==="Signature"&&C[i.$namespaceId]===w.NamespaceIds.signature.id)&&(this[O]=C),this[i.$appendChild](C)}}class K{static[w.$buildXFAObject](C,O){if(K.hasOwnProperty(C))return K[C](O)}static datasets(C){return new o(C)}static data(C){return new t(C)}}D.DatasetsNamespace=K},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.LocaleSetNamespace=void 0;var i=se(81),w=se(87),P=se(84);const e=i.NamespaceIds.localeSet.id;class t extends w.XFAObject{constructor(g){super(e,"calendarSymbols",!0),this.name="gregorian",this.dayNames=new w.XFAObjectArray(2),this.eraNames=null,this.meridiemNames=null,this.monthNames=new w.XFAObjectArray(2)}}class o extends w.StringObject{constructor(g){super(e,"currencySymbol"),this.name=(0,P.getStringOption)(g.name,["symbol","isoname","decimal"])}}class K extends w.XFAObject{constructor(g){super(e,"currencySymbols",!0),this.currencySymbol=new w.XFAObjectArray(3)}}class j extends w.StringObject{constructor(g){super(e,"datePattern"),this.name=(0,P.getStringOption)(g.name,["full","long","med","short"])}}class C extends w.XFAObject{constructor(g){super(e,"datePatterns",!0),this.datePattern=new w.XFAObjectArray(4)}}class O extends w.ContentObject{constructor(g){super(e,"dateTimeSymbols")}}class d extends w.StringObject{constructor(g){super(e,"day")}}class A extends w.XFAObject{constructor(g){super(e,"dayNames",!0),this.abbr=(0,P.getInteger)({data:g.abbr,defaultValue:0,validate:S=>S===1}),this.day=new w.XFAObjectArray(7)}}class n extends w.StringObject{constructor(g){super(e,"era")}}class I extends w.XFAObject{constructor(g){super(e,"eraNames",!0),this.era=new w.XFAObjectArray(2)}}class k extends w.XFAObject{constructor(g){super(e,"locale",!0),this.desc=g.desc||"",this.name="isoname",this.calendarSymbols=null,this.currencySymbols=null,this.datePatterns=null,this.dateTimeSymbols=null,this.numberPatterns=null,this.numberSymbols=null,this.timePatterns=null,this.typeFaces=null}}class y extends w.XFAObject{constructor(g){super(e,"localeSet",!0),this.locale=new w.XFAObjectArray}}class f extends w.StringObject{constructor(g){super(e,"meridiem")}}class R extends w.XFAObject{constructor(g){super(e,"meridiemNames",!0),this.meridiem=new w.XFAObjectArray(2)}}class E extends w.StringObject{constructor(g){super(e,"month")}}class M extends w.XFAObject{constructor(g){super(e,"monthNames",!0),this.abbr=(0,P.getInteger)({data:g.abbr,defaultValue:0,validate:S=>S===1}),this.month=new w.XFAObjectArray(12)}}class b extends w.StringObject{constructor(g){super(e,"numberPattern"),this.name=(0,P.getStringOption)(g.name,["full","long","med","short"])}}class V extends w.XFAObject{constructor(g){super(e,"numberPatterns",!0),this.numberPattern=new w.XFAObjectArray(4)}}class l extends w.StringObject{constructor(g){super(e,"numberSymbol"),this.name=(0,P.getStringOption)(g.name,["decimal","grouping","percent","minus","zero"])}}class x extends w.XFAObject{constructor(g){super(e,"numberSymbols",!0),this.numberSymbol=new w.XFAObjectArray(5)}}class H extends w.StringObject{constructor(g){super(e,"timePattern"),this.name=(0,P.getStringOption)(g.name,["full","long","med","short"])}}class s extends w.XFAObject{constructor(g){super(e,"timePatterns",!0),this.timePattern=new w.XFAObjectArray(4)}}class h extends w.XFAObject{constructor(g){super(e,"typeFace",!0),this.name=g.name|""}}class F extends w.XFAObject{constructor(g){super(e,"typeFaces",!0),this.typeFace=new w.XFAObjectArray}}class N{static[i.$buildXFAObject](g,S){if(N.hasOwnProperty(g))return N[g](S)}static calendarSymbols(g){return new t(g)}static currencySymbol(g){return new o(g)}static currencySymbols(g){return new K(g)}static datePattern(g){return new j(g)}static datePatterns(g){return new C(g)}static dateTimeSymbols(g){return new O(g)}static day(g){return new d(g)}static dayNames(g){return new A(g)}static era(g){return new n(g)}static eraNames(g){return new I(g)}static locale(g){return new k(g)}static localeSet(g){return new y(g)}static meridiem(g){return new f(g)}static meridiemNames(g){return new R(g)}static month(g){return new E(g)}static monthNames(g){return new M(g)}static numberPattern(g){return new b(g)}static numberPatterns(g){return new V(g)}static numberSymbol(g){return new l(g)}static numberSymbols(g){return new x(g)}static timePattern(g){return new H(g)}static timePatterns(g){return new s(g)}static typeFace(g){return new h(g)}static typeFaces(g){return new F(g)}}D.LocaleSetNamespace=N},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.SignatureNamespace=void 0;var i=se(81),w=se(87);const P=i.NamespaceIds.signature.id;class e extends w.XFAObject{constructor(K){super(P,"signature",!0)}}class t{static[i.$buildXFAObject](K,j){if(t.hasOwnProperty(K))return t[K](j)}static signature(K){return new e(K)}}D.SignatureNamespace=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.StylesheetNamespace=void 0;var i=se(81),w=se(87);const P=i.NamespaceIds.stylesheet.id;class e extends w.XFAObject{constructor(K){super(P,"stylesheet",!0)}}class t{static[i.$buildXFAObject](K,j){if(t.hasOwnProperty(K))return t[K](j)}static stylesheet(K){return new e(K)}}D.StylesheetNamespace=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XdpNamespace=void 0;var i=se(81),w=se(78),P=se(87);const e=i.NamespaceIds.xdp.id;class t extends P.XFAObject{constructor(j){super(e,"xdp",!0),this.uuid=j.uuid||"",this.timeStamp=j.timeStamp||"",this.config=null,this.connectionSet=null,this.datasets=null,this.localeSet=null,this.stylesheet=new P.XFAObjectArray,this.template=null}[w.$onChildCheck](j){const C=i.NamespaceIds[j[w.$nodeName]];return C&&j[w.$namespaceId]===C.id}}class o{static[i.$buildXFAObject](j,C){if(o.hasOwnProperty(j))return o[j](C)}static xdp(j){return new t(j)}}D.XdpNamespace=o},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.XhtmlNamespace=void 0;var i=se(78),w=se(81),P=se(83),e=se(84),t=se(87);const o=w.NamespaceIds.xhtml.id,K=Symbol(),j=new Set(["color","font","font-family","font-size","font-stretch","font-style","font-weight","margin","margin-bottom","margin-left","margin-right","margin-top","letter-spacing","line-height","orphans","page-break-after","page-break-before","page-break-inside","tab-interval","tab-stop","text-align","text-decoration","text-indent","vertical-align","widows","kerning-mode","xfa-font-horizontal-scale","xfa-font-vertical-scale","xfa-spacerun","xfa-tab-stops"]),C=new Map([["page-break-after","breakAfter"],["page-break-before","breakBefore"],["page-break-inside","breakInside"],["kerning-mode",g=>g==="none"?"none":"normal"],["xfa-font-horizontal-scale",g=>`scaleX(${Math.max(0,Math.min(parseInt(g)/100)).toFixed(2)})`],["xfa-font-vertical-scale",g=>`scaleY(${Math.max(0,Math.min(parseInt(g)/100)).toFixed(2)})`],["xfa-spacerun",""],["xfa-tab-stops",""],["font-size",(g,S)=>(g=S.fontSize=(0,e.getMeasurement)(g),(0,P.measureToString)(.99*g))],["letter-spacing",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["line-height",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["margin",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["margin-bottom",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["margin-left",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["margin-right",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["margin-top",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["text-indent",g=>(0,P.measureToString)((0,e.getMeasurement)(g))],["font-family",g=>g],["vertical-align",g=>(0,P.measureToString)((0,e.getMeasurement)(g))]]),O=/\s+/g,d=/[\r\n]+/g,A=/\r\n?/g;function n(g,S,m){const r=Object.create(null);if(!g)return r;const p=Object.create(null);for(const[c,u]of g.split(";").map(q=>q.split(":",2))){const q=C.get(c);if(q==="")continue;let J=u;q&&(J=typeof q=="string"?q:q(u,p)),c.endsWith("scale")?r.transform=r.transform?`${r[c]} ${J}`:J:r[c.replaceAll(/-([a-zA-Z])/g,(G,W)=>W.toUpperCase())]=J}if(r.fontFamily&&(0,P.setFontFamily)({typeface:r.fontFamily,weight:r.fontWeight||"normal",posture:r.fontStyle||"normal",size:p.fontSize||0},S,S[i.$globalData].fontFinder,r),m&&r.verticalAlign&&r.verticalAlign!=="0px"&&r.fontSize){const q=(0,e.getMeasurement)(r.fontSize);r.fontSize=(0,P.measureToString)(q*.583),r.verticalAlign=(0,P.measureToString)(Math.sign((0,e.getMeasurement)(r.verticalAlign))*q*.333)}return m&&r.fontSize&&(r.fontSize=`calc(${r.fontSize} * var(--scale-factor))`),(0,P.fixTextIndent)(r),r}function I(g){return g.style?g.style.trim().split(/\s*;\s*/).filter(S=>!!S).map(S=>S.split(/\s*:\s*/,2)).filter(([S,m])=>(S==="font-family"&&g[i.$globalData].usedTypefaces.add(m),j.has(S))).map(S=>S.join(":")).join(";"):""}const k=new Set(["body","html"]);class y extends t.XmlObject{constructor(S,m){super(o,m),this[K]=!1,this.style=S.style||""}[i.$clean](S){super[i.$clean](S),this.style=I(this)}[i.$acceptWhitespace](){return!k.has(this[i.$nodeName])}[i.$onText](S,m=!1){m?this[K]=!0:(S=S.replaceAll(d,""),this.style.includes("xfa-spacerun:yes")||(S=S.replaceAll(O," "))),S&&(this[i.$content]+=S)}[i.$pushGlyphs](S,m=!0){const r=Object.create(null),p={top:NaN,bottom:NaN,left:NaN,right:NaN};let c=null;for(const[u,q]of this.style.split(";").map(J=>J.split(":",2)))switch(u){case"font-family":r.typeface=(0,e.stripQuotes)(q);break;case"font-size":r.size=(0,e.getMeasurement)(q);break;case"font-weight":r.weight=q;break;case"font-style":r.posture=q;break;case"letter-spacing":r.letterSpacing=(0,e.getMeasurement)(q);break;case"margin":const J=q.split(/ \t/).map(G=>(0,e.getMeasurement)(G));switch(J.length){case 1:p.top=p.bottom=p.left=p.right=J[0];break;case 2:p.top=p.bottom=J[0],p.left=p.right=J[1];break;case 3:p.top=J[0],p.bottom=J[2],p.left=p.right=J[1];break;case 4:p.top=J[0],p.left=J[1],p.bottom=J[2],p.right=J[3];break}break;case"margin-top":p.top=(0,e.getMeasurement)(q);break;case"margin-bottom":p.bottom=(0,e.getMeasurement)(q);break;case"margin-left":p.left=(0,e.getMeasurement)(q);break;case"margin-right":p.right=(0,e.getMeasurement)(q);break;case"line-height":c=(0,e.getMeasurement)(q);break}if(S.pushData(r,p,c),this[i.$content])S.addString(this[i.$content]);else for(const u of this[i.$getChildren]()){if(u[i.$nodeName]==="#text"){S.addString(u[i.$content]);continue}u[i.$pushGlyphs](S)}m&&S.popFont()}[i.$toHTML](S){const m=[];if(this[i.$extra]={children:m},this[i.$childrenToHTML]({}),m.length===0&&!this[i.$content])return e.HTMLResult.EMPTY;let r;return this[K]?r=this[i.$content]?this[i.$content].replaceAll(A,`
`):void 0:r=this[i.$content]||void 0,e.HTMLResult.success({name:this[i.$nodeName],attributes:{href:this.href,style:n(this.style,this,this[K])},children:m,value:r})}}class f extends y{constructor(S){super(S,"a"),this.href=(0,P.fixURL)(S.href)||""}}class R extends y{constructor(S){super(S,"b")}[i.$pushGlyphs](S){S.pushFont({weight:"bold"}),super[i.$pushGlyphs](S),S.popFont()}}class E extends y{constructor(S){super(S,"body")}[i.$toHTML](S){const m=super[i.$toHTML](S),{html:r}=m;return r?(r.name="div",r.attributes.class=["xfaRich"],m):e.HTMLResult.EMPTY}}class M extends y{constructor(S){super(S,"br")}[i.$text](){return`
`}[i.$pushGlyphs](S){S.addString(`
`)}[i.$toHTML](S){return e.HTMLResult.success({name:"br"})}}class b extends y{constructor(S){super(S,"html")}[i.$toHTML](S){var r;const m=[];if(this[i.$extra]={children:m},this[i.$childrenToHTML]({}),m.length===0)return e.HTMLResult.success({name:"div",attributes:{class:["xfaRich"],style:{}},value:this[i.$content]||""});if(m.length===1){const p=m[0];if((r=p.attributes)!=null&&r.class.includes("xfaRich"))return e.HTMLResult.success(p)}return e.HTMLResult.success({name:"div",attributes:{class:["xfaRich"],style:{}},children:m})}}class V extends y{constructor(S){super(S,"i")}[i.$pushGlyphs](S){S.pushFont({posture:"italic"}),super[i.$pushGlyphs](S),S.popFont()}}class l extends y{constructor(S){super(S,"li")}}class x extends y{constructor(S){super(S,"ol")}}class H extends y{constructor(S){super(S,"p")}[i.$pushGlyphs](S){super[i.$pushGlyphs](S,!1),S.addString(`
`),S.addPara(),S.popFont()}[i.$text](){return this[i.$getParent]()[i.$getChildren]().at(-1)===this?super[i.$text]():super[i.$text]()+`
`}}class s extends y{constructor(S){super(S,"span")}}class h extends y{constructor(S){super(S,"sub")}}class F extends y{constructor(S){super(S,"sup")}}class N extends y{constructor(S){super(S,"ul")}}class U{static[w.$buildXFAObject](S,m){if(U.hasOwnProperty(S))return U[S](m)}static a(S){return new f(S)}static b(S){return new R(S)}static body(S){return new E(S)}static br(S){return new M(S)}static html(S){return new b(S)}static i(S){return new V(S)}static li(S){return new l(S)}static ol(S){return new x(S)}static p(S){return new H(S)}static span(S){return new s(S)}static sub(S){return new h(S)}static sup(S){return new F(S)}static ul(S){return new N(S)}}D.XhtmlNamespace=U},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.UnknownNamespace=void 0;var i=se(81),w=se(87);class P{constructor(t){this.namespaceId=t}[i.$buildXFAObject](t,o){return new w.XmlObject(this.namespaceId,t,o)}}D.UnknownNamespace=P},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.DatasetReader=void 0;var i=se(2),w=se(3),P=se(71);function e(K){try{return(0,i.stringToUTF8String)(K)}catch(j){return(0,i.warn)(`UTF-8 decoding failed: "${j}".`),K}}class t extends P.SimpleXMLParser{constructor(j){super(j),this.node=null}onEndElement(j){const C=super.onEndElement(j);if(C&&j==="xfa:datasets")throw this.node=C,new Error("Aborting DatasetXMLParser.")}}class o{constructor(j){if(j.datasets)this.node=new P.SimpleXMLParser({hasAttributes:!0}).parseFromString(j.datasets).documentElement;else{const C=new t({hasAttributes:!0});try{C.parseFromString(j["xdp:xdp"])}catch(O){}this.node=C.node}}getValue(j){if(!this.node||!j)return"";const C=this.node.searchNode((0,w.parseXFAPath)(j),0);if(!C)return"";const O=C.firstChild;return(O==null?void 0:O.nodeName)==="value"?C.children.map(d=>e(d.textContent)):e(C.textContent)}}D.DatasetReader=o},(Fe,D,se)=>{var j;Object.defineProperty(D,"__esModule",{value:!0}),D.XRef=void 0;var i=se(2),w=se(4),P=se(16),e=se(3),t=se(5),o=se(74);class K{constructor(O,d){De(this,j,null);this.stream=O,this.pdfManager=d,this.entries=[],this._xrefStms=new Set,this._cacheMap=new Map,this._pendingRefs=new w.RefSet,this._newPersistentRefNum=null,this._newTemporaryRefNum=null}getNewPersistentRef(O){this._newPersistentRefNum===null&&(this._newPersistentRefNum=this.entries.length||1);const d=this._newPersistentRefNum++;return this._cacheMap.set(d,O),w.Ref.get(d,0)}getNewTemporaryRef(){return this._newTemporaryRefNum===null&&(this._newTemporaryRefNum=this.entries.length||1),w.Ref.get(this._newTemporaryRefNum++,0)}resetNewTemporaryRef(){this._newTemporaryRefNum=null}setStartXRef(O){this.startXRefQueue=[O]}parse(O=!1){let d;O?((0,i.warn)("Indexing all PDF objects"),d=this.indexObjects()):d=this.readXRef(),d.assignXref(this),this.trailer=d;let A;try{A=d.get("Encrypt")}catch(I){if(I instanceof e.MissingDataException)throw I;(0,i.warn)(`XRef.parse - Invalid "Encrypt" reference: "${I}".`)}if(A instanceof w.Dict){const I=d.get("ID"),k=I!=null&&I.length?I[0]:"";A.suppressEncryption=!0,this.encrypt=new o.CipherTransformFactory(A,k,this.pdfManager.password)}let n;try{n=d.get("Root")}catch(I){if(I instanceof e.MissingDataException)throw I;(0,i.warn)(`XRef.parse - Invalid "Root" reference: "${I}".`)}if(n instanceof w.Dict)try{if(n.get("Pages")instanceof w.Dict){this.root=n;return}}catch(I){if(I instanceof e.MissingDataException)throw I;(0,i.warn)(`XRef.parse - Invalid "Pages" reference: "${I}".`)}throw O?new i.InvalidPDFException("Invalid Root reference."):new e.XRefParseException}processXRefTable(O){"tableState"in this||(this.tableState={entryNum:0,streamPos:O.lexer.stream.pos,parserBuf1:O.buf1,parserBuf2:O.buf2});const d=this.readXRefTable(O);if(!(0,w.isCmd)(d,"trailer"))throw new i.FormatError("Invalid XRef table: could not find trailer dictionary");let A=O.getObj();if(!(A instanceof w.Dict)&&A.dict&&(A=A.dict),!(A instanceof w.Dict))throw new i.FormatError("Invalid XRef table: could not parse trailer dictionary");return delete this.tableState,A}readXRefTable(O){const d=O.lexer.stream,A=this.tableState;d.pos=A.streamPos,O.buf1=A.parserBuf1,O.buf2=A.parserBuf2;let n;for(;;){if(!("firstEntryNum"in A)||!("entryCount"in A)){if((0,w.isCmd)(n=O.getObj(),"trailer"))break;A.firstEntryNum=n,A.entryCount=O.getObj()}let I=A.firstEntryNum;const k=A.entryCount;if(!Number.isInteger(I)||!Number.isInteger(k))throw new i.FormatError("Invalid XRef table: wrong types in subsection header");for(let y=A.entryNum;y<k;y++){A.streamPos=d.pos,A.entryNum=y,A.parserBuf1=O.buf1,A.parserBuf2=O.buf2;const f={};f.offset=O.getObj(),f.gen=O.getObj();const R=O.getObj();if(R instanceof w.Cmd)switch(R.cmd){case"f":f.free=!0;break;case"n":f.uncompressed=!0;break}if(!Number.isInteger(f.offset)||!Number.isInteger(f.gen)||!(f.free||f.uncompressed))throw new i.FormatError(`Invalid entry in XRef subsection: ${I}, ${k}`);y===0&&f.free&&I===1&&(I=0),this.entries[y+I]||(this.entries[y+I]=f)}A.entryNum=0,A.streamPos=d.pos,A.parserBuf1=O.buf1,A.parserBuf2=O.buf2,delete A.firstEntryNum,delete A.entryCount}if(this.entries[0]&&!this.entries[0].free)throw new i.FormatError("Invalid XRef table: unexpected first object");return n}processXRefStream(O){if(!("streamState"in this)){const d=O.dict,A=d.get("W");let n=d.get("Index");n||(n=[0,d.get("Size")]),this.streamState={entryRanges:n,byteWidths:A,entryNum:0,streamPos:O.pos}}return this.readXRefStream(O),delete this.streamState,O.dict}readXRefStream(O){const d=this.streamState;O.pos=d.streamPos;const[A,n,I]=d.byteWidths,k=d.entryRanges;for(;k.length>0;){const[y,f]=k;if(!Number.isInteger(y)||!Number.isInteger(f))throw new i.FormatError(`Invalid XRef range fields: ${y}, ${f}`);if(!Number.isInteger(A)||!Number.isInteger(n)||!Number.isInteger(I))throw new i.FormatError(`Invalid XRef entry fields length: ${y}, ${f}`);for(let R=d.entryNum;R<f;++R){d.entryNum=R,d.streamPos=O.pos;let E=0,M=0,b=0;for(let l=0;l<A;++l){const x=O.getByte();if(x===-1)throw new i.FormatError("Invalid XRef byteWidths 'type'.");E=E<<8|x}A===0&&(E=1);for(let l=0;l<n;++l){const x=O.getByte();if(x===-1)throw new i.FormatError("Invalid XRef byteWidths 'offset'.");M=M<<8|x}for(let l=0;l<I;++l){const x=O.getByte();if(x===-1)throw new i.FormatError("Invalid XRef byteWidths 'generation'.");b=b<<8|x}const V={};switch(V.offset=M,V.gen=b,E){case 0:V.free=!0;break;case 1:V.uncompressed=!0;break;case 2:break;default:throw new i.FormatError(`Invalid XRef entry type: ${E}`)}this.entries[y+R]||(this.entries[y+R]=V)}d.entryNum=0,d.streamPos=O.pos,k.splice(0,2)}}indexObjects(){function y(p,c){let u="",q=p[c];for(;q!==10&&q!==13&&q!==60&&!(++c>=p.length);)u+=String.fromCharCode(q),q=p[c];return u}function f(p,c,u){const q=u.length,J=p.length;let G=0;for(;c<J;){let W=0;for(;W<q&&p[c+W]===u[W];)++W;if(W>=q)break;c++,G++}return G}const R=/\b(endobj|\d+\s+\d+\s+obj|xref|trailer\s*<<)\b/g,E=/\b(startxref|\d+\s+\d+\s+obj)\b/g,M=/^(\d+)\s+(\d+)\s+obj\b/,b=new Uint8Array([116,114,97,105,108,101,114]),V=new Uint8Array([115,116,97,114,116,120,114,101,102]),l=new Uint8Array([47,88,82,101,102]);this.entries.length=0,this._cacheMap.clear();const x=this.stream;x.pos=0;const H=x.getBytes(),s=(0,i.bytesToString)(H),h=H.length;let F=x.start;const N=[],U=[];for(;F<h;){let p=H[F];if(p===9||p===10||p===13||p===32){++F;continue}if(p===37){do{if(++F,F>=h)break;p=H[F]}while(p!==10&&p!==13);continue}const c=y(H,F);let u;if(c.startsWith("xref")&&(c.length===4||/\s/.test(c[4])))F+=f(H,F,b),N.push(F),F+=f(H,F,V);else if(u=M.exec(c)){const q=u[1]|0,J=u[2]|0,G=F+c.length;let W,ce=!1;if(!this.entries[q])ce=!0;else if(this.entries[q].gen===J)try{new P.Parser({lexer:new P.Lexer(x.makeSubStream(G))}).getObj(),ce=!0}catch(oe){oe instanceof e.ParserEOFException?(0,i.warn)(`indexObjects -- checking object (${c}): "${oe}".`):ce=!0}ce&&(this.entries[q]={offset:F-x.start,gen:J,uncompressed:!0}),R.lastIndex=G;const _=R.exec(s);_?(W=R.lastIndex+1-F,_[1]!=="endobj"&&((0,i.warn)(`indexObjects: Found "${_[1]}" inside of another "obj", caused by missing "endobj" -- trying to recover.`),W-=_[1].length+1)):W=h-F;const ie=H.subarray(F,F+W),L=f(ie,0,l);L<W&&ie[L+5]<64&&(U.push(F-x.start),this._xrefStms.add(F-x.start)),F+=W}else if(c.startsWith("trailer")&&(c.length===7||/\s/.test(c[7]))){N.push(F);const q=F+c.length;let J;E.lastIndex=q;const G=E.exec(s);G?(J=E.lastIndex+1-F,G[1]!=="startxref"&&((0,i.warn)(`indexObjects: Found "${G[1]}" after "trailer", caused by missing "startxref" -- trying to recover.`),J-=G[1].length+1)):J=h-F,F+=J}else F+=c.length+1}for(const p of U)this.startXRefQueue.push(p),this.readXRef(!0);const g=[];let S=!1;for(const p of N){x.pos=p;const c=new P.Parser({lexer:new P.Lexer(x),xref:this,allowStreams:!0,recoveryMode:!0}),u=c.getObj();if(!(0,w.isCmd)(u,"trailer"))continue;const q=c.getObj();q instanceof w.Dict&&(g.push(q),q.has("Encrypt")&&(S=!0))}let m,r;for(const p of[...g,"genFallback",...g]){if(p==="genFallback"){if(!r)break;this._generationFallback=!0;continue}let c=!1;try{const u=p.get("Root");if(!(u instanceof w.Dict))continue;const q=u.get("Pages");if(!(q instanceof w.Dict))continue;const J=q.get("Count");Number.isInteger(J)&&(c=!0)}catch(u){r=u;continue}if(c&&(!S||p.has("Encrypt"))&&p.has("ID"))return p;m=p}if(m)return m;if(this.topDict)return this.topDict;throw new i.InvalidPDFException("Invalid PDF structure.")}readXRef(O=!1){var n;const d=this.stream,A=new Set;for(;this.startXRefQueue.length;){try{const I=this.startXRefQueue[0];if(A.has(I)){(0,i.warn)("readXRef - skipping XRef table since it was already parsed."),this.startXRefQueue.shift();continue}A.add(I),d.pos=I+d.start;const k=new P.Parser({lexer:new P.Lexer(d),xref:this,allowStreams:!0});let y=k.getObj(),f;if((0,w.isCmd)(y,"xref"))f=this.processXRefTable(k),this.topDict||(this.topDict=f),y=f.get("XRefStm"),Number.isInteger(y)&&!this._xrefStms.has(y)&&(this._xrefStms.add(y),this.startXRefQueue.push(y),(n=he(this,j))!=null||Ne(this,j,y));else if(Number.isInteger(y)){if(!Number.isInteger(k.getObj())||!(0,w.isCmd)(k.getObj(),"obj")||!((y=k.getObj())instanceof t.BaseStream))throw new i.FormatError("Invalid XRef stream");if(f=this.processXRefStream(y),this.topDict||(this.topDict=f),!f)throw new i.FormatError("Failed to read XRef stream")}else throw new i.FormatError("Invalid XRef stream header");y=f.get("Prev"),Number.isInteger(y)?this.startXRefQueue.push(y):y instanceof w.Ref&&this.startXRefQueue.push(y.num)}catch(I){if(I instanceof e.MissingDataException)throw I;(0,i.info)("(while reading XRef): "+I)}this.startXRefQueue.shift()}if(this.topDict)return this.topDict;if(!O)throw new e.XRefParseException}get lastXRefStreamPos(){var O;return(O=he(this,j))!=null?O:this._xrefStms.size>0?Math.max(...this._xrefStms):null}getEntry(O){const d=this.entries[O];return d&&!d.free&&d.offset?d:null}fetchIfRef(O,d=!1){return O instanceof w.Ref?this.fetch(O,d):O}fetch(O,d=!1){if(!(O instanceof w.Ref))throw new Error("ref object is not a reference");const A=O.num,n=this._cacheMap.get(A);if(n!==void 0)return n instanceof w.Dict&&!n.objId&&(n.objId=O.toString()),n;let I=this.getEntry(A);if(I===null)return this._cacheMap.set(A,I),I;if(this._pendingRefs.has(O))return this._pendingRefs.remove(O),(0,i.warn)(`Ignoring circular reference: ${O}.`),w.CIRCULAR_REF;this._pendingRefs.put(O);try{I=I.uncompressed?this.fetchUncompressed(O,I,d):this.fetchCompressed(O,I,d),this._pendingRefs.remove(O)}catch(k){throw this._pendingRefs.remove(O),k}return I instanceof w.Dict?I.objId=O.toString():I instanceof t.BaseStream&&(I.dict.objId=O.toString()),I}fetchUncompressed(O,d,A=!1){const n=O.gen;let I=O.num;if(d.gen!==n){const M=`Inconsistent generation in XRef: ${O}`;if(this._generationFallback&&d.gen<n)return(0,i.warn)(M),this.fetchUncompressed(w.Ref.get(I,d.gen),d,A);throw new e.XRefEntryException(M)}const k=this.stream.makeSubStream(d.offset+this.stream.start),y=new P.Parser({lexer:new P.Lexer(k),xref:this,allowStreams:!0}),f=y.getObj(),R=y.getObj(),E=y.getObj();if(f!==I||R!==n||!(E instanceof w.Cmd))throw new e.XRefEntryException(`Bad (uncompressed) XRef entry: ${O}`);if(E.cmd!=="obj"){if(E.cmd.startsWith("obj")&&(I=parseInt(E.cmd.substring(3),10),!Number.isNaN(I)))return I;throw new e.XRefEntryException(`Bad (uncompressed) XRef entry: ${O}`)}return d=this.encrypt&&!A?y.getObj(this.encrypt.createCipherTransform(I,n)):y.getObj(),d instanceof t.BaseStream||this._cacheMap.set(I,d),d}fetchCompressed(O,d,A=!1){const n=d.offset,I=this.fetch(w.Ref.get(n,0));if(!(I instanceof t.BaseStream))throw new i.FormatError("bad ObjStm stream");const k=I.dict.get("First"),y=I.dict.get("N");if(!Number.isInteger(k)||!Number.isInteger(y))throw new i.FormatError("invalid first and n parameters for ObjStm stream");let f=new P.Parser({lexer:new P.Lexer(I),xref:this,allowStreams:!0});const R=new Array(y),E=new Array(y);for(let V=0;V<y;++V){const l=f.getObj();if(!Number.isInteger(l))throw new i.FormatError(`invalid object number in the ObjStm stream: ${l}`);const x=f.getObj();if(!Number.isInteger(x))throw new i.FormatError(`invalid object offset in the ObjStm stream: ${x}`);R[V]=l,E[V]=x}const M=(I.start||0)+k,b=new Array(y);for(let V=0;V<y;++V){const l=V<y-1?E[V+1]-E[V]:void 0;if(l<0)throw new i.FormatError("Invalid offset in the ObjStm stream.");f=new P.Parser({lexer:new P.Lexer(I.makeSubStream(M+E[V],l,I.dict)),xref:this,allowStreams:!0});const x=f.getObj();if(b[V]=x,x instanceof t.BaseStream)continue;const H=R[V],s=this.entries[H];s&&s.offset===n&&s.gen===V&&this._cacheMap.set(H,x)}if(d=b[d.gen],d===void 0)throw new e.XRefEntryException(`Bad (compressed) XRef entry: ${O}`);return d}fetchIfRefAsync(O,d){return rt(this,null,function*(){return O instanceof w.Ref?this.fetchAsync(O,d):O})}fetchAsync(O,d){return rt(this,null,function*(){try{return this.fetch(O,d)}catch(A){if(!(A instanceof e.MissingDataException))throw A;return yield this.pdfManager.requestRange(A.begin,A.end),this.fetchAsync(O,d)}})}getCatalogObj(){return this.root}}j=new WeakMap,D.XRef=K},(Fe,D,se)=>{var o,ns,j,as,O,an;Object.defineProperty(D,"__esModule",{value:!0}),D.MessageHandler=void 0;var i=se(2);const w={UNKNOWN:0,DATA:1,ERROR:2},P={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function e(A){switch(A instanceof Error||typeof A=="object"&&A!==null||(0,i.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),A.name){case"AbortException":return new i.AbortException(A.message);case"MissingPDFException":return new i.MissingPDFException(A.message);case"PasswordException":return new i.PasswordException(A.message,A.code);case"UnexpectedResponseException":return new i.UnexpectedResponseException(A.message,A.status);case"UnknownErrorException":return new i.UnknownErrorException(A.message,A.details);default:return new i.UnknownErrorException(A.message,A.toString())}}class t{constructor(n,I,k){De(this,o);De(this,j);De(this,O);this.sourceName=n,this.targetName=I,this.comObj=k,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=y=>{const f=y.data;if(f.targetName!==this.sourceName)return;if(f.stream){Re(this,j,as).call(this,f);return}if(f.callback){const E=f.callbackId,M=this.callbackCapabilities[E];if(!M)throw new Error(`Cannot resolve callback ${E}`);if(delete this.callbackCapabilities[E],f.callback===w.DATA)M.resolve(f.data);else if(f.callback===w.ERROR)M.reject(e(f.reason));else throw new Error("Unexpected callback case");return}const R=this.actionHandler[f.action];if(!R)throw new Error(`Unknown action from worker: ${f.action}`);if(f.callbackId){const E=this.sourceName,M=f.sourceName;new Promise(function(b){b(R(f.data))}).then(function(b){k.postMessage({sourceName:E,targetName:M,callback:w.DATA,callbackId:f.callbackId,data:b})},function(b){k.postMessage({sourceName:E,targetName:M,callback:w.ERROR,callbackId:f.callbackId,reason:e(b)})});return}if(f.streamId){Re(this,o,ns).call(this,f);return}R(f.data)},k.addEventListener("message",this._onComObjOnMessage)}on(n,I){const k=this.actionHandler;if(k[n])throw new Error(`There is already an actionName called "${n}"`);k[n]=I}send(n,I,k){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:n,data:I},k)}sendWithPromise(n,I,k){const y=this.callbackId++,f=new i.PromiseCapability;this.callbackCapabilities[y]=f;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:n,callbackId:y,data:I},k)}catch(R){f.reject(R)}return f.promise}sendWithStream(n,I,k,y){const f=this.streamId++,R=this.sourceName,E=this.targetName,M=this.comObj;return new ReadableStream({start:b=>{const V=new i.PromiseCapability;return this.streamControllers[f]={controller:b,startCall:V,pullCall:null,cancelCall:null,isClosed:!1},M.postMessage({sourceName:R,targetName:E,action:n,streamId:f,data:I,desiredSize:b.desiredSize},y),V.promise},pull:b=>{const V=new i.PromiseCapability;return this.streamControllers[f].pullCall=V,M.postMessage({sourceName:R,targetName:E,stream:P.PULL,streamId:f,desiredSize:b.desiredSize}),V.promise},cancel:b=>{(0,i.assert)(b instanceof Error,"cancel must have a valid reason");const V=new i.PromiseCapability;return this.streamControllers[f].cancelCall=V,this.streamControllers[f].isClosed=!0,M.postMessage({sourceName:R,targetName:E,stream:P.CANCEL,streamId:f,reason:e(b)}),V.promise}},k)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}o=new WeakSet,ns=function(n){const I=n.streamId,k=this.sourceName,y=n.sourceName,f=this.comObj,R=this,E=this.actionHandler[n.action],M={enqueue(b,V=1,l){if(this.isCancelled)return;const x=this.desiredSize;this.desiredSize-=V,x>0&&this.desiredSize<=0&&(this.sinkCapability=new i.PromiseCapability,this.ready=this.sinkCapability.promise),f.postMessage({sourceName:k,targetName:y,stream:P.ENQUEUE,streamId:I,chunk:b},l)},close(){this.isCancelled||(this.isCancelled=!0,f.postMessage({sourceName:k,targetName:y,stream:P.CLOSE,streamId:I}),delete R.streamSinks[I])},error(b){(0,i.assert)(b instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,f.postMessage({sourceName:k,targetName:y,stream:P.ERROR,streamId:I,reason:e(b)}))},sinkCapability:new i.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:n.desiredSize,ready:null};M.sinkCapability.resolve(),M.ready=M.sinkCapability.promise,this.streamSinks[I]=M,new Promise(function(b){b(E(n.data,M))}).then(function(){f.postMessage({sourceName:k,targetName:y,stream:P.START_COMPLETE,streamId:I,success:!0})},function(b){f.postMessage({sourceName:k,targetName:y,stream:P.START_COMPLETE,streamId:I,reason:e(b)})})},j=new WeakSet,as=function(n){const I=n.streamId,k=this.sourceName,y=n.sourceName,f=this.comObj,R=this.streamControllers[I],E=this.streamSinks[I];switch(n.stream){case P.START_COMPLETE:n.success?R.startCall.resolve():R.startCall.reject(e(n.reason));break;case P.PULL_COMPLETE:n.success?R.pullCall.resolve():R.pullCall.reject(e(n.reason));break;case P.PULL:if(!E){f.postMessage({sourceName:k,targetName:y,stream:P.PULL_COMPLETE,streamId:I,success:!0});break}E.desiredSize<=0&&n.desiredSize>0&&E.sinkCapability.resolve(),E.desiredSize=n.desiredSize,new Promise(function(M){var b;M((b=E.onPull)==null?void 0:b.call(E))}).then(function(){f.postMessage({sourceName:k,targetName:y,stream:P.PULL_COMPLETE,streamId:I,success:!0})},function(M){f.postMessage({sourceName:k,targetName:y,stream:P.PULL_COMPLETE,streamId:I,reason:e(M)})});break;case P.ENQUEUE:if((0,i.assert)(R,"enqueue should have stream controller"),R.isClosed)break;R.controller.enqueue(n.chunk);break;case P.CLOSE:if((0,i.assert)(R,"close should have stream controller"),R.isClosed)break;R.isClosed=!0,R.controller.close(),Re(this,O,an).call(this,R,I);break;case P.ERROR:(0,i.assert)(R,"error should have stream controller"),R.controller.error(e(n.reason)),Re(this,O,an).call(this,R,I);break;case P.CANCEL_COMPLETE:n.success?R.cancelCall.resolve():R.cancelCall.reject(e(n.reason)),Re(this,O,an).call(this,R,I);break;case P.CANCEL:if(!E)break;new Promise(function(M){var b;M((b=E.onCancel)==null?void 0:b.call(E,e(n.reason)))}).then(function(){f.postMessage({sourceName:k,targetName:y,stream:P.CANCEL_COMPLETE,streamId:I,success:!0})},function(M){f.postMessage({sourceName:k,targetName:y,stream:P.CANCEL_COMPLETE,streamId:I,reason:e(M)})}),E.sinkCapability.reject(e(n.reason)),E.isCancelled=!0,delete this.streamSinks[I];break;default:throw new Error("Unexpected stream case")}},O=new WeakSet,an=function(n,I){return rt(this,null,function*(){var k,y,f;yield Promise.allSettled([(k=n.startCall)==null?void 0:k.promise,(y=n.pullCall)==null?void 0:y.promise,(f=n.cancelCall)==null?void 0:f.promise]),delete this.streamControllers[I]})},D.MessageHandler=t},(Fe,D,se)=>{Object.defineProperty(D,"__esModule",{value:!0}),D.PDFWorkerStream=void 0;var i=se(2);class w{constructor(o){this._msgHandler=o,this._contentLength=null,this._fullRequestReader=null,this._rangeRequestReaders=[]}getFullReader(){return(0,i.assert)(!this._fullRequestReader,"PDFWorkerStream.getFullReader can only be called once."),this._fullRequestReader=new P(this._msgHandler),this._fullRequestReader}getRangeReader(o,K){const j=new e(o,K,this._msgHandler);return this._rangeRequestReaders.push(j),j}cancelAllRequests(o){var K;(K=this._fullRequestReader)==null||K.cancel(o);for(const j of this._rangeRequestReaders.slice(0))j.cancel(o)}}D.PDFWorkerStream=w;class P{constructor(o){this._msgHandler=o,this.onProgress=null,this._contentLength=null,this._isRangeSupported=!1,this._isStreamingSupported=!1;const K=this._msgHandler.sendWithStream("GetReader");this._reader=K.getReader(),this._headersReady=this._msgHandler.sendWithPromise("ReaderHeadersReady").then(j=>{this._isStreamingSupported=j.isStreamingSupported,this._isRangeSupported=j.isRangeSupported,this._contentLength=j.contentLength})}get headersReady(){return this._headersReady}get contentLength(){return this._contentLength}get isStreamingSupported(){return this._isStreamingSupported}get isRangeSupported(){return this._isRangeSupported}read(){return rt(this,null,function*(){const{value:o,done:K}=yield this._reader.read();return K?{value:void 0,done:!0}:{value:o.buffer,done:!1}})}cancel(o){this._reader.cancel(o)}}class e{constructor(o,K,j){this._msgHandler=j,this.onProgress=null;const C=this._msgHandler.sendWithStream("GetRangeReader",{begin:o,end:K});this._reader=C.getReader()}get isStreamingSupported(){return!1}read(){return rt(this,null,function*(){const{value:o,done:K}=yield this._reader.read();return K?{value:void 0,done:!0}:{value:o.buffer,done:!1}})}cancel(o){this._reader.cancel(o)}}}],ye={};function Ue(Fe){var D=ye[Fe];if(D!==void 0)return D.exports;var se=ye[Fe]={exports:{}};return Qe[Fe](se,se.exports,Ue),se.exports}var Xe={};return(()=>{var Fe=Xe;Object.defineProperty(Fe,"__esModule",{value:!0}),Object.defineProperty(Fe,"WorkerMessageHandler",{enumerable:!0,get:function(){return D.WorkerMessageHandler}});var D=Ue(1)})(),Xe})())})(pdf_worker);const PdfRenderer=({pdfData:it})=>{const qe=reactExports.useRef(null),Qe=reactExports.useRef(!0);return reactExports.useEffect(()=>(Qe.current=!0,rt(void 0,null,function*(){const Ue=qe.current;if(Ue){const Fe=yield(yield pdfExports.getDocument({data:atob(it)}).promise).getPage(1),D=Fe.getViewport({scale:1}),se=Ue.getContext("2d");if(se){se.clearRect(0,0,Ue.width,Ue.height),Ue.width=D.width,Ue.height=D.height;const i={canvasContext:se,viewport:D};yield Fe.render(i).promise}}else console.error("Canvas not found.")}),()=>{Qe.current=!1}),[it]),jsxRuntimeExports.jsx("canvas",{ref:qe,width:297,height:420})},datapdfDemo=[{page:1,data:""},{page:2,data:""},{page:3,data:"JVBERi0xLjcKJYGBgYEKCjQgMCBvYmoKPDwKL0xlbmd0aCAyMDIxCi9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nJVZ264bNwx891f4CxRRpG5AUMD2roE+Fjh/0KAFChRF+/8PHVLSelfeBCc5SM7aqwtFDodD5f5xicmlGuo15+Ao4uHj2+XLU64UnMef68cfl68h/XL9+OuSnefgr76/+Hb5yiTBXpHXVaZ3/ODKqxRPeA78lCiCZ8anhWOfWYNLoUwzMUpnCkfOfRxXl2QehxGVn7xS8kQZq5Lc9LMvNmf9uNx3J4zRcT/hV1ow7skZNkazb2XYRk8qgd/sfegzt+cnL+L1jVrI2d/OdmK/8yUdfOmf+IntSNHl5A9H8moE0UL47R9U6Y6/bKNTcGVyMa20YNxq70Nykqf3hPl3arsFGBGOu4UcHjvzAyVH3s/2T1hoM/QrTsdwwJGSNbD21DAj7CJNwMAIqWduI3Y4TguQeA0NAqpwUSg8pGJVFp3tsUfFGwsK3j29Biw22DT7BGeZDJSESdImcRghiHEaVRVL2MI3bOjyJ8ammlzYjBUuWLdK8NQdpHitk4OeMPuhuwfNDNHV6cYtPKk6LjLZa2+iq2UCfjRIevMk4EqWBJya7/HEB19MhufqZBgeinoXBnmst83Sz6LrRK/JC0Phd9+c5zVVnpYYmNt8rdD0s+09P5BL3ZfVPH+WLwkLpGES6eJRLAsVRsojMEYD3HKV2Yxuh+zBb1AJavrIZWUDvjcDa3HV+ze06gklnxkk0ZVhkCX9qmOZB+HAvNsW6uKdOuq4eg9dnjH4bOlhp2K1Xd0usvEJGeQ7Ouzb5UcoDPWVMjqSG2c9GyIVj+LtU7QkqrqvfQdv4fPaIXQaFc+bE95YTMBLC8EwXygS8HJgEnx2Mfh5jZ9hkg1dgRyl8tnEaHDl7kHDQYdrRwqZrxXccnLmWPCQyj6rLb2qJQOIueEM68Qt9OUILCnq8S2RGs+IB1kcadDfKCuIbJeqeO+kCMoMM3PEV6UFzdPxrSapYcZy4uxUIJcyTqU0oZ5BPmku3WFpAiZR13rOdAL13kmSN2oE//LgnX2ZHM4STc/naVbFCH7fnLtVCmxapRVsyS7OEkODWHZprfs1WD/su3UQukK/UUY7AMNTs7Iww1sK61KczszExDDMRLG++YdG0yLExmMZTN0LkqHs0aFaCUQwoaF+n8PPyRDZtHnpLe1iL+ZAQQjH4ISG5/RWdpCfdyiFJz3wtITwUhj4noCCBc4tkxJQ/nsz5pi/W+nC4J/I0F66lsZIJw6Qyq6G1NFaG9DEgDYg0LKRF6NiAK+FX/PoCBKruBov/R7Md7Zbzo7GbogvWyUXiVZtXiSf2MkbyW88QPIGXOMBKxmv5DigJVs2vCdY4yljMSvnViFOFa0k73izPVuBLqOstTWG7TPFflpb9FRRgtAgHDHLIOfEuRy6h6+h9tPipNLkSGnZpnpHxZ+lLuIzskttx3cPO/1WtZNx8bvGbJnf1AodIMQoN82evdbfeLyhRWlnffUOrSJSMQ5Un7F6vI17iatmUREXfkKkrWOPUxO5QHuGAXP1srYwY2tWRyxbGdFi7q1wLcZ0vRiIuDJx3J4slWR79sRTGxC/vLkpW7rcNyFSesQHJHMTFypbjAY10X5QTFQxGpbOI+TF1W3rfVFRzCfuOqkr6/UIu7GIatn8vUYrgNgW2AWa6zIFgiX4VrexgByZuo+7YVwMweTNsT0SpB3yc951JsUXvkeHwXOETN1S7phyNLd1sPr0tHuZ/EqZ3vkUy1wZGbspePILUScG0vjhs4dye+DnZpg7hedRAo9Woipkz5qqLZ32ydwtEyVxqC6l4mCt875voz4WmmHI0VN79kpXcd2n1a75xTqF1hW8WBtNmkz6rDvLKG4YYa1k3BRYTi7PygEVZaDRkBlOjfyRZAaoYFeLegD4p9sMWvXmoTf7+n6q71q0MZ8Un8pKVsgLCjhWxT9R8a2l3b6N8H3Yrg4mKw8iFws+sZLBXeWqLblfOmOrlsH4wpXZats1sA0lkxSrTW94yeCXSfdSOrUJEjWOUjZuPFycBKheeISC5R9qJIxe25lhKbzX9sVv79uhVuUv9URYtdY0z/qklWE6xKlJMWhL3k3CKczvSz8ZZ1VIRwWG96FftkQHtp7j6+k2HK1NE1wLQ+ge8k6SFdvplDIBURdkFNnQ607wM476ZZ3E2bweRUdzSGxLg6fG3zhDy/JeH+rRFHT65AeNauefZh2adRqd5kdUtvPj7uEW1lDDYisXu+uyC5EW++KE33RshIodDnwgvF3Rwka1Fm9ON0UnU+PQ80nxYXI47o+04aY7yWP/KYAhYTCN0qCp2CKA1Sey6EmOcjEjZPSDCILMQYj0CBsV/6sU4HfNRP8VWPV9gCehOEvIV4nF5STp+vvfly+/8nX55/IbZkshV0ot03QVbD5Wug4JSfBSldqnS5u+v5PTm5OYTvv3/YUEjW1QpDJ+hZDj9b8/L1CoYVrnvUa2Jfz1z0uF22H2YbjpEBUGTZmMxsvqhlWNUU16G93kr7Vq7WKl9Yu7W0KT1bK1EU17KRaVQu6IsmqqV8fJm4TjpO77tJK2K5ZdrQOCbnTWhCCNaBx36PhPOLcEdLj+OD0kq7PzVYA6l1rXeBx/EFbf24gUNmWaiUJNo/mp801BUg2pwm22IWPVPB25aRdrl6T7fXgcrUvJ8wWt3Rjc+g1e+88EHnHc7iG86VC2u0v2N/bDkv8B5cImSgplbmRzdHJlYW0KZW5kb2JqCgo4IDAgb2JqCjw8Ci9MZW5ndGggNjM5MQovRmlsdGVyIC9GbGF0ZURlY29kZQovTGVuZ3RoMSAxMDg0NAo+PgpzdHJlYW0KeJzlWntwW9WZP+dcPf2ILcmyHct2rnwt+SHJli1LluNHriXZwXYSnLdEcCzHdhxCAoFASEsISSk0uIEW+oDuZJc3S4HSK4eQtA1tp0+mhZ122pluty+mnVK628duH9sUJtL+zrmSY4fAbnf2v7VGut855zvf+d7fd2QRSggpIceIlDs5vX/qgJwrasLMq4RQ+/ShW+SJdfRGwK9j7se7D8ztPzRz/Cgh7DwhpZVz+963+4evPvJDQsq+T0jl9/fMTs2UHH/aQYj3GeBH9mDC/HnDRoz5/sY9+285fPCU8aeENBkw/tq+G6en7rvwsdcwfgXjmf1Thw/Qj5f+gZBmP8byDVP7Z53f6CjFeB146Dpw48FbcudIJyEtx/j6gZtnD5w6/oNJjB/FGDwRSrg8XCJCTXzMJIPRZLZYi4pLSleUldvsjgpnZVX1yhpXbV39KtndoDR6vE3NLa0+f6CN/D//0/B6gDzA4oQYPpUtZxtyf+LPS/N8Jb8W56v59dN43U/uZy/DM95gdYTkBgTOK7k/SpVMyb2V616KR3typ5bi0f7cg8BrzF3QxwU8yUL3LMWTiujUUnoa8csa2ZocSsny2DmyYuOYZtp8TVLrcmnNqfRueX5rUmOeqc9ZiIVMTyu7XG63RlIaiSuJBfhJPB0LaNSvyendAY355RlZ+/K4ZvBes9BMi+JD00OaaSjp1iRPatOOpFtxu+aTsjY+jik15ZK1KIeiqZSc0bGnZrRmTOVHshbk60GO+eXxpAxu5qdkrWg8mcaMzNeKOBThUCTtSqdSKZdGfamUopHx5GwqFdAkvww6Bs8UODPGx5OaUYlpJiUGOVIaTQc0g18BX/JMxrgrJvMVzrFL54B/asb00LQmtbqxGJfn5XkckAkaPRByYzI97pralEoqKXdK1tTNSay5uGj58wOa0a+Z474FwnRNmTBUYgo0rsSmNLZrt0anwYVmbA1oZr/MWS2OT58zkF0yp6Cp6RRHSScEqxb/grmYxIdire5F3Vv9y21RpFOhPrAQh9xpeWhemeJ2EfoiLq5TTXaByQKXsI4yldCPKH6X7VojdhHXJdGWbirxC4EWioskGNuluFOt7oBW6s8wNqTNTCUC2go/EGVZK4mP8u0AlFhKK+WjTRiVYhTQykCmXKhEhgamca62Ip6W59OytgJKC2jl/rEtyYxhJpFq1EpnlcMBzeYf25gc26xPutyYd4h5uz9DyuJbk5mysrhGp2JamY/7LDw5linhH6X40GglLCF5xpMZrjxIG5uHffmxrW4F2wqwS1/nWxAKfCYFSdaC/7WYXW6qdzFghhCHAm3FNTKwQCkVtnL4SYawoS1JrUyJyUNaMZyvSIHDxeQ0jj9js1GygsRi8+mM3eTT7vW5GqCmCsjm8AU0pz9D+bMSeubPKn9G4s9qf8bAnyv9GSN/1vgzJv50+TNm/qz1Zyz8WefPWPmzxa8U9K6Z0tCwIrdpdIIHSEBrXbJYubh4k77oW7LoXVy8WV+s9xOt1Pe/kG8V5KsHXzLk40835OPPBsjHnwrk489GyMefHsjHn17Ix59NkI8/myEff/r9cp9w04Afx9rSchy2TceFKRF6fu6rbX4t4NMCiMJ2BMBa+V2sqExFFZ4R3xPDxaUPLpqWVmrtrRkjdQ4lkci4gB1LNfPO5U6/HBb8hoBHh955CKLziofzeVL5oqhCiQElmumkTi5cFxQAjq/MMKJiKhrQwv62qr6AFvnvUOHB00Dvhk1IpUduk9fyyIcuR+bn1yprkSqSKBHIrEgHEUqdFVBpFCmqUisHmgFZ0yPQNGvcNzvfpshy3zzo9SxHkdt0WpoBM8CUtTRPGurG5GkmS7LrNPNKNakYT6QW5GRFYCvDCOH45fGY5slMrxssnp5RNCk+NYNlFp9yAU7zRHb5nimwhfSuDMOYCk4Yhnx4iFNA7wqHKHrKNCBLwAhGeJbxHVRBkUvkEUzgc1xPlZfOgu1XF/QgY9bozetB6YOKeheXNItYH1bW8kO59foW1ceFyWuYbEm2yX0ouZz7/KTM+SqYwOTBaGRpddeNdyW3zltK4b7dv4STeMFUad4CXC5ywbwDSBRtXIvDWnk8Oe5CyZT7Um2ZNlqBAF2zbHWTa3zZqnrFve+1Y9CvRX3vdWDMr/X45sEb9y8I9a6oMGib1oYdcSEy982CTbhbKgiWNsSZTjWBvIMSUkD8G5x47f+V33IpeIrqU5CFlniIO5XncQi5Neor6GEYox6fW8lrIi/JotBrIbRTD3C0F4hlR5vWhXi+6l3mR0COVji0MOBRv9aNxxjX2xAULA+jlhY0tc7PXVgbA7jev4BkBWADAMqBq/0LVMyMAxAzGznOEIBNHIcDmzkOB7ZwHA5s9Z9G1hsEtA0QFdB2/2mqzyUB6XMpjkc5dA3HE9AOjiegazmegCb4mXEAO/mZHJjkZ3Igzc/kwBTHGQawi+NwYJrjcGCG43BgVvAVA7Rb8MWhOcEXh/YIvjh0neCLQ3sFXxy6XvDFoX2CLw7th45XLxrwBjHSBgDeqINrAB7gShcjFaObUEbzODfrIMc5KHBoHucWbO5dpHqrGIkdh3SQ77hNBzn6YdDJI7xPBznC+3WQI9wO3L5FekfESKDfoYMc/agOcvQ7sTOPcEwHOcJxHeQIHwBu/yK9u8RIoH9QBzn63TrI0e/BzjzCh3SQI5zQQY5wr/+01cAKzWrMp1lmNalx/HChDgdgM0aa8aHgli4RM7GcMRkoYUFfyOa2edw2dzN9O7uV7sg+xc5fTAyzIGG5twmRinB/M5Mi4ldbiqiB0VGCWzo1kN2EsciYUWKUdlNcxK0WoJltNpvJWuVzN7nNCg1RGmpia4PZ73acp4Hz1Jt1fiV95Ah7+WKcWt4CFwnw8zzol5OVpIHEVdVEDRIdNVOJGIySYRZH0AkTHCUyZqFGI5mAFN1kXU2NzUZITUONW663rbRVVzlBocxvtTp9pLLSWWEyi0+TAqnskXCX16w4Q4sAff1WdTAaXx97/6bs03R9rd/vPXkyGI0GT55kL/vGI92bykrTid5UO3s5+2uPW1boieybzY3uJvox/k1CVe6P7Fn2CqkjbaqvlhKprpSh6aOMSqNgT5okkjQwBodnk2B/DVvn9XjdBmu1j3iVBpPJWVFZGeqMdFeBvQavN9wViYQ6K6vMrG5nW3h7Z+f2sG+n5/qev1+/55n0ruf2bng4vJe+FQpP9PRMhP3eg31r00/P7X5y52D0GOzJ9fcr6K+IOLl9hLoMQl1GKkkFdRUXE1LsLK5w2IBo9ZoW1ZRXEFeMV1Fs0Mynd05+5kD2h7Rt9aa2jm3dB2Gr5CNzc48mYbMfdF7b23dtKLuPa4GffBtOLiYtqhecSHC+WQgtzoyMEYPBOEGMxm7jOhv/KzdZa3wOt5O/jPwzwVqy99MN2QV65OJr7OUH73qAfvDBPN1x0LUSRZWvSLfbIEiWG60rQdGs01QSrIRmn6ers984C2qnHryYt9TnYal6slrtLqcSQ3Mu1cN14bIGA4wlGeBnR2EvYaoBTp1O4rA1lBtNEUfQkO0yS3mX2LGbVfxD9ImRvc/tms3s33Aqssc7HYxe09V1bTScoLuzv24JTcJcT+3sCR5rbI3sXN07GWnIS9kIKY1kpVqpCwZ/2QkmuhmkK5cQQg7EJfR0lrZkZWj/Z6f0fdIc9pWQZtVTZGawMeJR4npiR6EkEDJQQcRut9l1FYUcoKRIkiLZlMQ3v/2tbz5OTx968Qk49276dwjE89l5eiibyHP1mtB9vepCNkGqHpUEUSiMB7nNbivnngydKNTGHYYpzz6a/cpzj9E1IqifyE6A7jWgVZ77M9vPvk18PEpaoXefkzFSASmXRQkcNq/wgCdwKUq4cqvqmXDRBm9TtwgZ7qVNbWzRDvT3d/oamho6O0YmE6PHr97+mTVrww9EW9qVcPCqnfGhO7es+3h0iBW3rqyuWuUoc7ZuHx6e7uwPf6S9r76uWnaUVrRsHhrcFfY1cr+LwldehOwO4lKrJRFCPGPmQ7ii0SGYiwg+bCFbRd4nAP5+Q1/vyNn1H0mnH7j67M/Gr47TU9mZHfeOjt67g0OE5rIg9FPQNnHajDKoVbdV3t52YW+JG4oq7Ouf1c5nf/dF6NFI374Y1/cbdgiru9X6EisyJCgYJLbEMnZuGt1dJWFrTswhPXL+t+fv/tD533x9fv70SWGhn2QVUIbDgCjl+Z1lQNnCo81sQNqlMDmMoouP3IFPdNJ2u8Fa6aOSUwlTUGaZi2ez2bNPPw5Syus/oj/Pfo8GeH2pyV1gHtaIbK6Q21V7JZUMTli8lpqMRkpMhtExrX48KQLbaGLGWTiBYdKMYBxEfjeZyCTXC051qY1XQOEcCTzhMzG6LqU6a2pQCJSahlV1OLRaaWxwWLkTVVbZlDA3EbylOwTPgVOZm+A4LNIdVhrgXyH6zBH62cj+bdPXz9wX7mzY6uuIvW/Q1GfZO9bUwBrnJrKP9g9NrFu/jZqaWiudh+vrsuubVrVHa93gbCT3Fvske4PYUAWeG+Nf8KlFZShdRZQY2airMKAYpMa0cizXwdZRnmCkSRNS8+CYmdczIW8M8uo0FCDl594dVXUvWRIZH8roziMRgZNKqRV2OyH2OnttdSW4LLc5vBb4WCHtI6acCF9bRK+KesSF6C9vXtN/02hoc93CQu+MZXCwK6SqIaYM3bl505FEk2eYvZH9j3XZudG+vrGxvr5RXgeqoYlGpkD5iPNqxPlKK/JG0bJqOLhYDWOoho2Nsojz/KGd76iE9PZEsK8vOCrfJR/btvno0PCdmzceVY7Tj46s7r2qf2wgkTiyafOdQ/F+SI/z/8p2wxJ2ZPmH1SIbOhRJGCGvdq4moXdx/lJddgu1N3C1c6T85LuiCrXnV0yLxVUgLboj1O5wEOKod9StrAJLdq9i42qn3BmXCWljS/TOdi/UbgyN3bxm4MBo1+Y6VVW7uqB89sbFmmFv07DQfrOHll98ZKyvfxSaHyNC8rdYApqvguSq2l8MRkugdobuyQjLGMnsUj+5ZIDqakKq66vra2uwtdLTUKE7hrPC7H5nZ1KlRw596X6aPVGqtimDronW28a2f2Bo+NiW2e5Aa4+VKadOOIvbOmpdE+0duml+2d4TDXLvcOHjKfY7dCcTapEdWcCBLFCwjQvtJzIt0uGsGUFtnES/EM3nRJe6khgxixwwdwlNX0upZVC9k1QovA9wWNBZEJPTGYJH4xVGtEPFKNMK7W44fDgzMnLwmt6equYKlq6vVQ5lD9L7DnVum3Z+aIWuxW42Ci3Wk1byST0K7XXUKJVTZrLiVAtyrQERzScNyydTOrqMjISOwsTmwL80aYYD6goX0RgXyWwRhSeynjGBSC5DQzJbtYqQVa2rWjycn3pvo6eRJzNqW14Gw8s8KbzMk0ZH796eOBoc8Gzz9w1HZuLX9fbsiXVudPX19XV09Pd3sLqsY+ymfq98+8raaHD12sHb1q+7RfUosexdw9Ge4bXR6DC32whUcxBR5SDjZ8rRLNG8yaqIiCbMTBpFSmaF6KhaMkl4dORXUmopxHMQu82hOEwiNTthJnCMFsomchCSsuX6hQ5fR8/CQt2OXtZ4YDL7HG1oC9N4JPtn5JyftQdzOdIPOn+VKnFPaOeJhQQptJXn9RB4LSbjqhU9kejv8vzawZVwqZ4xUS8FqytFO6mPl6+l1BKQLCbF4NYobjFmkSa7Q2YHffLm7oWFz3zrG996tedjYOrY2e9mX8yfT97G+RJp1g9Ft02EklCXXWKkp2gkiBdt5QyFlDdkIwsLPMDzvbT0z6iaDWTbS6tWMmrk7PPEVMkbEeOkxWySjEawyQoi1BA+5qsmrDKTaXBxMaWW48QG4la4xhWUQ9flOr+kfKfuQ/iUbti7EGxp7+Yf0UymNtUb21lRMxW7zBqXzFKXau9Qe/r6833jfvDvIBvVIriLVIz4YHkZHBBdmjTyqOhZ6i58+E5Hei93MRc4Zuz6TGerv8d4ub9E27I/Z3XJ9mAhP84hssuQhXA34hciOskvR6JqFkplObRV7iqvqawA4opld6NCkJn0OiXCjD50z+joPcnkPSMj9yS7kKjDKhK1MnTHps13DA3dsXnTHUMfHUWSHu1HeeR9wgD6BEX0CftEV8CK8tWpWTQFvKSY0HDBCS8VcK6XXipKDl94RyewBOd/UOh1rf1NhT57gf1seGmhFzamT8LGpWSHbtfiUkSRhfeKvOHhIyk/SukINpHb+P1hcDGpOwtmF0IU5lMv2RwNNtEUREJOUXAE09Se6rHa12wwLSzQP3Q+QXtD2d+wOv12cYH+mnmIl3cdHtQHrx0mtS27XQwu3i5Qmn0e39KuQ79bLLta6DcLvQFJxKtq/cHV66N37h462hFtmw3UrAoEe0a7j+zqPRjqo5+22eyVpTZ3PLJposl7UFZs5RV8HAtvmpBX3cJj2g4On2SfQpkKqK1OaqL8nsaku3A9MyJqGYoZ+t207oQNopA1mBGqHmG0cJjXsRCvac4KtEj0yfoNzePTY2OZkyfb65prbY5rN7556JOfPPRqj52f1oW+ewurQ8ux7ozEy2Uh+BB3woWQkdOLnUxVYVYkQIRFutBO8+BD26LAHCZRedC3mBvENQduE8HVh21Z6D6UvG6hvbk9wuou/iK5k920k27L/qStC3mBFhduFWvBzWX3nZ4r3HckxXj2ppsXvn0WhekEPXzxF/n90hnsF/edIqN+y+V0QAJ3FKlb4vcd/XqrX3Qc+q3HeGbf3mev3/fCN7S5PRooPkhv4O+Lv+BfNHA9SfxKB8rFRFbrii1GZrjEnFS4ONvFHdcRquoOSQ6lyaw4yl7dvvOrz519LX39186xuocfzl7I/ttTT1EneP1TLsLGheab1MayEpPE7cuzHyenu3par+92h0fcIQ2X/K67W1cCHdmzPrDBM+pocPidpa+fPX4w8+bxEVfd7eUrWlay8uyjNH3xBYIaiH6K3S1qIP/WQCHt9KReC9lz4vu9FuS8h9hXIV8VuWGM/6wAxl5MfANLEx9635Lly5Fly++6EV2uvQR1sqSqpNJejqOKGvWsqUcUD6JlGfM/H3vsEw899thDsdWrY2pvr8q+eu755z/3ueefP3di7tZDc3tuvXUOlrHCg1fjJlpLetVoDe6NLidj/ArFrKLZImjrJUb5lzWGCWTEyGIWAUs2e6PHw72BVL7jKwNFCXe7w26nuYp+b2742Lb1nwgl/DOdqwcGeg89nv0T/dcveegDs1fH96xubzru8QZaW/0zp07u/ayZe2IOSh0AVytISA2aKUEjZDYx8c0I/wJUkiK8lyuUdzCzgqxAbkA0866UInqVsDsMC/NgZgPXPJP96jdf+MJdz9CGDz/00BH6bHb2E5/gdvXkLpDv0H8iTaQNx7bA1fmPjqwZQs/RFi3k475bkbuHfIc8iajwqA3ghfKYgOfS7fw7AH4doWQ94b9xKnZKMEiEt/RmpVtY5JGOqvGtXQ1Bz5OB5nrv3XdX+z1B4ItzyVMw4kq1UpDJa1S0QUWNBToFwz4aDHo9wXbvU0Gvt6PD6w3qlYGgHYAXOkTr0ZNvfS61OolMhqcK6LOeJXP/Av8tJk0Z00xCrV0qwSSX4OolJ2dMJMGWnL4jHG5pwVuqDLe2RCItrWEiftdlIoPzr61onSzr+zNM8ib/Z/H3XxLdIfn+l6ZWXPxLts94wXA3cM2IEf0P+6RXcrgomRwX/5IzGy/kfyF26a+DjZFm8lPgGXNvs1fByoukimXxfALvSbx/hXGIJKTn8LZjfA8pZ78lUfbjXNaQymXZ89iXIjXsBTLCOkk1+yzeO0g1YtbFTgD+RzJCe0g/ex+eCTJiKAWNx/E+ijXsoS8ANpJyeobY2cOki63JvS19BjSnUUmuyv2JfR10vkRaQNPKJuFFfyYe8kdSwZ+gC7vk6iFHNV5XkcfJm9RDN9Lb6Nfo66yMhdl97AvsR6jZQelJQ4vhOsMbxqjxXlOFaadpr+lZ07fNPvMh8zlLnWXGcsbyG2vIutl6zPpp6+vWfy9aX/Rw0atFPy22FLcWq8V7heY6yDgxkI1Cw16UmQ9j7vHSSsxxjZvJNfAParByPxYZi8OMWDDSYYl0IfZ12IDbz3geNpIackMeNmH+RB5eAfyn4e83YvUWchCX3ZvxmgIcw9w+MkMiiKEgXh2kl2yFRw8SGdCVdgQW91xpVV5c3SZmD5LrBJa85IT3proHo1vIAbIaN5d24EwD4zqMOX6boLcPzxsxO4f1q8kwuJV0J8yd4b9rvMLf2DnyyqZkhtL7UxrV/9l9IEPMsZeu2zoYgNZa+UAtudZylaXL0miqNhgt+andpk2mAZPfUM/EVEnsi1WqXS1VrapJxUYr5myxLxJ18SXmJJLINNITG5OaeiKZkWYSGS8ffd5yDOZQT0xvSXKUFP7Ukp2WUUvE4jXVGIwlredo7m7NcF+GkcRp4wwiOvFffRsIVAplbmRzdHJlYW0KZW5kb2JqCgoxMCAwIG9iago8PAovTGVuZ3RoIDQyNQovRmlsdGVyIC9GbGF0ZURlY29kZQo+PgpzdHJlYW0KeJxdk8Fq4zAURff+Ci3bRbElJ1ILwVBaCll0ZpjMfIAtPaeGRjaKs8jfV1c3dGAWjo+Q3tO54bl+2b/u47Sq+lea/UFWNU4xJDnPl+RFDXKcYqWNCpNfb6vy60/9UtW5+HA9r3Lax3GudjtV/86b5zVd1d1zmAe5r+qfKUia4lHd/X055PXhsiyfcpK4qqbqOhVkzI3e++VHfxJVl7KHfcj703p9yDX/Tvy5LqJMWWvK+DnIeem9pD4epdo1Tad2b29dJTH8t7exLBlG/9GnfFTno01jmi6zKbzR4JZswBtyC96SN2BL3oId2YIfyQ78RPbgnhzAA1nAvvC29A/k0lPIpedIRk/dkJ/A9Ldw1vS3cNb0t+ip6W/hrOlv0V/T36K/pr8t/elvH8H0t+Uu+tsBTH+LXJr+Frk0/S1yafrbEUx/h//Z0N/B09DfwdPQ38HT0N/B09DfwdPQ38HT0N/B09DfwdPc/O3N2zBDW+5mhrbcxwxtuY8Z2h7MDAbZDDPkF4bpNjUYK0z+97z6S0p5VMvnUWYU0zlF+f6ClnlBVXm+AEev26MKZW5kc3RyZWFtCmVuZG9iagoKMTQgMCBvYmoKPDwKL0xlbmd0aCAxMzUxMgovRmlsdGVyIC9GbGF0ZURlY29kZQovTGVuZ3RoMSAyNjQ4OAo+PgpzdHJlYW0KeJzVfXl8W9WV8L1vk2RbkrVbi7VYlrxK3nfHltc4jhM7u53Vzr7HJAFC2BIIaRqSsKUtARqWUGigpSKhTKF0SgKlLW3na+ny+02ZgW5MmU5nYNqPDgO28p1z3yLZcQLMH9/3+wD5Lfece98999yzvwehhJAccoDwl46t2zE2Hm4cGIc7PyaEWtddtzco/VfeGTj/DdyLbxzftGP38t0JQrhcQqR3Nm2/YaP44rubCNF/SMjy0s0bxtZPPPSXMCHrCgG+fjPcMD8vvQfXK+G6cPOOvfsWOIL5cH0A+hzYvmvd2Be+8XSSkPUwHvnqjrF943RA99+EbNgL18GdYzs2+IoaH4DrkwC/b3zXnr2Xrif7CNmUg+3juzeMP6H7gguuy+F6LvwowfngjAiV8JrjBVHS6Q1Z2TlGkznXYrXZHU5Xntvj9eX7A8FQQbgwEi0qLiktK4/FKyqrqmtq6+obGpuaW1pntbUnOjq7unt6Z/fN6Z87MG/+4NAC8v/vP98id8IP/x4TTxEivsh/QEjqrHj20vvii4J46S8poHKSlAfXJ4OjG8NJMjS8YSSWpHAjmHx5KClElyeFnhXDoXDIe3Q4mBwaGg4lEyPeYLIRzxpHRoJJQ8/Y+mQxXhp6gslKPKlEiJeHhoMbg0ePjgWTWUPDo3AniG1ZeFaPZ/Wj3tGRkRFvkpSNjChjw+BceVIX7kxK8CP460pKXQuGk7qusnOw0l2jnUnnBh/A8eXQFoQhuZ51SdqzdrQ7lhTUe6Qs/KwkREaDPUfDYzgZNjbx4vMlg16Ygzpiko+Ex7oBVyxP0tEgzKerH1vgJNw5kszCq4VwlQVXsaSEAyS5SKfyLM8a4PzZLPiTpM5wEDqD/gFCiHQePRqEsZNiaSicpGPquVfBhx+7HoHxZsMos0eTB9am5/IsIbZwd5J2JUnbOUopDBVL6spJcBT6Op+dTUnn0dFnJa4sltSXw83s0WAXDDOKfcN/C4bDwVa4DCetG3zeUAie3FCe1Jcl9aWxZFZ5MDg7mB4rPNYYDh5dMjz9phfRsssJzCyZVZqkjspYMqc8WAf9xpJGuM/LsEBsFQ1PifM5xnvdbeHGZ3OoA0Y0lQdboXetc6DBWGMsaS6Pu1pjydwZWmHm6wDCUv4sR5yRYDw4mzEDF5lz9Ojs8Ozw2NokDXeey6XUYYcBrLAsTiA6/Mdak7Rsw9F4OBhsPQq92NKtwThrDyZF6I2WBZOjuNKJBcPn+aAQ9J7no4JnpLMTVlLfBUvGgMO9o0mxC5ZnFPlK5mi+a3R9OCl0ja2H9ea7xrxwPoq8BGBjMC7snHAvkDAM/fTimui7WF/QhdxVmPEoXIwizURkBsQFPOgdGBd65+EvcK03HBpJ9whLYsfpBOGOGFWmE26FWTrY7aQ+3AltveHZ2D9S2clmzyNbyLQhi4fjwVbY0TKvqARJE0+KwNUcxqG0Z114rcIRCj3DyBYuZbAulaCjKEBgAirN88rDwTjOvBc2T+tI/FkDtQOzurXbQ5m3PVOhZ4TxwpAOmQ9g88G62+JJE6y97wr388ufJdRuS5rh3F+etMAhXJ60ls34XNHypK3sKDw7MgbM8XIYWKp40gCghRo3qeQHRoLtFowDv8u9hcqf1YME+OxcN/uzMRo+Im7e1jBs1oxFD40oDxIsR35IBuC0AOeuTjeC0w2Flfkqz63NMIAz7AEaBHtBaqmTKipP2rUOivEimQdnJezMDWeljDBw4YGLsvKkQ4MuxwsGHWNnCB1nZwhaUZ50aqCVeMFAq9gZglazMwStKU+6NNBavGCgdewMQevZGYI2lMOfxvJkgyy5UCIJBA78x6AJI6SONJFZJJVwzmptaW5qbKivrS4tLiwI5NuskpClK5ubXDM0nOgCa4JQP+E5sCpoNaECR4VK6IrjCUdJFLoU9YKIZwYDGB+FRJKyA0Sv1+G5TpejCxq8c5PboauOmbuSiIFIBgIdzNSp1pFZF9R7E/3/oz50Oj0hYa0vPIQMIyPJxjJbG19T7eccdpNgpuGiaJtQVxsNF5i4cEGRrbZeaYOrKA1ZQg3w+8jd1D0Yb980p8Qfq68MC5b9OYIn1lAZnNNU0ljsy3bnrGurdBbnWyz5xc7KttSj/D9MVFfz6ya+LFzrjOZbwokVjQ1DLWXRiGvLtQU1ZcXx5uKaVqvT6pz4uCJh8Ze4XMV+S7vw+Eeb6sVywpFfX/pP+nNYMSMJkVsSJkL8PrsVrow6SVRXyUvQCiSFAihKoD4HtIGJ8rwVdpdCfTe0EaQMUkkDcPBB3psomNLGA3GBWioMHkICoxa1AC104ThfZ+Fr27g0deIcfYaXDNIN8OPLbKG4xxMvsNkK8BiyiacmX40tXbaitnbFsqUxrvWjX0Kr3Q6t3hhCxYhI+i69J74pPklspIhUkR4yQlcmnEsXD/R3JhrrqyrKSwsLPHm5JoUzfTChSsITouMJrrCO6A06PWUzg6kwOlgCwJGw/oUSFcUcMSgBIQoAr/aT8QAekSXK2NkqBXVemc6NM+IKAqM5dkBmxtcri9BEBAoMywHjAp0p49OZehRFc0YHDnyARI+GKxokgyh9Uh8AYsB1VLvBQ0gP5iZbSWXZ6pRl1NXGOWR7h90P120cbaMtlJpoGf0kSO6V2mV727v3LK2sXLqnu+vaJVV3+qo6IpGOSq+3Eo9VPu6AMT/vwMf/muWzHRLrapftSYPvXVp5dDq40L74jhWVlSvuWLz08MrKypWHl3aubPF4WlZ2dqxocrubVtDrLbaPDhlz6cLFhxDw0OKln0PAzy3tXNXs8TSv6uxYjoDLYfcsBDt/n3iWtJO5NJGwU9LbXRErjhYELWaDjrTTdj3ykx8lnUgp10h5OqevLOIVJZ73oyfFUb4aFheIW6iDDQKry/MCXIhUEGCVJUm7ENgyI5t0fLauiNITMissvVXU+KX9yh3p5B0rL7/ajTmjG4eIXNP76XqQwGFEZuGJIGJnUa0fPIR0CtfA+rt0EkjDojivMoELeKUB2cVEdRSaKuBEZZiGOMUDZbxS3wAt3MnB29Y0CLtEwegSdYGqnnj1UFPAUlAfpQ9FY3rObt3J9XbS8q/lFzrvXv3BfUMP3NBfsWh396zmuvV3pX5cOX997fi57tTI1m3i2ZrFu1qd1GT1NMb9waZ5sXCioyeaWtV1X7/NueetsdRPTc57Vmyt33RyVe/NWxf75907f86BNQ0f/75jXXd4YTd9uulhlJr386doDcjXLLIgkQUSMItkSQKvSlanARUOaBxZwHIoYAnKzKDSgNsem8LYhEsr++MgMZnA1JlkmlhoTS7vC3jypVzxVOqtB4PhcPBBWgCQh1NvclQyEx/RJQR7Fs2GzWl1+cGMk8wURC2SkV3qJI6Gdm6WBFP24NwtHX5/x5a5g9mmrC07uGt/ldrxd9m5epNVV7nnd3/44/4b3v397/ZW6awms+351HYYpT/1Jv2eOorBhqPUckXRutr6durnUYrrinCx6hvqrbR0x5asqYMI0uadMAo9+bzNDINU7f3d79+9Yf8f//C7PZUwiD43++/ofTDK6tR/0iHyZ+InaxKS1y0JnEpHq5lSpqVkIZlDgYYyj09rMWNLwivfZBQNa414UFRRQ4b+0eE8Gtr4BmS71ZZAucdfEcj1VM6O+Y2mrEDQKxk9pQHLja6SgNVZVOOPja1ZHs3PyTWasiOVzSFrKIZrtp7L4RZyZ2ALRBISqkB49oSLDU3kZyDyM4DxwKPpEHKE1tP/SFm5M1/CxmHQ0wtg7jayKCGhptLmbkrPzkqDnDLvjLsOvKuMddl8+cvmi9Mcnq5kd07XqfTS/770BPc38QLYRrGEZNAJHHui4zA2RorAAKTUyEbOwqFqYdgyDsdyMbmPW/pRU0P+XG7EWBma6wgXiP8YLACRQVov/acwADIVdfX1iSxVMwvqfD1TlCHPy7uCWIlmjORl6i613cH2VWiqWuOZVFJAeJI2RewcEzMU5Iy1jQJpqHW6ahIGFhz77o6d3zk2NHTsOzt3fPfYghcaVu3v7Ny/sqFhJR5XNXA/fin1788NDz9HbS+9RO3fHB7+ZurPLz3+9pGWliNvP/74W3h8C4n1OhjPAfEhmMSPEjlWS67ZZDSAANUssHAOWKIcReGKEhXlfHYAHh7MUI4JeCEoKpMPqqDwt5ZRPgPOLMO9C3ClM8EJAnJjGgEPIcmbqLgMGGU54UuBaoLCwBkYikCPhCy1DaIiomiNBViaBmCcSyTLbjDnSY30qXuoZ5Ic4X9WHntTrzMa5tFrPvrzEaTIZuiwELighjyfyKUELTS7LddIamiNpFIlVkEFPhuei/MTgaegWaqVxRRlBQjKCXcVB3uPGWhIn7LLkRAapsEjU2goZg5Ilaj9BGjGimENCw8hSdNmTHwAq9eEqp35NITyj7aBzJUZSRXebTw3suL0ns7KhdtaU58rXhilv8kvmOg2W+iPmlZ3FRb3rq6vXzm7Kksf9IjZulWmoRsfFs+C3lk9dOTma2elbsk2Fni3z7IVW+hPmrdt39XevqYtEGyaX5HvoTR37Zc21iE9t196X4gDPfvRJ6Okq6OlqaqyIh4t9LptFtJP+w2aT9ZLdVIWFUQXBevcT8ARkHQisJzACxyYGCIROFFR4khrvWpspIWQamB0XL0rxJR0RGI2qdar1hHILTAx+v9HfVCqbG25LzygdZq5Lqj0ZGlX1ACumBO0oMvP485mC1Q340JtX/HArrZwx8qmY8fn3vb1dbsfG+9zDzgc9oCeEzhTcfeGuXOvmRsNLLhrfMXBhZGi7lW4dJU5+qA7vXS1o0cWdW9b0GiJPHP7utO7WprWf34oaLBYBYOYPydRXjV/tKJ5tLf4II12rmxsW9kK1sdgPL2YbC35FNgUcfKbRG48VlIUyPfkWXP1qBTUVWwRqUjLyzhedFIgFfi0ItpeaNaLPGWOKxBO86gF2N+M7a0cc0eYO3GlLiSWCWD8r3WmdeDArZbo/Ey4HCfgaql94AFlCBPEUjjE12fqJrZasgiWF0jSFdlC/BuVTam2zvE140/vbRm686Ud7XvXLw3VW/22mr6xrrn7lsSLBq8brN/bNr6Xe1KcG61KHcnr3Ht61e5v3d7rLq33D3gC0UDlyE3zurYPlFrtIe406iLcNdVAaQ/Q+mGUQ2UloYDLkW0gHurR5FBhHhUI9aNgEEAsyg5f9tQtoYpnBRb65mozETK5HuRO7EpgMzH2VIEjW8coadDJaqPUnkksE8cdXfrA3u6+g8/v2P6Nm7oWr6DbTNXB0ylzzU2pXxXP2zW7b++iWPnQeFff3gVl/M6mHQ9vXPfULX09t35zfPUv9tN/tbon7wwXpQZ6di+MxReOd/ZeM1hatWgHypid8JytQC0r2Yo2ABytZtBjmua2K3IS9C+SB1NKaTuNR4OXoDhFzjQTtBz8zJBAdY14YZ6qmp9Lm2poyeqoYlM0hAqis6jQatZPfsMYL7qVW270WibtFq94aqig3PzxIk9EOO0utXktN4ACG4XVjYJMDICWmU1eTXjqakNBStpn1c6um11WEqwJ1VjMJEADmmyM5+k50AF+PawOD3wte9OaNaKjsv8F0gjtEVXllCtYyPICY/kM/EwcsFFg7es/AZz5VeEMPDwqTCAqiy97RvK2kRRRV5TBBGjE2KZdc13bzh3ovfvwNXvadj+8duyR3W17xw/fPfvWc9t6d80rqVq0vaVl+6Kqknm7envXtflCHWOJxFhHyNe2Lrdp65dWHz0fLX1y7+DRjc3NG48O7n2yNHr+6OovbW06UTR7XWv/ls5AoHNLf+u62UVcsmz2yqrq4c5otHO4umrl7DLcaSeBd+qVtfgy7rRK0E1uF+w0oH96p+WDjQKUwcgbJ5ApG8cSkBW9utMKFFgK2pqylcrAYvpdgH2mAME+q8uEJESRSIo1IaRJTDPCFbKCV5nPROn08EVkwT07O3pveWbzpq/u63CVzypKnTFWBh6nzzmjloaj1F02sKW9c8e80qI5Wzr6dg0UcwP1W06tW/34/t7u/U9tatu1dUtjSm9zcS35tZ7yOD3TtWOgpGxga3v3tv5oxfyNSLkD4BncwP+a2cv3T7OXC5m9zEJuKJtNgSm+gqAEFPKgFx7NYrb10u28Zk/P0O6gsj2d0XQFf2omB8My7frAdIfjkxwQ3jDdIwFKpGRK+MFA/moiqyIWCaOXqFHCz9y+GamRI0topIaPQc0w4xyqeRhXhDEjTCIyvXkmyoiXU2aKqzk9Bnr4iq6nNJ1YV/FFuYnL6ZZFiDiHxYAd5LuJHHA+crINksil/Y98K5jBuO8IbhfC4bbLDmBINyftdqlAvMDXpiERyCwDodtRnAHEUeYnChTEG9tsFF0Iigd0OuKZ/SEsB+tKQD7MiKD4HCEMH/Ehnu3JGhrio0UmqhPnfNET1B+evPmwrsD9RW7W91L3cq7fOh3ZjiyPnS5PPWH1iacmbuRm1y8o6fGgK/gMSIBHgCZ2kEil5IWE0+EgpLS4IOgIOPx5Trhv46lepU95DmUSW9DRtFpQHE8teitRxkOqVihVcID4ApHtoDR2GsPM7IGaqwJTqsTUFSQubRWA1zXN4KVwBwV/NBxRT0LP0B8e+u6NLaGuDd1ffqTr4Lf3pb5P6xddP6/wyw+nfkTJwn2D0fsfSf23eKp29M5ldWsXdzoCjx9e8cXtLdzxlDHas6Zp18GjhYkV9bdchxp7+aX3RQPI8jj5ScJKCdqneU6LWSeSOI1rFmqtDaYEFiDhcInRwqmWKJteZdqaZOHutERSTdPqq+BycMkJUzSzA6meaPl0SBRVblhDxoNqjFYHaDosUF+ITgPzDeJCptBvqBceyTUODH/87IMT59Zu+XtqeOT0OyPtOqvFmF9c3782see7R+fNu+P5LYmNy+ZGLbTYuGjj7m0XqOmxx6jp4ra1i0eyjDZf0GcbvPeN2w6/cc+AOVhVYIZHBJ4UjwBP5hA3RkacdpvFoJs5MpKdERnJ+YTIiPkzRkYkIRwCHhKcckgkxPhJPLLxxdTE6cl3ubzTVHhx4/f7Dr20J/U0XbLnpUN93I8fTX340ibx1KbvpD589NBP7x74+NGBu36KvIL7LARzyiaPJKy4W0h2lkEPTh6sB9V4JaI8nJyDE4mcdmGTFAiZFgEJQxt0LbJ8UxpPAzULKKPLrwAlAF+wqcvQeEBRzSzNEIYw2E8ITQ5xscmfc8mJ4+Kp06nC+1Ou01gClJ6RgdyZyIXeDUSbj2bH+KfMB0fCGD+bT046qeYTUc7hb9pEzCyvVoTZs7opMBxK22nhiKkPH5YffWDyuVfwubNPT94Pzyrv2QTs2VryDuYxyksj4XyvzZKTrZdILa3VJF1LiLKgPTVSnoBfJ0ocaIpqkjbe5ZwF0BntYcZISq5Q8yuv0IVAgErMkdc6y+jAweMe7vpMuIx/w+lO8KDs5QhuVEsY3YWQxcSHCwqj6qZWshAZSQg+1jy2dCD6ls1Fv1V/7R33jzyUmnhpy6bvUvNXl9x789Z4g8Wba3O3jdyw6IZXj/bPO/by8WxnwE5bnbk7J39d1FxkY7v7cWq6sNVd0VU67M02FUc8g/f97LYjvzw5X+YZsZHtgnMJU8YGIBrH5KkalURFmqF8VRvNM7WdsGyCsrdlzQsshmErpjhnAMVjCPZFGZOIChTHoNCOAV4jslZDzkIAzYIJhS3IV6BpLDVi4ysTE6+8wguvcMcm94qnJg9yt8JgbwCLnoT58WSBFv2W55UjCys2l3TsmkXFCzU/0EWULIjWgAcldg3D19CTFy/Ku6/10vvcD+HURb6eyHKB1jHlKBLSg1TSUZZukQmoZlTU2DE+T0iH7AP7EzPTXDWDVLJqMqAqZfwKIE/BOgGxWZuGkt24ossBZM9NA1T9tnTKtIglu0CvMIfdUsP9sGXPV3eMbeGAaA6HtbW6c9PsyAX63r6/v73Xl9/kszisxYtvX84/Az1dhFVphpkXkNcTpoJQMOD3oX7g0jzkx03DjAhYTLQcRJbQFyjzm1SpE5wJimPpa8VrUgLIMhzqRzkIOhMCHkNAjCqlUypqsEoIVQ7aETn0SmWplUEWlthT0sVgwbhY8q+IxvkyijxHb58TjdnpPztLgl+ZfMsRcfhKXVzzV20eW64+Zcm2uUN5wxcu8BFwoXxux+SXXMEsQ6F3ckTKyjVwTTmWHHFynMk/2IH8P8GZSNYn9PLe07J0NqLEK2RzMzO9ZGMRmnSTnF/yKXczkjucnNzhFDUaQVlcQ8e57RNvXDxzRtMc0kE4DZOXEzlBf77PaUNLXLPCfbxcniKLuGrcm5gFmOKZ+C+HoSzkovgmihV+GRSzxcMZ4CwTBStXwaMU8GvhXxQczDWG5UNVGZ2au1LXDZYKeJmtHKwThqMk8JyL4L4D1w0sJ8rvMjmyspwm+o7R57nrKY5LOdwxX8ydyuL5p+7y+Iz0PU7Kq/P6ajz8Na6sjzYJ+Y5K98SBWIy/3VPt+Pj34qks18QJkiE/neTeRI7TYbflgAzNyJ+YBVSFSCzG6qqgsQhKNIWFpMxyA9LHhw2wTQmSJA2CxxDTvKhxi1l9kCwp0RRHt2gKD4tqXhsmG6ewnVHfaCSgVo87l2/juafWugLmiVc47qn14imj/eMfeKpc/H99tCnXJjS4K+0TPHIHR1Ze+k/xt//v82Jg/WXoStUIzDB/xd+CJfjx6dOpiRc3bnyRCqdPU1G2B/fueemOvr47XtqzV7EJ/3px27aL1Pjoo9T4yvbtr6T++uihN+6ZP/+eNw4d+tk98+bd8zOcN8g14VYggQmsXmZRuV0WM1wZxakWFS9S1FJyMDptBk+xf32o+Hgqh1LT8KoNXITj1WXCsDKlsBIzEFlpg2ZRwSKqvlW4SI6wRsHpvP0CffLIDw919H7uBwf/5V8W3bq0/OzT/8LlTb4rnmrf+/iG9U/s63qgfHBn5+cfUGf3DswuD0Z5Gy3gcMjrhiuXzSJOsYBNiocpgSCdFnjUjAHNAlaAtQBiBto0fzwugzIDoC4TgVV9oI/NM58SPSeCXnmt0jfHo7iXHfJPQlMLPDIopnOiKAdBTqfR7gtHXjvYVrni9kWFPvrY1+rcqWOW4uL7frTk4LLys0/+gls6+ZR4qmHzfSsGDm3ptzmKJ79fwpE8x/GSuZvbD9yGsqD50vv8m7BPZpHXEqaWpmJwb30ezE9rvFIzC3w8P0gvDgPM8IAg1jDyJ1QS5vxhfYtl5pxI1ZVR0d8X6Qy5kOZPhXOVHIhc8aLsMUmpGCxihoIW2pfkkKTTxR8z2HMtsZ6xno71XQUtYzcevHGsJXHj+d13vrOgUe8yOeoX7FnUs31uccsoNI22tIx/Zdu+1/qFF8zmgpKCcOuCitbBxpLyhsX7R1Z/ZX/vhqUrs82x+li0Z7SlY1FjUUn90oNrBk7s7Bzog2f3AffeAtyrI19mFQc6ohiumuR1IL/xrHiQmVJTtSfcRMXDy94LaihVAgdQn9QJ2MQzKXyZoRpBFiRcqQrIwm0aIJHhVBHMPJ9QnXBLqupiqkI8debjLOFvZwD1kUvviQ6YgRtnQIndZsrRScRN3ekZ8IqVJKsBmR/UGTiYpqzNaHRwmsUd0BqZxRdOQzFFAnMIIz9gLp2/IpQyg4hsEFrUBA+e+jnuzZFjYzUXBu/7xaFDvzg5eKFm7PgDrdu/uJzfNHHqpl88ODz84C9ugvMHln9x+yzcG3rQk7NZhub6hN5qyTVxGVaOntkElCohq5z0LNNNHKmVY+fqHC3TmspAjDr0GIFiyRvNNC5TAsE2pvozrAMa1j/oCerpF0yubIPDRO/TFbgfmvzWN8RTHvuEsWCorGyogP+rJf+jTdAd8Jjuj/D8xeS+RE5xEdq4FlNGnNIVdupRbfk5Wd8jN+Tw2jymNPOkFpvNvDYXxwzNOJ8Q3he4qTMSwMADkwgWjy+TrjA3vHRmzJSyYCQNmx71FEi0WG+UdCYDXSCF3Y0ecDwGrSYpS09LxLD7S6mOZ1JfANvPIKbue4bRwudtKyho9/B/sOTjVW1XqBUurD6wi3oCJfaI+eNvyxQS/gYU8pLHEllet8VszAZdpvGyiTGZssiKNaRRJ6MxwyZSqRNKN8uMmgGn8nOxCa0I2X2a6hPMaBkZKKOYYuEbKDOP1Gzex6miCw67nl6nM9Exg8P8QipC/+1lp1ufOqDLTh01uBzPcb/hXjAZJy863FyOyTI5NOlymbgRh23yf5lcMrcLf2Ax3FsTertVgiXUuN2Rw6Nhwyrs6PRkZGajXLqU4UfbLmtEHnGxu3KJDnP1mFegcj1qPjqdO7hfXZj861Mefzbts3uzsz12OtsQcH+Na558jWvm13hskz8Pt/kDbQVcLDcfWe9E6m2aEieJkTQyaWskxiy9TmTSNlGAdjjWDE4tspYlLx5DArKoJeSwgyWOFng+PUHHvc6zZ53e1Ns6f6/T/d8/cbt6WQQXRnqdjVSTyAIfJEsnChxwEcv3aFlaObxCZPmOQkwZxFVbj1a/HFsJLZeHoOOpu9+0+6Qar733w98xe/Z9fr+gIyWkiVYnnGWlVZWlTWVNkbDf53bZbdkGjhjU6tmmEKjPChFUOKvD4XiBhZx0EqeTjVlFa9sDeipXpVDZIlJLq2d96g6QE1gvl5eztMzUiQi6XJTD8Fp3wC+ZXciFLH0zYRMJqyFm7EWPLVg2m+5JUspY1ERHBcXIlVIMq71agJUqzDRwUAxy1Zl4FsPaP+gJivbigcVrmls2DcQ67/uPr21Y1zHSUeGyevXBxRevW3JoeTxVXTG/p91/49e2V3nKW3M9qwubiuyhzg09rbuWNgiD190QKgnZTE0LhhrXn1gy+Y4tXB38uRCo7i4tbo5Y0J69/9JfBKd4ATyxCF2TcOa5CAnkuyJ5EbjjwBwAJ2dNDFiK5fXYYNpyXsMY0FHNbrdj2B/lhQQWOOpbtbz+06I4ZBRc+oqroEioH1REWXmrll4sjQYiWxBlhwB7QCTzVCQcCysfy2dEEgmHsBFJs02IkWeZ/pnBeY5lIIA3VOGpjiWqoRElt1NjUVZasQl1UpgWSDqLH+MmmNu//3z7mS3DJ9bXt15zZuPaz9cY9FG6YNntDZXX9p24P9w5Kl6YfGzOSOftF24Zv3B8wUD3yih//dCclLOz/vVvrzuxAo2r/kt/4W8VRFJKuYSpOOr35TkxrqTY07iONaVg4HrQOcowcEHWchn2tB1NCiUwbBW0fflZUR1C2hS/MmrarM5ERFP8U+EwGzys4eJBc2Gm2OLM+K5Rs0KcZoL36HPN5nD9vMb+3fOKSgd2dHcsbiy0urKrO1/buebMvp72G87t2fp4O9+RneP2u+vWnxheeddYTSAasHQsmNt7x8Wbrnn5TtiGuJ/6gPrfU/ZTC+4nquwnh51l1JzUyfYTbo64jYqc1wMumIgpLt6YwaR2xvhMMkocE43q/qi+KhaWpeRkbhpHOgtXOQUTzDCBE2VpamR45ml46i6pmBlPhyVPCB6RqKpTeCOLpTZfFQMddIm5EfI9ZUiBqpsFxWVBxbRVgs0Tqa5vsIAHWiAxCbkimpXb8eT2ZWy7PLZp1aHac6lZsFmqrp194v6CztHIjYNrum67CFvlxIL2Jq76o/bbhubQP3XWwV45DnuFY3vl+7BXCkmM5ibyohFKSoojsWjM57GzWiggf6FB3Te1TnzNDCPEyIJYG0d5FPEg+uXsMWYurrBxPjNuxs6pnooLkIAkyWllrZ/pW6fl0yFdbe/I1UjhkFxlyfaNpr5cILZCILC48IoHxtut7snVXOXivX1dY70VFmdOdWjllvGGLc8e7OvYn9x98KSVKyroXCOIs/ac3V7qGz2xpiJQCJunuCVqm/3512/f+q3Pzbv9C4faNs0tQWvGAxvppPgM8dMIyzH6iT/f5/U4rOjrsQhLNaoWM3otFFjLPyWSxmqiC7Em2hTIeNkLF6EkjcJqpkUiEC15z7AVBDUwU5QxBqvbwvBTBiqCm0UtOFOTBocWQaybgpRZrE3k0msWoWnKGARMQVAh1dOxZ05z6jS9UhSns2iNvFMwxV1GQeDlUwxavzju8D5SteLAUHezQIP5gfjc+nwaSf2WX2UUHfY5a5d9blWlfcSuz6sf7lh1cOIR2MjVqfv4twSJNJF5ZBUdTfgG51OybMn8VYOr+vsSbeGQ25Vrgudpok3ZuBpumHqPnur01RaO03WUciLP+7OoDiajUyKUosSLsldhwtdBkeENMsNr6Uen/MbUHOisb3pnzDmg+uqZO71qf2tmerir9ycRATuJZHasR5Nw8Er9IIheR/BNuyt0KQjsjSr16fCgWobodoKVb6ZO2SwAnzMdN8osD1Tfn6qNCzKM/HKeUhQiC0X6x849FdRWuqegacOdi2a3B0PNo/tv3T/aDBtx164ndzasWVRWkxuqDM5d0rTxOL27tG/15u1VTbPDfTv6+3YPlqZerV/U6Ltm+7Zr8hsXClK+rzNkyO0Y6r9hadxijzsLI7mCwVk93Nuxf01Tef9Y3dwtAXtXo7MiXppbeueq/huWxD9+JRp354iS3ju/vqClzO2p7OTm++vnxlbt3LkqNrceiXYv6It/Bi3pIB+wnLuDOKy5xhy0NrWoX8jOormyFZguG7QHYKNMKRwMqICU2Qaq2cfAlPzX8cz+NDAGoRp4GYkybWDKMgpT+sVEPeIRTk63xO2sqgfzLVydktgPZ1QmatUC8m6/3BLEbAsuns5y77mO05sW3bqk/NyW7YOfbwZT72s9ixo2nFg6eSN3x55bBzomnTg+Bk0PiOeBuVzkIvqVdmuWHr05JYqHmsqdfqfXEsDXWE0ZgfU1UwGMlwEgUb3TAdIJXpWgeYLyshvslDQwBiASYeZbs2C9ChROd8KSwcJI2tW2TXurlA6f+7UjHPd4YmG7PRzzeOJhB//BRDb/AW3T7lXgsQIocukHqZOMInZSTCnyE9YRwpXdAhylWb1Rg5pL1uodRMqqCrW8slO2subMBG28EjR730eBpvLrfpHL0GRuPZ7uGHMTSKDqmXCYs1E5HTBdwkxZqjKsPQolGZYTtWQGnJ3oWMxA4GDPjoFQvVfPmcx6q3F+5wz0/vjlWVvmx7KyRo06OmeBkJiB9pTcDzv5Q9jJfmrJ0NVu5Ek+nQ3BBMeUHDUqTmOAqQMlna3u5sgVQTNy2ioxixXgy1LaCKeWHRlF7SWqKhke7lJOlDfqzHEvNRUO6rn68jEE9cGunAuXV2KGbHgUcyhygGlu3O7JpQmz3/1Y6k6T12LNN9JjjzgDptR5s99ffV68MPHlbAtdlmtP7bF4snIC9lSOxUofdhhTPiA5PNET8GcYTnmyi72tyqSAFjMzollhnFaskb5plm8iHc0ZL7QaWQmHe+qbrFOKOLQI2fA58cJH7TA+k+jie8zr9CZATJFSUloUKQj5PFjTYdDxVIsNhUqyRWR1WAXZwWGxX1NAr4PbajkVS6GpgEQ25WQ/AR/HngbW2EYFhnaJqvlA2S2Rgc18OomW7llgMbErIbEQGezFBCLoEEHU8dCAdSY17EUmtg1BvVOlmEnQcUon+HUJsBfwqL1oD3IfrGi2L13KtyYU+W+aogm2RrOMjXeu3HSrz9GzdKx66OZl8XOb15UPtobPrV3deU0F/0Fkc8/w7rGGodq8mrV3rUQNcf2NgdYVrXi2f9/sWZNGoupZWBUX+SvTsy7iAr/GhOshqeuR7xRldSfnjykznFUdq5XZqEDYeDVlrAHOpDSnlKNoPfKcQsWraFkAztCyvKBifJKWVajtn05dU+eZbWlVC+TcOWf5NFXLfHnBBNSzwVhPJ6wOOyUg2cKOcLaB2KhN0yw+hXQCs0BF7a2XzJr9K8I40rUgHmzUanIyIUClFk5tlEuIxcvesLn8zaI2zoaxpaj22kj5rvM3d3XdfH7XrvO3dHffcn7XF0+e/OLA+NxIZO64IPYfuXD9vpePzJlz5OV911840j+x74fPffP12rV3LV9+YgwD5femzgpmQcciHNdOixiySBOfjhjGvR6RFwUHSFvOrwU0GIelgxZWFqHL5Zk29XxaLEcmFmrs6kwsxqczRRszMTXffPp4V0RSNL8pXRxZMWXUzMgjZvB5tI0yA4/Ay01Tn1MWQNPCj7zIpSWR0lE6jmjL5GtF2VumxhGRx80dT+5gsZHxMxtX31FDLSw00ncc44ips+JAZN/gaNftF1kksa0plRD+YUokEfg/dZb/nrLS131CbHhqLCsjsmvPXAYr6p1ckl7pT4XlyMCao0TAeBULl8V0WeBsGqa20pmYV8NRqiF4E0mv9BRcLaYlKSlvEpkaPFOiYJnPKcp1OlPDYfh2BOslMw2uLTWq2alhsIb6Gjo1DPa9c4kzW9Qg2NrP1+dkRVNPYsz4OjkMxn/w0XP03/uXq6Gw3sRgZOI4RsISDUokjGkK7iO21r9lmoLt5VwTWnGSWo0ZygFN7ZBABmP8RK6KVNSF/MUTVdjh6xUqIDAzlupXX645ZBztpbuZcDJ1glp1zd6JT9TNOERaMUxH0xSDohecqhpmHzCR9cLGfKeQU3tqU2l3vkuXZ2quXXVzKf+B03t66/U2yx1u2/ZNkzeiVm279D5vBr3QihUrzY1g5wS9br3Ep33XmlZKxXzKCVepWLFfoWLlyqhXrlj5VDhXqViRPkPBCverHLc52jBQG+ur8cb6V69b3R+rXnti1davtZbqnVZrcdOCWbXza92x/jXr1vTH8Is96x9u5uc7nV6Xq7guUFQbzQ8Vty6b1Xv9suqe+m6jyVfg88ZbC0obivKDJW0rOpq3Lahsb0BKl196n3tRbCMhOohV7vnePKcNP7dglAS4F9KrscAaA6V8AGbKmIGrJWjhS2I1+pxKYJrJCNCTLNBqTYuEqiugIgGpxFP13SANUWXYz4bokBHR8mn+NIiEKG+1KB3gMaQDS9QAdmomMsVYklTN6ulF/AoWrju5YheqJSoWROvklG+DjRV9YqzQ7kwnSOj39h3cn+t8ooRzWpbTgtRbbVW+Er9Db8qujd+We/gWbrvNPttBm8y21JmDk48k2sxWs2VJWRWs2n7YH9/jPwBr80PV6rTmYoWnyKetTpOOfTAHRKESfFBLGDKtzmlA0KgKZ/kVhXQBXQagsjXMGaAOPv0dDQWUfRoOTSjcB2op5ZQXD7AMGoEFdMKxilbA8jlO0dcz42Q44eh5N7AaUi2TYaHlW7fNP9p8jlmgj29ddOvSMv6Dyf17bunv5P5tIjuyY85Iw/oTS7nD0D940/y/AxU/ofbH9H+19sd6r8MnwVrk6vRWE7Ce135nat2jICTNk3sL+8LhvkLuWK5jIluubBHf4/+LxMk3Eznx8oJgIH9q7U+RK6P2x3RZ7U9m89Tan+9jyccMzWXqRN1qI0ZGalkNmgwgeBMhbGPFQXI1CCPF9OIgbfY2efY2pToo8xLLIfk4xQohXiqjpmNOn3hRbxL19uxfiW7bPLtH/Fm2RS/mGl4TfbbDqW8d92T9Rp8liln632f7Dys06yoo6Crk7jbb7ebJ8XB3KNQXkClYwH3DVeFyVbomFxbIlXv8G8ANXvLUDHVCLrtJAgGvscS0SiH3lOYZaoXCmQBXrBYqZVCfuV7IVi8TTK4XAhEgv+x5a+rpp512/YcGy6+z7ObHU0/TdU873fpLOtOfs1z2hzkd/Q+TMXXI56MJkyXlm3zPZaLH812pJ1mtkAls0/eBHk5yY0IP3UgCx3YH2od2k6h+jEsWLblyNdCajDb2pQIGQDUqWNN46UIhJ968Yp0QzsR2WaUQ/bbB6zv0Qmr1Ay6PRM0Go4h1Yzop33Ii9Ut7Hr2Xf9FlmrzNWe5ylbu4m3Md+DS9QMslMCMzVovjO71YmjmlWjytydQS/sw3CfIyXvvR2s3KW98ZTRkvOWhvAajV4pIOc0bsaxShuhC/xJQ9+U9cyaRozOGKJt/m3ufP2sKmyeid/cZwLvf2McC9iX6HPsm9Cz5yRPvO1RW/XYW7atpb0je5Sur9gcbivLzixoC/vsTFLci8glZy6ZLsiYtnuShpZ5GVheRjNoFysO+wGtRC7kjoLbn4HpYmI/3m7CxQgBJbvMteCNHev5gCNf3dEGD6ossBZnpNRKkxjzjsOpHpUl1dbTu11NCz9IA39SC+N/Jt92MX+cirB/NNL6UKznCla+7wGJdyP8b5sbVn8+tX5vcc6345/zbtFf9A8vA7bWAnZOOLGviFCPZ1tgb85E2UvYNOzfmekcEGvZiV688z2Vw6r/iHytHKFV/pKRBzJFOWLVZV7w92R7Oz87LlDCv/I/G7YEPtSNjR4SD4/lG+z5vH6mk1uypmycUAA5VdHjUgwSoO0klWHVjhqiWPhC/LQEII+f20aCa+iqLq70+LonwP67VpKNgmCnUzY3Ka6q+7HGVKgpZNiiVoMXQMf0Q5Qduh4EliOkOrgytBlMDpEISazEStKCqJWrkPPMhG1+WZWuVtZPQ+8ikreJaztc17v74nOpgvcXZbdp752Ue59edSi5V8beOqB8fbsrJWGXX0vpM1EwF+dOIRJWfO/0V8jgToYyz+GiDyetrBXjbjmrL4axST4BST/36SDqcaMWtKiPwZLgzEckwT43oyJlAQ2Nvdmot7BSTVrC6TkbBR4vErQtHL8DPH2Z4eJxMlczRZ/jEks4z0OJpzM4yDMBwLvaTx0x9Sq1WnI8hFl+xjIQKLqmU+qzoYK8XELyRREOAsYowsVq2HK1Rl1Zf3A2wj6cSMbojcicwFM7ABe+WK+fMZKfvazQ9tXnSqb/25+h3Ftx2j+lRK4YD6xV8a7zR+NCKWctIXDtcflNf/VeFODiQIMWAFKMG3mMHaTmcCNHVnYZ/4y06rOPaNP8pUMjp83JJ/NXkdW0+aQkHxbCplNv7FBdpJjv1TzyOG9/r9a8ytHxC37qd4+/X7Vo+z49vxOy51p+7Tv6CLsdExc6rg6Z5PLYVb3KXuS136F1hPmf8sEopIjN4GG+sZ8mupkPSJt5CF9Mfkfm6YHIZfP/0qWc09T9bDcZj706X/LRwhrfB7HX6b4bc947cTfqPwO0k/JAfwJw6RLNFEnhGXk+Xi78gzwlH4bYfrl+D6XfIMt5G8we8jreJCclEQyDO6SmiD+1IrWSm8Ri6KerhfSJqFh4gPdtcj0J9e9zdiguU1CX8ieni+E/Bbzv8N4FeT+/knSD8c+4Q80s89Rjx8ilQLw+ReIMdtdOLSD+D+/XD+hLSV3Iv34dcnDMERcPgouZdfT9q4P5FyuL8fvDirOEFM/PvEJ2DQ8SHSyxWQmxhOGynHa6DJcmEv8QiPEw/M5VWg5z+Sf6QD3D7+8/wP+QmhQjgufF34m1ggPiRFpJ/ozus36y8ZlmXlZ72Y3Z79Zs4GI2/8hsltus30z+aHcnNyO3L/3rLK8rC11fqMrdR2yt5p/9Ax4vips9J5wTXb9Q3XH/Kcbur+k+es94Bvbn62v9X/68C6YCj4m1Ak9H7BXWFPoTkiRh6MDhWVFf1Dcbz4lyWrSl4rDZUuLh0tfbX0p6UTZe+UvxNzMC5YRG4DXbcWP0FICkiMNMG9u6V3WMkyasHlWLctGOTKcOWcA79Cr5zzZDHYf/K5ADpyq3IukiHoWT6X4P4byrkJTP0/kQEyRvaSXaBjN5BN5FqyHa53w50bAGsXu9pJ1gPUtWQbnO8h+0k3/LYA9Hp2XEeaSVDrJTitH2yrJpWkCv69EsxSuNoNPW+Btp3QWgU+UhXg1JIWuFoGrXsAD2F2kjLlqbbAvc3QuouMQ8tOuNoF/e2Gp9mgjRObNs5muLsX4JtJBfy7B2B3Qz/jcG8PjIjjb4fjLri7CdoHwQoZYOFH+OfSXvx/zFz+zwt6oP66YJKGu4NJPjyetPcEg8ni0Y34P8xI/x8Skly4+7whi+fKzmfn4l+LE/6OnBOKpZ6F3XBP4MrI/wGbem66CmVuZHN0cmVhbQplbmRvYmoKCjE2IDAgb2JqCjw8Ci9MZW5ndGggNTYxCi9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nF3UzYrbMBSG4b2vQsvpYrAlHUkZCIEyZSCL/tC0F+AfOTU0tnGcRe6+/s4XZqCLhNdYih8OscrX45fjOKym/LFM7Smvph/GbsnX6ba02TT5PIyFdaYb2vVxpd/tpZ6Lctt8ul/XfDmO/VTs96b8ud28rsvdPH3upiZ/KsrvS5eXYTybp9+vp+36dJvnv/mSx9VUxeFgutxvP/S1nr/Vl2xK3fZ87Lb7w3p/3vZ8rPh1n7Nxem2JaacuX+e6zUs9nnOxr6qD2b+9HYo8dv/d2z22NH37p162pXZbWlWuOmzt2Bbt2QEt7IgO7ISO7B06sV/QO3aLfmF36Jqd0Q27R7faXg0dWw2Z7dA9229tKzZsln4Pm6Xfw2bp97BZ+j1sln5fo+n3DZp+wXMt/YLnWvpFn0u/CJp+UQP9ogb6RQ30ixroFxgc/QKDo19gcPQL5uboF8zN0S+Ym6NfMDdHf8DcHP0BZkd/gNnRH2B29AeYHf0BZkd/gNnRH2B29Ac10x/g9PQH2Dz9EXPz9EcYPP0RBk9/hMHTH2Hw9EcYPP0RBk9/hMHTH2Hw9EfMzdMf1UN/xNw8/VFt9EfMzdMfMTehP2FuQn+CX+hP8Av9CX6hP8Ev9Cf4hf4Ev9Cf4Bf6E/xCf4Jf6E/wC/2Nrqe/12ep3+r/UNRvuR5+V1n8Tqgec3vMJdiP61Zf+sfbjdcfJ9T7udLelmU7UvQY07MEp8gw5veTbp5m7NLPP06fMjIKZW5kc3RyZWFtCmVuZG9iagoKMTggMCBvYmoKPDwKL0xlbmd0aCAyMzUKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL1R5cGUgL1hPYmplY3QKL1N1YnR5cGUgL0ltYWdlCi9XaWR0aCA3OQovSGVpZ2h0IDc4Ci9CaXRzUGVyQ29tcG9uZW50IDgKL0NvbG9yU3BhY2UgWyAvSUNDQmFzZWQgMjAgMCBSIF0KL1NNYXNrIDIyIDAgUgo+PgpzdHJlYW0KeJzt1EECgyAMAEH//2k8yUVpSEgDgd0zaAZsSyEiIiKicj3NHuRfXY1mz+VZy7gT9hO1E7bTkhqruq+MN/vrR/gi9KxZMNGoOoQ1E2fOblTNnBFYpDvqWTlr8s7Ej1BstkDOfHdZjKqxNzN+Tp4OKH6Bb0g6Yznj36Z2grF2grFmvtmwjsK2CsP2P031aq/FjljVo1wWT8QukgGb1wsWLNhcDWJt283HNXjOkaOOB1a1HSxYsJGBVW0HCxZsZGBV29fHer0RLFiwMYG1PQcsWLABHYX1CixYsLkCCxZsrmxYIiIiGukGFdKjgQplbmRzdHJlYW0KZW5kb2JqCgoyMCAwIG9iago8PAovTGVuZ3RoIDI1NzcKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL04gMwo+PgpzdHJlYW0KeJy1Vnk8lGsbft73nX2xzZDd2LdGljDIvpPITpsxMxjLYMyg0iapcCJJthI5FTp0WpDTIi3ajtKmos7IEarT0SKVyvcOf+j7fefP812/3/O813v97vt+7ud+/3gvAMhjAAWMrhSBSBjs7caIjIpm4B8DBKgBRaAHtNicjDTwv4Dm6ceHc2/3mNLd+JPjs9Z3YS3Zbl/+vLHVjvoPuT9CjsvL4KDlPFC+NhY9HOVdKKfHhga7o/w+AAQKN4XLBYAoQfUd8bMxpARpTPwPMcniFD6q50j1FB47A+UlKNeLTUoTofyUVBfO5V6b5T/kingctB5pENUpmWIeehZJOpftWSJpLll6fzonTSjleSi35SSw0RjyWZQvnOt/FloZ0gH6errbWNjZ2DAtmRaM2GQ2J4mRwWEnS6v+25B+qzmmdxAAWbS3ttscsTBzTsNINywgAVlABypAE+gCI8AElsAWOAAX4An8QCAIBVFgNeCABJAChCAL5IAtIB8UghKwF1SBWtAAGkELOAHawVlwEVwFN8Ed8AAMAAkYAa/ABPgIpiEIwkNUiAapQFqQPmQKWUIsyAnyhJZCwVAUFAPFQwJIDOVAW6FCqBSqguqgRuhX6Ax0EboO9UGPoSFoHHoHfYERmALTYQ3YAF4Es2BX2B8OhVfB8XA6vA7Og3fBFXA9fAxugy/CN+EHsAR+BU8iACEjSog2wkRYiDsSiEQjcYgQ2YgUIOVIPdKCdCI9yD1EgrxGPmNwGBqGgWFiHDA+mDAMB5OO2YgpwlRhjmLaMJcx9zBDmAnMdywVq441xdpjfbGR2HhsFjYfW449jD2NvYJ9gB3BfsThcEo4Q5wtzgcXhUvErccV4fbjWnFduD7cMG4Sj8er4E3xjvhAPBsvwufjK/HH8Bfwd/Ej+E8EMkGLYEnwIkQTBIRcQjmhiXCecJcwSpgmyhH1ifbEQCKXuJZYTGwgdhJvE0eI0yR5kiHJkRRKSiRtIVWQWkhXSIOk92QyWYdsR15O5pM3kyvIx8nXyEPkzxQFignFnbKSIqbsohyhdFEeU95TqVQDqgs1miqi7qI2Ui9Rn1E/ydBkzGR8Zbgym2SqZdpk7sq8kSXK6su6yq6WXSdbLntS9rbsazminIGcuxxbbqNctdwZuX65SXmavIV8oHyKfJF8k/x1+TEFvIKBgqcCVyFP4ZDCJYVhGkLTpbnTOLSttAbaFdoIHUc3pPvSE+mF9F/ovfQJRQXFxYrhitmK1YrnFCVKiJKBkq9SslKx0gmlh0pfFmgscF3AW7BzQcuCuwumlNWUXZR5ygXKrcoPlL+oMFQ8VZJUdqu0qzxVxaiaqC5XzVI9oHpF9bUaXc1BjaNWoHZC7Yk6rG6iHqy+Xv2Q+i31SQ1NDW+NNI1KjUsarzWVNF00EzXLNM9rjmvRtJy0+FplWhe0XjIUGa6MZEYF4zJjQltd20dbrF2n3as9rWOoE6aTq9Oq81SXpMvSjdMt0+3WndDT0gvQy9Fr1nuiT9Rn6Sfo79Pv0Z8yMDSIMNhu0G4wZqhs6Gu4zrDZcNCIauRslG5Ub3TfGGfMMk4y3m98xwQ2sTZJMKk2uW0Km9qY8k33m/YtxC60WyhYWL+wn0lhujIzmc3MITMls6VmuWbtZm8W6S2KXrR7Uc+i7+bW5snmDeYDFgoWfha5Fp0W7yxNLDmW1Zb3rahWXlabrDqs3i42XcxbfGDxI2uadYD1dutu6282tjZCmxabcVs92xjbGtt+Fp0VxCpiXbPD2rnZbbI7a/fZ3sZeZH/C/m8HpkOSQ5PD2BLDJbwlDUuGHXUc2Y51jhInhlOM00EnibO2M9u53vm5i64L1+Wwy6irsWui6zHXN27mbkK3025T7vbuG9y7PBAPb48Cj15PBc8wzyrPZ146XvFezV4T3tbe6727fLA+/j67ffp9NXw5vo2+E362fhv8LvtT/EP8q/yfLzVZKlzaGQAH+AXsCRhcpr9MsKw9EAT6Bu4JfBpkGJQe9Nty3PKg5dXLXwRbBOcE94TQQtaENIV8DHULLQ4dCDMKE4d1h8uGrwxvDJ+K8IgojZBELorcEHkzSjWKH9URjY8Ojz4cPbnCc8XeFSMrrVfmr3y4ynBV9qrrq1VXJ68+t0Z2DXvNyRhsTERMU8xXdiC7nj0Z6xtbEzvBcefs47ziunDLuOM8R14pbzTOMa40bizeMX5P/HiCc0J5wmu+O7+K/zbRJ7E2cSopMOlI0kxyRHJrCiElJuWMQEGQJLicqpmandqXZpqWnyZJt0/fmz4h9BcezoAyVmV0iOjoD+aW2Ei8TTyU6ZRZnfkpKzzrZLZ8tiD71lqTtTvXjq7zWvfzesx6zvruHO2cLTlDG1w31G2ENsZu7N6kuylv08hm781Ht5C2JG35Pdc8tzT3w9aIrZ15Gnmb84a3eW9rzpfJF+b3b3fYXrsDs4O/o3en1c7Knd8LuAU3Cs0Lywu/FnGKbvxk8VPFTzO74nb1FtsUHyjBlQhKHu523n20VL50XenwnoA9bWWMsoKyD3vX7L1evri8dh9pn3ifpGJpRUelXmVJ5deqhKoH1W7VrTXqNTtrpvZz99894HKgpVajtrD2y0H+wUd13nVt9Qb15YdwhzIPvWgIb+j5mfVz42HVw4WHvx0RHJEcDT56udG2sbFJvam4GW4WN48fW3nszi8ev3S0MFvqWpVaC4+D4+LjL3+N+fXhCf8T3SdZJ1tO6Z+qOU07XdAGta1tm2hPaJd0RHX0nfE7093p0Hn6N7PfjpzVPlt9TvFc8XnS+bzzMxfWXZjsSut6fTH+4nD3mu6BS5GX7l9efrn3iv+Va1e9rl7qce25cM3x2tnr9tfP3GDdaL9pc7PtlvWt079b/36616a37bbt7Y47dnc6+5b0nb/rfPfiPY97V+/73r/5YNmDvodhDx/1r+yXPOI+Gnuc/Pjtk8wn0wObB7GDBU/lnpY/U39W/4fxH60SG8m5IY+hW89Dng8Mc4Zf/Znx59eRvBfUF+WjWqONY5ZjZ8e9xu+8XPFy5FXaq+nX+X/J/1XzxujNqb9d/r41ETkx8lb4duZd0XuV90c+LP7QPRk0+exjysfpqYJPKp+OfmZ97vkS8WV0Ousr/mvFN+Nvnd/9vw/OpMzM/OBNzFBbwpj3JR68OLY4WcSQGhb31ORUsZARksbm8BhMhtTE/N98SmwlAO3bAFB+Mq+hCJp7zPm2WUDgnwHP5yFK6LJCpYZ5LbUeANYkqpdk8ONnNffgUMYPc2AG8+J4Qp4AvWo4n5fFF8Sj9xdw+SJ+qoDBFzD+a0z/yuV/wHyf855ZxMsWzfaZmrZWyI9PEDF8BSKeUMCWdsROnv06QmmPGalCEV+cspBhaW5uB0BGnJXlbCmIgnpn7B8zM+8NAMCXAfCteGZmum5m5hs6C2QAgC7xfwAKP9n2CmVuZHN0cmVhbQplbmRvYmoKCjIyIDAgb2JqCjw8Ci9MZW5ndGggNjQ0Ci9GaWx0ZXIgL0ZsYXRlRGVjb2RlCi9UeXBlIC9YT2JqZWN0Ci9TdWJ0eXBlIC9JbWFnZQovV2lkdGggNzkKL0hlaWdodCA3OAovQml0c1BlckNvbXBvbmVudCA4Ci9Db2xvclNwYWNlIC9EZXZpY2VHcmF5Cj4+CnN0cmVhbQp4nGNgGAWjYMQDtaJ4ahnF6tR36///u4zUMEssfvXFs/9BwJZiswxrjx2r1mNgbgMZN4cio7j9Zt3amCwO4ST++f//LflmKeRs//G/ngPG1at48mmFOXlGMdt1XgEH1tdQEJfHf+a9vZUWLGSZJRy9/MrCaLHUryDz/jWpF+x6tCCUjzx36VXu3lasC2Zq3wc78FyzORNZRnH5TH90yBUeWqqt/79sTJUiz1kK2du+A93ytw7sFDbX/lv3Jnuwk2UUi13n6a1ZKjPAntsnLZWy/v3BMi3ynCUau+LqbD8uEDP+G8i876+XRAiSZRSjSd2Jq/XGsKzIVvr//6U2a/JCXihswQugY55D06ZQzKoXWzJlyXKVfvbCG//+Q8D3aAYGlaID96b7cJLlLNaax/9RwJrLR6v0yDIKBDJQDXu/IkaYbLOAoBXJrGtd9uRlRQRIgRr1+0CJBjs7OxsYsEIACxgwQwATGDBCAE7j/P6jgXcvoOA1iPcLxnvxCiz7Cs4HFQqZGMaFoJl2CR6jDSBuCVxhAYh7AM7lB8VgC4Zx4aimfVKDSZj8BnIfwDOq7Gcg96cGXN/c/1iN0/yHYtyqGBi4DuIug3N3g7gH4dxysOpCzMDbjx54JAAVTOO2jCzjvpAJvmM3TgBTkIEFHTAzcPKggQDsxv3BAGUKGP76wHCA7LCrGDVu1LgRbty1K+ggWfIMOtjPMB9d1QPsxkmj520MwM0gIoMJYsgt734w7MAqPgSN27iGEFhGinE+DoSA3fAJOyobF+5DCHgyaNtggmLsxq1dQR44MBQbFVQ2Tk+BPBCP3bjuFvLAsqEXdvWfyW3ffXlAXk93FIwCKgEAu+qyNgplbmRzdHJlYW0KZW5kb2JqCgoyNCAwIG9iago8PAovTGVuZ3RoIDYwODI5MQovRmlsdGVyIC9EQ1REZWNvZGUKL1R5cGUgL1hPYmplY3QKL1N1YnR5cGUgL0ltYWdlCi9XaWR0aCAxNjAwCi9IZWlnaHQgMTA2NgovQml0c1BlckNvbXBvbmVudCA4Ci9Db2xvclNwYWNlIFsgL0lDQ0Jhc2VkIDI2IDAgUiBdCj4+CnN0cmVhbQr/2P/bAEMAAwICAgICAwICAgMDAwMEBgQEBAQECAYGBQYJCAoKCQgJCQoMDwwKCw4LCQkNEQ0ODxAQERAKDBITEhATDxAQEP/bAEMBAwMDBAMECAQECBALCQsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEP/AABEIBCoGQAMBIgACEQEDEQH/xAAdAAABBQEBAQEAAAAAAAAAAAAHAwQFBggCAAkB/8QAeBAAAQMCBAMEBgUGBQ4KAwAjAgMEBQYSAAcTIhQyQggjUmIBFXKCkqIWJDOywhEXQ1Nj0iU0c+LwCRghJjFBRGFxg5Ojs/InNVFUZHSUpMPTNkWEtCg3VVZldYGRlaXUGYWhscRGV2Z2teMpOME5R2d3lsXR5PP/xAAdAQACAwEBAQEBAAAAAAAAAAAEBQIDBgcAAQgJ/8QAThEAAQMCBAIFBQwIBgICAgIDAgADEgQFARMiMgZCERQjUnIHFSEzYiQxNEGCkqKxssHR8ENRYXGBkaHhFiU1U8LS4vFj8ggXRHODJqP/2gAMAwEAAhEDEQA/AH7aZJW5y89KDRv+iTIrixmvtaM+PkIWqYQNukbNcrevmH7xYNabfXu0g2/exUc2qUfVPRDmLimeo9FVJVBMuo7tw/Ddj8z8NOt265tvfJ+cu7XdjrVGQqi5ZQaObGTi9MP3ApyME+MmKhDaSAHarb7JFq4PqLVxGwrFHidW21IVFOZSzaR4qOS2VYUW0JN48JR69tN4QlaIgPSI4uFdE2qep4h81VJoxgEiSatENoldbuL+nViV9uLVdXFTtF2WBEX0f+RKi2tE023IdXMmyzDikEQkfQkuIdKgXXbcUx9lHlq7cE8cUix1DPcIiYhze1i8kZf38Rur6VbQ5by3YWUVXU0/qjIfCmb7TTvrRTaCho6mo5KHhG/Dsm/Kn4biw6XiYiYTH0yEexfegCIkiWQFW0uq28cUXNuvH9DU/wClzEtCUWcK6ArEPdIebAzykzecwcgown3hLxr07yI9xIKkXN7OHtLZK+spiuLRavpF+tAlXMU740xI3S2XdAzblR3IUhFqLK23EKFvLhODypoSmJVGfgojgXqW8VE1S+HmxZk1UVgF22VFRMh2kO4SwsjYt3Rejd04S+cq0Ays0o+JNerMSlEVMsZkxHSbrCOy0h6sV+WQnfXhSjFz6dBVAEiG/dzXYSWHSc3lrXAV4l4cSsa6VdCpqiQiJW3eLC0MOrdqCvHSmyk9Ll6VEVFvTb+i5rsNidLfpTuLqxJSkSsr6O6LTU5rrbhxW3HrJutoum3w9WLmRbdHpFFCQmpZnLvGawgk5IUz28+JROU0pEgVMtMxAhLFNTQbk+FxeuJH1EfLi1zkWEWq3NA1FBNK0iIrsRfaaEhHvKL6m9VZVDuO88O7H6/UBBErubw4iqbmW0Y4U9D9gTxEwtIdUgt8+Haz5o8cEaVop9IlzYWEwQFH4kLNMCVDquLw4YqJHuPD7YaxeEOocJuB1R6RwUBRVokpGlnCPoYkzvHUSL5MSdti35bLb+bFMj3Rx0gKopFv5hHmsxcxLVtVHlPxYFrGouS7yqdGJpEuYt9uFC4M01uPOxPSMxIQu3+HHjD+yWI6aFy6bi2bARX8xD04qa1mOCvYEXTiS1f6aDoLMHKdb00dCRrd64agq1cIJDqiuG60j5vL72MqxdWv4KQURfsU/Qs3I0l01kuTpIbSx+ZX5kZi5fShBCPEFWBhaqyVLZfdbdjispRaraicVIqzSQcSHeuBTC0CV6yx+ofJfb7DxmLliu9GLkRlIdMfi9/D9f1r8+eVRi/cCZd5t1VESKMS1S+Pbj+pWOcrf01BT7iHJFsYKpWpkY2kPh+HDSAqqnZJmwkZZiKrlLvQtQ5fEJbt44qKLVyl0Fbjpi1fsHinc6rVU9UPGkfX/Tz4Z1XkJsfC2dcK5xx6nESIRHcPi6Pfw+L0dH7fQlFu8sFy4jaZttE2LNQRDIi2l4en3v1/0w9KI/08UeuE0ZGDjUI3XuERS3oJe5i8t4XLur6fk/S0fE7TZofXE9M79IvLzYCvGmY8hD7WE4Or3dEyKj5ndcugaFo8pXeLH5Fctg1BdLekvZX6Nfoyj2BRJVF5VHppls6pNnqSSCpmzaqF/wA3LbcJexcNvs24cJoKaCbciLl3FduL2sO3gIybjXVbJCpcaoiI2iOEyRD8v5PHyljTm8OI6R6C5kerJlW7hWtXN2c+ZJxz29BRQSttPpLGhH2X8PBIC+jtcvSkV4rJq3XYycsFu7dicp3MOrKXIU4yaX07fsVDuSL3TwsraAa0NO5K6ygddPNaJGmWzqjonh2arQnJJKqoLp3WkNvLio5iVzEVexjjjPSoiolq6qJdBeLAxmpM5qRUfro6Czjcrby3+XH4xSEVCV3XFzXYBp7FS0hC+GGoVY1QtNRIVJDEIiW8+fpHDlBo3aEPpFEbgO63DZFwsShAKNpc12OlFR09X0nd4sMQceaLAhJXkIujElVawm0nEqm3sTFdvzCnzCJHtuwgxd+l5+RMbtmOpiOZm7Xftoi1w4+1WErSxCtAdJuPQIOS0bt93TjXVte/eT6xVOSc7xfyQFDamLUx1akGLfdFWhMxWUJP0em70Jc44/A3uLPT6dw9OLdQ7BG5wPBkVggYOSDmxX6mbx6VQujQAe6Vw5uPBztv4fZvrjnrijHo9Px+n+iztHxO1WXx6zNN+rGUpfu/FM1HQJD3vw4akrcV5nb4MeWVuRUMuWw8N01du7o5MYsR0rVp8muBDuuwiRButPCKjrmAdvlx01HVK/mx9hFS3roUrd/NeO/zYdMUtR0id32RAXuXYRUIBtu22YnKRZIvXhB1GlaOPai0qDmhsiTiPI+HUbEd1ivdexjpQUdTdjl8Bxql/jLbtwxWfrLlo+/tDC4mzMl5ohMVKJpXiNmFNLmvwmxV7ob+blw4U2/2cCFKUV9JREuN/oRZpBcThW0vY5i+7hdPRFuR8uGjpcCl0Vr9rdK73yxcJ+kJOKYR0i7aehFORQ4lHzDgo9ICK+iYBpNV6NI9O8bbjLDxwN7fDMb2vcltHDoVeIRKw9uB3N0l9NQLxu5XITQO0gvt2YatQNB8Kqpj5sTiiRiImgYjfzbcIu0DJDaFqniwYD+mKoinFzdduQCdw4i3ThsgkQmZCXT4sdappCRhaKnJdiBnj0nIub7hMbTLw4tpmJkrBamSGWZ4NEii6hXcKtFmUiYquU+cUiERwTKerKjppol6UZQdYRGwXI2nfZbdiFbRDSqElEJZHuTISEfCY8hYjZCkHLrMZnJIA2FmkzNBcbrSvt22/EJY1jmNPWU40rxYiTcv/qgybfp6nNa2lFEEnYaREksKpD4SwXspZf1jSt5rD3To0ublwJ8v4RacrT1JVTNcibtTPve6IrDGy7Bwi6XRhi0aeWFiJmHcFuSLx+f58dU8lfDdTbXXL256sZCQ83xLmvlLvdG+I2gfWaSEuVWZm/BUiBI/sisP72JAXWIGpSaUvWajBYNNvIN0lUvKfLiQE8dM4I4so+OLUNyptMtw91cov1qfsFTkFtLaXeUwmv14UTdbsRIqnhQVcaoqZLRqUtWECFZU6tA8ZoXkColZdyFdgJC1WjjUZmZJKIlpKiPSY4ObV5bgc5pQKyDxrPRCJFxqvDuEB/WnyHjhvle4NduNMNyph7Rvd4f7LrPk64lGnd82vlpLb4v7qr3mqno6xEPVh8xccY1Js4/jSXKXiDFyY5XohFib14qMgY3kI8nsYoChGg4/KlcJAdwY/Pd/4TufDgt+cG45m1dUtt5ob5LqhSiv29ZJxeHMGHx1C0biKTx4IubbtPqwimkDwk3PKRfajiIrBgfEIu26O7YJF4cZhptt88s0yiJ7lYWcii6+zPdiciE4lR2AyEoiwTL9IoqIj8+BM6l54WqbBBHaBXoKW70/Fu8OKLUidUTCxPJAfS7IRtQ73l93B7NhwqSji5FVYtTRxzGanCM5Jsk5FzfYkgoPUau0PvYkG7IBEUR6BxnD13mOUUiwIyJqyepKpJrj1hus9nby4dS1fVyqQtpCePUVG61DaPwhj9f23ysUlFSNtOiTjgtgPxYah98vfXCavyQ1jrpZbgxkRfHtLo6Ed5kkU0VEQWS1D5hEsVdRB44IkWFwqclw4FVNTcgxfpufQ77u41XAl1YdN6+nEJpSVYLWej0d0I9Fns447xNdf8acRDcLlIacegYj6SEf6e+umWHh0uFrMVDb4k5ukWkSL+qNLVqaCzhgYbti4l4r9p/d+fFRqynKhdTib+JARagklxBEfMkBq6o++BW+9jqPzUaP5CP41sKS12kqQlcFhW7/AI7cEokgIfxY/TVqfs3G1setrLkmxKXtavT8f7enBfnu80N34Ormbo+3Fwhj3tQ+j4v2dGP8VlWgYmeaw/o+kDDTUaznBH5tJAv3BwR027lf0CfEikPp6RHdi9saLD+FEZbSVbvX4PUhSO0wPSES+cS+PDhrREagsSxGS6fQkXTjmHEnkarq2rbK2kIt80t3ij0e97y2tq8q9G0wQXASlyx+z76Ey0CmrIpPOJUUJIbBG7buxw/akybGZLdV2LZUyAN5JwDXSS0jsMRHrxVHDZZ6koSvpIRDbuHHCrlTHbq9yjI5ZZYj/LFdUoawK+hbqxGOYIl85MI/W01HPj6cQ6l/GDcjtPddi1cHwsbYO28brcQbwQERAAxWw5MiJDPtQEU4Fq0foiikj3gHdgh0nlz6F2/GSZqoIn9kiPUHmxSINmY3GgZJqAQW4N8HxiEeii8cEosA7iLCS81jlOEWiTC2UzTpSIVdKFjqYGLVpl7HIoIKkK91u4iHluLBVj4RgimmkmFu3uFB2kQ+HAKQcen0Ff48X2i65WtSi5JW4P0Sxfoyxy+70tQ/gTgkirhSuYDNolelmr5Ar0HAqfyn72OkXThBT0GSRDf1cw4khMHjW4flw1UKxMsZDNnpNJRKekhUfVMMtIoJyDXvFm/SPNhgy4lr9WfBpkXLb1Ys7NU/R6PvW4azCV3oEgD3sWt1RRyCUmHy9QSSYmLUhRAB/IOITMo4dvAKTchCtpBRj0qJDyntw9XReI+m/wBB+gsfrhNpLsnMY/C5NyOkYlh7YKmlorrT1lYMmRIcwRxjIen04fyQley+bBFSFFyOkvaQFUriIScE5YUezYqdJNjt/DiiZwOH0scbU4gWgqlwpEQ3aSo4t9SUutTkstGuOUDuSLxB0HifhoGMl6KJnKo8S2N0fdiXXYO7H7f8qPCHB9g4Yp+JOHWdxDqEsSkBYY97HH9i5X5MuLuIKriMrfeXJaS0xw0kP8Fk+p47i2XoMdxHtt8WNOR9Jpr0a3bUvEiDl63bmqmmIjdaN2Ki6yeYrz6baOeEoidxEkt0e0WLnUy7yiRZFDrOREy0rRV5cfnG7XUawWaemLVuX6NfITLQq6+y0r9JqSzqllVxDcKY2q4rFPpuykgRaGmHEFoL2ltHft97BIp7N+ollBBGUNRQS+xcBzYvVNv8sateKNqgp9jHv3RbiHbrl4hIerCwa+rp8CbqW/m/3S3PKlKTgyH2UCZCmW41LwJPOcRIdQsXGcouFiKWeO3jngoxazX19w7er5i+LBIzCyORjPS7zCpmVFRNm11V26wCRemzdcJ+z93Aezwja9q6IpqLiGorxsiREXpLaIqjbaSpeHmwaOe7UU4ZkRLm/cp0dTT1uprag7UWdDKNTGOpaMTGzuklFA+6OLLQuZs7NwwQcszj3bqNIlUidoXkQK27RLotK7b5sC2scqa1ohyo9qWJdpjq6Au00iJqV3LaWHdADIvKjjm0cf1p25BLzbsb86KiGkIqTV7SaNttS0r6C0nDkwgUnCoCKiqAbR5RK3FRq5RFWTTVbK6ayRcyZW3Yv0M4WTj0tcx0wS0t20SIcDWZeJemUWJEbtIriEfax+fKAnDqidQFqm7UkRJ9KzE87TRbi5FJvw3eqW7yO7xYz5MnOxcmt6rdkknqmAqeIbsabcpIt6YcOlD09crrrbtmBBDMQlq1b0m8ZgoLtcTDzWc33cbKx3J2pIszVFOrY60AOFGIitAZUs5WCyvaSL30Eq/MOMXu5j83w24e1vDR2aVI+gGWgrKsgNdiSm3d1JF4RL+nLi+E3BKPU0kemwh8mBLUJrUrOCbWxAXe8Li+PHTKlsqKmHN1Nlu9lc3pHiq6kn2tLglIVnWuYipaWkQbVJBqMHBNj9BiXIuN3MPiwMZaMlp5os3hoV879N9tqCVw43JOS1O15TpM5uEF84aj9VX23pH4cDdihwvc6OnZttx0DgTydW/iESqWqrSPLHV+f4Kvijym1loAaY6XUXNLT83o+9ZZi+z3mdLpiCUCUePRxa4jbg7Zcw2bsDbFVrCNpVmA2i7Sejqj8fPgoNVQG3DzjAHnx2218KMWMpUjjnzt39Fye5cVv3kY1bbZD4dvh9Kj3FOM3A7kejFJnqcWZOCNIC08ExN0irynhq8QRdDYqFwnjY0tc7TlqWNq7exVDFB9YTHo+TEHJSXDkQEBe7gwSUIz0StRHFLlKVBwV9mNPQ3Jp3USxV1sb4h2RIcqP1lysQbEV/kx0mwm3RDcwV+DBapWjYpr9ZVRuWxfEYaNVGw2w+7idXxE1TnFsUDQ8Fu1Q5r7iB8XDNmZfXQElD8WJ5nEQ6qw3ojb5Qxfpag2b3vkDtLEajRb9uWFxXVp8ZSWjYsJUumMhSjVk2Vb2WCQ4cM6NiiW4nhrSxJRcMskNivNiwN2Vtt2EL9cQ7SWoYoRPcKbxMC2bjekiIliwN2u2zCbVK0cSCNmEb75kSeMMC0Olct2oag3YlEW4CPJhqJBhbVPoPAJFNEiMF50QJCWliFcJapX2XYfOCMsNy/u4kOheimZJAI8mGrhALcSRJX4RUSxaLqiTU1DojapiwR4cuI8UN3JiUYjbbdjzrsxXmmoKWbpbhxLNxtwxb2YfIYWESLBPkywoJYbiWOr7cUKxKKbiwiX93CwldhMhx5eUPKIAqiWKa6htdQvFggOErhxFqMrFNuDGH8pUusCW5U8acMcPkY4G4jsxZkWQc5BjomQF0YtKsItyqGlENir4xdxXgGOlmppeYsWIWoCPJhFZvirrKtylVXyvCpkZYr7qZRLfi0TjM3DdQA5rcD+UbmzRvs3cmGtIIu7kvqyINq8pI8aRW4i3VhFZhmo6MVtmJJmSL0byDdh1ldXSeWakUT4W0A5TwzqIg4PzYkFkO8vEMR8kIOEyRPEmiHNElFwOyIVUVEkSHcA3YbrRbZwnfo7sSykMsO8Nw4U4Du9+3DcH47UjKmI9wqkkgF3Jiey/wCGb1U3N4YiO+27DeQjVkFPKeG7Ue+Hw3YYuF1hghShprIfEu6tVQKqKopmke3FyZ/3BwEcv5kwbpomtdgvRb/VTHfjldwpiadiurUL4utSVmTINuHBEGItFxdhwmXjwpTAUo4O4cRayR2liSU34ZrD148pKN4cP8WGrhIBLZiUUSMh2Bhqs3PrxOSimLdqA9GHwpWjjyYW4WEcekpJPlw1fJAqmWJAh24j3m0cfF5UGUSMXSgDii1I6WZiR2bcEiUS74jxQaoSBVNQLLsP7eWtKKwdKBdfTfrF0mildalip3W4uFbQyKCnEpXCXXirpsDIt23HVKHLBgYrkV0afOsKSREjwoK4Dz4cKMDEdu7EK+vEr+WzBQiDqBcIqXUSkFF0enHSaqNuKyTxYS2Y6RkVv0uLCo0MN3GWpWjVDx4r8wga5X46GUx5R0CuPNNE0SsffaqhiofQMejCyI2lu5cKLK+TCIq4M3pNEAJSTctK3Es3fhp4r6at+HSKoYBfYmnNJVw2qxJr+E9uOXDi7ESmueFNe7AOQnA1006uuLbiUYiGnfeWzEezZGvi+UvBhpiCqIkXRhfXOjTim9sYKoJPqPYaqmtYWCI1iwVITMN2GMDHAgNlluLU1SxgrhWZrshXQqGmymokvR7ABKyzbiyNWuqI3Btw3ZpBaOzE01SDCFx2SaCK5RYB0Bh4jHbt2HjdLlxIJht5MDEStiotOO3cmHCjMLeTEkmIY6UstHZiK8o1NuFtlmGrxmdpW4lrD6Dtwpwvp8GPKawLycuFR2kKyodXNhuUyweuW6LABUFW65QT2j5cWWDpWVqBq5djam0YJGqusptEf38fj5zDK9bpXe3STFulaxdSTpbQbgPN+tPwDivel+2cmKqSwkKu4SHqwM8+Kzfg/a061WEWACDa0eYhVuHV8pFb8I4/cravYp0WipNrGPphiJJUtIi2Dy/L93Gjb4feCiGsx98uVQF8QfyETV3diJXCXpIMJpekFvRYktcp1eXAYWzYqZ7SMjXHqlBozdqqjGCW6wbrRuHzF9w8TWVTKYiEHqD6UUfuVV9V5d+icdQ/KOCajh92kYN14tQ/F9r+S+MVgVDoi2iPLRbCTj3EbJoio0VG1UVOocZLzSyzksup38rI1F4x1uauLdo+Ui8WNbAuouFpIiQ+EsN5iMYTUc4jZZmK7ZcbSTLH2w3xyyO94C3Cvtyto3Br2kEMj8004FNGnKieETJwXdOVS/ixeH2caEUV+risB8m64cZKzFy8ksvJIvSlc5inB9w5t+UvNgl5MZqo+lNvSdRORBtvBsuXT5Sw84hsrdc35zoNUtyWWq4FTl1Sp5UYpB1cQmluIx3Ddjwy9qJNhArufbiZg6cbzTxRmUqgzvC5IlitEj8OGMzSjmIK5J4xe37Pqy4ljAC4yZZZblppcq5TnANvpcYoRHvESL8WOQkmA7zRU1PNiGZxbnWUZtdyl5lp27h933sSjyLWaCTORRPk8N12LHGGwKKnpTljNoyAqNnkWNurbdd82JpclPSyJFcFFEw28txWYqTMXi6awM2f8XHvbv0QYtdPPmK8LwxEv6yanuIuQki/FgWray9YqDm2QqPYFHSZLgxBchSK0iIbd2FSZGKd6Ubu6urDggRZuE9Lbq4UFV4grYe5Mx2YpJ3mBR3qt+j0XeIbS5cSSKtywgqe2zaWJBwCLot23zYbrMD0ytBMhx9zxPcvq81MG7gVhC4g8WLMi4RcFtMSxSCiV2x394nd4bhw7jm83rcSzMlBD7W1LEXaQajaWpfHCCMiV0QYLOlLAAbcN6opiqF4lRtTz9AFCHcmoFt3vYUh6v4BPhpRgVodSYbvexao2ch5S3gnKRKfqyK08foTgHgbgyvoRbrXMyrLlIox8OHx/wBVxjiniziq0V2fSNxZH2ZCXiL09H9EPKFol7FxSz6bAglCV0ASvEtIea/3sT/qXyYnKgeNoZRi/VBIdVfQVu/VeLEwi1bKpiYGJJnyEOO2cG2628Li9baIu0EpF3i6dv4f+1zDjS4XDi51u5Vu0hiPdGO6P1qklFn4MeRizu34vSzNmKd6p22b8MVijUh7o7r8F8S+UKx8KAI3R6JFy+ki/okdm4FuF8KVC3IR5uVD6ZYnHmJABaZ/LiqzBcUn6QDbZuwZX1Pxs4imBvNwXmFpfhwLJmIXYLKNnSJagHaY4/KXlB4fpbdcPOlrISpXtQx2iXxj+C/UPAV+fraHzfcJDUM7pc3dJKBTkiEQzmwDXbuEriJPp8eGRJaqe0+vF5y5lDOFUZr7k0lDHd4C3W/NiHqKnzh3g6Swqt3G9Ly45bhU9LpNFyrdT1RJVwku77/lDqwzWQAS6bfFiYJvds6erCKzXyXDi4HVcoVRUEuvDhuuBbzWTEbeXq5rcLOGt3KF2GLhgY9FuChIDX2M1Mi6TSIrfTj9B6iqBBeJYp3rZ4zdEi1tXHwkXLi1saOcPR4v10g2It1opGWPO0otanSQxDBNni7MNRFU/dxT5BT0+kiNuGrb+jtu+K3F7Uy0lXslorySCjXSMtYee/pEsS0FGM4xMYdKHJ9MEX8WEdgeYiwfTY408SZ1EoOOMRKRKaia5hZalXlQNtVIo4bFUFQIbT8vlwGkpaQev0/R6Au1lT1yu5caNgaFbMmt8uiku4cblRtHSHy24FeblJx1M1ExkotHQavRPVTENgmOP0Fx/b7zd7BT3K4REmx1D7RfH9Xo+JcP4Gq7Rbb5UW23yIXC0l4eX6/T8arTpFyokmigYpj13Y5SiFgV3ObhxypJtx9FyR3Fi75YwP0lmCcukbmbKy/wKn4ccSstorL5Wt2+mw1F+eldXu9wastI5XVO0U3lKLYxkGxfmB8Qtz3F4+TENoopJ2pB72CrmNDSTxFiEbGqrppEZFb04GirUyWIDuG3Zbh55RbSFjvHVmW4tiI/K9GHSkHA10du9tz33JOERfJ9OKjuFNUvLiSi3S0c4RfpGIikruuxzcilcBdOGJKrOCsvLTxgRIj1LYlrGKslaPGaot1mDlJW/pEuXbitJn6QRuLbf1YWQp+UeEJoRLlVPpUFI92HryEfRemi8Zk3JUbhEhw0eoanK6yTRR70dKXsVdNLqwuDLuyUcnLcGYq+jVUEeYRG4t2Loxo6dl40puzQZgrZdfiv0q6igm24SzQtPVHvCLaPtYnKyrI1xeNmB2XoGkZJ7dMOb3iK3CF/MN0Wmh+UryJ2WlVFa/0zDr0MDEhJzpAV12zlxqXNKJL00PTCSi6YqMGwpj+17of3CxmaiYRZWYiUVdxKrpAXx41Fnv3FKQiyQERJP9qY+wX9PewWboCWUW1Kbg4QVDZ+0sp10Tll6RmiMiaMjS1U09127d+HD6JkTdfW0LSRLl224tVZRARyCzbRt0nyV1wW/pxxCgyBn6SapbRHfgXOaOmwHDD0j/ZP2tYzXiXR9JWEeOHRgLMrT68WSh6XOoptFHgCctw3L2lbsxOZt5XJ0zHjLwy1yKqogTYvN5sK+vUzdSNMRaiVBPgDuUhO6ExarLbuXFaX/hVIUSMkxV2nbzDiwTxPG7EQWtQK621MubETT6HESqKJgRCZ2jb7WNLTaAmKO5ZJsyHgHxaQDae74cWSiWQSNZNwVMe9AzSEupUOQPZIbvkxFzSDZnLKI326SppFd04KGXNAovYcanPUF1fqxo8o7OQ/ZPG14NtdTdby2Lbco6i8OCyvF11Yt9oJxwo5gxHxEropTUbKEnULNFNKWbh3TsunyF5fHhZ5/DdPi5Fsqgokr3qfWkY84/NiUj5IDJN4KP1d7zXfolQ22F8Py4YzDr6OShT2sIxcgQJPxLkQPlBf8J+4XTj9RXmhar6F5otLbgkJR9rm/P3L842192nqW47mykPyeT8/H+9V6v5aRkHjdtIW6jNARSWEftx5gL7uLHQ84cyxsf8A8Ybnpe0HRiSlodjN0caiqoH6WCCq7FdDlU3cpfDikZdSHB1Hwhcr4DS97mx+RfJdeanhziLC1gUe0Jsu6Re9h/X+S7lxRSUd8sJP5epsZD3vz+xE1RIBHbhmoXgw+UQ1SvLEa4MxU0Usftijf6wPtL821IlTklBVsw4Fw2VEdcBKwrxuDlPxYjRvLCgpGXlHFrrAkoNVJApjjwxQako415AncWdySx3GJdJ4siyoJfpsRshLcK3UebrW4XXJ8+MVxpwlb+IbU43Wllx1C4XL7S1HDXElXZa4SpBkRaY95Uw46UjPSmRMi707fyj14ptd1E9h36TdyCot1S37eW3C1aVjIT/pTaiXDJX7Oo8UmrZ2fkmiEWp6OJQSEu+ILjH3ufH5CuFnttPc8u3nmN94ub9eOH7On3l+l7Q7XVFMLlwERcLl7qRXrwnBJgg0ERDqx2xmFl25GTa5Y/siEub3cRVOxbl5dr6WhyiRJbtnmxILxAOSLg1UyWQDvNMS5sfTapmigKakQJRGbaJtE0XKw6wfap8xARAWLAwgIh8QvpNinrpbRIuazDOFpFoxcE/X/jBbvIOLILVuX2pW+a7mwuq6pvD0MEpgKTUpiDIRH1cyUE/EOGbikYC0v4FRH+TMxxJidvcoAXvY8t6TUTJJVbn8OFw1NQHOrFUHlBwnoU4kTctiPp1bvlwunVGYVLrJoxLP11HqpXCBBvDxj48TroGaCIpiNqYeHmL3sPGrkCBMkWwiTe8rR8GNPYuKbjYakaqmcIfwS282uhu9N1GrES8Ss8O/mHTFNzKM0mjgwv0BO63Egm/MCsILsJxMtFTLUTQWTJT9KPhw6Jq2Llx+/LJcqa60LdTTOZgkO7/t96/DV3t9TQVbjD4xIS2qh1ZBItW7ibSeqksat6olyHf4cU5gTpe83AW+gS2j4sF2Qhmb1HRdXEPPbdbiiTMQpGu+G9G5LoLH5o8sXBPmqo87UDYiyW7xenVj+9d58l/F3nJrzXWuSeHb4e6P7lDO/QiugJCVxYjnTRL0DfzF5R5cT7VJFVwN9toD045dR3pVdJggBF5RxwVgyMxbFdZqWB3EmlLsfStJtTdHdpXFbgppnYPmPFQpuEeRhqqyW0leUfCGLG2XP0Lf2ejC/iGkfpakmKkYkPKr7Q4xUUwvsFISUsKV2n3pJ2ldt6sOGZWuCAdu7DHXsIcLD3TgreY9+MsQ+hNloyMZpRrBA0PSWnpDq7vmx50B2kI45pl/6X0KgaoWkCe4Sw/SQAQFue4bdpY5i6ZA6U1hcSJpwpKASfrNFCAsSCrwHDYvQB7cNZaL1x/Kkal2Ku6mXMOoQLtlVBAeVMNxYNaYGq9XuTFpgarUG5WYHiS4nbqCSW24h2lijymYzRhMqNOENdFH9MO7EXUlVm9UKN1lRaj4dpewWKyTVgW9Fa32sfsvyZf/AI3Ulyt7d04jcLtBkLY+iPT3i/d8XxfrXGOJ/KW5QVJUlrEdOkiL/ipCpqwZ1Aioi4hB28qhHvxU4qtFoRw8ir0OUNpefEoozWDoAhxSX1ESR1BIVCLwV+IEAFppeAB6sdf478mTDXB/mLhtkoi4JRliW3DHp6OnH+mHxpJwJxWJ8RlcOIHBHs4yj+3Do97D+uKJNO6KiCzxV9deZ3Kbe9xFVs9D0cOlFAKqiQmr4sUunJ9Rq6JtMo8J6Ei78SK27d93DKusyGjx24SgyTJq3EEhtx+LvMdSxXk2Y6hX6gE2z7RspCSrs1Om7dcS1XFsoZWjb04ueuZJp6npuLZ3o9WBDCtXNUVEzZJOS+sK/WBHwdeDZLCbBimbUBFMLALb0Y6vTeT6puXD1ReWi00/LHd+v0/sw9KxV14pprbd6ezOjqe+j+r+eKNOTOYSMi0UpWqHILJilakahbVB6kiwpVHqqWjZOGjnKafBEegikW4LOXGfSk9JEjaq/wBgtm0sO4eReOnykqk5XKSSb2D3v24efzY5xRcLP8Ru9WpCi4OoR7xD8X7+j3v5JhVvMWU+svFFvm9n2lc88XDBXs/TT98iiuSQNzS4nbarqiN3tbsZmoCpobLcRqr0h6xmbQSZpl9khdzKl1XdPvHgp5y5nE9yTqBg2ilbbG4KkQfZHxSV3y4ymVVoukRAWaqhGNvJjTcJcPVbNtcZq2yEScL5voWoo3GAzBktfTueKQ1FGJvpRRtBS7FL6yhcRNiV5FbfL1e9i25eRMkjUT9u5fqvlSENVXVuSLwmPlLGLomZUcrNWD1ZQ02o/ZlttxtLIV4zcZbt3wKkX5d6qxK7vKPy4R8UWxix23LZDdpkrnC6NTautYyR+h81p0um1TTT5sRdNwrGGz3hnru5LV79K7zJEJD8X3sVtCoPWtSqSiTglfQBWXXXcuEsw68WYuomfUSHVingfWBHaIF4vhH4sZexsuUFYyEfErKq3vhS5TfdKS2Os6WBQgMEtG3pwL8yElpuHcOY5ERUanroD1K2fzbsStJ1swrOjU6hYGOm9a383KfKQ/Fj8W7pqJgBF4bRx1C91JOjkNbSXOqFjqrsi3CgrH1VpLd627k9hdJjiyEvGzw8S1O4g5yEN3vDik11F/RmoFjG7g5AdcR8PjH493vYiYuZBktrIObUTVuPfcJYzlhutw4brM2jcISWiuFso7uxF8ZCiAt9XbqOUnKRJh7d+GrORCSRJZuZW3WbgtwnEyjOedEBHoCkPdO7ftfIQ9eJ5Rq24NE9ouALvR6LPHj9OcC8d3O5Vg0lyiQlzRiS5NxTwbR0FIVTSSkPLypm3E9x4kG5H1YRTHbhQitHHYC1rmrWhJyG4RxG8KBFyYcOHF2ExcYtbEgFQcITJLNWoJFz4nG5W4h0XGHia+BXxI1a0QApASPnwtqhdhmm4x4SvwIQo4SUoikHPh8KQYjWato4lm6oeXAbqOaXQgY4UTvwpzYUFvtwMSJFeE+XCyZ4TRE9TDhQTwOrYpFZIMJ6WHFh28mPW7cRmvRTcgAcIqDhwoWGqhYnJeikeQsOmuGd3+TDhuWPEvCKmm6tvNh8iqGIUVcKcVZ14FIVZNTgq4WFW/ECL/DhN/uxXlqc1NJljxK4Zpur8KauIL6lC/uY5Ebscid2Fk8eU1yKWOtK3lwoH97Cw/3cRkvRTMksJqJYeENxYTIcekvKJcR1wlio1FTiK6JbMEBQcR7tvcJXYJYfJo9KrJoDFA2YpV4w75ICJPESzVNLYGDNIMwNNTZ04GslDA3WUWS2+XGopLh1gYurOVND1c5NJnxX9jdiLcPAJQr8PlB6DwzUa3Ffhg1FAukR7Uo3VAh6cNXW0r8JiKwEWzCwpLK9GLYwOSqkRjFct2oOm5aofFipyES5avi0ESIbr7sX5q1ME9+3Cmlbz7sSbqypyVT9CNQIyTGj+JFS87hwZqffmqiJ4HMeSLcr7BHF0hXja0bVhwhuvujUn9tHKCKIDNxiSRVxV2rzlxMN3gdGMuTSfCSmA/vY8Qhdhuirfh1zYqViRUG0cMVEri5MSWgZFhZNqFuPk15QZJeTHSe3Eksz3YYqJW4+ryTL+5iLfcpYfEfNhi85ceXlAvmoGJWBuxTX0GCpFxAYvimId8ltwew+YbVS42JIV1FREU9HcBD7JYqKmXja4jSWVHBekELui7EWTDdyY0dNdX2h3JHU21h0tQoQvKIctxKxa7FJqSmX7ctrMhHxCGNKDBgRXmGGspBtnCJIqthITwypuIyaLUlNdww1VNRHSsjvI5yO+zkxHkNpbsaGqKim3eA1R224Ec5SpsnhBolb4sba33lqtXNbzww/Qah1KrY/R/uYkvULklLMKKU4/EdgXYak+13khGhqeUVElu34TIcPFmDxAe9RIcIkkfgxKaqJow3JMSO7DpO/CaaR3bQxOQcbxTpMFQIh68DPuiAyR1DTFUFEV0xhn7wb0ESLE5F5fVC/38NaPmwTqVg41JunY2HZi/MWrMU7BARxh7hxGbRRbFdSt/CzBiJOkgfH0hKxqwg6R2+LF6h2QIKJ2hbi7PGTZUcMUY4ElMZ6pupVQ9qtLTWoaX1SdMUto4sTNDESxSsxPNv72M++SdNJ83HEo1xHo9OJJqOATVwqYa/3cSCY4i2+JJPFamnApBhNYDtw4EeXCaw7cQkvJqiru324dEqAlhiI7sOhEOrHlNYBgYIG7oQQ79wryiIeLE/UNTGwgRoyLWvRIzVeKDuFVXwiXhH72K3xCyqimk/JpZtuEbrv5uI0icpgosFznSG4uktmPybg3mnNxfoDImUjQPrWKOqMw6paNRIiZJMlR8xgld9y/FSRmZRm5qajYy0ePeaQkW3SsVuu+G7BQCLc05XcnLvJdkoU4k3XFp+l5dIC+9gLz793BLPHSjPTeTDlVQh6km+qVvxFjrdrw60IsBqGIR8XRh+CzVaOUOeWnUX5/qjFmnTNTRNFx0Q2fRCrfj0j0WjlJVdTmsus6R3fHibyi9aS9VTsUuwj0Ba2KmmgvcreW64PJ5cRmVec8TNUv9BZdszRfK+kEBeq2pASXhO/qw/aUkZ108qGn0XMeTpVKOFcVSsv2/hwFa8cqp6jdKeQjL3ub3lbcmidoyrre8IkXe5UTSSRN4o2SWPUb7VUlBtLHRpAPOY2+HE48bosI9mz6UgsuxFOGaS5pmqF1nLjP+UC0U1hvjlDTjERj9LDpVnBt1dvVqGrfKUpfRx6FFzcBE1TEOIWTaCs2cDuHw4ypmJl5MZZzek5BRWPcHe2dW7VfL7WNiCIBy+/jiWo2BrOJcRU+iK7JXpHmE/EPhwosPEZWZyB+qLdgmV1t41Qy5kEMoM4UHybek6ncjp/ZNXZF8pYLRtXLO1ySxKN77QU8OMpZl5cy+WU+o09Jm5jjP6s76SDwl5sFDJXOMPQKNO1KvqfohWIuYPCXm82NJfLG0835ytmoS5UDarkQF1Sr3IuembWiX3rLSTVFwGkqRfLhxOTziejE40I0eMdKgk1VTvvHzfLjmoqcBVi4OOPUA0tVJGzm6tpYgKTi5GsuEdi7JomSBr3I8yQCdvudXw4xrLTBh1nHlWjIoKZN/6YKPWp/RTbOlR+sXK3KqFh1SiEkzcCi4EkOKK5e4cOaggWcbLQrZACJR6uLZVZdW5UhuEub3fmxdiR0j0jtHqwvq6tsGsMR51AndKh3CXCrE2O63mH2MNWiVhKAICmnce0SuEsS9SKtEmYuyWEVEttvUQ+ziGTNFQhMMLmiImpKILr0t7fRf8AlIhwzlE1ibiig4VT3AZkPhxJErYmIEGF16emuEbOF4hyKbzkU0tvxYmDmIlIlMjBTTJNJ4zTU9IiQmN24cLxrNszcEs1DSv5x6cIxLfh49FmruIB6cIk64d0ojYQ2FZu8eO6eQCyUVyuVRUPjIm4x9G307un9f6v4rjvlku9XbaFlhgoi5KWrd6NvR+r9f8ABWhEvIN2HSbVmqomarZAi6SIcQsa6WVUTRECIjK0MVyvHcjHTJRzpdUkWgiVwhad5Bju3H/GNDwew31lvMJwtI+HmXLeBuGKnil9wWHMsRHco2sqiVlKiVbpgPANO6S859RYe03I1CkiizbvxQaqnYBKh92/FXUVbE4LQWJUT57ubD2PduWnpTWJW40uUsfkKv4nuVRcHrow4Tbjndxjp/Uv0+xYaGnt7dtJsSEe8P0le2aEIwdOuFRcrrHYbx8uqSpkftHj8buUnaOsPKdxhtxWkKml1Y5Sn0U2Wg6XuJTT78rum67lxZ5lo/pRoPpkgtRSEB1h3D7WMNWYOuOyfOThd7HpxJMGGxYGI6U+iHwpPUTLvLP1o3YaZoxBvPQNQgCA3jpK6JfNhtHr+lVHiOOaKW8tpY5kqi0WDhUYdV60PujISH5cUM54OxbLT3VeLHa5nMouiCD0R6hjuTNc93w4dVqppxQqiIktqiIiXmK3DCJkzbpo6qJoIq7xu2+7j8rV2DpqzRSPq1z9vBWDRFWzxV57kwUAR5ublwiRXLC2V2jzYdjMNlULybEK1u8fF5sNk2/Feklj8d2CBwhuXpQSJAimBERjaHVhRNuiomJ2XCXVhRRmiSekVumXlxGOpg2K6LZBiouPKOnuuxaAE7sUhKadUdERo5oRSjwBJFVe2227faVvzW4KNa0n6JWcGU9EoSA26W0fDiEgaHqppJRNXOIkUAbq6umSg6ulykVuLO+Vfu3TpylcSaSXdD4sJrlVk5Ug405tGKpa7Z2YlpVSe0c4aDxKc+qHV9mI4teX4Uwwb8e/qdBR842WrrgIAF2wbcUiSzHpGMMjqCdZD6bbTR1LiE/ZDELDvGGbzFUoQF2zBgqWoqoNpKHb90cbjg6/VvC9T5xfZzBHvYaR/b+9CX/h8L5R9UJzLHmj9S0OoqzdESLVZBUg5hErsM3TAHCKiK7ZJVM9hCoNwYE7c2zWpEZBg8XUUjGthqIXbkgHlt68Fzj2aqKZ8eh3ogX2vXj9V8B8escYMOC43lkO7u6l+beMOC3eGHRJoswSVRi8saJiCUNKnmq5KnzOQ1bPZv5MTEfCRsMiojEMEGyaqpqkKY2jfiWLaPPhEiPG9o7fR0UerNiPhFYyprqmq+EuEXiJcjeN2KvNUHFTMwm/VMkEz+3FLbceLIoqYcoYbrOLebELrZKG+NZFc2JCOpSt90q7Q7m0jkSVcrfL+Ok2TaGgRbM/Q1CzU8Py4jIXLCKi1BcySxvlA6bLQ+DrxchX5cKX3DjI2byYcP2gsw28xyUpF3vD7yf3Dju81rWQDkR9n/t76TFIBGwQEfZxW6+atl6dca4CRJWGkXhO7FoTE7sUXNxVZCPYs257XCpmRewP87DfjmpGi4fqnXe6Q/O9CD4RYKqvVOIlzfZ9KFxtSVUHS5fFjmTb6DLRH7ZwQoD7xYesz0kRAjJQukiwk/X0nsckQXERKr2+K0cfh9sixd6F+rxLUrPQncVZDrKokumk6AyTHqC7GtZiNiszKaaOKZeB6VY10BkkSVqiR+YcZAg5n1NJN5XhhUUb7tMi8uHzGvqlh5sqmh5RdF6ZXGSZc/kIPDj7Q1I07/ajIUrudqdrYm0USFFbtKQjBoMpJEsKS1zTd4tw/NgOSL1FF0ILmmleVu7qw+zezUlM1XUZG+hmmg8VUbm6FPcKukRXK+TbhnKtQV9BqWCQ33Ddh5xRVUFU4zjQtxGOAl7Rd5U8P0VZQUxNVxSKRfJFWPLyvI6lZFY3gkum4GwtHDOucyJaom3q70kmSaa5KoEQbhHdbimqlwtoF1jfiNkHQc/UGMk3bGCqesR1LQBTtTzU0k/Q7duDN8Yl4cT+U6sO1qpE5lZJJMN6Wpykr0YgCk0n/o4c0S1AEyuENtmGYpegU/yXc/TjX2itK21LdRGWWQlH4vQqLlSdfo3KQijIYo319lLT0pbULJEkluKSVVFI9i4GqIn+LBKatUWrdNs3RFNNIQABEbbcZwjc2ZumogYZ8iq8jyVSsLrQ70SwbaJzNhK3cCjDRUmSnVcly+1j9JcO8ZcMBmVwkLJORlL0avSvz/xFwpxGLTdM7J4W5RL2fQpAkASfLRV+kT0DdNSs2Xhz/hL48SjNAJJmoi9ZjaYmCqZbvKY4TllwfsyWjUbnTI+KSSIbbrOn3uXDqFfovSav2e5nKpaqW3eKtnJ/TrHG4o7hTVQSYISbLbHUMf7YrHv0L4D2oxIftf3w+rFdU/R8VExqkC1JyhGq3jpCuRaV3h8A+XAodMPovWRM2Dwy4R0AiqXVu/nYOJHpen8no5sDDNH1cwkGkqiaBSAkN7Qv0odJY4h5R+AqO1j/AIktEWXG4kQ+8Jen0F4vrXReBuJX6p8rXWkTguCSt6suybqlGvD4NwG/TU/BhqS+q8UZ7hUANXyEHjDFDqDMP6RtGwuoRBIkrAEh5g/m4hyeTAvEXMW8TQ0d6QkRWgfWPslhPw/5cakCErzT6uYhLd/D6vSmdf5KBdaLqjkfZLvfv+tFBw8Bkn0kWIN5PLGX7uIuCqNtUbUlVQVFYOnm3hzDhN460iIBDH6f4ZvNDxNSddotQ+0MVwHiS213D1YVFV6SThaWO3nK7FVnpySSbqtnUqkXFq3Agkl3oB7WHxayvNit1UwWBRm8D0dVgYyHlms3XeGHH2yLsyEojtIenm+taHyVXfK4jbYcEe0kOodpdHKoFw1BQttxCVm4scvnoMFE2zO0yPmIdulhss6WS5blBDlLpxGLGsawmAEV/Pt5cfjBtqe5frZTDdfVEe5SHS2iWJhmLbRvVMbj5rRxV2oACZAoZEp1iPLiWRemqI6omI9Ijip9vuq8RUqS6KX2YCQ+LHZJB9qVtweLDNZcFAEEg7sMeaks88o8uA48ysT5OxVQVeW3CLgNVUgEbR6ix+qKooEmkgBEoZWj5cfukVwo37fEWI+2vJmm1cndYYl07sOmrB2l6e9DuzEwIcSiMQaSOqJqb92OmOtcVyxe9iJVMtqG6trkq+wVUpqW4lL7EuYcXxGUB0mJpGNp8uK0+jklfSTcw/sK7x8uOY10cWsLZ3cTc9u3px3DyP8AlG/w9Wjb7gXudz6Jd7936/5rjvlO4I87sdboh7YfpD3fwVtFwauI2omYP2CgB/GA3pYUJ7t7oLRw31esrrsfsi5WimvVC5RVIybcGK/LVDd37VWN1LG5slVI8dX0CBARF4cXGIjmzBMbwHWP5cQ8XG8G+eOS/Sq7PYxJcQY8hljkXk08krfDL7lyuGp6WIj7I9O79+P9MF03j3ymlf2hoqHS3pl7Rd392CUVFd2d/oDSHzYSTW4Ve1xzY/eIMh58RstIotVmoFb3pmO7GY8q3kntdPaqq/g4XWNxSLdLH3vwT7ybeUm4VVzp7ITY5O3Tyxw3fipZFwWsR9PThwmQJLCetaJ9RFiJbvNURtDy4fLF3I9VmPxw43HGK/UCvhZkSCLMoxsSfpQJPS1C5uXBCy/rZCbj04pwdrxAdpXfaDjPvpLrD4Sw9YyK7V0msksSRhy282E9XZWKhqA+hLH7a1UNxwWp3PpWFPlEiLpxXXQh6FPrOwrsQtFZj+iZVCLlzEVz2goP6TFweCHp5guHGEOndt7uU6KQ4NlSllurO8k4RSnJCNVW+tN1zFUS5/bx4SC3aeGPaCRTYVExkY92LZ45S8VpXjiBpmo1pFFZF+BJOm9lxCGxUPFj+nHkk8qzXG9M3SVg5dRHl2lHu/gvztx75PXeG2vOtIUmfa3DL7lbte0vtsLa/sliF4oC5Dx0K528+O45C5SNYofMKkkaljyeMO6km4bC6FQ8BYFNJ5ePKqFZbiSZikrYqRdJ+G3B04o7Sw1Yt2bBNYGaIpay5rl7ZY5vf/Jpb79dW7g5p/3B73d/uukcP+U6usdqct7Wov0Zd39f9v2pnSdEQNHplwuqu4V53K/N7PkHDypEgVh3SLcC1DHurfHhYlTux7Vtxr3OH6YLa5a6YctshIfnLHjxBUu3MblUlmOCQl81U700tKtmGuaJLuBG+0SwhFi/arN3LoNBxfeSXh8v3sXfVPDJlHN5mUbxTk9BNV0IkpzW7tp4/LXlU4HovJ8xT3W1kQlLvbejDpwIfQv0F5P+MqnjV2oobkI7ZaR/gqPmwMq9jVopmGnEyrUzVJJIP4xzABF7o4BT6nnEMybyjdymqkrz7bSHGpSSWjXTqBkgFXSVNJUSDFDqTKqVZM3XqNyLliZXA2IbjSDwj7GDLm1WcZUY322kTn+433fR06f14e/j6P5LY8F3u28LO/4fuQi3L1bn+5q5v1Y+976zjOqv1ZbjEmy4ouDtErebBvyYqt3H0k7ixeFqJFbo322jikvIu1m8YPkVFOHE12uwrhtxG0nL8BKpKpH3Npiqp4sc7uLI3GjyI7V1HKGgrBIuZHmiZN4ck8LvSTSErhHFlzDjm6eVr4Xn2z9LUt6r+YcVHLFw/lHbuUp+BUeX9wqIrpbfdMsT9RVGcrMBGy7RdiSSSok2VStIdu3aWMBVUb7dYLgjpHV81NJN1R5bRJbsy5mgypGSpV0taiySN+kr4Urt+NSxFWR9QU+k9gnSS947CErrj6sfNeWiJun5900gnivBmJkI3btK7lLGncmpySgabavGrYWIrbhbWbSDxkPiLHV+HuFX+KqkmKEh2kS5LxrXscMsdZqx3FFXLPwkWFKt6kNbSeR7xICTLq1St/ne7imwMuzqCLcHKNkhcGltXTssL2vHiQzirptNx6MErDyHDyCoa66SV1u7x4ruXuWUk4aOERfizKPcaR3FdrpGF14+5jP3ThqptVTlVLZCQ95GWi5MV9NnsOCQqzQZm/T0Y5YUhbmYH1W+XF2Zv1m6KaP2ogNm7Fbj45nDEoi1bCleVxl1Efmw+4jH6c4W4BobbbxzxzHC3F/XCK4RxFxzWV9cWQUWx2j9qSnOMAB8OOSdXdeIFR0eOheHjf8AVFiuvKUULCJFbhFNe7HRFdjwjDSpZs0smqfu4fJr4h9W3CibrESYmvC/BTiK+HAr+HEGLrDhN1gNymRzT6sCau0cPkXWIFu4uHDxNW3C91hMW3FaGrq4d54kES24qaLo+nEo1erePALrCYNPqcRK0t+HCa4CWIkXBq4WTvIrCwCQosSUg4eIgNg4ZqODLlx0TW4sLcKA4pVyjyAyHCKgniU0rdmG6iWPLyjbf8eFBK3Cyghhupia8lhcHj2ueGt3+XHrv8uPLycEueOk3W7DEix7VxOKhJTzd7u58SCLoCHnxU03VuJJu8wM60pCSsgq4WTVxDousPE18CkKvEpqSFXCmrtxFk6x7jNuIKSlhVxySoYjeNDHJOg8ePLyklDDDNYgwzUf4arPfPj7FeSb4ubZilyzXiFCsxZHjraWIVYgIsM6QooR8ZqtrQ1xX4T9Vh4P/q4sBBhHSuLDXrhpd1YVX1GGkX2I4UFAB6BxMLB5MMySsxYNSapyATWzbZZjnQAufDq3/HjnS3YlmqWWm/BXcuJSLSNqQ82EUUr8SzUbyxS67oVjTSsUauZJ7+bE1H36mK2z2kNuLFGlhG+moKxNeXEkhiHbq4kEVduATRKkBwoH97DVFXxYcaoYrXlyviNcDiQUVDDFYseU1DuBsLEe4I7SxLL82It0O0sTXlFqFhm4DVHDhwdhYTEgxaKqUao1DwYRUZh4MSill2OSsu5MTzSXoqL4ILd2EXEWBCRjiYUECHZjkQ249mkCjlIfzEWYiodmB7OQyLz9CN2DlJMgcCQWYoclTy2oWzDy2XCJJZXUIOjFB9aD0i2BhPgFt2zBEdQJiXJhmMcCRbgxqPO8xWf8zQJUdGDB/sVbXD7GHCeWISSgotbUiPxYvWgAjsARwsilaV+BSvjo+qVg2Omd9YMlURyMWtE/Wo/Bh9F5VAwcCar/AJPCOLoi/WSGwT248LwywGV7q3dJEjGrDQtFIRTdvGosBEEjIsSyC+3DElbseTK0sKH3c1N2hgpQiuxz7OG6at+FkzwCaLUg3DEw1LEO3PEkie7AxEpipZEsSjfEO3LEw1VwMatFSzceXDwS3Dhi3Vuw6FXxYqJWqURLlx5zy4Rbqhp484XC3EVFMy2cmFBFbrwmK4YWF0iXXjykvn3MPUXT5RZqFqPQOIdRVYlLEjtLxDjohWIS2EOHUa3RSJRZU+8x+VQi0K/QaDOfKi/pax0wCqDKVjXWglplauSXslzDtxSoFV5mHKk0mG6us6K5s5TH+LGP4f3sHjNthHTdGSaUg2IgateJSciVpCY7hwHMi6h4CSUh3jm5Mx7obeU8dDtFbKzYuNjqb/P5/us7VsTuAt8pIjyOUNLTYp+hUFEHCSoELlPmsHp83Thn9IprKFypESoKu6aevEnDVYTu4ZUDutL3MEduoBFd+Tdhd/FtJlmo0fM0HKJ8yayVwljO0PEb9E+ONQUgTCrtjVQ0QjpJWtxKQMtHtX7V5xKKo6qWl4CHEpS9LtJlw1BY11U1eZATtIvKJYqCKSLNsDVFEUgS2gA9IYtlJTaTISZm2VJRwV6Wnz342TPFFBxveXBvrLbYODiIlzCXLjL38fqWDqeHavhO0D5meIibKUeUh5tPxIk11lhRzRrGy9O7W6vTrmRKh5r8Uz0MuH9NzcBHy+PE+K7lKSWjnSxEDr64gRdP60PjIS97DJZuaQF6eawurHAbhRVdkq3LbWOSJssR/qtxbH+tUzbkpCQy+chPXFKBUoSLaVi9dgrtLxBt5sZCzAoCVy6l/wCwZLsHBXNnA9XlLzY3fUVQRzdrrJF3yRbtm3+dgS1NTHoq9FaLk2FyL0TNJP8AUeb2sb/hO/v0Gh7DskTcLUNexq0kO1UbJnONN2wa0tPyS6Ao/YLDzqfsiLpwWKIiWa9UTTeHkXrBV2IOmZXXCIXFcBCW0txCWMiV5RUxldUHoYLrEoiqOq1WH9KGCLQVb1HUjuHpp1OqoNnAioqsmFq5XlaaVwbrSERHGquthaqGyrKEuhtz/wB/nBA2+6u/BHx1CjdVzuZqmQavBciy9WoLjqIH/hVxCJDf07RLE1Rk7IuqVaRVTyD1ZdqIq+h6KQiTlXqSL9l+McRAMAfvibiZC3a23buY+a32cSUuf5Y00UbRJUhSHy3EI4wb5ibQ0mA/+P56U86uEpqfa1KzQcfWGJadu0hG7DA1Wdyy3rFNdFVc9IbbSEPDhgTVZIfq5kQ9dx82EU3/AAawuQMUFALYWFoU48invVvUanHEi5arcW2VG4SEdw+MSHF5aVVGybNwk6DvtABQG60EA8uBVH1Q5Td/ldAmKSpncSYW83l/DhwhKR30hJtIthUjbhuG3cPm8uAX6AnPWcqgbQxkiLTNZ0PT7717JSvEuWqg6DFJAlLvFcXJy+bDLMbNel6vl0nkNSpM0gA71/TaCq5ny3dPSW3zYrqj2kI+oFDZw7GQZt1eYhMdXzbsWx/TVD1pHE7p+KWiXxj3Qpl9VXV8Hlu93DyxcV1vCDou0JEEub0f1SC82a33wY3JuQ/ZVUj6+RYKC5YRpKuEuXU6TxVp+el5t4o/cmmRLK96NpcuHCDZyg0c+hyjaoStoj97DFZtqj+RU7fZLDS+8SVvE1Z124lIh0/wRlksNDw8x1a3txFKO0mytrtm20EyELhux+N1bdhfFhP0CKZCImWzD5qzRXFYy5rsZ89I6k6S7RwLZwk7G0iSICEfFgiS9ZKzCAuL2yDdUbib+HA6RjFjG8dyYFvIeYcTf0SMIxSXay7ZyKRd6jyqj7uFtWww8Qke7BUFGciUjHxzS0jQRTIbrhtHCL6GD0r8S1C0rd23mx5wgDCEjJiMcHpmuYLol+tDd+IsWCHlG0ummFl15W3eHATxOs9qKKaf5lUVmRqt9FW0k/CWIUm5goQEZFbjRJZLekm/ofyMo2TZEF+sJWW+1gIzpxcdIuGjZ8L0UiNIVEx2lgthxzpiQqDVxYrdDRbVBN2pjdq7ry2+ziYZoWpl4cQTl64UEkUFtHzW3Fj89ZSKTcW5OC2DbtHmwabJO4K0hmndUPXbZJEI7TJdU7RS6iLp+bBVoGl4Wd0KlcAlGvYhfvVhLunI29Q9BezgSwqDZBTj5I+85BEtxYj8wJuujBpCwX5fUrg9VcRLTIj5dxYg5RHWRo2Dh7+pCmwVR2QlFFfMvPKAZn6GdOiUo4DulC5UExHzdWAjMZv11NrE0RcosWxjuTb7SIPERc2K/wCo597qMfSHLuVEdo/Fi8QOURcO1eTLkdZUwFJknzKYaU1ttVla9OEi+cjG6XqoxQx9FAOZGXTdsQVJkBhrqWXWfv4PdLwc3SlKootXjZs0Bqao8Nu1buq7DKcojN5wyCOhm8IkycGQqp65CugF3NcI2bR6QwQqFy8ZwNNu4KbfjJLOtmtZbppDyiN3s4Evt7CophxJwS1bR1Id+pJ0tulBtJw1iXbxZ0quo6BL6r3vXf1eXmwrStRtI2UJ5IRwuUVdxDbyezi81rk56PQhxkOoLk7S29fu4bZLo0kc16hqKkzevjX2qkCpCA+bFtI41dGOlgSKWlTdrGmmidLlRdoF/GTcYsdjlNq4EQD0rJWkgXjHxDhckDHmxbJIdVYQSBLRSSBJK3psHlxDqNbujH698l9r8zWRtvMcKWqLnL+sR/YvyxxtW+dLoTmWI+Hm8SgyC7Ee6b7r92LITPbhu4jrxLxY6ULoLEk0Sr4gfThQSMOfHnDJZJxz7cKJgBDuxbJRXQq4DOeU4bWeiWBLd2aBmQ3eM/5uDUKQYzfnpA1DWmYibOkoR4+WimoN3CiSRWJXbubk5SxhfKIwVbY3KZsZERCP3ra+T8mmr02+6URES+pMI82j9NRJssu0UEx0iSVLn9nEgoWlJkjeKvCju9sv6DiCpmn6hpmSURqZmTFQx4i1cPtQ8uJuOVB02cvup0uSv4R+7j8g3KkcoHyZc5V+mqZ9p0c9spCpWcKNZtmPq1yS7pVLVdDbtSO7aGKy8fvBULVMtg3XDy4crLW9G7zYhpITdFzjbybcC0zeHMvrhHBGDs00WwretnzaSRFUkoZ24QEvGJJCH3sI1w/bxc06imrZVRRuVm7aP8/F27IDU0K0cSW231W4S+dLEPnx6tbzkaG3jD4i+3wXjZd82Nd5tYr+HXnSEcxkhL2ol6Oj71jhuDg8QC1yuDH5vpkhi4+sbzPESs1t5ltx9WJhYQDfiFfPUQKzGJp5cq3gkmLU9J0TMOVUubFpRj0m9uqiJD5sUB+qdiyyQF4fmxfYd4c/GN1WaP1hx3Qjzb8F1rRiAmovkm75uDv0E2SSG3lL3saGygjGkawWpmwRXdJaqD8Q5vEl7WKBTGX7YrTk3Ovt6cGfQEICnWbO1NR0mlqqJ9ACG8sJsazA9IahFK658SbylKy8ItSr5uzQilyYqoAXEiN1p+bFRkHpwnrJsgjcLf8Ahtnb1gBXOEv6ePFznc5aGgG3oTqapUuIRIUlUUO9L0X9VvlxREa+oN1DKVC1qFiTNuf1gi2npH9rtPqt3Y/SPA3FZ19GVM+QiLI6e9H4x6P2fguN3axFTvi+LZdoWruy+JWp48W4AnMc2B0oaV6QkVt+AzPRdTOpRZzOM11XR9QjcHu2YJ2XK60zQsLJLtlWpKsw2q7TAOj5LcWbg/BjY8V8LNccUjYlUE2O7Tt+ak1hvLvClS5FkSLb7XzlnRZqTUyQWAgIP0ZbceBXSPduTwR81KcjRcR9QgBC+3pEQnbqh5vHgfrB/dEQG7H5Q4vsH+Gbo5bpyj9673w/efPlCNTGMlGembWomcRm0kr2L0gQdJ27bulX8Pw4s7qpWj9wJrthQv8ACeIJ0KCrctUNoeLFbYwjdggPoB4qqp4lOcsP+FPKFeeF2xboXoiOO0hkJfh/BL+IODbRxNqrW9Xe5kQXElGpKWcSl7uKXmXPA1Zs0WqOuKp8oj97CBFwtod77Wrdjxroen7R0Qfkxt755aLrxBRPW95kRbc7vTL3/wCPT+r4lkLN5JLZZa5muYcIib73RH6lBNyN0nomHIN20dpY/GETLy6K3BJk3G63Udjoe8OJfim3p5Frh+LHKLgF1hbA5ISPpuxzS21LGeOeyTnsjj0fdiujV1M/kETDwt+0Qy+/BVz005JhzOdwF4OfzYlWom3/ACA6AkiANuJp9FrN077CV28wlivLmmwWtcERjbcIl07sSuNJWUr5MVjJNl3SGJf1Vtvq6avYF+meFwe8JYF9Sfej0ekVBVXWtHw9OJUS7viVQtTAdg4iRdAGm5eW8twp4ex6/peJccSJJo8wCR4RugUZI5SDL0ek09cj3H04dNWKi6l6PpuFLEax9Dl+/GMZblnCtg+XF7Tpz6PR5Myc661xkZCOOm+S3gPHi665lbh7mHd7X6hXOfKTxcXC1tLqhe6C2+z7SeMM1W9PrM2FTRaBMHCoIGqml9lfyH7OCEjQVHz6eog2Q73vdRsVvvYB89TiM21Fm61RTAgPutuDbkGlw9JFEP5JVytHrmCCim0hb2DYOH3li8kg2io862NsW6fSJCPeWC8nHHxXKj6lWvEVVqLxCqnWuXMlTSXEsfST5HmuENw+1iji0SVAVQ9Ap37juxp5JsqXpWcLXb/FilysDSjaR9LgoZEuK+1HpEvZx+dHM5iXSK7TSXDF3snNRINC3uHZ0YT0rcGN1Q9Pvmpelm30CD+4aO233cVSSy5mEkycsNNyIbvCeP075EvLS0zHh2+lEdrbhcvslj+r9WP8FwTyn+Tsa0ivNoHV+kHve0P7f14KikheO0+THhbmPmw7tDBHyNppnPVQss6BJVRk31UBV8dwjdj9Z3m7jZqFyucGQiK/P9qtBXSsbpBKMkL9KwrC237sQMy0YLTzcFDFRwDcy07uXfsL+nhxpLNqj2EpGrcE2AZpIg0NMevArpHs+TreZeOZ56go6cCarhUS+yu5LfHu6cflzjjyuNcUcPvWnBmLhEPNIYj6f5/sX6H4L8nP+G7u3desSERLl1SL0fyVBi1++EOnEoovqpqH0hi0yOS75hSjmep2VVlCji05EVEhSVstu1R+bbgdA/WVRs5hDH5rfpS6ZLvtLVNVGwlJC89PpR4xK4k/hLEdUNfRdKIIm/SXJZUu6TbDcRYet3TZwimiQbj24EmZTn0s6gTRYAuu70x7vy3YLtVC1W1GU6Km6UFoSm5ZvINmc0xWLTcd6N20hPGl454i/i2ru24VUgL5cYIy1zNd0QjdVkX6yYOBMdFHaqh5hLGpMkMzYaoY1WBZ6msy70SUK7VSIrrh+IcY3jLh55oM0B0jzfsSm5j1gRLuoQ9r1NyE+xAgLTJneh7Qlu/DipUGweM40njo9z7ckkPSGCd2vVUV4OKeEO8XSqQKCPLcl/NwOabVMYNjvu+rhux+rf8A8XKRit6KlwdTY6f4lHFcT8uV0forDT0w7XC1fJ9KsNx47TVW3XHiP407uTCwr3c4Y/aBCa/KTT4Gn2vtx0Ku3YeGdyJ9ZDjxJefEIArxfJPiVMuvHhcGHXhiN+O8RirRfJPSdH/OwxcP1knnJoCZharfzH4MdW/5MJuEgcJkiqFw4w3lA4LY42tBW8iiQ6h8XRj0S/Z6VseCOMH+E7qNdGQlpLw9OEo/tRFzRgEZGIjKyZsxEZBNIHRftbef8Pw4GjGqH7MiZvW2pZ1YN2Tr1GoaSfUlMhxKbe5K0v1RDgLVxTLqlZ1xCr7fQlyqfrR8ePwfZOIuI/J3cXrFiWW8yUfEPxfvH9S/V7FFZuNaPMLtGy1D+ffwxw97Ffkk1pusotaNdNhESAxFSy00jPwFjPdZZZTdCour/rLHYqg5Hq9rwFuD58GGPdOWX9hM7h8WJeWSRq2BfRRh+isVu3W+b2cdrsHFFJ5QpW+8iLdX+jcHSJ+yX7f1LOXC213k/Iau2kTlFLtBLVl+0P3/ANVQOzdVDeNrZrAuLtN6qldut6xxurM2lKXcU5MJTlONHajdE3LNYku8Sv5t/Rux8yINrVsNWDUIuNX4yNfgR6YeAxLm9jH1Ehsz6Er6PTjVpYU5J61tJoqlbuMdwXYV2jh2sz89ynImxLVpxjp3STniO+0mkWKgRccHTq1atsVh+rqDeQz719EuScx4H3qBbjS3/OOCwzVRcNUVkDHTMAIRxHvFTYPHDF0iNzdUklRL292OUXCIiIJd1YHLj9L2Pg+ksFc9V28YtvCOn2h7v7PT7y/O3EHHtdxPb2aG6lJxkiiXeEujd+3Do99Tw3jyYkIt+bJ8ity77MV1F4Y7L8OBdYf1lCNUwTDo6SWeobgVK6L7RahU5qgREYnjkixFput1+HSbzyYqaoxpWxaHaKKKuKrdJ1zcScEW3H5jjVux17IXYnFeklE1TDDoVcMd/hwsiWB3RRLbpJwRY6HDhuhqjyYkEY6/nwI4+Ipg0wRqJvs34WTVxJLRFokYBuwxJkaRYqF0HVeTBNJ41dW82JRMrhxAiO4cPhdW4GdaRTbilG6tuJRurtxWxXu5NuJpiV4jgF9qCOYdmSsDM7ixNJgGK+xO3Esm8AcJXx1J02WhSiYhhYktuIsXuHSby8efAZNkiZLpQcMXBYdEV2Ga2JiK8RJuXLhueHB/38IqYsioSTNTaWORK7Cy393CY/DiMV5JqHbhuRYWLdhMgxIVWS5Et2HTdW3DW3/LhZEMTd2qQkpZFc9uJJNe4cQaJWlh4K9uAXRRIkpInG3DcnWGZL3Dtw3ULFWWpzUkT0MJqPPPiJJXCJLniWUoTUsTzCJOrsRZL4518Tyl6acOF8MSx5RXCd/+PFg6FEkrj9EcIie3CyZYtkqkmsOGqyWHxBdhFRLbi1p1Vk0o0gtLHSY3FhRZI8JpjuwXJUQTpEcPkcMUf7uHzccDOkrxFSDUsT0ev/YxX26W7Es1G3C98kWCsjdxiSRVtxXWqp4lG6+AyV6mNXHQr4j9XHhVxXBST7Vw3WLCer/jxyorj6ppusWI91ynh4sWI1wXNjy8ot1z4a8hYcOubEeoduLRVRJwSu3DclcNVHm7zYa8Ud2J5ajNTCauFLt2ItFxh5q4gQqQpZTfiLfNQVGyzD7VwmpiOxSVXdMAO7ZitvmGkV4cuLs6S3Yrcolhgw6hnGhUDbtx4gtHZhRQcIl/cwZJDRXOrjpM8IlzY6DH1STxPCgf3sNw/vYUH+7gciV4J0nh8niPRE8SDcbywM6StEU8Rvw+R/uYa7LRDDhueAyVoiphmeJJtzYh2pbsSiaoCPPis1aphFwAjfjoXlxYgXD/AKAx5u8xVFSkrQL+zZhNZ7fiJRdXYWJW4efEV5OtfbhRNXdz4YiqGOiLdtx5TWI02B3d6Fw45JgjcpfuG3lx1rnuNXdhFZ1oNSVL4cfkkZ4r9AKgZ1vwjcuZIBP+NEk1Dy3EN3yiWBr2fYEJF3JPHAbjQJJIreU+6K75sTXaEnFl4mLii23ka5D8v72JbIhlwFORbwg0vWSr35SG3/ZFjoVNKi4eLvOF+fqSIS6xd/CKIzb0A8aIrBcLjeK6ZePD9qqd2iXMOPyJYcbUHq6/TJ+NwkXLfy/u47ko1ywdEweNiTcNy3iW08YZ7ESOKeFuilhVvU5+TEVWXr1WEWCmDEZESSVSIlSHkMSw5RdIhcfUZYUFU3BbTEfax9pzOmdF8eVedaF0SbJISGeTpuxaLVYirEK3WDrAIkJW2laQ847ubFsRrxtUFPouWsigu1O+52mfNbin1bl7TlYw4sJ9FUDSK5Jy22qp+yWBXIUHmRk9GrOqbeDUFO33qtCG4hDxEP4hw6faoOJXMX3HI1JFzc38f1pY0J2oRbEezH6KNzNgpOqJvr7mYF3Q/rT8WJU4Y9yyC1pAPVgU5e5+ZfzCzOnkiXj3i5WCmpuSA/awTHb0zTIEtS372EFyoKyhfwbfGOHxfuTMK5qrGTRSFVqepGn8zI4YSrIYbU1T0HF/eoeYcAqdy4qTKPMGEUVQUcw5jawfiFqTnS2l7wnzDjSrMDJVQlWC6iLcguG8RuMsV6pam9FQ0I3p70ufQp6VJFVzpLcza64tvlLD6z3Wqo8cWR1NFuHuy5kHU0IumLu0kvTbg1I4TWtEi3ecruov6dOHj9VEUBttu129v+lHAyoGqRpFunAVlJqpi8VJWPcrfYElbdaKviHw4IKyaT541BI7kUh4q4S5+kfxYErqA6SqkW3vfEiWHwdUrqgQ34dMZLg0yR9IESJlcqndbdiJG8h/Jy48n3RFfhITaJRVh6foJVt6KxjqUUTiD+oSDZUhXVQPaWumR+1u+Ly4paVP0+/qXg27lf1eq80gWIBusLxDiJCbFJqUWpLqoMjK4kRXtEj8w46aScRxwt4pyiSyXenp4kTb+OBHJUAyQcyjZyH0nLiLA1CRAhG7xcuL7TU4beCWjkAJBFWwxEemzFRmlVuMI7CG/cRYaouniSJaS20+bEXwxqmBElcTUxUlOSKy8gVqt27djnekI4iyFYiIFDIhPDgDWEbAPk5Rx9yogIirBFLKJgSgn4cPmoGaeiltI1dxeTDUe9DfzdWJGARBymSw7kwItw4ocKAyUlYouMbN/rarfvre6LwjhR8/cKpKcU2bO0bdpaVqo+9hy3VBw3E0D5NvixXKnkfUSZMYdH6+6EitEdqQfrSwsZE6l2HMqBGRal6Hl2CcgTR6koTO4DVTLq9nzDh5JNUYV2LyBfi7aq/YKCPykPSWI6kKeOoJpGBhzJRbSNdVdT9EF28i+LDivl3FDSCdMLU42IjG5ByLr7X5caPGwXB2m84Ntlk7ZcqGKrphrupC52kZRX5MVnVEwl6I6TmXCyCf91Mi2/DiEFLVWTRBYSI+USw4UZuF0k1gPTUt3dVp4fQzVBf0KBInycunhbiQNDpRzWGDegFHrMNBb6zzAdlt44UFmudxpNzxc1hh+FR4OOFAkuZS+67DZNLbf6OYt2AevS5VEnCVbi2CxOb3TchEdwiQ7cSztmLxvoly9JeHD4/7CdnpwmsOqmoIGQl4h6cVk/i4clRmFKSYU/Sy7yVbsG/pFRRwRco7vaxZmrNWkpMli13KgFzKJDeIW+bcHu4a03NuaZnmsw3SFUW+xUC6g6sH+natp6rUfqblIlgDvWypBqj7uOj8KcJ0HGTBMHVZdRLb0bh/os1xFxXcLM7MmcxmP0kEyqt+9dC5H7G/lIcSQ1MYEJg2TLq+1twYnFF0euRasIxEj3bRtuxHrZZUkryM1Uh6dJUhwwq/INc/0DjZD8ofuSpryl2w/WskP8kLoyuQUkBsXSQWMto64kI4Jrd0zYNeJkWzNmSu4yTt3efFBl6DpNhOrIgio+4QushGzb8+K3Uctqg4YUy/bJKN9qupdsHy4W8P8QF5M6p6hAcx7xaB8Xo6fqR90sjHGbbLg6W/DqVyqzOylafGxkivIPD2iI7Q+LCMPmxTZNW4VM5Sj5Bx0kG33TwFIpM49ZRaRbcTuutL9IYYTmSfSLj0vHJJgpdtERtFIPCONM35X731sXSjHu8v4r4Xkvsp02QMpd6Wr8FoNGuaPeulGbWoWKqwDeYirjlOq4F+tw0dKtnKwc6aatx4yVLREhHJupcV7VD22jzYgoh/KpKt37dzoOGh7S5Sv82NjSeV6sdKZMjH+KQP+SKhj2VQUv4LZD5wCpX2YjSK4tuBfRea8w/bkjUcVcpdsXS27PMGLEpXiIb2rAi8ypY6SHlS4YBjNdqIl3Y4y+9cxf8AJ1fmqnIFmXtSwircTo0uY8OE3gaNgn7uBa9qJ+9ccSbkkvKly46b1pJMiHVMVR6tXGYZ8t9kdqSZNtwR73/inZeSi6gxmCQkXd/8kpncvCfRlQHhj602cHaFxid/3cDqLQUZxqLZS29IOnFZr+qZKWrJRyGqUW3XC4V9xX3co+XmxLIS7wy9HoRbiIXfpCxyfj67/wCIbh1poRjy/t/eurcI2jzHbRpiKRbi8XdTtxqFqKfLhOJi+KlO92+bH6m74xf0srrVuck/3cX/AC9pyNVh5Cbkm1xIkANS6RV/3cYpmnedBzKHaJF/AcOlOKl8aURJwtxCPzleMhxeUu+lH6DnUUNIELVR2byuP7o4GudPHo5gPJJc3hN3FhpEqOwD5jEfLuwVMv1QSJ82DaodiuLU4ZNnrcmzxFJdE9hCqNwY7dwvwjTcTcIsmJRcKUi8OOOklym5cSv2DiNwiGQ6dP8ADBZaXtk0U2ad5qGN3d85Yj5KIdsEEXKqJCkZW7urGrYunoSGTsi4pq2H9klbgJ5tRiMLUCaI/wAVfd+kl4T68ZPibyfVPDNANYLmZq1LYcO8btXyuKkFuPdVUjWQK+ghsttEPm/3cTVKJt2L9wlEo6biy60fNtMvh+9iJav2yq7rQMSIleXy4dwcscDONZKwlBbqgqqPiDqD4cctORSAlry1kjM1lgiI1FyvFKrlpXELa28cCqVrGXqdwQPHjlNFuZCg2vtFILv93EdOVpNTNyKq2kj0op7cMUjWVRE1TG0PFgWlo+rjItytYYhqJdW6twOgFRTqLxYaFCRz943ZqpDpqrpXiO24LsLrEBDf8w4j6feHIzill1yW0fDhrRiZHIVa+7ESW1qVcM38C1Nu51Sbhw6t3jARsP4LR9w8TwtwIeTGfcq65eQc5ExUy5+pzCqrL2T2k3H49X/S40c3Ddj9U8LVx1FtES3N6fw/ovz1xFQ9VriIdpavx/qhzmJQdSVAom8iTQXRbpbG3KV+BB6dZFdQFe7JEzAgLpxrdFICxS6uyhp6oFFpJkCrN8qreSqSu1X2hxzXj/ydleXSuVv9cW4SLd4VquFuKxoBGkq/V8v/AJLN0gYB6LL/ADHhjCMnFQTzWEiURXdOisEbvLdg2rdnFZwt+VerdJHwg1uIveuxcKFyeo+gXHHxiK7p9bbxLkxIx8dtnJjFcP8AkwulQ4PnActvm1YS+9am4cb2+naLqxSLl0rOtUU5JUuRNphgSBGNwCXVihqKgsooCQaFni5cbOzGy5jcwYkmyqxM3yW5q7ELrfaHrHGalezLmQpVibGYfsfRD/aqvkDu9y3nuwbcvJpcKCsyqIcxstpfip2jjehqKaVWUXB/OlD9bUBLiDO5MN3dnjmlqfcy7j0ypIcKgBXgv1n7ODyp2faGjm/DAzXeKBzquXBERfgw3cUKjHNRbMERSRS5Exx1DgjySjT1w1N5cEhHlHp3e0ue8a+VBw6FymszZC4XMQ4bfZVX0AdNyZuNyZhadxYHEm3BKedMx9JEikqYh7v8/BrZ0g55yC0cV+vKGYIU+pMN22k6j+ofAXixt/K/w+F8tXWaaOYzqlzR7v3rB+SG7u2O5ZFXKL2n2Zd77kK37AJJ8nrmPDhYFuLlDUvO1C1W+jzYdFIbRIitG/w4hqPpeVrJ4t6GRpJN2lgqqqfcHzY0fFtY2Gj0WDIBSRSG0RHHEOBvJy7xJGruEhpx2+0u18Zcct2D3JQ6nvsql5S0g8hItR/PM9KScKmJ6oBekA7Q+PFqlmAEOtiUTXRJSwd2JAmCLpOwwx+krNb6bh6mbpKYYiK4Jdat+/vlU1JSIkN5BBEU7xwjAVa4ppRQ0GwL6xXbitxepSlWxIlaFpYF8tEP2axXhtuxoypLfxJTFQ1wybLlWQqXa6wPjV0hRLvIzROZcbUDfRSuavNLcgp+EsK+r/Q+aKJq7VTC5PylgCN+JFQTEyEg6hwRKYr5ZiKaEvcRDs1x3fFj83eUfyEPtF13h3UPM3zD4f14fs99da4I8qzDodUvPZl/ucpeLu/UrLFLu2r/AL30EPoHZzdWLMvd6fQJpK+hMj8OKu4fNHLpN8xXA26+4lQ8XVhdjX1KN5BNs8WJRG+3V6Rx+f6Hgu71Wd1alccJvcIjq/8Aa7Feb7baAG36l4Rlt1blE1NlqiMYVQRp3KIkRukPxDj2UdWs6QqAk3QJ8LIACRql+iPo93BRQFkuHoFBQTRcB07hMCwGMxqQeUu84xr/AMXuCsEh/RH4Md38jvlRZ4zae4NvzhZherlpIh7v78Pi/XguEcaWTzHUjxBax07i/H92KNc4DBGYUkSkQYouLPQquqY/L5sSMlS5JSQMmyoCm6jjAVP2oldjKb6elZFFui8fqKotwsbiR8oYLWVeeRtRY0rV6JLiJaTWQu3JB0CXl82NHe/Im/QW8qlgs5yUiH2fZUrX5UWK2sFhwcseUva9pS+Rj30etqppisCFJUXgEhcrcKgHdtxnbOzLaSyxqV7HqGku1PVeNyQusSbmZWCXmEcaazCpJwzKQkotHvHCoLmXKVm3cPw4E2d0qFQx8Mcrao80zTMhPYokPUXi5hx+e6ogomerOtxIdpd5dwt75nVdZaLSW4UAKZmUZGLUaqrESYbNQS5fexTqw1F5FFyblyq5+wbkI7i3cuCDQ9Kw4lKMHTNJdHir0hv/AEXTdiQj8tI2LqhGoWr9zptxO1sruADMCHm97HV+FPJPXXlhm70zg5Lhau8I+9jispxL5ULfZqx6hcEsxsdPdIujpEVU4Gg56XYiFRtuDb9aV/en+5hIEqtyvnG/ooWacsUVB+qj9qIeJIvH4sF8kvAGI+Sg2Eu3FtIttdNI9Ud9u/8AoWO53HySWR2wuWukbHMLUJFq1ft/Z+xcWofKzegvg3C4FJnaTY7Y/iqzKZzBmrTjqiqvjhGeErmCyYWt1zDnu8Fo3fFhZiyNqxbonp6gJAB6QWjiYZwMPFo6LBgkh47R5vax0TVHkEMM/Jl5N6PyesOZZScc7u0fCs55SePXeNSbYaby2W9vel+fiUH3wlvO0cOEz6L8SCjAOnHPAWlsx1rNE1yQaZ0CSIqndhS67HRNT8GPClYOIkQokRJeG/HW/wDx46ttx1s97FSJgkyLbjwlhS27CibcMRUxEjV4ybkeDqomxHam9bmHv4edoyJN0ziZhHoVNsd3VcNw/dLFPgV/VsszeJHaSS4H8+CJmoo4mGalOIs9dRUOKbl5xG/7tw4/Dv8A+QnDD4cZ0tzom5ZzZS+R75fyxw/kv1D5G7q2FqcYfKOWX2/7rPIpLadgW+YcWOlhWYuk3qQbhSVSDzXjiJWbrEOtt/mYOFKZcNmdFnILs7nrhuZ3F+iHpxx2hr6Wkr6brnqycES/d04dK7bd33Gre9kbolHxdCESjAxJQ7Nx89u27CibdYd4XDZvG3nxMEgdu7HhS8mP6f5+mK/n+NDqkma3HyTgnK96iyvMXiPCycW860SxKM7BIbsWBiKJFfZhe5V9XGIim9NbRqCkRKstYF+rvBHb5sPlIN+knyXYtwhcPlx0Q7cKiuTprQtWRgRVJFBYSsJEhw6RSxYHDUCHkwx0DEuTFoVmao+b8okzstx5MiHD7hVPBhEkDAuTHs2a8TBpRPcPJhZNLCaeHQf3sUESJaFSDPaOJxmlcOIFue7E8zPaOFFWnlInml5MOkWDZwVmjjkRuw4TLSLCqRpuLQKLkqctuWb3XYrKgrJKEBBggERq4jZCIRectolglishpJDP0M9qq7cTJTFkYjamN+GIxazdSwwxIIidvmx6pdEtqjTNQTxNW0dmOuKMS58I2nbswiXNvwGIgjiI1LN3RmOHyKp24i2/Lh8mW3Abm9GN7E81duGrhfHV23DVwGKxVi5UcHjnX9H/AC4RUvtw3JWzF4jNUEUE+IgLHJbcMxVx1ddiomlIXUpcGEyPdjki8OESV3Y8IrxElL/8eFE1duGpK49r4llKIuqSFXCmr/jxFiud23Cybg7t2KCaV4uqSE8eUwmiVw4WKy3FcVfJM1MIkN2HSmEx3FZj0VVJMVMI3f5MSThrZzYZqJbsSXkmN+OMO0ULtmOlmVmIkpxTO3/JhYceFI8KCNhYgakK8I4/bfJhUf7uOhHEZqUE1Jrd0Ybk1MeUMSlv+XHhHFovwVZNTTFFA+oMSCLfHQgHgw4RDdipx2akLUE6apAI4eIjuw1TLDhEsBkiRUgiWHgliNTVwsLjFSkpK63rwnq2lhnxP+PHidY8pp8S/nxzq/48R+v6P+XHJL48vJ4s4wzULmxyS+EVFceXki4AOfES6HbiUUIMMVsTFRIVBrAsJY8mkZFiQIQxyQW7xxfmKqCTTSswtd4sc3f5cJqFiKklhxyoWG+uA8+Grh+HJiEV6S6eH4cQbzeJX4kFHgYj3SoFi9pRNQLhDdswxUvEsTilmGLwAtwYJKghUWR7sdCWOSDCY7cWqKfJlhS63EeK5jy4UFfFBK1TjVUDxIIldvxXUXG7Egm8twK6KsElLEduFm6u7EeLrVHCya9pbsDRV6sDdwADhNaUuLEOpJAIkHNhvxRkXPiuCmponpl14URdHdz4hxVw4TVx6C8rI1X5d+Hwq7cVtuvy4lm692KiUlIDfhYSwimV+OtXEVNZBcUDWbXT1YdyXEH3Qp970/05sSy2T0gzgFpeemEkFASvBCy6w/CXRgmQ9fw7+HTklXiQECQG4HrE7d+3CktVEDL0rJOUHKDlMGqpe/bjJ03k+4fGmcdpnswiGTciw/n6PSnDnGl5z22328sRKJafo+lfO7Pt+Dqr044NvBICBD5yuL93BepuO9SUnBIgjp+r9IrfbG0/nIsAConn0szDXWbndxsiKSXsXW40u4IF2XDDt2245xfJ0lHT03zvz/NdLs3a1Lz6cKPVgfN3ZBbadokPMN3+7h9VdYVBPNUUZhyKji0EkliSEVSHl3F149TXqd81RkZhySbNJVJVUkBuLmG78WHNRRbZnJKO4vXUbuN6HEjvEPCWMV2YODIdQp9EDJeYsmbdmiFhKFbvIsOHBswtArbeXd046aFeiOoA6mI19Y1JZFJYFxVK8NT9FgIe1PUp7E4XqBBmomCCWunykRc+GT6sdXTcs3CCQpFbaQkWr7uIoSES2mJYXRZA7VTSSbJKKdG3BgMNNaiVWaqYhQeWitbI1jBM3IyOqZLxaiRWkqQlYaQkPi93DPMTPKapqqoyChoRNVQgEl03AHzl0jb4fLgxt4SPiGizn8g8SSW5T93DUoaIdcBJKRTZdyyK5sooO9I/EJYZtXunddF2sAnBEYjIkG5bzBqNMUUHXnaElpeaOApan05J84s0hRV2KK2+fpHClMZX55196XQKQ5oKR64X6boRO3oHm5cEipcn6Eqf0lqU+gzcnuB2wHQVE/FtxSoWa7RGRFRqrJp/SeIMdrlcrrUhK29UucOYebGr4dqbPWuizTjl97p3fvHl/gkd2K4UrBOSkXL3flfGpkKVbS1LL05UsQLn0JaqVpK2k2VE7bhL3cc5V05K0qwdRrxwS7VL7JRQt3MXy2W4iqkzwqT000jTsdliCUoqqqu/lxtK41VSLbZvt3dWPxOv1H5JxBOUkHQIBqoo9R9VuBbza36YCYpnBcac1eFHW2u66Wa+3llt8SvhOQeLEMZ6RU8Sih2pD+9ia+irYUtaTeLuy+EfhxSX5Gzy0cPEEVbUkDLu9pbTuwvA1Y/YxUd6041RrKFqoLFbaiBjcIkXhxkjonTalTlzRTrNACiriLWIik70maFx+9hibj0g4J2AimX4cfgyCKu/RL3cJraNt48vhLpwsHApaleCnkVW0k1G4BL8OGbiGBIb25koPUPhxEorrNyExW6ttuLNEyJ3JuUjElEt39BxQ4JMbdqr1AoI9T0LCI2jhZL0B6QL0Bd7WJqoIhmKIzEUAiBfbtv1ReXy4sdA0GckScrMo2Mw5Uv1v83D3h+y1fE1UNJQDq+r96Aut7pLNRlV1JRH7XsqEpuhpiq/qzNEU24c6691n9PZxCVtQc1l3MfwZOi2RepXggkkqql85EeNKNwRZoii1RSTTANophbiuvqjoB5JCtMmkq6aCaVrlItvy47rXeTe12i09UfqBF4i3OdGA+HBcnofKFcq+5Z7TJEyI7R1fOQAjJ6aiUwczMkm0v5ViZ6iBfAV4+9h04a1WCTieegyXUkBAyT1STNIOkPxYsGa6dNy0i1jaSATRs136aG1LyDb7pYZvlA9SNUbF0nF1pEX2Q+14McLvdANqq8aYCEvaHaQ+/pXY7bcOv0zdTlkMuUh1L9yJq+BpysJBzULxKPTVZWAu5Lr1R2YucuvH5nVEo5iW/HJo90kRJdI8xYrKOXkI0TF96VriAT4rX3CqBDv9npxdsq4l+6pp2pB3M4VsNi7sf4yuIj+gu5faL3cV3fjJx6xDa2NLYlKX5+pL3bTTU1wcvP6Qhj7KZyUNSFCtXHpd+hFd+qN3AIlqK3+yN2KO3qGS9BqcBToobv8IXtAfhuPE85k2KL0mbZuk2QPckXMRfypcxF7WI1ww9KXpE0nxaipXKkQbcZWm6AHtdRF3k8aGAa03kPTUT5sSL6XYskS6WqREfxFhRGXTZpppOll1LOq60sfsfHi6eaMi+TFMitSFMtyuLlIULDw7RpLvG6BtlSDTUv/ABFj6/UNtxbPD5qtddaDSSikWYrJpqehVbfutIiux16GukX5PSBXH4sESHjmMi1L1Si0UU5bldwj5SsuxJusvqeZw4m8Wc6xEAk5SG7eZeHw7sMbTwvd73Q1Fxpm+zZ+l4f19CydfxFQ0FSNI4WokIlkvBzYnYV/PQKKiUbKizUcF9qLVIlUvLcY4YVImyipheGbPU3Llr3umn1B/TpwqmqD9uKobSMd3lPqwppbjV2whqaQibLvJu5SNVDUXhkPtJlJUfJPnBSsjmVLtlBMCJdyerb8uDPQjmbarMYoq8j6jYpAYrkaQC65NlpAVnP4hwMqdSduJfhnC2qnoKkQ+SzF1oqYQp6VTH0RzdcXCoiRKBaad/m8OGFJxterW4RsVBZhcyWXe2sV7GWTY6eWOCj6xpucQlJB+q5EUVj1dQUrhH5tuKc1Sgmz1bVlV7i5+4EcH+sWaqaCztAB7pW4du3lwKZ+gW8s2Vl6dRFB2HeqNf0Svs+EsZILuVW84VYWoi3I61XASYET0jtVYcMKVFYlSkHZb7dxpD+HHK1NUkZp/wAKSBkryiSo7flxL0xlkvOqk5nDJoglzDb3uOZnK5Rmqu5OoG3oZpFakoNxHb4bcNBw7riZlUsZuVmKoS0NSscTpu/eLrildtIrrvNimzdKpSiHH0qzckjt/jO0B8u7Btb0NCxgIigdzg9oO3YCSXsiP4serOqIqmWRu5AEhRTQPUEv0Rj5cMKasxYIQApEqiqZ6RWao+Ycwz4oeRWJJ6k64VVAh5SxZyl3gp7LSHw24ET2sPpBWb+dXRFoi4dGqkn1JB0fhxcGNRoiiJq6i+4LRH97Gvr7cQGJYCvoEKsLqSldwXCn7I4TQN/uNy4JQvNhH1pcneraIlyjbhdUzJkst6T3ENt2FcY+iK867BVRRdF1MEBhcKu73+nFwe05JU+i3CR0nKjhIFRET3JB0bgxUG8SYSKLu+7vb923F1kFXOimZXbNuDKt2ERBBxmarXqhZV56VvTcl6Q5d27B/awNSMKHH6SgzQFuIKtU0AtIPa3WXYHuVpU2VbRp1Q/QQbpXuB1y2KqhyD8Vpe7jRVURraoI3g1XJC3OxUtP9KGOu8BcMleLRWO5mpwSbEf4e/j/AB95c5434gG23ClYjpEhIi/jtFB2n38l9Ko9KLSFUTL61dtHh+ssFpG+3diFg4FnT6ayLW0iVMy1bd9nhxJau7HU/J7wtU8M2YaSrKRSl4fZXNeML8xfLkVTTDpjHxJ4XLgY5205HuKeWqH0iXFNzSS5j5OUcETiMQ9ZEirS8kC6Irp6BmIl47dmG/E1oG6W16mc7un2S+IkDYbkVFcGXx7yzrEJNkmwgC24/tR1cefOhFMg6h6fDi3QuSM23JQ38q2SFwN5ClcR+ziSpXKA2dSOpWplheNW5WM0P1vmL93H5xpPJlfqp8c1uIlzEu21PHNlpxIhclH6SqC0O4KCGZcMl0E1lbUiUG27bhiiHoFIR5yxfc5zmvyseGbWxqQcw8t/h+HA4RUcpNb3CYiXT5sIeKrEPD1wKiHEtPRu5v3fsT7hq6FfLeNWUdXd5VFOJdw1dLNgtUEDuHpLEnTEs0XkkdLu1D/Rl1Yr/pjXyqhLFzKldtwqm1WH0DrokJAdwqDzDhaItBEk8cakJCilUHHi4dSTCNeEnCLtJRJcW5aQ6Stxjd7F2NcQb8H8e1fpfZuEgVD38ZLHOsIvLF5TDpFVeYdtVWUdaldrmqFoXeYbsaWpd4beFYtnR2qA1SE/bsHH6I4PJh9onKRyQkIy9kvTpXDeKc9qI1LcYkQj7Q+jUrwivuw8FW7FfRdXYdIurS241hNLKyU3hLSw3TdefCmr6PHiCmulBtHEXIDtxJEd2GbiwixNveoEKq7xLdiPUjQcFeQYsyyAEXJjybUMMxqYbUCVJPcq36rREeTDVSLRIiAkbhPmEsXAmfhwjwCIFi0a7vKsqEUPY+kmcI3WRjmwp8Q4NcrR6zwmUQ81Lz8eCITICLeGPeqQLoHFlLXDStZQ7VRU2/rZZhFqVHbsFgU1sWJqkZJjbiW9UgPRhwmzBLkC0cRfrs1WMUOUod4yuRIMUOomtw6JhgnOkg08VOYjgcXeLBNvqYkhrnTZrSFrxki1G8MRbp1pDtxap6IMU9t13hxT3jcy2Y3dG4LormF0YOnLSkVKoeN491GpXCm4sttLl8eIEpR54ytw+Xa7uTDUUD5OnDKjoaalzCYGMikXiWVuFdXVuWL7hFljEfZH30cskq14uBKn36w8QxI9K7qSxYM2Hn9pr660yEQMbvaxnmNkpGGdC7i1iQWDqHCz6enpQSRkZVyuJ9JK7Mfl67//AI7P1flAHi2hqBbZzBdIfTKUukv4Y+/7/wAa63b/ACoMMcMeZqlsieiTcvRGPR6CXIvLy3YUTdWeLEeIeMMLD/cx+piaFciF8lqigalPMHLtmi6W1ZBoRtV1Or+lhYDOezX1dVRNjR0uHapJN0x5eXpxeuzO4ctWM8sLMlU0iS2jiTzspcJ1JSr26JEpD2iQ2cwH+7aOPw35UOH26W+VDTXKWkfFh0r9i+T26u1Vop33e7/ZZyg+6aqGroaipXmQ4lhdbixDxsc5SbkCrklbyMx2W2AXJh0o1ch4sfr/AIWt7Vts1LSbYtj9S/MfE9yduF3qKndIi/8AFSfFB4Md6of8o4h++DxYT1Vhw+yEh62XMpq5HqAcckk2VHbiNTVW93Ct3nx7KgpjUz3Cuza+DDVQTAsPBIy5seL+7iQkaqJoSTESPHVwW4WWHwYbqf3MWqjYvFux+2+THHSPiwsJ48vCS60sKCJ48KuOhVDqPFKJGK9q2+gjsLl6cFySnGDV9Rcq/RIUXDMyVLznt3YE4kiXXi7VZoq0PSZhuIEnCXuauOf8ZWFi81lKL5REhdb07tYYyL+i3fDF1K20NUTW4YOfNPD8VIVJlvGuXQvYhK1TjA1U0+QgLqxYq6fnE024bN9vEd0lir0zXXCsVAkTJXh0rR8+Ieoqyf1G3TbLtkkEUivER58fj7g3yKcS/wCLmxuDfuejeGRFzD7+Ef1/F+7413bifyhW12x9m52jzZR9n4tX6lCY/RS3YTEsdXf4sfvRfmgSFLDZuxJMVTHkxEj/AHcOmp7sUOjIUdTOwNWhu6uHdhxiFRVxINnG3CN9qC1VM/PenBBdhMkgwtz460rsCSgmGUJprpf4sdaQ4dE18mPIpHdZZiWaq8hRKyRiW0MebgZFiaKNO7cHPh0nGhaOzdi3rIRVXU9Sj27c8TTUbbb8dN423DpNnYV54XPviaZMMQThErhw4FLdhuI+HDpPC0iTMV0mJiWFLLcKDZ14/cCzRMEgSF3NjwtQu2hhfHYlbj2avZSb8LZhq6a+DmxLENw4akN+Ji7BRJiaao7Rw4TVx4m9o7cciO7fioimpCME4FXCnNhEcLD/AHMVK1N3CVg7cRqyR3bcTBDdhFRuGLWnYKLrU1EpgeFMPCa4RUStxbKaoyyBNSxyX9zDjQxyohu5MeEl4hTPSuwiW1SzEkIWjhuo33X4vElQQr8b4VH+7jkRsx3iBK0U5TVwtr3DiPu8OPCuY4oylZNPNXbjpH7TDe64cKI3jjxCpTUoo14hMbcMVo40lN3Lh81enydOHDrvU+TAhCQkihUWiNuHBBdjyY4dCkGniBqajya+AMN9LdvC3E8ihaOGrpLvOTFc1JR4hjrlwsTe3ow3Xx9XlySuPCrhqRHdjm7dj5BeUgKu7CyZ4jRcYUFfEYqU1KCWFk18Rabrz4WFxtxVFSmpIV8dcV/lxF6+E+N9OPZa9mqa4r0454q7EL6w/aY64z0eLHshTzVME6xyTrETxXp8eE1Hu3nx7LXs1ShPMck6xBk/3WX48L8PHiWQoZqmNf0f8uESVxHi/wAck/DEctemnuPwjxGk/tx7j/T48TyiXpp4X93CahYak/8APhFR1dj2US9NcvF8RKzjCjxe3EaorcWC2mlURJYnWG5L7sdJ2FjlZLw4sioySKiu3DNZW/CygnhusOPRUSJM1CwmX93Cyg7r8Il/dxNQSZeTHQlbj8x1iBK0UqKuHSbi3DMP72FBxQampBFcxwtxhkWGInhYf7mBiFTToVTMsKCrhuGO8VErRTsVcOE1cR93+TCyZ4qU1LNnG7Eki4xAoq2YeIuMVmrVZEXm3CybrECLrDhN1uxWS8sekPpXRsVBNS7pLlxHVPJjE0tMnGPnLN2Mc4LRQXPw+Hw4lm7tNx6CDlIfFiOqpgxGk5h3bct6scASnV9kWPzBQPYtVIYY+jUu8VQ5rRSWVspmfGZhQgKn3gL6veK7StEitxsFxHekkU+FBMS8OMTU5MuaeqNrNJ7eFXBW27mEcbBhczKImG7VaOqVlqOuVBVcRVAvDjY8b0lU482+0MhikPDT7QNk0RalK+hsmykWsKKQptpJwkQiPtbg97b8+LPXbdFrKpotVCURs1Q/p7uBnVVZIs5hEGayCi0eqD0iu2paW75rsX5CSiKrVKTip5tIX7LWXe2+14PaLHrRw8d6srg07MqqQx97DT0Yy99Ru93C1XJlx9yLMSl75avR+pQ7xckU7EjISxDEX9m68iLE/NtD9KKyzdsqKiJaQ6h8wdeIxnFuTQ1V2g6hFtEVenGNepuoOEy6WoSiS0bb41TQvjtJIM2BmRBo3eFMcWVmzSjftRHWMbiLDdq+BmRJeq3e3nUSHV+7jyz6Leq3BJCKgDbpqbS+e3C9/B13wokW4609F4bx2o0AA0Rt5urCgpAkGikBEPhxGpkj/GRPb0ldjpxI6A6yW4g6cCk2W0V7NVhSVFP0pq+ghEgwSaAp8H5KSqppE13t9JQNXVArbx39OBEjIt3qQCkiShHyWngk5e1GcXDEwVRtUBXV2ld82N95LrQzX8SNg/y9JD+/BYrj2udo7MRNc2n5Kuz7KXLGSYuI06JiEhdpGkZJNQFUb/CXOGA687HUK1cLO4asXyaw/wAV4lIVSS97w4MDWpmy9u+1TzYlkZkFRsI8fqOr4Zt9YMX2R+z9S4bQ8T3CgKTDxfa+tZaawkrH8Vl1VD5SPkgSMdMhSJJ4kX6UCt34g6iolwnTranGr4hQbiAJcokIdNxcpD5bcHLP+lfRUcZGyseGlKslTJq7HpPpAvawMoqSWq1JFXhvrinp0HSI84uBK0hx+XuLrQfDd4KnpCkMsC+dt/f+pfonhu6hfLUNa74SVApdrPQLRZnJajxNL7BJPcrZ4hu6feLFsZCTpEXKqKop/tBtL4cPJSmuAeOEVUS4hurYuIl+lHqHwdOKRTVaVAc6tGzDBYWxLkha4EdVAukht5kiwiqGnawnCjEh3cv9E6aJqIx5lfmbIC3mAlZ+jw4iqekXcuTelo569XLnRbgSln83EY+qBhCqMmck7tNxeOtZaN3huxpbKeQjEYSNpqBdCitJD6xmn7fmbARWpJXdN1tgeUCLCQAPD0u7SVNbVdXakAyQZcM5ViSzeSYLtlkC0lxIdgnbyli50zUFTv2IpMo2Mtad13j8xIg8doJFZ8eNMS9JU05iAiRi0TZekLSS5tTzF5vNjM60vTdESTxgwck8vLvUExutP2vDjq/kuM7HcXqo3hbp9pasP4e+uZcW1Q8QUosNU8ntw+//AB95Op6qJuLY2GzFq8PqHvUvdL97A69CqirgnDwzJRQ7lSLFnkJlGqHCblxHvkkQCxK0klbfmxUqnexbRi+i2jxddx6ENJIbDSMDV277xwr8o93f4juJOUzwuU4xEdWHzo9PT7/x9C1PANoastGLDrMXi1Fpx+bL+6Zwmk5buJQeZ+qaol5B2j8ojiTi3Cy6ijN4AkLgebyWYmr6ZatUmkdCkKaSQpCSjoi5cR5NQbqNzENMQMxtvxykqjNMjitjUuT0qAYPZWZkFqa9Y6kcy2qp2/biJfZe7tuxpmm2b6GotePJp9YctrkxEhISEh/dHAFlIqNbsxlmIEm6YKkuQiOxdIvtR9rq93Bwy0qNWYh00QFSTds+40hLu00C5blPd/m4S8TyeYBxrDSKDvBE6wLg7UHKuhrlkZJqG3lVH8WK+QnxGiBEVmNCyOTLmZVcDJyxJtlxJVNuxG0BIS2iRcx/LgUyVNAwdEAhqaRW7uYcfaC7U74ZYHKKuo7i1UaRJPMsYBpUa0gi6aJuXqSAEzTUPmK7m93FX7RlG5w1bLRFKQsf6PVfob3nGNTtJZW8t+/m24mWYLsHSbpqaqSqR3gQnaWCHmrmpR6tCxVaOW79Op6bI1UkWiSpapmkQfkMh6OUt3gw+sfSVxzwIfCX/H9qFrX36SpF1oZD9lB/LBmtREcnHE/kGKiSppLoCZid/shvPZb7mLv+c+ek4l0zjJItNUjQB3b3tnKXPgasgmJ6PKYTRunHTPSXbIczYDuLS29W63y78S1HU3XSUm9cVTLQ8fEMGKXBwqG4kiNUdxK+Lmvxpgv9yoWnRp6oh3aZfZ/FG3W32+vi/UsiReFWOCH1dEDCtQHTNXVVIhuVVVLqIvFh1sJZQBMR37x8+Jo6cdxUa0m0khL0Kbe8uERPx8pdOGoKRysYmi1cIayR/WhFW4tXqEtvNjnGJ4VQk/JSwdB2RKCmnEuxjS9MAqLR/IFoC5U6Urhu/p0iJ+LA4ZVdmNFVIzcSM++eoNnQgeoqRJFaXUPhweqmZMPzeMtWOVXcFcokTYR1xu5rbvZwCnUvl4ylUo6SlJSI23K8W1uVEPDaBF8Xylh/YnMKtggbblyr7QuAciitctawZVBSrORTjFuEdpbhR3cMXVt8OKGvWsXBILtG7lNyorcN3SkPiwL4ypqddxorUhW4tii7kmwuSJIHgcxD82K9Gk8FZxJKsVeFJW7aVxJeYsKHeHRwdJxz5qGoLOwEtWlG1hUb98QhHWpNR3XLf03YWRlIJrs9c66iW8h+3ES93FEi/S0eCJpGLlO7qK75cTNzZUSBK0lOgbubC11rACijyo2+VOajreGYxDhZyzck2aldcuqKYiPzYzHmDmFM19KE6IuDZpH3TYSu94vGWJ3OosxSRTOSZpoQ2raItldURPp1fN8uBw0j27lEfQCxanKV2OicP2likYwqSjL+cVQQCGkU3RgWxCKySKg3Wcv4cTCL81Vk0VGlqYlZqKKjzdNuOE2rlgKbbWO1Ll8GJMGGommBhqjzYePP+nVqVZCpZBqa5aq4FqW7RxbJenOBo5rMLkQqO1+6EuYhHmL7uIajWC03UEfDs0TV1Tst5sXbOuWbDMFAsz+qwljAB84/al8d2FBMljhJAvuduLSGqa9xJgkHWGLA6fmkmmzdWknbzW7sUp/MBFBxzv7NKy4vewX6ZpphJSEHxTbXGQXCy7cJAIXH8mGFFZXbpUtsN8youVwatrRPlypPJkf7di+oJuUUmqpguaV2ke3cJYO11w7sJtY1gwR4ZmzSQT8KYW4Uutuux+s+EeHS4Zto0RFIpSkvzfxJfgv9d1uMUioGORHxYWKy3bhMsafWkS5UQ27DxA1deEKQGHMq3St8XeiOLAKtuIesu9YswHbe/aB/rRwNVl2DnhRVCPulvxJwQ24/MK2f4sIqJHdeGGTRAaWuiQKi5sPzbwKLMQuJw4+4F33sCZVms69CdyxCPSI4PNROgjo1w/NEVFkUjFLbdvPAgQamKPo1TuLmx+YvLUwNLeG38yREO3ujh+OPSu++SirzbY4xGMS3d4v7YdCZJxwCkIcvmHDRwnpLCA8112Ju0yGwA2nhF01BJMnKu0QHm8OONUwm+cV0mpfgKlMs6fSlKoGRfoiQsR+r9QCfKZe1Z+HGhGL87tx4A+V8C5nmcfUKEqqxFk6uNBNL7fy/AVuDIN6RY/X/AJO7N1CyiJjGWrxL858dXXrVz0lKOnwq4N5HEgm/xS0XR7TxJIujxqXKOKzjFdNWxGRw8Tfh48VMXXXfhwm/twETCYDUq0cb58cqOgxX+P8AT48dcff14py1bmqaJcMdCqGIcXoYWF+GPsVISBTF4Y8VmIsX4XbMKC8xGBL0k+Gy7DobLcRYugwsLzECmpKQvC3DdQww3J5fhuTrdiQiokS6cFdiHfDcWJBZXEe4LBjGhBu61X5aOBwO4MUmSgbSvswRnWIN8gB9GNDQ1ZNLMXK3hUIcvIa4dvNiJUjt3VgiOGoEPJiJcR1xbQxp6a4LE11oHcKppNTHox+8KGLCtG7rLMM1mFhYOGpkkrlDlKHJmGPJtd2JLhfT4MeFr4cW5qo6srllHWB0lIOGbhzpM3dmrd48aHbuo2RpCQeAaC7dwRbh3XbRxkYkPJi/Zc5ghS8bJQUuahR7hLVSTEeVW4eX+nRjiPlA8npXJ16828pPF+j73xaV17gjjcaAW7XWjFseb+upV3MSLjaNmGoMNVRi9E1TVHkamBcheXDW24RMMQeZlZNmsbxKrB85FVwl3aY8oXlfu8234MSjN6C7VFZLlVADDby+TE/JnxFea3MtV+Eheb2yHGUfax979XR8eKM4+4ftVK03crQQk25uiWEZeyPT0/cm7hIPSXJhqSAW8mJBxZdhtjswkuOPiKacvRj1oXb8ONLdj2hbi2aGykjsDHOqAjhYksc6W0seBeKSakrhMiDx4WUb3YR4UsXjBDHNJkr4MIk4tHDgmZ4bqMj8GLRgg3BdBJ8efSePcaeEVGC13Jj3BrbebFsQQma+CeC/vxLLTzldmzjVT7lkB2j7RER4gRQMej3cPO+VLWVPdgJ9gHXRIh2/a/PSmlNVutNlq3fZ/wDfQpAXV3JhxxAGWIkebDwUDLlxEmgRjD5GnhKhjoSw3TQMebDjhz282KCgjhI0oO7DptzYbppYWEDHnwMSObUkmdo8+FhXtxFp34dJkeBnWkzYfJTTd1iUZkCuzFbTM8SkerbhPU0y0FDVkRRJTwhu24cJtw2nhu3cBaOHAqhhGQmC0IkJpYkg6+XCiZgPJhvq3Y8KuI6lLSnwkGFunEeKuHAL4oKSKaJOkxwsmGG4q4cJq+LAZokEtbtwnv8A8WFBcY5JXFavXQltwoP93Dcv7uPCrjy8n1+3CXVhLiALHQnuxAlJKFuHCIjjrVwoJXYjJTiuk0sLCOPBhXFU1KK4JLbhEhtw6u6MJqDj019TUiDCagXY8ptLHhxOShFeFIMckkGFLwxyoePSXopqsOGp/wB/Dpb+7hqf9/BLRIV0Vxj8LCwpXY8SWL5quCQxxf8A48KElhMhxJRSiZ4cJnhnjrVtxWQqU1KNz7wcSgkFuINFxh4Tq0RxQQokS0JwS4almHCO4cRercWJJqqFuKnRgrRKaeDtx1woKlfjkVw8eOuMAcCRVgkm7hIBxEuObEk6dYi1ivxYIr6mqw4bl/dwos43WYR1bsXxVUl67/LjnV/x45u/yYTItuPRUJJwK9mOuJ/x4jScYTJc8Sy17MUkT23nw3J758R6i+ESVxaLCrJ1SXG+E8KJusQvEH/jwoLo8TJheF1S3FFjlR5txG8T/jxyTjEMhSzE817sc69uGOrj2riWUvZieE68+OSdeI8MyPCd92PZSjmp4Tzz49xP+PDOz/Fj2PZS9mp8K/nx4nWI8lbcJqOLsRylIXU4dK3Dz4YkJ4UTK7rx17OJQUpJuJWFhYnFw4RUSxyInj4vLoiw3WsLCx4bn/fx5eJN1BwiX9zDosIl/dxBRSNn+LHrP8WO8fn9/EFeK55MKDj8x+jislIEsP8AcwsGER/uYWD+9gYlaCcBjvHAYU6cDkrBXQjhRPHIf3sLCliJKa6D+9hwmWERHdhxpbfNis1NLJlh0iW7DLHaZeDFSkssOvQCS6hkJb+rpHDFw9arIKx/euxXSJJQUwu5h6sSBwgu1uMkVSXU6U+VIf8ANfvXYVTSTQUsEBH0ezj8pi603jp1YrvqylRdPtn9UrU28jUnPpeoOENMit3iBFtLxbcWOiHWXknSjWnq0pkePZkaTF0n3XEjcQ2GV3i24RG2n87UUB2iMtZ7hFb+LBEyihoaUphdGTimjtWKmHQJ66QkSe7+djqNzrcqnzylHTjpx/eslb2JO5Q+19yfo9nts3aC2Zy6rRu9SDjE9W4iPmtEveLFoy0pyFytjZaLiUSUkFldUiUK4lQt7r3f5+LG6ltUUxSC0beXEY1TAplu4s5EiE7viH7uMZa+LbvbnusA5qFO66w0NypiYfb0qxLqm6WL0n9oe4sfgJW827Hh9NpebxYbSTj0pppohzYyDjrlU6RFuJMGmhaEWh2rhMdxb7vZwnJikq2IF0hU8Aluxzrh0H3gdOHDdLjBvELi82PbNSMkmi7VI2aaUY3FNYR5S5Vf3MQKksi1W4Z0zXB0G0rgwTIXgW35CethuHxbsL1RFxVWpis3RSSWALElR3W42PB3D7/Fz71NT7mxkPtfsWS4p4gY4bFt9zaRRQ8avT9ICsCKgKXdOLfE1oIWovQ28tw7bfdxQJFKSp+Q9LZ4VhAXh2F58TiWg5TH0+i27Ftvu114KriKm7MtpCX1YqNTb7fxZTCL+oeUv+qJrV+2dCKzVyKvsniYYyhpc54HUW+tTFL0qmJW+PD8iMyE1bvix03Hy8Cy0IlSyLm1R/FYAvJQRuFGoiPhl+CJD5w2mWJMHhlpmQcuKfT+Xjb840g8pRsQukkEpkUicWpK2bVR38hXilu8Z+DC+gj6mCagH65EgVrloud2l5h8uB/V9SzAyUG8JzaiC6rNW3bcDgR5i8NwDgS6eVCyX+mz6al91e0OGmPTjh6f3+9+1MeH+Cbvb3ypiqPc5d3p+yr5mVT0AgwCtKdqI3fpmVbeCXsuQMftbvMHhwM0Y54ur/CHepmNtuHHq/08cT68xLl8uJG40R3bscQqawnXCclIiXV6Wn6o0LY8qGea1NVFI0+mwjFiXUaq67USEe/H9Vd0l4fFigZN9rCqcoqnRYeltrxZK6Um0LmVAdtu/qG7GiVx4tPR0RIT5sCPMXs/QtXu1pGP120yqOxRMLhee0P63l3eXGosV2oHmCoLqOkkqu9C+72tNu5hWlz7S8dV6yEVCo1XPRrpqTo4eno4iXLb/FyVHeA9Rl7o4rXpf5iVgwFGOo+nElmSpiIqSxLqtQ6BV0kua0hv89+MoQOUme9H1azio9ZWObr7hf6paSA824+a7y40xDMFmkczQqB+Uqo3HaoouqkIn4rQL5iwfU3Fjh23nSULguC8Pi0/n9qUMWrrj7dSQk2TfyUkaubUa2U4qKp2PPkEgbOnaHxJFcPvJfFitzUrUj1RilMMFlFgdJGk7aJJPkPZtb2qj07CH3sXf0SiybD1WydrqkKVqRKKqqW+a4i3YmIGRShEB1nBSDhUdI1CHmuG3GHG44Ma8oZfN/H+vStUIE0U5Ks0/O+ioopF3qtiVEzSU0RtESHmG0iuDFjITVIfIGKo1awEFNuI+HYi0ReKk5tTLaXVy9Fl2Le3O0kzHlPbgKuAAe6WtirclLUr9R7WLm6QlIpVZMXzpwkKSZDvUDbeP3sOcs2cvSwzMDHyzJEWDokCTcdSXMlaXitK3FDiKiWh55Fg1AeJMddDU2pEY9PzY/YOerFLMPUOLiXLqSZi40+MVt7oi3XafNu8OElTRu1DbjWmMZfn+qrxo3TacHlLUjw0zANAU0Z9mq2W5gtS2liqPYKHqh+9lEpcW6Ad6adve+bDuVm6wnWqHG5cOVU09xKRT9suVtv7XSL4cCiupRwybXBHSAk9vFqyUEU1bB5iV3bBuu9rCG12g3nOw0lj3SEkHbqaZ9npJR+amZ1DUV6G7aL9Cr8j2XJ37j9rC0ER1RGpzxSLlJs4u7hFLQErdvOW4x812G+UVDNpJN9N1hpLyRqmkkrt2pfskuURxb5CbA3rhIUUtNJU0krRtKwCtx0288OFYLXT1OG5zm6ZS/P80TSXUaqrcpKb9Hul+fqUMFMw0YxTcsYVIm7hX7YlSK4/Niw0ZlzT9StpBmpEJJOwSFVJTwnuxJRTpm8iSZvgEk+fbtIcNXkmlDNnbaGfKBxo6Cio2iQj4RLxYxDdwcNyDhEmTrr5tE02USV9pGYgpeM9FJqyLbX3NlI5RcdUSS5reohxBz2XMlGrKOGCXEtPEJbh9ocDt5TaQT6GblPpO0JGBYmkzjmQCQq2iV3NzEXLuw09PaPq0YlaQOUEdwui1Gw6qQjd9Vtt3mVyQ+4eINcPVDrmba3MMRx3CXe/PxpJixUNVPubmRDRS9MjFhFK3A4a7kh8QYFmYeTiNWy7eo0LeNb2iuiR28SI9N3QVl2HUP2r6ErGt/UU7SUhBC6L6nIgYqiYeJVMfw4PvpoUX7YXce+TWAhuEh5sRfcuPCVQJP4ZZF/Ef5qYV3VSk7pQLp+jqWJupwrH0sVGv2rZRLch8eP2mEoxjIehw/RWUQuNIrSt6sXyo4BFiKzl2OismkVyt1uzwl5cUuHQBy4TAjtTcFzeHBHX+utk6nrDwPARK7VFlgxkm30godcrrbjFErit/F7OKWx+tOvU8vpoOAs7wldMb/D5cEaGk29Ceh0hw4k55R83teXAzqJI5F84fq/bOCuLC63OunJp0pDylzKihJ85ARSHlJMM345tHZfyRvnCfe6SSG665W7pxniLeIpXfOODfmso0DLR+3dGSloCqN36BUSG39338ZyZv1jW4GObKrujsLaFxcuOl8LUxHQl4vwUnVaE9Z0uRq3CVu0cSq8ZPHGqOIOCeyRNx70WrUlyD3RwxpWKl5+WRguGXauQ+3JVArUkvEV+NM0fJsKE9HoZxsSPpbElauVu4lfFdj7drjhbTEcBkXdUTwdMNCDWXUFm1lloVtPUt6sYSoB6udr2EXPykN14eLd04naqy+kpmj31WupVVKQ1TeGgQ3aoX/uXYttQZyU3WOYDGmKmjZFeDhbnBC23EbrlAis6RG73sTc1LQj+JdNoYHkg4VSsBiuOgRX7dx7sbvhe4cP1DBHxGWSUezHUQyLm9GHxej31zniAeI6d1sra3LVq97b3fSstTTN2/gyYMmQms62aZdOD/kSkirTsW8dIrgtDoG1AVeYTP+Z9/FimMpYRVZMPVra4ORePVt1QxJRLJhDNRYMERTTDmEfHjqfAXBzTdw6yNU282OoYlIpe1h8XQsLxlxqVVQ5HV3GyLTqHl8X7VYif3FsDHicGWInXwoLwMdxyFyUakVJJh58OB3YZpqgQ34dJlgR1okwbcTjSDwYrdbWAxjbLt8syH/WjiyCqGKzmEqDWGZvyMhFpKMlf+8D+9hPcOypnCLupvbIu1LY+0rESAW7MNyb4kBG4dp3D0FhTSC3BQlBDEM1CuGtyZAqG3zYrMhS8Iqit/BqQlvPutpYvCyW3fiNWb49U0NJdW8iubFwfaGSoaqam3u5lM4Q+EkFUUAVcaIIld5unDpOOCWqBrAqh3Id66HxB1j7+0few8cOgZST5+IXEKpgKduy+/Zi2UjT3qtFR+6MVXz073Cv4cfnfg/hFp2+dULVEpF4Rx+/Fdr4p4lKntWeO4hiPiL8FNN0kWoiikAimHSI2gOHQ7hx0m1DC2h6P+TH6fmC/P+pchzDh83DCKKG7dh4mO3Ab5IumEkpvHHtW3nx10YRIcLyFNhJLa/o/5cda+GpDbj1x4hlL5mwTriPPjrijHrwzxxceJ5CjnqRF4d2Fk353YjR/uY6vtHHshfesqaF/twpx+IUVbRx1r4j1RWdcUxx+Eyf3YieKLCJODuxIaNVFXKYJ758NyeYiScHjnVP9YWL+rKrraeLL3Yj3BXYUu/y4TIcWi1BDE/NMVBvw3Jvt24lCEMJqJYOadIEI42JCokmuqO/DNaOA+jE4SV2/HJIYOF9JXaOarakbbhvwR4t3B3Djn1XgkatLit6qJMzHnwioyxbii8JlDGXQWLRrAVBW81UdCzHWli0FAndyFhFSBPwYs60Kr83uqtkOE7f8eLEpDGI7QLCJQy3QiWJ9aFUFQuqBt/y45s9rE0UM5EuQsdeplurFueCq6o6q+SR49afgxYvVwDzbsIkgA4kL6j1Eg3KD0vax1peTEwQ2dA4TK/wY9mL3VhUXw/kx7hfT4MS1v+PH5j2YvdWFRRMri8OE/V3gxKEOOhPwBj5nkqepgon1cYlyY8TA+hG3ExqndjoSM8ezyVnU2lFpxoEW4MSCMcADh0ntHCybgB5rcVuOkSLYpmhTcWoeAseFvt3YeE4AujCZL+TFEiRmUCTFJEi2gWFhQD8u8MJkrjwkd2IFNSGKcaAdCOPaXkHHk78Ok0NUd2KSKCOaantTUduHTdxhN0w0h23YTTEwxEomKtaImi1KWTdW8mHSbwyxGt0jxMMWQFzmWFjogCeME6a5J0ePJuj8eHykQCo91tLDUo5ZIsC9kaJ7VOEV7hw4FXDNNuaXPh0mNmBHRFGNEadJq24cCrtwzHCglgF0QRwkngr4U1f8eGIljoVd2KCaVgup9q45P+/huJW4Uu/xYhBWzXQ/3cKXW4RI8c3niMVKacauFk1cMxK4cKJq4qIVaJKSTVw4FXEWKuHCauKCFXyT3HCh7efCOvhMlb8VwX1crc+E8eP+/j2LAXl7HiLHJFjksSXkiphMR3YWP+/j1oYtEkOQpREccrDjkTtLHlFbsTkvRXtL/FhFRvh0mePFZiQkok0olQrSxz7eHSyW7ZhEksXzVEF5MrdmFuI24RwmSuPimnXEH/jw8ReGA4ixLHWr/jx8JqagJQUkL87sdcZiLJXHOviomlYLqklHV2EyvLDMVd2HAqhiqMFaJTSKgndhEsOlOX04ZqHuxNeXKituG6ivnx5YjIsJ2GfJ7WJCKjJJkXnxyR24ZvH7aIi3UxLGSDNoq41VLLrQBUh5Q5/dx6DcLVDRTOuGTZRJi6eO2feDaYqpHaHxjux7PESESLcpZRGMksoWG5FjxFjjBYodfpf3cdB/exxj2JqC/bv8mOSVxzy45P8Av48vLrVxzq/48ckfRj8xOK9JfondhQTtwjftxySuPRXpJYlce1f8eEbgLCg/3ceivSXiK/CPXh1/ewnbuxCKkJLkUsdFeOFB245U/uYogprwiauFNDbjzfbjrV3YjBWSTdRvhuolh8W4cN1LCx6C9JMS/u4Rs/xYcKf3cJYqJSSBDbj8wrZdjwpYipLjHYjjq3/LjocUErwXIjhYP72PCOFBSxQatBKBhYeXCIieHAjgUlYKUTwsP9zCY/3cOERxUppRMcKW/wCTHSY4cJpYgrU3JLHg/vYdElhPS8GILyzKJ3JjhF0lqpkG4fMOOm5brPmwo6SWJPYsSVm+4cfkQdJr9ALM2cnoKAzHGVANh8O5t8Vn84cXfLaOrCHnKhbpkyW9L1dKTXZERCSWvcWwt3Jy8vTiwVTl1R+aNSJm8qVRFaMHhl2iICKpFzcxe14cX2LpCHh3qkigkqo5VQSbEooXMA3W+9uxuqu/sBbm6U8NUdWEf3R/OCSMW8usk7yqNZOZFR1wjuAeti6FO6VSL2SEvw4l09YVh2e9h+foP0Dz4Q0juxh3Hwex0j0J3sBfo3Fz4bSiAKtSAua/mHC1+l5sM3nGLjePKO63qLEGhKUlUexNfQZkVhnuw5RVfJOU1kERIA3K+LHCbIxT1UtvVuw+YbHF5ni0iHBUtEaWWlFnie+23y44RL0ofYHZ7J47JMPQoRpejbj8cXppFwyIrrdIkVo4qacJouy0o8hF0Ykmsmg3kR0nW8rdpEV2GTNmbK7VPu/u4l22tw6ZvtEXH6XT5cfloLiRkFqYF8WLjqXCx7QpKjBhsNopu3SO4rXNwnuHD4n7tdMUbxEQ5rcNUWoaYmN13UOFOFtFQ0EhTUPAxRMvSiBFSkGuaQrAmd19l27CctHJOklG6iQkiqNtuGaJOWokYAIqYesXDl81I1LRK7bbgchIDzQXzYoUpLhR0VQIhIrRUHdj94xx7vtYkHEciSJI2bfF58Q+ppLcOqiQ7ftBHaWCwg7tU5qYgqjl4N8TxmSFxjaQqJAVwY/Hc+tKKLG5aJioqeqSie207unEXaiqQmkd3vYdkg8D0cYSKmiQ+Hbj5i23KUdSh7alU3wP1BCVcqDtG4tLV3YWWYU2Pp1Qknj5xbtu2gPu4riYJEKhpK7ua67H4KqQCnpLEQj5rsRye6S9vVtRhnJCmqqegn5i/DhF0KKFwAtqkHwYiG80/cIkKprkmG0Stutwum8BdMgExIg3EI8w4ExYdwx1L0F29eapIq+gBEQ8Q8vmxLsSAiECMSEx24g2othC1C7Ttx2ArN1BcIKlaH6PmEcSIcMdCrJpSc+2dF6ofNmAmtGutc179xJHttt+bFNaZu5msq5k31O5Ku5dRkorHC5KREUiAStutt8uLWpOqCiQiiJbeXFXlIFvJr/SpAyFR0Qjc3I7vDdtwyoSYxEgqmhLTHm/44ioOC4YxAk5e52doB2bdGbyzkmbdVyA8BHF3SoftVenGiICIi67jNGRZ+lq/FIeKIdwh4khLy2iPu4DEY7qCPbEkhKKKD1ioRKF8V2LrRWZrul24tlYpFy3LmUEyEvnwlvZ4nTE3bWRbL2f/JBExlCWWWpX88m6aZR3pSglnDR3b9sShlcXiISwO3EM5aPxCR7hYjMyLoLd0lglsM1KSmfQLb0PCaKHdtcjb83LiFrFmDqnyfegxK0gO4d12MlQ1le2eTWy1d5W299+Xbkq4m1tPa4TEhHpPH6hTJSS1jZ4gKip3WqbRw59VMqppZF3Gq/wtFha5THaSqHSWK4m4eNNiRriXhw0wAvTEtSYgZPSESiSK9JUZOR/pFs+TSFMNwrCrze7hCusl2dVIuAH0NEScblRJDmPx7erzYoCdcVhBE0WjZMlEEle9bqDqXCX3cGqk6vSqRk3L0iLddUjHTIruT8OEdYFwtznXGi+ak1X1+iPrOBIF032SCYVD6XlSkydMki+p+hEy10N11hXCNw7i2+bBgZscxqW9IotEI6VY6pFcmoSau7ylt+bF9TZrmoQGsN3s4TUQ9KREBOLi6rRx9rr/XXIfd2EhSZ26O1GlzESQpqV7MTyLhGqKbJsiJaWsJW3AQ+8OBlTLZOHb+qVpFBzwSptkFOUiS6bh8VtuNKyjlqm0UBcNRMxtIS6vLigzeVcJKfX2ypNFyK4ttw4lQXtlpomHRiBd1OrfcmgGLoxFUt09N0fEuTJRTYPhtwxWSRVITM7hA+XEv6aajo1yLKZ41Mi+zUTU2lh8NLQbkiBpMuElB/WJXYOz2mveTjrTQKrTUVTMy3RaSUTqJAqK6qertXt5QLy/u44kJKLHQBnCptk0B0u7ERERxYndBziQE5bOU3afhHm+HFZdM1mi4g/RLzJ22lgpmpB4MAEpYCpMEwZSElJM1oVf0k4JFsgsVgkRCNygjy7sRtSVpHs49ynEJE7d6RAgmIXbsdKRlNqXfxtP2hErcNhgYrUK4xt6e63YuawYwdwN2WKujNUPK2i6spJw7qyYNDVkEDSSTFW4h3XXEX4cXWO/L68YP6kl1WzfVLUEfsh27bi6cNplhJJMb4MRclqiKqaxaYiHixZpWOp55Tus8WIkdC4iu5bcMq2vOocz3ebTpXzS0Ee8rBVjqKSdNW0I/100m4GTlJXmM+jYWIUXXMfMR9WIGk1ZV0zUWl9LTVLVakJiVyR+LwYnvQin6fR+T0nj+gvk5slvt9hpXaZnLIhGWnV+f1fsX4l42uVc7eaimqXswRIo6tP5/WuhVvwoI345Gzox0JeHG7iskLqWFU0h58LC/PDXm5sKCGKiaE1eL5BtTxN+thGpItnVtPvIGRu03CVlwnaYn0HjkT6MdCqAjuwDU0TVU0TTg6STOjuTtKQuNlqFUHKmqH9PktStQPxU0ldJJVQuUwO34TwaEVQLy4yVmdBP5GpTTiU11VGTpU9P9EV3IV2NA0XUK0lAtXLoCSdANjhPwnjjPk2vJVQPWarc7Rkij3o9PR/Rdd4+t40uXeWB7N6MvF0fero4MBTI1TERAbjLAtrTNBtxQ03S6wrunB6RuxPYl7PjLHWdFVLRtFqIt7rnq4NTLwBzfht97AYgL1HOqOxQEtofiwL5QuL6mx1I2uk0yGRFzeHD8UTwVwwxd6MrpU6hHaP/ZEONZ+u6maxTdZUmbLeqV32tnOf4MFpEPBb7uKnlzEeroMXJB3jvf7nR+972LkmPXja8DWY7bb+sv8ArHtRez3R/hgsZxhdxr67Jb9W3pH/AJElE9uHSaV/tY5RANO89uPE9DkSxsSE1mhdBLCOFhHDNFfx4fJq4GdFHMEK6EMeJLCgf3sdF/cwJBGSTUhwhb5MO1AwnZ/ixe2qHdaRETx1pHhQUjw60MSIgVQiRpp044L+5h4SW3CfD4gJKRCm2Pwv7mFiSu5MckgZYIFCFNJ2/wCXHNu7HViwlj1v+XFwKgiXJJYRLbhwQnhEgxMRVREkdW3HOqGPLJYbkGLMoVQTpJa7/LjxK4R5cfmPZa9nklSIMKJ2Fhtj8t/y4nFezFIJqgGFNYPB6MMRvwoOPRUZJ0SoW+bHNx9FuG5exjpMebHor0l0RH4LsckR+DClv+XCiaG7djxFBSETJNSI/BhuoeJbhw/xYbqM7i2YgL4KTjBgosivwnbdieawYKlefLizMYtgkO1EdmK364WlNi1O1G7ShyogsfQXw4aqMzu5CwYk2rb9SPwYU9Ws1S/iw/Bijz3DlRZcNz5kDzQPqwmSQDg0SFLxr9HRVR3eXFHlqIctdQ0DuTDB1Nd2KjdpSqusL9PqHUqWQY50LsSSjC0sdJsjHDTNSbIJRoszLCgxKxYmE2tvMGHzVIMVlUkCvaoRLcquUdpcx46FqAD5sXL1M2dDf1Yi5CnFgU+r7r8VDXCWkkS5bSAZCKgdIP8AkxySQYfOGDlrbqhbfh4xYNlbeIDF5PjGSGGmIiioXSDrx0VmJCYi+DtNLcmfy4i7T/5cTbLNGSqcHKKBL1gXYUT8mORSPqwoI4kaiCWDD5uVuGaI24dCkZ4BdTVgoJ99rhuo1MeXEpHxpmN5cuJT1QiXLzYXlUi0SbjSFUDJQbFqsrssxMNWpoFuDD5nEGkV6W7DwmR9YYXP1k0zpaEgHUkRADT5MckleO/D4UNuzDdTqDAOYmGUmKje7CYpeTDy0yx7S/xY+yXspNyH++GOR/u4eEhaJYb2WbMQUopO7/JjoSx4kscltx6K8lhPCgkGGo/3cKCWIRU5Jzj9t/x4bieFkyx8ylIXVyRGOPJljpTHKf8AdwOQq+aWEsLCeG44UDFZCrRJLXf5MckeP3CDpcGqKjlUFSFIbjFJIiIvZEOfFEVfJL4/CEwETICtPq6cBt92lqeSqprTETTcu5JwqCGu5S0BEz5BITG4N/UYe5g71LHRUN6pYRi2qolHAkvavqiBXKlz+PvTwCNc06/kN6kSVMQNZhKKIseu/wAuESx64/8AkwdFByShFjm7/Jjm7/Fj13+LEl5KB/ex7Cd1uOSO7Hl5dXf4seJXCN3+THKiuJKKUErseUsw3vtx7V/x4uUF48N77cKEV2G6mLAVZpQlQwiSuEy/u4TIcWKsksS+PCrhvj2JRUE84jHSbjEdj9Ejx8ylbmqSJ1hq+kmbBus/fuUmzVuFyq65WgPvYYzE4wp+NWlZRYkm6XhG4yM9oCI9ZHinyDCVlFk5iq9q197CJ5kmYdBF+tX819g9GMhxXxZR8KMSc1OFtH8/Enlmsz96d06R7yj6qzdkhIkaUih0Q5Xb4T73x6SX4vl68D6oagzokkxWUqUYdNXuklXsilFJF7IWkeHWe6FdwNKitRzhJioqVrp2kNzoR8pdG7GK6rjFGMwnUFQVUqvLpKgqKztcnKpH5v3ccmt9/uXFMn36iI90VvHbbSWgYtNy9pHOo6VzKScFJfnggUHHMQoVQ6uLm8o34iYfMTPqnB9WxOZAyCYGCpNkJFJcr/5IxvxU6DGs68n27aemI8YtwZpXcAkzSE7dhbBxek+y/CuJEpF1MRTxyqd5ELh0P3EMHjXYUBxqXNXsqgqbP9WKvVE9raeYOE4rNOlSVE/8NaJaC4+YkD2K+0J40hT89A1XGpzFMyraQZn+lQO63ykPQWMLTy6zWpfosgwYuYtp9Q0ycKqkqYXd6Kqu8C8vl5cP6Tqqp8q5j6T0a/VJqBAL1ovyEHgXDr/lQxpbXxa/TuxdKQpRXcPtPDJrSS3QQ4TL+7iBy9r+EzNpsangQVQsLSdNFeZBXw+f28WAh3Y6jTVLVU0LjZaVh32ipyy3UiRY8H97HWlj2lgpVpMv7uOMKkOOdLEhUCSZcuORE8KW245H+5iUFVJciO7DgR3YREt2FBLHoL7mLovLjnf/AIse1d2Or7sRIV8kut/+PHi/uY5IjDZjm0/HiqKvEl67/Jjxbset/wAmOSvxOKjJdXbcInhYRx4ksDkiQTFQTwnaf/LiQJDCOhig1am4jjqz9nhxpWljwpYrJWikdLHhSwtbYWFNLFRKwEjb/kwsIY6t/wAmFLf8uKDUwXhHClv+THSY4WEcDErhXIhh0iO3HIpYcJhilTXSY4dJjtwmmGHA8tmKlakVMJ2/5cLWnj1n+LEF5ZPFLuytutDEfV0/IxEMmjFNxUk364sWYkW0VS/Sl5R5sTFxiooZo24pM3ImWZ8NF2CSbViq5AruUlbhH5RUx+Wba1nPTPD0BqXeHygHiUdIZTyzyqKXkYecFs2hgDXuu1VDuuVK7zYMXo9Pp9HoxW15FKDak7eO0xQSIRJQvatw4dVpTjUhbKyqGtYBaaZXFuO0fvYrr3666YAJjLAfR735/WvMNNU5lHmUqoP5C59uG6zpHUJK8SIOYfDhhLTZoMuISAkhDmEQuJXyj5sQ8U2WaNCVdHcs6VNVW0rt3hwG1R9lmErSJWBIvQd35evCwn+T0X+j04H9UITy6JeqZIkFAK4d5J7MQtO5tOIh4TGoDGQQArdZPmT/AHsMQs7tQ1msavZQLtwap3ctxFhzYACGsKV5WburDX1pEMyFF0+bIKcm5URLAzzcrdo7axjCHeCokr9ZIh5vLgbk9X9CgqrqmqR81xYPouHCqGBcdKKX1d5ap34iMlqhCwhvS9IkJdQlhvpelHUVVAdO+/bgZ5NTNTVBNMqGilk9F0rdcoN2gl1ljQFQwMWhbGxIXEkAXKql9r4ixnrkx5qqMgi3fUmVJcmqoZCqoKRr+kTIdvhx04HSbKWgPLitwEjPBXs9TkqlcySFJdioPLZy/F+7izv9EW3pNU+Y8V1LB0rwgXs4o4DzQTRqX1UTIOTHYFqkJD6CETHaJY7cbUVLT3W7cIqWEsmqZ8vmwPvVsoJ1aAkN+3HKjpuxElVXKafixFrKrF17QwiQAraBcxYsFjvqJOolp0u/9EI2fS0Q5QbP0hXbLDaRe8Pw4r69FO3qaiyQICmG4iJUR+/g0Zk1IwY0y0i45ZMlNILbS5duBVBsJieXWbNXgpilYbhZTcA+X2sIrdVvvtk/twQVORutZpqsN6cnIxRN5GIoLuEOXTXEiv8Aiwn6SqldW+pFrlA/R6RJiPlxbJinZNh6UQXNAXBqmFqZ3EBhz3fIQeUsMTXdJJiF9w+FTcHwnhv1oj3RRQ94VWiQ1RI7Lh6bcIqMw0tJI9C/qHpxYlEmCo3iGgp7W0sRqjcyW4dUNpfpBxYD6sUbHulosfQidy4nzF4/Nhus6DikXbNsLTSuuER5rvFiRcehuTtRhrDrJWXDdy45JoCo2iFuCxcHDUXMvkk+Yu0ZFEgILVAw5JIxEbT28luIMQ4dQVkDLZ1DiWZv0VxIC2qB0lgJ1uOoFYkXCSw/3fT8OOIwHrMlEUUWxC4VAgVUI+6DdfaIYfqjxYkDfd0mWCvkNUdAM3ytKzINBnHW5IluYx8I3YGqq06SnJ0G59HKhqx/q7GbGSFJBJB6VOPVQSFLkWaHqAX7vw4dkkikJGoZKbbiIS/DjVFbUVD1NHi0dgLZRK/QcpBbpF+7jOdTUrL0lJcDMJEYmdyCnSQ+XCe231i77NJd1L6GsarR7pKuk1BW00juTPqwuT+SZxyzMX6vC8xJ9GPEzD0kRtlVLj6SVu+9dhJRg5VEbTG4+m7DjTzJnGCc01Uk0umhKRQcNf8AplLkyt9n97BFhH7f0OQqQWSayie1dv6Pv4GzR5ItR0RaComGzw4fxtRrRaxORbqpX8wkXNgOupc+UBVj+IGHp3I0oyNDyiYuHNOChf1CliZjEKPD0D6vjkBHypFgV07mfwDgRNtcmZbk1LSH+ZgoRNR0/O+iyPWFm760hLlLGJuFC/Td6PiSOqbINIyj4lYkXTNLYkAj7OHHHtrdwYiVl5Fin36KalvVhZBdm8uPl8W7lxnCa50qJvmTh0jEPPSJrrEmQ8uG97YFCDibhst5sN3DVG7Ytz4R4AxuWS3eXF4xhFWg0MdyZu4j1o3XaOxFyPSXKSeBW6bHTbshXWuG+0C8WC83XFVQgQV7wPFtLFPzLpg5ZkEizbWu25EKqYlbcNvNh7aH8c3Id2kmtG/lFlltX5BzzNJuRkKhCA3Xao/vYVc5rUc0T4ORHW8pAJYD2h6eHU+vklZ9qn4cRMK1jpOQEHDk1Ew6hHmxpAsNO7iTrpIs6NoykauExUkfOPjf01CPfTHhsXVEO6E+ncVo44jEJiV9Aox8Y4WO24rRutH7uCJEFCQUewaNQ/K3HcoisPNi1vGoJ6MzHECaenaQ+gbdpYCfu4MDltt+GS+9eOm0YKlRdDLKx6nrJDhyV6VCu97by4rspSzSCarMOGLv77lSIi2eXBQk55iDYr3FygBeQj48CetpR+qooavoLTDl5tuKbXUVVQ/q9Aq6jcfqDk7pUW1mY1V16qamQqAH2QpFYNnm5OrEoO3rxA02kDWLRJJtoEt9YIeu8v6fJiW9KvL+QMf1b4Ydq6q0U79XGRCJaRiOr+OK/A/EnVqS6vMUkoiRDqKRaf4YJ4JbsKCeGoq7cLJly4dEKUtuJxjob/HhMf7uFh24rgihKa6ET8eOvaxyP93Cl3+XFRCrxJDaqWbtvMqE4O7iCM0i8l+HtIvwayibqzTFxakqXTZ0/Duw8mIGXqKQlvVyJLrR6qSqTYeY25hvt963CURSMq6cE3U+rKGlqjrjaN/KQ/08uPwZxDem+F+Naiuoyjlul/5YfxX7DtFIF/4WZpKv9I2P2dP8l3mtFrP/AFKZgJM0nR6o+c9oFhrC5fLetG7ZU9Vw9Pj3Q2/YNOgf6ePCMfm0wZzw0TW8UqgteHCuR3AuYGNgl4C24LVLwizIXExKLXSEmWqr+yDoSHHZHLNR8ccRt3mkKVOQiRezHl/j6P6rAjd6zhHhwrRUtxeEij7Uub+Hp/onCLAAGxINocmOisb3dRYliILbEsNSZgRY7rJcbIe6olQzLm5cdDiS9XY5JlaWLJAoC0SbplaWHQq49w/kx0KVvPgYoGiWiMEsJYWFXDe0/wDlwoH97FBCjBdgnF92PWf4sJiVuFhLFBCiRdBKClhXCF3+LHhVxHKVuaK6Lmx+Y/Lv8WOh3YkIqJEk9ILsKaW3dhYQx1b/AJMRkpRmmZJW4T0gLow+JK7CegY9GLRdVDrCZm18OE1EvHzYkhAw6MeJK7oxeL6DKmUGo3wmSHixPFF3YYumRpYvF8TQztMQ6lGk1xzwv+XDwgtwnd/kxfJCwFM9C3HtLDvH7YGISU0zFLdhQduFtLHtLHpKMUmJY6tux63/AC4UEcekvRXSezCwlhHHeKyV46EvzYUFLDUTwsK/kxQQokXQT5urbh8i6xEirhQV8UE1JMBdU5xmHSL/ABApq34cJq2YFJgVe1Ukp7irxssw1eWEJYapuMeUV24oFiBIrPkOpVGaagSxHZuxGilbi3OmoK82IdaNASKzD9h/TFZmpo9UlF2Bbjw8w4dKMrcKN2u3fi8iCKEFozNPmO1PD4UgIeTDFMLcOEyMRwqcGZaE+Y0jFecRwOB70BLDMYsECv224kNX/Hjktw48JEC8TTR6lW5xK5MfDiB0gHlDFyeMjcIkFmIVRmYlyYb0z4wis5XUxZslCkljoUNuJIkLeYMc6XhwZmIHLTVNLElHgArb8It0FljFJJIjI+nF8gaEWBqL9+iQqGNwJeHGQ4o4wtnC7GbWlq7vMtLw7w/WXdzsdveUa1G4RAQuvwoxV2qIqrDrap3b9/MW34MQualLZlSUaR5d+r0HzVI+9diCp2F4dUSD5cZbqan+0VTii30tjYVyJqmqaTmBYb7usVUkhP4Txxljyt9dKTbIiPtFjL6l1lrgYWh1PaltZr3Xcnt9rDxRK5Pkxhelc+MwqAeJoks8Yt/0sfKErJsPd1SJw39pIy97GrMpc86SzTujQRKKnkktUo1dUCFdL9a1VDYqPz411r4tpLpp2kl9Xw+/QD3hV2TS3b8LcKBXcmFiE7vw46IT8GNLmpPBR/B24RdIW4lCHCKyWryBjwkowUWI3YTJC0sSXC249pdBc2J5qjlKHUStwiTe7EwTO4sKcBt5MSzVDIUCI2Y6HD5Zmd2wMI6Bh0YvEgVZCQJDH5ddhwSW3CaaW7E1CKSwqH97HWljqzbilTX7jsRx5u3WcLCikFxHi1NaaTaJjxdyi1vKPTjLcRcRUfDzUnNRd1ObbbXK8tO1VV044VO/RJQue0fxYraVU1O6Jx6W1KppIoltdvV9NItvn0h+bFfzt7RuWmVHpWhX81dKgFvq6JDXee+XIl8V+MbV72m06nUdjCZXxCmrZ38+qcg49reQ44+5xbxJfHcCZ7Nr2Rw+0Xp/oug03DtCw1qGRe0te1BWtQi4JYs1Mt4dQP0C82zEenmAxV8PjxEtcwc3SFT1JUOVNXqdCac2hql7NiqGPn88rqv3XpIEpRnHj0ptolmI2eXbfiPOsMzWBXrnFzje67TdxyF/yb/mwwpguQFLrZS8X/irX6JiPq/or6C/1yMrTkgLPM7KuXg7ys10yuS9obxG8ffL2sFKka1pKvo31lSE2hICGxVIdrhL2kucPa5MfNele0zJQigszOXp5EysVSbK8dHF/Ks3FwW+zgmRdaUlUJN6hjjGnH12ydp1UxZaviVSMtVv7vwWY0VNxBcrf8LGQ/n40jqbNTVHq9JLemPFy4COW+f7xJ03pXNo0kHTgQ4OdSt4V0HRq2bN/wCtHZ4/Hg3Kc3TjeWy5MXRqTCytXSO0RRJcY/Lv8WOSLEfOeuDiXgQJs0pI25g1J3cTcVei4Q32+zhhFAymnhOgG7CeuB7MYlzCPtvSlUKUqzzIpdV5q/xSCVQbJJBt+1JVITC+4bBI92/w4JFOZQdvWObU/Lzua8axYu0iF+q7bsnw33FYCQglcdyVpdO+/dhUV0aB8WI6kx83llZktK0td/kxyWOUxMU0wVO5S0Ly8R4/cN4JdNcEVu/p+7hixm4qXfOGEc5FyTJqDpdVDckkBlaFxcm88AXtbRqMbSbd/M5l1RdJvTaxsI2dM2bUttypFYkOqIWj9qZc4eLAryLzupXJSHfRowC8u4kLAVcqSzNDugO4AtAt++4sZ+5X3qFSLHzvCnVDautME6trF/cxx04zl/XpRRDto9mH8rUDfCY9s1tcP9qUL/8AL4P3cX/4rto830cVT5iru6tHW/48ckOM4l2y2xFsp6nh9qWVL/wsM3HbSNK4EqbhVy8SThe37uPn+LrZ3i+aq/8AD9d3Vpa3dZhZFK4tuMpse2LWc9LFGxtN04zUtvQFRu/eGrZcR26WPVF2mcwpGHfQirCMacWgbdVVjESKTgQPnsIx2Fj6XGFtHTq+avo8O1h6tKNDfMGiZGeeVVN1C2UjYJw4ZQcekV3FOBO1w8Kz3hSLksvLqwMG3bComZGQeQ1PyjlZJW1V27S0EiDxJc37+KVMeqnVMtUafjV2LOQS0kmxASRIJBzjv3+W/A1qRVgwlmsJYKSLcwuS0itLyeDHFrlQtcQ1zlXWSIi2+yK6DSEVtYFhjlVvrrP2rK3brU8qyGn4V6BmItvt327kJU+nyjbgMSdNRroWrxuz7xqvvuLmLzfFgmKPeIbtWCrPjHSu5q2bMjVIukBHbZ09Z4g5ajawXTdBHUq+ZrHf3RJKkSXmtBKy738M7fRU1AGRTDFUPuOVBSdV8yVaoxdcUzpIku649IBEbeTr8gDjaya79VQrmzYRDedz9L8Hs4+ZCdE5zSIoxTz0ThNEjuIUGumSvtW2meCBSMAlRckL6eol2o+NU1UBInQqpBzd0LgdIyH27/LgC4WzAhlPUjqap5VE1UzfrunT98zXFi9dKqoKKc6V5kW7EO4qWdhE0+IiF36wFpal9oKpeBXx4KtQP2ctCisq2eJN71UNBRkIq8o8w7tu67FVjItF21WYSJ8MolvQFchuILfLgFioJrUYq92JqeyfzB/NfWDOYavFSpmYSAXiBbu6P8SR424s1MS7rvB6CHqDx4wLStOet2cpAg8ikFI9UHTf1hIpNhID2mAkri4qFWGmii4zgg2KKW0R+n2wfdBIrMbux8SeaRJpwZCSy9ys3XykJRJbBUarfqS+HCekt4CxkJ8yrYkkX9P5tU67U5+NbVi3HSLrHekB/LhFnTed0yioszzSbuUbrCJKtEiEPgSLD0ePqfmbilpcKP8AKS2CTdb9SXwY5JBbd3JfBjIRUVm/HMFHDnNdkg3biaqqilWFaI+Ii0MV9w/mdwOO0LS3LZarV7gvuJYuDjunP1TclAuFnA3EtrkkdvIXwYTIgDnxhQmiBXH+fij1C5P/AEifl/4WI1SHZmsIFndR437bhlJEvw4tHjsB/Ql+f4Kr/CRH+kW/RID5THH7gLdmiiPUMJKVCvPNJxSQcA1bvUTdGIpAFxgPEb+a3kwacbizVfnekGrjGSyN1Y831JU3dX5d/lx0J45t/wAuOSHDLIQOenAlhS272cNR24cJltxQ6xBEtPzXWljkkt2HCe7HRJYB2I4daajtwpzY6USv5MdJpY8vTNIkGPCG7DzS/wAWPaX+LFBq8STVRLCNn+LEgSWEySwMSvFMRHdhwmG3HWhuwsmlipXLnh8e0t2HVv8AkxyQ24qIVJJpjh0KQYTH+7h0GKCFWAuhSC7CwoXcmOk0rsOEUrMDErxSIpYWEduHApeTDhFr5MUqaj9K/mx0m1xLCz3cmHCbOzmDEFJY5tAStLdgaroCtWLmqR9JFa8j2aVv6oiVQ++rd7GL3MuHARbjhltNZXuEC8JltAvd5vdxSKwSOEhnzSCSEXCTxq2ZiXTYgJCXulux+YLMHQRD3tPyenCS7pUlp8KTq30SdQTLaNFFNenmT4Enm3c5VtK0R8olbd5sAikHQJZpptda1mb5VIrStFQB2h8wiXu40ZVgNqXoZFsgsKSjVVqIqKF1kqNxfMRYy2ofqh6wmGYEmOuqYbt21ct33RxueGses0rgjt2j/wBkguhZRiXylqRFJ2vNIm8WT9XMkLkBIdyipFze6P3sS4q2t0/QPMXJilHU/ERCZtDJcnCVyW3f/PxZKTInTQUZNwXHpDuSIbbQ9nGJrGDEJnyrQgQ8qgcw15WMhFHLXaKvdKqXcvs4Cw3/AJSO8saVqSmoqbjijpN8qgJeEuvArdZQVAKhAwWTUT8VpD9/Dqx3Klbp4ulFZq70NS+7IRkKpcQ/BlLMpVVFJcW6oGSKm4CHw4cVdJRslOvH8S3FBqqd6SAjbbh5J0ZNU43vmotdDWLulOnEMmyuIjsuLGjwNtws4SSFwXWhyyS8HNS0G/bzUS/XaO253pKJnaQ4sElmfW0ytrP6jekoe3arp/dxFwFITFQuibMUREQ3EoXKOJycynm4vhTYOfWBKlaQpjbbgZ96iz4vYjJXMU1XlybEoq4ZW1jKOpVNo8WJVFUSC4huMfewX1tEx3mPs4EeWkPIwOsjKwqiaitlrkRut8uCauuID5gxz2/g2VZ2S21ozOrdqu3Rc2EvT6BAb+oscIvAdLaNhXc+FiS1eflwojDSSYkmJDcV6t2/pxL0ymLWbZu1UUytVAxTU5S3YQ0ju720SDCg+nr9AY84chioqzVY4brSi3DN0x3cqY7L8Wym4QKhp9q2pdYWxa4E/XLk1fB58Cq8BK9XlwQcsa8YUzbDyiNrdw6BUFx/RHtHd8OPtBSMGYtv7ULXE6DHZcqFTieqcO0hW9GvHPEx9OpA1BVNK0DVHStuLxbi+HFs9Hej6QPbfjqsXIN5ypXjZ2g5dtZZwUiokNxKqgZCRkIdVv4cMWEs0fot1kFh+tJaqQ9RB1YNvJC+4JsNxEREfmr1qYJpjtSlLUvxb0F6U/sR8WPI3l6BMjL2Sx0K+rqWld7O7HiK7TtMcJ9SZJFRi3V9KivDjrK8ylvNjtEAJIS0rSt5SHDkx/KBeLCIjaN6W6wdw+LH2ZGvkFyKQBygOFBC62/ox0O4ROy2/HXTyYhJfVNsWBpRjdyYCIur7PdK3AhzhVkacrugJ1jbrA6cMyVLzaX3Ruwa6GQf1MsnCId2mler3g7Uw5SK32sCftYU5LjCxR3kScfMJGq5HbtV2gQj4cMOG3hG8gw6W6X0sMcEsrnewIeZa9yvrH13GlT865tkW+0QU5lQxMTkREzrYoWoWIriG5IupP2cB6aN5HS0TWHHuRfO0kgdIKbtI0tt4+0H3MFpGsIWfi/Sso4SQeJJXHqlbdt5hxmuMfJ/XcMjT3RvU3USjHp0kOPR/VY1m7MVVc8y0MSbjLVhplh0y/X0fvQ7a0GplxVcdPS6LeSp1UVUl1yD+LEX2REPh/e8uF85qQi49ijVMG3EWdwE6FuG2zxDhVbM1tLMV4F5TxOW7pIk1xFXmEubAz9GZvqCHToWWcL+lIO4cAsldoW8iol4SHmHoLDq68C8UWF9p68s5bndlhjIe90Djj0fn40w4dvtJxS7m29zMju04xIf5e//AGSYoLaImB3JnuEsJpc2HcYqKDgoYe7REddDqubny/DiT0ERtCy72t2Fbx5ZwW2JhRnoRYEmYroFqGPd228+I9VwEWsPobubXFtwiP2pezbuLFiUTSACNUNoYjVGzh40+oraDhJXVSKzb7JeXDyjutINA5RPU4kRF0i504yH9n6scEnK1vlXDUi8QjHU36Il7X6+lWGOzfqqn3TeNlNByirYQC7MhLmtt5cX2OrWHmHHDqtiYL/kuu9BbcDVYOPTsdWlelaQlu2eHEctMt6clE1r0mxAgCTdZfVJALyLbaHJ7W7AlJQ8P3GmcZepyGojpIS0y9ocfi/cqqyz1Jvi5SEMZahIeX2ej4/3/tR+aLLJLfWG+qgfMsmfKN3NiPkpE1XQ8K5MUQ5tuB0zr2ro38rSZTY+lo5S2cNyKD4hV5cMJCoJVuSOk8JdHX3XEXIduM/RWRinkNSMiRLVtOUzVoqCqHMTpk2cEuoe7U27fL8uGLCIrOr3QynqlRduqFuooppj7t2KepVQJKkDcCQI3V6Vobd3L82DFlLVSMiitDKn+1Qu+5iu5tjbKYn6cFKuA6JjNaFCl5kjmM6cKjwgiJkVpEuHJ5rMWek8n3tNpqO3L5o5eEPdKJpENviHdg7aw+kN3XiFkEiSUIOkuXGcx4qrqocrGIpW1dH3Siaz1LLOfRUYsXLZ620hOwbbhX9ny+bBWpp/6JGE9CTEhuDaqiRbhPpwnVDJsqSKxLCmpvESt3e7igyNVM6Oa+sIxa1xykmW0SEenDcscLw0ItD0En2I+cGhjuVsKD9LppxjcB9FjkhJNQeU7uXAWzKOpoysG6KDtcWhBqqIlcQpERYLUFVcjWxJJQkQLMZErlHag3bxDw+LbzYuYZMg/IZFzKuVXyu41FzHcHgHbsxrOD7cJ3CFxLLb70ZR/P70nul1ftbBEIyLuyj/AF9KDbAOPJbgrlU26QKkr+tv6xwsSB40jTuTlNsmRO3Cz4nxjuFRUdvwc2AVUDBZhUEkwVBAU27oxS0OsPZx+4/JbxATQ/4fJzOFsZNuR5e6X6uj4v5L8t+UezNVDvntocsi3Ny5v1j+vp+NQopHjq0/+XDzQ9H/ACY60MdlkuV5Sa78KCR4W0MdChiMhUhE0mJYcJieFBYbRM+Y+nD7QR0xALhsxQRCjGmi5lERjkIWu41VU7RkGpoe1yW/hxKZnt35w7pywO7S73bzWdQ/08OKZmcK7CNYzDUDuj3gESiXMkHi+7iyRlbg7jUSlm9rR2l/GOYSIvF4cfz+8udjdt3GblwaHS5Ev6en+vSv195LX8Kzh9mOom5CX8/w6ECKgZ+mRbcSleTtIgXaqdQmGCvkvUNbVhCqVDV8k2UTNVVJugm30i2FaZF748uB5Noixk1mhbkQVMUiHksuxP0fmCzp66KlLhRMr25JjdcZlv8AvFja+SDiJm13Lq1W5Fpz5svi6VX5TbM/crVm0jcnB+dHmijoju69uHAj58QLeRMBGw7r8SzV7cIgVt2P1y42QL8xsVQGnuP0ksJiQePDi7lwEmIlNJilfj2lhXH7y48pJPSP/kx4UDwrj9/sePHlJN9LHtIsL2njsfNiKmmu/wDxY6EvJhxaGPWf4sQJSFcY/R/u46x+dOKlfIV2JYUvDDMlcc6p/wDLj2RNeF8QUgJYWH+7iLF1hZN158VEwStGpBSGFE7MMxXuwsmWBiEwRIkJpwVmGLob7sOFDu5cIkN+LGCgovjNQ7hDdtw10v8AFiYdIWjhioOGrTsxSB9iBJraePWnha3/ACY9pYtVAikx5cd4/dLHtIsQVsSXhHHVn+LHrP8AFjoUrsRIlIWiNc2f4sc2/wCTC1v+PClu3Hs1W5aa6WFBb4UEcdEOPi9AEnpHj3Ljq3/JjxefHlJKCWHAq28+GWO0y3bsQIVMSgpAVd2OtXDMVcdX/wCPFGWic1OCLCKgXYTJXHJKmGLBaVROrkm93RjwoW46vO3Hrv8AFi0hJUaF4scjfjrmx0P93FGxFDrXN3+LHhwsmldjxJWliqSviaSw2Wb3FyYeWf4sIkO7ExdVRNz3qLWZh4MNyagOJgksN1BwWNSl7tCKHeaDWv0INnPZbuV/XEFJN5T1ehtVk0guvaiV2y+7eXgDHbDtV5nPIxD0yPpyciljSvVjZKt9B02P9UqHDcwdeCCmh3yfthj5szkCz+n0w2VREf4ee3F1/wAYLHL/ACg2ViuNurPDVtXQ+C6khbKmIdIrdf8AXNVmRXqzuRIl/wDzA5v+7Y6ddpOq3rdRs8lMgl0VftUyr64S/wC7YwU4p9mSgrcGPJbcJju5d/L5fmw39TRQ2mvGiSNgbrRHkuv6f6WY5mNhZ5ej+v4re53srXsxUFOTwqA/Y5Eub+cfzmOtweyCeLDkhl5TcpVUfULShqK9Ux5KvEpenqoeSSSUgkQ2N+9tC6wrj5uXGCWMCzOpJZF4izMUo1uqlcIjaBXclnVj6DdiFqDLI1uCAWp+u5C23k6cObJw5TjWj0Y7dSXXK4OhTFFaKHdhQgwmmWHSdhEOOnEsYk0Wt3NhQWQCWHgpY8Q4qzVOKYqMjIbEgx5GJ3d7iUa827DpZK7Ecw1KKiU4hEujHSjIBEtmH3IWzCaxXY+SJeioEmoXX2YRdNQLlDEo4DDFTBQkqiFQ6zcwLCOl/ixKOhvHDUR3YJzVWTSa6Ho/5MeFLDg/7+Ey/uYmJKBCs/8AaYrSuaInKLnoFYoiFgnRy0jJEr3S6obQaqiG+3S1SPxX2hvwtPdtPLqt6WdQqWYUxHt5Dab2JpBwgvZ4QV4orD82C5V1IU3XkKtTdYQ6UrGqmBk2XvtIw5OQh8uBXknkLSsNKVdAt6VipVnHvEkGqspFpOSA7lSsG8tg6RJe1b5sc047tQx84HqWq4fqQPsDQBKlexq8U1l6prd44Mr1VCglyJXzblebzYdoUX2OO8Mn1bkKpXCJQTjb/r8FWos/ezZSUxIU3L5btRkIxU266SVHtbDMOe0tX2sM/wCui7Lo7zy0FLy/RJhu/wBbjnGONT3S+ctr0u/n/wBIep0h2PeKTMHFakmCRiSXqJUri2/t+n8eEVKL7Iu7Sm6/Hw2wh7P9bglD2r+zBaQJZaCQ+EaSZ/8Am48p2suzBttylcq+K2l2H72Pkanul85fc132vz/BCZ5QnYzdIpg/VrUlAH7T1Kd5e13+GUbRPZAhFScwtR5hs1jGxUkIkt/tjr2kHlwXlO1V2Y1ZBqaWUr4RC8rRpyOG/Zy83tYKWReYeUWdzqcbUXQCUepBaXFE5hGaF1/hsux9KormgLSUfEqiDmNC/L+i8p6wSKmIBrUrlur9auloc0BSS61UleJuSIvZ3HZjRCaTZqimzao6DduAJJJD0gA224cSEDDxE88cxsa2auFQSSVUQSEbwABs5MIkF3Xjs3B9kK10ma5uc+yud325dcfiO0UmXLfipp5l0G9qRajwnkhkG5OBca4Gk3S0ue9U9nRi1LOmccmT9+/bM2rfequ5VBJJIPMR4x/Qp5er5kVFPT1YRXrqYXkyjUF3CXemqqqQaV/OPLh3dKsqVvs9yCt9N1gtW1A/tJVA2ke0JPHGv0pBmbhuKSiapkkrYgkO3y7ca07OsuwlJBNmyYINRZRJ6umFuqeqO4vHjFuZ1GVy1rJw8es5eVnDcXOnzKGIWRgAiIGht5eUcaJ7KjWoTrCPCNrhwkXBmrKR71mkfFNwIe6SK0TSIrh3buU8c7ee6xe6V2XMuiiwIWN4Y6orY4jijs836Pe5lSmVYGSU1FAkauu6aiKuqkJBpDq6p7C37L8XgT7sVhAhE/FiBomBhPpVmhUKUU244Cgm/EiluHuiI/vDjo9a+QZeWW4lzejaE5Zg8qAvbIqFakJagakZotidJLyCREugC/1c9C8RE9mHtDw2Yj+Z4CWi6YVamaV6yZNWyrMFREtyXBlutuK3q+LEJ24oh/I/QnhXJJaQyBJeZW5rbdhpA1fXmZcGMrTmVMvKrNZZurxKQpCkXCgzSLaXPyFuG3n5scs46anXSW44bL3Go/OmbzWoF9GNKQrBiunIcQvqL0+zusSVJK23S8Ylu8uBU6zu7SDISMK4Yh/JQjMf/AxoOUoOezjo5jmDMKcM4jUHqThkkvpEYAuquIkQiQ9RYDilBtXg3/QCoDHxFIpYw9rqxc7IYlH2Vo32iFK092knjiBQb5iVzUCUykZiqDKmGS6BeArjsxE1vm5UcsDH83FWPk9xk6cyVOsmxdNgiPe39WFyy2R/+57L+9KJYcM8rHL1YUWGWkqqsfKIvwI/vYciDTR5wYIMpmMEN1KjzmB8nKpZmvkHiN+ku0EUFRvG07SARs2lhFrUOZ0wo4Wls4Ks4hI95DKK7vN9qOClOZOzEDohM5buWxOAvS1H4kf+1w3yxytpipa8iWc3CKpIqv3DVdDXPdY1VV5wIvLgrrvZZv8A1VGVqimuW8kiL5Gn6hqd9JLSC9qTl+uKpap9F2qXNgqVNkVPRKjeHetknklJg4VNogAKklYFxmd5dHiDBRa9mrJ1hwrlCikdTYQkThUt/wAWIbOKiJJ7PNZKLWFdw7EzdIEkqq4JKy07i1fNaGz3cIcLrhUVQ4taUeVJlDqV2yHy+pJnlLB1I/phivNNDkFxXcoXEk4SfkIEPgKzbsxjeuu29mRLqDr0lTQqJDbq6SpXfNjeWR7fVyBhdI9QTbyp3EW8vr5Y+U81A2KD1EY3Y1thFqRE6kdTmkMRRGqbtM1/FwdNyTONgxcTbBV0qOkdgmC6qW3d4RHFmyVzprnNepH1JV+zhXMP6mdutDgAK1VINh7/AA3YpspRsbKUXl+5VRG1pAuC9r+ElxxPdn2GbMM0pZFqiQphS8gfNd0YdETDrRCI6kHF0ClJXoTRZwZLPTQFRVwaSWqraF4JIXbvexUagVZsZJnJLrCLcBMFS8mNa5HJUm4y/cU3UqLdVSVnpAWYqjduFg1vt+8Q+G/Fjd5Q0G+TJKRoSDXL7USJgkqJc24ccyeuoUrpNmK1DTGaMl8/JJhQ9RvETk5Vs5sKxJNNJcvltxB1fTlBKqN2dNRCCQpXEupYqJEfhtO7H0Nj8qsvRFRmlQ0CgSqRoXIRyAmIHtPdbgdVr2TF0KgF5Q81BRsSs1SMGj+HJyQlZv3AQ9fTi2n4gbxOEyH96kVDyrCa1OQaQ/2G7a7zCeHlM1JUlEA6bU2cN6UXZAZC5jgXsMPDfyY1nU2XlW0esmwVralVHFnK2pJIbQ9s1cVmUgakftyRe1skkP8A0SGboHh43cDfHoKJCX57qDcpxaL2kCpGuqsqiLUiKkcMlmapgRptIJJO63l3BivHExSHo/KnEOfLazL97B0cURuI1atl1fZBIfw4gXlOcA8T0piQeCd9wrqhZ8g4PZIcNqDLVuX52UUIhLMWdCShYp01Spp9KC0km42Lm3AiAbj+y5ebGhY+q4Fg4mo1WiqciHzdKPseoC1uQNVw1SVFIASv/TlzdAHjGU/6ZWFnFFol45ZcQzVZvFGQaSvDqqiJ83OJCduNJ5bUzlDmhJQQrztbKyZJA6TZTsmFjlulrltEBHlIRLnwmvtOxh7qe2o63k6XZCtFUHHLNabE3UbwKj1+9f6ZJAJ2KuCJIiEPElbiet/x4lHCVzdmdlt7BoZj/mBw3FkZDj9D8MCNPZqcf/jH6lxm8kVRcHi9olHqDhEhPExwHiDDVwzNLD8SmlRCQJiO3nwsH97HJJYUEfPjxCvNElkS3YeCO3DVNI8PkP7mFz4imbBJO3/HjoRwtpY64fbgNGJERwppY60rSx1Z/ixW6rASelhQULujCybfDhMcBkSMFMSZ4TJC3Etb/lwmSWKJq1RehjoUsPFEgwmQYkvJvpW4WT5vRjq3/HjwpbsVmpp0nh4mOGqKWHiYW4DJTEk6RHbh4j/dw1Rw8TxSaIFLD/cw6EbsIpjh0I+HFStWBHbw3M0mzQbqLJsB11RHm1SuER+ASL4cD+sZEH1YGg8WFNFi5QVtHcQmekJfKP3sXSoJuFpFN1JKej62/INoluUV5REcDmYpeVauVK4lX7QXTViqS6PSJiZKjaRjzX7fjx+dLO03LB0tOmI/tJdpqSLaK6qwHFd1nH0s/FcY9kXHrjq3eKwVfAXLt/a82BfnKDSMlBi2YCmmkoqQWjtECtUs+YsFfLyOeGvLyr9biXDp5calto/ZJfL0+7iMzciGcjSEu/JgkSwPhFAh57wEb/uq40VBVhS1zdLhsH0fKJKqsc2mIuYlzkS89cRHFvmiiYsldISLkLyYOBRzFdRFVVmOsluSU5SH4MZlyKqSXF23hWNy953EJfZDdtuLw7saXjXT8u5eAKil3MmOM3xaw7T1xGHoTG0PzphknScc2SUuSDd4urDv0egh9G0bsdekkQ5ubw4iVKnbeiRGIJso0XMbhVWEbVBxjwB2o2p0IzXMnGMJp01bztxRqSuqqiP6W38OPNILLdzIEctSCTlukkYpppqqoFf0kRAWJj0pRytprc1vs4URidJ6i5QISRM+UcXdcNsYSIf6Khxhp3SQqusIZpEpC2j2Yph4RwqsyRVLVJsJLDfYRdOLZJRAOhHgwEVPvYg3DVZuVi+0sVN1mdjOWpWgIBoFNbjAbAC3Cahbdx4Ut3WWY5JhxQkCrxVMfKGLB9/UppCJB2q9L0nFlp/87JXbZ5RxYVCRQR24iY8VkEeG5hA9pFiTRUYimWvamXmxXVFmGqoEktVHWLfjoiPwbcOFvQiJCYAO4undjpRuF3JdgWQqCaigZdA249oaSZF4+bD4UgHrtw0QUbvkOIYqi7bkRjcmVw7cTEjLWp+ygxG0znBT+ZgyTB4q5ZzrrVkVCSub2mW+/dzW4KdFg9kIZP1s2TTS2GzIS3EHNuxYjFsqwUM0VUx0jIB5S+TCVJRLpWlo02TElvqqXTd04dXO9lcqcSdERIYjJU0NvGgaKJaSJPU0W4qD6bOrpw6dtm79MVYqK0NAdVVS4t44TTZ3p6irhIbDtIS6fNgV51dpSKoaOcUnQZoO5C8tV3tJIT83j9nCm2WusvNUNPRjIvo4eJfa6uYoGsx8kR1C/se74cdNh/J6eTAXyFzgWroX0JPPBXkmphpLFaOvt37bR6rsGpP0GBc44uvNofstSVJU7l6huDVyYz2En6R/Jcfj+XCg8vJhs6UWAy0gLl2kXLfhy2I/Slv5sKSHTJGKfo+b+jk+3fKXaZd0qmJW3AW23FX7UqUw2paafyzPQJVdqSCOqFo96NuDLlTRDBzFLT8wx1FldrbXHkDxYpHaHjlawoCo0UtPUVQFBmRJat2ke4sAWu4MefG8cB2kOBF8pJn3c50soeVMpKSOXkGckkZabhANIS29IkH3cSjF+YoqMyMhEwMBLrHFBUrmKp6nqfc1vPR7VRWxugog1VECBIBHd5rCLBYi3lMMIcZWJcoTD52FzdfS+roJeIRPnLH7uoauyca2Nm1Dqc0k3p2uBzfu6cPT+vDHo+NfmS60l14buvnd/wBWUxc9pssemP78cMfR+ro6fiUOxYORTKS3cOkWlqDylhA2DQ3ZSAtk+I6tnMPhxdW0a6HLZQ/T6VSBaRN16LjutHdfZ733sVZP0ekFfT6RDb6Mflbyr8XV3EHEtQ3VR9zkTYx9n9vx+ldy8mVmobNZhK3yi5q1e1/RUmoQWp0kZdkBE0SVuC0zuSEudL2S/Di3N0uIbpuGrgSTVG8LsJvGSLgSYuQEkFeksNYBNzHJrQa53JsrOGLxNy/d3DjAOudYp/aFdNlmiknyrkluDK267daWHDFUBTID2kHNhus20HCiq+4i3bcP41uaCaiqp3E4K63w4ocjldKBF2TqXTMSG8DuwhJR7GTZE0fCRJnuu6hPxYUUBXXTtWTFDq27r8fhBbcHNZigMcWymCJUejKPKcaqNtYXKIbCSWHYr7uE0XsJOl/BLlVAiA/qjlcRG/oECL8WIKr5ZxckizbkpdtVK7FOfNTXtNLd040dIxmt9LqtFvmRop2jZ50Wiq2BtYV2mqkN9nh5cECmaPl4lyLs3hCoBXCQgI4zzSOb1Q0e6FtLG5kI1LutEitJIPGkWD5HoUnmJSZLU3UbxR8CXFaahkLoQ8w/u7MFlaM3TGUkluT7tOPa7fCifHzDR2Kly43gZAQ+G3DSSJJFMlg9JEC3LbgN0qwqSNUdBKSqblvsFIR5y277vfxamtVs4WL9WT0ugjar3BKbdnhws4m8it+4WtvnZ5vTLUPdH4v6rBW/iK0XK4dSt70i8O79cf3KYl0fRIoD+RuIroKdQ3F7uGcNlzSrtI3r1ESdOiK4iU5REtoiOOkKnh5QEyj3qK3pt70kyu8XVitU3V9Lyso4bSYIoOEnKqWsoVyCm7l8pYytgCoaIgitvlv5RCMhRdg46noFomjFs0ELd/TiXXe66diJCJe3ikTGWkVIwq0lBRqBOgSK5McCmOqqKi3icbJxaaTpv3So2cxgNvLjXyfAhbiWrupING1VyfzNu6X/ALWqY6RURRFMj9BF5sD3MLLxnMKrTEKPDPDvNVPmFU8VaHqeHMW+3SG00u7VJLZ0cns4ssbVTNMhMHa67cubvyIh+Pmx0axcXXDhSpEtTZDykO4faHH4llblw5Q36mIS7QfZ+5UqJy2qqUTJbg+F8Ir7cRstTk3AqaMpGqp2fpOkvewcW0v6CHWScprpn1EI4VSqNgpc2lGYkifvJF7uOtW3y4VhVMqtscvu7S+cufVfktpsmNMRSQDTZcpmFo+HDgm6IlekGLxXUGzScIrU/FaTU0r1SSMiC/8ABimkqigW7m8OO72a9sX+kGsptpLl1ytDtofKmf5UsKQK7z2j4sMXCoDsHHnDo1eXlwjb/kw4EUsJ3uqNmmCMvFuo1xdpuEjH2cBKJzDlKQSXgngJKJByioF1p9Q4P9u7AFzZy/qdaqCkKejeKavR1bU+cVevHFPLXwr55o2a0RlllEv4+9/X612LyMcRN22set9SURc1D4h9/wDp9SV9L0KhQJ/aIkteWmPSY4rzqRc05LR8wSaSjdorfaqPMHKY+1i1LUK8oij2cqu5ck6MgVeJbSFA/L8uKzU6SK8eXpSt0XHeiRdOPztU2mu4NurbT4xIYkP3LvlHcqHiuhcKmKTZSElopmrxDdFyldaqAEGJBETL2sDHIWo1pmnVoR6813kOrpDce/S6MFxukHjx+37Nd2rzb261vaQr8bXezOWW4OULv6Ml0329ZYlEb7duGY/3cOkysxY4p02hPE/Nhe0MNEywpd/iwIQpkJAlMdW/5cJ3bceEvDuxDUp6Eps/x49b/lxzceOSVt68fYqUgBdEJ+PHJDjnVux7Vx5e0GuSAx68eEjIseJUMcjtLnxaqJLx4RJXdhYt3XhEhDx4+iKiRLm//HjOefVb1zE51UvTdL1I+j0TpeTlFUEFe6VVAVyAyHkOw0hxoRQgSEjI7bN9xYwqtnC8qZ5H1zVb+MkJ5KLNk1fpNQSBBud16WlpCB/alu3YwvHt5G0UIsCJSc7q2PBFtKvqSfKMRV+pXObMVXtHV1TatWyCsXGzgNWrFcwJJJIHHehbb4BLdi8diusq5rKkSm6vq2QldVVwP1tW62wECu38n2pcmAAxzKi4+oZKroym4gpqdemq9fkqYmqqZXX2ao2biLw82LBlpnaeT8SVN0lGwYtUlzVFsuqZFeqKQnuFcr9qQ4563xQLlc267KMpfJ6PxW+es0KRwWhGUVvm67H5iCZyKyqaZnaJGIGQj7OJBN1t3HjtWRzLkvXB2pwsF2GpIYcCrdj13+TFjUgVTsTTXhQx0LUMOg/vY7xdmkoi0CaaQD0YT0gw+Ib8J6WISUoimehhQUreXDm3yY/BHyY9JeEYJHQ9H/JhNQbRw8v/AMeEVAMseFRNR5FZjnVP/lw+JqHOWObAtwTNBkJpuJHhQd/PjohxzZdj6oLorAxz149pf4seEceU10P9zDgQt5schh0I4pIleIpuKqOtw23Wt1bfJhSwMDWuNb+uCyhRByqki4Xk0lREtpfVxwVnjUEHThEf0Sphhe1XTqSY7qOcoYMC/wB5MbQ/5ceIA8GPKDuxyN+GMkEv20Mflvgx1af/AC4/bTxAlYC/R/u48X93HJY9d/ixRlK/MXuUcIqWY6LdhMv7mJCKjmrkiwiWF8cH/fxNfN65bh3yftY+f9VU/oZlTjZUErQnpAEhLbafGEPNj6DIhuHGF6+a3ZxVMzE0kk/pM9Ah5dnGljHcYF2A+Ja3hYYOEqnJMooXxIsHhE1BINLiRtVLbvu9/EboBzuASFQ1Uh1C/F8RbsSlSKosoFw/bgv9XQu+1O0D8OIeiagCqGIrAdzprtVXuIgvtEtm3puH2rsYAROE1uJaoqLat/7aKiN0iKX1BkNpePlv2Y352QUkUMhYcAu1PWMnq+3xRfgtxhuHSRGqKm75K4I5kkKSRqiY7SvtvH+l2N3dlNLSyFgTsEb3smdw9f1pXm/p04fWT4Z8lJ7x8G+UjIid2JBEt2IlEt2JJueNU6KzQqWTLbjohuw1RMLcOhPAhIhdI7Sw4u/yYb3f5MeJXbipSXlj3YbkWOViuwnvxYIqKRcbhwhaGF1EjwiQmOLwXkzWDDcksPlB3YT0sWyUCFR6iWESE8PlBwmSV2LRJVEKjyHC2XKH8OVIsNo3yLQPf4dL97CxN8KZdpALqaI+U54Ev9QhjK8al/lnyhTWwj7p+SS+XNeGjI5hVJJbhTdTLgi5S/SliurRYal5Obm5ieqgJiJgfl27/dxZqkAEqmmGYrd4co4JIbbtmuqPw8uHUPRtSZiTiNK05GkvJKpGqkOxK2wxEiErh5DIfixzIC7q66EQFUsohYlEwavCJEwBW5UwKzxjbbzY5Fmdw6Rq8vKqQWD5eXmwUJLIDMVvIR8PLQgxCz11oMJB3IpIIEZW33Fd4B+bB7YdljJFtApxU9moxc1AdhLyTKUSFmz3fZJJFz+0Xy4JESdHShH6xin0ksfMWpkon1DdvHVC8flxrr+p3JfwpmUBXXAu05ubYOBDmXks8yy0XjCr6aqeLV5l2D9IXQ3lb3rUiv8AD9kRDgzf1OwwXkMyT9N2obpK4i6sDVIkDTgkh6l0XWhNtaYnv+OHAdWz7g4Y6XjxLVEP8NOPc+5gI5/Z0zeV6MTT1F0qvL1RUWrwBKpfU2YBzqql+HHdaF0ae3tul3RXG32yqK4mh7yzZ2z5PNT6cQ7atZJtD0TrhwENDSWrIvwvIde23er8oieEuzPk3MOM1Mu5LNJ2u+TkJkGreLcqiVoGkqVy9nVt5fNhxl/Tjx0+lq5r6VVqOrjeOGqsg7PVBCz9QHQP9A2YKmVzg1c5ctTO7ZVCX/uOvjJVwjWkT5LWMSp2soVtNnkFlbFgTaJgnLFOwgsbSLpIbTt22gflHCKPZ6y2SRFFqxeoCHL9cNXq/a3YJ5DuK7CJD/fDGc820k5ZYqzrb0dyHA5H063IjZzco29lJmX30MVP0wrCmH9a06hKG7P0lFK94kgKpXapbxSEdu3mtwcxHASmWrA8yMxHhAhxKQQSBqlbeCQpLlvLw78GW+map6tkhHmVb7hOsOCXdWYu1lHG8kqPAQusayatvvNcVHs7ZW6ss+m2D+eQbt1W6/DIKlYkZmqV437D+wEvb2+HF67Uk9DpTFNggsrIEcTIAYxukuaHeoby3cuGuWWdsChF5fU8VQw3HemUPjxFB0BhsEUklyAdhly27g9zCHj0jqHHBaJNeHZNMCitlpGetaPlo1nxSBHKTCRKOUNIVTvX3iPs7fcxU2uVkloiF6BKW7BQvV+MsXyGq86MjxhIrKCtV00nDhXWSFgNxqqqkX+E/tcdDmQ5uL/gXrwS8y7X/wCescxpMDp5G1zLUYGZnqFRsTlLDs00zdM+JW69Utg+7iyM6aBkNjVmkgP7ILcR45kSXTk5WZ+0uz/8/HQZkTJcuTlT/wCcdNf38WkJO7iU5Q5VRc6IFYnEWZWiIAf3xwIco4u3NCLsC7+FpC63/qCuNAVFmkswtOUyKqF0Vp2/ZL2/ewL6JrxtM5mLOYTJN5Huo9JWSapuZQGyRXhoK/ovAqOHlMRBSEMUC4M3RJW7N5Wv6XjxqeBrMWwpXglH+rgVA70i5iPqwo14OpoV962Rcim+YA64nvR707iNK4LTDYI/Hy2c8pVFR1VUcSpFS2VEUq1VHqqYRt97SxBxqsrAxbyHYZXRScfIJWroFWhEJbRG4RMdhbem3CzMGI95ExNEzIeL0sg6fbNQIiBhKgIiNx/xxXHzRlsqM3X8gJtcpa2JMEumnHpb/wDRY33TeZ9fUNAs6cp+g6aYx7ITFAV6mSVt1VdU91viw4W7QWbhf3GdBofyk0kWNbTX6laFKfN9RqWPCyjzX/N/QrMMsaxVcNItwk6SGBdEaR8euVhbdmwhLEllDlbmRTVfTU9VGXtSxEedKyCQO5CJXQSI7OS4xsuxq/8APlnfppq/8HiSZjsL1hcJe/y4jJ7NLNSo2KkbMyWWSrdUTA01XTjkL2SxY1xFTNFJRK2vmojL+IiXWWDdnKQ6T5M6odKiJc6B6CG4S6OnF4iaZSqOGdrTCj54ziX6TqnXorqpOElUlSFUSICvIe6t34pjN1WzOLTSZtsqxj9dVcS0nSoapWie67yiPu4fR9VZri3JtDSuW6SN1xigydW+fqxjKt8SdJwSTVpksqKukW1WVeXmBCRl1YsE8wM3CNjlDYkA82BOVb5rtVhAqty5QLeW5g65A5y5sNX2atbCsoDXNTKbTu2lvIz/ANbhe4xIh1fX+CKlqmlqiyWlZmUdP0JtiKbgrrVLrh8uKfNZFVU1UFFgHHXjuJAdg4llM56wG7VzsytS6O7b3b/9LhutnNU6Vuv2h6AQv5NKOSL8WGrTlSPN9HH8FUTAHyqtuOz7XircnIxo3cgpke8sUuoso6zpl8zeTcISDM771eYBwTJDO2eas1HJ9pmlyEBv020GkqRYF9TdpOqn/EMHGeseSIGYkJU8kr/4BBhvQvVj5f8AtCPsNCq/wcC/iadpviRSqgJlw6El2F2q3AECARJJLeO3lIFd99+NRULQjODF8zSWVUfU61SjVxJuIt9Wwb1UCt6guvt+HGJGc/N11mBDwtP18xnJPiiVQbO0vV4EYjdbqgIkHL0ng4sp6r8t2NUyWaM6VIuKlf8A1Z7DoPFHiqvMaVp3CQBtHVtvLZvxG/2/F5rKlq7q+W10paVqZZLa3AgESBq3C0ejuhx0iIW4h6Heoy9C07KoSryTTdxbRcXbsTFVe9Id5CfVicFLH6ctQwt7I+yP1LiVd8McL2iXQpAfRhQmCJ8wXYUbpHiQFILcScdgvNNTVfcU8Cpdxtw1+j7lLFuTQ3YcClj3XnQVvm9o1Txi1htuDHQsjHoxbuFT8GESZgJbA58UFUkavGjgq3pWb8eP+/icUjbuQNuG7iN0uXFeapZSix82Pc+HSiWORSx414SSY4UD+9hYULsJkkYFighVoku8fhBj8x+jigmkSLs0mSV2OdDDi3/Jj8xWppDQx0KWFcKiWPLy8ilh0mljlPDgf7mBSVgJRMcOExw1E8LCrighV4knyY4dJkA4ixXwpr24qIVOS+dilKxzl0pKy6fGuiXAhJbcKXhFIcI1lDNqoj0abeLEgL9cCPT5rEt34R+LFoeJelFT8hht5N27EKo6W+kA3NPq6TbasRBzkW75BHH5npap03Bdlt2rvDtMMY95J5e/leQKqptiQUVXJIhIbdyQin/4WI6Zp85SASacSP1pq/fbuQdW7/z8TcQ60Ix85QEv406L2juL8V2Ig2cu/TYEh6U/TfHN0CRXHluIdXk8o4JZPoqjclHUgXKbshWaaZnpKhqiZzKCaqSjU9B4nfaRB1j5OUsbEi6tp54zZzCUlc1kBAklNIi3+azkxmzPamfU1YlJ6Ii3mB1x8BK3bvwl72Lv2eYGv/RSTqVp6tU4tHjO4QUYJO0iMQ33CfL041d+p6K7ULdxdKP5974/eSCjdfpXypmxkjO9nIl04UBjUzQVEh2iQ3D+HEeMQ+nmRPPQAqPWveqqW90JcukPlxB1Dmf2kkoZxSUvCUrIN3R7JJo10nApBu6OS7b8+EqYzLNd+2pqoGDuLjnCBa+htuMR5fEY4yDtqNhvMpCEvCUvwT+kuDsouDqTh9KvpYRZQQk5SboGTpPqQIxttHx8xfDi207JpMIxkBPiXbkIIILEG5Q7eX2sQjeLn4NEqkQjvTExswqApLroEp3VvdKgO20S9rDxCOdsVhNrKRrkgO4myqBNtU+W7eRbsCVQtG1kcv3/AB/sTmIulLmRCZujcIiau0sRc06BJYUXKPdnyKYi2dUsRXFivcydmVnDLcpeyXKWH86q2Vjty2msHKJFzYy40hsu6xVb4kIaUkRAIitrDp+LCLhUOdLENHunLUu9RuHEym+ZkImZ2l4cEG0TRKtipzdyRbksquKQbbxxKCzRIdyIkPm3YTRSZ3CsZikN1o3Fz4SRnUdcm64EgpcYiJJFu97FZYGexF6U/SDQTs0dPyjyYU9I3YboOgVKzaV/hw/BEPSOzbgJzpHHUok0o2UdKsGi19N/SBFUDSXaJPCaL2H1JK2lYQ+bEdE5G0JTcM2eUzmTmZR5yaZuE495S5yoWF1FpbPnLE+oX5B9HoH0YkoanaNnU1lqxzmkKL9DcrWyIzIMUl/Ee8t5Y11gvDjAdTjpL6Szt4t8/dMtqrp0z6YKJkZRnmPUFSp6CpKpylJqxGht5hIy3ezi3NagbeihIpnDsJQ3jNJJVUmzUiJO0enS3EWIF8jRDmkZeP8Az4R7tvq6DMZCoEnLxe4xEjIbtoW7sWVWg8kTJRZt2tkGerzizqhmgHyq4trrV5zfzDGIy5RXhuAUdGLUpFJU6r4yCraHGOWzSqunXD0fr/DUM/XVG7wqlZ93A1cdlzIv0s0Uks1K6XUSMDH+0t0ld71pYNUvRdLRAoPqVz/qCrO9+zaTOqh7JEBEHu4t9AU4/qycG15cTUdcNa4h9nBuPEocNj1WkGKXlbfOQ9cqS0oN0v2WqMpeDWqGnAqVy8BdJ4g9kG5s/rF/UJpCZjbdu8ZBt6x0Tllki0azQS9STbSXjHCiR+hkq1JMkB3Xbrt91w9A8uLpNuZaCiTTn0o11HK92qKZaaokXhHClLz8U3pc3fpP6k1vtWU2npeH2sZmt4uqq2rbfeEflalU3T5VMQM8xcqpma2XVGrVXGU3lgydlJyJflVbjeTZALt6pkXLt6cVWuMlKhoFom4VmWEooIkblBrdeh8XNgu5IZq0SvU1YxlRpoxMzHaLz0LOVPt2BJCQ2+YLt4+ZLFZzMzggZmfcK02GpeAgLsh+a3Gg4kZpGLQNeLY5z0dI6Yj4VdbK2tKt6oMoN7iLmSCdaNEKKihY3KqLMUkhEekhG0vhK7FTqSUOSpVCNbI2qmGkuPTb5cVZFI2zdQGaOneqapCRbRuK4rccLvzQtJVyXh245S1bmmXZtd6S1VHSiBIM1jIsImci2E3GivBx7wwdEXMkCpjaXwiQ3ebGiKdeRtOR6IRqKZRukCSQieywuSzAZqKmWNTVS4Yv7jRVjxI7t13e24/KEqKYoOXHK+qnSRx6u6Eel1B+oLzbsfoPhviiiouHa61VI9o43jGO6X/v0/wWJ4r4Wqblc6Gupi0tlqH2S/PR/FbBikAc0CAh6BFM2ZqD1DaV2BKJflVUAA24v2WJuzoN/BruxUWboWDb7OKKSNihEOPzZg44VbVE+UiIpS73T6elaKzsDSSYEYiKj3QgXdK8p82EkBsftHYqqJqNVdwiP2geEvhw7dBtvwiI6qg9NmGDR9ArQCmU+rxtQOXIERCquZCJdO/Dm8wt9jFiqumEWTOHnmgWoPmwgv5VRERuxAjad19t11uJZ2DjQ4DtQtEYOekE+hqfeT5OEUFrFEkDXAf1tv4ub4cJMGQIrD6da7ykOHtJ0pV8rUCDqmyUTNIhDiEw5fe5BxdKypBtS75msqCXHPRuJoB3JJGPOXs4fVvDtdSWtu6OxFtzbqwl+/o9/oQLV9pHbgVvbKRD7O0u70/1QkrOiVnjfjIAxNZLvVUC57fLgeETlvd+UNNYNwlbjQVLt2Lp/pPmy27aKw/o/wB7FezXyonm3pTnIlInKVlqpIjv9rC223QczCkdTka1kHch1QlQUcjmBlyNQxrBNWWZFcqKA7lQ6rvH/vYrQpAxpaGqeJkl2r1rpMCVbEaSqBjziXxfPhpSeZ9QZby5RrhG1FwdppEOy+3FyrlrNycoijT9OCaMkIKvFbrUhDdvu6+YrMbK322urHRpKRsiLlil9bVsW8SdrnBFvvEvSGbEbHQIvF3PEyyt4aFtvXzlZ022l72BVMTb+bXOTkXhLqHuu8A+XBTzAgaMYZfugmWxjINzSCOVSt3HymBeWy7ANcLrppF+Q7R6cdE4xut+qGqe2Xfs8sR0974pF+1IeA7bYQzrlaNWYRav+I/sVroWsvo1OKA4MuCcDauIjuHzCOPDMyLiXkPUwa4yCprpDbvG7xYq8EbAVx9aGSiZ/al+LFhqKTYxFTIyMCqjYYpW28t9mObP07eeUR1EPydK3umUkTsv8+avoByMFNhaFtqepu0vZ/dxcBpxhVDgqyQcs3jh2req5TbjfeX3MDZqvS2Ybb1Y8JJKU9A7ekiLy4g5JeSpNy6piLrCVY6w/WhaONJXbykB9Hw403CHHFRw8RMNNiJbtQyj4f2LF8U8F0PEPaERCXslES8SM7yDWiU1HLpb7JBVxuHwB4sUJSZmPUiNQwTwiuO+0dwjidpPKsKwhW8kGeNazCI2CvHu10iH+SV23W4RGEeU5UikUhGiLNXVECICtsL+luIeULidziarbqakhIhGO2OlKOEbDR8PMOU1MMZFKJIrZV1GrWkWoogqCcgiAa49JH7OIKUzOYoTBQVQMFmMlrk3b6B6uvy9O3EjQRHTD9SUaxqVppAB6ZW3YsEi/wAuY+rWVTyLVsk/9Cw2OHOzRHqLGboW2KsWxIoo144PlEZd1UeZlqyjnzUYSRBMfQdj9o+SITSMefEkNUOT/jjBm5IeokgxxWb1tKVjMv2LhNy3WfK6SiZ3CQXdOIy27H7M4R8nFks1CJNiREWqRF+HQvzTxLxzd6ysJuQiIy0x/FdOlUVyFZJtoEd+qI8vu4R3/wCLCmkOOtLHTGBGnHKFc+dInSkSQx+2ht2cmHBDjnSxbJVQNRs1GhMw76KV/wALbmA+X+hYC8xRoQktF0fNyRC3ekAA5S2lYf8AOwebf73p9OK9WtCQ1bRnASoEBh9g5S5kj/dxgONODqXiYG6mMnm4x7pD07f4rd8FcYP8NulTEUWXN0dwl0egh/cqvQ+Ur+i6wcTDOYEmJ3twQId6qRh1ee/BURK/fiEpmLcwkExiX8kq+WaJAkbkucsS/oP0XfkHGhslppbTRixTNxEtUffj0pLe7zU3mrz6lzMIdMtshFSSZ4WEjwxRVAB2XYcCqB4PIUM24nQuN2OiO/eGGpf3cc3H48VZauz4J5etjoV1sNRV8+FBVMMey1MX0trn1Y6uAuvDfV8WPbOfEctSzE6/sePHubDey3y48PV327EYqQupQhwmV44U1T68e2f48eEV9km5EduEbztwsphFTFoihSJN3ySz9uswbmIrOEjSAi5LzG0MYBphdH6PxrORBoqUezu0117i7q28CFVLuh6rsb8JXh1BW/Vb8YCp2el2rFq9YyLhBaPi0gDSFdQkjIunScjpCW7mxyXyptCfV/lLrPkvIo1HyVNOhgimmsu6eJjxQ2sybMmrkLx3Wj3oge0vbw5kKSpxxMQ8OwZ8c4dP2gbmBoAAEYj0KluHdfds2nvwo1nDqNNT13c5ZqqyBgSojaSoJCO41bm6pWF+i38nlxOUvT7F/X1Lu0GA8Q3nmVqjtLSIQAh5bxvP2brN1uOSW9n3Yy37S6jVv+5nHPZWvkVdIiAA2htw+RcYjRG0sOB5cfrUmhX5VbfPcpRNxhYV8RqJXFuw4H+5igmhRw1KfC4AiwsKuGPRjoVTHFRNK8X1JXeHH7hkmrhYf7uBiFGNFNLWbsKEG3CIkGOtUOnEIq6S6sDHJBj3Py4TJVHb58eFVkSTUHw4RITtw6Er+Tdj2wuvF46FQWtMbDxzfbh9pAV3Vh9G0q8lCHSC1PxEGPE+01qJRGmddKIqD1f8eFBwQE8rWZCJ8SuRdXLixROXcCxET4PVU8Su7C929MBtTJqzVJ7kIR24lmMNJPU9ZBmRJ+LlwXFKVgXCgmcagRBykQ8uJRNg2STsBHb5cLnL33RTFizR3Esd5hRzxh2hMmTeokkJv5Dm/kBwXJZIwkH2wv4wrze1gZ52tUT7ZmW7ZrIya6jWO4pdoStzVDVJcEtIbdhHYrf7IY1UpTzA1CWXbJ3Hu3DhUxc41hPlzCKZO2+VMLQkgWoVxY5H+7g5KUrCK7CYIF7mI95l5TyqJaDAUy6bcOhvjfMKUFZneUkIRLdhTmw+qSl5KnCT1wJXV8I4iURcqlYkiRF4RHDVp0XQkJJUQk0USFdKDhEv7mOiI9wKgQl5sJni1fFzd/kxxj8u/wAuPXbceVc1zf8A48ev/wAeOSLCiI3qCAcx7ceivTTeYnoql4V5Uk85FtHx6Wqqp+EfGR8oYwPOT0rVtXSFVcSMepISSr80kA+wBVUi33+7gpdo7MtzWU59EqceEMDCLmkqokdwvHtu8i8o3Wh57ywH1o2VScCwZySGmkFiouR1Uj6rbgITDm828cc34iuQVTuQ3tFdJ4dthU7GY7uJQNVIBJQrp+8eOpATa8xKlt81tthjiHypQtpFTQPQUN7YQ7v1Q7+nFknEKheR60akEe8cOEjSt70VS2fewtRdIStLwow8siRPD709IhK0DHZb5uXGclFghWgy5OyTGPeInmBKQk2sSCjtm34AvsgV0rr+f2sbG7JeYzZWFUylklkknEYq4dRdx/bpKkSqqXtAZXewZ4yDWFJI1KzTBm80HzI+Kb6g70nYWkHx+H2N+JCkayfy6bOsItslH1BDySSToUrbklUre/H3B+C/FtNWdScGpH5SoqaYapomCX02TPoIMPESxRcrcw2GZdFsaqZ6STgw4eRbCe9s7DnH3uYPIeLkLjxY6KEagcxrmWFkVOeW5uUomXgw4TVxFpq34dJlbzYGJhWi+pC7/Jj8wkircWHSdmBiGCvEppMUr8e0MPBHCgpYirVGkktjkmplzhiWs/xY50sfJmvkFCkzPCJNcWLhb8JqMsezV6CrKjUywiTcxxYlm+GqjXF4uqMVCkkeGMFNwlOt5D1pJIIKHLKurbrisC34OXD6qpEKahVpIgEnH2TVMupU+S7GP+01mC8oijRp6LkhGeqXV4hS/vUmm68/f5fjxk+KXxqhGkHduTyyUxSJxZpqytYpKcljZM15MTdOLFCS0gG9Uv8Ae97DGi87pWg6sUqrWFn9TcNR0EgvK+2wbju6xHdilvlwa7NbaAbrcVuQHiiIyPafIOFVJbWGuVairrnXRjJaUoWl57Ot0jX9cvFSa/asGPFGQiHju9z5cfQNj2W8r5eBYuX6E4om6ZpKqoFUL8ktw3GNuvy4xt2aybR2SMW8dLCl3rgbusrFSsxohj2tp9lA+lAqTjxZRSCTYXajxUTcmCW4hS5wS5R1SLcVwiJ4yV2rKdl0geJfGaZ90RyBWf8AtS0hD0Rm0VH042eIRrJm0MR11V99hFq3Kql4iHF4/qfEtGpVZmDELuUhkHZN3CSW0dUPFgO5z5ivM2a/eVq/biyFwkkkkmgRFaACI9Xxe9ioRFTSuXNYxOaFMmSbiN/jgoHbxLfrH73yeHAbJZok0K0LlGfUxE9y+nNTNVm8sSxbk3AgQlgE9pQjto8Ly/jjj/3H/nY0NTc9CZpUTH1TBOEHKL9AHSRJ/rfBjN/aMnoF5UFO02ymGy8pFKquH7RMrlWoKgNmr4CLdt58djsl3buVohzDpXJKm3u0tylykgnTKpt4+Q1dpetHf3sFzsxZXz2ZObMbX5EadN0aqaqRX2ivIbhG3x2hz+15bMDOgaNnswaiRoyl2xE6k36qqq/Qzb3d64L7oecsfSmgaFhMt6Tj6MppsCbFilb5lT5jMvORXlhVVuacgU1lDUp/nG/HiDH7j9t/yYCVS5ALfTjM2adJPntaV7FTrhyCc6yZPmGkqQ64N7QELeQ7TJW8S8YYvFfZ7tG7xWlcuNGXmUleFcP/ALRmxP8ALu/6wqPgEtpc5Yx1nZVWTz+tlvzlVahOVA3SFJ6S7dV4SB7u67oSBL+SG23EnG8qL5DtRNLIyJsUL+1gq/o/Mgqey5BeMeJMNV0nEDcZmq4V2L2DfbYkJW+fFsyuzQbNaNa/SDKmXj6yjYY2DWZSStBVwAlpLqpe0dxnbdgYrOKVnK6lHmXwF6nas27UVUGB7TuVI9hkJ9XVi8KQkU0a8DItowlgSAbiFLku5SEyLdjn15faABpYrfWqh6x2pEvSmZGeLLTBaramG/aOlKOlT6vZ8uPKZjZtAimAZl1iqmYXmuKq6pJH75DtxXZCERkVlD9TxChAruXtGzku5vY3YZpwLcblhp6GV4e8rUFW46XmPb5sLhFqO1MCYDuqW9OZOb6RKA5zQroEw5VOW/d/L248jmNmpcPEZo1f4VU1HFw/7fZiHRjoVdRNJ4zYsytMj71CzuiEbh7rpuHE0McDdw8RYI3CleW5+1vLaJWbEvmxfFvbFVZHMkVK3r8x/wDehViNiB3iU8qI/wC15vNiuRKb+n6za1l66CVUa90kymVQeIbwtMiFUi3eazEysg5i7g0VWyxjYCaEi3svAiv3W+UvgxOMUqha8Ksks8+uiDhIhelYuHLfsLfj71g2Q0L3VWjLUKrNH5rglmtGxCzmnUIdVcmsi+Tg0EtAOvakhafskHTjT0LUdASzZZ4MlkovFpFak+Vjvrll28iQtHdZdtv8GAOMpPajcFXNQCQCd6f1gtI7eYrFf6dWPN56VSnk0VTLiDNvemvqiqVxW9avUQ4oqiCojAY/n9y95vmUpKapnN+s0s0BoYThkqZZKuBi13zcuH4fmFJfaR22DaFu8berBuy/zWia3cSAJQNB6cUf8UjRNV4Pm0lWyRnZt8N2/wBnGX1GBrvFOKWj7TC5ISQL7Ld1avjEvgx+taCiJkHT6RiKfXWSE0hW0DIkgARVvuu391dt82PPN0pjrGPhVXUe6S1e8jHLCIdSWUdfR5LRjg1XTKWV0mrVVUhVVQuMb2/Ndby7SE7duKyPaOfxDuYiH5wD6QZRbtVnIRbN56uJ6kkRCkRGIidx7dpdWM+NaNpGJZj6GNNRLx2qViRChaRBymd1peIcSqFBhJQY1CgtDJMXD1Vq1ttvKweezQ5bB9jA+I05e8rfNRtbiT/IzNeRpyelGOYFTuacUcPAdMBFmqrHWGZEqWlql3pn1EXmE8E+c7SEPEqTEUrVCEqLqOVKOmGzUEhbO+gDE1ebm3WlbgUuAZoMU3PH8TxYKntHSVQ0rrwuBLwbrcQ8wrJPBTRbm8EUlbNsol7+22/7vnxc621Vu5pCvdRFrmVeKppCOqFWqVa4m3ko9ZKtVXMhOkuekqNpiIldb7uIVRqCAk8jvTFCmdiXdPwFX3h0sEONizdQMlNyUxJoCySBJJAXF2qZkIgN20PHinykpNrko5QfviWSvtTSAxu6gHm6/wAODm8Tc99ScEQ2ioTVkV7Qeek1xArg05Rfb5vsscEwdoLKIpHcifSUi6E/b+ysxMKE8SdEfrJVVNXp4XVuA/8AOjuK7DxxCAk+FguzQXsb3JfUBH9Pbb9r48W5pAaiIiaqosHhioiuBCndbaLhcjL3cSj6i3JRJI/kdNhM+6JRrs+I19+HX0fYKLOFmsQNochEklu3WgFu7mESIPYxJQpQ7gXRv3n1FK90gpYhbYAkRFZbzYrKpINQK3IHmQ7a5VAvUgySNWPCkEldVBVs1SbXGHn18SlTVHUMymxiqhqeTlUY0z4fiXAloGVt/V5RxchJFVEWxSsexTuO9su/QSIT9xLl3Dim1I6ctXiaKU8qRAqA3C91RE+bwjgoap+oIc1BlTMU/q1vLKuWNhlNRabqnpdQggWQajZukSRBpDaQkavgtxeo10D9qLwGbxsNxhpuxAVfkIsBunKmrBjlZTAtZtBJNvCMkkkhZhfZoDZvO7BMy3fyspRLN5MuRXdGqrcWkCWzVIbbQ9nG/wCDeJLpdK/qlTHKEVzfiSyUNBS9Zb3EStCZ24WBfDPCieOok0sKLsFLIlcPPhYeXEamrbsDlxINVbsAuNQTBpyadIpauOiah5sdI8w4kBC4cBkUEYKhySw1cNTMcSyg4aqDiQkvEKrrhIwLCIiY82JZdqZEWGpNbcGCSBIVyPLhEh3YWITEccYjBTX5pXY60LevHN9pYU1f8eKor6JLkkjtw3Lmw9w2UxVFWySJbcciraWOj5cNVNuJZajmp8K+FOP/AMeIsSuwmX93H3qwmvdZIFMcf/jx7j/8eIkSx1f/AI8V9TBeGpUxx4Y8L/x4h7/8eOdXHzqil1pZRcWEV5B7WK24SNuRHZiUF0ZEV+2wrMQlVquxRbrM0SXIyFK0dvN1Y/HVG0eJ5a/TxaEzhR9TsFkdZRyRqqq3FbduIi/FiTZur0U9Xm8OGbWG4ZuRvHPeW3Fby4buWD+4eDfo3dOpdhicaki6SVcYCojPOOSmKKIhu1mRcSgXN0lcPw4omQWbUbRqi1OVAaoxzxUTSc27UD6rvKW3BlpqD9NVzr6lpI+GWGn5BdvqJXCTgku6EfhLA17IlA0fmlmM6y7qoI8U5VqaqBLgZFeluLSsISu9/GwtlO0/aHKap1D7Kyl1c6vVi43uij4wloZ4q4kkpJsbNuOkKwriQl1Fb48d0wk2rpd9Lt09BCKsZxlojcq9XLT1fdEiK3FGzX7J1QZFehRxTcwhJN5I9BuLkgTtt3XCN34cUSAzWzYy5dMGz+BYSTeIV1RQT7sr9IhAis9ounGYPhzCJY0Lsi5Zafz0+8iW7lJqRCtX147ZSzb6Pg3FNuyQ4M2g8o7RHb5fDik0+541BSNkfQKrxgRoL3biK3kL3sB0e1YwkZXXlqWdtFt2qQqiQ2+bFpy2r6naleydWqzTJD0vVQSBpq96Ij1EPN1YS/4br7dSkNQ3H4/lfwTGjrqUtLRK21TEMUmF4MxJRVUUhTK60iLlxGso5KLcIRc6HFovSAkHanPqj+iIvu4dI1REVLVScQg+bELBI1RHV3KmW263y4kJz0RjmPcsnj5BLVG0iJURJI+kh82KgxdposO4bk3admMVMIE3NMfyNhS8ttuOHCbcB/KSQ/DiMpaZCWihBy5Q4luRoKiJcxCXMPtc2Hq16SheHCZ1omXSAl9ylHvEEtQTSSTGw7/ssMXy7w1BWIC0T6sPHSpmOxEi8W7EjDtwfxXBu+YME5mUEzXh0KKjXRpKDpbi8OJJ88eJCVqOp5Rw0RjiYS4h9qmA33Yk7LyIixU6QYHJScJRaco84jhl2yu/Zy4i52io/MqJUjaiWVbcEvcgomQ7va8fs4twgB7McsWtqnSIj5cWM1hUxZrGkhQb4i6MS2oIUfkCElmD9GSWIk3Gw3aG7SDlPBTzx7ErOMjkawy6RSFg3SSSVjlbtcTAtyt3Vd14O2VdA6Bp1Ou0ElnFhCnylbcX9Piw77RNQJP6RWoaEeEkTgR4pZLmEPDh7b+KrnX3BtpotO38VkLlSUzWlgdqAeVhwTul2jSm3LYmjUuGMUSHuzHaV4+K7GlsrKPdw7BSUWuFZ6l3Q+EMZryRy6SoyRe+gAFX1lIi8XLluSEREA+MTL3sbOYyqrpsOkCYiW7GU4rNgbi4y05IU1dqX+ptgQxTOoImNfQ60a+JTdyEmNxCWAy7SkfQ+Z0WxkbRkniQiKnoERuM7RuwScwpz1ZTzhZBykSzvukrSuu8WKjklAo1XXbKSm0UHKKKtyqDsbtUzHZtPw82KOHLV5yq26aO4lFqp830blSX5JUKvo2Uja3dtqkRZ+t2CSUeqsihZckkO23y24bsGqQegly+bGsc0cl4HMWeSkzfqMHqQJIEoknfcFxcw+LA4zD7NzylKec1BCVB6wRYJaq6C6WmVnlLG4vfCVyN95+mGTY/ZQFu4joyabaMokSByz0x9Nh3YRFUFV0zXAiRuC8R5scvCsIgHcR4Sbt9ENEN1mMMAiOpanNhqFRsokDCvOG2qCDFVK4S5rFR3YZ5z000qWhHSpd25a2Omq48wq9P7uOVLxqxIC5Umbi0vIRDiyHoz66MQrubtRBdcR6i6R+8WHGDp0r7FQ3yolxrNGPsq7djipJSoYKagqnd8RKwqrdXU5bklUit93aWLI3pqVnqgdsGIhckqZFd0gJc2K7REwrStQeh9HN7vS70m6toj3oD+7g/U3AxsJVi1TrSidzgDDhi223W9Xixl+qjcL4TuAxbcj8nvLMVLp2onC3S2odL5RyJJ91KNSHxW4i1sq6jbrEI+hA7ObmHB7k4qBUX9ZILiNw2FbyniqShoM0VDSW5PEXNg+4W4bfKX1oejvNS7t+yh7Ay8e6jXuXUo5S49BU+G38xeH72KxTjKHCqkGk2sSTJZTSUEyt39F2I2pKQFSWeTgOVSTYKpOhK7dq3XfKOJav4t2xlz9Lm366PEoEI2iphXTMtMHnN6hLcnWUAY9Alv+0tDRSraEbJsodgCDS6wfL5vNgb5mQ7uYqNOXQkFLW6QpD6BHw4pVJ5uP6ZRTipkFX0eG4C/SpeXfz4IKdfwj1qWtEyySZ77iQSMbOXpULD2rqTqmMiURSJujetj+biK5pplBpgL9GPEHJjbcoRYkkxdxMe7TcSKq6ChXAiVpW/LhijL05eoshIGmBlbaTVUfw+bDzWYum2o1cKuW61+4R2D8VuFAsQ3x+cKtcLAy1rPWbrJpUUusAU42bENiQLoq2rr39RJcvvYu0WzWYMWrNVyquSKQCaqpbi8eLJVFGw84z4lVFcVm+4VR2mOKzGsJ30t1vWTwPSSt+kJBuAOjcGP01/+P1eOL1QBU5EWntB6IiP8/jXNfK2XWqGnbFwREZafTIi738EBc1qlczlZLRyC1zGJ7pK3rV6z+Lb7uKO8Jb0loq24XWRfx00+bvytXRcKgrdzEd+Gbh4F96txCZbSxi+Iq9+63d6pf3EXzf2fwXcOHbexaLUzSU20R+d7X8UqmW3uubD1y3bnDce6AtRuBgHxfzixHC6WSTUcltTDduw7p4Xj8Cb+i4icJHbbze1hDiBBrTaSjGM4bd8m5YKKpl0KDttxKKOnkk+WfrrKquFeZci3FiuppGk8+tXWgVmCnSVNRs+RNBlCbGYhpWh97HyvcbpRzFARIlHURmLNU7UTdZhqNtLujHoVDqFXBqcZjPJliMw3h0rQOxVPXu0va2/NgNSEA5pqZcRzzQ1wECSU/WD4hxNR6sxAqM5huCg7urlVDrEvLhNWYMVEY7UueaCW1EePzmcsB0V4TaHUKuGFZ1rRmYDTRmzfMVkuRdMNW34d3y4p00rGq6b9l3BOL9Vt+qPyl4cQD1QCFQLLS8WBadgZjihsgZSFTZRFSUWitPUhWATg3BpNh/ShuvvA/ZwWKXqEJuMauXSKTZ04C9VAVbrTwDKCMnRyMJNoi8jnAGXpTJXcPmDBByty0fwzh08ln6DljxB8Ggmrq7LtpkXR4rfNjvnksv97buI2ymLMb5hLaI/rw/V/L0rlflNslodoSuFXpe5SHm9lE6y3mwoIgWFhb49oHj9USX5liubQx6z/FjoQPwYUEceXopHS/xY9pf4sOhHHWlj0lPLTPS/xY9pbcPtLHrf8mPuavZaZ2W9GFE9hbsL2njvQvxAiUhaSiKQL+XChRZl9kd2ERSMeTDhG8cUF7KKGPMmpMlh5wwiQGJYnk7FcIrIAXRiIud5SJjuqJ1Tx0JGVocxeHDkmZ+m30I8x4A2Z1eQmYazjLelJhUmqSoFKPkHBIAuAc6CRbbx8ZAfRhDxJxLQ8M0JVlT83mJP+FuFq7im4DRU2keYuURU9JZ9MGs08jY2mHMi3ZEYk5SdCOuYnb3W2w/j6cFVq5QctUnSJd2skCqV3NaQXYwJmRWT+k6opWFomFfuYVgKy4qFcoL4FbbrSLoERIg9rGrsnK8ZykWMSrJCTE2/GRy6pezel8xFjlHC3lCrnLk23di7Go2+yXT7xLsPFfk2t4Wpx6yCWdT7vaHo3CioNmFNuIsptgI9wbx4XPa2YOFbvets+fDdjL1PIqECFDPGKYfpZd6gld7rclz+7jtxVLXKuFjSP8wqaJvtvsw3USxIR7Kql7Q1oVC/9kqv+IcemKAm3iZLOK5ds07blfV7JugA+8qKph7p4FK5CBRijhtBGMpKFeJaTVZblsSMrvdxgeFA2cOzBrFPlVlYtL7NqqSqBiQ3lsErPeuxrjMyl8rkqBqL1pMVBLibBW582dP5Mmp2bFRLvUm+/wBnGVxhnk84GYlqqkF3HCpJarZA7B6QusajYNnk/fxyPyn1YPHTyLbJdU8mdIVI1UCAylFP4+Bkl03j9L0S/HarvaTMxuBUUhO69npdXTv+HF7yRpqNcZoQrZwsgqXGuH46RmKqRt2qpW70hPmt2l5/DgaKUWDxfVa1TPEi43lrk4t3q+HQuMdo7hwTcj6amInOal20bWDF43VcSZONJgIq6QMlSMCFVITAjtIbvPsxg7F0O3JnVzCtvdyyre9p5SWohagPmwsKB9AYfcLaW48LCVo8mP1MTq/MIsJim3tHcBY6ILeTEoizcuvskSIfLhwjTjy68mypF4RHFBVIjuJEtUjh7RULvuwpoeLFmUpeYFnxAsNvh68LRdBvJQh4pbQT6h6sBlcGBGREjhtr+2Kq4qopDjk3vhDF2lMtNJMTjnJFZzamK+pSTxBSxW72hxFqupndpKblDUtcqhxcGfps3EXlxA11Vb+lVIMDjSSaybgxeSi4nwsckA8ypXDuK/YPlPElmNA5hRFOjMZeLCu+jXST11H8LqqybcLr2qXgVM7bC8uM51vJ1fmko3lajyizbBHmFJgigaRB7i6WOccc8T3C3ujS28YiXN/1W34S4fpqwSfrS1d1WaqO0pTZOnDan3k5K6R2jwTdJikR3co8QKrgPftwKnHatrBrJKO5HL7MpjHpJAPcPUnZArfdfabOzw7fLh8yo+KZGJq5cZzMbrPtqZFyI/8AfC3X+EcTjKFo3cCT+sYUrbPr2XSquzl5gSV3CGOUDd64Dk4RH8rH/iukjbbeAREY/JXeV/axRq2UcI/SGHcuDHuoKZbhBvC3fol9zdUuXaZifgxoqg6yhMxE1G0IsqlLNP45DPg0H7X2kj5x/ajcHmxk6s8kskasR1nWZL9o8tLv/RQ0shv81jPd8WHNE0ijTTVpDpdoRGXWZOAOn3Y05LISMW46QSXJAr0itG9BUbC8uNlaOM6yi3kRD3S9PzcVmblwvR1vqxiXeHStyM6XckomD/uk+scEKJZIpJiCW0bMVemwnhh48KoWZqzANUgfqNBtSJxb3to+G/Fmbr2iNmOhVNWVWMiWRpqQaXSKmLQHkx0mrdswxTXuw6R58Ao1Pkxw1qaoIekKdkqqnnoto2KaqvHShFbaADdhwie4b8ZL/qlE9VsdlNBwsNcMTMSJpSyo+Ubkki8p7sDPuxGSuYazSisp1/2gnlXz09mpCXM56qLEvqypCTNokWkAJKgrsKwd/tngkZKdszOBgrSuWMRGxD4X0i3agq9SVJ1YqqNw3Gvv5iwGco0mb+jSZ96SyQqiOgdp36pdRkPyXYJmSbc2GclEtlQX7qeb23e17Xs45oVyfG4ZREUpR/qt/wBRY6jKPLJfToB8nw4UHCZFuxzxX+XHT1zpecMmzpOxdESHwliDUp6HFa9JtaXiHbiaUdBbhmoQHi0SIF8IQNV2Qo2HkVCWXbDqHzEPPiLGiIdu4vG5WzxYtyyR8g4RFuaXOGLxqXQGMlQVM0ZSio1GJjVRsJml8OK/KUA2SW4mNZ3CfMndtxdk2vWJ4UEDDZZux5qpJotJKRUzTu4UPSo2NVb6PBkktbsIcAHtGVe5yihSbMH4jOTaCrVmPWIbfrHsjuH21fLjV1STMPRtNyFT1A54WNjG5unCvkEeUfNj5g5nZgyuc2Yj6s5ZsMYm4s4MSLVBs0ALdIrPCG47Q5+TFFbfnaVshHcStobI1UOi4XKqXH3tY8lkDVuMrkhK3dZz+9hFuIE4brG5SK8zSNW3yXf0HCM9KMGrUXj89LSsSbpiF2/btCzqPdhTV0hRsASvFK4tIC329Bfixh/aJbRWaJyyqSqKPfVU1qRClafjCAZGbXQ1SQ1bR0kh6y8ZdOzxYqCmW81Dg8qPKPOdSvPVKHHykSskYqm0HmIdvNuwecsKwiqjyfqDIeUlWMMpOugdRspJXC1TMFRvSVtEiDl5sSFJ01CdmlvVExKVhSdUSE7F8HEx8I6VXIldxXL3pCAJdRkZ8mLqXESApEhXyLNiIrP8a841m3edxouASPvStLSMrrSs94cQdXD9FZhOtmrMl24WJTKSYncultEC2DZcF2LM1v4Fu2Q7pNukACqIb1bPL/Ms38+Ium6gbVGMxAyjZBB1HuNJVsQlaqke272ek/8AcxBodUkSW2JIvZT5nLZZVMnNoXL07JgCT1BANiqXQql5hu2F1b/FjaSK7Z03ReMHiTlq4SBVBdM7hVA9wGPuY+ZNHqtqfqJxQco5XJiaRlAlzAh40vavuIPJ7mNgdmnMRzoqZXT1tzUzOGc/rUuY0vvEHv40/DVy6o71R0tJbVmeILf1hrrjW4dyPiJGJYlm6tw78RP9/DpFUxxuHWlj23IKSUO3kx5F+eE1DuTwjbu5MCZQGic3uKcbvbufD4Tu68V1G8S2YfJuDDowG6x3UY0/31LX/wCPHhLdhmK+OhVwNlK/NFSAljxFhmLjCgq4qJpWCS8Q45tC6+zHXMWKvPVCcjx1K0k8SVnA7p1pq/xEDK29Uugi6B5/hxRU1LVE0T7u0Vaw2T5ZYoa5mVpGk8kpiWfihTtLpKkr5jD7UvPfy/72Pm7mJXjnMSsJKs5JG1R6r3Q3GWk3DkS+D8eNZdq9ZnExrTJxrNCSloPJtVASsTAN6SF3iL7X4cZ5a0vTcMm3PhhcqXWd+ld9wcc587i64T7m4l0a32gsgY7UHVGsrLqKAwZqq7eUd2NN9i7I2AzKjageSVMRSshDyjLhXztW5VK4SLSSQLYfLdv8mKRVyRuqfkDdIthFulakKC/gLpEPiO63yYPH9TecItV6sMvQkaiVi4lpFZdoFbj1XcHaihIm9KhWUnVC7ytVe0Pk7GqijnQzGVkgcGLIXr9ANdvq26ttw2cvL8uCXl1SWXcllun6KOhWUEoN6Esk2BJJJyBD3STgTHvbwEOX5cYT7RjFeqs4q4kp1RVyolNu2qWpeWkkkrpAPwDg6djVrJzmUtQxbt4oIwarv0s19UtpN9BdL/aqjjEV9qqWmBfxclLTH/qvjb4ujGMYqodo1JNtnBPMGlJtoFNIWpC2aEAhaTVBW63buK7A9RHVJQFbUkVSsNMXAWEF/Vg0drD0QqmcMw8WMkFpOMjfSuXhLhm3L4OUMCVwgsQooiYueS1UkgESDBYjlHFaugOdK34UZOxBm4tQ1YPcl6gc2xsgXFRJLqgJJH1j833/AA4kO0BlGzylzceZhRCK6sbXpBYgmBqmlKhdekPj1brg89+M6VXFyrXg6hp+V0JKCV49BQhttPrHZvPlHbj6G5E5qwOdmXcLU6qLN48jFUidNiG7QcJdftBu/oWHFJWFRODWDt5ll7vQ9BaVZey5kOGUtMqT0739UVAIOH6nQ1DmBql5Q+9uwcx2jhNqqiu3TWbncmY3iWOrv8mNmOrUsYS/MJPkjVj3SQhcRoGAj4tmFh3FhRPm9GPq8vlTWleZisFn2V0RCr0UjGlwcouRpFIrnbdpJWEQNw3c3P7GAvXkewpyLj2beNK3VVtFIy57B3nZvxoPP6z8/FcmJ7vXBB/qksZ8zoK9SL7kSHVV2lZ4R8eEz9S5VP8AaLTUbYtNaU4yv9aijJORB25IEAJwXGNxPeqvzavkwVI0ZUnQrA8k7er60yICD2rfmswP8oWBuIt4AMCETapd2mSo/pV/1RD854JXqlFVNa4JISNC+7j17C3ed1f72Mjdy7clrLYPZKBqEghybu3MummsreguL0kPENm60Q/oeFxqahW8C8MqrghcaqXeE+QI129lopWXeDS99I8Gjs80JStYp1e5nqYaLuo1mDxApRkDzQtuIrRNcuYR8uKxS+euWlQVRE0rHZdMWy0q9SZpKlSTC0NUrbi7/wA2PtDRHWDPAdqFq7uNE7lIR1FN5aMicHHVZBqKhFmCQgukX1jQH7xj9zEpG5jZdNVpBH6WxA2P0nSClw2GAEkQB8aFvsHi8QfagomZmo2HZUAKBSDpJqkv9HI0QG8xEC+182GdYdqeg6amn0I9oZyqUfIqx2olAxYgRgqSV/s7bsMvMVSYxIS+dh+CC/xIIcqqj6pMtXnHOVczIa5v3torpbwISHSHzEKQ3/y54aRNY0y6nv4EqFo5JJJX6sLwSAQMhvG8C2JdXl0gxLV52iqVi5qUptWjHYKRjxVqa7ZhEpapgVv6gsSWYFINqcr5i2QWSJRxHKnrqM0BLfwpcqSBB1F0YjWcP40VMT7klfSX3rr4sCO5QKy4LrJgkwQSHSOwkrB6B6jIv5+E5iRimMa4cyMwLMRILFEzSIrCuvERS6g6PPiQUYAW9WVQQLSO8RBcbvdBrg19nClW83mS6p52/wBVBxEuktVtfc2LpMdVIQv9zGba1GIp3Uu9XYJ3urMild0w4TH6+7VW0rLk2DotlwkYbEvGJF7Dg8LxeZQ6ymrD1Sq3diqKopQry3+KqoB0/wAli+1D2mTi6ukKVQZ1iXBSisbrjPNUrrVdK6wGeGNfdplaj6yqKlUmdYvhhJJ2wBcqtJLX0lbbrAS2XW41IWB0tOLf0v8AxWYLiLm/4qpQ2Yi7Qb3FCVpqJEAiPqJfcAl7PVpJfFhQa/jkkUWxUJXPCgZgqn6ic7kjSFI+nwXfFi15mdoQKIqx9TaUNVUgLRu0cGovW7xK41WqS5hYl4DVt93FXzAz/OJeN40ablXKL2LZPz4mspQt7hAVTDYr5sEN8KTKUPpf+KkXFboDH/imieZLSb9MfEP4Sej5BUtJLiYxcUi0rlb/AGi5fYw/TXNIbBcileW4SjVxIerxDiUqxhGuqBoGs45gqzWqA27xwku/VeCkf1odhOiI+QcJ6rZASB+/tIDDSUQZMxuD/RYTXOhaoHcsE4tlc7XtZhKDkmDmSZqWoqSRaQECbRDv1bTHaI3by3ctmIpGKzEVJNZlklWRuAPVVL1adpctg83T+PBnyOFFXM2kzKSbCpx6XdaQXl7wJYbdojO5fLTOOq6GgctKHXZRTwBQVkGbhdU70hLd39nVi2zsuVhE22G1BXeuGiMcEKvoLnM8fKPEshajSTtcCkJAklzCQ3WmXT3XwYeFQGfbh4s8/MnKiJmZWkqkNgGuKp/dP4sWzMrtCzdJOqdbQmW+XI+s6aj5dxrwOr9YcARHb3vLjmte0PU9PUXl7NxdAZeJPKmhHb9+RU0kQ6oSLpAbL+TYkOHg2R846R+l+KSFflCo0vnYwYrNkslngkaCWkpxiA2uEkrQV+YixQ5P6f0g0cS8jl6IoxrUiC16grpKiJWK2h4TK73AxeKm7RNbJZf0jUjWnqJQkJVeVSdadLtRCxuSQjtt/alhxF1NJZjdnWvqkqVhC+sI9wq1bqR8W3Y2pcGRWd0I4ua4fyhInY/1/Fe8/PukIiq7Br3MRA3i4pqoKkH1JUgvs8g7OnFXqxAEmYpbiUbiFxKs1UjLd03l5uXFkYejQjW9scS6YJWpfxDcGlvL7Xf72IqpG7kGKjBL0qKJq3qlxKrMt/huAisxmG8YEtM6th0/HAGVNJ29EDH23Bb/AIKlgnZdtbaJjQs/Wn/rSxS4NA/zY0mBW3epI8Ntv/NRwRKHQ0qRjQ5th/7Usa7ye/6qXhJYnjT4CPiTwkt2OhHCuOxHHayJcuEVyI7cOmoWjjkf7uHAjgZxFsJwiVpYfJuttmI0f7mOhwCQzRglBSBEBYbqGGEbv8mPEWIRVkppE8MXiukKey69UAxW81M2qMygpv6T1q/VSRVV4dq2bJarh4r+qSH94xwKXXbIyuVcJtlYGr0lALV0yjUuT/S4GfuVNRFF9yKKYoX6jU0MkeCDbhPS/Z4BJdtDLS4URpiryIytEeCQ3H/p8ETLHNVhmlDvJ6LpuciGbd0bUClEkkiXMOe0QVLk8+LKa60dUWWw4JEqH7fU04ycGKtxJHdjnh1PBhZNcLhvw8JdEh2W4YzQMFH2njkkjLDxRVE+vDdRVEB57segopqolYO/DUhDDpZwB9GG5/38SivSSel4cJkOFPYxzYePRUJJMfPjq8PBjkhxzuxKK9JckW7CZH0YUUHCJX49FeksjqbR2cuGqhHuu5cPi+zvPDVaw/KWPxOJL9XwSJRsiqiTlJHUTVG7mx5OGkuDJztTsHl68WyD0V4kQFyrcG0rSxC1W3WnG5sYUlzWakNzu61JIvDd1FidPUE47lIWRGUV3kbTjnPD0VHDakhT9VhHO+7EAJJsaQpA3G4CvuuXK/YPLjL+VcE5ZTRTwS76IeRq+qwdoFpWK+1/TmxrvszZaU3H1dNM6tleBh3sWarrUluGMnGqHdFZbeNvT4vZxnqo8lzo2u5RhIy7GQasHhmPq1fVSVDoK7HQ6OspGsHhpiiJRWMqW3Dfg/qipCt6gqaXXKRm5h3IO3W5V2uuRGp72K6Spg0QIrrrbj3Yj5QpemDWlBR16ecH9iRkWkfiHF+oOhkczxcI+uEmzdFnrpKeLeI2e1u5cfMWskBLcKoIRiTgqntGTWoE3EaoFqjjaKghzeXEqwpuBi0E2jKIXhpm3QVcir3CqXsnyFgg03lGnTj9Qn7tJ8SRWpaXTgiHFtXjfg10RV9oLsIbjf8AqTuQMopzaKETbzHRWVFKClKcqAalk5FdX0JK6vdkV3xeHBQovMRsw3izQJHw2DdgmvMt6fkGRMF0T9KZ9N3L7N2Km07PcWwcE5CUUUHmFMtuKKjiGhujUawtWCeMUw0mlgdJKx03MwspUSgpNmyraUa8YIqAJWqpbVR+7i0nAQYrgTmXWhmQ7l3KJESSQ9RafKW3A5kafeULIxU0zRJcUnGlpau0hVHd90cEtFBaSgU6hSRHg3BEkSJKiSo+0PmxnKsIED9Pqb/6/wBkwcw07kMls4stntWrUzStUlLppWiC7tDhDVMulLcQl8Q4IUfMQbVNP0KLC0WP/nY6ZfuFiLrSlWZRlKxVDUlBwf19J4/XSZ3DY3uK7mv1SKz3sWwgbrekgWRFQS5hIcH8SMW1jLOl94hlFJrNV1NUJDUjt5lHg8aPnChM3abmzm0yuw5FAxuu5sfiUO3aqKGzaJppn0pjbZjtNtaRWrEQ+Et2MeZN9OhNdKTUVBIby+LCyOwhPm6rfFhs9jEnwopOWwqCKoKju6rsWF9HRSUO1fs5VNVxsSXbERXD8eIlCCoIuU1fkc4YdCmHx6KjSW0AQAUwNUfDt+bAqcVQ2lHCyLdzr7u9UE7t/tY8sjrNySI1REr7iSK0vdxw/oanKfcN/oYai7N21SVInLi5UVf0ony9WDqEGmWCdbKJD/yQY0zTTsY6SRWpCnW7iKTkWxtLgH4sXaK9JEmpxC3doJXKF0jgWU5PBBRA8SSaad+67dd7OGExmK+dM1otgGgg6VuIrt5Yxx0DtTUatqk5TOuklqzqZzUtR6rXa2HuGyeNF5P0wjARMKzXStcjKaq9w9ZoHjMlIU1K1RKMd6jZu9XNqLkTG8TsuIh82NI5NsF4k29MScx6wkI2RHVXuLcJtyLaJ7gH3sdh4EpOq1IkQ7lneKXR6tkNcqLyv/G/o/lEvxYDvavrRWNgmNHsitUlPTrut36IS5feL7uDIp6Lpf8AIP6wPT8uMj9qVy+9OaqrV2Q6KTNAWv8AJW/v3423ElW7RWioJvmKPzllOH2BqLg3mcoyQmuuIli2lhZHqvwiRXYWa6JJlqrWiOODkuojIiVYnHXAVG1dn9i3aq6vsEQ4u1BU+5kGoggjasRa7xTwe193FKm4CaqqpfTDQqJ+kjbJaqnSIEqX7uNCUrEs6ajSRSMiJxudCRXXezi67VI01I2A46kRUu5DAiO5STOGfxGmYtmy+iN92liwevnirf6/Gj5CSV/fxAt3mg3Jy1BXTuMCEj2q7ee34cIku5eNETdGrxFt/htO67GRz4JITeaWpWhSRRQITQMtT2rRtt8PvYr8ousu4vVMlyAgBIbuYzwsoSyu9LxdWFafa8fJcWaI6MbtFQf0qp/ujtxFoiqijyrwiNPqUVIx2gyKI5iMCFcvEqf4cWmfhfpnliwcoAPHAzScJF1CdvLd5sQs2kaS/peEe67luxcstFjVoRunzC3JVD4Tw1tWonAQ9c4TTQvjyksyygH1I29JiW208XzJJZs8dFRTtIi9Li9Vqpdy27iD5bsS+aFJIr+lWYZo2rJfaj+tD97A1pepDoqrYyo+8JFqv3+n1JGNpfLg+iJqqwy3Nqbuu9aoyytyP0jQj9qJA3R2iV3y4gYNtN0++UbkGrHui3Jl+i8w4LLCp/RMxjaUi1m0lGuktVJdPrHEPNpcR6e6aEmoQn14ZFZKYKkcsi1Fq0rJjc3sWiFwVTHjg3g7Non0+LDA2uJFEDD+xZhbhvQtsDm6fax/QGyWah4bohobe3Fsfz04/rxX5pral+7v9ZqSkSw/m6g7LOqpmEO2XeFe37hJK7eSCV/Ji0UfkLVlTCicozCHZmFxkv8Aa+6ONWR9LxUQ4cuWLZJBZ6qa7ghDcqfmLDwkgS5bMYgvJvb62vcra4iKREUR0j+f5LpH/wCy7hS29u30IiMREZFqLTh/L61jKUywm4l88p5xcKbdX7Uht1Qu2EOCTR9FwMEhHE9aLmsdyfpUu6TG0rvdwaKkiQlGKn1YVHCQmbe3mv8ABilw4MZdFr+X0/2TEz7zoPw4/OXlZ4fqeEKwQbL3O50kP/XH9y7LwJxc1xNbyNwYuN6S/wCyElaUhFlLuI1M09RLbcO0h8O74cQMSwmqBdoyTk72gHcRWkV3lwVq8gWhSK801bIvRO1Ak7R2qj/NtwPV802DEfos/gkFUFRsVWHnEsYuhqX6tgQaGQ8y3AuC7HvJ9mvMsVnUI6E9MXTYrVPDuxZKbqWLnsvF4JT6y5i0BXJYUh3bit+7gBZkVb6+mkWzAxFu0S0kkyO3ruPCdA1+jTVTN3zj02tbwF0IkKokHs4flwe87a2yHcOpJHbpSdZJpzlRdcuWL2nlJr06YkqdiW/m93FRWeaKIgvuK3aQ/dxOVa1OLWWbRemvHPRB0g5ELh0iH967FIUnkRcIneqI/oCv2cu/ANHSyGQI59iIiXKpR5ON6fZpuVY24T2naraRYKnZvrlaqmspBuEV7mioOEF7OYTARsu8W2738BB86i5Nmsoay6pCO4fPjTvZ6YRCGWzP1WaCl6qpuCT8d37tmOxeSOmhe5iUTES+V+xcy8qQi1YSkMpEPyfz0K/cLdjoW9o4khQDCybVHH6gzF+Y+qqJ4W7HPB4nBZI4U4IMez17qir4oYUFLbyYnuCbY9wSOPdaXuqKB0PR/wAmOhb4nuDbf8uOvVqPvY91pS6iq/pW4UFLE96rR/5ce9VgGI9ZBTGjMFC6GPaFuJz1cGPeqw/JuPEM9WdWUOntw40tUR8WJYYgLcBrOnMxBH0uMsqCqVJKpSIfWS7RUCVjkesRH9aW32cI73xBSWOkKrqS0innD/DVXfq4aKkHUX0VEZt5kVelUCmXWW7NsTjSAZKV48kzSu/wdCwS72znL8WM1551PGw2W0hR8WXqsjfeqVVB2kWlbqpJWc2/bibl64WpSiqlHLaaRevod16ueSSyorqoXjaqKRBylcQ97u5SwN5Kn38qwywo8nMauStqpEY7bnB6pDbdv8PNj81XG7VHElyG4XAoiJaR9OmOEvwX6SpKKm4Zt5Wq28w6i7xe9/JWF2g8DMCkKSXqPgWEVBKv2XoU7ggMECsAiLd9qG67DLs51o8hzbUO8l2wuUVzOLJBXvQVSESIPxY1b2hcl39OSkFLxKLGQdKs3cSbkm+gaqTjmS2bNvMH8qeMNTETNpU3R3AMSbOjm5BVmTctt96SQ3F7YeHFAstVTZUJl3dXtaikp01wKncG4NjIdWn2fRhFfTalJtnWsA2mGo2ugHQfoW2kk4Ad3ulzY/Jqo4GEX4ORkkuMINUWSd6rpUPEKAXKn8PvYztkxmECiZJzLxy0FJ/6nqJsxdEgYqoEQ7VQ3W33ENlu3Gq2NJRVJehaPg4dBimqreroJb1z8ZF1l5ix3LgPil29UXVqn17Okv8At/FcZ8oHCTFjuHWab1L2of8Aqq7FylbS6gnEQKEGxPmczO50XstUi+Y1R9nFgZ0HGyjjjKveOqlWvuSQkD+pIey1C1K7zGBH58SjVkZc2JhqhbbjUVcT3LNUMg26VB5gQbB7l7UjZ0zbLohEu7U1UhIRPhyssHHzoWjZ0BRvaIr963C4lyI7d36fQ2F7hDj6P5oKot8rauWV2p+pnd9vg0rcfPmUZsGsai/4BVAQINAlY622werbs6Rxxfygv9D7Irr/AACx2DxKvDHOUkf4MhEhHQSFVAUAEDPVIuXQ8O24beXy4NPZZpx+/wAzmZiskq1bsJBw3Sst0Fdo8tt4bC6rtmBu2gnI2mlFLthMQNusTPSut3BbYlZzF5ebB47H6HGZwLGqsZDH089SFIlS63SRXWmOzm6D6MZnhuqLG5s+JP8AiJgPN73hWkoOlzF8K0jaSYfo8XJxT0PIknqsE7g5S5ceWa2qXhtws3cGOwsd2fq3KgpSXFmKNqnGMU+awzNunYkiIj5cdKRvw4dN3QEOOVlwwERGjoikRagRDdjokgHDdR+AYarSIW8+PCvqdONERI78QLowu2486kbsRJOjIsEttoRwuVPk29xDdjE7zMbN2OqSoo2jandi1aTkxwTJQC0tJJ0qVl2kXTdgzZodoSbobMhtQdKRraVcAwB08TJIi0FT3ABEHJ3W73wwG5sKepOr3LuNkmysj6SezM+jcLYo/iDJW28P2p27jvHHKOP+IaRwhomtTja6JwjZHGh62+OlzamrHtBdpJJwJoM4tyol9qn6xa3mAdY9x4RLd5/LiYi+0d2hHSabk4eIcon1IKtVbdxDZyj4ebyHisVTWNMydHk5bSL4hnVeAauWzwklVTJW09ItIvFzCPPicg3lCRbw6TZPkBViGYqkj6xEQTCwRFUjts+fp9zHNTuYg1PK1eEuX+K25W2nnypeR7Umd8HHqTE9QwizbkHFKpoIGYBaI37VR/S3YMXZ/wAw62ryYqBtV8VHthjUG5NeGJUj3krfdfaH6IeS7GaMw67y+e0CP0gkl1Ws0rpIKsnQESppKj4xsARt5sG/s5zLMJz1rTjPi2NWkk1cKO1RSNqDXVv5OfmLwh8WNFwzcWWrhTu1LcdRDtx3fF/VJL3bAdo3siMorSiZbt2HiKuGYjbzc2HCeO+urkTe1SSKoYfIuN2I1H+7h0ntxQSvBSyauM0/1QrdkGNvN62Stt/klcaKFfGe+3gPFZBqB1et29nj5VcB1Pq0XR+tFYbyXbs0qTUed0SzjVPckCvV038mLpS8pMMMyaYlafiEpCWSm25tWBIJIXbtoiQW33ee3FPyzZvIilY83jxAWqqXEa6CukYgZbxu/DZgnUK/YDm5Q6KBqqkFQNA11+6NXdd4d+OUuNzush7y6WMQt+rur6RKK2lZeVuOdX/HhisqZch4TRI7t5464uVKQLdjoRwmK4D7WFNUOk8eU11b/lx63bj13+XH7j5NeiuBC27Cg4/MCbtMZwhlHl2s5YPBGop0iYQw9YnbvX9wbi9uzFTjgtDIla21mlEVnHtwZ3PJ6oCyip5/bDxRh62ES/jj3m0vZSG28fGfkxl18ybN2JM3SypKaGquuW75fFtHdeW/DzV1XAzb9a5bXvHidxquD3Kjd132kV3j+PFRqqW9bvBphCSJcnqXFP1yV1T0us7ue49uMq66VU7JaZpoaVqKYxYtqweLTZOX1re/g0Fw6LCI1SLxGY2hi2Omq2ipdxhJnpJCIoJCRbR5S6OUtvVvwizas2vDtmulvSMBFO0vFZyc9uDLQ/ZrzSr6nYurafpmOdxLpxekSr8BNUErkj2n5xL4cB1NSIbtqsbGG9CRu1eC4WbJAvqOFTS0LbdXcVh2+2I7em48SVQCDp8obM0BauEgBnaVxiekls9nl3efBrU7GOeavpb3UswFRulZqjJJX3+IsOFuxpnOuToxpSJSvcKqtfrqXcAaQjb8QDgfrLalMO8s9E1RVR1lTSJYx73T2hZdcG4PJ14pOYUbKwk43rmnGyqjxoVjoUg2rpWiNpCHJs2/AWNhM+xXnG34rVpuItNq4SD+FB23pEI9PmwF8wqImKDqiSpKo4ds2cMhb6qTa1VAkjC6/lHo+7g1ipECkKiUHRiBKhzEG2rylWL+mZJceI0njByJFekrZye0Ku33MWKk6vm6lbpzzdz6sqCHdAk6JpYJi7AbgXEvD4C8p4HbFc8tKkWjVwEYGbV1UNTkYu/N4BPxexizTDr6FSyOZcWC/dBpTbYbBNVLbYXtAf3MFEPKPyVUPtfKX0WyprlnmXSaM8OglJI/V5RsP6Bx47fCfMGLoKFuML5T5l/m2rJnVUc2Jen5BIEnSCR23Mi5CEfEG0v97G8GoovW6L9gYrt3AAqkqPUBhcB/NjdWa6dfYi7uFYi72zqT8m9pLkUvFhQUt23Cmlu83lxyiZmotvEkwPp93+dhylKWEcKW/wCTCZbcdauKzUxX7j9u/wAmPCBljxJH1BiqIKyZrklbcMZKeioRqo/mZJnHt0hvVXcrgkAh7/tYfCkHIeMP9uacpVfMSPBqshKy0PHAw4ZAivZuAcEqYK+4r7uA66p6q1JoZEjKGm605EiijJnZ2soej4WNhMr9KqKuqsQSiGyCu1DV5CVDnu8A+Xwji60xExXZkyRWkKqfuZyVbgclNvSMlXEtKq89xHvO49gXdI4AXYMyUB9KPM5qgR1eCVNrE3JWpcQe1VUPHaGz3jw67WGZ/pq2rgoiPckUNTCvf6R/xl/ylcPktIR9/HKeJLsVY5l8ord2S1zOAIGzrx9V0zJ1NMOxcv3q5PHQ65iFxdGz5PDiHRQO0nKSNpX2kJKlYPUXsFYWJRbjCFFYlh33glq2qpXgAifsdO3FNqCZB/UgwMcBcGyE3EjpnbqnzA3ut8Y4Q0zWauhuEDIJSpktCFfPw0kkTbmC4iVyqQGFoW+PeXz4NP8AU53/AAVS1Csz9JST5cG7YYnVBMlQK4zVuPw3fLgWOFTFuRrsB0VUr9QuQjPzW7OYd2OqFXksv274qErCoINN7tdJR8oSRq2CX6LrK0i8+7BgPtDTEwSWV1G7V7VqzN7sxRWY1cVFN0NWDGKUV79+ykGtwCrbvO4CvDk8NmCFl9lOhkLSrDLFtHfSD0y6RvH8hpaAuXGr9lcF2kPIN27GO5StMwpuLFm/zFqVdjoAlxIvCQIkrSENUgETV5S2nvx00zHzKD1a6LM2Xd+qElUmqa0jxIoXjdvvuvLaNhHy2jheWtqJEgBsr/eU92gHUbUuaUw8aghJR5SPDpORK20AbjYGwt4/orvIGB21QeMhJsCI8OeqPdDq6Rh5j6bsdOjbONRZ7pLrd06FzwRiZGau8/Z3F7R4GlKLhRddrUhNvFVWL9dVVi5FAR70i3CQn7OLaWl6wBd5Oyd6kLY8u1F1iOupo6y4lyWilzWHyW9d92JLs51+eQGcBRUjJCrTNUCCQ3K90J9HsFft+DpxXW4vO5WVW1SsutFqW+wd91hcv2WFqsp8KyjVAA0GzhIjV+slaerYO3eXNtHHxp0QLKLaS9V03WGvaX1RoyTBJX1YS1yLgNdmV2LjZ/ixjLsa5yucyaLUpKbWUGpKQsS3cxh0n/TquxsGElm8wz4lD7QD0lR8J40NmfjKkd3CucXRiB5qomaWYVdUTJMm1KUGxnm66BqqqryxsySO7l2IK4qrXPfMwQUWlMlGrZukJqqrjUoWCHWRXoDgl1MOtMIB/wBFu+bGRe1Zm8Dpx+ZmlH5NVhHip6QH/BW4brB83L72KGBudfdypKYtPhXiKmYo810dSz1mPWzats06pqNm30W8lKKqinq6tuwR5urlwKs0GpuFokEEV1SvVPuj3dPgxOLGiNRSXCttBEHVgJeGwRH8Py4hcxLyKPNJZIVg1bCJxpW8uC6tvq9SQpxRlJgSVuydho0odRWRGI1uH/8AWDVJU9pr8uqJGGCISVPKyBB/a4NitqqqAJbN477gS+bFNyRarfRtY27yTSU0gsFikqqFlyvMSQ4KScpKpSCkOqdSpOtW4bYheznH2fi5MYy5lN8lraEewFFrssNUXhVuzYNmaCysWTcbS0hIzAhC4SEbMBKg+yFnjT9eU/UkzAxCDOPkUnTj+G2pGIAW/wDS4MGSDL1pTuZrOoEl3zcoRVUEn0caAbEiISHVIuq3GRKDSYSmYlLsJFmKou1dwr7gLmGzf5BxpeGM3qxR7yyV8j14vkq/0n2Nc8YGq6fl5ZlTCDVlIsnDovpE1uFJJUSO0bvBfiEzA7F2eVTVg+mGT+jEo9xLOH46tStbyA1yLlu8GBLla1bOs5MvWZxqS7GQqOMA0yC4L+IHaQ+HApZv20zXUSwBskki4lEg0hHxqiONUOeRxlypA5GMlqavuyxmRPVtPTzWbocGshKOHSWrUrUT0jVIvFgmZxINn+ZkOcc5QeJ+q1RBdoqkuJWcKJ2ldYfL48ZDrBhFDmRNM0mbYUwqB2hbpCID9aLZjX2bES2+n0CwasGaqYMHekgRCkIGbhDl2+bAfEUgoSkmNh+HCq+zagSKzZ7r7wsSuZpWidnJ9reeDD2WODhs1ln7+YT4dpEuDNRRBJAEg2dQF97Aq4Nm4YorIIpW6VokhM7L7Ru5EvMPs4MXZYagrmys2VC4QjlRMVHRqiYFb0mI45ZTF7pGPeFb+5/A3PCgHVXZDqF/mA+rNLP3LJszdzaskLZeZVK5I19UA+w5sQeZfZTc1XXVUVa27TeV0exm5Z6/SSVfqkaQKqkVhd15t+BWigw/PAiiCKH/AKUBts6OKxSc5KlAc4K0ZhoDZUcgADZ/0pXHXRbfn6zlXLXHRAYxWpczezjSVZ1xJVIt2oMt44XAt0iQXNclRNJBJIrto9SRYgq8yAy6l5Zusr2oqCbcFER7A7klSMtJqI3e9zYGPaE4P88FbbxEglFeXA/zwnlmGYCjNutt9VxW0f8AqCGDGBdERkSoccEJaVrStmsJB5f5b03TNQtqlTh9JmT5oKqCSuxcrh67bCwzTSfqkOlGye9W/u3i5dPtD5sekEDe5W5WtjBt9YYMiLXts/iat/Pbjzql23drKnA6OqAGQumtpe9q833cc74lITrNS6Lw/oo1bsm0HIZv0ea4SZfwildxKXLs/lfmxxn7RXZnrTNiqasqHtAyUPIPXxcVGjTipk1MAEbb/dxJ5KQ8ClmnRyzVtAoKA/SsFBdAVeTmEAIviwGu0/QuYkln/mA8i6DqV41cTLg0l20SuqB7B6gGw8X8Na3HNUUt4i9aPhVtzDovsry8lE+vs76sYuIyBj43TTpVW80kku6V3+MSEvexzWVP9k51TtDwM9mjmI2ThINVJgunS9vGNFXjpcFd4+NUh9zA57RFE5xq10zOlMsaufInT8Ekqu2hHSo6oRbUDDl5rw3jiJzuy2z7l43Lf1Dl1WbngaGZNXnDQzgtBwDh0RpFt2F5cawdOWOYswQ7tKIFVMuyQNI0vAlXOZqrNl6wdM1xgUhJcFVbT5/AaVuHSKuVzDs41xG5XrVi+j3fGul302yboAKqTW00h0i8Co9GBDUuV+diNEZdollZVzp40iXaTwQi1bmxlJOi73ZzcuC1TdOVJTnZHqphUkI7jHxuJVUUHKVqthtUrCt93Bj2lgtSixrfFRcS6RGBZopI6pcKfflIvO97rltBIeTEbJIPBYvnIoyChGO4idL232j5vmsxOOGfBQ7M3rMhvamBWxJbdt1xXq7+rw4rNQsIdrE6t8emKogQKFEiJjs37dX5jxy1ota6a+K21T7K3L2nUSC0ghmW3w/VxwQKVQ/tXj/ZP7xYqbFqaVCwO+7+BmW6y3foDi9UyP8AazH/AMkf3ixtvJ//AKkXh/6rAcX/AAEfEvEhjnlw8IcIkGOzrmKR5cKCqFuEVAwniEVMXYJ4K4deO+KDDDHsRy1bnp9xiHixyTxHx4Y2/wCTHhEMQyxXs9A/trCze9n2eN0zQck0dNHDcVRutPXEbvmxkFiwbL0+zRJompqlqqjwY7QERL2wxsjthIMyyBnmzpZJInbhkk31f0p8QJWD7gkWMxUugEZSIA54FoUgR6uu6FA9LuhAgL2r/gxxzyjOC1WNiC7F5PabrVMREhbWUcjHeoZJBu2AVZNJUNNmkJjze+eN+9mUbcl4W9G29w9K2239OWMGZn+mOsg5VgDRJpHuhJ4gLrVMQu5rfexuHsl1VSstlqzo+LeIesIfVXNAdoqt1VSVFVLxjut9vBHBTmAvCbpcpfWgONKUgbIR5SFGLSO6/DpNuBDvwoKXXhYRsx1ea5mIqNcNcMySxNOBAhxGkG7dglopoZ8YJnZ/ix4hwsQhj1gYtQ6b2/5MKClhTSDCgjZiJKYpuSXNhPSw+0gxzb/lxSrUxUSwiSW3kxKaWPEgHgx6S9FYn9J6QkI4bqL3DeQbsJrLgJDvG4+QerEnFU1Iy32QDaBbri6cfijS2MjX6xnBRcQ/D1poruyQZOCtXIcXt4LNBNu2jgSERPlHlxGuo1pDtyBU0EB5LcRKjj0l/FUVeXm5RxS77rLAm0KRSKStjd4iwdC8SecI9BUzAhO0h6ubAEz3m5hGdTzHVdk6cO5NVg8Iv06QCFl3zYvyyL156FBcqjv/AFZFiJGmAWZerXZ8WiatwoKbhE/Zw5srgWx3NdKXeFA1LHWBiO5LUS6hUm7NvIxaTtOU+sJXIXCIea7BMTi4VFuTZKOZJpc2noDb8OImhaSfgs3RVciKYJWCNn2YYNjONoqmWiJvvQkusZbyU3Fy+HGav12bB/oYkrWvc7cS1IaM45JD02IMxSHwpjaOHZMnV9gIkReERIi+HFmqHM+jGxCxiYVMnh8qihCNvmtws2qJ6703HotTU8Q8+EWNRVRzXW49P61Y0RHypjHZe1g/TFZCFVTTLqW2/LzYmPzN1loayT9soXNpjtxJx+Zc+z9IpC4FyI+IcTjfNcbuHeMLVjHYSZ24R1FZdRPshFDOdc5ULHNC1NxItFYkiJIt9w7cPk6ClGre8+EZD+0XAcFdSZ4pqT+OtLqJMtxFgUVhMuZWQIibqICG3T5flwVR3CrrSjjhFXsPunpSHpgZI1E23oRTXJUT0tNUFbrObDRdqun6RAkSEk/LuxCziTxJBtNRje55FKkraPMSVtpW+bqxbIGsnzxFo5dacqyVG4VCHdZ7WG77LoNC6Or8/giRzdyjdyRXh6Suwh/YAvDgsxKlJTI3JU6SZD72FpyDhkmyYJx0aJKlYPEpEl8NmEw3bXlEJKkqoRLUKEllpCZY5ILi5BxZygUWqpcc4jdPw6pXfexEzasEhqNmrNcS/RLCrcKvx4PbdzCiKuzR5VE2WqD+X04i6imW9OsFpd2toN0vtVdIlLfdG7EFPVbVUW6ahDUevJomNq9p2mJ3dGG6jyv6lZ8M6gY+FbuBMVxcq65iHshjU0dnc6RffIcvxYfV7/8ARAOXAZE0MpeFJenN3Kw1BF3X6AjzEXq5/ald4u4xLx9eZe1A+TZ0bWzOesC8hSbroEkfsuBEz9ocZzlmDNKWkI1r3rVJU0rrt/hw0pzL+n2kw0rVGVkBdNS1UhFUNLZ7O/3cdPq+C7QzQE/jIS5f/qszSX64VFWLQRWwYV7RsQ8UeVtWshSkaA7pSPG5UVTtERHuleb2cGPsrTdNyFZPEqZzHd1uxORIkpZcbTIBakWkQ2hy6vhxlTNB4ivQbdZC0ikyaEPht0iI/nxoz+p00KgpR7isU3hpqMpx6gqgW4FQVat9w+AtuKuGLMTVK29zSQvE1WOcQ8sVqrMSsYrLinntVSZ3Jt/skR511bbRSHGE6nqeUrOoHlTTBEs6dFd7AdIj7ONnZw5LJZsehp6FqmeMSZfYIiIEhu5iIOYi9/EXB9nDL2jIdw+VbuZWSbtlT13K5CN1hdI7PiwVxJYLneX8hiIsjq3cyV2W60NqYzXNThLJUNTE9Otnz+MYko1jUtV0vfaKQfvY8xYPBMlmSLkh5VbRLBB9GYYw6NZQhU8qxWkHXDpIFpWIWXCe4CID+DErkZLIpPnDF4Qotw+sEp5vN5ccmu9LSUWW225Iub7luqStfyHKkm9PKgvAVBMMpuZRQc9w34dIU7Nl1txfeHBfZVbFuoyxWNXScmleJIFcJH+HAYhlfWLublwS0xkph0ukPlu0x+7gjUg1J6mxPcRJX3Wj0DdhBemQwPb+YpzVtieokQ3S6LNuIJNhJEBsES58IkSK6e0yLVG4d+OkYt4qmIEsJKAN9tvNhFRloI332ldeQ/u4yBiQbkpGC84dOFY8kUAudr2JID5y2ji2wscENGNWKS3cpDarbzkriv0kgbySJ4QWt25mghd1K+L5bfew9k5FaOUW9CvdpntG0ubzYMa9ytyJDv6zyhTeaEC9LgDMisLbcNuzFgyj208+SM9oP1fm3fixQdc36yx3q7BvVIuXFvykegTWbR3WpP8A09X7IMMLH68vCqq9oupkKnagagKmtZdgB1/SZxDnWZ/xN79kRdJ+HGkHiTSSbqI3kmtb1YH9QQyLpi6jXhjpmO0vCfRgl5kqZ/NHaSjaqmOlVLsnup+Ke1DTj1+kpHIWOUmhbrTItxD4en4saA1mi7nd6LVUi2iWMmw0nNZa5pwxE3JP0G8Fm8ENuokZDzeXqxsaSp8V0fSs3/uY29N1yrYzW9UeVLb6LbVZmF+kQ/mYn0N35q+i3TVK8LcIJighuPEpKAbQrHgEuN20SxBKCRESmP1P5NOIrhxDa/drJDl6RLvLiXFFtprbV+5ilLVHur9cKm4UvDaOGpJHhbSPHrf8eOn7FlC1puKSxKWCG7ptwOcwI1Wi5ZGSjlkNF6WqSNw7D23+7uwUiXYREe6m5l4LNiySNwquRfZJBznj5yzVeSVf56I1U1fvEGshNt27VATt0m5riIB712/HFPKayPF3+UNfo9Uva7q675O8C4eLzg7+k0x9laTlanTetH8OuWkqqFzdZQru95g24EZOYioIx4zf2pKICQpEW3eGD3mv2c80aaN3J0tE+vYj0pcQ3JuYkuPV9lzXexgCZFUkvmFnLE0HLRS7RZy+4iRbObkjFJILlQIenaOOEUHCVXQOZDoxKQruvnu3G11lhyQ4akjTOSc1mA2UfxlVUfEJpXtRQmpUWi6vL3oiQbh82LMn2Q6+MRIK1y7X27raiH9zGze1jGsqTyWnKgplm0jZCLSapsXKLVK9qJL+i8R28uPny47Qmcbe4PpagrZ+thmBffQx1u32KuPsGyGIrj104pDNJ8hjJF5LIvPCBpNxCxx0hPA0SI27dpPJqOSDmIAH+54y/wB3Gaaiqhy9lIdhKRYs27i9IVUy2oOOi/b1bsbQ7LMpUlWupSeq1+zkOEi0nDIhi2qBoGqkqKtppJDjGcs1bS7eQYGtbq37h22ndsP3DwF/h2mt9TmODqJP6HiSsr6TIEtIr0tFvyj1gZLOW0gkqDgVeXeG77+N8ZE1fTGbuT7GraZio+Mkm5cPMtGyAIWvQAdXYHjC0g8m3GFW/E2ibpYnKgCFyiQc5+K3BE7O2ZDbJjNpNaTWJKma1II6RIS2M3F/1dcvKJkfxnhnb6oqB0X2Nw/kkru9N5yYJp/mW0EwtwoJeTEpMRZsnF4AOirvAR+7hjpGPix3mkrGq1gX2tpLhFTSO0T5MO7hXIlhQSx0KV2OhSswSqF+459BflG+zCgJXejFczGmqepqkFp6qIpB9Gsl0r0nJEIbz0gLYJnzl4cLLpXDbaRypjKKOoaTrlSNNLcrEJeguX0YWEvQJb7sAdvnPkgX2VMNh/6tMukvvpDh4nm7k4W8aYqEf5CqFUv/ALKHHOv/ANm03+yXzltf8Bv/AO5/RG7VDqPHIqgfJgLnm1k0kJOV4SvBs5tOtxs+eTHEO4z6yZ3cAwzLEvF9K0rP/c4sXt+UejP9CX9FQXBFSH6QVoIVQ/5cLD6fybPTb8WMvus7KbdF/B1SV1Hp/wDX0nJ/OqWFmebQCp3WaldJe0war/8AgFg4ePaEtwl/RV/4NqR/SCiVnFnI8oNw3pWmYcpCopBrxAKEQ6DFLl1S8avgD4sZeqWtByyhnbmEjUHcsmlxjhUkhUVZuFRVIFSG7Yrsu94PFgksaQpKeWWkkq/rolnZGarlSLFUyP2+Dx+NezHkubeSSks16vFOXVBd8JMF1TXPzEbUcch4krHuJa7NrCHJHaP/AGXXbC5ScN2zq1CJZjnrCIfs/sWTJc5AsqKZpwafXFxUj419b0pXauqqVhXdBFaPxYlFHlPHnO4WYxTtWNpWONJVNNAi4YkktK8fFvLpuxrkezzkG4axbNXNiqlPUtgs9VqqPD28v6Abvew8j+zzkKwfPn7PMFDiJK/iFHsSqrff7fJgJt1o8CwLmlt9rH/qvrldCMeWP0f7qm0XWMnmN2fa2pBhNysnO0v6EqgYO7zVeKJKjeSQdXNtEf2/lxnJwKMTNZa05LwlQR6zEAdP41y1XQXULiCVNUBPpMLd3Lsxtym8oMvaaYos4bN+BSEEEm5LqwZCurpCNhkWqO7ZjqUycoao5hjUMznBTj6Sj0OFauSQISSSuIrft+TcW3lxaZMDKKCpauBatqwjQMsdD1/KOXlR8WzlZMUl9PlPX1SSVuDZdt3XF14+i2QtfNqgi1KSfuf4QjO9aiX6Vp5fY+5ZgSKdkTLVWNdRI5yQiqbp0DwtQQEhVE9vX7vvni4UBkmll2UStG5yUxIqQ5gSSrtXvSt5xIhPqHEqO4vW+5N3NjwkPeHvJk/UUNxtTltrPE2XdLu/xWhSG3lDHky3Yg/X0qrvCpKFL2X548jJVIamxzRyo+WWP90sdb/xZbC5vo4rlHmapDlUL2gqvhKNyXqiSm3IiLhmbBqndaS7hXaCQ+Y/lsvx89Z5/JSIway5ig1NVwZNo8jQHmJIEtUxvP7IvDdfjaOfORtYZ5OqfP11TTFrCk4PQCUVMFTVARu+y6bfmwMnHYMq1qxFnSTmmmIqilxBKSjpUiVDnIb0Csxlbld7fW1M4yitPbG36KmhKMlm9mq2i5BrKxsbIKpsnWqQk4ubqmkW9IhMt/nGzqxsLspteHzynmyCKSTdGDVEBF1q2hxg+Pk8fv4HqnYLzgCLdQ7Wp6cbN1QDSJB6vq3jdeRlwvm6fDg05O5V5m5VVW4qaWpyHlTVhm8T/B8oYmZhpXmQGkAbzEiu5t27CzrNJ15l8NMS1I4XXOpvMGUpCtIrDhmoFpYgYetJV/USdPTNHvoonDJV0g5UdJKpEaRAJpbN93e3ewJ4sSmOg01S1VBmMFIVjH2iaKJJNF0aXXhNw8MsN1C3bcJkVvPg2Kokutc+vDFwrhZQ8M1guxYCi6SbqK3Fip5mV02y5omQq1cEl3DcdJg2VVt4p2Z2gl+I/Ji1CkZlYHNjHubFdQub9bDKpao0jTiXCsF3O1J0rcWq4AT8XKHs4R8V30bBbycH1hbVoOE7D5/rhbL1Y6iJUSermYotnIVnU03xNWTrjVaqCPOqfOqV+wUhC2z3BwP2Mo/VrepEZngUmlQRyokyvBXXcWiqG4/eLbhKdqZOqGNROZimE7VleChk19yqCQ2l4dnKRePdhF1T7x1WDVZqjH6j1m3BVcjtSIFWoidvXz7fcxyOkoBbbJ2p9YW4l02tuBOvjkerHSIpgsUvI5TwyzX1fxsPLKiKlvex47SSDzfa3dOCE4gT/O0m2L1UEZUUSqkkdwWPjISVS8ob7OX7uKRBNXkDQ1QUkrTLZyPFbPrVx6tvPdbZaXLi3VJUywzGXcqkwjUnkek34whuJIQ2iV+2zcJF1Yg+yWLhC1t1fS9Kk05FoSc3afwVYh4B26y3qRg5cR676nHmqgmQ28Mkrby9Zjcl4sSMXVkhldViNRJu0jiKhBvLIKMFQ+1MB1QSS6SSVvtD8GFiljVKuAYUezFrJiCqTZQrVSMFd5h7AEW3diMkJSSlKTp1b1VCk+gkFW+qmfetd1wCr47QHxji5unN6QujpL8PxVBVGVEmy1D+fqX0XybzhiszY0WxOR9ZJJAW4beMDxCHi8Y4JyY4+VNL1u/gJ5RFKSX4c3B8Ku0VFLX3XJEhYWwt1tvsY+gGU/aAh65i28aTCRfTzdqDghZN7kngbRNUSMhs84nbvLG94fvbuHuGtKRcpd7+/wBaxl+sgxKuoR08w932v3YowJhh4I4p41fUJFY3yoqjyqquosQ/9zCP5MSDeXrZxvSoyPbD/wBLmbT/ANUgqHz41hEsnBWCz/FgE9tbdkWpZdslmhe4F1/yXYLl9eKjsRp5Dy3rrkPyjjOfbCqh4OVslCTOZdNCsk4SVVj4+NNV0IFckZCRrkHVy2X4Gf2q9j1orBcaVqbdgga4o6DfuhFXcekJHyCWCZkiYJZwUSigi8bKeuWQmmuqfJds5xHbiss39Ws3T71owjI3gkmQWoM2qqSFyA2ARK3Kns9rrxMZYzjyq81KRjePSQTVlmSSpNmAoOPtR5SARNLZ1XdeEGQObJagneyX1QK8ViM8dCrhNxuUL72PIpHbjULHronW7DhqqeG5oYUT7rEF5Sgq7b8dXXYjxX+LDgd1uIq1ekJJhDRryYlnItmLJI111y5BSELjPHzRzyzQeZzZgOKn+yiT+rsGym4EGgXc3gIjG4/93B07aGdKL8VMoKceEQsVUlZ4kOo+ZJv57bgM+jkHxBjKbhU45EmY6Ws4MNdXl2WXAAiHIRbfDy9Fx3Zq610yyAT+2U0RzSSbp624pHSAdM7LfCQdZl7WI0YiKZSyZ8SxQmFf4wguuAqjZbzj19XwB4sETKHKoM3qrGikpJdio4BVVw5QtE0m4K77SDq6fbsPA5fwnZ5lJprQbLJCTbPHsklFhJDMkSoqm40tW4xv6rsL2NZEIo512CkGofXFgNFJJQEgPSLafxe79zGia6lX0R2JMt14147YqnVqqVyC5JHZ/CZWXhjOh0bNZb1NJZfVM+XkFqceA1GQUIe9bmArtzLzd6I/PjQWah/+6SZadN1ZK7S9iT/FiMfdLYEg7gXuMjFZ5cV5WwqWDWc9/wDLRx+9jqSrWs0k2v8AbVNF9VAv4+ru5vNiuuPtMOJQr0WIbSsZB0+1jT9Va7qwOe73lZqbrqrVZyLBxPTzwTftx0PWJFq96Oz7XBe7WYG6zvqi9oqhewjbhuETHuEi3bfFgG0Tuq6BDxyjT/ajg7dq54j+f6rmZokqSqUekfe2mP1VIrR3WebCy5Ni0OkVpeGiN0ykSAsgvCJRrg5+YYx6IHtcyFthbvCftcuHTVenpuFJ5CTcfJsd4OE2y4kqIEPUHP0l8niwWqwyoy3yxo+lcxa5y3Trp5WAOCai9daSTFuIiTe0dwXGBXGWBsWWFPTdPLZ65W0l9CvUU83iJGPRcGug8buNLeQmNm3VHYIdOFzQ4OhJaMn9UVUKTVeU5JOMt5TQ9XuL38C7LdpBYXdfKVnv4292Qc2vWLccpajNUnDcTcQjlTbqpBzt/d3EA+C/w4x3VFNBUMG+ZqyQs3zdwBsFEju0rDHdcBeZXxYeZf10/dMW88zckzqaCcADxJK3VQcAY2Kj5S5urrwSxWFSujUj8pQfphqGsgvkrfGcjCp2taUiUTU7xjHu0pAXTEdqSqqQpECpWEKvUfXZ5MM1HtT6dhTdvjIdf8a5Y5p3MthnhB0vUIgk2mIRJ0Es060llRSETEfAVpF4NluOikjcVstR4MB7qISkte/mM1ySt+XDSuc6wWYJJVRt5A5ZCiBSKT91T7dy9ckusqau4vatxMCzMS6cN8v1Wb+mxBmsKvBLqt1RHnBW8tv3fjxTUc/6JGDTlZEHMY8PVE49y1VVVSMFSStIkhIOnpMgv24cFd2LbTCVSSUFb3a18ssUQI1vrtyW2faqpfCZD+HDhZhaJGWKLR+c9NvYtMH6Pq90qRnoL6o2mZXW3mkIeLdjPPau7Xca6TUy6yoniJO62UlGx6WqHW3SLnAfGXuhipi+01ZImCkrStb7Wl0Yqa7TXalOg1FMv8t3KSs4YGk/khS1RY/yRchlZdf4NnixlXKHLKezwzQj6bFyuq3V+tPHK6t3CtBMSVK7xGe3xkZX4pazzjbTVNJNS4FVVd5bw6RG7m8A/Hvx9EuyhlM2yiyzWq2pAFtKTaHrF+Rf4GyEbgSu69u4/OWEN9upg17RJlQ0wNbVJ52ZjRuQeWwQdJMxGTdgqlEtEB/iyQ/ar+5d8WMLapqoisk5cj3oOCIrVQIL9/P4zK7y4vOa2YT/ADUreQql6oQsvsI5oJH3DUTtHp5j5vaIsVhNIEFCRVAbjXvFcTV29IbT2H4sc0lNdPtlD1VrXuJVGvJQ4alZB43C4TV4VAkjK8iVutH+dhrR8M/iaZ/haV1XThfjF7QtVvVtG+4/teq/wgOOpiGm5ms2rZUB9TxjPikue1Uzuv8Aht5vYxaphB4/FFFByKShqgYrjyCFvn5PgwzJ0WWhaHmVoNE6/mFyqLJq51CRSc8SpalaOqkNvwc47y9n3cSyLIzFZ5x66W/7MjEt4BvH2gt+XCyyra1u2C1InBmKBWgQqnpXfJt5fw74NStUYiQTPj1XhJX8Q0bAloavgJUxK+wNuwLNmw7MepqF+v0tCqK6601q1Pkt4Zb9nHJKWo2EmFod6+cyTNu/JReRVE9UxuvtAhDmLGVM5qQpmhM1pek6YbrnDMg/KIrLm5JLlEw1efYdxb+g8RVH9pPNOIZx9PQ08pHxMagbVBBJVUrQALgG41SM8QtSTyNSybydkSkGco/VNd05QdE5SVM/tbkHBEe639EqOGZcP1MIisbbuJmAfI3yKKjXjdmwYpvHSK4p7wNVIVVUkrFRvu5tu78WKTmpSCNVs28rGv1WbiPSu+yO/Vtu1d9phy82L8PExaYhIuRfRcmQJMF2JHpKq6o2N1RPeCtgkVquzwErbhuTN+IvHIrNvtwtuuG4DVVG7ui8BXYWDn293VpJbeTFyY06hJVShKsWqyCTcuA+vNLkFxQG0hVHqtLxdOL/ABb9aSKw2aVyX6VA9hWe3vDlwOvRS8jTleoVTSqzZVJwJes2gmaQWXfapXiPLz24u5IIpLaxrJbG4at11m8iER9n+fiNwBoim1tJSoc0Ri7ypw+lJXLapInMWlWek4jFw9ZChYIPkj57rNh7CMPHyY+l+WdaRdSQERV8QsCsdNNUlSIem4MfNBq/4VRRm6uIdUBtJK7ujD+m7Bu7F2Za1H1tKZEVAsvwLq97T6i4Wj4jSu977+IMOmMXQ3ClV8oRMMwVp/tP5utsnqcWqX0d7KOGvBxbYRuInBFzCHV/u4+cmZVUP6IpN05frIfTSpXHFOHbk9UxC64yHyhyh5yMsaV7YcS/peuY/NKtJdzIUq3Z6DBsG0mzsR3JD5z2WF7ZdGPntVUk/qOWfTzxa1R2qZ66+4BDoSSHyBaHu46baCYYpCqWPWOfRXOXmyNzLLaKvVFujVi0VlzIlFbCIi6rw5sSFZbnUSZrLpfah3V/l8GImkwMY9nzcnUP3sTVWJLLt482ttwKneJCG/l8YljJV3r1raH1SIWSLDio8vVzZsSaTcLicuEkjv1V9nekOC8dITCayjluizU0rL7XTC8QI7r9pW+7fgR5Cx2rTbh4k/SYuA2d4u4Ev0u0NLZgwR8Czaulll3hPHAFcek/eJW7+U0rrAHy4wdwd90ktdSD2Yon5EtgaRuYbwAbai0IqraDoHQ/ZF5flLGeKVlJhXMKDMm0KNiuwhgWYnyl1aV4Y0n2e3kK7+mzCclWrZKQQBqRJve9sVEtw6pl8WHLDs85HQ8sjN+jMCaJZv0qPmdvL7GHtoKNMOpZa5mGFU5Me79SxHkzVExL5oUGD06eEjqOMDTTg2AlZxA7xIErwLAn+nlTuMyo1gwCnlWJyjRIyGEYCe5xaY3aV93mx9Eab7JfZmoipoep4mv6kJ9CP27xBJeXZmkRpEJAJDpcnvYrX9ZD2TEJprPMa2qAHTR1xtpTLWzVArg26WNY1XUYOTkkTjbpjpFYxqyuanHMyYbGszFEKjcB/wAVtb7OKLr0r8ayzMQNxmgxR4NBcji1e6XBUv0qHSkQ4nJ7sjdmNeYdVOrVs4u6dvTdKptptAgFU1bj26XLfiJzM0XuZUa/amvwZsHCWqkgkuH2qWwrxIOTwYo4iq6aot5CwSOsLDoVgkQqHRlDFEURR4lrsMF3KTxXS2iVurrj0Fgvdmdgslmo4W4NqgKscqdyGr4x6tdUDwExQBq1FEQuLS2a7BJXfYNnIh/TrwWuz9UtLUhmm6Rk51sLgIci4cg70AvHqBLfjmlD8MbLlkK211+AuD7KyCxzDzLXzYZxStVL8GdRpJGmLVuI6XFcv2WKbmVnNX6GZFWRTWYeCmlOPW4iNnJrl5cfRhPJHsl+thnkqYXJ4k44zVGUebVRK67n8eIGW7NfY3mZh9POqAJV89XN6urxT24zM7r+XxFjp5XejDauc9RqS7y+d/aazYzahs8K6jYms5BCNZSjgUmwkHdcvlxF5+ZkZnQmaHqqNrCVbInHRhGmK5c/CpX8mPpLV2QHZDrKZk56VoBJWUlXHEP3Ki8j35lzcnJ7mEKi7NnZjqN0pMSVDIST7SSSHVOU3AAWgA7tmzFrF3ptK8VC/qkgLKKn9C8rX8o8XJTg2jhVchNUyPgiK7YJfcwtNOOFcJ6Tyo1U3BAP1ZIi3n/7Li+ZyUHYzpsKcgVWcPT7pJK0V7dBvoEkAXKqiZ8w4o6zBY3Qg1ZyBLatqqCarMtI93jXs+HZjF311p2skK21jEhpokrZlAYFmzRyyC09pm6BI01mbgUr7OojQG34hHAF7VctUiWfNfg3qGVSRCbcaSQvFRAQ28thYNlEVtRNBZj0k7qB+7bEs8SBK5JqrcrZZzgZGG/3MH6fn+zJOyjqbmcsaWfyEgRKruXTJqaqpl1GZlg3h+pCikTg7ktvzZu1Aw7q+dPaYbyTysCRZvFxWSpmnySEVyG7+CGt483X+LFH7QRvEGeVaKrkkiOgYwzG+269VcrvPzY+n8jU/ZtduOJkMsKRdLaSSGqq1YEdiQ2gNxq8oiIjhhM1f2b5RFFtJZcUcXDtwatyXaxpaSQcgjersHcWHPndgI6dqSFROnIV8u60sQoXKdy4AVxCnnqpd7bq/wAJOt+NBZduvWPYnmlkkUkEycTG0T2fZJY1Q6qPszJJtWzqnqXFFuJigPDxZAkBncYj3uzdgd5oVDQdYUHIUHSExSEQMggqkgKD1ugkJmHMWkReXowY5d2HWyFeYt7oOCSo8XEItY1FF1JID3W5VJVuNu3Z+i+XdiBrBqbWHUWGVk1R0rRFNwkqV+3lsa+D3MWSJehJQqay6xCsi3OxPjHiXT4gKzp5b/hxE1YzjVYtTh36CDhIPtSlHggrtHaN6u/2cc0pXe1XSXx0LYCN/wBFYO4yUI4tpuLnL6uPlxbKdH+12PD9kf3yxXbLaXiwV3Kerm/Kf7IcWqmR/tZjf5I/vFjofk+/1IvCuY8W/AR8S6IMc2/5cLLDuwiX9zHalzRIqJYRIbMOCVt5sIkW7HlFcY4IcKaoDiPnqghKXjylajmGcUz/AF75UEgx7YpiM9qdWf4sRtWVVTdB02+rCrZIWcXHhcqpZcZeABHrIugcZ1zS7dFJU4otCZbQitQymqCCTtyOkyv8o86vy4C8xVuamaEgLzM6SVfJtL9BikOk1E7bjEUkurxl4C82MhfeLaS0NFHU4tZw/wAJ1N3cHN0inOZdc1JndVSlT1Aiuzg2ivDxLFMyXSSC79ldeW3er8OOU0TeuBbSXFki3AEklU2q/wA3df02YkadSN1G8IJthIBAx5h2ifLcHJiSWjjjnBLJMFF07bRVQeK7ebYV6uPzzcLq5cqknH9y/QtvtrdrphbaUQ6jYgI1OOViEHalt9qiC9qoeErBIfFgYRlXz+UNdI1DS6SkbGA8I0C4ZUUmJGW9ItUfsiwWhSYOhsYmSDhxzEKqRAqB9G9XmxAVUzWIRjpFiSkS6EknWqSQjbfs70Cxdaa3Gic6Mfe/P0lVdaFutYitt5S5sQ+btOlNswFnINC0n7EiuJA7ef2SxdrN2Pl5Qlb1HkbWbN1HPCSjgXPg3KpXBZ1tV+g0j/EB4+j+WuYkJmlTKdQwlyCgFoPGip961ceEvwF1/JjvXD19G4tZTpavtfn41wbiCyFa3JN7fsqxKDtwzUb7sSmhhFRDbjVtuQWYdGaiyStxzb/kw8USPCZDgqSDim9v+THWFCE8e0jtx5eFJ44wqQW4TIcQUl4f7uFrbsIiJ4cJieIloVrawBJRs03WVRSARJqQCK3iIuW3FuihqWNR/hNZFBTpJurcaoebDpw4QcyxPF7RZRvT+tcEI/dH72OVXCrpX0rFzdOPxK/Uk4AgQr9TuJm4RRMiNUOJWHeJKFcWEFFVly22kIYcOBclyY8mIJCVo29V3ixTJUl7yi/SkLMStR+15sTVPpIkjrDzXcwliLJJV0oPSmfSWFkRNmWigYp3+HE3dYxVAyU46nkYZFTSW7wBuNMT5sQCtaSj4UCfNBbN19m0riHw7sNnjAFUy1esbufH6zb8fCItV+VVALCHFjTDABIsES2S5Z5Wx1UVuM0zbKqyLhqqkqI8yp27cTS9VxlEQYrTX1P0tV+FVTEd+qHl+bEnlxUbaiUk6+rF+MVCsn/ql5KKJEqkk4tuEdm+4hHEDV9R9mvNKqJCVrfOcohkq4VVP1S1V3GFoiqV4/pRIvhw7pqGourjbVYJE0PdSeprGqLMbYjLd8pWmmK2jZxRR3DyqTxqGxUbCEhP38XPj269trlLAhgG/YypJZxI0z2lZJd8aRiKLlkqSC5+bZhWp80si2seI0/ndDOl7breFcIEJ+UbcK7vwc9jUe4myj4V6335h0fdJRJXLMquXOXsW1mPVy7xEl9JUkF9IkttwfdPELTGa/0yZovfUC4pqpGaSmrqXAPNilt6Wo3N1P6TuJioZCNGxqu7hCByDZUd25Axv6hLBkpmOdw+VcEMJEJpP6WLUQWWSNDiS/SjaW7vbi24prrdb7XbmxMemoIol7+EUVTO1L9WRfo+VPGaSqrcTVbWmfThCBppaEqFGGX+rRcyqZx5FygvzKoD7XMPvYKUPH+irIhpOJAx4V0kCqSgpcuIeumcW8p1anncyos+HvWyiH6BcfsixgGbnJ0qXHm3ez/9UxGpkWWClo+nI2BWFb1ju5t3gwwzHrGJ9Hoik2HoFaRjXBuUFR5WxEkSRlbyGVpFgXIZo+l0JQ0qQtJlqWgq2TD7U/EPlLmwkor6fQoOqKuouXVi2ms9TRVWFTUFqFDv0In6/UpWrKof1UtGkr6BQ9DIVRVERuJyRW7iI9223lxF6Vw2Fjm1YS3W2+EcLenRHf04auOEcRXmmha0ivwfRYH5AxTMzKgc09T6yza5NZ33CSg9Pmxc9X0F6PLiFq+nEarh1ouwCUID0iUC7SV6DHB9ndYYrm3KwezlqVFaLhMELW5ZYdC5SIrXlxH4kjvLDiHFyq6WC8rgYG6StHb9qkP4sOKgp+Ypx8UVPNkkHQBbcn9kQeMS6xw3pVmzKqngLuRHVhnd+4OcBuD5xHH6eacaqGM0dQkuWEJA7HmVmKoHj2HZ08/WEuCXM7iEytC3YG8va+PH0N/qc5f8C0uFg7KgWG4Rtu7hLdj5yJoIg4KxykNhGNo82z3sfRfsCE8a5EypMW2ut9IVbUjK24LEBL5bsCFEDFfKyRtLVfpNP0emwlAuDpxFzMpFFCyIIyTYlOFVG0VRuutLGYO07Vrd3XDeOgl1U1o1toPFUlSG4j3W+7+MsBpu6MVbyDGGvPlBbttS5SNMyjzS/snVs4NOuYGpJyMvZVqlqflagqKWOLjV1yOUeh3Y/t1cRtQQlTUfBuOKYOW22y4h2kfTjTuVsIbOjWazj0BrONV063btVUiP8WKH2g1yGmkUA23vkr7eoP6DjlVXQydF+WkiWstFzN2qboY6R0oAxrBFi0RYpBam3EB/p792DJk9F+mOhHsquFvpdDpIXeC7cWA25F8CFrRVNNYyvJQhLk6uXBtpWqoeUixjdyApJaVqm3pwkdcOWYmt1InR8SsDi+5RazTIA5fEHixX3RraZIidyhnYN34sT3FORTHfcQJWioRW7MQ7CLfcU9lJF8K4ui+qpihboJe11EWM28GcU0sb0CrY1iwYIsWI8ySoDd1FuuMsVevnjm7aiPlFTmLF8eAaTFq5sK4UgV2ju5MDecljEVH0jco3a7hG3df5TxY41Eooeh7Us1MH2jHRibYLRWPvVSvu34kMspFxGJS7wmwqoqukrk+rkHcOB1Ezh1BLEa5q6Yd6uKhcvhHBLoYAdIz7YNnfpW+Xurfw4JZbdo5d6KY1TUGCEla3sybdZi8i/Qk5buiAbiK20CLCTh7HSjyRiFCtcJJao+YOXFUhZv0JpysA8RJXgFwVStt5DH94SxFxNUU4E64eet1ULhNJVNTmG3pwaT5x0Dp/7IEaP5wqdrOmoaq14h+o5Js84cCSWt6xtsI/HaXTg9xpBwbe8OdICIh6Sxmqm0pqsXYlHIrAhHH+kL+6JFcP4saGp1VRWISM+cQtIcbPhN991whIdyTX1jKEWpbVHVxEPPSmLxLvUUr7h8OKWJX+nBeeIA/YKNiO3VSMbsCtONtWURV2kkVhDj9XeT+5AdCVJ/t/8lxfiSiLrIuDzJqWOkUiWMQEMSAxYHyniJrSpYTLGlZCrZs+5aBtH9aqW0Eh9o8aDiC/tWmhJ/m5fEg7RZHa+pFstvMgD20s0EYilSyxgXI8U6EHEpaX2Te8bEvf5vc82Ma0C4Aq+pnSAd89Hjz/APSksWrMyqpKpWstUk2ZFJSq+q6U1evV5A8gBaPu4peV5A/zMo9nuuVqOKSH2zdJY5dZmi6s447uLcuqV0WiFsdor7sCkCTdNEegMVp/lzRkhWcbmCtCIBUEWCqST9MbFSSMLTAvGO7qxaVMeEbi5Cw/iJjqWZkQ7UBe2sCxZA1ECQEV6rS63/rA4+Vckd13v4+p3biV0sgJg9w3v2Q3e/j5fxsSdR1FF08k5FApZ+3YCoW63VVEbvmwwswwzCJJryJHliK3B2VUgb0jNGltsgUh/wBURYxS6A7i6r7/AI8ba7NdjKi6uC/+KRCQXdJfVyxiVwkZKCBBuMeoMZW8+vW74fGDC8jelvSAree0vB+DDpw3bSjVZm6O4XAH/mjwi1ZWjekGlftLQS2lhRMDJQWYB9qVgJW7ywoEk+gtwdlvNr87WXJUfPLENVUfpMn5EX8aSs+ruh9sBtMfGGCZ6RNLZj5+5c5iTGVFdR+YsMGq3aCDWZbf88jDLf7wW3B5xx9FhdRU21ZzkcsLljKtUnjVynyKpENwl8BY2vCF56o/1JzaW3xd1c94ts0x621uFRoq+IMLDonzBh1wYdGPCzPHTcxc7yjSYtUT34EtUVk/ms6W+SDN/wAGxexeq4XFmStzgR17b+QNgjt82DEmhaW7GXcp156U7Xks2l2yBFHuphVVXVK8P0QDb7BfBjIcZVJNW1xseZabhamzasXC5UZDyN1VCNWeaKkYKgepFgVwKncXziOPPMlkUhWfvZWFtAuIJReLQSED8V1vs4Lmly4azHp/I1bCPVIx4/E6SHH5/at4mUV1gqksFj2SpejKtmCCJnqCX0tgCk4aiZAB3brB9rDqPyAZzbrRav6AIm+4vr6XWJdIJebFf7X+Y2Z1JZ+1PCUhmNUMXFt+CVSZIPC0kjJqkR2gXJvK7ARHOnOYVCW/OFJqkfOS6SSpl8Y42zHDDptdmSzT/EjDRRIVrRj2P4pcfrRU452gH1Z0YhsG3w82J8OybAANidGQZX3kRa6qt9/tW+H5sYuLObM4hLXqFmvf+sg2RffSx1+dqvCRIxWp4i/a0zHF/wCBisuDaw/0i83xTTLbC3ZnjfRbpUqxQ5P4sqqPKdx/px5+XCifZ7bJEP8AAjkdp/ZPD8d12517uDTSDBowommQQYM2yjiJbunHDNRQElTSG8rQ2biwvOKmhEulUjJIgSOwh6NuMq/asp3KknzVcZhNBH8wblW2wKhHlvtlCHp3/wCFdXNjlbs+uSa6KX0jFS0xuKcV57dhW3F5sUTtR5t5mZUZrqUxRc0KUYcc1eaC+urpkQ7hu1R8GBIPa3zyb/4ZGK/ynG/+fhu1wbUu6hS1ziNtookS0oeQBgW1tNFvP/1uRdGz9EXXhqtkPPaP1VzIJF03K6vV4Ta+DbjO/wDXlZ/CW36PF7STz/56w6T7Z/aEt/iFKl1cj/8A8/Hi4Kq1AeJGC5kclMkazEdkxLoEZfokEuTdt/ivs4ao5N1ylpmvU9RjZpXaDdL/ADv6IfLZ7+NA5Xv5Kcyso+qp4rpKoolvKOhEy0kzVSE7Qv6d2JeeflFwMlKpfaNGargfcAiwlftBNFlkSbNXA3hkKzKWUuYtve1hVhF5W4W32bP0o9fyYR/NVXOmWvUM1d0asWkWzbf+n9r5MXPPvtBK5GVk1pt5TEzMDIRaUiLlpKN0rLyVGyw0PEkXXgbJ9veGHY4ouuEy/Zuo0v8AwsHN8LVfKgyvzAaSJPPzY1akJGu/EitP7eBuAjv2f4V4L8dKUBNpLEivJU1o32ai9LiWy6277Xw44Ht40oY/8QV0gXmSjVR+Qhx1/XyQroRBqU4gXic0ukv/ALJ8OPf4YrgLSKkN+p+8mSMJUKQ2GdBIEdh2+oRH2+Qejb93CPB1al/hNFjuPcKCo9N3QPu40/ljOzFaUTH1rKSrN41mg1WQpRCrFVILyHvRN0v97FkNi0LnaIl7Q4Xv2p9ookSOarhdGSzlkXG1CWZkfJSzmFJq3SVFIWj9dVXVNrvuSMbLeYbr+kMaWcHtxC+mLjmsuzeNWDZJYNXvE0hEuT+diQWO7HUeD2Cat8S7yyN7dnUpEubDdZXHS14+/hqoJ3cmNeCRkS61cI3bt2PCkZKCAgREfSOIWtqvhMu6XkKwqZa2PjB70R3GqZ7QSHzGe0MSIhaGREqhEnSiG5DntIV+8hoNGgKUktCoKjG1dVPmZx+4VVfIR22h75YznmQrCsHlHZXM4hy8WevAdSOkNuh3RC3ES8W/V8toYl06lW9LyoM6KqbihKyAquEGTle647fq7Mb+cRuD5ywOiiaxqeUo6tfpFcnxDdeRIhHVA7RXV6eUgK4Phx+drvdy4ku5Vn6NuQj/ANl3m32oLBbxoR9YUSc/6/wQ7g6eZrw9WLSUPKvij3QCu7LV1R2EO/dq29PgvLEhGs4pJ1Srl1CKocmgxbXFdY4IQPpSu5r9+CFSdKyX0uzEilanJVZ0la3JN0ApEZ97uEPGBFipiwIYOl3LWpyFw3cKi6EXA6qoatwkHX0qjt6wwY3cM04+H9fMKDKmEB0/n0qrs+Gb+vI5U5pXVVBVxKapcUSo3CAnYRHbv377PawotGtkmsC8SpJyNn8VQIh4VWxx9qr4FfHsLoxconLKql5aWcs38g5aqquGqDlMNiSt11/LYfKI9WId1TlSM2KMIrJS4rG879C4iIzVVFIAEejfdt8GGXWRPaSEiXMm8PDAhIS0ahTb59qtXCTonrjelYqKoJIc3WNwcvRhGPpw5limza0Yu5TBVwq10lUtXfaXejdYA2CXKZHi8QeWFR1K8TkoynqjUFIv+LxQV7jurdXZ5uT2MLt8mczmTh4lGZeZgLyBkAFJJxzoSMDHcG/p3b8fWqwTLcvhNgG9D5nGyTycYmNNx4unbdJI1yIiAQDuvDf/AEDE7RGZczlzJtF5P0lCmyLhUnAuQEhV5bhAefoE/FdvHFoR7NOak/EqLFldU0enFIErwK7ZWyWWHVVAiA+u8bSIrucMWBTsX5hPnzpsrTUoTd6rw66qbYEtJubhIu6vLpG4v81iTjzRDElR1httyQktVZY58SuZEa1jYGDj3lSJIarzj5EWLVULrdVAQBVUum8dIebF7Wicy5RRM3VeR8Qj1oRESKp/6VwRB/qsY1pfIrObLSWTfxqJJLQpJOGC6z1qNquraY2mWwdLdb1bx6sa8oTM1hKUu3d145g6cmA2LoetkCSVPd3qVpcpc1vTdbu58ayycRNPhkVpah5u9/dZi92pto+s0W0uXu/2T5TK2lZJTWqtzNVR40puUXVal7TMCFr/AKrAr7W2W9Hq5RuJhrGqsShLEmrGPcE2Yby33IBakZeazwYJjjO7JZrsdZtUYkXJ3s41H8WBvnjX9AZqZWTFIURmLSbmQcOmQj/DbVMbAVEj3EXSFxYcv3KhFoizB+clVNSVOaMhJfP2oGD9hWU82kXKTqQBVLSLSErkjESD7XYFm0fcxZMi0HjDN6jUXQDqHNsuWwru9+PBInsglpR5ISrXMKnOId6RaAzzUkrwK3lDyDhSkezhm1R9XQdYNTinIxT9u6BoKqo8TYOrZqgkXWI9GM0N5o83US0blMWUvotb19OOhxWfzjU3aJrozQrGIESYwj8rT9rS3+1hH86VJad/DVD7P0ff3f7LGj89W/8A3h+csz5vqf8AbJXAP72PHirxOYMDNyCMawbS4qOL7OJiXSAct3MqI4sl3+LBlNVsVoyYKQqtxh1gouDFe0sUfOzNpnk3QbipDBNWScfVYtsoduq4PqLyhze75hxeCVRbpqLODFJFITJUlStAQDrLy4+d+e2ZrnOmvlnkW5eLwqP1KLQVv0uEMN6tviVIbrvBZzW4HuFT1Vr2lfQ03WHfZVDUdSS7p5Uko84knat6uoYCZKqlvu9/w9A4i3SqLhwXcpKiY2XapkFn+/dhwo/vGxByqPD6QCP62+3eXmO4ccppLKrEbVFchOzakX6W75CvxjxGepadWLLjMKXyrqtvV8L6ElVo9c0rbzLXSPnQ8Nu37mEySyii6mZ1zB/S9eYj5RvLJR6qrXgtUFRVsIrdW2+0eXFZRVWJQVgN4JXmaqYq97eHX5y8eE1DBVuosCI8RpHqkR7eXf7vj9zF4uk1tVbjQO7lPVNVUrWtWSFWymgL6QV11dJLS6RQs9mwREPJz7xwY82CAOxPliBhb/be42j7MngFI2OEy3lsFK/US1Qsv6i6PFg75siiPYzyuA9JMiq1wXl5JHFDRe6WyJB3MfchCKy44G5QbvHhaWDu2el/zMMPFmFvWl7xYUkGV4s7TS/iSXVjXZ4y3LnuUS6ocbKwgbuX1o0O7/OjgzdrxU2vaEqRyhdcklH9VoF9VSH8WA/TbKSazkWbXgxcA9S0iVM7RO4bCLBc7VQyQ5/VkbzTUvSjPs+W/gEPlvHC25EJrTcNCQST7LWrKazIpOHoDMtzIPGsE4MYnhHApOO9/RXHsMQtLbttxT6iquNjYOSy3ohFePpV6/CSdJvl9ddfYNhEraNg2JXW2e/txC0i9NCaRcmikkRqpKikXQYKiR2kfIXN93EO3Lgk25rtiXRtASG7mDxf08eE+aYDFavIalJdNXSKoqNuJQUK1Iui7m5yG7Z7XkxU6uZrUbUDGv4tESJuqDKUSTb/AG7cx3q2h1DaJW7sWxRh3Y/ViLaCRJqt7h8Xw45JqtatGqo2tTSNIh0CG8LSEx+Y92PrTsCUiGavGT+YIZc1dD1nDPOMpmTQBq9tDaq0tEdo7tw8wfD5Mayj3VPSmcjo46bYvOIo2PdNxQVuNVobxfvR8vL8ePnXTIrUnPKUA/YLlEybw1YFch1Qaql+gL8HixrTsp5jIxtXSFDVNqgMk3bs4QlDAtDSNdXQHynrmQexgumdyiyi2kg6kc0c3mR0IlsvqsRr9g2LgVRFrUCCQfat+hX2kjK72L8VnNRWm6Plk6hq9+TOLnXTjgHPKkhYqqqBFuv3gN3JZiazyr8KFjWNPRJj9Jp1XSZjZdoJX964LyiAl8J4wnntXkxLzElR8c8VXJ86SVeLrhruCPSEdISPkuPcdnRsw1uFtG4UcX9qVU1X1d+Te5Xius5Kzz90ct8pWD5CHbtf4UdiFvGWDvIt1+h4Bv3bL7eTA9Y5AVm/UWRYP1XKl28bUr7/ADWKl/TkxvPIKlaNyygE6YpZozSdNGpFNtk3Ii6NUULtUi6xuV2e3hj2gMmpLNXLeNSy54xpLR8iktxyj80l+EIVdVIV7riEVbLgPlsxn2K1qlc6tTDERRbmJO9o6s4dm/sxStR5mNVqwASh6fEH79Ikt653d038ADt96w/Fg/8AalqCpKwVb5D5bsl5CYeJg/mBbK6QIN/0SS6v6K/m9kBxdqQgqd7MWSLheWk3MipGIG/fu13BrqvnpCNoiR7920AxVMh4SUeZNSOZFSxjRtUGYKrh/JP3qpESt5Ek3HypB3QgHgu8WFFwc66ZESNpMcjte79pC/LTsoVFJSGhmW7cwib3vWCkcqg7Sc2heZat39LT6MSNadluQClY6s8s3cnUDR+RarUrBXENxJENm0vD7+CSvnNQORjFvS9TOKdjybqkqgPofJIIJK6WkrpX23ea0Lbjx7KjNqJnFGkfCPYx7RrhfhfQoi8FdJAyG0krguGwvCXx4zxXS1hgIFgQ4Fplq3fZTnrV29eO3/isg1HTVTU0uUXJxEhGraFpC5EhVMOshv5/avxGx6SxtVNVnb49B1d1bTPwc39OfG0u0Bl4gzyqqhy2p5wglBNzfxV7xJyg2IPtbEj5R0rit8uMat5mBXJZEDXJaMZm4JNcDIOEAxEyHb0apFz4JGmdzcpPKW7tVFMT5aYqj1lPPBUKHauVbnFiq43XaQEA9wPgu2qn7gdOKeJd5h04egq6KSdOUBWcGbgrlRHeeGrVDilCNBy2IUgVVVLXDaAbjLHVKZgaVoWhXD7lXO3CpJ91SkSRioVpnd02+O0sTAurURCzDFizNqs1WcGla4SVJK0wK6y4fv4TKZh9MdWVjxvVNK0nQX3hiRoYSU1F1KtFqLAYE5j3oaT9jfak6S8JebqAukxAunE8TNEWrxg4m/XSekb9hICGgRMj+y5PslR0iEx/WpH7ZD1SZhLhP1qxtvs/jA4vVLy8Or6pgWr9BR5dIJdwQF9XsSXC7r2aTr4sI79TdYppcwrY8I3UqWsyCLSScJqogio2erExUSS7pQnVoKhuHbu5h+D2sWOIy/rioGpStK0nPSrO8AJWPQVJuVp97byhbu3+/hllREv60z3pvLSbZy7aJkNU1RaAbZV0kAXFeqrbeltH4sb0zMfBlw7YVg/Vh4eCgUkkkVHUiba0bhtAbUrd1ttl277uKNrIHMc2rfVl4xZdymNyz007IFVSbCPdM6piFFHSSroUSbqiRKhdekdw8m620+ocA6saVrClPUs23YSENUEY6Ao5dywVQFVX9VcY7xLlxqVftM0XVdRxg0BUsB6xjSV0kE5hAlVwMrjDSu3bhwZUAj82qQavZCKcP/Sqlwsi1FazS2jeJJK7Fd1xXF08uAArKeodyqfEsHR5SEtQoUrjWUjcqwZAX0UOkypjti9nlwwXPgnzpIUlxXG5WMk0rt5WeE/iDHzErSl5Kkph5DzaJNpZk4VZrkW4hVA9+kPhxuOmn7fsxdpB3TbP0u0aQq18DA2ztUe4cGA6Soe93W7mtDBMzl7OtKlmUj2hEE2JKA1BKUQcoaokqNvDvEujVs27vIXNjSW24FSyLcKSVtIGaI8pbViak8is3XECzkUsvZfRPSSDXEEjVMhuEQA99xButxB1hHSrBZFg6jV0JJkqqkq2X1UFUD27CHxe1j6T1E6hVfRGrOmEdG+n1oy9cuXzfhtUUru9IzHeOroWFdz3Yzd27oun3bOla9/JHjLy7mVZLuCSuFw3SV7rn5rBK278NuBvOXWndW5WUZwMQQzyFYP29OqOTZya7oErST4Bu5CzcW4lSEwLm2j8WDE+hmD9GzhhHi7AEV2CCVvL+1v6cBfIVWN+iZM1WaC+kZjtVSSVG24to6RWbx8eCg3F411HiUOulq2WET/SPkLfsa3+x4sZS4SJ8iW1ptDQqmusvJKMqaSm2ErKsSdCfHuUJEmeqYgVl4pKiAD5uTD5FBFqmSyuYUrw+klqkNWutVAyASMB7/fad3wbbcXxFVZXYATQ6RnYKT9fn9xAQ93kxzpTzxwPpTh5y00tqYqurL7OmxL2vPux9KsdMYyUhaalIhQ3qA2aqLdy1zImUxM7CVGrX9xe1eqXv4/XLNo8eI+pq8l+9Ez0xraR1T27ORXmv+LBFdw9XsfQoDdvUqYqilbpC/EhPS39Pjw0Up6rBjVln6VTktpFoKE2dbLd153kPLiOFZUAO4lLLpzLaqGnTounSgK1PUgpmQEJfSqUV8JcvsdOJN1TjNgpFrMJiZSFqfeqrz0jc6Pdu6vi+TFsRi6tSFRydyqfdN7XMSqVp7R3CbofZDz46cRtSMNE0jFLvTNXQidLrLcX1qy6wS3eDFWNVUY73VImmJaBUG8QWVFFJCNc6JpbbZ6RFWwwHp0t+zzbuvEe4yyB5UAzbyESXfB3WonJPFXSQAO496Vnu34ePmtqiaIvGa+w0iEWqSVx3+E19heXDxZm2V1DftohWHSQMhFRk1tG0LjPm813lvxU3Uk0elTdYEx1qPRy5h3ChGrTcuooZ3n9aeW85eMt42YYusr4QRRNCmJVUbe917yP/a/0txYijoR4peUPGXJOADaqy732i0vNzYblEQ7Vuif0egRsSs+1ZiZfoubQ8e3zYsKpf7xKoWG+6odbLGnnCyizOlXKRJKhcm5SAhIN3L3tn9Asw1lsuaYdJizVpVszT3uFSQi2oqiA/wCd34uybKESJZFgzQJTiAEhGUQEL9whd3HdW2q+zaYhiu8BCC3bv3CLbT4dVW4ZZIQFKy4y/iuzZi8al/vEo5bfdVfiaSpuGTsaw7ESsAiXcsmt3IPMGriwOPTTDpNubp5TiCgXiIqxrdW3eW0fB7PvYlnTWKVuWVRQFT9KKkokhae2wRsQ5t3LycmFHEkskIn/AAmgsZau6XdWEF5DcJJIXmO328VERmUiVoxDSKp841o988R1VqaUEw2qqNUrys6rwEvi6cQ6kdR6CggwYQLZ03FIrl1VUrbNwbtL5uq/BIkJl5GrcYq5lWKaSRuPrMi6G4AtvtE0vMOGa0vPKuOAeTySBByFxStxGdvVd47cWi+6C8QietDGWo1nUaLhswh4NImX2qrYlRuPVLcXdeztx5vSr9KPaxrBgS6el3RNl3RWBeV5WW/MOCFUERPG3anJSqS6bhxwrctBxtPVEdt647bywzbsG2twco8ZrulUlTDTa7C3EO69feV4liTj5k3FQEQlJVFOgVkEXRuo18utpbVNdwJkFwlyW7MKUnStSU/OOnMbAzkYPFWESjVJ4ZBu5b+T7mJZxTVOPAZgq3hhTMUbbYYdUzVSFW67V2bOfHKbWkIdZ0sv6qEY0TXO6JERSERuLxco23j5xx9bfLKhgpEISUgxianFjoqxUuSPDmQD6rapHYA7+cvKOK/NM1vUqnraNfcQBWldHMLLNvMWrv24lk0qMakTR/MRCTi0y4ZRJqKu26/ntv5evlxW6ikaQ1nB+u4okUkAIC4xqKvKPTaVg/ex5jDGW1TJbWUSsp2PtDkYNx2jb+iHwfgxaqbs+i8bZ+qL75YhzQRGn2IBuHg0rSErrgtHE5EiAU6x/kjP5yx0jyfj/mDnhXMOLS9xj4km65sR5L9GHjg7rrd3j8uBDmB2jMqKAWJhKT3rB9paotI0NcuXZcXIGOvk4DQycKK5sDZO6WkTCVu5d2KjX2Z1E5aR5SVZTyTMbNiA964V2bLR58ZFzG7alZzymjSiP0Vi0huItirqwz2GSp8l3hAMZ/lqmkp508m5J4o6cOL1XTuQXO8gO3q8JeTmOzw4TVfEDTWlgZJ1TWEi1PktQZjdtebVcLM8toEWLUAtVeyG5cdu8xDkC3m+/jK9UZjVbVTwlpGYk5x9deSrlwSoXmFt28rLvwfBiBWdLSJFpIqud3ekW1KzmC34vN0e8WMsctDSFvMVQsmInpaHSghdyW+MvB7J+2OHvPEGQOZUl8lbGzWPrBZdMKRy9yxeAKMrN6aqjgbEiTO4EgtutG/nuDBaYwjnh7DYCrpCCTcSaoK2h4LbiMx58dPmbYiTihRYoNd4pFqoCZHdz3237uY/Fi3I0vERkSt69cx6IjYCpC6QG2zq5f8Adxxu5XXrbuY4W5dbttCFE1liKrbWmji1G6zgUo9T0j3SarBqKW9XYqN6tgdPht39WLCxoOpIZQlRpBySxkAFbFoWF81/+7iu1hWeVSNNyl9dokRt7dBOYElbuYdukXw+9i31b2zIBpIqM6PqCoKndIgdugwQZtfISq5jefTyB5cG0FqqLoyRHp+ShbleRtroiAyXp6i6kkyReOqMfE3subj6kSVAT8Jbt/8ANwm3yZzEmYhZwlQDsUNLStRiUm13lELt5W9Y4H7qrc5s0maiNX1m5bRLqwzj49XhklQ8JEG8x8uNZ0Dkk8maIpmVPMioUnHoiW9um/ebQs6e/wBg7Rxc1a6an7IiIvClj/EdSAyERH+axzmDQLxJtIw9Uw6rFXQM7XcWSTgfNcZDtxW8os0K2yKqhmo6cqOWpnw7Va25KTbn+gV6bvAXTb4OY/ZnhVripZSnZOcl5b1au4YtgUdOitGy0B5S9rmwD6vpgKi9C0E/RfIWb0ktJ1ckXlG0Q24ttl16u8TbOwfnCjq239bphdcjIh+SvofQddU9mTTqNSUysqTdUtJVBQLVWqvWkQ+LFk0ALnDHzMyLzmrXJOv04WoFiVFUQSWQVStGTb9AgR8i43bPFydWPpHSNW09W9Ptanpd+LyNd3iCghuEx50i8BAe0xx3Kz3obi1AvWfa9oVxe82Yra5IfVknSjC4tgYbkyAejExtwmokB4ei+aR5QGoNRmF2Ok2+JJRrhHStxbnzUchMXDXbhiSFuJhYtuI1fFrbiqfaTW3/AC4cJ4Sx+Xf4sXEqB0LD0ZekwTaPNclOdXV6lS5uXEymJ2EiIW4ZpgAqWK23Yfa9qJeLH4ffOZSX6md3JMeUt+ExSMrfu4/G3MQEeH4haN+ByKHoUExJr3wmR8mEdACcCZCVw9QlzYkLNxefHVgamJZ3QoxwTJw1tSLZhnCJLFBNPQB2kaA4lXQmLRRbwgf3cNINI/UbDfaRtUi3ezi8S6WflKQ7VYKJEvXXoo5ZNJ5DVO8bg8brltBwldpK8vmIfexm6ci1qZq6UpiR0iUj3irBUtpBeBEONFRTCSdTbNKBAVZTiEjapEqCVyoFcG4/ZxnPMaSWma8qKVcI6ajuRcLml4TM8dQ8nr5VWLjRd1YfisApyF8VX5ZUPVbxEkUBLS6UhxbG6sbG5WxblJghrOJdUFV9Iby+oM9t3tkW3FPqZIxaunI7hVb3ji0Okj/NfCno6aJyju3zWNWd/wB7HR3xEstYfY4SnMq80FstqmF+LlX1O72vGyHV4Ct8QY3VlrmhSVeRaL+LkkPrQ2ARDbq+Uh8e7HzLU27L8aKyprBHLvs1vqzGKSeKBXnBq96SSukbJIjtIOrlxiOPeCWOJqEo6XB2p1aLr1csp3atOJwa0PUcnQycktHNJFIpGH09oj+tQ9m7d7JfCLlXr9B45aOHJEs3VNI92FK9rd9XdKxshDG6SFggD5qS42rleFxCVnl24h4l03kmoum32Zjq4/P9PQOshiT+7aXiH8frXUqfAybzUiVPR76ZKZdJaju0bSULmxNooIkmOgagj4b+X48Ipqo3arq0bLN2HA3oFeXXz4teeNzomiZEvWuB5rVPlLDclGwqWK3p3eLlw+9PThNTfaBhcOBRP9aqSNoEN4gVvlx1yjf6QL2sc70B7jl8OPKXrp2XkmR4kvEmkxDRsy24aUYpuU/NijPsp6YaulJuOeOY+xq4bqjfqpWGNp8/tePBFv8AQIbjxW63h3k7TbxmwXIVTDYIlzY0dkutZSvCy08TYkXyfm+8l9bSMOtERNyJBR4KLJ4QMHhOW/JqENolje3Y1n06N7ME3UPpRuJtKOFQTLqOxIfvYwGo1eNVFEXSJIKBzCSVv4cbz7NVIvJTs1MYB44JolJP3DpUbdxJX7fisx2e93DzbSZ4lIuXxdC55g2NQ4IuaRkhfKysjOybuXkVvQo7dKmqqXo6iLDIivGxId2NATGUeX1OMFpd6T1QUEjV0VF7bvgH8WAI8VRL0qGkAJiZmVvhx+eXSI3SkUiXUKCsaqA7AdIooZTV5Va1Ruk1pxYWTJgZCj+TulVbxEPvYfVtFVHUbtm3XWFy3cSJq3KDaSfdEVg4qmWKqLCeh6eNYV5J7GyEo8IR5QE0BSH/AFuCsiN0pF37frXV/JFj9A2HgukreCiqXx7QSIhLw/d765XcuInLfxc23TbSGMf+SGL+nYumwUfvI4pARO0dR1aBH0laOIyk+LKcE9ERG5W1P7tuCDmFAreo2rzWIkUldUhHluLqxQ4t1ZMMTE7frCQB8WPzW27nFlj4V01p/NYIkYINBZ0PBugHTAt/jwpONXKCaaIhaWrtIfBiwQ7+nnSLpw1eASgLmCo2+DDZ2+F4ZH6EvR6fSB3CXVjbW/yaXm70wuUjJEPo1cvpWIrOJ6Gjfi+5FftUegFxasBPaA3HpFbv8OABmzUCkO6GGaPdVE+9StO4hPwFgm5kS03DUu6kolsSjwzAAIQu0g8WBDG04FQN1H6+18ycJGTkiu1Uj5x+XG68pFps/DrNHa22RzhGROdG78fShfJ+/U17r1yfc7MiiI938F2o3OlaWatnjceIe/WCLquLp/DgmZTAskMkbwLk1Qal7O1TA5zJQdvn8fIsJHu0hvIbbhLzYKGWy4C2WSc/bEk3JW0f5XaWOLutkOOrcUlv67XTeJV6pfSFOVo4eODIWrhqaapcvLuH8XxYHaMvx6yj8G3DC6VNXTErrcEXPFJt6KcWSTWteOu6SL3h/BgRQQmg2RSXMiJIbdTxYsbZHGnmjLZqESRpybmncXIvRQtVSVFIvSmRW9XN8w40RTjyPkGShtOf9KnbaQ4yHSEwrHTXocpl3aqBoEJfpOofmEcaDoWW9YJi7bK6blIrTT8mNNw7dSpXRaPUKzvE9umefgiYAtiV+0UGzxYH9TE8ZzChjGqqidm5Cy0sES0HjQbg7wN+7Aqzcy2aZv0s6pb0TbyPkkC4hi7aLmkaSvms5hLlx1m33eptD/ZlGXMufFRsVml8dIpdN0/4hFHg1e+2bh5cCntFZKZm5zKMWMNPRUZTsUKromy+qSq7i3mKwekbrPaxjGYVramJZ5ES1T1G2fRq5oLplKOhISEva9nDhvmDXjAS0q8qUSPZtl1yA/mwyuT9ddCEqlyUfZTakt7VB8GGKq89ELTMSpGpAk21bDEiK6zEDD5bz0XIN5VhVRM3keuDpq5bNTvSVA7gIS8QHiWj36z2acIiaosY8Ab22FYqqfg9j8eJb6ztsMVbD5SLBLVS/TjlyRJMNVBSJXxhnT2lYwkdPtB1AYju3tUi+/dizse1B2i2ujxGckkqJn3qq7JgICF38lgOOl3lpWucR7pBtMt+AlkddFXpUMyED9zFea+XMp9TY7q+k6uZlC1ZAjStaVJB1YxM77pJ6wHXs6iARSDb7A4jmsd2aWrpNZvlpSZLJWKpLtl47ad+whLXHrx80VKVhNQQGNeagJW7Xi4mIf6XHXqSNEVAF5NCRiAWjIq32B72IiJCOlwkCVvAveFfSmqpTLiiKQqJ9SVEyjP0OmCqDhOL4NyO0dpECS5K4+eCeiIjrhu+HDdF7KpEnpVPPKEB3hryKpb/AIscpqra2+4iDxYkREe5F01MNOOlPE2+k42APKHKqPJjpFXvr0j7xLq1bbfNdjlEjbjsuETHwc3LhnJL8KzUfgiJC071dIrtyXXb5rcfEUWhSTd48aoisktcnaCWmSvn/ptxp7sj5sNkG8hkzVdQpNBCx/S67twNgAe0maRddhkJAPgI/DjKokBEJoXK7L9u4SDmAhvHl5cTFMv3jOYi5hByAuIySbySQrpXBqpGJbtw7T8mIyINqofYCoCK+nzNg5dI8TokkV5gSfhPd+7hwpGyDcfsSL2cY9Pto5tJekr42kbTC64Y11b/AO5WPJ9tfNoiH+CqQ0/F6rcf/PWNQ3xvVgMSbFY4uDWpaSWxOHch6bODUuv8GArTVL+re2JOP0mxJDIUyDwhIOvuEj+782BGp22s2udBhRl3hKOdD732+HlP9puYqCYVqmZqGIpeom6BsAJtDLuUnTc9wXj3tm4R5THk8OzAFy4kfujGQ6Iii7fw6dA7JvUtnElhlLIXJsA/Lzy0f8jpIsZV/rqayZqEirmjQ6pB1OaSlBL5CwqXauqlf0CK9c5aOUbgK0qclBK7xb1cZZpsAKUh+cnx0dViHqy+aoHtR5H5rVrnnVlS09R759Gu+E4ddLSsO1qkkXVfziWA+XZzzgSHv8vZof8A2e7rtxor+uqnm+xCp8t1y/ViwfpH86uHyPa0eG1E/XFE6xkY2i4eJD86uNMxe3GhjpWff4YN0pG2SyutkPmvaP8AwdVLvs/9ULl4vAOIuSytzCiI1Z49oOo0BAbrihnQjy+zjYzftTrOt5StCq7d/wDDzpDHTjtJmSZaqOXzpPlt+lqv48EjxLU8wihv8LQ5SWkWSAJwEAiPREtw+TDCpEjOBeAP6rAF/rrHLVEbkaFJulYkJKVaHWXLcftYePO0jKumazZWm6XUTPaZIVUPylpYzT4k6/mp80w60OVFCftqtXL3PN4aDZVQUo1olcIlZyFjPowL9UhA0ecg+fk/FjcSPaPmFe+eUxHOVFea2o2RF/sMKl2goXUIJShC1LuVJ9Fq/fEcaVjiAqcYxSCp4d60UjWDiiHlpGYDs59w+DCiKWhdqmkPveW7G9Bz2yxV2PctH2pylalEKj4f144TdZm5LTIkzWyrcqCfiYMC+48wWXE5GOoUEPDEO8itluloZP5dtv1VKxg/91SwtWQmVGzweOOdj/qixREc/aTi49rG/RKp0GcYgDduKDBDSFINoAPflftHpw/ms2KcVYvIeUp6rGKjhuaR6kMqrzj+yu8WMdU+6HycitKwJNNxJZ17eBcRnY3bWEXCU80H/WrljMazM7vsVebwe9j6GVNVHZ+rmVUnqygeMkNIG5LuaXf6tnQP2BeLEQpBdkxcVL6fNIQ57YSUSHkt/UeDGqYvYtDtWXq7IVQUpLACjUxIdluHTcbC37cbjWpbsaOt5t0Q2/pzlkPwjhlJZX9kV0JcOcY1WLdqlOSI8/tli8eIGu6hP8POd5GbJNvwuRNAoiFt8WCvx7vxYt1v+XFEpfMbK6maUh6SKuINJGFag1Q+v3XpAPnEfDiTHNjK4uXMKBL/ANtDGPuBDUPk6K2NGJNNCJKkZlV1N0vmbS8VJVZCQMLJJPrV3YCIkYJCQpERmIXbSwonmJTCqZGefdNaZ37knTAfvkWBR25J6j6ry5p9zCTzOT9XzlxcMqCoABt1R3Yximq2ElFjZiJAHMNuKovx0uEKZMMNuhIhX0YLM3L0kf8A9JyNTLxJP4v/AMosN1M2srm6Yg97T7NUuq17G7g9xDHz7TXWJPdzHtC7HWqsRWCdwhsxHKfLc8XzsVf1Nvu/Ut+LZ7ZFpOE1nHaBVMQH9Erzf6JLEZIZ39mGZcI+mRzbkHyaQ/YXvySIvEQ6XlxhLVWG5Gwtm8Lse75Ur1QLwbjtHECppjEiL5y8NKI7Vup5nn2ThUFFWvnxJmBBamzlLP8AZWYeMe0j2VGbfRQzBkx8ox0sX/gYwLxSySY7OT9aR4WTXclaBArafUJ3fhxQNtYDaK8VLPcS32j2pezOPosSr6eItgj/AAdL/wDlY8Pam7OqWxKpKpLb/wAwkh++GMBcU8LTtRIiv8Z7t9oYcD64EhAma9toKiNh7kjC4PkK7F/UwXupNLeS3al7O20Cd1Urfyjwr0PvkOI1HtW5At9REGdcEIF1CqV3+v5cYfFJ+19OsuiuKfSVpWbOf8OOnTWYS5kVxsMB3JH5dtvvD8eI9WaUept+0ttq9rzIAR2w9bqDd+oP/wA/DBbteZAkmX9p9Xqj+3Q/fXxidQX7fTN02VET5CVC27eV/wB0se3kns1S3bU8SKkYPlUsKMVs1TtYZGbjQywlVFD2d4il+/hNx2wspEhFFnkwqqO2270NRxjq3d1ctt2FBQci4GzbtDSEUgG74xx96o2pdXBanddtamG63dZCtNPpInjcS/2WEh7cMPaNmQ7MR5P+NEv/ACMZt+iFQkOsLNIkz5y4hLZYqKR7bvHhEacnmqnBk2SGww2k4Err0iVD5Bx8FthfcgFpFbtxrlaY5HRBJhvC6bu/8DDlv2954uTKCItCz/12rt8v8VxmX1NKgxTeECRNzbg4Dvd9mlq/cxLFQs8AuPsO6VVSK1X9UkKpkNg+bZ58RyKYFLq4GtDKdvqp3DctLKyGu27imVSt93QwyU7dmZi12lSNHtS5h1uJVt+FUcARvl5U65azdntuDlu8vl83yYkm+VlVKqLGbB4gLfV3E3VLekvoeH3vYxLsA1KPVmu6iw47b2cxJ/VYSgDU/wDiW8L/AOysRa3bUzyXTsSbUOh/IRLr8brFJj8natXWTRVYPEhNxw93BKlbzXl7ltvvYUjclKzdERnCSaShpN1beAOwTVVITH3A3e/iJdWXhaaDatCdlvOrNnNfNFSJqp5AhFx8cq9VSZRZpKqntSALzVKz7W73ca2Ebi6vhLHz/oVpmR2e29RV+zYPGbgY1u3QXex1zdXVdNRt9ver8PXyYrI5+52Lk+WXzIeJLO1TeEgTJgvaau6wb0i2jdsG/YAYfW+6jS02XSDqkk9bbCqn8wi0rafaKo7NOvaLZ0flfwaYyDq+XXcvOGPhwDYkO0uY+fyB5sYxzLyVrXJgo8KpbR4lUHFmkkyeXCAJW3gJHZ+tGz8WElM9s6RG9LMiTErz2iyZCey3l7jFZq6uqtrlRN5WtQuZzhGuklxJAOkF5EYWgIh73P8ACGIv1L9UUnFKmpuqaR2qH4g7RtNXmDaQnyXjy4Rt1VC0AS4i27SLd9zHRCFyyIAhpmqBpbyG7lL3C5vgx5HmIHACLhLeN22479438nmxNXpEnQCoJqgkmOy8dXl2/ON+OWr9tItRNALRbrm1MiK61UNK8Lg5PtRsLkvI8OBXASTRdAQomYAZDz8l3xYp+V//AKJ33oK/wpIEG9UQ5Gd9vl5b/DaGLAGQkSrlqirlqgwElgBVVTZYlqj8Hy40nlX2q6fo3LCCoqqsp05BaKJUrlHiRJEaqqqoGleHhLy4zY41icJn0qpXq7zICsEuazkHzWePCNoDdr3CsABeRXDvvEb9nlxQTc1I2gPethpdsWhFLtDIxiJArpF9ca+bdycu3HvT2x6QLU/4C2dyRGNvGNbthiN32XnH5sY4ROxZPiHIkWudqqV3PuvH+V29WzCnFLd2d5CmkkZAuImQ3hbf7u3FXVgUeqtd1a//AK8qgdEnIZFx9oJG4AhdNegyHb3XNtu+HAKz2zLh8xKucVnEwKkaSqDRJ02dvBVustEFRIPdD3TwO3CqxoqGqi2TFokaoiuFwkHMdtg+AcIrKtiTWtAbjMBIu9HZ0bbcejBSFhprWKnKdlEUpAnL1ZBmm3A1SFVwBbLSK7Z08uIOHkmczDs3jULmr1LuvrG4gBVUbvavEt2JBMmYx8wsqCFyUa4biJBaXeoK8pe6OKrQKQJZa02saJXA3VK4beTVX5tvLf8AdwSLXZSX2XaxVoIVkhG1Yd5XpCK9wDy7fJzdWHQka4o2n3hpfoiAtgDvH4LsRpd1aDhEh32be9tPbzfFh8iTbWR0nI777dhbTO6+6zq3FiuKsVfzAjUZSnXSxPFRJle9ZLpqgRpGBWgQ2e1y9N2NH5Xdk2qa8y8o/MRvm3BR8lMRLKU1xbnqgqY3dKvMBH8eAMskAt7FWwqlaYWkPvbS+HE5H1RUkQzRYMJV9Hx7cjSBBs6JIB3dNhWB+LFT5EQxFRMD5CWtag7PNfz00+q2Wzlph5UThgLBu5XZGKTYLLTLSBXr5j/DjGmcmTMxkjWDNF7WDSpZB63ORJ8gkREKuqQ2kO4zIrdg4i8wqyzI02vquenib2HrqJPVfmEC68ClnnTU8DVTWblmAzwxS6RiMkuqV1nUXe7y3Fz4f0jtXVtTcJJXmG6cl9Wcv8rqtmaMgZ2tHlPOp51ZJHrxBaqAHv4e4yE7R5bSH7uC5DxRQsOMeTsVfrKrpVUQtE1VVSMy+Mixk6le3FU9S0xETbOhmlrtqBHar19eE1O2dWzuQbxSVKnqOA1QctjEkLPMel4vLjCOkIOkXMnw2qsMBKOlV7ty5g1NKVOyo0o59G0+ySJRLiUCH1g7utJUd25Idoh578H7s71A5YdmGMnkXZLrN4G1BMg2d0kReHyl8WMd9pHM6oMx3UJMTaLRDgklWaSYrCd95F3vKPg8GNUdkpq7k+zvCRcqoCHocJO/QkmZ3EuyvXEi2eVX5cHsH2YkpXBg6elFo1iiUpkJdw4nqgWXkJJ7vVcrncd/7uOsq5RzQOY8Sq1NROPmHiUdIpie1UFStA7fEJEJXYJVSU16okHEI6R4NxGKm3VEg3+17OKvH0WdR15S8CwuVWezLe9JPn0ki1VTH3BLEHqRuqoSbcHTFDtvutPiQrcbyTfo0ZXLeZklXKbKGGRASEStCwtWwuboL4xxQu0FndkvUuUlVhGuTVlXDI27RVRirfeaqQlYR+jbutxccxHMd6cuq1Wi5ISkEYn1cuiQ2lpGSeqqN/PsuxhbNQuCo2Q0kdLiHjS63cF/FIeDk+yLn2b8DUz5A+yxu7380UNsYq6aoqi5fwQheCBLbER+HCiYot2ayxIiSjsdBIiAdgBaRl7XIPx4bqby6uXHlnRq8/QB7bPEd2OoxXIZJ9DlpJ7e6EA2/Nh9rmVt3LiPjy+rrH7GFhIMVEpST5Pm6ebGleyVVGWtBvqhqGuGCBKWtBYFwYLqpOO9K4fAVo4zIiRlv82L9St6rN4ikYpLG4SJIi5LwFXn+LCi86KQiWg4daGorRaLmWpGOc1AZ7Z8UG5o+SkF1qci5sl1Hbfhj1XHBiGlfzltVxWe3i6c1LVtN0e4RTUiWTBWSFDmSIzVJAdvlFIv9LjPnYzfSDHPqnJFulqNECWKRMdooMvGXl2jjUna3pc/TOQ9W8Tc04U2WoO4LSXJVuV3n1SH20sZ+rIQKS2LjYNOiArGUhlzTy7ewmCDZRLcJIDaY+a7Gp+yrXNSvcs5T0OZNZaWpV4bd4qX6cGphaRH190vbgETDBG0jBYiEOfGkeyRSTGOytqKeqRZSPTrWUccCouhtJIiEdX2e6wtrQF3ATPl/JKxt0gEhVQ7YcYzks2qkbOrBGQQaN7rguEySHSIfNf+DGluz87rWaypQpDOejZRpLRv8FulHaGx+gPI4H/6l/mxlvtNxgTOZDxsT8UlI/1eug9TC41TQSSIVbS5xvHlxfGva2zYWbCr6I+I/II77m1v4/awCFSDTjniJN6q31FXTMC0PKK0bD5cSVOqJox9auV49tqikm7YaqukqVxpEqBDeIluDbePiLGJe21F1DHZtt2MzVi7+JGGE4lAmqpcGBEWqNwFvMyDm6tmCoHa8zHJMT9DCGIfKnjOHaVzcm6+rH1jNgk1dR7JuwFNEUhGww1bzMy/a9NuLGDbIuyQbVuqqQ81/annZ9bor0y4cun7YfrlhjpKkZeDkLZ72DYL9gqstwqzNJQA737Wwrg37dUf52Az2YyORo10aRuQ/hExSJMGpCWwfGV93yYMjjhkieAXrddYAs5GX739OjGeuA+6SWqpjE2hUhx7AXCMqvJIF3SoEqKqqQiYXCe0yLlS3c+KizlKSaupL13UMVaBG8EidEKuqZ7AC8ugCdD8GCjQuWeXFZ0ZUdTVbTMbLqU7eqCj+LFySSVl6oikkW8itxQoCpOzVLyScbGZPs0CV1bFXdA6aV4JEqW43ngEsH0lqKqazUpqbwDDpNR2qF/OLlq6YuG03UMCi6Bgkh3T+1I1UhVEuYuXug6sPHmZdAJNZJZ1WdLq8KqZaAyKXepHaJhzb9gljmis3ezHXlWQ9GU9l1GC8nXiTBqS9BoClefjPjMR8Lnj2Y6mnI+Bjct0iWk3iTNuRUMgKV6qtoXfXvGXgwT/AIfI+8hivw91JwtX0M+iWLmSqqmlFI9W9JIX6W7m3lu3kLhVVX/NBiahwgZtuSMbKsXzq4A1GzpLbstDnEg2t+65P1uK7UVZZFBIFDq5RJNiB6bLXGkEBAjut5zdFtvxKPst4ihq6lImBp+n0iJq31SJgqlqmKqtpgLe4A2eLEq6ydVpifJFUN3607lxUks1eMG5aUU8FwleO5VBVIt3PdpX/jxHzTpmLMpKRRbRhJDYQvlxFJ4AiRAkJbbCK9UT8hBhYmr9V4JqosUudXulZETIzLnM7fmwQ8n8pqcruclWFSw8K6RFjrtSXQXeaSokO+1wNh9WEFK1mui13k3rHxpGCd7qEbSu8uGrwlnld00aLsNcrpFC/VtFLcN3h0C9zEDVWZuXwU+8Rjq+gV3TfS0hTXSVI+/SV9/qxZW+deVaVRNaba5TSTEncilGi5+jMMKV5qiIF1FbuxGz3aiy3gaikqYQomcJaPfqsNRKGhkgIwVIf1V3TjRDZMAKUSSAr8mLrN7LJuMsbKtY0nCq+qKmqI8oPOT310sczGYOUZPlNLMSGci0MwapEqIgSRiIlu9hrb/ncSGZXaYobLusJ6j39JTjxSn3irUnKDCDFJU0jtuG9rfbiu152iaYhqqcUT9CZxdw3Qbq3IIQyX2qAq2fxDpArfdxePD+B6iH6X9lWN+MNKm6Vr2hJuUdN46po2QdAkDpBMVxK4LBL7ICvvFxeXsWbsWlZ0zVfE5N+zFO+7v3hoXbukjX38vNiFeQMayqDL2sEEVSKbYOH5i5Sa6qQKs7tK5IUg5/JiwPCcruFDQeLpJpODPS0mBWnd1c3y/fvwiutIFG/kB3U+tlX11rPJR8oDBKFUlZQ2yTePQBciVVEbdo9NxbTDyebFHb5l5bqizB1WD5RQCNrqDFulTsPaqZWJFzAQl7YYM2Vxt5bNWBYSZpOQVU9KRJk1QsIbPDbsxRM4e0yjlRmLUNCM6bmXycE8JrxPrZqhdaHg4PzYttlCVUBaf+P3IW4XbqpiyKqo5sU+4fesrKpcleBAKdOviBKxVAgAe48AK/EeHCObVMgCbk6SrAXDcnAof2uvOS15pFdoeNUMSOZXaxPL6ok4H1JPPNWLj5IlCqMEreKZJL2bGvRq23Y9mF2o1qIjaNeJUxOPiqunG88QqVQqloGqqqlpbEujSw58yD3Ppf+KUeezVYh8xqfB0mjM0/W/Agq4QtGnnhHw95aX6LwCHxYR/PHSzVZR/KR1QR6Zlq8W+gnhJCqdpaqvcbxvK4x6tAMSdYdq95DUjSdVM6MlVSqVq7VJBWsHQ6Gk6VQ2kA9WlhEqoZ5r9muqMwghHkU6bvXEWDZebdPkiBIECu70ua8sHN2BsRIiw+l/4r3n50yERV4WVB6oifHyfDqgYDqxz/AFbLSsusHeVmISafIs2bxtrSS4nYY2xkpbsAbwtPk39XLh+nrOExPhm12lZcK7pIxM7r/wBLsLy8mImomSIR614KpEqPKk/K7k596/y4xGDfaxNbCUwW0lkjKDZn/wBFS+6OAnm52vqGyiTToxrDyE9VDRLvWiSRpIJX7tyvvdHjwelU7YdmiJ8jVIN3sjj5h9r5UBz8qYANyWxpekhtMvqo8xeL4cdA4WqSpasib7q5xdmBqmBFzvJnmV2lsy8w3DhnM1Oq2ZuCMPVsedqQh+qEQ3n7+Be6frAImSwthO+wuYy2bzxFpiCCwgqYobdzZLc4LwBd4vu481cATUt/Bjf1d6qqFnTjWvvk7qIkoaaEdIqQuDWJYERS2/budxCdvOI/0twi+cNgIbEVVS0tXiXId1/KiPX5PFf14j3xaSJLCGkP69ydxlt6R8J+7iyPODmZr181YEKKtgNUHJXaAJCIgPsWcni82AXXMoZEjGGCqCiKuGWdB6rz19VZigmklxQpubBSSDxW+LwCfNgwRuZdGQLwgav1F024mqkg21RITHr32857rdx79uAum1m5ElJKWZyrlT7UiLSEBDxbyw6j2oMnQnoqWheBqFoCqPg/S+PGHuFD5yInKklv7aXm8ctgUQJzOmSdOlDjkUCRSvMVHor910ncWuIc3V7uKe6zQqeUAWC9Ti2EEryXQdKiJeABHVwo+ahKCsEbGuXKwGdwjpFq7/IRB0+xhFnkrXku34/1XwImXK7XSG0Obl3H0+HFLTFvow1RFFuOVj+kVT56oVn6hG6kWzl1pAkVxGN24vNivZeSkFBVktL1FIotEAanuW3b7httweo/s508l6E1qmqZ2uoYARcMKXj6dpX+6N2FfzL0slwpw1OJ8QJhbxaWuSvNuuMcXBxPbmuzbkSofsNZUDItK/aZzDc1kXAZdQK75QB3u3aWggAeLfaPzYKtG5mZ6QLNOHmcx10Cikm4N4ts1ZaWlZtuV0iM913LiDi4ZYE024q6CwDzJkI7x8tvT7OJNpGGgxK6r3ocQYAYu0BLeG237LGOrb9iZELGkfnLQsWFgRHN1JWdk5F2/euFmqAO1+IcrreggUDVLq5vF8WIF+k7eJonOw7G24BFTXSHV2iO7+m3EzLRzOMakcXOryDhW+9so1IdUD5iuFL+nThko8fqppthRFDkIBTFUrT8X2XThPTF0dom5AEMpDirqGi6mYOPS8coIOEf4qKbpAl0lb+Yd33TxJdmntBVVlVValJ1O8uQ1frTQg/jyX/OkP2o+EecMWkmDnVJ+qzjyTNxuWQSX1b/ADCCWB1mdQzmrNN/Gri1mGBXNlBJcVUvjS/pdjZ2O9O0b4jjpHlLu/2/WsrdbM1Wtlzf8l9L4Wch6ji2s3Av0n0e9SuQXT3AQfveXEhd/lx89uy52mpWgJBSk62bKptDVD1jH2b2/wD0pAfD4xHw7LduN+s3rOSZoyUc8Scs3YgqgukdwKgfWOO72m5jc2+g9w7h/PKuI3S1uWtz2S2p0SuGqyoW46U/uYZrFhwIpWRJu4V5sMVFcOFj3YZrf3cEjoQrutJkrjniMJlzYTUKxMjLbZvxfJDc0FjNRJJPWWEblFdxEWEIp8btkm7MyESHamQ2lj8F5qqqNzbqCQbhK3aQe1h4m343muEQG7H4pLQETX6oKCdMbFbbT93EgmQEnt3YgEY413ROEu4K8BIh2lhy2ccC4UbGloJ3Xbi5jLqwM6xge1VS7yltl1nL4MUXNyvlqDiETYIirKSG1qJXWjbzmWLui7RJX8oYAWck4FRzzc2feN2vENRuHrEt+HvClqG43IRfGTY7kovlSVLSETZalQ4PNCvGEsTn1kuuL0/rCC4bSv8AL0Y0dSdcQkvAs3jY9qVjUx6xVt5SxnFqCK7gQVRbEsAX7tvJuxNUiZjUUOzIxSbqyLe8UlbQVC7HU+IuG6S6NSEYkPdWOtV1qaIYlqElsDLQrapYS4w76casniRKpsUhVMD3EHOQ/qiL3cAfOJkwf5hVJKoM12wqyzsDQIN6XelzDj6Ip0NT0VT1GzMJFgxd1E+jwfk2uAVQSYOSuAQ5C70t2Pn1mNrP8wKyRIxJQ5x6YFzb+ILCHhZjzb2ol3ZeEvz0ourqfO5k0Y7pR8Q/noQ1qRk2Ck3ywrKlw42jsMech8f9N+LU8g4ocr6bBuiSDoJSQ4pRRIiAu6a2CBhdfs8Qbb8Q85AyTWHfNpFERFwlw+3xmY2fPiwTROUss6dNABVWVlpjVK7ms4UQ+7jopF2oh7SyZDpmhyo3c6lnq14ru2EIj+9jSFB0BJVH2WShHTZyz4jMHijFfaQpAzSvtH+nRhjlrRUIdPRtSy7BIn1priRFsELtm32MEyHqCeSh3FPSazZVucjx6BIBbbst+7b8OMDfuPW2iepqbcMhl7XsrUW3hN08t93mj81dAkAp6SQDbZZiuQojDyb2AH7MD4lD+SLm+bFkFUx5sVarNVhJxVRIDcLdfhnX8gRfvW44pQ9sRMlzfWuiiPKrM3Su1AUC4bsKqatyaRDcJ8xeHH63HbfzCe7CihAPPy4XEWtfEm3VWLU1dtvLu5sdej0h6BwmqRpFrCF3lxzqgQ7eXH2MvSvkV0ZH6OjHB26f9jmx+LKkId2NxeHC8eydzcmzgo5IlHr9XSST81hFzdHIWCWKdyoMW2x6SJRdg0EiTL0jsEw3Y/VTvT7rYXmxHuJ+MZybqBWkWvGMlVUF0dXcJhtPFIls1WeoTZkzXLwKbR2eLDmk4euVW7lNMlLBBuXCmaGROKwUvlZMV/moma7ZVeDZJA4eqKDakXgQu8RnjdEEyOJh2sa19AkLcAC620burbj55wee1eUu+bv6ZWVSbpODVVbKlqoLnbbuHxfdxsLKPNeYzBpWNqGUjUGLiTSVMRSuJLulbdt+GHGlNc6KhZdqRi22MflLJiTVQ+5kc2pd56SDhq2YRHEbXFy6tpc27AUVagu6btrLicOASH2D5y+C7FyzNmfW1VOASMVEUgBILeUbcV+FZgrIaxn/ABQb7vD/AEHGYsNJ12rbaHmWqaLqNDIlPUGrxmeSjZIA02lMvdv+fZ4Lz5qtw4rNUSVUSIFdIecsAns4vTnszJKbO76xDPbLvAbprZ93GjAG3H7X4doGn7CVC7tKQ/OX524gqzau41g7h/44qMkIxCbpkkFS2WXbS6vNgDvHRt3I6B2mCvNg9yjJxwzg49UU1lUiG3pV24z04auXq/DNkj4wzt0/CePxFeeEazgy8VFtqykI6hLvCXN+P7V2rhy7DdqTrLXze6rtRdSOYxVRL0ekFxd+IuU8FeDXcvW979vpLeETwIKXhfQwqNtHOVyIm46q5dIn4MGGLkWHGCwvtUVE1Uh8QB1Y6D5LONry1xFS2Rh6VMXTpLlHoxx0rO8b2a31FI5XZfad5SKggafoEg2ngIVVRE9S7xQI1+hw8kvq7TtVHyW4PQvYphccssKSZjs3278DmqkoR3KKSoudppWASpXbMdK8s19tRMeb3RlUjt9mX1pD5PaGuad6y2XYlu9qKrdKJGzbjFSyPFke1LbuxJEatKzaMu8Ek2z1cGZpD1XFsw1YvQZVNHo/pnBmIjdstMC/dHC1VLyTwkWEWnxL5wqHBoD4x6vZHH5spDcq3W2xGRFpFdafIWpE5tiqFm7OJy1SLJNj7loNtvmxN5MUazmWrielGArppFpN01R7otu8vPhjmFk96aKp9Spxm13lmkDpIkLbTLrEg6bvFgx5cRriOoODZOAtW4UDMfOe78WO9+T7gV+ivpBdm/VjL9Y6vzisHxXxOw7Yx81ubij3S0/nBBzNpJg1mnEawZoJEkkBqpJDb5rsSWXmZC1PybdtMrEq1PbxJHvS9rxjiDzMkUXuYsoKADpo6TW4eu0d/wA23FWSO9MRV3ElsLHM+MHhDiCqNnbmEug2GmzbHTtP/wC2K3rDSiEhHiqiqPLdcJY+auZFYZtURm9UwK1PPRkhx6p9w9VQBVK65LbyGNhY0dkpmq5iXA0w/WuRMvqahFyn+q/dxS+2IVPVfGx821RH6QR+0becml+8S9nm+PGys3EFM/li/uLSsm5aHaJ8h5UEavrYs1GacjUoCvVzcQQ41NAUvWKQmWxcR2XANu74sD8kgS1gAFR6Dt6T8VuJ5jRVfvUU38dQFTKid+kulHGQqneQ3j82Fk8u6/SK88uqqST1QVu9VqkP9NuNZmtNcyiOhVWNiEY1jo8equR96apbdU/HhwLULtq1uy+7EwNG1g1RTRdUZUaYnZu9Vq/u4ZrRswkSgOKemh6f+KHV4gAezieYLu0lIdCpdUP5KNqqBZg/X4V2Z92Icx8u7E5oGO/ie78o/Biu1QqZVpSblJYhTSdGkSaiRpHylfsO08WBEwSTFs4BUb99woEQFZz8ngu+bBj/AKoVQ0UiJJqAZJ6yS3dhu2j0YR4e8rFfiHd9/E0joqksdjwScHZcLBfbfz9Pgwi30dPc2eeER4Jfbt9nAs1cmZJAJEHMWzm249pIkI37RDHSxxTW43D/AEiMD+3A0uvzj5Rx5OoKbSTtKoYoSuO0SepCX3sSXlCyU85Z1NDxp28LIAqJlYV5HizIpGq3I0kRt+9io1U8bL1DRc2JoO49vLN0nS6CoqjuIerk5BLF6YvASblqrCkQFqjcdvl+5i18YNCSpaKZEKg4mGcoE6Yfow71hvHk60i9k+Qvcw4RQW3LJW6gDzW+XE43dRrWQIFXja1ukaX2olcFt2I9F1Gt0VmaT9ItXktXHnAxxQRT1K+MFHppXJrWMLhtutsG+/dz4UTNztCSBVMruYW4kAhfh8jLxouBcuJhiheZqkKj0BuPcWJBaUihLWS0H3DpbxTcXXHZaHJ592PilFVlRUDJMzRLZt5AxOUquw4F4b/cjxSXKkF94AXLeXmxCuAbEpwwrewN3NiYoVw503kalcVioH3Ze1gS4F7mJM7MMqwU8luGQeJmwWuG29ItIRu927DFqYPI8licq62lcQlZs6fv24mJJVzuATUFS227VO0gxYMv8pK0zUJwrTM7Exoxd5Pl5a9ULSIdIR3D1X4zbJA5jBbWqMaRonT2qm6vEI7tQlOkiPcPLf8Aiwm1YItVCMtURuO607bQ68F/09kXN4RFFDMPL9ezqLmLy/b+bHluyNnyqprNZqiCI77tJYhuv/zvs4M6rh30o/xDQ47iQmdM2DNQjQWXLSEFbR5CC0fx/ewpwTA3xXuSJEDuMr+jx/KXw4KqnZL7SuoSzWNpVfp2ulfGJeLy4hHnZp7SsQN6tGU+5Fv+iF+qNweDl9r48SG3Ou7FL/EVu7yC+YfEtIZFEASucPGoK9J36okPJ7uLQmzZm6cGFolYZ7UhK3f58QFYx0jLMU2AgglIN5FuS6ZOtoqpFutK3FziICoqhe+hlS1PlOyq6QmgybmGr9qN58u4LPvYrcLsm2uaRJiOMHXHz2xFQabJsq4sJyJCqRjtah8XNhxwca6Jqjfao4Ky4UtIf0XgLf8Aa4tX5je0GzcCsWRcyY2hba4Dbbb5fLhv+arPiNJMyyQqEeH0iDcl0W/u4iNM7+SwQfnmh/3FXyamRIg1ciOqdlqjhXSHl39XWWOdJ8koLa9srq/t1du3+S82JFSjM12VyK+UNTimbfSO5JIiE/H9r7Hw4ScRFWtx+tZaVemIDcZCwutP3C8GLOqv4bV7zrQnuJV+uOJa0rIGLbVsS4f7c9p8t3u4ti0k8YSCwQjldAjcfoHtuy4hDwHip1cD+ep90ihFOUnGuAabtvpGJ3iqe0+TqxaHz8ycLORRVEVeIV3Ed6QGJb/OW7pxBxwmmhEt0i+5FNMNVDpOR0xH706/ODWzdqi2DMKqklklQ7oZJW0fZ732sTBZr5opegmjLMueVTNLqlFe9L2Tu8WB+4egDxZyrGzQpq7hIotxaIfD5iwx+kEUgmiCrlVLS3mK7VUd/R04s92cskL/AJee6P8ARFhPOzODTs+mzxyny2u2TVzcH+dS82HH55680U9B42VFL9ZBshMVfD3Q4EylZ0mK2j69jUy0EkrSXEeQR/dw/YVBCrkoiznY1Quf+ODuPm8XjLFedXh3lPqlsd5R/oiwnn7Xmnxiq0UK1t9ruJAecOmznwmOc9cpOlASbU1a45xUjrbtnk9ouvFBZj3KJq6Vp36Q2839NuHDVVmkon3yCfPZqD/NxUVyqQ5lf5koT/RirZScpUOeucFO5SzKLaPagk9ltZslpXnoWh4tu3w4PxdkKlUEXSbqtU0lDZOmdxPEh/jApCZF3X7Lb7R4x3XTNorV1OyK7ZiptcN7tL7UCC0OnzXYjVBbIKWC2SSEyM9MQ2YaiRVoi5LlWEulH1WpJtrSK22+7NtDOJBRyFcR9yqoK6PrkBtsVFXbYl8uGrrss5TesEpX85qaDgyV10fWLe2yy3mtvLGLE1Q1CCxsQnzK2hh0mqiJWWDbb3Vtm3Fg0hBzJdA+8too9m/JlIVNXM1oImNn/HLfk5fDhCT7PPZ1fmmi/wA12NqSqqo2zzcTvVtuu+HGM1DtHqK/zDtwsLozHaAlst6MT6sXeX3Kd7y2It2duzASl6ubrPU6/wC2Bv8A06cfrPILstNW7oFc2Y0xuPmmW5eH93GPo+UMSJZVsqOywxTPyY6RXWVUTvAh8pc/u48TBd5R6uX+4tat8jeyS101vzpQxOkjAhL1uHQV3LfiWUy/7Jg6fEZlRjnh0m6Q3TPQk30AHm/VbcY01bkytRusLcXLYHxYak6WSJO0xET3h03fBioaaXMvuUffW0lqS7IzpuLNWuIpdMB0rfWivV5tW/HLimux1aoDqrW9x7iIZl0V5bP2pfqkvgxjMV1iLesQl5Txymbku5Pw+LHvN495fco+8tkLRPYeEU0XT9m5R6RJ68Vt3kX63ZvIsJ6XYSYcoNis6f4SL8WMeqKmXNclf59mPEWkoQK2iQbMWjTe0vEx7RLYH0j7CrO22KjC/wDYH5fFtwspmH2LWrdFFCjIxynq/wDwL3GN3mND8WMZqEatpgeqXQOOlktJMQ1iuPYBKq3cuJFSCajkB3iW2Gue3ZLjh4ZClVdMBtERp5Ifwj1/Phb+ug7MkdcbKj54rBtIkIxAf/HHGIUSWDTuuu6d+OSsFYT4m0fNjw0LQqGRPmJbaLtkZCNU+6omsy22aek3EPZ/jWFW/bRyZdJiAZfVsRGHVw4jefTdxXlxiRFJyq4H6tqLdaSXN7WJRqD9hHqaRrio4s1SuIfY5MRKmaDaK8NKHNJa7cdsLKkR7jLKXIQ/52u3H/xSxHl22aZQH6nlMhaYXbpQPu6WMlPvWThwibriSFKxISLcFnkw3WIxKzWVVG3pxFukaVnVWlrNPtymhdwGVMQA+FR/v/2WPF28ah/RZcQVvh4o/wB3GSCsIUz5rButEw246Lls1rRPBIsCCq6q13Vp2re0bUGdtAVRTkjTkXH+r27eUS4LeqBpPUPGQ3WhcXJjPxJIi6fHoqkPdXFb+yH4PZwpScpJQKcpKxd3EAySSSLmC9V0glyn7WE1Priz5ZVm2JZurwqtqQFpGA+f3duJUgxcJTcaBlqIJZRVYu5XBchA+6LSDbhmRGgN6oKq90AkmokFpc27z+z5MLaB2ogUagmJkqStrXlPbstu5dxfBhZGLWSYprDag3MgSuXG0APwFf8Aewz2IZM1FQVTJHvdMBvG4bjsxyJOXGziSEgLbqCPjH478LKOIcrT9axQkG8CvAh8Pi9ovfwsilFaan1+PHSILbTtuv3bC6PcxDNFeio0m5vIlSNPVJNwht3hYPve9sLFTyvA0qR4b7Vv68kNIVwAQvsa8yobw6cXJE2F17U0FSSvSuTESET2/Hit5es5KGRkmasaSRJSzhw1LSuuAwS+PlwY0XZkKoIe1FWBqkaQid64jvDb7Jb+beW3r9zHIpWisCTm4QHZcqV/OPm39XNh83bsFWus/eMWYhYlprhsJLdv8G0yL4cKJumBOljSqeIJa07tJwO4wVGzdd5RLb0bMB547VfFR6YIk3UN05VJNVVvtFXVAktIryPruC4fF1+XDfVctVhRVWJyJuObXt8P2v8AMxYGcXxDxmDeYbEo9eKpEqgkZbw2grzdYfgxIfReecRbWVSipdB13v1ZBuuQD9XSLw9ZkY+5jxPh3lKKqbcXhEJqvHKQgOwhVIi8nv4TJWSdLfXXIlZ1CqRAWy67lvxfE8tqweC1NrAzj5M1eFIk4N0rYF6XUCXmV+HHiyjzCSQJ+zoqquMNJJ+aKVOPLiWv0rOXw7vYxV1pvvL0UN6kD+1eWvW1U9IyC5ctuwiD3f3MM8uzcjl3TbZJ4vaCBkkPFKjpHxCpbd1m/dicqSOefR+Yps2zltIG4Va6CqRJELgDK8SE94FtIcQuXqsk1o+Jij10nCQmKSYnaZBeRf8Ai/LhjLsPlIf9OrQT9y/JNmJrq96H+FXCV4fHjyi5ksILmJI8+oW09hCPQPs/DixFlxV8vHDLtaWqV8m6VS0HDSEeOUC5bj1QStO38GHg5ZZkegrBoesSJK80iGnHmw7btvdeMfuYXZ7XeREVUSJa1Qwc3F1lxB7ws8Ph3XdPJhw3M+QgSETM9urcI/v8uLWjk7meuCjg8v63JQUNVK6n3Q2q6ttt2l4MQHALCoSPDPklAfuGqrZz3DjVSVtPn5C8YniYlPUKjMEzTVWSj3C2igd6QCReHp/FjK84Rko61dpY1M+S149Q2rwVS4UzJIrBu5t2MrzyX1h0juuDdz+TD60cyWXLlWnsl3sa6yhpn1k2F0olqmNyW68V1SC0vYH5Txbln7m5REQbEIEZmuTwh3haIARAPWBbCDFFyHLVylgbQSLSVccrgBMQ1Vy+/b8mLNRdVnVRTCyD/Qasn7tqgImQnpd1YXslcrjEVrBG+8Q8pLolG4OQyJcwqHzKBYotRt6tcuSSdXAokd2lqkXNZyefoxpvs19o/KCkstKVy3lq8Uj5gCHj/RKNVUhZ8wkkKttnUNhXYBz5V48bkZLLrtUhVLaX6Kz5xsH28QNTQzCq4/hpSVX4dvY42uLjHdb4fMPxY+MVkGxbNVXC1DcFvGoMv6BzommcrIgDpqbM0glod0P9k9UbPEJiVxc3KXVvxJZb9nzL/LqWkqmpFReSqnhSQauZR6JGgkdpFaIDYPMO6zGCqFXrLLpmtCUdmLVUUx4oFwZNH6WlxBgBGWkY2XX4urDMfMOJYyMXIVxPPGz9m3YOTVU09RIfF1gZgXj68XdeaaGO5ID4cqj5orRedWZcE0iKjpNd+2KSl4wGqAsltRVBxcN6S/QIDu3eC8cY1zWJZ1QqlzMeHN+0VSK89quulfb0cmHDGWfr1sNAQ8aS7oGuqlpqn37giSsEbBv6h9oyDErmTR9XKwE5ESkTWEc3hEm8ykUxHEgk8EHjVA/vArd+yxRQsPu1zbriOqBpbfbXmBLl/wCKBH6X3cIrEYkXs4fOEmyRCZyTPeF/2vmtw1WJmKZLesmdp3/pw6MdTkuGLpMluHWRS2idmHCIrEImKyWGroeAW71ZAhAbrklRIC+DHTdJEhTWGVZ3K9JOhEvhxUpKYbisYkF6V1+LVBsjlGrhmTkhTMDFVJMtyoGBDb7N9uKa10RWK+SZ2/yt2CNlX/C9TKQka2cybh2grpKx6RK2qhuAOXrtt97Cq8/AyitDwsQtXJsndqjeyrUsRlfmsyqHM05KMgwamKpcGqqC5iqkqAnYJWbxEvdsx9BWdYUPnbl+6VgKkhp4ldVJBo3MFO6JctITSV370tITE/KQ7sYlrNjUlDytKx1QQMpBnOrvdUn6CqNwN0LiIdXn3GOEIuGeUvVjXMKnHisfKNUtLiWzoC2GNpiQGkV4mB/jxjSqc0JO6ZLpz9oCsKdOWoVriF7L+Tkm8b+tEZ5QVUm6psikQFukZkl3RGAiqf244ueYeZ1B5TMnFPzblsk3ZIEkhFtO/V0ugBSARJIbSLd7G/GGnFf5hLyQzD/M6eVWVbmgk0KU4Yhv3GkdgiHON2HFS1UrV8qUjUs2vIPyV2OylBBW4gt5LeawMCuVf+2q2OHXTdk+5pVvzkrynatzFmZWBeO3aCoNNC5C0iSt38/ONw+bFUZukVW5LJLWj09Np9GK+oq2F06Bw8QuNUNJcnFvmuMuguXn5rsReZFcuaLpdOVYG2cvHCoIN3KC+qlZdv8AlIvjwG1TZxRHmWjIhpGPZFWYlTERW1i4e/VVtIFbTMhEPnwJ8+F/7cJRmNqSZpR9pCkHPwaXl/HguPOMKa5F3V66QWi4L7LbzbvLgT51ayVdSwNWznTDgkhSSSIhsFkls2bPLtwdaghUxQN0LsJIrdj0ZL83anAd0XrlUdUnS6XSPSCRX4OSKs8vMODVWQ2c66Ui8K/YXRpD9/bgF9ldJsrQazZ+zjx1ZlwP1lgkRkdqWy4yv9zB6aoU81IkVWcVqBZ3XBtxA9hWbf6W4Q3Qh6854lOhHsBRnyMQdPKErls+WSEVUzAVLleTQ6tUbsZ0GIN1U0a2Sq2nFBAXqpfwiBF/Elx6B812NJ5ACStE1gEcwQBbekki2s/UDZyYzzT+UGcKVU+sJDL+d/IbV6GoSG282qoh8xCPvY2dh/05v5X1rFXIoVzn55UBOzvl4ERnZl+8LMih33DzbQwbMZdVVwXlAdIb8VvLPL4GuYVFuRzXoBdRKejD4ZCWcEqrY6S2COhzYIOQvZoz5pXOOiagnso5tpGxkskq4cqoBaIeMt2K9lr2Vu0TDZgUjMSmU04gzj56PeOl1BDukknCRER7ukQuwzb9pCEeCuFTFSrqWdIpZo0hqHL2aZP1dW/ih226XN04NGZDVg4zYluNuIeCDutIVQLvVfGqOMq/1snaWSr5wshlRLjFu57jVSLSEdLitXV5tmwcaqzQ4ZLNyQN48FAkkAsLjNBUdypXDtLFHE+i2EjrDrrlEkTBwQmkcggQEHMgkIjYXVYrZ+DBf7NCrZWvp8+P13Bx3ejpNxt3fsiI/iwFHzhm3kBufyuoJgJj67NK7f4dL5eTBv7MaApVNJ6LyRXE47/CHRKhfd0+bHPrVprm/EtfetVuc8KxJG042lM3qdWLOOgDTaVA00o9ApQnBnxQ7P4jZf7+K/WlDUx+cmaWPO+hQI55wfDEhLErfxRd0djPn6efF/pHsi9omNzYg555lS5Ti2VQtH6q/FN9qQOBIytu8GIGpuxn2npHMR9UKWV6xMTnnDwCTet7tLiiINt3gx0oWh7ywAmoztCUHR8lmxXzmUz4oqMWWmZA1WjllKEqgZkWw7Gtl/jsxKTlDUwr2kpQ1c0acJ0DBIPVvBSWuP1BAb7uF0vNz9eHed/Yx7TFb5rVxUNP5cLu42bm3rhmt6yQAVETVKw+bqC3FtkOyvnqv2lJqvBoBdWn3bXh0nPFN9x8Kkly3eMSwULcmCjqUZ6lcMyGCLd1la2auWyiaUTYBKEqkCocKI+Ej824MOEYmSFZxczQSJJU7OGN14i/ZDZ7I4eZswLmLnMuYGWjVScNItVuq2FuK5CYNREttw/fxCrNaYFx3UDFOSNU0u9hhK3f51flxzvif4d8kVurD8EFXXJpKSPNWnHjgyUTN0d5JruiAjsLqVtv+DAA7TkJkarndXC1UZtVBHSCssqbho2pXiRSOwdmrxQ3/BjQeTzBnHZqU8ZM49IjK4C9WpIKjYFturd4LcCztG9jrN3MTNSqKwpxGDVj5V+q4QJWWSSuDo24O4aIYOS7yU34fdQx7v3oV5/U5kCrXiZ1LmnVjF59H4INBpSqS4aXqtDSO7jB3kFp2dPmw8zoiMhHEXlmlPZl1cx4egY9Jlw1KoLmu013JAqV7rYR3Hs3e3izZ1djrN2v64KqoY6a9XjDRTItSeQExNuwQQV+dIsezU7JmZ1b/Qn1I8pUhgqPj4N1dPIbHCV19u7eO75saoSa06kg1Id5hQ3Z+Qy9yzRf5kV0LH1XJ8Eu2pVqRug9Yr36ocYFlp3hZuwQqLZUSz7Hs0FCyU5KxqtQuyJWUjkmbgjta3jYCqoH7x4ha87KWYUjR9A02U9RiTqnY161eatQNxC9V+6XC0vYVHFqb0H+bnsmzFBylT08+lvWTh+ScbKJOdJJU0BAys5OXBznqCUWPXirA6SpglkQi2aCvDpHeIsGCtoHd5iD4t+K/VDiNViVrGDMlgMLfqsaKtgW2ciRYtDVxNqlHhrTybg2pkSbSeVvs3bhHS3j93EfPevlU3htXNUEWzaUo4IuUdxCA7PcxyHYa6eOsVrqaqCHi41uDxyIqG3SMUktx8uPlv2vJds6z8qh+k5ciNjIdAftR+qpc3+/j6rTiTZWDHiEUlS0Llbhu32b7sfLvtCK0ZG5vVZKyIKz04qbcWcEmla3QAGqQ6rxXr8iA83WXRjf2ERJ8iWCri7AUA2pm6JRHhhQRVCzSSvVcK+0QcmFiNFmpojpM1Feou9VVs6vl82OXUtpEo2FYUFHBXGm23GR/wA3b0YsWVtIBVcmjx7Y0Ik1bFd9xOlfBd4fH7PTh/V1LVK2Tjm0Uvo6Yqt0W2kxh4RzIqetFWDm7fwuuJER+M7cFijcuatfvhcs6VXXvIOXV7o/hwcKfhoqnIdNFB4zXLQAj71LSMBAbwu8I+IfDiQp2mdCWWm/qbbVAF3AjpOdXq5eQMcwruLSMiKK6Vb+HGmhjJVuLyirl/Hj65qRyzUcJARJCq6K4L+W7+l2JdjlfFRbFwZtifFqmlb60fpXHb1WCP4rbsWHiNIrBYRjbZfauKVpX+7f+9hGNXlXijhzrRVqV9mmuAgXugJXl0+XGXK81jpaiinw29podIqQaxqzJmKPeoJgNooIcQJpfLv6sMzeuUB4leYfE1MrLkl1yuO7l3l82GtrB/3XAR+jykJJIWF7I245FhFRn92KimzW6xJW1K6/2QSwvcdEy1bkY0wQivCEwq6J4k/c3JJbk1VV7yC4vB8OHzhUHoqARyuo3SPaLp1YHT+t3jhg4ViBepiu8iBdpWOhVIEhKzxb7b8OVEvUgoyL+IhkEyLVQU7pLiQ+HEcyA6RU4zTd0LxV0i5OScppmW7SN1u9ncOJkYRyLXSeP3JI291qKrqlfddza5YiHy8XNuExSCNSFUwVBNJ4I/Lpf05sIk8ZquODLhhIEgNcmzy23y/YYoIHSwhJWcqcEJoOlOIfyFpKmqa4gRcx+I1dns/DjkWuu4TNWSkBEFbtTSErva7/APpbiPdRjZ5IODXeCoikJ2JqGKolZ5dLy+bD5Rqz0W6KtqCer3WmHP7Ng/ewS4UIiaiIpScXWdOuJVeSDm/YSabNAS/249OKqUXTzV2SSQSQ3XASxIMyt8pfXP6WbcWB01WScCte8KwOZJUy8PjSw1dROqzUDhpISVM7E+KVSu8Zctn7uCaV0GhyoqUZ6kJsx8vI2d4V5DS6rSdameg5FJBLZ1CXf7x/puwReyN2nApJwtQeYNjSN4rv09K71Yry6o/sCK2/oDm9rmShDbs1lkmE4TgDVuFVIrB2793RtHpwJ6/ouYliRnodB82mG5XJLikRXAY7hVM+cSxuuHr05RuCGBbdpfnlWO4gtDVUJSGUvz/NbUfdoyVl84KmylpSHQIaaiweN3w6rz1i47oiEbLQALFVeY+n3ME6k5SVqGl2M3Nxvq944Hv0LTG07R8eMDdmrNRGKqoVnAR8UsKXBy2u1EtMwtEBVv6dg/vdGCM3/qgcVSTqUp5WESqOPbunBxYx5GkqleurcCqp3AA9QWeK3bbjp1DxU25cMp2W3Vp0j/Fc1q+FHAppMR9nvLXK393EDVVUU3REeMxWE8zhWZnaCrtW272R68YTrDtr55VUs6RhnMZSDNXukk2Q3OB82uf3hwC1lwlJZaYmZJ5LyTjeq5ckSpqn5iPf4it9zqw5q+J6Zr1AyQdHwfUu+vKK3dXXbXyip9FZtRraQq+QAdpNktBkB+A1T3n7gYzjXHanz1ryPdQ7iSjIGJe906QjW/eqpdYkqdx+XAfJ45t1kAFPqSIg5v8Ad5vb93H56SaJimb9wWpyWiW0dtvs7Q+c/LjNVfEFZV6JRFayh4WoaUu8tSM2RrqelcjAQSHVVUV2iIDzXFhvFy0bKIDJRL9J41IyAFkyuErStwT8tstXOajGagY6oIuFbCkAOncg3Scirf8AotI+YObFTqbLZvlxJOKLbzsbMg1ICJzHsODSAy5wEQKzHDyoWcLb1oi1S+itYNwcduBUw7YpunZz+PCJsW5O03xo3KCNo3dOFkUgHZfjs09f0kF9v5MZrA8QLSmyQUQHUExAR8WBLnxCLJLRtQtURFvaaC9u0BV8Re3uwY0UnPo+10yHpt2niMqeJbS8K4YPEVNNUem3DuxXTzVXNv8AKgblRdfpiYWXW66wtVtU7k7QAd2LJl/ESUlVUb6uR7to6BwuqIWgICWJylct2co4Fs/eEkKKurbw9xkAYMEHTkVAs+AjGwoJ9ZdSvmLHS77xhTUrZNU2oiWSoeHaknBz9IijLN5r+nMBakKYcRyMbHwDpvc5VLUVItLSMvCGwixlCUiGwZhTElFgRXv3pWiuavdapdN2DGl6A9Pp0xDbhmMDDhJFIpRrNN4Y2kuLcROzq3Ywdo4m6mDzb4ykKfOWMCdbcptMSQQzCppg1o2QfpPF0nQKpEkPFK+Md4CZWfDizN6IomoaRpsFaneE+B/Jk6QSIhu3CXNds5fLiTq6h2lX0nwZhrrMlySVtDcQCWJamqebMnEazcsxbILpaGmIEkFwbh3Dz3fexqXuLh6gOA+sGX/tUDwpOucIvV7vld1TlJxbxSG0RdtCaN/q7VBO4hSAR8XV7WJ2PSch6RRXRtHxYfIpAzbCCSIiIdIhsx4x0kx9PVjkVVWFUOEXeWqaaABiCW0v7Np4Rmo/1rDO47qVQIff6cN3Txy19AkgAqD1jdhovVWgmiZNLTIrSK7YIf02+9ipll3AhNtTgnVHSfrenGTwgtUFLSVHwkO0sSqmwt27FSgCRjFX7SOcJqJqujcimRfZ3dPxYnCfvzWtGOu28wq7f3sWVdP01BYhtUHB1J+p6BL0WnhMUASGweXDFSTWD0CarHd+r1RuwklUDldThhjlBIB6iwONO6oaU7+sj6byMbem3FpykkAHNil0RAbnDpUPZDQVxR415IzDfbc29AqmNtu7Z4rsOYORf0bW0HVrL0C5WjHH8WIdit4kJ/Ldh5ZMW6S5NuVO0SQlwbKoo3G29xCs/wCaDi/MaqlnC11849K0f+sEOIFqaK5WCZEPKCW+/E9WUXJFUExKkwc6L6UduErQutAlSINwDiHFXSUTBUxEusiG3H6JYfaqBk0Uly4mHWtJDFPm4tlWpXhd0CRDdb5PJjdHZlpds8yXp1Z+8VSH6xZb4DXLqxhVuZimp4vKfLzY0dQMpKsKHh2ATDzh+HAxQ1diV27HN/KSAnb22nO8nlmYKodKJRRdzNoWFpYUX8U+uRXMu7IrrfewNI+X0ImYftUVSJIDVMRC4rPZ+HBDydp8KtrNqwk0eJYiCqq4qctoj/PH4sftYM2H0RnHiDZJItI9whb124znBdr19ePSKLu1wymup7iVR7ILxs6k3zhYFW2lBnucjpCIcUl48Gmv8xYbL1JrIyy0YUSqvwrx3x+9iZkNhkIDy7uox6PFjP2QclNxZLSTBmTyPSiTSlBFwSACkRXJXEG+24OYPxYEvaCzBpiv82HTmmni7SJbpJN3Wuvc3eO/1vnsC0bjDdbjuI8SPCfmumkPMRf9f1/qxXMX7N1h3rbm1G6c7XMlKOkzy5olL1Xdvczpmkqv4LUgHZ08x+Pbi20SKL2ciKhVFBdnNoKqiIl9kr1h7Q4yAzmQbrC2VMRUPkEi3lg6dnGt2ZVENEyjnTJ6rxkcRH/hADvS9kg+5jn3lTtb97t5V0u0b+z/AG9/+a0vD5NW0shvaSOtLQSyMlLvlT1FOJNO1Qt1uCHG0gzl4+PmH7ZdjJAkBCQ86V26zCaMWBPy0B0xcWEeLmzfk3saOdqdu1QsfnrhWqjVFXEUS0xLuktFdHzdCIoBZwMKnjZaNqR+8QKLSV4UEEBK5Iz6j8xYbsb3aKapGRJjZzdRYNtXQ0bUUY4inQ26wfaW7x8JDioROUdPRxKLOn8m+FUAvFde0APyiFuOgNWi4eUq6kQuCLwiMiIt3tDh92CoYvlHYbeIuCWnbEUH49+8kayRcKpESjcjFBO3cR8v4sHSn6cbRCetojxio96r+AccUvQMJS66z1oBLuFSPv19xJB4BxY/T6B9Po/L6f7mO++Tzychwrj12tiT+3w/u/bisHxbxX58ixTaW/tKNkoxlMx7iKfogu3dJGkqJdQYzvAZzSmVFST2XNdpryLWPV/gRZsl3ot7fslS+DdjTPoS/L/Zxl7te0u5gnkfmDFojovfqUkXhMRuAveHb7uNZxi5V0VN5yt/rA3eH+2PpS/hFikr6nzfW7XPtfn0KMoaOaVVKLPXxLCThUz2ncQmRXYtMnlkxZvSP1sYpKjdy+HmwL8nZSeSWFy8jXSCYFqiRNyELPaxoBw9bvIlM7RUI9w7uXxY/DfETtbR3AiMty/RMoRytqCFVQb+n5XhPQBKJhuSWEdpY6lMx4t5CyJTLYSeN2ZpL3DtVEx+1Eve3/zsE+cVBlFqLOvRc26Su+y6sZZrTMNtLEoz+jyX1e9IF7t3NafJ4rcabhQai7lEW9vMqK11sGpOLfWSsC5qnI+IjmsqTFx6UlSSc2kWlaufgMenzYGn574COW0X1bz6QnyKqUzKCJ7LtpC8Lo3YLnZM/wDePwvLsauOXpvVIsDqqGCMjRcS8JG4QSA7f/Yl8dnprXTVFMy6Q6iXLKt5wKlwBUu6zMi4eEjahlKxei1lSdi1EY+U1TJvaJ7dUrOYefEC2zWcZgTrenICfWb+ky1SRcx7wRIEt571dl1uHtfJAdN0aBWlelKn/qkCxE0KkB1wn06STsvjDGhprFTDqFLXK9wCisX9qBqsr2oJJYES4NkSStw7udqkPR72NF9grgXlSzzOWBEk1UEhS1OvvRHb8mAd2glQHPypgV0iT1wI9QNpfwd+/bg2dgCIipSsJRZ+wSVUjUgVZqfqjuEbh+AcLq4hdi2Xe+9aURjSkXso35jZ8UflpW0hRjrLtR8TKzvxdAlfeAlymOE6G7QVDV7WkNRSGWpNlJdyaGuo5SMUthFyW+XAI7XTpZLO6oNI9oC3/wBkOIXssulnXaEokDPbxjg/gar4042GjypZY/NWGK6OC/lSWja3zroGlarmqVcZNLyHoinhMzcpElYqdgl4fPiJpzMPK/M2pmNGIZNKxSz3iC4tckrB0kFS+a3HqnYM39a1a5su/h52B3eMbRx+5fskWuaUSaQCJWu//cJXEWLRTbssUWVW4JRksW9syBjaerSSbQMakzbsiZPQQbJWhf1lbg09jCjqSrmtqmZ1RT0fMN0mqThvxrcVQTPVLcF2B52tHGlmxMLaIkSTNvzfyBFgsf1P4P7dqou6mCQj/pzxmrkUxy/aWtbHsJeyitVtKUbl/L/R6ooXJdisSWugk4jV0leHIytuEbvCWGkZG5dy6b54ypnJF6nHtydOFUkl7UkrhG4+68w4LOaxglX0k5VRSL+BopqFw/8AOHq6X4sU+k2rb6OTrDhkh0IZwkdo/t0MRK0NA+TQpMNW5lCSo8hNZQRyZatGZOKjbzJEvZ/7j4Gfaky7pWnKFg6ha0TTkLMKymkqUW3tHSMCIButv8OL9ORzb6PrASKVvCpHy+IixH9tq/8AN7A22iXrRI9w/siwyG1NUTBOCvtDWk++IrGLgTIhPby+PzYnqNagu3kHPE99qgGls5LLsQaw7SMdK09u0befkxJUef1h8AXDfYV2M9dS9xkt/wAP/wCoNqxLJGREaqwkIX27sGHKJkiOS+duv3qf0YV+MQMv3MCZQvtPFZ1Fgz5OJLOMlM6wV5lYJwlyW9H87GYoSnUitfxUMLU58n7WCQkuxDCN5KQRVAhRSVcGOnIuuQEBVt5vAQ4q9TdjqmIFqs/XOQ7pIHFqcivZYYiQeLxY284b8U8UO+7VYPVVf9Egl+HFBzSa3Uy6PwRqXN/JDjrdGIkOpcBfIgLSSxij2Uod5MVBFJSs8kUI6Bv/AMYnuAwIgLePgD5sQdddmtGgY8p4aknlyj3rQLVH4Ekre6EfD7XXjXDdnoZjZhAO2x1GWf8AZRxTe0E3sy9mN43A/iv9ulh51NqMopZ1l3MjJZ5q5u5OsKiWSARTCZMS8XevBS/Fgm9ltt+XODRVPvG8E/K4bhL+LXXfPgdVKt/bVVDZe0UzmT3Dt+yeao/MkPxYKXZQbgGb6hpBtOAkeYrv0Fv4ccXPKJ0R5pfev0NWyC0ul/8AH/xUOxyWqGXbx8lE5hZiM/WccyeAKE5akJqt0lTtvSv51fHis15S+Z1B0utU7XODMTugSMRUmTt3kI8we1jaGQcai4onLVyqAkRwMYfwNUMV3tYRqK/ZrqA0kUhIGEeXL/0gcdCYie4VxFyXeWWaRnO0PNwrGYic9axSF2kB6RGquAn7Wr5cN6sq3tLR0e+mF8+KjImTVVxpqsrbrAu/Wlg5dnWObOsp6XWNEbrwD/Wq4a50QyI5f1AsCI3HFvQ/7gOHTFG2WqKVOPutFpJAOoJd/UKMDVUs8Jd1IUzFPXjktuqZtxvMvfLElSbV+1rSn416iukocoyO1y3JK8Ne3lPziQ+5iJUS/tXpEElhElaNhNpAVhd0kX4MX53Ls5vN+m5WLbLoN+Pj0tJVW4hPj1Vfuq+LmvxyW7NtdZe1RKS/Qlodd82MxHTH7kRM6M0O0DT+a1UQNEP6VKHZPNJqm/gRXMA8N/XijuM5u0UA3v6Py0k/5WLVSEuroH+luNbxMW2dVxXoLtklSCoAV3JXfqC/CWHbOmook5aHXYNiJLvQ7obx2FjZsUlMY6m1xTF98fSJLGrrOnM40i9Mz2fMqZMQKwgFVdIuQS61beQhxAyGbsI6TsnuxvTiqnUo0lErfnIsakdU5GuJJ42Nghsdbu6/6A1xCzFJQ6se4P1ahz7Nv8r+7hvS2GmMZRQjtyqWi3IB+q6BnstWOalIZXNqHkFZxxCOmwq6+xJISvIrbOrEKOiqpYltUVM/LaZj/T48EB8wRLJOSBI0Ehb5jPbdUNn8VQwP0UrnW5ZK32efZ7OOd8UsCxXRFdr4IfKotQkXeJVWskHLWWjdW3uhMLh/lUrcRajwxIgSc6QgfTtPFmqoAAkTFygqIKpX7POPlHFPW1hWvI7SMuUhuD7uDrVrphSjiIYVxJ43cXEoaoK3e75sOESbK2mAEJc13NhnYaSesruU6R8WPJ6y9yzrbpb/ACWXjs+DDRIEQsoctFs2ayRomLmEGLxZmq/Bd2BkkWlbeOwebd8mCHmd2T57LGjXlYylWxTlBqqkmSCAqiRmqdg844FWRWceXuXWd9KTczUgoMWi7pJ0SSCq4pJKtVx3EkPjVD5PDg7dqDtd5BVXlwjTkNmACrl1LN1VUhYOhtbiJEV3deK3A7zT+aIiO5Cm72u7Ssxqd0jrEBCWzquv2+LHhXPWTOwhLxFj3olYWpGSb6FkWz9JG8hURISuO4b7/lw3UStcFaZCpzW+I8XxhoNFynsT5N+GspxTYlR8to8nVy46WdAH2SJaZly3cuGNxkKYGjpeEh6cdXHqF0l5v6f0sxCC+p0m6vIgEBIg8QcvzY8zXBuRaSOrs2bS3YTHa8JFULRVvDuj/p/T3MN0XRs9YEkVXhGPdCnZeOzqvx9XluvKvsxZHVllvTtVPYGQduJqORdLl60XG1W3eOy3lO7GVsz6fhYTMGpoem9RJpHyLhmgKhGW1JUkub3cSVB9tPO7KqiY+j2GS8fJs4pVwaTlWR1FSBVdVWwhS8Grby9GANIdpAnVQSDyr6HkGKj10q6VJsvq6Rqq3HsIRKzcWJt0D5FIUvB/KMs0ld1FdISfq6o2byEj5flwomIEn4VD5twkA4bxtQU9VUWMlT8q2eDZvt+1H2h6Pewojf8AYluTDqLHwwMNBo0YmM0jpWJ2Ae4Om4ceT1iItK32bSG3fhZQbSTv3ebCZEF1msOp1j4cRX1OGa5sLTSNJAg7rSED+WwsWnLZCIlq0gm1XRnFREhMMo54IuFUiEXCopc4Ff1Xe7ipFytwXMyRvuNfrD9/mwonLVUzIXkDGxDaywNeSJcjvA9itodWIRma+nsW8szOzdkpSmXdTTbCjyTcRsW4XQUJ84I9UUis5z8WMJyTcGDpG4yLYB9x0XBqmPtBtH28GDMjtY58VhRstTAwmX1sghoKkCDwT6S297jMKedJspIofMiiSiFFdgO2ip6SR3cxCfOPPyn93E2KF05G0gWnSpxi+rlID3mskfPzlpW/zOnDNMbnHf7esPNiQHg3Vrlqsg5an9kSBXJEHiGzDdRACdKAN1wWcw+MLvxffxNGqwRYAUXUAHoDfDONK5W2xwFpAQ++I4TRJtKDJPNFAVHqqT1UU1xFIr0EisErebd/TqTjyWSYyV9xCDAwLZyBcO7DOlV74FMDAe6QafoN6v1VLy2c93Pj5TDqJVvcqmE0gVU4MtrxJwrzKpXEfKYdO7bjaPZPUk/TlizbxtaDEKP5t0gg2Vj0F7jBJMi3bekCLGNm7j64iZg2JNVwZFcFogF3IW3l+fG7uxi2bK5OoOlWKYr+iYcGNwDckZiP72DHBlEUorSi0RKNjO0bKSlQLU4kU0KjcXpEupT6WkXCpKqn+l69IrPaxP5cZxzGZc2rBRsjJx6iUccjqvafSSEgEwGz7Ut3e4DEbKU8lmFJNl6elUlODm3RF63QK5LhV7rR0Nl4XWXcuJvsmOqYe1xLLQkVLs1Po+4vJ6/SciQaqG20EEt2IDSDLcSEdwGO1ArPoVl87qsRmeGVUbuEr1Ggg238KhYqV927dbgY8ADcfrTYRUC8FVLbblQt/wB7n3YKXaOSBXPSrkbBu10uWzVL6qhf+HA7apP2o6KqG25UtUTSsA+W3+nLiRaE0b2LdvY6R9X5AcYxb6q/GP1wES+1MeQdvs48Xa8pBJP+MxZFcaRCkq8V3iVtuxvh32KSIsl2yR3/APGbsR1LfEOMFwNXhF5jSUJIo67V7KODSuPaKoKlZ7pW4W+bXK8hJt4m922P34IIiaF1zNGS3OfamF69RiouDbrunSoJJAolIiBH7ZtRHFwrHNyQoik4Wsp2PjWEdItEFHK7k1SFBdUbtMbBLzYBECEa/nqfkme5NV03MMELtZgoHZkYiLgUfSK8ZuIrenH2rszjRE0NQW39n6/3KvB5ksQ6Gx/qm5druEcIcQzlYBVM+UvV0oX/AIGLTljnRN5h1E1YIIRK0SqKhLrotXKRjtVILdX+Sxg7KuX42PkoFd4gTiPV4hLveZJX9wx+bG3ezdHA3YRLn0/aGwAtv/tWLCtJMC2WcRav2L6brRAQ4NrHWbRAOZVbAZkIuJ56kBCBFdeuV/k6cUMXCyrNNaznQ+zVQK4eX97F6zZb/wDCRVwfZF9KHq+4zs+3V3bOrdy8nPiltQAmqaILNiEEjt3K7r7b/d2j8+GRo4R0L6G5FpHE9nynptBw+ubwzh1oCvpCZBqnb5MVuC7Qk1ONplc6R4b1ZHA9ARqMi1DJVJK0rB2fa3e7i1ZLF+XszwpegUVxCBdbSuIS2q7PFgJ0lVQm0qX0+ijaNSFGBvEEm7ogV+tIBYrevvDfgRikbdalFKyLUUkZsscz3GYKkg0fxL2PNuqkCWhKLr84qlcXLYOy33sYczGsHMKsjFyuNlWzt3fiIf8AGKvNfjZvZwmwmW1Un6kgY9QOFL+C0CSAtx815FjH1eq8JmjWdrlS36XzBHalcX8fXLpHzYLyxaHSiaPWehVl0DP1epq3EsbU0h3XBfaXl5vZxkuqBAJJ5pHt+9tHGrlHSJwboxWHWOw9w2iZ3/024yXVCplIPDIN13xbMN7RzKFw5VpDIlUAyfiTdXaYE75h2F3qt4jf5CLCnZ/ZIv2MwiwWERSnA7pRXfeYjpHsHyl7OzEfkLDRTrLGHeLs3JLJPHA3IOlbOcuYeS3CmSKDMEasAjLUSkUtIkjMrg6/d2jjMVMfdHi+9bNicaf8/EiMi1tU1iRJBxeZmgSSqSqCvgItu4fgx4UjBa9L7TeQiIHeRh1/MI+wGGKzCEdEsigFq2q4uIXToS9gby6zuIOa0y328+I+WrSjKZcSEVwyjx4A2km01SEeq4iMhsID6d2zSv68JW2CdKLWpOX6tqlGT5RFSye5uWgsqWqkHQdtm7eXLt2+3iUG9VZQHDZLTvB0JEF11m38XwYrMPX9H1BOJxvqpePLh7Eidq2gqrfdZcCpAHh3W3YlJiLh1REAbaqbdwaGvrr90qG2wrCvD+ZjzjBU5Rd0qLFc1VjJgpKs5PVK2i+0SpUJBcMKCSpJj3Sq4N3SF9t/VtIsbDzp7TFI1hlFVlLR1KSTZV7HkAKKAIjfeJdHh5sYSpXhl83p5Zg2fC3SYfYCqqRCdyV/VfzYKkWyptdYluDIrzvVEXTorQ0rg5+mzDGpqjpXRj3RSXzO1chI3d2pAuUl3ILEaUauoPUokJWYZ+tjNETVbChfy3XXfdxoJSJhFdkc2SHV1UnFyRjYHRu5+TDgWYCiTZVskuTtrvXL/nAdNvn3/Juw1/xT/wDGsx/+vB/3vorOeubpGxJgvv23EJDafsW484jn6S14M3JImHMQmI/OOPq5k3lTldVGW0DPSWXMGu7cJXLEbW4tW4vHjKGb1OUUrmNWKMRTbZOMbqOAQbNitDWb7TEQAvHaXuYsLiIgGRNpXR8JNVdQTAubVlRuhJKknpRRW22XEWNc9jPMqLyZ9FQeirIhyp61Qb8KTIBV+yI77vjwNnVPsGZEC9MIL8OVqpNhG9A+a+2689mJL1XSpQ/2LYVHG8FEgXE7PKXw82AaviPrTEYxWit/BA0r+YbklYO13nTS2cma2WMbCIvmgx6EhqqSFqAFxADpWl/mvnxW2oPGArAwWF4skCQWiOqBbrj27bNhF/osCmvmoMs2qVYM7lUTBUrScH4VRtuMuXZi9eq4finDx+wQ00r0NQlXHf3mNhDYRb79u7rE79uAK4s1psi7q1FsYGkJxpraKmHBLJJqGR6qOladqSu3Zv2+HqwmJo8CWk/XVE9g7DHnuIL7+nEWmVMQJKPKrNjH2JGeqo8V4d1tIdo3EeruEtuzbiBKvMq5aasZyrNJPSaJCoukuglqgkqJqiRjs6fDzYFGmJ3UIotyuYpyi4QiSu0avcs6Pg3JIm41dJUvsj5vCJmNnUPgwN+0E8YDSrWN1lNYJQDES3GXj6fmxcI1gzIeGjQFUXDg1RVV3CSRHsO7cADuEvB8OKLnhBoxcbEg3WIWar9o1tLVGzcXjG+3d48X28IVgqi4a6YkXh4lWST4VEdNUQVScjeSWzSv23X9RD7YYEObCoK1dMGqincCqQXEQj/g49OC96pZvZJQ0pKQ1m+0STfqifMOwhDn5cB3NQURq6c4rUXIHQH1Erye1Zj1t9ehrp8FFGjsmoA6oN4H1krJlUy4RfSAQsS8pfLg2EL9qJGT+aUELNLeCpleHkQ9rAd7JbAFcrVn9hCPrlwIkIuLhCxLfcCoh8e/Bc7k1NY2CqukF4Fc6SJXYVgfxr/exm7oPu5zxK2hLsBRZyqjl3WVda/keSiThJU10FNcklUlQSGzeAhjMyNX5kOHyzZ/mRUrlP1XKuLfWKo70mC6qRc3SYhjVmQjhsWXNXOUI1VsXEHek5LVu7oeklVfhvxndxXlQlViMbHU3Riqa0XMX208hfeEauqA+zttPxAWNlYmhOhEo/mWKxVyIuuOR/OlZ7ytzVzOquumMPN5nVM+amzkFVUCllbCsZqkHV4wHELk3mrmdUedFD09M5nVK+YvZxo3dIKSytioGe8C3YKWXNVZlx1eRaM5RNANmarOQV14ul2YmkYMFSsutvDFVyBzcrmqs4KVROKodBulLtAccNSTBBWwz5xVBK8C2f069Oww1ItKVuukqHk/Vtc1RXUazlswqlXYpPWlzYpRWxczVEbS3e1jalZIBG5hPo1k8FBFpGt0tDg1XJWbuoNge9jG+W/aEr9WuoGHcRtID6wmY9vroUpHIGIcQN/Ihfd5sbQr5gDzNSacjFLueHat9wqoDbzfrSwq4rbhbyTXhsvdig26TYib6RthE+QVYtcTEL+obvlwTez1As5GYqVm8NN4zdRIAaQpKpdV3MZYFxayroQbsybI3WiS6rC3n+PBk7Na2pUU+fBk2cerLiu4ch+FL8WOa2cZ1zY8slsL78AcXz5yjrSs6gzioenputpqQj3s4yScNl36pCqGqO0t2Iel5yVdZsQsUvUkqq1+kbduSBP1SAg4odvNjQWV9eV46zMpFGRmKeVavZlkBptqUjW2w1RvHVBLV94THAhpntD5rv8AOCHgVZiDFirVCTU00qXixPS4q37UEL+Tqvvx1YWNZaeVc/cdI+ZC/N6bkovNqrqejph4mzb1HINW6AulbUkgdEICO7lsHBOqql2ct2vMxKSByuhHtJKVNJsK5ikNnSI4i84s9s2mGb1URTOp2Is0qmkGoJ+oWBGIcaqO5XQv5Oq/BUfZoV+/7YleUSVSD6tZP5UG6fBNxVGzk70BvwwJoQpi08qDzTzEVK+ho2mZygWEcwSQTOOVMxSVFtvNqleVx7MJzHerJgKK9oKnyzzW0d13v83t4s2awPCrah+HNASOLVNVVyR2fYJeASxFrN3jVxe4le5VVMCIRfiF9/i0N/tchY5lxIPu4oroljL3GKncpdZfNKA9KpvrfQuaRpqSTVyJbCHcKQ/ixgTtHRptc8sxGbCHXFqlU0mACk1KwA1y5duPoPkyzNXNKGWSWvbkusZCKDxLSOwukxEA6vaxmLtRw3a0pKra5rdWSqqMooZ56bVcZ5LSFubohC1IFb+oejDHhbY4lPEB+6B8KDOdkCsGd00zYQigtwftASJNqRDypcmJ7tjU4ENnhJMIunlBapRMOBEg1IgV/g5AjK4MPs5MzczmefUxT0XmFULaPCUaJA2QkVxSECFK/bdic7ZGYeYUJn9UEJCV/UEexaM4fSQbSSqSQ/wWgR7QLxlfjYtaIrOkUpIM5tU4sMfl7wcIuJHRrRU7UN95unRb/NjUFAxARfY3iVlWGksZqgYkgd5fXB5h5zwB84sy8yGA0DwVf1ChxFFslVdOUcDqma6+8t3NjTVJv5Wb7HtLvJR+8k3jtxvUcqiqqre/HqV2fFiytj1YlKh9eKmk9F1qXQgs0QC65WBec4EXTdZd5vdwznGqLVrek2jBHiNLdBrjb8a+zD6S9ZC3TAockLErzR1Y6znL9rzfJhF1x4oomqw0EdVI9QjjtIgLnt3c39AxxgS1Lp8UYM1s8aSho9ZmlVUUk1btw4xfih27eUMYLzSyizCzfrqWrmimD5SBmzbqs1RZOktdIEkhvGxC8+X+bgO181fryjxZKS1UzkXBFqCF43K3dBY0rk2ZvMsoZGxySxoKiZE63KheW7cV1u3G6ra3zHSjUNcyzlHaPOTpMd1CCB7LWZq8s3jZQEIhqqdpDwTwbvLdoYPTXL5ajXSdJaIocEAJWk1VIUgMRIQEjET6j3WeXxYTqKDtFEyiFFRNXYQvBEr+b9fiYTQBWObokKi6yQgYjxCGqRhdYdxljJXe/O3VoSJaa1WHza7pVwh+GSRIAc3CkZ/YJKldZt8JbsOnC7NVO/jFUkeTczXuIPByjiHatQXbovHjMmZBqiAoKpFdu6h93CyJRQkR6JLuOIBudxNx0g3dN1nixiyEnVqNifSSr9mx1Ymn6gnVDICJpEwjpyqI+LaPL5vNiJCWq1FNRZnkdmVqdAjSbwRMLx5tvhuwY+z0+UjqncG9gltF0gkztTVQK65cRuIQMvHi01rWleRFQycbCU9R3CtV1RQ4mLVJWwLuaxXy42djsNPX0uY6XMsZeeIaqgrCYbEVm85nMpyWiORGYqSaV4iX0aebsOCUro1BVSyYzKu2GqJUwuIX7tW3BKqTPHNGnIn1kdJUK5E1TStTiFxPm5/t8HV/DcTQ9XotVlWhAJvEuEcKoWmLcVbRsK8Bvw2c4Ro4yHclWPGNcGkhFY4lvRma4YphF5K5ncR3pq6tPqiF+3S/Fh4n6cw+KG7JTNHh+r+19W6/4vB8+FpCbrniFkSqSQEgVMP+Ppbo/wDasXLIWn5LM/MGSoyqKkqNBuyiwkhXj6jkRIjNW23euWLB4PaINv0lAuMKoO781D0YjMfUE0sicwivVMjuiOgwIT/S4TUp3NNwmNmQ1cprdVkXpAR3bv0uJytmFVRFSTUOzrCaJuyfuGqGvLSRGQJKkIX2OvwDiHi2dYST6NbL1JLqovnnDq6UvIjaG28rjdF4sfR4Qa/V9JS/xlWez81O3cBmgLlubXIesE+HVMQImSA27tn6fEeNKZoqj3GRNTiQCY3E3QG7mtG7X5ca2ov0ScH2ek3YLDJykVGKkgvKCTm5UFTEDPxlgVKZoZu3bPomO7/4HB8dvixW3wlS/q+0oFxlXd0UIHlHZr8OSxZDVAuQIHbcq2uI7h3l9Z8F2IGGk3byQcU9VFFLQ0lHjqmk7BIbgVust70vCWDZGZs5hS2ZEHRVUI0+vEybV6u6FGESTVLSaqkA3bvDiiVUzBrmJNA1kiFu0iYxDVG200g1xu5S5rcUXqwUtuoSeDDUm1j4grLlViw7tVdeMGACobWHjB0tUySuSLV/1vj6enFNrIL2oqhDs0EzLulAeNRPd7BezzYJDiLfO01VVXPBoqmfDKOUiEXKR3bhsS5cRqwIg1UZjMapave3NVxAvjSLw9PN04xrD8IluW1JsXRIUCJ+lVmHoGso54+Yyos1RSTbJJLpPEh3GkrZyDaPNifq7s/PKoaxtTU0DxjISbdFw/uQEUlyVC7VG9W8CuIr/Fddt5MXoYZyzJ0YvxtPdprgvybua9D+ZiDh6Uh3Uoo8kUY/9aQoMHiQqgXSNiFuNTTXo2w6O7+YrP1NqIz7MlQ4/sg5iPxHinYkPVcKX/n7MC2qIY6VqJ5TGsk8UjFdJUh5dXr+f5EsbJjGVKs1G7aCYtmzbXuVXXFUlSLb+yGwebxBjDL1Qyeuu+EBVXK0R6riL+nsjh1Yrs7dyczeVB1NIVAIyJPb7tM3Ty3wj0kF92773uhjzU2yq31MCIjHSAi6ercXR4sRoqs+rv79hkXVu/Fb8A+bDpN4sqKhttt/6RT2uX3ub2RxoSBBtu8y01lXmhmc/wCIOOfs2NPgqfdlFpEqqZdAqnvxdyO703KmJEeIuLjmrRFNgwQSQRS5E0xtAcSoNQR3rhdv2jjjV7uvnF3QMWx2imtvoepDqKRFuJKpN7hv6cfpNUSEgK4U/LhYl9JPcHsjy4aLeg3Rd6ehttERLCAJY4o9L6oiNiAERB0+HCajUxTWcvlbht2CltEcLNUASTEPBhOTAl/Qm2TO0VVQEvZ6seAtcFIVG6AIaJ8Nut73b4sOhSAd4GWOnSBEsJifJ09JY6EeX+ziwjmvb11v5zMbceUcdG3CajVuSNhBtuuPHOilbYFoiWK9CmKYR6vCzzwUvs3CQLhb1dJYUqd4sMTwzVmu5ca4KoCmNxCfNj0kPBrRr9ANqS+gVvgL+diypgd2iIbTC8VOXfgknQAwd/OlFSLSQqNpyro+eJNiksSbu25dEv0B9Q4sL4xPlPb7OG7Vg0UWGUQaJpvP1gjaWJNNwWiIL3bOrCmrNrF2TI+hVloVfdKhokG+7EOuRkjYCO63qLFslErU9YOXECo14r0KAhcmR9Q7cX0rgr01SJaOqCNeDU0C2ElLRFdlt+ISxKxtZNplTg+IUFwlzJ8vw4svpZuUk7FfSJD5sDitMtlpSSGVhHiTF1zq3FaJmPUJeLGntx0VyPIqyj3S/wCyXVrj9OOawMvZRThyZqNNVuAkR+Irt+JJoFyYnZp37rSHAGpfNV/GraNSNlVxv2uUwtMfMWDTFyPrNu3fx7hJduqF4+f3sLb7w/V2dzoe2lzfEvtFcKa4jJgvkqVUSRErwDEQ6VVSeJ9ySns4kFpHSSUMm6ndc1oXY4EEXCZLawlfuxnWsMQ1mmA6FBIxbY/Q4WVWG4y2jgWZiRazUhkhNIU9XStsuuvwUJJBZmte3RIiPnHFdfRDeSTcM36PduOnqE8bHh24ebqwaki0qi6UnX6MmBQta3lz3W8m24caJp+z1BHvEmyos3CQG1JQedINu3AOqSmm0DIcMLkVSPeNwiJ43ZQVBtqn7HMA8tQKSg2Sr5BQhu2AZESXs2j8uOg8SW3/ABHTNlTF7Q+0ud0ld5ldi+PskrPkdFt6Qy+lK1kUrCkC4NAvIAlu+L7uBpX2zL2c87cB/wBaOD/VUR9H8jI+HINJRJJpq+3zH812ABmJty5mDHwpB/3gcFjTDQC3TDyiKS4P9dMny5iVd7Jv0tSGSWpeKhZMvVbcFUJSUVZgAavTYgvfy+DGb8/KSClK4rp+9jVUpBxOPQ4RtYLJjxG5u4EtpqpWKjYWkO8N+NZdjNK1GWuD/wBWtx/1pYvmd3Z4pXOhm8WcGpHz3D6CEglyK2GKoCuHIe8R3Wbfkx0xu3lVULZN7lkSqxp6whJfMGF49VwzeSjknLoGYd+vYRbzIubGhOzTlbPZjVo1lRReNo9vxApO0ytJI0krrrrvGSA+wR4JVF9mSicpZx1N5yUTUdQxtwCg+bK8dFoJAI/bs26QGAD4iAg6jBLBkpN1ktPZnSD/AC5qZi5WhYM4uRiY+0ktlpJbbrzC0tiQ7Pi3L7payqhFpz1ZFq8KMYuAtSyt3KrfAP5BFqISBBxjcySXIdwEqB2lb5cXZmr6JeM1F3CXEBzDgLUBDZnMTWeTckvIR/FHcTlJUNVuQ90qIncKXsCfUfUOCIiobfvGx/lvG3H484ioXeCroTb7ZdVelES/PxLaMOBXt9MtQqWaPfSB+luRio0P/l3aZ+XDskUPR6PQQ8hdWKBRsHUI1FIIuXKqUelYQ2hcKt93Vi+giq2EvRfcHh/5MbHhKy34qRu/0wybHUJDuGPs/qQdyeomXyonC3fev3h0fyfkvx0KAebHm/e3W27MPBSLqDH624fvYXu3t1oc31/GuZVtCVE+TCb8EHjxGz1HU9VrNGNqCNSfN0l0nAoKjcJGluDE8CH5dtmAvnBmq703FGUUsQLKnwr2SSC4EjL9EkXi8ZYKuFc3SsEbylQ0jtQ5FtN81K+4riKAoY0CTCxKUfJ22Bv3t0ui/wAZdOIWDp6pHEILtnoOVwG0Ule6JXd4seo2kEWCadoDckN/J14Jka1Bk3TBujcKWOR3+103FfprxkPL7K6JaqkrGPuZZUzazY9NLOFqQcRaC/FpKpKpLq2iJgVvOHnxnBGUZz0f64jURJN2athCSo9Vp8/nuwTu09FhHZiPmcIioL5Vw4cd6OwjMUlQP4yLxYCuWf1ihWKKqKqayQOEl7UtW49dUriH3sJrJYKSyUxYUw8y09XcHKp0ZL6w9kxUAyfhwASIgaqlaRecsUB1UAJQbFg6oN9wpuAFIUpsSVE+HVK0r0vB98MXPskCTfJOMVMLS9LE1SuG32cUyadBwqwJGOmkyScN+r9A1L8KuHlD8DZ+UspVfDXEtPTNPq01QfpdUxM3uGslwqAv0rwsFIe9O3eVmIXL2Xh3lZaLeBk2axt1TuXepKhyF0gI4mKiVR1Mu1ktqLj1mukP7IyEg+QsROWaGrUyjn/m7Wy73C/exp2NqSu+sWR+0UYfnyqq7/nDe0ej+KpYPn9TzSD6VVEsPLwoD844APaIMyzwqq20SB03s/7KljQn9T3H+2aounuA+8OMhU+tHxCtm58BLwqn9rh7GlntUzZV+IrATS1LxfVxwx7J4sx7RFEmk5Ei4p3tEv8AoS+Dpnb2n3eX2akxSJZV0rMpsdIuLd/blekJbtpeLCWTPafPMLNinKP/ADRUtFFIKq/XWo3LIWIKncG3yY34uO5UYrnBZGfu1JWZXBKtatC/nm5BX39ch/BiSocf+FBmYByN3Z3f+y4l6rzqeRtR1AyDKqnXyMY8cJE5XS3q2LkFxbfLh/SeZq1UVYnTxZcU/GXt3BE9bJd6AAldt24oYchKKOc3LEvagsLOiUAkbhNBp7waWCp2Ag0q9qK8LRNg3L/WlgY9qK885JC0BEhatLx/zWCh2CLE68qAA/8AfaltL+Vxia71vyvvW4b+B/JWnc7JKnGFUohMrS6azv1UAk0Ya6Wx4RJCRXDzmVuIGmJKkXn0pBg7mxI4x2TsVYy00u/ES/SbzDwYnc/Ns1GmQc8pCJf9/SLFXgz25g2nuCOmOr/pWHBF7pcWZH1Aqm1I6oNKJdNvXc8SYNWgEqMNy7is2Gv14qvbesKgYW07ROUSENUf2RYmKiSBq1mmZ22pHGBb0c6uIntrDdQMOF//AKxS5f5IsMKv4MpWyPWRWN3DcFUxBI7VAG7l5d12HFElbKSwJWjYg3K3xb1cVeQq8ISlSeShku6OWkEkBHaRtwFAQC7w3iXxYNwUIwprLjL6te+TlK1gjfyKBKkQ3iurpEIn02qj8OMfeWCaoXHCXQuH6lorm2H52qFUJgd28rrTtHaPXg35NqcPkpnU6SRItGEWPluusC7rwGFFVhIgvVIt5WiNvVg15NJcVkhnUkN3ewT5I+brRHx+9jHWz4U2ttxaX+VOfJ+1gmhdr7O9vrGr2e3Omq1Vb/xVfaBEW7Z7Py4qtYdrnM6UhXTB5kg8apm1BuS4t3ndBbz8tnJjblPxrb1GoYIiQ+rkm/J/Lqn/ALUcDnOCLbfmxkFgRHRVjUrhs2FZcl+HHX6Qiivz++sfvu1zmEhUE9MHktIEtMKtzXT0Ho6RpJWh+i8GIGtO1BUOYLP6JP8AKiQiE5WWjzJ2pr2oWLpeNIfCONfNYFm/rSsgJFK0JmMAP+zofvYo+d0Cwb0PJLAiF3raKD43CA4fARAOpKJDLagbWUXKsqkmH7+NVSRdSjhVBUituDiCwReyr6bM1xTIS3Q7wTuu23Db+IcUzMZJslU0gDdZIi41wR96Cv6ctp7Rs9nzYIXZpl37rMpGKBsgk3BgZhpAW07x3D4Lrt+ODA77ql7X3r9M17XTaC8P3LRHZ7Exy1y1MwtIIFufwtULPvYje08gB9m+qA8Ec0H4VcTHZ9VnnuUdCrMoRBVt9HkhFQmG8jFBAebz7vgxD9pn6QlkDVnFQ7ZsmbMLhEiG0BVHpt82On0+wVwJzcSoPZnQuydpc7P8IcfIa+FM4Gt2X80H/wALno/91w67L8iaWSNLh6hYrjxDsBXV1RMdyt/IWHWa0y2dUDLAMCzSI46Q3C6VEhPS57bvZxo6R3SlFSOpZF4iynaHuASL6IRlnwW82LBRK/5arp8y22y0eVpc49+PjxBsVT+itBmJkJfRKP8Ad3l+5icpE0fpRT4X94co0ACu/ajjid+/1B7xL9IWH/Rm/Ctlvc0MuqCzNrlhWFYMYp06kQXFNe7k4fZ04/E8+MmSmJJylmdAkmqWy5e3ptwxq3IfLrM3MmsJWoaYinbxKW4c112txkHAIKgN39OfFZmOxzk+ldZSrVOxdVv3CrhLYCtvQrjo9IUxXBXE4/Orli6qKScpV5A6Zuj0iJ+I3BwqQ3fGOI91mblurGkilX9OEps2+tEr+RXzebA3cdlDLqRqCSZgjKoJpEYjpyjrbY1QLxeMixXZTsR0GqxJ4g8nBUuS5pFUucCv5/ZxpaMoNJa+MzUo4ftn+Q888YOUnKP5znoJKIGJCX1Jr1YoKlg8OaV5FsAyILbfZ6zxcoWikcvuzfU1JMnJKpxWYyqQkurv3RrMub3sUezvETI0t+8/DZdb/Q8cp4w/1D5K7hwD/pUfaUbVyTlWPRWFncm1cNyVtG7Zq2+Hx27cVlNgZON3Kat+5L8ODBQEcwmc56EoqoI5B5Dyr8+KS3DeYFsHb03kBe7jVtW9nrJX0VVT9JIZds2zedJUXThF0uC42N11dve+NIcW2bAwphSniyqFquh7K+fSMas9cd0CpE4MLEyLl8v3sJkKIulGxI3IhylfzY1rn52W6NyvoiQqyl6jkLgIEBaPbSu1TEdpBbZsEuksZMJube4L9wbdx4YC7MkmaIHhkKkEXWgNgWj7O3CMkgwmWqjCRZoOW59Ku6z2S5ww1UE7iu5cLIjZbZtxYC8g3WWX0lQcgnVVGv1EBSICuE96R38pdJj7WCFQtXo1zE8fw6DF4yLQeNg5PIqPXaX4MWR01bOmrhm/DVaqpHqjf0deKr2S6Lp6su0NC0fKSr5nFzaTtuRNOdWxIlUg33WcuHGb12mIj3Clpe4n9O0lbOFAx3XCQhf4cNVGqwqXoapWFfb+748b0mMk8r8spmiKehqGj3yVQTKTJ+7lEAeLqpGBkQ7x2cvTbhlnb2U8r6epmXrin1nkD6tSNxwQlrtSPptAtwb/ADYRkRAMlcNc0RxWJL0UlBR0SITG8ys2peTHu5bj9XD4ect/jws4G5QjsK3mIsNyABGwcSFHkKWF0ZJ85Xc2GctDQ9QIkjMsEnPhJQd4e9hbS6x3Dz9eFFL7twc+LxKG1RIZoI1ll5K0M6RqelZJdsIK7V0C71D2vGOCZl3XTavI1ZF0iLacjx+tICNokH61L93pxZhbgu3JF02FdMwsISDYQeDAnoNKmKczog3M2DlKBSmwayIoK2q8EZiKvwBu9zDYS84NEBbhSwh6k7IdpIvMWT+UcDGsmC75xbda2bmqrZ7IYefReVVfJxRsFUHypW8IuFqo+0PRbj6E1TSEDl9RcazoOKQhY8JRoq64YLSX+sJblT5jMvEWLXmh6KdUo+ZeTDKIerNGDhdvxqSSlqopFy3bubw4zxFAZKzr+qMV8w3ySzVFMyC1vyAqPKrYVu34cNydHaNqw+LHn1jUhAQEdm3f5MN09a4bbSu6SxJvamZCnArncJ33eEcM5yEh6qh1oqUZoFeR6SpBcSXmHCxCdpAPWfLbhwJd5tARsvDF4uQKQqshnpJCGgZGSy0rZaiZvdFyDjStItrZU+RUfaxoiBy0rmbHjG9KvuBMt7tylpNR3/rT2H7t2M85hTK0NXyM8P8AGIpVo9aiQ+C0g+fH00zy7QWUU3QAIxdfxy758aKrBshqqmurzJJDYPMR7cF3Ac0my7yUsOFTyaFBupuyhmdRdI1BU9RuafSjY+LcGumg/Ml7LC2COhZ4evABpGZ4+DI2oEhwivCkkRn3QBaIfJpY3/mb2gcmqwpadoNCp1+On2DiObiqwcD3phtHeHixgCmUNKnx0kRIlXTi8h3EPelzWF4BwvpC1ErwJ10ZOqaRdWuLHDZskNx3d6r+AebH0F7HO3KBM+ophxduIrdoj14wAzS1XyYGDy249qolYIeDyX/gxubsbzbpLLBjF+q11fSU09BVYit0gFITvL3iEMGEXaig60JsEhdRlYwUvmNNIhQNPorJM5oTXBV0RqgDVXZ9rZYfkDFs7K1QQMvWMuEXRsTCrJU+qZqMVVyIw10tneqmOKnR1bVOtW0wi6SitFuxmlUiQgUtW8Gq9m/SC/xW9eJrspZiVVV+ZNRsJ6Kioxu1p9UkGyESkzdH36Q3K2CJdXL5hxeLsSiSEJuQkSCXaU/97hV1ppipxjewSK3fwqGB3ctqFq2pDYYiJDgmdpIj/PZVyLdsRfWm5lsu/wADS+XA7J13neh3d5gO7lPo2mPwYqd3JnT7BW8exYqKuTzb8nRLOwL5cYQqzIrOkakkpVhl7KkIP1V2642WH3pEHVjdfYqExyp9HhOYdnt9hLGDKie1mhITXqmYVFvxjgf40kJfal49+PUkhjH2kA961xaEyrSrNhUEG2lqbNs3cOm7hVBV0kJM1evbdvHB27TtPStW9nqPhYGNXkHSrqPV0ELb7LfPjIPZrYPykodaSAiJlPBYqVhHvtL97GrO1ZY/7M8eImAJm4jFQJfl5cFVhFn6u796GaHb4liUcis3aVqJvKxzZm2dAX2a79JLVv50jvLrxvvIWPeM4iHRfNUkFgh0RVSTVBW07V9uz2sfM6m2bNrmRT/HmItwlm9xDyc+z57cfTHIZAG7GLCy0vUzfp8q+PPiQi3IuZSMp4FFYqzYSP8AOVVhisoJHUz0Lbua9dWy7y+bFHRFYE0TXNzcYX2kHMYfis6cXLO50CWYFWAazQC+kb07lUhVKzVLx9O7FLTXZg3IyeNt4dNpbN1m4C83NimWtOQ2L6L5E6yXZ0gtISFT1S6Ibg/lenAUo2bzIcN6m1X7kSCnFTbkNPIJWqguh4Et+zpPBt7OwrPOz9TIIen06qrBwCRIbf1vL5sCml6EzwFGoAlFq6InVOuG7XiZdUrXGqhZZu2HYJ7vLiNL6tJnPWErn2cpSt35VajV8k+eaSDI0OJYJNhHcrfZYkF/LjH+aKA/nNrTTBVNU6qlbSF0QlZxi+NdZJwWaFISFQHV7So3TV2MekkpLPyc271dW28i8SXxYybmMqYZl1sikzckJ1RJqnoJGrs4pXfaGJulyIqh9YRKizDAxjRMQ1SBvpKp6qpBfu3EJjzebGT6gL608DdzdR3dGNcKSSz9FZEllVdJuCRiQKiQ83j6cZBqLW4pwDgBFTVO60LQw3tHMo3LlWluz+Zq5Us23dCJquzuIy5/YxZsuaGcwkxLNotFV4M2qkaSApapbLi2+PYV2IHs6rmllXF6t/8AHXFhJnuAL8GnKSrGFE11GVQ69PFoxrk/QaKBJJXbCDk22l97pxiq58hrHmuUiW/pG/cLbojIhH7kPKscPGcTNH6kfISEeq0SEXccTZVI3Bq6So7RO3uFd3jEMZfqCoHhvnjNqZC3S+rju5t/Pj6QdortE0lmRQrOm4SlX0YsE3HrkouSFm0i27C82Pm3IUlVQvFD+jcnbq3mQtzIefxY0VkFqJZawF7qamofHrIx9lb4qai6erSLJhJMEElDSDSdikOqgdo/GPl6sCejRlSgVI1+2VEoxc25kLjvRsNXYXmvuD3cGRGep4RIPpJEagBvHj0ue32sV+gWOVD6BzOmJqrFm1QjLvvVqKKvcOwuV0ritLnMi68V3lrNplZYKrq1WPtIY0/Q3BVg6rMFmYpyqCQaYidgneF5XW/BZiyEkskJcQiq2G+5VVIzLn67NtnLiSU4ZJuIPVhtNcz2v7hELOXf0/z8cormaKi2sPEXGkq2IOYz5BIOe0z28nxYyLrpvb104Wwa2qNKNBAVlgeJtkwScKq6hBw6AAY7i2327i8m7YPQFJlMzWcc+UbQkak8Ky8H0hdYPspBbeO39LzdYhyYY5rVU5VmlqMYLKDGxgXOBI7td2G07v5LlD3/ABYobzYKhhy6VuNlarI20OY/qJco4i4sfdfKmoyiI8yukhntmoLMnKFeSDHgkgVQSj7GbdIyPpSSEQD4MRLHtE1akLhGqGbOcRcCZqqikDN1vEhVLVSGwyO7mICPFFkldVi6D/oof7XFfu7tS79Vh+VCw6MSFYoLrWUpZrThSWuKTqWKzEaqT1OSSqqYEZuE1xAXDEztsSIQ6SPkK/d5D2YTkEOALjGtoqJKpG4QFUhCywhAyENnTcfXs8u7MdF1bMULONakgztUb7VULrRdNz50lfGJhjXCk9Guo1jUMW5cvI+V0nTdcQtCw7rxV6NUbSv86R2Yw97tXUizW9q63wjxL56HIf8AWD9JUWUyyWqWq4uUVftma0ekaROW2kSqm23deI/rSIPw4sD5k8SbuAlgj3KL1vpOlEhEQIxuVBUkj+97FgdeJjSNqKbATSQRPlSVeqiXhAS5toXYtuW8PQU/ISLDMSqFIZNqz12xcQBGSpgPdkVnhLCgX3XotLU1GIU4E/FYKzGq95KOE5JcytVExa/sm95fMZ3kZYbvqleQ1I028SRQcoveNJVBylcCtqtvtgXmHfhTMqBfuphmjExr5y3CNZWqJIEQF9XEubDeso2VSoGi2Ywj5dZug9vHhSLSPiLt2OlMCItCIrkRSdInHNyL2TqK30whaVbvF0G9cNW68ILlU+6cGrpBcQftbxMvewRq8yvc1fDsWbxs+jE0nWqgS7VVLV2XW96PNutuv6cTnZvq2mMsquylqGu4tRRq4y+dhaKQnaZulS6/Zwfe0Dn5SWbNPx0RTLaQZuGbziDVfpJaVlpjbsV8WMZdSFp/NEokK2NkffIeqk3Jv7KAzXRS2AauxKwRXVPaG3lv6eXb7eA/nISJVdUB9xqcRcYk3SHfb7ODMiqZKEsdupfbdq2gW0ebz9OBTmIkCtVTwceSinGHtTfnfs93AFo9etDeR7AUYOyXwaWVPfmNvrFxpFoNSD9F4xwXEUo0iccQ/ZpCFm4otATLm8A4G/Y/VNrlmoqLhymoEy4ARF1bbsSwYm8zJPSUR4wrTC8CQflbfYX7Lx9WM/dyHrzg+0oUc8gUW8kTYBlzV6yCuuj6XJ3CPdfoEhxm6h5ulV6sURSobSL1XJ3KFLKleHBK37bbAv5caiyLSOVoieYSjlcSdPCQ1CLVt7pPl2+bENDdlGloaT9MiFaSSpm1cNbTZhyKpEkZfNje8P5fm9uX59OKwl0PornPz8SzhRrqknVRIgwoMUlDZvbyKXdFcHBq3hbd1htwAcgawoYc6qHRhMom0Us9lm6WuM8/V0r/ACGVh+9j6FwvZRpSnpD1kjWkoqWgq3t4MeRVIkvxYH1Jf1PnL2haugatjK5qN2tBOknSSSjVvYqYeKwcaEXWALd9JLSxI1gXL2ocvXGYFL8Fk5GNlDm2QCv65fqmkfEDYdpq2Y3BXCoDm1KAQEV7VveKbpwleG7pSHfhvD/1PHK6g5aNqFKtqvVUj3qTxJIga2EaRCVvLy7cPq8ZetMyJY0uJVvZt7hSQJe37UbCEMJeK3AdodJJ1w0JBUqHWZttRNFdZciMuYpZ+Qfa9RbfiwWuzs1QZVDUoJtvSKPqwCuOUXclbaX63kH3sDkk6m9L0UlAkBG7cXqbcJmrzlu5vkwUOz0CLGclweIE0T9WNx1yjBbat3muK8v3sc5spe7m5d5au9fAHFiPJ2uaPl87KLZt8kIOMfHKNOFfFNzK6qQXc4Cq6MOQfBis0fWlAOM3IVm3yBpFqorUaSQOxlJclUj4oe9H61Zz7sfQN12Wsrl69pvMher59WVpdu3bs++Q0iBK6y7Z+1LFNiewzkbDVIyqpvWNTE7ZSASKdzlC0lQVu3bOXHTxqWA5vpLAjiUViTMrMij2+c1TRq+QlGOlEqodpG8VXkSVVPjCvV/jVl3VyYJjisqeV7Y1eU8llLSoyCT+VApcVXvFL29Rd/Zu8gY0FUnYNyRqarH1W+mtql4qTklZRcUnTWwVTVJXwct5YnpDsmZUNczJjOYJ6oUpqYXcOHSab9AkvrHPYNuzBw1jBsRElXllLaqvmg3cr5gUebVsvd6rcFa2SSVIe4S296Q/fxAvIaS1ETBmqluNVUSYMFTvP/Olu+TEpnwwN1WVJuWTYiZx6TtInKqGraGkkIXdAcvjxCrcHrCZrRCTiwwAktJISDo/S+Xl6cc34lITriit/YRhRjJXvJUXjfM6Cbo2k1L0LGrbGoIb7C6gLDztoVLN0rlFUM22hIN2Ld4kIoTEW1fNVRN0I3EkqJDiNyfKNhsy4aUkZKNQTtcd6u/SI1TtLlO7fgy5n05kxm3Tjul6xkfQvHyBehVUUJNJIrr7h3XeIcM+GiaapizCjqSS/eisGIy0r535rZxVVF55SlMNaVoBVuE23Zi5Xo2OVcFfpb9U0ub2vJh12rs16vpfPCpoGOpujJBu0axVy8lRsc+X3xqBb1VUCMx+7y8oY1vP9l3suVBVi1bS0rIeslXgPzIZxIQ1QIbdvu45zF7NnZczJqqQraoptwUtJC3F0SU8kkkfDoCgGy7wJDjRjU02nUkUXO6sGZvZzVtDI0PpU3QpcXRrJ6rxNDRKtpmuvsC9DYHlDZjQFPzL+qOyPSsrMhHio9dBqpsY5Bm3/j47BQSEUg+DBcnuy12WpxGPB6/JRSKjUo5qonUYirw6RkQDsLfzFiDr6maSpfKVrQGWjZ8TWMcN3CCerrqkGuKp7gu5N2LqusYOmKJK+hac6yOlUl4TMrmzeoU7bQtHil0rd/LsH5ffwiMjxSLVmT9J8Td5YIlKPSDk8Nth/BtxOSUlMerUwYTEur9XSMhFVXaF3s/z8ebpP19MzWnvrCqVypNVVbg8JFb8uOT+0umymOpYFqTjPXD4A0yFV0reRKqkXN4jtxrbIiERDKWDcm4j2yaSFxCs8VQ1Q1S8A/vYyvWyTZvJOERWTL6wfMI9V2zmxr3IkJJvlDTSI+tyb8Hdppt+63me4SutPDnixydA2PtKq0CLT5ElZzhHkgIKLNmOkIWcM/XtLlv3Wjy/Lh5HsGyREsgikuVto6r91d7u0vhxYibzbNbif4a7qwNze4h/1tmHhiu6R2yUg2TVagSt0cV4ld07r8YOcdI7Vps/SotRJmybrOVdBMQE1VdV0vb8RjzYUZqxSrUVmCLNdZUgPXUeL7v87b7WJNAZpoBpJzTlNuuJmuIt96g3XYVBk5EfqryXGzv0k+Fut9kbt5YDcfDaK+eNEPs0IAVeO1kkdK1gIEOuurZ3o7d+LnVUQCtQPj23Gbg+XzK4r/Z3eLPa4dlIgqUgLBLXVJmaX6Qdu4yxfpt0j6JN1bEArYqru4w/EXlx1LhTXahL2iXLeISLzmXhFCGpoZmrSLMyREryu3e9g2NkgVgaoRHrScB/3UcC+pH7NWlY+6EFIVW4GIi9MrTt9nBYjxuiaku/SiraX+YHGlaEZF8n70je2CsczjW2ckA8Dxx/tSwSOyWkA53VB/8Ag4l/t8UmotH6SSm8f464++WL52UyR/PZUQCYkQU435T/AG+HDRTihXtpKn1011ayqL/4rvT/AO8FiWy9iUSbkZgJaToPw4RrQ0fpdPbx/wCNHf8AtSxLZfq2NXQDu+tN/nu/dwK7MhiiR0EjDSjXVySXbFuvjFf9qeB56jAh2gPP/wCKP72CjQxAllQFyKav5GKu1Tr73FaGUMRL+B4wfZSV28v7XAwj+flKGBbkL2sMDfOilXn7J2H/AHBXAzqYD/OBJW6pF6mjO7EAIC2L+YcGxSSBXNKm23q1nqWO+/SA7x+pr+b2MZpzilm0XmM+Nc4+71THj3+kR/pfH04X8RMZtsIR734LQ8LFC4CRd1T0k1cqsyRdIuVU7+pctvs97s93ES4VYMBTWEJDTSCwrXG/3u/9nb8GBuUpx4qOUHLEUTEwPTSbiHxXYY8GCCwpGdNSPjTvQG35v93HO6a0E1uJdPKsEtMUSFHF1xEwdoLDfaOuRCXgtEF7OXxbMIjW8k6TdMHSynB91b9QQEemy0gK/FLJtESTMW3EwaGy09AWu3y/zerES1axCTwT4OnCcNzASIpZBLw823Zgpu0A7uVTlTNEpxUaJOEQZoyCiKRBxS9loj7He4w5LJM0JB02cOCJQVTAhEtxbv6D8WNXqSLYrVrI1e9UBVJCUFXw8xaXy9OMhuHFr50aXMTg1SIfHfjVcL0nVcz5KQ3x+cVJN1TIRbNW115eDnP+m3DaUX4b0LOHjkSEL9o9ReEfaLb7A4SWeOQTKz/d8/zfNhCIb+iWejJPPT6DYsStG7brK27bR8I41bQCPams86+TsWGtxLeDVIBUI+XxXYd8VcsSQokNg8xDhm3dIkI+HxYWEhErLx1PDj85EPeW5SgoLK3aVw9O7ChJGkBXLXbbeXCiaoD6CAbdQMcp97aZcw8w4qmS8nqFn5Bt6MIENrgUdxaQ3Xe1ha0RT/s7Rw375VRRbW26u3bzDikFIUmQ9BY65hENuFLAIt+P1JK0VN9w/dx9lgopJHwGG7HSiF6ewN2Ok0gSET6T6sSiLA3A7Nw+XESchqVqrko1XeRD5unbraV6XtDuw+p1+T6Oauz/AEqY3+3iUcQa/wCX+yY/k8o4jaErPLmMbytIzrguLbvDVj1kUiLm5hLwbvFgmRVNKWDYyj+pW5oA0rC1QtElvH04caXX8WORVRVRHh0SU8NuFx1SIbrR8Q9WEJY6tS+mo5wlfsS5fDhNNJHdbiQcNbU7x3D1YjzsIrCDFgnNVQSawiGz0Yh5OLRkW6iSu3VExuErS3eHEzZ+W2w7hwwkHHCp7AIrzBLaN3Ng2lIwLs9y8UIakC6pyrWgG6ztBZdy1DqvK9D2vL7OI+j56bo9xrNZLueY2xCqQq7x2e1z4OEoq1FuQPT+rneKu4h2W4Vlad7CjBBqczWmYUYTi80uJZylp2naVpdVpbcdlsF7fvVITFwbzPk7lgLzStWp8XKYoriiczYGrS4NIxbPLbibErdd7JdeLWsKPoKz0o8+B0vA9goC4ltnjWDFQCvFQY5+ZB8YFi9UnUOSdVouKZyvzalaqkopg4kS9aRa6BE3bhcr3ukIGQ+fGVvHBJYFn20Sj3STW38TtH2dX85JvGbB0jYQF7pYqMgTFJ2LQVldTmG7FjQkWE00Fw0ciSKqVyRYYPoNtIppqmHfB1Xc2MdTe5yg6to0QxkqzOskZmPUWScjqNxMw8Y/08OPoj2XkUTyDpBAkdpNCuEh854+drhqCRKomFpJbSG/aQ4+jXZsQbHknRqggXdNSsu27rix1LgxxwnCZlpH+y55x4w2DYPjzKRzyK2hlADrdIhjNteJB9AX1wbTVbif+nHGjM+CtpBEOo36OM/103bHRLps6MhTcKpDtK3rHGjrvhhLI0PqFF9i1vUIlUS09wfes2XDptLtJILiE+cb7r/PjTwJb1Pax8r86KynqFjaF+iBy6ShKm4dE2VX0l0tLlIQtMxA/vbMfQ7JVvNusqafWVeOWrwGCXH64LpWu9IdXa6S1Q3jjpVkqo0wtd1Za7sSfzUQHQLW2JIkaJgZKqJKht/fxQZLLLLpmxmHMTGxjFxOoPZl67JI1TNU9L6wQgV/Th41i2ECo6BrMCqU6uD0xFXVDeNpmlfsAStLk8WAfWGclEw7FbipKKkySYOIRf6qqK95EKpjvLels2F4yxTdroxTsET6ro6Z2UhJWbLWo42Bja0YRzyenn16Wkku3Ph0j0rgbswDp5tvOJ7TuMMEKFXcP6di5tYF0ykG6SquqhpECpjdbb7338ZOo/MqhqcJi8o6KeJKMnnrJIePu+sWaRmQ2+18eLlRue8w3nRh5lJQadV3aim40jMucr/Pu244TxldqDi60OWupbIXB1Nlyy+v9mK0VvaKiqRcEtPMtMwrn0N5BP0dKuwsWzT/ALGBnxPpcM03TB5d6SDVSVE+YPFi3KV1GxMW3cyy27Q1VRTSNU9gbtqW/FPkC4owp2HrBVlqEpD9+H3q/im1k7Grb+UnyyHByDew9rgjC2zy3Yk9G7093zYA0t2pcmXskTN7mdHMxArEkHMc6bHqmOwiJVDurNxXebwYWqjOv6WwbeBy5NdVF6IArMirzJfsvGRdZf0HvFNUUNoAhZ0juis6VJU1pDJSGbOZrhRZ1QtG3KOP4u/fJH9l+yH8ZYptP0Ms1JNZVbd+lESxNU7SjONRENERLFwbst25HCKoqHK9zMcTthgaUcptQ8SAKvnzPb9U0rSE7ecLsWJZI0rQDbeOK/BwLBKqKifpIiks4VaGqQmW6xC3fi0PErVEfZxUIq5YP7VDhFLOCSAdymzbpXfoksBmDjmENHPGbNyJImqS/epW26pfd5sFztZXjnJJWBZYfgtv7pLq68CPVME+9MtSy0Cwj7wrUtDpEl9G8h82KMpXJyl4v0rPBWdRaSpKJRyqod7u/Fiyp1vky6RTRcMA00ktABUgXG1K22zHzParvAFMGqy6aYWbRVIQEPJuw69aPxuMHjoRDq4hX97FrXZBES0pY5bydIiX0wUq/JZ6nHtnSLEk4cD4MVIN4OgB+HEcpKZaxZqPKXlYxC+0TRTgX5KkPVu1fw4+cQy8qqJWyTkrP+lK4URnJ4SvGbfJFyAIvCu+9i8asg5lR5lVoz+73OaqHLfV01XDdUCJI0rg4VLpPGiP6ntsnKlOy3um/wB7GR1icyTpR+/eKuXCtlyi6pqkVg29fkEfhxrPsHuJWOnZduxhzfCuu3TdOQIRFslv3FcQ/Jfhe4U3RL2hTV8YUZD7K47T8SwVlMzKh4BI5JKqIdmg5IdwJcARGOKT2TfrHaKok1QESBV6Beb6mvia7TKDx1nTVyKTVUkzdNyLmsKxuO772E+yswWb5/0karM0rVXe63b/ABJfG8pBg0Ui3EuYPiRVIkIo3TTcCmKs2D3sjNj8DhUvxYkMvWv/AAiEtZ/gbgv9ViJnl9CenLQV31HNjydB6X7xYmMtXSJVkosqdgnHOOX2BxXSlpJM3B1isf8AagExzqlt/wDgrQ/9VgodghL+3monB8oxaRERfyuBP2hpltPZmOJsEdJN6zZK6RDvS28uKTSs9UNNSDiYpmbVj3TtDhVRFJBUFQu1eRwkVm/w4xz4i66t0IEdLAV9Va0pGn64WbqyEg9belu6auh0F0g3oK3hzj4hxFscrKZZ+vvSlMS5jPoOEHWouh3QKq3GQd1+9j5xKZq5nCVh1svd4hi46z/3Fx0nm1mLrWK1yqQ+L1THD9xri/rmqXMlXmd+MZLfU92e4STF4bWbmlSkCS1R4pqNukWzdpebAJ7ZSSyFHwuuiSRBL2W7StsSLAD/ADw5qFsQrYR3WbYtnyf6DEfVWYOYVVwfqeoJtB4maoOBL1cggqJ2c1yQj4sXlcM1rLJSprU7TuyQ17JNHwOYeeCcJVqKslFw8dKyjdo53Jaobg2+G/58XpPMGrcxKolpWqJElE2TVowYNkhEW7VK0u6EQHFf7CJOW/aEUtWt/gGVLb4xS2YdUOaxyFTLK3ERum9w8u/QH+dgHisyyCH2fvWh4Ka/zOX597FTzhVa4UdpEF/x340DkHY8yYza2XE4aKgJe4P72AM6HcRkirbybd3Vy40n2RwoCoKFruNkaxaR7d+/VjFR48EF0u6SIyC/3d37uMPagN6pGPKt9xiQtWwpez9paVp2HdlT4m1SJQVUukf2Q/u4GuazM/zVuGCqJJFwVhXf9YLD1jkrRDVHRie0vmI2TDlSQq1C0f8AVFhrKdnun5tEkVe1JmMqKvSpULVUPFy6WOpMVYtcq4M43MlFM2Bs6wrAyAt8oycAXk4ND93A/wA9EjGjRbWfxioKfS3ePjEsEpbszzC5Fw/a2r+0+knTdX8OK3NdjyuZSUjXMj2kKqqCPj37SR4F2yQsVNuuKoCRAQ+EcN/O7BDFAjRFOSyLVVn0yqANxF63cD7P1gsE7sq+j/hdRUSArTjnG27buVERu+HFFrKJWa1lUAKnaRyjvbpcvflgmdkaON9nGMcL9DU9UuFyT5jFIVUt3zW+9ji2Ejqey7y/RlwPKtBGfd+5HDs98MOU9MgrUgoKJRIJaZavddwlzbbOkvjw37RiDYchao/tkcvLGDjbvIFTFVLZy+1hxE9mLOamY9OJpTtEi0YtwBJJBSmmqtoAIiO4xLwYZVF2Z+0JUtMuKPl89KafRbhI0lRKl26RkBlce5IRs5cdIpXRERFcGcxmUlBdk9vKq5F0yszq1BimCsgBplKAgf26/T8OJ7MxrVpZfzmvWbNdP1XIaqXrlIru6KzqwzpDs09oTL+m2tJU5WeW67FkSppE+jXWr3pkR7hV8xYi60yA7WMjBrRqUrlSq3VaqtVSsepEIK89vN4iw6YrmA0mSXuMkZLJcPerRdAmIDd9F2gf61fpxPUzeNUU+ZrJiPrRp083ejiQrDL6YyvGmcvZ7hlH0JAt0HCjYiJIj1Vy2kdvQWGtMoAU1C7BFZKRaeIv0o45FfSEq56PeX6HsI/5QyPsr6FQyVtY1ly76gD/APEzPDiW71Nx5HTj/wBz7cVCsIftEw9XSkplvSdHSsPIOEnpesHyqTrV4BJsfVYA91ivryvanS4jjOz5DvNVU1fqVTJdSoq8pljolI+ICMlwdzGaSYpGNYSx+NvxAf8AY0B/DiYUbgrH2ftW/wBzA4dTue8TKvJV12aqlV9KrPhdFpIJL9AjdsHy4ined+YMO1L172ZMyGiIEBahMyIdoW+HGko6tiO5LXmXDLQKr9YJf8FOYFnRmWB7lbf/AFWx6sB0UFklEddFnvG7u1Q8XtFgoDMnWWQ9dTxw8hFcXX4Okm0glpKiHq1mN3ylgWqCA6YK3JWD1e0WOWcZ/Dvkrt3k/H/LPlKNl6lmKJq2k6yglhQfxT8yQuQ1RErh5h93lxb3na4z0f1vTr2Um4pXhEna7UUGCAnq6SoX8pbbCLbigV01C2n3O0UUpRLVu6bxLELWTCHGoIGSg3KaqLe9JwSCStgqqpXWb9/SXk8GL7IUqURL2kv4rYA66ce6izXPaNzWzDphan6ym2j5txjdfu2aSGkQXbhMLf6W4GClit2kYr/tbLbgwfeyJQdIZl1nMQlcwoSjNvFgukiSqqVquqO7aQly3YOydBdldUS0cqppxYZjtayJbx5uZTFpPi0WpZrGoCm7IAWCNJykPJ7OOhavCEXIXb/lxul7S3ZMYI6zjJ6ft/6hIl/4mJWcy97LsG4i0VcrXi6kvHJSaAtmTxe1IuW+1TYXlLFvWRjKQqPXdUYksDppLW7jHfzXJbLPiwI2atQ5X5oQr+DlVWz6MkW5IO0C0jsM+nd1gRY+ohU92YmnpICyUmT9H/xHdW/Otio1flB2da5pGtKhprJ9KPdQkWqqku9YKoKiroEQKpd70klhra60ZEO6SEqnM+OlZdnM884xzOp+Nf1/KvG4C7dN0nKt2k4SSVIFR3c2LY6zozEqOmKgi6griSkWSrdIARcr3JXcUkN1vs/ewHagbmOY1Lv1QIU7HqBEI3CJ6Rc2NAdlqlaeq/NxnA1HFNpCPcMnfENl7VUldtw3dOA66INCSPbEAkZjtQdF68JQr7dMxvts34ayDd/JJpox0kgzLVC4uF1bgEt4mNw4+g7qH7N0c9cxymSCiqjVdVqRDCId6QlbcF5bxw0L+twQ/u9np2oI/wD3vs//ADcBtVwqBVRHyksIqJXqKOeAQSvIy0kBtHm6by5ceagsFwHaN5dR43cEpkCN3B9m2RXJLpSgWFw/63HCdbZGCRJJdnF4kQFYepGxaXxd/i8X5bSUCrPYWGGqBiQ2rDv2EJKhgN5uQ3qucdGJj9abg4uFUS5w/eEsfUN3nVkBDkTN5lbTzBVI7TQeyEMhaXs6uJClagywzelXDOLymp70MmqBCcgkTN2lfdy90PNaWGVtfJp9CVNRmt7V89JZwiqtQbm8l1DlGSo3FzBb1ePFog0jJYdiQkCCv2XKXdEW0bsQdaRKy81ErRYID6nlgcaW1Luki6NvlwT+zszAM2aURkvSahHJpD0EJHd1W+zb7mAqmOWMU2a0SJUBNAzHeZER+G/DhNgY9yBr6lmlp6W4rsfRfMvN2GyslPQzqCmo1sxXSNRm7USXV1xGy+0EkFeUjAcCyQ7duTLBRRFVzTQKJc6SiEkJD/3DA4u92XzcUF14j5fpLH7dJYbkQ1ea/k33/fwoMatqEFi4rB3RJEke2zaePpJGVxKy2WaFes6KidT0rqm6R1SIEmoX9+Oy8ukrberFaks/pWGZpvDpOLFFY7RJMV7iOy7l0vCOIk/Ao/8AHFRwuJY8v0l8vM6oF+4YxrxBguSh6oKkKB38o82HVQK2UTQ7lcO8buIoiuDzD+7j6dZaZ0SObki+QRiGjaPihcJKrpiuKouwINtqoBtsIt2PnjmVCOZ6Qko1uskkTWbVXHV5O6dFs+XDxup7FuSizN5xzpU86dGwkr0FhIQVMhSvt3gfhxV6PiXiUSiswBBzxzg3Qp2GRiFmrzXdNvViaeCck8sSu1HGwBEx3Gfh/p14iY1q2Qp1u2ancn3ukmvtIUtUrN3sEO7zYWMaUdUqcZoIunBKpaQECplaTIri8Yhy39W3Gseyx2j8laZyvKEqqrAiJEJFdXh12qqR2WjaqOzlK3GQI10jpkdiupdeYr3bb/N+LCybpzqE8YNkycJNUrhUIh5DXLbu5txbcGEMkvdaF4Ykvo0Pav7OtwmWaLLxDcR/u+UsduO1b2dHTdRt6c2YlMjG25RY9uPnU1fvFRR0niWy8Q3q7dl1peXvd/tY6Jd/rKLKgJEqGkrpJGWy2234BHEcshQ5UDSJXaBcU3UOY0xVVK1Mzl2MmukXFtkCtSPhxGz/AFWB2QGkQrEzQuC8AXbAe6/n8mI8eJteWmuk6VExuIDG0799/lxLM2Czh0LNvpEJnZtNXcZ22DzfN58WROGpFAMFuzsaCj+aVDSMj/hh1uJLT8P4cfP2omoSUxMLJAQ/wk72kH7Usbl7GtdUIllKsi6q+KbKtZhwkqmu6BIr7Ui67fEODIrVeUlxXVpTg7t1skl+9ilpw6cRj7SVvH0Pkvnl2a3QM64RijO1Q5Fo6SuC3kuE/wAONXdqpBU+y/FotAJVclIwREd13dYvktI5KPQIFM4GTMT/AObTjcLcTUXmfktCwzGDDNKAXSZIA3AlZQCMrNu7diwnCdLMKO3vKJ4xjASXzFToZgIj60WeC62Khw19ofKWPoD2dpcJGLhTHVEvUjQVdULTv0lcXJ9m1kU8Q77NiFSEOpKWt/FiGQzO7OMdLIzHozkiicJCQAKsyBhuG3lxNxx2ojt0+0o9OgtJLEuanEpZhVU/4lXTOqnaXduhStM1V/f6ebk2Yo6ZIt0Wqy5r2gJ/pUt1lpcoDft8OL5nS4ivzl1MtBVAxkGLuW4gXKe9Ir0rj5PORD7mByoremisTm0d6RELhL5vm3Y+iU05DYtnZM9qXJansrIGnqlezaD+PSV10hhnpCNhGV94JWW27ubF09Ha7yKFYkU1qlVWDpGEeEXJf/yeHdjArxcyREFXIqX7e9NvyW27SPn24cC60CF/x9qwBfcSqQ3AYW7rPZEfjxXH2UMVA0ZSW7HXbFyL0SbLhVKQmlfccS4HZt8f8qOMj5oSVMTOZVQSUMerGyEoqYuXrdVJVAz/AIxyftbunoxQ1JQ3iawKo7TIB1EFQuS8tpl5ebk2YWTkkX7wXL0F9Y1TIrturedxnbydPzYnMla1ShTlpTMiYOmZAq274xAriaqpcngL8OMn1YYDLPgHl1T6bcauIgBiosJiRAklyq3cnlP2Sxk2oiufSGz9L+EcO7RzJfcuVaYyDb35QxppLCShunBhcqJWc1+32MEZPWHTueEQ7OVwKo847fPbb7uBnkSCI5Nw6zjaKThx3gnpaXel1c+DbQlIzVZVOhS8E8bJP3ipmPEkKYgdpK7rB5tpYwFyGdc54l0m3mLNubMtsVUm67NKUh1n7bVbnMtwNoTgS3mewtUPBt3eXGM1FXL98nq2qqOHAAfxY+gGZGSWYmX7drMVjHM2LMKjh0GajR0C6Tq9VXV50hVAhtSu6N3VbjEf5vqqDh9WmHyRN1bjLSMQIL7vkxrLC1lMFJc+4grGqusk0WlfQhuyAE7OGSu0vDgExon9Lq2BBYhTCZcAAirbb3qtn4saCbyUPpj/AA3H2mH/ADoMDygsvUZilsw80wqVkKbWeWDgLg1Vgu5xP/O+ztx68hOj0L5w++0zcGyNRkaktLygwjW1fjXCSRCo4SEFbrb99vg5C6dmLg4yjzXpepCeT2XTlCJjWCslc0kknKRqtyEjBX9UBhdZd4cVWm5lhFyUbKmZK8I6BV1bYKpABiV/Ls5eXB+zK7YUPVOXNU083ot2j6ZCIestUnyRCJmkQ8tt2MtbxaMu1Wzvztc0PuUdOqS+d8k64iScOXqy/EKgZrkSR+1d82E1n7bhVGwrKlxCW9IUj6OQrsdTRALx4fMPC34h1FbRUO//AAf8OOmAuCEWpN5ZJsCa3CvNceFDdpEP6Xz4gy4a1O5ZXekGrs5Tv+fZbiQklfqrgN29uld8eIdTcKhj4d+LEM6SWFVHTEO937D2CWNJdmlCqsy0W+XtNUlJybeMcO9WQQC1Cw0rgSVL9FcYq2EVuMyiVqlnTja/YZzyj8qISrkTpopH0vV2VxpuQRsABV8vmwpvceplmJ9wo6+FwHqu5TFZ5f1rQkmxiq0jncULixVqKT1uRlzXlduxAaFqKgcY8uSAwuJUSC/bZtt8fz+/gh58ZvN82Z6IkhiFIpNqz0iFRfUIgPVIi8Hun4cQ+V2Wv50kZn+2ZOGKIQ1B1iS7zYN4j4gxzkmgzYNal3hqqNqgz67SSwpUQv46QauUn6qDdWLZWimZjv4JL97DeemZWLpml3nHvEFDSd3aapCavfq7i9zCdUJTH0m3IrropRbQG4iGy/g0t2Gs5HST+DpFtwbklDZOzIiAut0rjpjQ6RkuQtE1FaOeEiUzlLJMERQWe0Gbp0rZuVPiHm9UusrOrF+0tLT13ipJglcNzpuWzyYY0Zl1VVVZmZP0hCQXHEyoFLihJfQ0G/FLiZ+7dgpZi5LV1lZFNH1ZrRblB+v6GqHBObiv6rh0g24xV8E8yS33DFUwDZMGWoiQ5cMG1orcSugJkkApbPBv3B7PIWBTmUSIVRU2uFxG/VG6wiu3kN2xX8GC4twBPLHgKiWqk3VtV0rbEvn2dX7uA7nIOlUFQOWbwkm6su7G7QLn1S7rl3/HgW0F26bXkewRy7JfcZXprJA2U/hRwACokqR7beQQVG/2fmwdIkWbUnASjBs5WAQJIUgVEBMB8RrlgM9kc235pWpk5X0zkXHdcLqhZt5i0iP58GJE2BCR6ZCVvU1Arj0i8KXwdHixmroUK5zxL1MM2BVNg4msIR9MPKQzIkI9rJr8Uu2tYKjfy3/WNWwd3TiadL5qKuEVmuaMqgxs3Jk1iFV+bpLQHo6bMSEe1R4hQFXKZElyiqKAmR33fqubaWFi0XTixw/SFwe9JBPQtIDC4P0XLYQ4m1cKkR0kvOUzBFKKr7lLOYiR4PON5pmFxEu3hk/w45Ua5upFf+d19ogQDqiUNuDr/RdOLEt3umi3WSSTBXhVR2WiYW823x3Y81dcUom5YPEngmYd1q6Vvg6ceK5v8pLw0LfdUSijm76Vkbs7JFmiryq2QxAXMOywR8P83D8VqmJNuzqiXZTyjcVUhcvpFgkqN9pbrPL04kxNy4u+uM9Q9yqREW28bg3eLbdhmnY8U/g2SQIUhDqO/wCyEuS3w4iVY+6MXSXwaZtopCKbPo8iTFmqcWkpfypPmG7d4DCy7y4qidLnHVo4qeGqd5HvHCQNXBITbMR4cLdn2RbPnxdivtJ4r6vLVCzvUnt/N+qtvw3RNsk5FzIuY1JuqqFn1h/bzD8H4cUNOk0UgJWkIkMSFQN9fsHBLSma8m8bnfpab9mJpeC6xIsdKPateM1DZ5kVKRBs1BmWe07v+q4mpZVs603CUlF8QkgZ3KnIkQhdpX83lK/x3Y5brsLkWzqWilXh90QiL8QIzAlw/S7NnTgnrz5asxV4MMAPq1Ex6FeO4FYDrypSeHfa79YpEaW7ktBKy6z58dSDKtmqxIjmRXoo2aqSpSyRdY7djUd1mJLioRCNWDWSBY0lTQ3P0gEAtK627ZzJbfNhSUSNg+E3DyPBxYZ6djwUrxIf2vKR3Db5cRKufMfWKWQxL1ajyQmGSKbOSrypZcXAgufFvSVC/r/QdFuPCkshpmD+V2b7u9L7iGHDyLN0mLlq/G1VVLmN1fvO0Orx7b/bw+dRbOOIUV1kNQNxWvy27R5rywOROulIlaIg0ERVVqCl0Z6UjZWROe4pkRkk5QVdCqlfd4ErMM/Uk3rCCU9VCtl5F3siQEADdZsH2vwYtDxJgw75+CXOBmIq7Erj3naldt3Dt8wYiWrpmYizb64kZN7VeIVvG87QHl8Y+7ggXXY7lGI91UmWdVUlILcLPVNpgfKSUsIDuL38TFKpPHjclpZ/WargEt1ziRFvf4ua8PfxLOmDB2m4eKntSI1bkguIrA1T3Glee2/dz4Rp0YRJZRze+1AV0juALBAAEugfMPNgnrbg8ylkNGMxFeGl5WRWECkp5sQFaRF65Su8+9fZsHl5ywn9FVmqKjxw/l3N6X2T4pEgs3Ce03XUHTiYeS8I6WUMlpe1uR91YkV4Ary7x83t48ok2dWsEFpNcjFW0RSa2lyiAfZePk+fAxVLpaZKQU0dUUzi6fRXIgSYQrFFJuAkmuyVEC3829f5sIy1L2OEVmEbFEsBAP1JkVvLbuHXLd5seJuikj3Sz4RNICPa13bi/Zc3yY5WdHqNwYOX2oa9wFw6RF7tiX3sDyVoiUliOtkgGWdGgs5EuM6kj3Hu8uNcZNG8dZQU6YGnbwu760kO+8ukxL5tmMk5iIItZpQG7nXLXuNQbR37uk8bOyVSbJZL06s4WYrp8L9gS5eMt1l1mGnFJe4Wy9r7l62EIuEpQmsqq3TtRS1EnW+7g7iAgH9l/TrwsUMYppgg/VInCQXttVvf0j1pX9OJaLaAqsmccaEaJleWmuRX7R2W6/VhnLcHxhLNW1223jtUy6v5fGGlIRim8tSTRiWZCmDrQUEDNW5NVL/yvHjlooaco4RYmug6bil3l6BKn7mltL2cJo6KCKiLWOTFTVVE1F1yHf8A6f5enDdR0s3R4ZVFLUuA+4vIUjMerv8AFYjqV8ka+zLYtWUg849yubhqKtqltgiZXbdglgozwPOOfHx7kO9VstwMuzZx6tXyLlVG1E2w2kPj1f5U8F+c9LASfGrIpiQat/dK7fgHHVuEWv8AKh8RLlfE5f5qXhFDGcdSrOlY1b1k8UUNqFxF1bfZwTI29KJnjAyFQDV/2Q4odSIRx0rHgMuj6BBmlYRoL7w0v5LF6jS+pzyP7dX/AGSWNOIwl8n70hc1gKzfU0pPJVBIIjUL4RB0rtHS8Xs4ufZqlptxmlNMH0kq6bBDAqOqA3X6viAcVCrGX9tElZy8UfMYeLFk7OqoDmxPI9QQyV/+lHBTA9qKqc2ko+qKgm0KimEUJVyI8e4tES/aliHplw5Vmh13i6pKkHM4282FqmE/pFMf9fcf7UsMYdXhagizLlVdaXxgWPDuVvKjZRb8yy/4YTUS+oHuEiE/tcRPALENhP5D/t6v72H1BkH0NHVO0eAVvK279KOHn1ARK1/d/wCzq/u4qFpeIoGh7dJN8zqdZjJSHDmDs1U1XqpAX1VfxljMOdBaWaSgE5kEk/VMfcLYTIC+18AljWEglG/nEp8xfjrWuwFDSIbvqq/87GT89NFLNJ4a7ZdVMIaPAiFwkNod74ywDdx9wx9r8E84dL3d8lUF4Dm4dKNlbrj3LsFyt27Le6HDpZ/JGRI/XhHYeqTB0Vx28mzCiLJEk1NBg8tO+4lTbldt8hbC8uOo2GB+oRpNl1VN+0Sajb5t9v8AOsxjNBro23ambN0sustbJSQiYKjoCzdeW/nH7uHyLB4KKgIOXyqOzuCFUreXlws3SbFzaqqYX3kQtdtnmt/e8mH1zx0mobdZyqiy+ytSYCQgVpfqrPixF0uRWj3lXxlmyUg3SXhLi2Fcq1dCPNyiVw7tw4xu6VtknWmAj3qpBdy82NmPmsPJMWoEEmo+NW87kECSsu8iXs4xS92vHG+7vSHd7WNNw0I9DiznEDm1OBAyUJErSUV/R3bcT7GximLRIBVIC+0Edt9v3R/dxARqCLe54ul3iu1AVOb+VxPQrdzNyTGEYLCkTpUEklVytAbi5i8uH9T3UspDyhzS3LWVBvG30ZT9aAuKgK/pNxeTE4S/CuFDbrEqNu3DPSZgmIDaJAfSWOubeGOIO1YmRFHctxvGKhmdeelWoCars1WqhWIWluHxYvrFwisIneN2KS6a3ONZBFUVOXw4mYEOEbk2UMiK+7muwHXtsODJoYqQirOoeqJWnhMdqe48NwXEk9p7sLCqFt944Rx+JSilPyelXePp246RsK4FeUw5cI8QAWn93DZrLRclVrGkEHyfHvTD0afhG624sXMUztSUWhVbrrTQydUz6UEfSkiKAco229OJiFA/ycNyj04sWZeVchlgojxEiMk30m6qq6KBDaSuv07tvcFu8w4r7ErSE+XwYHudDU0YxfGKqo6xitCbBSUy4QWBrfZyDijxtJwFQysizexSQycgOu1dp7TFUOULv1Rjtt5eTF+ORSZCisuFwqKgPzjihZeT0IvlDH1HILerZunSBqaxXFdu7q4evZgy1UNSFtK4MSkTmXp/bh+PoQrtwaCr6o53ZSSzV/JRDr1VI3EQFYN33cTbOSRU/sqendy3CV2H8q+ja/iWld08FoyA97tt0nQfah73N72Km3fm1WIFUbVL7j9rC5+mLAibeGLg7hXmK4TaFwS0kilSMNx++xJRPq3Yiq4o04dYXbVElGivKXhLw4ZUrPcBvvtHylgoMZ1jUEeTFVZFdNUbSTW2ljKvu1NBU5vIrXX3QKfKgGRaSe/Dqm1YJzNtm063TXauLkgUIyHSLpLE9WlLnFulEQ71M79JTxB5sD6QhpUlAWZxzxyKX2vDJEWkHu8uNTSE3VDpLcmIui60k6tg0kXriHlSTXTSV0ldJXb8WIzNB5TEDlzRsPKQ7olIo5NJW1xcDXVeESV1/iHd72CLlIuNUV5I+to5BYlWeraol1XW7cfuakbNxMw3OI46PFUDSVVYq6V4jyAVvPjc8H8QPUV3ZtJbSWZ4gpG3aZx/9IIrMqL2knSd6DP3iwVOz2lGpVVUTlg2HUb0bOnt/kMPHXrtdZPinjwiALA7hLf8uLFl/FrQ30ynjWc3BQdQEBFYNpgkl5fOOP0W+1BglyAKvNdis30jVcxSiafCokomqAAbZRUiEvNafIXsYNVK1IjWCKYQ8kKEgYne2cj/AEvxnVv9YRTPg0CExvLf1iGJSNfrJKImzfi2Wbkatwn1+Xlxz+98M0l37SMXO9/2W4tt7foNI6hRGqFw5STdM5cEo+SPYSAnsI/EPlLH0+7OKHpRyIoS9MgI4Nor6RLpIgux8wWc5FVvHiwqg00JgBtavrdi/gBUfF5sfUXs8pGlkZQSKn2gU5HirfzX8OF3zYjYaDqb8Yx3fd737EHxLXFWMNn+f4qPz/J36Kfh049EFFDlm4nd0pdfy4CWYgh9DS2c7pL72Drnf/xVEj/0wrv9EeAhmEkatL6InuNU/wDZEX4cfKz4YSX0PwYVn9NkCs1SIL/pWDgbvdHGtqVz9pipqTUcuHIsZ5u1vcNEvrIjst4hL9al/QsZRcXhPUOA7SBq43fDih5c1kwFNvFVCZJR5ifCu0EtzPeQ91u5dw3jfZtC/wAeNONa5bWBJsZJf1FqvIhIkZGtfytUVNJQ8dMJEmCRpNSQEkgQSK4QBLrAf3MZxqk2kaonDvmLmbeAvwq77S1d/wB/w415l7lpStbs00Yly+jpSKVbnKJpRwrtXSV5fxUkt9peblxaJLs003cQRwLkokB2cTDL2CZ9ftbsZutMqym0DJXMUwtO5TmlfMhrEVlAvzWk4p8xTMT4NQdpEBcl2CJF1HXEQmmrLNl0k3rDVYirt10it3fd+LG9W+SKwOkdXQXIxv8A+KXGz5cUPM7snTNdx1GtmTyPFSmon1M4Jywf/WjsEb7khE7e6wlcoX7gcXWU4IKMA0krFknKTDKnYejZsFFnnoiUpRquSVtrdVUhBJX4dv8ANxbK9KqkqYdOqCbxi86G5mhJEQoGd3KRBu5cJy2XNVJVxE1JFhCpQ8PFt2boV0HQurA1diW2y3d1YsjoQEb9pEA45ZeeFbhw7fqW8UmkcwZEPL6fj/ZimDVQxVMkwSzHUz/tVvHDVzUuVdBINwDhXr5i/wBVxw6qo3iN4+XFuzuqCbynyXkq2pIEG0pGcIKRLtxVAQNURMLT9rBArJ68Jmm2ao6pKrpXJj7Y8tmB32xC/wDda6gRstIyZBaX8uOP0a04VRUjmrNRFhqLSyqn25s8khvL1GuJ9XqvZ8hY01l7mdW1c5BweanrWDKUVeuGssgvBkqAnrkKWluE/shHrLrx85UeJZajYbhRMtnlx9GOz/wEz2LaXYNX6C4tH7hJ5ad2gqD1dW0/NYQl72H9dRtAOkUvafNOoWua/lJhnGpI0wSj1wCVyUQ4QL4gdX40Yzam1aizXWJckl1Q1Cv8RWc5X4zzRKAfTyD0Psweh9wsaMGy1Sz9K4Pl9vCp1gQGQq1p0jWB+1YJjnRLLfozMA5A5wSSLm94cB9FwwXbisgYqpuABUFB3XBgpdpR0zcVtPSqT8lSZOpNJ0KaR2IAkCQh3pleZWD8mBXRsNbR8WBrEK3BpK90N3Pu3bhxmSDSRe0tgwW0fZTq4LRvDcHVhZuk24oeKBzpgJn3YiRFsLx+e3Eo3i2bpRNswWXJZU+XSDou6tWzDdRq5aiQC5V70ebyc2KJIpR42ahWhtPcO47cKEhusG63DgWpioRqn3nit5g68eFBZIkzXWFJO3wY+ry5TA9wHuGy20saQ7HmdGXeXz6rG1RyvCPR4K0TVQSGwrrNyqo38uMm1g8fpS1MotXJabp+qKojyF3V27E4ildzNmfLzEkJYuyhCJmhXPdAk2vpwn2r8pV1P+PkCI+b6wzL/wAfEo17R2WipCqhJCRdJCkkX3Cx8v8AhY1UbODY3Af6oMeKGirb1YGPXG24C4UC+PBPWyDmJLfNAL6tN85qMeiKwGqQn/0Ai+5jp9mbSTxi4RQMhWVSMAL1WuP4cfKV5DQIiQfRuFu5P+Lkh+a3DVvFw7ce6gY+0/1YW2/LifX3e8o+ZgRi7TzNEM3HhtWxJIuGbdUBJvbst3lbz4EaIgRKBfu9nyYia+m38QtEhFnaLuSSZ2l+ibmRFZbbiW3kN5WjeXVgFwf0neTljR2fdTxMUQ5tIkzvv23H8+OSFtw5bBt4gLdu8js/ptwm3ICEdVEbgvstIxwsS6JIiABcV95CQ+XAqKXiXR22grqaWzurQxySoJWmQWj5jx0oeuQ8xJhYIlzW/Ljpw1Wbjeqjtu2kPUH83HhFQUf2HRs7SSYeOJkw2+ziQoNdYX1WAq2IhB433CHL3WGfYfVv7TzMP0Zs5VIR93+dh5Rom4mK00gL+PpJbfINv4cFcV+rLw/fgreCNdz/AD+rFXJEr0yDiVdHSM7bzxElGtDWWV4NMSvtO5LoP+fiSRa2okF/TYI34tdLZQzNcRMlVaGYFN0xDQivpF8vNBaHoVKzSMSMhAOUh3H1Y51RATx5QrrNxqmLcxn1G1UpNgjdZwyAl4dIcKDGtt2lFMysK07kh22fzytxd1spCV9Igw7R+Ty5AW3+FkP/ADcdoZIV6ZKeq86MpXgq3l/xiJdQl0r+UcMMbdU4832kiHiqz8xKhik2uECjWKo8/wBgO7CyfDB/F2CCQhyEI2mQbr/u4vifZ4zxIR4CoMtXwhy6b8vL+18uI95kjn61UFFCCo54s3VtFNCWLvT27R28372PDbKt31RKz/E9lPm+iqKiay6hLK94W8OYxu3W49pN27gnAtkyWBK0VLNwjcO0S5+bHmrN5HKcBIoqpum94riXSrymPx4mqcpGqKulBhaVhm0tIuNyTQnXDXB1FdaVlt93L04UYYO9YygWjN2lZYJ1/bFeTnH6WmDV/IJbjHa8IT2lbzBh0jUFSGaehWVVJ3lYOjUD9K3l8CvmHFjU7PGfzX0pl6Mp/QYpfq5rVu/1HtYaDk5nowIVXWUEkQgYkOg6u/8AC8uGHU7iGoS+kkPnrh49JEPzVHp1zXKGmY5i1pafLdVkp4v5fEi3zezOZI3pZk1SJBzaksqr129ZFiOdZZZpjvdZR1SI2WgIpJFv9oyHw4j3FM1yy1AdZY1UI7zIhapF9xXEcu58pF85fM3h134m/m/2SdW1jUdXvk5GqZR3JPkhFLWcgBFZ4Sswz4Xh2aayRu01m6qToVE1dwmkVwc4/e6MR5KuX7pwiuwcsySIBVbOxJJUTtu+HmxaqSpuVq6dZUtEsBVdv70NO4U9hBv3Ft5LsClng/EtycCNHhSyGOVH5MUV4ztM53ASiJVsm5URV0iFzHsx3+6I4kB7WecTZFFZVzDKCd+5SO5vgLED6ezHnXHCQhR5r79W5u8SU32e14gHES4yJzqaEIHl5M6dqonb6QV57vAXmw1J25tatSyg03Cz5fofoq+Ne2XmhcQG2p9WzxNlRPw8t+JJDtp1ul6PrlOwCw+ENVO7y82Au6ymzFZKEsrl5Uo892nELq+IugfZxDnSdTNE9R9S0u29AbrXccuh98cUedLmG8i+aiQ4e4Yqdgj87+6KuZ3aIPMumFICUoBBiSzkCSeJyZLiPpDf+XT0rfmwIUdF0mIGiNwbdt275ccrEizuRVWS2b7evmt/dx1HgGtxNmkJlv6gLAdZUv1pZr6bWy3UdsEmKPaqjmsARMTCrWEIhLN7h8O1XFZTvVdLarzQJxYrbZcHtYtmcDMzptisP6KZbl9l7Q4qqIdBbRDq8QY1Vm+CD8pYvin4d8lal7DCANa+lNBYVB9SEd1936UcXHtL0+2PNt4aAafENWRHbt5hs/Bio9iQzHMaSAwG04ZUue79KOCX2lBtzVT80cwL51caG0DInC8K5nxBvQUp2IAZyHWM9vGMj+JcRxqvtFQ7N12fxcKohrNQj/SCg84ht6vixmiFsCQhT6uKj/8A3KxqzPhIFchVkek1Y8P9akOHJNiRakhpiKKxCUNaSyKplcFgnuPnM8aOy/Zh/WryAAG5VhMJXeLvXX72AmxS4q5+4DafCEfwEqeDtlaPEdml8iX6iTSP5v3sGOCMVOjI81YXjRWca1xiNiGqYkraZez4y3YL3ZAvQzvjQV1bjGVtuLoIys+TATRsVFudgleIfajdg69lAQSzvhu5ESNu7G4f5LGHf2LoJ+qJaWz1yoiqwzBTqfjF2bxjTSXoBVAA3d6qQ3Xe9gPZnZbuYaqk0Wr8l2rvglT1UhG4wdJDfst6MalzEQsdOXPpP7WKjW5e+6IfxYGGbTK6cg9n6K3/AL0RYZkEKwhWZZPpaFN+zNlpC01Wr6oWSzlVzNQbRwvrndafHq3W/wCiHEpmHBwLer6mknjNDYvcREkP6q7w4k+zmum6dqGJ3EiwSQP/ALUZBiu50rrJVHWKIIgSZKpAV3NvSS/ew3o2uyGXeQb/AK1Yu7XlJRX0dTqdJmmK0nMpGKopAJEkDV4QdPsY012FfVv5sZIGDBVsLdVpdrpWkRmgJH5MB3teRAHk3GubLSaugVuH/qTofxDgif1PWqH9Q0bWDN+igkpHuIz7LbcBoEP/AIWGpNwFU+0s01c3bfSaURScpaiT9xYJbussXTJY2yuctHOmDZVs39aNwAVd1u7du94sVWuLyqqcWVMbkn7gbiPo1SsDE1kWSI5pUm4SBLU9bN7yGz9aOMJUFuW4EeyW1+06AKqUUZgJWoSRD5Tua4yJmhlpA1e3KSamUZPN1QcISCBWmJhb+7jX/aaE9KkFQ6EpIfnbYzNNAdqxgFuw8aukHsvm/Vguc1ZELq2vl4yMMo3LN1uL1cd5eL6undijVpFtkqdhz0RtSfnd/wBlXHBEoFW7LB2f/QP/ALFSwP6seG/iU2yV3dOAG0T5t2kePjQhFFlqNQfZlSZpMaqBrusepERD50rsYrqYA+llQI2XD62kLv8AtSuNmdlcwOLqzzqsj/7uWMa1gkYV1UiJbi9cyFlpWn/GlcA3UYNCnto3EodYAESNI9Ky8zLV5fNiFpcliplm5A9cT6hC63l27xxNLJH3dx6V9496PNiFoVJF1RJXI66jddUBK79ry/N8mFbCavqUUIyHvQJIm6tmugyS3X+MbvLy4WRSWYN03jpmugzdjYkoKVqRWFvHms6h3e5iPTEFS4buh4hVU7lSArj1dnT5ubE88frOKJi2BTDYW5rvXQsUmoXJHpIDq3JW7S5beTujwcg1GoiCTpQFbQI1QHV4MCMzsHf934cekEDQLjEtIi0t31fb71n3sdC1uUT0ASVTP9Ff4BuPn84lhNQ1lU7xMUh3iQ8PbvPd7/Lyljy8lLXOmoBsNUVRC1Ukg3H4bvxYeNxWbqCAsyGx4BirpJFcYeW75cR/c8CJuAQFMG/f6SA7NxfBh8mhY1vVbCleulZ3XR1gXm8+PSUk40D0WrkNwtxtMuH2WbtmwvZ3ebDhNcyeOHisUkQrECRWtdg32pfF+O/kxHqNWfDlpPB1DvEU02u8u6Ky3dzeXqw1Zt0UkXDNmevtC0RSEt9wlt3FfzcuIZQmpyUssLDRUYAYtiSsaqoElvADS5Lbtl9o+5h4m6eSLhqtegUgZAbzQdKjcrcO23xX3c3k5sQek8JbYsrpqmCSTlALhAAC2/7Wy0+f93Eosg5eLJuSOQVRMzVLcIpK7xsArPBbsLHoCvSSPrRFumOkDEW9uqXeqiYnzcwDvHDhN0AkWqs12E3StJdxznaXNbsuAtmG6aqzUlNB5KkVpmO4e993xCePOGZuiUcqtnwkqAK6im0TMbR/Dv8AYxDKFezSXpB4auma4LkmDwBItc7ORUfDsV8BYjVOJasxW1ktNIT0lNdXb/Nw61T9Xpg/bELjZqkW4OYi8t47is9zCektwqb+znC49tulZ4/ixaIwUJJQlWzhEQQWJNQDA7RcK7fd6Pdxz3IoisuYioAnuG/4rTGzHlDciV96pJpHftVPcHNcO3DrY6tNmblUjAzEeKO6/wAf3ujH1eTMbHVppG2JwAH1AQEBe6Pls8OOhXcv24nwySF5HtFql19IkHnLmws8cGIuFnhlpmNyRC8ttO72eb8GGvq1glafAIEibhK5fjLQLl5tthjf48QXl0ThYWawKo2lwvNoICA8xcp8mMp1J/GngKgIld0hbjWAqsxj1jLSFPhQu0HglaG7ZsH+luMi1Mr/AAo+u5rgv+AcPLNzJbctgrTmQaRllHCmq2XVE1XG5IAs+1LBly9rCoMu51OchwEXYmVuszFRLdcPj9r2cBrIFK7J+F2XCCrstyH7UvjwSNAxWWAVlRTNX7LhRES3bOrm8vVfjAXIuiscMO8ukUDQPULYHtiiRmxnDUmdNM/RWsDZqx7d0D8SaJaB3gJc194W4Df5tIfvkSB9qWASSiroB0t47DsH7n8zFmT0UiW+piQgqdg2c3u2+AeTHm4fYhwae9I0rVErrQu5vZDb7OKhuFSP6RR8w28/0IqrrZfUq1/9VTRCAmqqSThJU/JaPxfJhZnT8bTgunkSi5IXFg2u9IhSMCLx7+T8eJJ8ruG0BFbSNK1MLSO3zdHTu8wB7ThwJk4HiGeuWxUyI7jVAC+Qvvb8TKtfdGLhKbFqo6VzNYbESTdEQVITNtwalxnaVu7yXAPj6rOvETWHrJnT8s8XBsKZtb7dUCMb7R5bf97mxKFFv7mdrBISb7RJVLeJ9Ze/by4rOZhNhpGYNC5ItJv3G+xKxwgPvj93lxKh1VLfiUrqUKFwvZL6kF5pfvHx+NqA/dxFui+0/kMOJBXVF5d+oDEa+X3f5gPu46mvzY+WtOJIQKJK1EbvF4uXZ7v4sMxasxg3S27itVIRHostK/5xHCyzo148mZHtvO0fOdv7uGKy4CzWArdTYHuY8qigo8i2+3g+dm9VyknPGlr26rLV0AuuDvdmAHg+dm8lijamMTtsJl1W9C/83CTiD4CS1HAf+tN/K+yr8SqzUU1lQEW5mYXLpBq77bDv6/OWHyypoJrWIiqJpGNxJAkQmZ2hyD4y2dGOSarJMSvZqk32WIEdtgfg6cLCzbEiSPDObT5BLnKw7vD5h+DHN1+gi1qip5LUYg4Tvm6jSaqpJGA6qSVp6W8eXx+EMKI5M0wSZI+uKhQUC8drwCDxD7p/ixbnCrZB0QAjaKomYleNiR2eIB9rdh0K7PiEwdOSEr9VK4htP4x2dOGHnSs/3Ej/AMO20P0Ir2Ta7/JSrhq+kph0UkbU45X1oYuUrC3HaO0+cNmCBmVnlUuZMe0jqnWjVG7NU3CYpsxT8u6+8Nt2B+xK1RQ2rkkE0i2kKpDs3Wfe5cLOFQetbNErbVRXSK8rr7fm381mBnKt93cSJYtNGwc22xFR5JOVSG1ESTt1RUTFIUiMw5rQ5OYtuBLnQMkLqcWbs10LJZxq9+qQbFS3W8mDEm3BJRNbWFBQ1bbRV3FzD8fJuwHc0kI315UBkA6hyUhuER3d6Vm/7+CbR69U3r1C0J2Q25/mVauV2yq979wX8adIWbh5tLBuYxZvyRMYiSHkMrXroQ6tt12/AR7JLWNb5Ox8k8WSJQHTi5BVukNu8eZUywbEOHZLEs8fsW3+D26CHg5LdUcZ+5fDnPEqqTQwKg6ql4Gn5BuEo5fILOG4OATuVXuAFSsC60z+1ET+PFfWrKm1U0dJ5UNzdUCEhYOvsrVRMdiXRqj/AKLGlMtmLCNyymJRr9YNg5VVHQEWmrtHbduxALZsrMiXN/BySCKMc9flbMCZEDdK637Drw3pLHnsC+XMkz9/JpwmwHagsrWtNtXhLIet11HHekPqh7tM7SP9F47vhwxb15AtU2oCE4NmkR3Qz0bTAiv/AEXs4vFH9reNrepPo+0g5xtYzdvSV9dXbEG6qttnDD4MQdE9siIryvIGhmtLS6Ck29BrrKT12ltIrreFHw+LEx4fYd2/n+ijjfqjnFQbjMakknjpyD+aEXBmuRFFurBMBtt+y6gSSH/O4nsu5mFrQZL1HJOXhR/1VUd6RpAe60r7T5xGzwhimwvbKZ1lVEHTCuXT5L1rJN2GuNTfYaqojfbwo383jxfJiLZxdfVFDiiJWINALk1S2luIvF5sQuVhaoqbrI8v5/UjaG6u1TuQQqS4WYQWRWdQkmqmZAldqiQDu33d/fb7l+K/XC7amWpHM+teHkxNIUBSuuAOfSFIisuAiG7b+iw4ZpRqS15s0BGywlyXS6y6it/3sFLI2G4JrWGq2TT9KLNuukTYhQIrRV23gI+H5sI6NjrrosDzI2uqPN7RP91AdSuYp4S31Co1SVI1bkoZ4V20duxLl7gC/wA6eOkalYFaasJWZEZOFdX1C82mZkIW910pEQ4k6J7Xb+sq6p+jxpx0xCbfpNTU+kDpUkgPw7B3YgYHtjVFPVpG0x6rUEXsokwJQZZ5dvVEP1vNzFh41ZmjSgr1Ud1NE6vMVGfrGmKxFMG4AuPqNcrz+q+W/kSVw6Z15TaSyISjapbVbOKIoZ+RjYJFt7roVVVL4MNqv7YNVwdaSdMNWjfRYS7iOTNWRfkdoONL/nXlxXs5+1vXdG5jVVQjJqgpHwUo4Zt9d/I3mCR23F9aHBLfDzRfn+yiV+fDlRAhc0IGZkkaejVnIyCTM3iSDuLVQuM9qtvECIGI3CW/rxKOOJVWTcqyTZsQFeQqRbXn9rC1ZRBsMyqPcsNcnDiGcOnFz1cld6SBHaZ3Gfslh4sD9/cY8d5h4hwQcvURobMJrvTDbanIFOLe51pjPLmTNwCLFm4N+2VJENpDGx12vee8BFISM7w8mKKctU4CXoYZe1m+UDvxVGBXSuV3WXXCNm8UviPByymSfqZiQzd8nJCCiSokBv3SiQ3AW4bwECwFc1+1ZU9B1xVFMRkIgbeEkXbJuZykjeQJKkI3fWhxbb6PrQZqCrrm7Su5AjypmTqs0k1EWuS2Yygmkbf/AIrHfeC4mW9Xwq/LhvT7muYsnRyOSmYxCqNiWlGoXX91zd/5Cwpmh2qqqoirH1Ns4oVU2iDcxukZErjNAVf+deIsJ5odqWraIeQrOLhGyvrCnIyXcar1/tVcICqdv1rkw3C0j3ftILz3ULh5JVZcoaWR+Y43uDL+IJbUu9K37fxEl8GPI5lBGyzNGdy7rOGYvVwi+LesBtEDK1IrxVKzeXh6sMJDtC5r1BE02tTkPEEUxT5y7xNdd4qInx7pCwe/8CQ4t0a6kqmyBga/lo1pHzzueSbkTTVFKwH7XS5yxd5jpxEvRqFSG/PumIlzKUePGbxNR4K0Zd4uPX8ZbPsPNy4jVhbEomsg/XQWuC7hpt+lcHw78WB4rPNXijYnlxAAKlakqr9xUgx1IcYu3G9ZUiVcB+i33hz/AKe+3zWYxkoLULAdbNTFxrKouRTVVtuIi3bS5d2NhZIJOQywpxyq5j9EGtg2t7lS3l4Et+Mj1dDWyin8DpJCleVwpAPQXlxrTJKZbNcrIJF1U8cgIIGkSCiQ64neW37Ud3w4c8TiTtA2IqFv7J0iV8UV9blrCwZuUQG0VFWv3R0sdJ8MkxKwIpymkIDpqocm7+S5fNjzOUp50ooctVTFBH9EK6qQiB2D0grhEpKnklkzSrOKtssC5UCIfa7/ABgcotqd5orolYpkomDgGyQ7+7Sb8v8Aqvx4TWdQ/wBi3csV01bANIkiK68eURtw3a1MwcJrH66FUQ1QVUFIbC3bf0/LhZd0xVNMzc8SRkCA3Daqlf4rF+jy+5iGUXKKsmIbiRS7P7KNm6tkG3HJflbg3denhrR9JWqiQXFYN47cG2oISUcpSPoZsVCJUVfQFo8+Mo0JnfI5cV4/bSUI8eR7xsYg5QZLiSBgQ2DaJHeJePy4tS3bgg92kykCES0v4k82n4eXHVeHKligoRad3LmfEFHU1VcTrW1FGpKSqBxTLNmlCuyWSbpAQiPXbbi0RKSyrycRSC690qNv+aSxndbtxM9NRX1JJKppc5Cyf7fgHEbH9sdnKQ7iSpymHPpb6veriD+6+3lu5/Dh55yYLU3JKfN9VtIUUKwyyqd1JOH7CBeLqOHRkW0OTCeSVE1bAZpT0lM085YtXES3SSVVHYR6o7MAaQ7cBIo8el6HYtQ5yUKZ2/6/FeddvKRVAeATUVG64+9mxt/1+GDdc1ISESVBW+o2ktFTmXNbOpqSct6eVJNV0qqJXhyGd3ixClQFVM5iHWdQioppPwVVK8eS0v3sAR928asjkUXKrJRJFwVqSqis3Yfs9/jse3ZV75Mf4M9CiJ+H12Q/7fFovjuioFTOgtiUM1WeUqm2ZhqKGw5f8+OJYqfkumNVEsYjje3RNtWqbNrFRjZNqFgi2ZSQ2h7i9+HTHt9VI/TWNqbYhb/alwslt/1+PNOjDUK+lTGRaVqaWoqedVxCyXqpcWLdJ3rr+G9quP3yHGS85mSLjNh82VZivfEsrSUu5+98uFlO3/NOBUbE7SK6y4eClNwf6fA5qzMs8w6sGp2slFICq3SauhUYCkklpclmqrfdvLrwBdYnTRFObC0bVTIk4TjW0aooikGupybrkrbPYH5cdJtb7UUmBalthfX1yuAh38g9fzYYuqgZpaLxKoYEmtpgQppJEY7P5X/dw1eVLCmnxi9SRAp3W/xdAjvPp+1vxjyadl6FvRdEBU08YG3RvGHEU0uVPXVEQPaN+wfm58Po1By4RWAYorvDc43fLvxU1HVN8RrK1VArke4CEGu3/W7Paw4alSQ+hQEJWBbOCH7RRk1G7/X3niLjB86tbfFThKmwURNIHLYQsNchXcEPNzmJjjG9H0HVWYNRLMKVYcY6NVXSHpEtxY0lPOqZVbt0l6miLiVMx0NAiv27eby4zJltHMZas2LB2SDlEHVgoLkRJFd47On2carh9rJacLFZbiB/U2KIhdmHPSORIPTl7IkRnaSnDl+7gj5T9nauaceFUFX02ugsl3SCSocvtD17cTtK5dUa/j1OMpD0oN25nc5Ys0FSLzFxBX22j04sP0VWy+4U4RFURdjpcdFylqSp2FzCA7BPoL2MU3CqefAmg5lSxoISJOCS23laPmLHhLVKxsAqYUFLl6sOkfQjb/c93HGiKK3oqLWJy1cWGiouRhd3aV1uJJrvTExWu3ct3Ljolb1tFsFxW83SOGUkbiNMXLM7h/TioXNd1e1ifrdPMpqT1dIiv5cIrPxFupZaSfNtPHrjXG+8RxzwrZJuR8MJe7gcBHmXkykJKWViVFYREV3Gl3A324rGR8XULPOyNczLN8KjhxuJUbh+3Hq68XVgw9Lf0qaZXCZXCP6vby4maDZOXWb9KxzpskTJUwXAi5tUXSW35i+HGnslxyMykaEdXNzLP3uiF1rrJFtRJ/qiNGJSC0BWCdQyTN00Y8ESDZcUhVA1S3fKWMXR8lV9MiLmJrieTHwkYkPwkON3/wBUEcANORoqmIp2tCK4vETnGBpAjuEEjK0A5brgx1C0U41TBNvjIZcy5U66TRCQlFXZvW9W5q+p8rpmY4YZiWZN/WiCQiuleuI8vLgeqQb9km8h0qqlya8VvTE0hEjDaBcv9LsWjKMbc2KLuAbfpBH3/wDaBwiTU1Xyx+NUy+fDmht9HbSJimbER3R9pfH6l2t7R8pFtRQ7Jc88pSqlKGkZJy+halMLkXNvdOxHYqO3YRBtPxbPDg613S7Ni9Jwx9P5L99vkxk5mk/ZLJv2ZqpqNzBUVB2mJjyY149bz0vRNN1DLGSpSsW0eGQhaBK27/3vfxxzyn2fq9Y3eWNMtJfditfwpUylSF8lD9o84fuUDt9rEkjL6XLtU6d1uKxMoOYtbaZDuu5ebEc6frKjeJ82MB1MX9S3jBaYkiI6q/iERbSD5MhDxFiWpOpEaMm+OkVSTaKpEkqQjcPl/DgFLPT9HpUAj3dWLtH1E0m6YWbyYEbhqIJFpjcel0kPit/Dj49ZQy48pe+iSaaMILTbN1T88slNMjaLrABik4TtutLpuxAV3S8JXkWpTkr60YkruSesjVQVSPyq8vuljM1O5q1Bl/IWsGyTxiZWmmqRW+0Pgxoqkc04qpIrjH6KrSwd4kV2M3UWW4cPvjWUhY6dpDjqFL6u0FEhjIVl/Mbs25qUomo/jMzqjnI9Iv8ABnFrhIPZtw6yXZvGtK5mOX9W1DKqJZdzYgMkvqpJX6Q3jtHBMzC7RErFt3UUwon68BfVXL5xa1VC+2/YN/Liq0C9qGRy5zWmJ5hGNid0XKqlwSpFvNVDbbbYA8+6/H6i4JuXEVwoS8+tj7JCQ6v4YehcputJQ0r4jTbuYVmFHiR0zE0iIOS07f6cuJRqbwRK5mQLGV12/cHs24iW969pgYkOzaRdGJJmrq2o6I3W8w41C8rFFpLAsiCrke9VStLfu/fx9b+z/EoxOS1CIoXCRU5HkoI8pnwqW7HyWgxROSZgAFqG4bhuHrvx9gcoUuFypoxEuZKn48P+7hgFv4X8lDXL1Iqv52l9Si/5cvu4C2YRWU+ny3ASpiPsIK4MudW5OGH9qZfKOAZmsq8GJZsGrNJRN2DvVXIt6FjVUuXrv3DjPVhe7CRVD8GFA2a2y1GnyjwDsCt/zWLc37Q/ZCjRJZIHzbZeZJMHQ7DG7m9jFHlotFlUkCDw7k0oZwaVpnZ+g3YFeW8cwa1xTrZ02Em6r1okqNl1wGdp/expH3YNCg2B1EtuUk3jazpdrmtkBUJce3BwCSat439QJKpK77S7raXQQGBdeLlA9o0XDMfRPyfoiJgB0nsauyT9HCuA59xKjeO3aWM7yEXVoZsVg5yyrCQpqQORbpOtCxVkTdJrykgYkHvDafmxf8uJehM/MqImtl5lFWq42JBWeJ210jWMPtVSG3k2F3o7ekt2Fd2KrapCctZRcHl7yIp8g3xGr2osj2gmesnpVCi56bU4wSu+BzhE+0nFJj6NWWDYW66F/wD9nAD+hcdCDFvGzxdJFxeVqCQq6oERbt/kxGymVbN/GnJA8Ir7yEhStEfaHHMR45vYMN1LhDluFEdPN6f2/sWn8x2uRNDjqFaK/rhIaqCUphvI+gnT3ukh9EUafm5tcukcMVlTVRK3aQeLGaIGgpmlZ1vUcNMsnTtleSSSrAxDeBDu7/zY0mKoP4dqa52qG3Ay0htAjsx0igqas3XKS5RzB7vdJIHmKYAF+k2kot1L/wBukPTALIWu4h3JGP6W9JVqIEPltVLELnRlj+emgZCgHUwvFN3qqSvEoJAqY2GJcp4mn0GY19C1CgiPCtIh2zJTrvVVQL4e6xbhHm37Tw4DdpQZrEaf9Tg1ZZwiObUglH8KkqkoUWkRk4M1dUTG7oAUvjxoDLGmfzaZVxeUR0xITTWHNxxT5WJC14eqRAQ2OhstC0d2DAmNtx4WgbBRWvC76wfNgrPfMomSri3Hahmxf08wkG7xrl6+auG5XAqMS9/ARBi+QsyD+NF5wy6Amqqdq6RCrZeXSY3hs6cWJwVqd4AOwcV+7uRuDHnXSjFQaEeVYj7bNJQlOOkDQZpE4mKfev3hby13HFOSM/nwG6XI2sDCrX/4G3HcqG4LREw+DbjRHbupwFZSlr5JzoyUI9DvTAtLv99vx4z2zbmwiUWBObk2iQJXFaJFYNuM8+WmPtLTUYyESUwmrGm8UR1lyK40iJBqqvvDd0DzbbcOlGprpjawmSvEiK2GeFvv/kvBbj6O5LQq0/k7GLxQsUJE9UgWVS2bXBXcu7lxW/z8UezXUZq19DaiRGkXoKGkecOf9FbhW0VSQCQt6SVblxFoib7q+fyjW5RFs4RfNiNUAMnMcugAX+IjHYOGrqWhBIeKm2aCdtpa6oj7fPbj6SPMwYFOHZVC9qmnEo+SJUWqqkev3ulbfsJC/qHFY9Fe0vmA+b03Tc3Sbx44vLhhjlRVVABIjsI0BDlEsFtDUmUSbVfnUV82a6uCoKMm2Mim5Z8YaQCmqCqRXXdQF7OLGpwySJA8eIJDd3Wurbdy3iN/9N2LZ2sKSCNzkcM6ZhxFrFTLRwTZsFoCBtULyt9ssHfsSUxT1Tz9RRdRwkfIC3apKocSgC5JGRWnbeOzpxfUu5TQirxdgJOrLicpAlvVm4+5W8j+updfvYUKZh+HH+Ho27eX8fS/SjbZzY37Ug0rltKFT1UVTl4zfJCKumvThX2HyfZDbhpE1PRVWyrem4GXyvlXz28EG30cdCR2gRH5eQSwIJVZ7mSVXnFjvCsDlKRrgi0pVmqXldAXV/OwsoqDjYksJeyePoJVNB0rDPSi6pgclW64jq6TtEkDsLl2XYHS9CZQVFINYqMy2ycfrO1wS+pPC1/PaPsXYsazSKJtkvYXFrFYaq5VZCeodZZFNePCeaKrtOsrFeUfc2+7i5Jrouky0GwiQDvt6j/3MTnasoCKoPNCLgaLhNCLj5Ro8BBAbtK8S3fHgv8AZCyyobM2oZ+OrymG0qLFu3VaiuZbdUyE+Ut3IPw4vrCymhBWtugEnUBLe7EEtpBv/p7mPN10UnihuLSED5buXG4XGQeXUY8WaOuznRXdFaRKPkB2dGw19mFEclMq3Gp/7rlRCopDcrpvGZWe13+F4uul+jL5q95xa/JCsJCksKyjY+VIAA/bw4TE1VEzECLwCIXY2tJ5P5LtES9KuQNKitzbZZukPxC5wI8+MnqJoim6XqGnKVCDfSrpVu4bJOjVSENIi8RB0juwW20RCRRipBXCZRWe+xCqt/XPQbMgS5pULh6rwHDzL3R+kVeAltH1t4LvF+7hr2Mbx7XUG2ICH6/IbvFeH83DihdtZZhNu97qWvH4yxbxd8EIvZH68Ex4G/1cR/PvYq3OmoWkHMVvLbzezg+9npp6JejcwKclIds+i3Xqol0FBu1z4y00jHwkFvz4AiwapCeiqQ9RJ2ljRvZYv9UVmDVYUi026okpbzgunu2Y55ZtVYI+L6l0fjb/AEdz5P2hVaa9hyjNFTj2ca5Wboap2tbbjNJWzq8Yjir5pdlzKijaTRqFCjGJE4lEmo2gV4Bql5vAl82NmR5/WPFqvEkPbDhSL75YCPaYSMsqY8D6J4FT9jvy/Fjotvl3lwypdJCeJ7HmUVRxaMkNGINuIBVW0VVUuRxpeLDEeyDljRc5F1bHQ5NnUPLNHiBC6VK00l0i8WNJULox2XsGs4ttCJPdd/0gcROZ17WnZA+Ug4gx2+ARLGtapgyppGT5ZqyRULxb0zUtI8MSRFLelJVBfaaWu/FC33dfBQ7KUmkOdkSCjMu5JVoVvN3qAnd7Pe4oVfjpVtUDQmYqWzaq597bvSeao9XiSHF77NGi1ztgXI2iTpYQK07ru6FIflEfhxxrDq/WIR1y+9fo2vzTs7vdy/8AipWmeyxMVux+lsDmLXEUm9dKpaTabJJIDEyvt98MN/63DNFq4lmzPPjMtL1Y9NmdtQGXKCRf+PjU2RfpD83zFBLaKU9MJf6J6uOOtD+Eq0u66hsH3mrX93HRqOmHKFcHqHykSySWUufHDk8iO0nmIkmkkapar/V5BVv/ANlio1bTXaNp6WTjX/aQrFVY24KiSukXWQ/fHGvqXQBxErImG4+LG0g/l8CvOrRb1YxcntEGTS4rf+lLlhu1SNg0JRSd+pclpJAmUqNaq2dKzEtKi+kvopFJSLlfaRO7CvMsIxPDesI1ohcgobg9IlEgIL0iSvu99UceRQbFRtEmkA2qwO4h/S6T10Ifdw6cEiRKLJASRA6duhts/S2/u45PeRaCuenukv0Zw7mnaGY7Yow505fZ3TedFYuMr63YwzNFdJQUFGdx6pM0FDK4Bv8A0o4oy8b25YW3hK7iHg9N6rofuljaNLJIvM16+BUB2IRrr/StR/8AIxJjDMCWEDbDboH0ft8bikt7boyIRXDjrnBwEJLBqWafbqjFlhL1U8Fudu1+63bbi51/w44l+152uKCbouaopNbTWLaSEo3Ijt8IqpK+IcapKGbBOPEQR2ne4+NJX93A97RFOMzplF4KP8XMw9m7SH8OGrNrbe3/AHoJytKUf+Ki6A7T+Y2YWRdTV1LNkgdMKjbwnDP0UHNrckLj+xSS61Q3W9GAuLBmCxGNpe0fL7OLplqz9DPJHNRgkAlw9ZQ7gtu2xVBAf3sU8eYTAErburV8GOc8XD1Wryh2rtHk8ACt7juA6pfdgqfnAYJUeiaQDd6xaGHTdvLFTaq/WB1USEbuUvHi1ZwEiVGlcG43rQkrek7v97FRaqnrFaerznbeHmwTYddD8okPxcMK75K1R2KDRQzKcIpGPexLgQEPbEsFHtL+n8ubLUfHDx5f61fAU7F79n+eBuAORHi452klvHcdolYONbZmZNRuYtWpVSrWDmNNKObsCbhHkuPdKqnfdd+1+TGmtDotZgkXdXMr8MnY+ystsbElos77bHTL/wBysapz4L0fmCk1x/uog3IPdPbgbOuznT6GmCWZT5dRuQK2jDFeVqtw9WDXN04jmBly4pZeU9Uk9KwlCQ1TEBV8J+IPvYc5gySFtgmh1LGEoh6rjZRHpbgqhu8AJCkH4sG7JO9Xs+vmx8wG9EvbNISP72HEx2X4p03cMHWYrm1wqaqpJxwbt1363FihaUjcu6BlqYbyqrlufEPTdu9JAN6QjbzeXFnWWo7law2QOiS+brNLVFG7S3iG7YWDT2XyRSznpgw1RI1HCRCRdGkX7uBIKWkSfKVniv8AlwU+zWZhnVSgbt653XfyRYx7i3jvqiW5s1zAY8yvtJVOHAP+2FikZiIIryEGfEiPe27v5VX93FzzNf1YydxyMLDqvm7haPvUFiKukOuV/T4LN3TiEnnleOJxm2a02qKIK2qqk1SIf0vKR+7hu76+ayrOwVD9lw7pKXC8S27bfKWInO5VEKsrLfu148rfcSxYMjVcylZh8jWDZWMbmKukuKTVDw2cnvYTzRPNptUM8lR7w1Eb2nBqG8ZpdI385D82GrBQa+UqHfW/JWX+1cBvMnVkW4KqrAleCQjd1EP4sWL+p2xMlHQ9ecbGvGybv1UqkS6RjqgAOhxas3nnaZVodQKVqwo2U4XauNVMG1p3eI1/Ddh52R/zzE4qYM36/GcU0mnBJfSVvK6R3K6pd0qVnT8OGZOTFURWS66GyuKgRNElR9aOwDvbd+qWJ7J0tDM6lQSDhlglm6StqvRqjsLETmMloV5VG/ccy9Adxfryw6yxfosMxoGVkXgpN0pRuquuuWwQBW4zIj5MYSoGUluGvVLd/aSSFWCpoz9JXajwQIfOKeM2SkafBlvJVQB5i6sajms1+zhVEezSqWvKTlW7cjJBT1yA83PyFipuZ/sgOrgCZp/0p+R+8L7p4e01W0IjqWIeonXC2oiZfL+kMnH5+jcSUXd6P+xJYoxBwsGzNU7iNU3Rl5FXRK/ixK09ndkFTUM+girmNXZOD0gQSSdEIJaQpWXWkXThu/zn7M5Ii2KXjdNIQAB4B+qAgPJyJebFg1bG2Sv6s73SVS7Ju6JqQPGzh1ffVQV/dxkvMRJEa8qTxetpDb4u/LGuz7QvZVyti1njOqI+FbvQsIWkC/I1zSHZ+i6LsY2qaqIGsp6Wqql3Kq8XKv3D1gqokaRqpGqXSfJii5kLrQkKaWoSacISSbEWy8k3ZqtrhNwCVt3jLl+bEDDqgzYyAIM0hTN49sFM7be/K/EpHqgMozWO7Y6St9vDOP3Rcg5LQIjeOLxFIB/wwv8AeD2sKKf1qcP7EzYqtmsgLlrpJWK/rbgsu/Sj4bOnnwoLi65Eo27ugIRIrjvs5Lvh3YWRBsk4TMbknB7j3WhsPpL3sH3I3s/xeZ9OHVkrXytPt414EWkmg2BTUVCxfcR9PL8+DHHxaGRJcejWaAybMyJM2u8nHOKe4h8Y2+wN3vnjkkGAvFDbgqIqheIkhpK7OjePzY2IXZDoImotl863+iBqrgXBo3CSqWkW+3HT3sh0EqBLHnRLKEleQ2s2+24EhKyxLwpD4sVDUCf5FV9ZaWQbEUk0zXBUVDSNuagiGkR/0+THTdUAcKGO3iFeotpHfz3XfLi4Zo0QjlzXElTDOYXnmdiSqDlykkkRXhykO3ruxTxi2aqaKN6qDhu4sQItK4tvUX3C6cEq8depLOCMSTANIVLbwFUhEkrxVHmDf73Thuiy+04oGYkqkBAItzLeB3W7Nnw2378aHyQyJp7M+gntU1RXc1Dehg/4Ako9q1VSILAID3oKn+l6Ts2hi7n2T8sAJNYM6aq9PDiAjZHNegbelrgQq1prSX3KvODAof8AFZH9XLKpiYrJCprgdpJHaV91nydNthY8jAo6gvIlskImAFp+riJKw/AV1h3ctvwXY12XZYyy4hNz6M5azTWS4QhJOJb7TbpaSX+C9I48x7L2V7NEUWOcldaYaQjbDoFtSK4bvqeIdfa/JYL7nj+RJY+TibUyDgEFWp90VyRFbt5x+b2bMPCjQSFbSRXS1ee0Tt1Q3cweC34L8a5a9lvKxAFESzRzEX1Rst9SB4VR6WP7U8LOezFk1+QUfziZiEsqrqiIxwDv0tL/AJjs24tbqxL/AO2H4qHWGvyKxgsuiSiIKm5FRIUg79qYikrb5xHmHz4W4hsLPbwy5aXcEkBd6kFtnV5ubz+ziezEpdGjazqKlnDleVTjZE2aDl8P1gkh2pXWWh9laN9g4iWrOH1EUUkRSIxVG0rdtgDt+YvawWRQVw60oX/OSZr7yu3NVRt7odXybQLHTVg8JTYzIStMEiQvE7PtdwmI9GNO5fdnnL6qqEhapqGpqrZOJDiDFCNbajUD+wP9EZ3GCXUeLAn2YMnQUIwruvCINxfwYRWhZpf818JYC62O38FWVQ0P/wBVkJR1KpETOx4koYgKQiBd/wDpfD4BIgwppItdZZI3iV6obiVASv5gO60d3P7mNYu+zPkksSbZPMCv/SoBgQCLYrhMRIR/wXwEQ4zVU1KfQuspykjkl3zWMlFWoqSRCWqHRq6Q+7twSO2S+tOi8UQVTUb8QxeAu2Ir40xPSdBfsu8f6IOsfBfjIdSCCUg4AA8G73cbCUSNCNccP/FzQO8d/WFoc48w9GMh1VYck+P5t/6ofHh5Zi3Jfch2rUXZ4ZuTyfgVkkSIdd6FwpHf9ur7n+7i0U3UMVUovnMWaAptXSrUVBb7Ct0iuEbuXcNl3LvxVchVTa5LxKyTZJUQXd7SA7BPVV5t3L7mG+Q9gsZw1drdV/YkqSu8bBS6OstyXz4xlUwDrtQ6XKX3roNG+TTVO13h+5ErgDFwRiwQIjM7S4O23ms6vGXNjpw3R1ETbooCRl4RK7lv6thWbreq3DxFgil6Vg4NK24Fff8ADdd47tt+GqyQEXDEjdZsuStIOkuU/Z6d+Esk8TXVu0z724DM7hQIT+H2+nCnCtjG8tJJPSCwiS9n4+r2ceUag4Ifq1pWncnb7Xwe1jzhvejrJIrqrXBckKqW4/Z5wLE1WaZoz0a/mnVMJIvF1mjXinFoGQCF4jtLo57rsQ+Y3qqUouaYM5Il5BkkDhdpZaSQcYgN1p8nTeOP3IVrEPe04/SnGyBRgKMgeJu+QhJcRLV6P9zGu+0Xk5kHG5QVrV9DwdOoVCtGmgK8aQCquJLpEqFqXPy9V2NFTUYi+J+FY283ogZcYjukvmDIJGlxAEBb2+zES8vK4zC29DEpLJSqDpNHg5AeHGxLYW3EXwEqujopNpAkw37dUt/WWN0JLiDorw38KsYGOwgG3q9rDVwO11eivcFnKHL7WLA4g6zlHDh49hJNclVdymgV992/7w4jX0RWCFyzhhNIJ9BEkqP9ObHhIFAmjiolFusqX2JeTbg8dnEUV2dWMLxJw34R5oEYCZJAZCe0x8w4BrdlMcQm2Bs+UIN4jv2n5cbr/qdtAZUm0rKdzHRY+iXAm6SRyj0krm5gWqNlw3jy333dGFd7GdITSfcKPlRXAX47VSnj/SkmcUk51HxtTdJfWLUiSSG47i9sfH48SCbM+hbVRSvVIh+9zef3sXztOxdFD2lKMZ0CEQgj9F3vFDGgBB+n5hDZ1Yp6IrJJ3l3Vgme0Eh1QDkuvEdvNu8mOe1jHVYiu72yuK4ATu1M0WppIrLEj+gMzK4t3wDv5eXCdxkOiqz1WKth/a6oDv2XfF7uHyaBpXIpObtJLve9SE+crLvb27vNhNSxcu6bPCvsNLukhMdglb8pc+BEzXibmqp35iV5gIXGIq7B8nPf4sMX022jpKLinj9XiJV4cczTSVEi1dvm5MSg8xGgZCnfYQ90NvtX/AHfJgeZn3r5l5dNm78SceuSItJwOql9kVw2Fv6t3jG3BlBTjUOwJCVz/AFdqQq98KbgWpjtU1+9G8SSEO9ssLo6fi82AvmoJ+vJ4z1yHj3dokBWgGqXIWDM3XmBITXNckTVAtVM0rbN1m60dtgj744Eeb1jMp5sgCFpyLvVVGz7XVK8fPgu0D26XXn1QrQnZLF4WScTY5VJFV441R73xeQSwXmpyrhxwxvHhJ32dxxQlZ744EPZGJmOT0KC/qgiN+rcm5XVFUN3hHnwYlo0EEyPhohIUiDlfrjYHtGQ/EOM1ci92OS7y9Rl2AijJQHf5O1GBLLpEaq26QV0rNg8xK27cC1xT4S7100OoafJFaElUlbZtrfvQsv2K/P0YJNBehFbI6o/qQoJqqntvJW7Ylu33YCVrZvWj4ABIUwpeT5QAd5pfuY6NaNdvZ/PxrA1vwx7xKsZeZOU7TNWFJMH9OpOvVck3HSqhqud5tVw5NX/cwJsjco56GzqoeYdVnQrlu1kQMhaVfHLqn3RcqQK3n7uLlA6yVaRoJbUTi53VLz+q17PxYzv2XVVv64bL8FQtH1if+wVwW0xqVLhGrJlnlZMNc0KLclmFl25Tbz0euSDaso1dwQcQOwUgVvMtvKONhVcTwcyqiWQNXTAGgEIsnS4F9r1N+T3sfO/IlW7O7L8OGSu+lEZuH/rA4+iVTLuUsxKiRSRHTMG56pOgS397+1HC/iVoQtmnvJnYnSKr+SngqvDdEs1cvB3nYgrFuiEd/NdcOL7k+t6FGtd+n0u1f4iV2s1VbJBtX/W4GC0jDtWuixZkuoFl6HFJatnX+ls83Pi+5TIAlC5imkFqZxJmH1gFRt0l+q4vnxhbR8OZ8S0F8H3C5+eZY2yXy5OJzeot+eZ2W77Skkj4aPqFJddXZyiIDvxB0HlibLNqn5Is0cuV9KoWivDNqgAly+sDtFK2+7y4pPZzfg4z0okyW2hJBZ8BYg8o3V2eFKgQKf8ApM03EOz7ccdFGmWRJ9FCussjdZvTUkrmjlukKtTO3HDFPfWh+tEVhJW83TZiN7RWXzZ7ndXj9XMugGfETz3uHMuqLhK9XkMdIrDxQ64dXZ8TQdIVk7vKz/p5Yb9qJdH+uMzGDq+lD3o/algxhjSSodd1LfWbncZgUijooL3wJpEmSRKiWxDpuHDFwMCgsiB8Lce0Lm53l1bb1b/dxYs0murmJTty2kQQh7rg/ZePEb9W1BRJ+TlY9uoIt+4CzHNOKy/zIhW84e+AirLlAgyHM2IWZtmYkeraomluLaXVdjG3aFo2Hks3a5XPNmimai09IGbZdd0SqHflsMQQOw8bSykVZpZkxTBLVVK5Y9W9Ky6wukMfPftINeHzwzGWagqpxFRyBF4P4wWGfDAzpy8X/FJb78Ow8Ksme1GxUlmhMPFc3aQjyVFp9Wc8Zqpdwl4ECx12iKSgV5ymTdZtUnGWUhBJAk5F/wB7YzHeNjU9p/7+KT2jNb87VQaSJEP1fdb4G6WOe0xFrS1WU7oARC3o2nOXx+rksa9gdskgJaIyfpqnmsbAojXkLIaVDJCJIJOtwetHxao3pDt3e3swRnCEVEdmmBAXiEgzCoEiMhM0kiDjEOoxEw+DAfyHZ9zCornaIZaNA3bf/WLzBgR+odmulzEBLSnkjtLx8ahiFXGTw+ypUcsxvxJ0KTP/AACKbNiAAK1J+1Ln82E1mbzhy+rEJa+kBFItxt9235fNhYqgmEuINJmoJWpfoCsP2tuFk5uVZp8SbZAtVUABNykrYHNfZt2dPNjkQ7orppSisE1oq5VkFFhMVVNU+8HnHm8xWY13k0wBhlNTkl6tVHiGeqqo2A9Uj8RWJb8ZIq4TcLKKiZaYGYctvixsTJp+svlVTeusxIkmFw8SqV5Bu5B1cOeJC9xNxUKT1pErozlzNMTZs3yt5ANyhmP30scyRSrjuSbOSRDZbeBEd9pfqsNVOAtRN+zbIX7RTQfkl9xfHbgQUT0UG0eqppbNR4fs2FcrzYxG8dKZiOpMHUMD9QjeNl0CFW/TtC7m/kseClYhUSNWnEFVg+3UFJASU8P6DDheGeOPSSTeKYq3qka5JvFSPybtX5urCnAHGqJtnTAUFEuT60qV3+tx4B6NiszE3cU5RSrFNFKltN3ZcCmkheW3l5cQ7imKWSJZZ/SDRRa+8yFIbhO4eYdDFjsZ6xAq0Q7q3VHXVGzbaX6X+nTjtSn7kdFgi2ciYheQyKpWGZfyuz2eTbgwMVXIFE/m/pB8ko5eQMR3o3jrIAOluLaNqH4cQ76hKPh3ShxMOOwrrWySSSXzobyttxYHUWiyW5GyVhGq6TJwreV937ff7WK68QbKqKaTZAhArR+uq7Q9nV/3cXsGYYdEl4daqdQUlSZOuJYQiC6x2WoEwQ0ub+QxAo0bQHDrcfTDrUJLvxTapFae63SIEvZ5rt1+LE+bgI/8VMUGKogBEqqZFZf+qNfzfixByiRqrCsTNmI77RF6Yge0h3d7jQ0ZmoviKiSh6edNUWa9Nq8LstTVERt97Sw1lKfim90a1Z6Aq7wTEUNvvaFnJdiyaSKqKbbg49Aj+1JRwZAIWfyvLu5sM5KnmbcRDRhV0wGwF036o3ABD+1wypjMCQboiYKvvKKjV9RH1OzFuYGkQikBffHDhjQ0JDR7oGdPNrbAI7ULrt/hBK/+ngxLN2rNBS/1Ux0bzVVT9bkPhv51d93zeTDXQZim6WFtGCPOA+sl1QHl81mJOOunokoiw0GqKg0afZpKEbVglcr9qQsDHuvNt+X4MSEa1BkiQIHKqpnfYIt1ef8A0WFLWa7Fvqs4wSuDcL1W0tnkXwoLVEhIxZx6WzlFfVEg5uY1b+kceke0lIWh3imbxu5eOlHLpZ8Sl5gIrpKkJB4BG0TwsoktJJizV1dMFd6a8S60hMLSC0rbOnx+xhNZlDpawEikrZeYqoOlefbuHvcOmaEakmXFI3N+RL61bvs5/wCNX4tHXzKsiTcmrZvaCWuI6u5XhXXP9zD6POVekSLdsrphuuXZvBD2iM8MxiIF0+EFdAROz7V/q27/ACLj9zEwLBgzWeM7ECRuMLuNIbg6Ct1+X3L8eJSElT6iYIqvG4Tx8S6v7okElyMQ859HNjLWS836jr5lJA2dkokuQ9w8Nqe4SExFUOTaWNVzkcz+2hkRY9OprpF98iP8HgxnHJSjZdPNGOiqiFhFJqkqWrKF6dAe6Lf3RiXvY01h107iznEeh1taWnvX1SplDwLm6JcEHD+sCtMVTESNqN4luC63Zz2Yj4OUphmmTN+2KImGThVrxbFvrt1wPbfaFthB7e7y4WmqGiknRPHXry0D4o/V7I3iStnTy6rctpfa+1yFvkIlrlKUgi8b5hRgsUgNJJipFyirh8ZjcAqlbs37dluK4oYiTtGTBVy3aNdRfVSu1BHaI+1hy61lS4RssI/rS8IYbBYzHh45v3Y7VVtto4/E3QCJAIbQxxkxwwKQLpAD3lIIGi2TTbIH3Y4UVENMthFsM92I1qgZEQBd4sSrJics6RiyP+MGCXNy4HIYlJfUqiAA3TMQ6ceF0BFuALcSbrgIh84jXWm8TssBVNW3SPpxFSTdyxIQXbEKhWHu827FA4T1L4JKZcoxSDRnIxMgSiio96nbaqkr+7iXphRNtUEdVE2sLT0RViqZJ7SMx5bvNtxB068lYgSeJAmqm4SMF0CDmS/p1YezjNSQ4WS49s+Yq8vcW2nb9kqIdX+9ivGQlpJQMJ9k6pztWZgnmhQcdULBuKaKTto2VSPcZW8YQkFhW8vPt8OMjepn6u8AQH2iLGh5QGJsOEkUU+D59O64SPAenKffqvlPVdSIC1v2JKxwXD5ebfjs3A156+2TDu4eZcw4msoUJC41tJI0HEzbCuKdfs/ViqzeXaKpCu4VEL9UbLrBLrxGpvJtwpe1Zxhbz5nSv/lYtVGxNWpVVCg1m2K6gOgtTKOEfF5sVmPhqnS00fpCzEuj+C7v/FxucPWEsrGApYVawNMr2EOQ+Hj1f/KxqQMy1qeqrL3Leo3jZCFncvoRwGqexq9uXs3efk+DGaxi6tESsqePus/98x/+fi0dqhusNYUK2VWE+Hy+hAMh9gsKr3bW7zSOUT20vzJHUNSVK+Lo8qPOY9OOWKFyqXSVpYFJoL2/l1LbT8OCbkPXS2auUExT0zcpNU0kAa6vOuke4Pe22/BilPENJ0oiSJCPNaWPzgwy/aKl621O5sv/AFiurUdWNaxniq84i+IEdK33sMVGT9hyCQCfUmWLcKF1ukA3Y5IAHU1Q228tuDQriFGNuwVINubj06QJncfKNuL3SVRtoGPEJkyFu9SvaqW7FQErTt9kxtw/igZIOBUcMhUUAwG4unDzNKlISqqYbnEv20KtCtXHB8M3FUbCIl1e68xkRbSwWw9QV7o0dwxIRLaQ+lWV13rKVrNpm5KtVDWdGGmtGxqIy5KlqlqfZCfiE+gsT1LpM0slcznKDNNDVpV2l4ud0kICWMzs6gbRrxwDzMWPal5oEi/8XByy7q1hM5E5sItawZzhNYFokrpRxNtA3DwfGRX8uO9WixU1hpMhgiLxF+cFyC6Xl+9VIvvrOrgQVcI6SyqQn9qJbcSUakaQktrL3cumJbhDxYYuD3IuUkdtm8r7bfe/p4cSDMFjYqGqzIRMbBV1eY7x/pswSa8KtUCaxSEeaqxaar1v+l82PsbQrXg6JgG5fooxql/qhx8dqZbmUlGopAqWq8SK0brFT1R3c1nvY+zMUlwsazZeBAB+ERwE38L+Shbn6sRQ8zo54YPMr+HAdrgbmLfxaTuz/s5YMGdHouWhvLq/gwH662sUzDoQdn/3csZurL3W54kbQ/BRQJrCz6QQuzcEC4++hgR0Pe1q6FWIPsnrQbSHzjgnTjWVayEf60lUHyh044MCQa6VveoeYsDNSUYU/KevpFbQZRqqS66nhSE9xfDjRvF2QoWn3EtOR7g2tUV1JJM9RQH7srbrdgNSxS30Wwp/KeiKk1nKHq3KCQcBoLkkNxkG4xDn2rneJbCxPLSjyl6NmKwqi4kZ2JVkeNZtTJvquGBCAkO6zf4sMcxEjLI2FZgFygZQW23W/auGo4gI6pqsdCo3ZzzUkp9kllTVThIpKmmt8I5uu9YxX6I7uQySG0fHvDzY0msgZ5eqPwC4gQVO0ercWPnPlg9ZxtTIvOJlUHlFLpShFEt0uPVZW2qiQq7FRsK0y9grNx26Sie07lu/omx5XlWSsTMJG1ZiTBgzVFUC+sAQ3cu5Kz38Yvjjhd2sp6cLc3tcEvrl9ab0NXAiIi5UWqfamvILAYbUmqp4JECZlFswVBLU4cDt67MZhp/tD5RNXzeHi6zqclHaQMGSZMmpXGdohcXhwdqXKV/OQpGvzbE1ZU03NIhu1bzdKjv6P0WNN1Z3zzUVZ7SEPo9KXsaaQWu6RK8KCesNtvIAYeCW3DNYw4jbzYWEuWzlw1FVp0KpiOFo9XSYkZ2/anu9ssNU/MeK/mY/Wi8tZZyyRJdZIQMUhK27vR6vYxaKgauiytolivk4O6wcTDxWwVADFRWdLCsoaRjiLpLzQoC9uQDIct1ttqrCTS+yHoVQ/exmMUg0SNIErbeawBxp7trGa8BliqZkKn8MJbfba4zKKSyqKl2rvC8NxbsIan1pLS2/1Ar6ndlvdlXD9JaTj/blgZo0XTzqBqByrFNuIbyjsRUt34JXZVvPKmFMju+rn9/FXYpXRs8iX+ETj34N2DrePuFn5Sz1b8MeULMQjNWi6XbEiJJpLye239kliBy3ppgwzCjXKTZISsPlEP8AmauLlKaJ0jDneI2PJCzd5UsQ9E6IVxH6RjzOA/7qWNOw0EUoKUllftOOODzynrUdRRbh9uldzshG/wC7gqdgixKtqmAT5Gbe0f8APngZ9qoNLPCSPaIm1aEfe/sv5o4I/YVP/hFngLri257g/b4wtZ6/5X3rb466H5Kk+2cyWLNwlkg/9XN/xYoPZxScoZ3UusqG3Ve/+4C+CX2w29Qr5s/ki6bkHyfq1vcog1VVG/d4BxQMi29SIZwUub+lZVmjxSomoozVERuQVHmMfNja95c6Jss8SWks+qaYSmZkesu3EyWbpXe6Rfu4HdC0zFM64jXKTBIVEngWFaO3+l2DBnMqj+cKHM1hH6katvuqj+PA5pVX+2aLMDHe9D8OL8sdSJLeKzj2wFwZZxPD5b2DT7pYJnYXAEsyKuRSWIhBC1K7wA6V/m4ova20W+ciyxokX8Gt/vli5dhQzDMSaHl1Ym4vbFXGFrR7f5S3A/Afkow5zUDTVQ5tqetkiVF6gqq4HygzEBt+XA0y7oCEjY3MJGwdNwzbpK/5p0hg15tJgOcKNp8lNPnNvtCKWKJSKBqx9bAG68XfyP0sPmwHrJJDhpYH5KHucmXkCwy3cP2rMRcA4ZFqD7Ij+LEh2nErsn6BWLoJpyj42ZYnM4kDQy1lEVTu71p8mliL7SR/8CtAvNtoerz3Wf8AM/Pi+uEQpigqLYXuwVkPshgA9sanbNom/diHwFjqh9ZvX2Yjbm/hkC3Fdzkrhbsnmf8AXoU3duUOUd/7IsdUmJpZnZkAelaEi3v+EsZ7ij4IXhH7WC3XBWm9D+fixVqWEPHaXu4OnZwlE42Erp07WU0WNPOn5CmFytqGmpt3buXAPLl6RvC4iHBr7NwHwFeDtJEqVlEh/wBGl+7jnFl+HNrpvGY9Fmex8P2lY4/tZUek6TkhoDMhVma5uu6gQK7uEB/W+UvjDA7zs7S1AVHRoxRwNZxijdU1y9YQekB8vUBF5sa8omNYepYeSVAf+IQVP30Gv7uMu9vaXeR1RUvGsDFsmfEKqiI84d0O7HUWGspcBIs1QMP2vMooaj2MOLatiTbsDbiqnA3BvVEv1pdA4r9edr7LGo4d4wiG1Xi4di4SDi4YkgvVSt3FdswXGuXKLWmYFsq2FVwrApErd+tJwgR/eIcDXOqnIeLy9mG0aiOo4KYuuDcNiVtmNG06cYpeTAykqzmkFuZVUAB2kEy9uH/O4sWQRaGcNLdJHIJ+L+nTiKzbQNPNisUiDb69dWl72H+Sl45p0rvLZIJfjxxR7RcS8X3r9GF21h//AMf/ABRsovtVZL5XqyFE1lNvmb6HqWoCXtYGqkOrKKqpbgu6Cwo87ZHZsJR8slmKqJPZsHpF6rdfZBb+y8uCPlPSUI6nqhN5Ds9Q6qqIzLS3K/X0i3e6WJWpslqAeIibymI9zfKbhVagVwH7vtY6lQuOuiOlfnt6Eln+D7WmTLNqmDqvIzRAFSJRVJcTG8C8vjLALz27UsJKVRGuaKqeBkWYMABVQek7nV4kJ+0GCkn2bsq39XPkV6DhST73bwCVl9g7+XxFjIfaeoOlaDriLiqepiMbN3dOBJEKaADv7/8AdHGiphI2kA+3rRgpdb1hlbly/vS+sQ0gW3/4svsSGqAKODDbZftst/FiJoVLh8n8t0UgIRCGkLB8P8LPC/FiSUEAuWsLf4tt9+OKcT6Lq8K/RPCOuxs+Fbaja8pKmM06mWqipI+K9a0xAKt+LcAlq7XV9t/u4lm+bWWJcKYZhU5vSO/+Ekv1/tYFkxkvRWdNft3dYtXy+jltBumpNpFdBICNV5dyEPhD4cRiPYjyQmacbyV9RsVlWHFHbMui33EPWWOhU1TAYxXC3WQ6cNSvS1dZe/SJwsFc09pm1tAvWiFpbFfN5hxXcxKloCq6Tko36eQOoaWqlpSze6/4sAXMDsb0fGzgw8NMVGkPqtw/PUf6u8ASsDf5ywP3nYlikuOc/SGaBu0b6twqoEZfLjS0JTCSWPtakY6PcRqtCZ8IxLxJy1QmqXVSUTVFUbCciPN7mKRpBcVoCXJzAP7uLblnlQ2yioTPKhms2vKtwQpR+k5c2ie+RdD0D4ksVAhArjBEbj83N8uOV8bj7uEl2vyalO3uj7X/ABFVPOBLSodwHDCJcU03WkP6UcVFRuaSxLJAlp2gVxbj6sXDN5uA0K8AGyQ3uGnSf69Ly4H6kuAVRCw4RuqnJ8QRkQb70gu/EOLeHBnR6e8SjxgUKwS9lWKBVcsBkjcGhog3BULTtMT1RHbYN/Jh8nUry2/WEr9+7dZvw3ZtWZRboxMrTbgHdls+1S5S68MyJEh6i/c8OGRCBms1JSyb0NZNZUEivI9wiHzDh8muzVTTcjGoKqN1bUhVbiIEB891nPyjzYr9oCneekNm3Hk3trr6wYqDy7hutD38eioqcWVZq/WfULYUz2Fa3SIPh58A/PJ+DeecIswVZtzbpHoD3VvdW9GDEi6RFNNbWQXWD9In3QX+LAPz6EEp7WENqrMD29W8sNbMPulL7l6hGYSWcJtXKq1t6QYIeQb9pCZvUxIyrxJs2SkdyhcgiYW83vYE01UaNM0q1klWfElpN0EExAdxlb8vNiyRKoJSSlgWpgg4C2207NIvB7uFr7ZAM0b0TCC+idZVBktUqjQpWvAQUaKpHqR861EL0twXCZ+bw4j3EpkM6eJzDvNhx6XSR3gRSjUt1hDygNnKqWPns1klm6dg91uvtQSCy/rLHRPXKpKIqo+Y9JLYWJA+UtopZ5qAP0hLfdIvOzLRMmpIxOZCShmCoki7fpKpHfbu5fJhjUct2TKqmnE3UVSxCrh6Ia4pzzpJIrREQ2hb4cYIFd4kOjeVvQQkY9WOSemQktuErbDEi3Yv626G0RXvNQ8xEtq1BD9i6pWoxU5KQbxqAWCmpPSJW/AY4QpisOx5kYTiSpCuKYg05MAScaZv1zXALrN6qpWbixi8XBhp7yVU5jIjt5MD3PT+KxLluBWpAqkRF7pYOo6x2ofFskNU24Wm5SRMqSZYVRNSlWxayRR8w/dv25au3SJUiEvgw1atXIvk0TBDrAhFUt1923l+bAzNVYsgU1kj01uAIbv/AGj9zBOp0FicR59JgB3e0GAalqMi9pOKZ2cR9lSyK5kzFsLkSENoXbeT/ewiUi5SUFEgJUvshLXtPDFu6R4cQvEbwsPYHPjzxW9Mj2777LR6D24DEVeSlFHjktaxZUU9nwH4uXdhmi4RJNQxc6+0AElN3t7sJtyAuU9MQHpP+nkx1cCqZBrEIn1CXNiShFC3PR0Yx8S2I9p8Qdtns4s2U7g1cu4EL/0So8v7UsVHPRI+Hi7gHndjcJcvLiQpF+5i8i03jUyScA1d6Cl/WCpYeOBOhbH2ksaKFYXhRQb/AMcECt+1A7bcej2tjV8ArCms4eGIFZy8vRbf97mxyxVN+sx0jHWcAkqAj1bBL8WH043h2s1MerVkl02ip9fMZglf0+O4fbwmH1sUxc2qNRQvG9XbYrbygklzeTn5catyY9D8eyHW/payT6PdBMpWuY90SCon9T3AqlaflxkoXSI83B2m43Dfu+7zWXY17kUDBXsp1qkvItmLUptK5ySRkA/xXpSEi8I7RwcHrfnfVik9V6v5v1qIoWoHj2ehY2UmKlXcA6CxyrPPVxV5uYTVxmvN6soGl1n0I1mKzlZ7SvVXUq1/w7UzHq7/AHl5fPjSVMjR7Wqqf4fMJmThV5a3SKLfpXGAkW0lUBDpxkepqFy9dSUg5ddoeBJZwSpql6mkSK/q/RYOaypJeRLQHamZh+eInPN/BcZcNm77Lz7DwK25bSPg0CHVv+yHkHxePm5cFrtXJaWbzgw0rW8dGBq/5rbd5S/cwJWr1FK5yqYiIOkjFW60hPrK7xfgvwM7uTWl9UK2R2UFP+AGugv+yUe7hL/oSWMKs56bF8xbK1VOEmsqkOl60cWlf72N0dkng1cjK5SJ2kigSjrVWTSIhSDgw36XV7OMmt6ByR9Ys3KXaZ1zSVStTGiHHenfyXcVs6cVCAGwPykJgUKg017QUpKsM6q80JiQQEJlUBFJ0qNoWD5sN80peYZ5f5UOWsxJoKK044MiSeqjd/CLncVhb+nF/wA7aKyals2KuczXaJUhpBWSV4pj9DnDnQM7duqDkb/aw1zDovJx1R+XLCU7QL1i1aU4YsXI0WqrxyXHr3q26/dbrht3ct+LWmB06V8zdKhsl60Zw2XdWS1Wm+k2/ryEQMlVSXIb0n3jK/GrMhYGhnlTRtW0WDZduqKpg5QVMthpK7SvxmODpDJFDKmqGyGfT5zHqzkObiQ+hCvcKgk80ktLit9w3ld02efBF7DSGXsXmHKRtEZtSdS6qWqu0c0ycYkOxXdca6v3cFtx1aVQ6c1Rs+BNLOqsnKVyWlLWiokkJGPdD1c/h24p9xpNRuWXLiED5WqVnIO3Z7PNi5Z+AiWelcI8MJXyIbuFAi/iqRc2KKSQC3/iAiJge1BqGzZ97Ab+5M6fYK1dUEtFRHZgy9eS0kgg3B+r3jkdW77Xy4qtF5h5YylL1ZJRvqxVSHgVTlF+CtSJLXQ5ht8pYk68Z0bI9kyg0a0qCSiGJv1bV4+MFyZH3uwguGzAZoCmsjGkBmOjC5m1S6RcUmaUldTAgaTfikN4Br7z5Nnnx6Q5QyHuoEtxeIvrRNyizkyNqrManKepeHSbTisikIr8LpAZgX6Iz3n8uKPnbZ+daskQWSEvXyqukpqjcftB1YpvZygcjWGfNGfRjMusX0oMskSDR3S6SCBH4SV4orB90sXDOs1hzfq9H0ufq6s84vHVIdu3mwZXCMdC9QyzVQXCSLdu8tPS1W7gAueKkCoWdP48Y7rDbLPkTt2WfcHGxBHQEkW9wje4utvI9w+Lrxj+thBKakkeaxU9xdW3BNm3EvXXlWmsj45F5kzDs1TERek726tpl3qo7dvgxG5AoIhBzCNg2qv7FUyMldXukhut6/tS+LElkXrJZM0+AI7Q4tUy5QCx0vZcXOGFMpYOXpL0zDaYjRTE5HuF7rgLukvLzHbjIvviPWm/a+9b+mYkNOXs/ciI1XeNxURQbbQGwRuAbrLvB7I4kk12xs0X79ygkSQXBrqggkQXb7d2/wDfxTaslgoiPdVJHIpKLOLASbDb/GL7krh91Xdt8HVgczFG1DULwZ6q38g+eON5iXIIeARPkHAdJb+saiKIqu63sbeWW0MiR01Y2SR9ZU+5SXTS+1VSVJVID0h282E1EnKpWGDYljSvtJICEvf+H4MZ3Tbv6NqQkYl48YzDe4mtwXJOgvt0i83gEubk8+DVB1GtVdItahSWSF47SPVHpFwB2nb1+b38euFv6oAkJSFetF5G5ETZDElRcuWZs8+qsZt0R2CkkaA7bQNW7BYlLFY9Fm9eLqNXBglp6QXir0WltNIT2iY4HdM0hMMM1pip3jBt6tlWtiSg97ard4cEKPSRFOxC4SS+12XFZ7XWOI1z4m6JN90UXRsdkTTo8xJiOXNEv7VuAXJQy5Req3j/AK3f1ezhi4y8o9IVmwQlyKqRuNy6uqluHbzebFuaoIxrxRswO5q93gp9qO8yvAg8O274+XFLqTOSiYhFNsk5fTUkkNlseqkLVL2nRiV+/pAC9rFlMVzrdLZEltwasdqCVS2I/JWwqf7GmUr+n2Ug3maq0n6CTz0ej1qVnpuES5fdHGWZjLmiZmQfMOGeOW7QlUktWRcFcAbgLm5uXyYaRn9UNzfpiJjICCpuBXj49rwqTZRBVVUkgHqMD3bfLilUb2jqHcqerZ6HkKeUWA0gc8Rxzff0ltFVL2u95vDhxV2+uiJMbvEsVZbpZhfJusjq26VZCyby6buhAoFUUXDe8FeIVEklb/5XlxaIGl4en2rgIuNVZiZ7dVXXBW/r3kW3lH38JlOa6cW/arNnzN6kZC5TcXIWBdsGy68txezhw1sQjW7NqCQ90AJNtt+l7JjjMuVlSfZPkS6VSW+ha7embHxChTLJcB2ioXQBUbGCqu4tm9JUbx6LbB5fcwYkx0m5M7FbQSPSLhULCuDmtu+XAtnKQql5nXT1VNWCqsaDdVJ1aG5ILSHl94fn8OLsi9Zk1RfmshairaQjYIe97l3tWYIriF1psR7qlRtE0ThF3lKM2DknCyy5pEjaF/T3VoiY9NhX7urZhqm6iplw4Zs37NySWqYcMqkuqrYfk3+LGT83s139WyjpF/Krk1SvVYMbdiQHbYavjIw3XYrdRSiNPMaLftUdBSTgQePCSO09XjHSV4l0bEksN2uGiIBkWolk6njWDsWG5D4ltB8giQugXRSckZ6QqEkkJke6z3ry5sCfMpqilndQMk14lJ84kQVLQVttMD2CNnIXs81wYnMq63WqCNWbTaJKzEU3ScXbSGRaKiIiqV/OVlo3FzAeI6vIGSqOsaNeQka2c+oldJ+gkXetUi6leuzm3WD1YBpWioKwm3faWgKpG60IutcyKaaDb1g3NVgSajs7FSUDSu2kXLdYHsh7WAHnMCySkksgzQFNxLPVSX4dK4j1yv3W/jwfG+t6yaguzIb3AJW2CkVl5WW2EW2y7ANzWeOWESswS4lInC5qrkVlhbi5C5/hxC0F26+3n1a0t2Q3QJZMxYWFqG4cFqE1SIR3+1fgqMVWEi8L0JIttbZcRAzK7z23X4GnY8bKuMmYgWxP0/STpx+QUXi6A239QjswVVGqwyCzZuEgIpKhdauqIj7tth4zV3IetuS7yhSeqHwoj07L/RrJGcl2MbEPkWjrvWizYeHVG5MOQCLAtis2AkXchwWTVAtCaRbt0Svq4NwAG9IrekrsFKnWirrI2oGzp4WoTmzUdldbvS8eM/OKDcwylUTzBzTxSTelZNJg+VVBIN+leKo+Hb/S7HRLMR+b2S9n71g68BxrHunvKq0P2sW1WzDpmwyUyuYuGkJJymulF7vq7NUjDZ49w+weIPLvtWU7PZgQ8JCdn7KSMkFuIVQfNIEUlUDSbqq7CAbun58C/JHKx/G1VUDxeraOXFWkKgSEW04kraZsFbCMQ6fN4MVns/5XzcJnJEvHVZ0c8FJrJ902nklVbyYL8o/068OWBaN0kG7oEYiidlj2r4GpsyKTpuJ7N+T8e8lplk1SkG1OCKrUzVEdUTtvuDGlKiXAMwJpy4RYqrG3aArckHPYreAXiW3y4wb2e8tJWLzyy9cvKtolyLeo489NpNpKql3o8o9ZY3tUjBwrmNPOUGE4vw6TdK6PXMQESFXmG4cLeKx9wxFNeHfhOpIrKA8UccPTbFfbpESbVAlbPY0sXXKZ+7hqezEmoxFtxTKO4rQcICoJWCuVqtghfdivM0FgEtKKnisHdxJqqjZd4TLy/v4tlGen1hR2Z9rZ0xWWh1wNV/qppfYL7txFYA+XHObO1Gsb70lpr0eBUZD4frWaMre17NV1mVC0elk/lrGE7VWIXbaJ71I0kCVCz3wwjlr2waprLMGnaVPKbLNj63lG7MnKEP6dVK8h3D5sUjIvKhtCZ2UzMfnRoB9Ybj6s0liVXO9qqPLpYb5H5Xs4vN6i5JLNGhXmlNtFQQbP1ycK97yiOkG7HS/CsX0Arj6O2hUzvM1vRC+V2WZLPZ4ItVf0wvenqutIj5+fdfiEzR7alZUzmTVdO/mxyyfFGTz1hxLmEE1V9JchvPfznijo5Ws/z+RMx+dSgiWCr27oWnrFxrkfHiVluhzdPt4redGUsa4zsrp+rm1l81UcVVJuOGcv1xcJXuiKwh0OYMN6ZuAzFDkQLcWcXrI8xqfRemkq64B73jb6sI7h8Alhio6eMiT0myHe7trpUfeOxDfiezsag4zYg79cvqDs9JNkbky3j4CGzECtHORU1kopcRvNXdGhfy29auOW8WCXnAl0CxkPUW1ecohWUzLY+lNZDcLjlNUiHaX6I0hEMUHNTtDZm0k8qY0mFGPPUzp0kGvBHerYqQ3H3uLpkya3ozNivScOaXo/ItaoDDTS5C8233vNjPOesxBTk7VsElnJlvDrOZR6k4B44lFXCPflstBnYB/HhnwwJkwXi+7BIr98MHw/iiJmT2j6voOqpSBeSFBoLA6Vbs0F6fEl3Vm0ORX3cUTtD9srNrKDNiWoBlFUU5bxiTIklF4Tf3rNBW3n6SVtxQc5MuaMlM/J6be58UcxeOJ4FSYrtX5OAtIe6vBCzHu2blzSVS5/1JKymdlIwLhVCNEo98g/JwlbHNubSQIN1t3P1Y2LTY6RJICLBFiJ7TefEzNM4qLRpBDVo2KqBW2E5TdARGkO7lu6cWyeqqs63yLp+p61eM9R6/j1dCPZ6ApHx6QnaIb+kcUvKelabYVUi5b5i09IKBlpT7LSTSeCekIlY43pcp/HghVI1YReQNLgykkJFqlIx/fppFpKhx49J2/NiipJ0M7VpirqGOe3p5k4WlJUXV7WSQXZ3aQiJOvFsxFuknBEOu/k9NV1qkQvHitvN41eXCPANj4hyuzily2AaKTVrf5OS74fJhN83jWYt3i7CnEhduAMu6a6vPsu7rf7eOQlr1SXTdhCsK1ILZdRSw1Ve9O4hIRAObzb8bMyhazCWVdMm6BmTEGAXFu5PZ0C+/jGdYEBSRNh0isM7bVTICDyjjZ2UDeKDKanTbNopRwEdvJygkRF5LiIS93DjiWPVWxLvKqh3EryxaBMP4xo1VTVRUXbod4kV6BkW4rdLd04sMlkGjGH6WMnmZNCslpbvUqW4BK4Ld3Lt+TEZS7IFaij1hYIWg+akAos0ht3D4VcE/OmGinlX6r2KZrlwTfcogJlbcWI8J2pitB4iHbH70j4guVRRvNgwUdyHrTI9igoisOZk4vpFcN0Akd3zYlnOU0xJLspFxmTUi6zVBugmoVMDvFA70jKzn5yxW5qnKeGNWMYGPEtn+Ch4xxMVJS9PKlEgvAsVSCIaDcTcC2WY2bdkpgEgAVnXLrWOmJm4uZvJyVeqi5eZk1CKYK32jSm3w+LAjrKnp7Lych1jrB5Jxr2U4JdCZgUmtyRpKqgYmfTeh4cWTMCl6Ya0nIPEKeYiskAGKopAJDvHEpmy3bJ0lld6FIj1kOk0+rWEV31J5v2kJfNiius1M1TOOx1CKPtl0qiqW2yLSqms8YOivQ4FJQ7wEUmaVheb7LEnSdLucyHEk2az3qz1Lw7wijYwV3CocthDaO0Mfr2WePx/wCK3zIu9SFPgytS/wBeV93+7i/9mtBf1xVJrouhE4cP4y10rtp+JU8YCw03WK4W3OZba71RU9ucda0kKGE/kxE1AOi6zankh4Xgx0IFAdmhoeLw4Yo9nqBXIQQzUqFRQzv2waRHft83lHC1RUQjNvm9raPbR4cwoNxFUvH+HETSbCNSzaYpMmCCSaQOAG1IOhqrjqjFoptsVzwr3Wf7ifReQUJBjot82p4isVHvINItiqVp9XgwxT7OcDcnwea9ULraRtwEYQSMryEugv2WIehxigcJxsjDsV03A3CqqgJGJ24uVLxMay7QFEosGDZAdUCtSSEfFiwbUxLaoeeawB3IRvBRo2qJSmJRyzmkXCTR+zdyjJBJwIOAu3JGJfexGiq5XU2rRVrfnHuFdlm+0dLwDi7ZrMrs0pByq/eMU0ouPASQSIgLYXg6sQbwKhkfV4TL+ecotCAkC4W37hX/AOlxmK4RB8hBbi3uk7TCRK2UjkL6+pKHrM6/k4pGVM7W0XDarUeHVVStutHwXW4eNeztDs24tgzXqPTDS2/RwegLQwYoqGYPOz5RzaWZi+0pJ1/HUhVP7Vfx3YrqdH0lrD/arEf9gS/dw+YoWsgSIVkqi61IvkIlzKhtezjGtW5cLmXUGmAAJl9HPBydXlw4/MZGpfZZnTiBWmltp8eQwIesvMWL5S9L08VCrXQMeQqumhGJNR3Ha6x0jRdK3b6ShbvFwCX7uLSoWA1RVPnWr/3EJXXZsZqvEZJrmjVROG7pIklBgUtIFS7oNUruXd1YGsHXS0pCosJ5nTxaV4KyAtdJwRgVvMCWNSZSwLaJZ1kCSIiJuowuXb/GrsZXpNUCFNs6WqGPb/WANzwqvD85eBX+ZgG60wi0JCKdWSrdqHSzS2pGUkuIREGUkIj4hVVENnu4zu1SYOqsiUWHrDY4DvXatoD7NlphjTksLZqzHg5iTfN1eYUxcbeXmvIf6X3Yz3S679XMCJinGqk4MjbgmKHGEveNu0TIfFj1m0iQir72M4kjlG1RNs4WScmjJoOgEBa6BXN1zS50lxt3ju3kdx8l9+IXJf6KyjqrJiWZwZLa5jFpCraAmegJpbxEA6rD6TxanTyefimFG1tJtiRbn62bNEHDNIe9FIwdWLkao+awcUvK2nI0aPlkf4PYulagkkiXdgSSRABCNiQmQgZc228rcHB6pLHN4q4uCFsImaKpIt92gnzH5cNHAzjlYXLLKDMFqm4K41yhlyH2h5tuHIrR41Cz9ZcYbYDAnSbazXIOu2/ZjT8J24IlX8kO3hquYptUtJPXi2QpCIhst7/HPrDTUrjLhVXQtPfamuYdbGkFZyapAzEgeXE4u5ukfawszZnJOhbMwIlDLp5vEWLjGwIZlSM3MJALYt7wE09txmV1o+7dhDLZqjI1+k8ZoE0TYIOF+GE9v2RDu98hxiXnGxFwhLanwv6NqkKio6LODRf06sS7dUNdJcuYrOdIvAX83FXZyX0jptNq4/jEeNyChcxNy6fdLd7/AJcFSGS9XShMnSI+qpdUAMeXQcdCo+11e1gTy0SjCzzqLV9KqAt3BiNvMI4AonxdkOOPtCotFyko1jKOmLskeUS2XY7puopaIfOkUrVxW2OEy3JK9X9CHEBme6GkmDZ82kkl1nR2IJDzkHMatvy47yNrXL2enpxnnJU/0fapM0lY5yg1V79Uy3gViRcuNpbuHam403W2RGJIGtv1JRF1Z3crbIJMJY1HLM/qbctyLlULhu++PmwKKgZtmc48bL1JUbaxc+7FJIgSAzuD9B5sHxq47MwtXTZXOxJdQ7NBb1c8vQD3ULD+DF5ywz1yiyr4hswz1j5eJcb+Hf0/IlpK+ISBL4/dxpuGLfcLM+Uh0ksvxBcKO6MDlFqFZSpmUioapI2SVrCeJNuqerrsAtC9JUbtiHNu+5iHHhkBJYq5nBTD/wCFqRf+Bj6Dj21si7byzBp0h/8AwflP/Kw3LtwdntVPva9gfZKlZb/yMbXrLkpRWMy189nVRwjdEg/OFNFsP/1Wl4P5LF67XBGeaUSiB6pN6QhEruX/AAe4+TGzj7ZXZmeIk2cV1DIeZGkpQfmJDGKe1RW9H5iZxOqqoOb9eRasa0EXIt1UCvBLeFhiJ/JgkX83cptNnJPuyTX50pm81inq1rOpRNgr3t3e8yXzjb7+NdVXlhTj90q/LUFRxuIRO0brubHzfZy4QM01lWRoOeCdJOhtMx5Cu2/COPo9m1mDA0pkk3zXBio+Lh2ThqkmqXe8QSV3yERe5jjHlI4XrKy6s11t0k4MS9qPvfn9i1VmrRYEhLahbVFPDTXoUc2Wohuu8mKqo4ZuCEhMd+/3MGszpTM6lk3LB+g9ZOktK5FUS9ofawNX1AuY5cWzBYXKfLpXbsc4oKvDCTFXpdFbATzdQbU1i6VCoLXLNyKqzLveGIiE/d8e3DMii2lzZ4CrYg7oh5h8NpCeHYxMrGpi8SuT0t1wluE8fk6o3qqLUeC7QB8lZqkmX2vtD/TlwwA80t2lTdImhJCmUyooZjQa0VTEw2QIpRVyu2cuEh1AIy+yvG/aNvX04k8v6aRprJPPIGrwV0Ti6cQHSEdv1pW/k58bfge0LkxBQsfCL1dl+29XtUmukvPtQJKwbbCu6tuBt2osy8tKlyLqZnTWYVIvHjgG5AyjZFuq4V79LpAujHeLPQVVMWa69Lm+cuc1dcL+kW4r5+tyW7szcqioFm4gtsw6ubGmJkiuSmlYraXX5fctwiR3CQFGkunbvuLl891w/uY5TSDT7psIjaHUr+9jTyQivVCiZT0Kz0SEfWSR3dd92PtGIh+T0Bj4yZapatWQYCiA/wAKJEQ3/tfax9nfyW4GY11JeEfvQF02t/xQszk/j0MB+Fx+DAfzAIxjeS76m9s/0BYMGcZfwlCh+yV/DgA5tTjxg6axUbDrvFHETJuiVvFJJIAS6i8Xlsxlqj4WXiR9H8GFBGrn8qq8izFsKVlOK3jv5CVSxXX+UzPMPKauXSoKJptGCrpJQekwElbLfdxaK4IykG7Mm2lpUpZz3bNdAfcxfMoQjVcpauhEEbVkmD3iN12qBpK2HjTPDrEUGwW4kLcm5LOzJui4eSYQK9eZeybBIzixLVfxwGlarpX84lv24KVRMIfOSh5qVy8qEnPEUyEC3iBcAJsw10lbSHaaRDpENpb92Lh2cQB1krSZlzAw/exJVllezqCQTm6Zfq05UDfvRkmKQ9/+yXH9Kl5efwGJ4tIT3KQkK+atXM5XLKUZ1nTjN4zkIJ1wb9i+O7SVMCvG7n0FR1bPfHp3PVsvKKraRSn6XflwsmZP0GV1qqQq26qRCkWxdIkjvC3futt2CW162pKEzV46m8zodnB1okkbVBW76lUTQw36RHvM+q3cYmIFv2njAtdZfVVkdUzqm6rhHwxL1xeg7T29exVIg5FR2l/SzDClfGo7PmVDgw1cqI2XeV9HuqupebgQcqOG84ydEprkQ6QOBvvEy8pY+hScQC8g4fxKyrOSds0mAPhtIxC4iDaezYapFjBeUtXsJ6tKBp5c4iQkFRaSLp80VNAyV4rSIbTGwy23GQ+LH0OY6NzcxO7eGF1SLouxcRTcYSFB+vJ6Sy0qT1JUea9VayqXEJF6rZqgqF9t2xDZvwzhcw6kqVZRGlK5mpVRILyH6OIL2h7hJY0NMUGtVEsMkOkKIIaRePmLFkomnGERF91G6CxkYKkqO9Xz4Yjb58yWFXR5Vm8qqzpZiNrki8HF0R1+5JjglJxc9L0mtCVk/YuXCuq3XVjWZNkiC7YYiaqph7xlgpVQgj6ldGYdGKSr9gp/1g/v4qdpurgr2H+sKo11VtW00oo8AIgosyBIFVWTxVUTtHeWldYO7A5/ORWBuiPiaacon0jHTKR/FwpYPzVui/WFs6ASTNUCIS6tiX7uLkozRtK5ESxIaEqjUJKJVnV9MVhztTyK09l7lpLPwZioDmaSIUCVJId7b9aKR9PgxnhukFqgKgkPJu97GwO3g3BCm6JBIBST9YvQtER6gSxkFuqsSZAIW+Xb48ZiubynyFam2Fm0wkvqD2TzuyqifQQ7uHu5vGCZfiwxb17m2um6WRkYohB/IIDqNeUEFREfvYcdkpT8uV0ae3+Lo8pf9HQxw3aOG8Y8U4NyJC8lS+yLqcJfu4Mt7pDQtx9pIK0R645JNF81M0G7pNsq/iu9bk4H6n7O3m82GVN5g1zM1Yxipk4pRm4VMVdJlaWxIiDf7Y4UnGC3rxMBbK2gysu0jwzpVqslVkWtwxD9YPmC39EWNOxsSQi1RWV+1slpZ1KbyuONabf9KP4cXTsMbcx5ffzxaW3SMf0vtYq/a+SAc5BO+3ViG58+8e9XxZOxMQBmk8Rs54vxebGCrvX/ACvvW9a+A/JRN7VGbWZ9A5njFUjWDuNZKxaC+iAJEFxGdx7x8uKLlbn5nFUtd0/BT1cO3jJ7JJILokkl3qRF5BxYu2VAz0tmc2dxNPyr8PREIhqtmSqg/aq9QjbgXZQ09UkbmZS6zym5VBMJdpeqqzVEB70ebbjexbiS56Rlmitk5p1fVsDUrGPgVmYoqxwq9+1BUr77eYsDyHrquX9QRLOSWj+HeqhqimwSE7L0h5rfNi9ZuJLHVkOsCKtvAWkQjdbvwN4lq5CpIM9FcSCwNwnZ9ugX4cWgriWf+2IkY5vJrCHPFtyts/aq4tvYaP8A4TZALNpwytvxpbcVztjAaWbDUxuuOGbmHJ+tV/dxYOw1tzUdbLbolXm9tLGCrvhXylt2/wDT/krUGZFST7HMlWIiaWp+QFCmvS/Jd6zuXL6xaSWrdy9VuKsvmBNx0OUilSFLJC4VVSIQjuYNXr3+97WLtWIWZnSCp9NICP8A3osUCaSD6Gw4Ge533vxqiWNQ0RG+XiWUc0tDFMc1a+qODgXTkKYpFcUjSHTXiRVHeYjvHFN7Q0ktL5G0bPKotmyzso90aTZLSSSM0CK0R6B8uLZnsl/a66P9Gaof7ccU3PID/ra6P2XEkUYH+qtxK4D2BCpWovdgrH/ZRVMe2ZS9yPeKyjuzdbpd0r5fAJfHh1D6JZyZpAAEgPHpEkN3L9rhHsvjpdtSj0bLf4bd83/V18PIVL/hqzODcN7hvyhdbuVxmuJtVuIvZ+/Bbzgz/Wh/PxYqzKJGSnVae3z4OvZbAzeVcz3XKwbod38lgJKId4naY7w5tL+bg6dkYNWq5ZsR3asYoNxBbdcmWOb2XRXNl7S6lxj6bM94Ufst1TdZd028v2/RJIB98EhD7pYyH/VBH92ZkOw5uHhgcbem9dX/AMrB6yxjcxXWXVLuI2u2LZu4iKfFJE4QFSEFVVBsu1RuttuwNe2Dk25KKkM16qrb1hMR6TSOSQTiwSQVA1S6dW79KZY6a25pGS4BgPaonSS4M49isNo7DSSt5BAHGAXnl3tIySI223zA7fGVuCxWVK5hHDx79fMKnGyKt6qSf0cVusNUStu4zm3Yz7moyr8qdkLKqg12YPZUDuhlUjKy6+z60XmxrKYRilrpa04za9AK5n1QquG5WRVVL3t34sOMnLEszKZMkTTtkEg8uEczl+KrqSeKoj9Y4Rwe79agkX4sL5bloVrAKgAiIyLflL9rjh9bouLniX6QpcJ2IQ/+P/itsZdii3qubR6/X80Ze8qzL8WLLOPzS4W0PtZnS+TA1i5CsmuZNSM6aiYd0m3mnuqTt4qgQkqEcr0AXlwtU1S5uoOmoJZbxjk0pYDHQnrbzFLzoY6lSO5QxX53xbmSosC8CSlikrCAVWZuhHw9+I/hxhvtoIAOZEefhoNlZ76q4/jxq6n6wrlm44ZhlE8k1PUd5i2nG42gbpWwu9t8OMi9qioDl6yauajo+Xg3H0XjGYNiXar3pa92rcBcpbsaKmd7IUK5odRCo8QDJ3LvxA1lUD9x4Rfiw+JAFURBuCu8bR8A7PZw3ok+KyXod0k2VEQezqVqgDd9qgXR7WHhJHw5XBcOy0rRvHHGeKdN1c/PxL9BcG6rGz8r68VtHLT02VFDei/crllEf6pVX9/FyZIAlRIB4IT8RYFkfVDeiXtJS7mFmZMSy89CVsWy4lULC9G4hDfbuxLnnnRLelPSi/iqwjCOL0g4mkpK3mLqBAgt9/G7oiGK4dUNlmFhgqlVhmWYjpgrbaFOO+jxqpfu4p75VykxqDhVtIlUjAPfHDyts2MtDrZ5UKVVCgzWiwYCTlk6QO8rS5VUhPpLFF/Ovloui+tryFtVMOZ6I+Hx41dvIYpc+OpOaHnn9QenP43mkXDw8Fb7CUi8V/8AFLFKIUVSs4MbvEIc3vW4n8i5KJmUO0AcZJNnyKtOpLiq2V1QIElFS/HiAdJbvseTm3W778cs4++HCux+TP4I+Htf8VSc79EaHWRBHabpuN3+dHy4G8wKKuYFJ6R3EBvbrR32aX83BKzlA/zfvrgLmbiFw/8AShwL5pIAzEpFyGqOqq9biQ+dLwh7WLeFvgvzvqUeM/hI/J+tXhikbqNkFkguU4fYPUO8SxFpl9XLVBUlrukg8uJqn0nL9F8zS1V1FWSp6aYkPJu2Dz9PLhZvRVQqp2DFSCogJjtanu+XBEhEtSz/ACKFUVtaiBgVx9Inyhu5vLtxyRgJCbq22093Tic+g1WpJif0Yl101ekWCpH93DoaArbh1DGj55UrrwEYte7lLy4vkBqqYKJboXp63KncYiRFzf0uwGc9rPWjVskiI2Rtu3q3FjQA0BX+mIN6AqUhO/cMS6vG8PZwMc6Mmc2pSY1o7LGrF0wYAkBDDOit3EXhwztBe6UDcCHIUfmFKInQNN6to8QqyVtLn2Jbz+YcE5MeAnHzA1kiUaG9SuFW5ITAVR/ewLa2QWCj6PbGiWtxDLaSVtp6W8S/dwVKfZrOp7gEA11nCrhIU00rjVM7un3sDVcQaH5SvY9aolMjQWFEFhHVPdv8YW7vc24airaKYWCNlgbh5f3MXlpk/mmtprejLKpfSXV/AzorflxKt+z9m6unq/mxnfLcxIT+fAIEKuzAw98kO1uGERAejdz3Y5ITuUPdcHKIhbgnj2a881S7rLCWV27blm4/fIcKI9lXtFriVuU70b+opRgP/wBlYtEp7FWVQ0HMhcpu0wC6477hEMD3OoTGFj+IAhLiDDcNvRjUSPZE7RT0g1ct/Sh+QLBIpZhZ71i5FivZk9hPtEz8ezRbU5FJ6KpH38ygIDg63lGpGSDq6ho2CACFZ0Elkuz+iZBriqyVAbR/6UWClTqoEtFmAbTBvdd7A7MVeoKIqGiMsZTLqbjdSYhG7tq6TbFqhqgury2c/Ni1UXoyLqm2zgzSTcEyQJXlNK+0brTx6uIYl4iRFNuHwpu1AEmN6oCV4heOl5MeJBsJDpXdG4Q240ZH9g3NoU9F1N0vyWfbql/4WJBPsG5nAnYNT00G7wrl+HC4dXKpdepu8s1p6yqg2mI+7dZ72HCLg9NREgHfs6caST7CmYoEJnWdPp2Dyikrb93Cv9YrV23iMw6fGw7rhSVx4hLur516m7ywtnoIFCxawXEWur89v7uHFHgA5GiiPfirGyAWp84nert+bGua9/qf9Q1DDNoz86FNgt6FwIDFud3LZ4sZ4nssX+T0TUmW7+VQkHEJxty6A6Qq3patw3+QsPBclRiPdJBAYPVJGHdXUW8tZs34gNvANDC7b+gEjH48TzxIISWnIcmC4Ek85Uz3EBgkQeTkV6/Pit0qPrKn4kDMrTZtA289mgOJp86+kFRVBK8MJJm/t7wyEOmy6z2cKf8A+SmP6JLN0gS/wl4KZmF1xd1vIr7h0uXl69uNQ5LvG6HZKr5yqfDIBNpFqrqhZZ9V3XctuMuaSKBJ3Ld5qpWEJq+/d+DxBjU+R8tAwnZnrRWqoZjMQyU83B82XXJADBXhRDd07yHBZOQMfz8WKXPj2XzftIIMarOe7RVFxTMBKNhHSvfiVwLqm1K8xLwjtH48ZXnBWJw42W7j5sbvpDNTs+SldQ7Cn8gGzaYNVU0nPrZXuDSbqkfygY4FS+cPZmVJMw7JcUpxFn2lQLlz4NpHylIhShweVXLtYILDnZILJAd3quPASTVG8e45f6efAhHRBwoaBpJCfU2VSIOTw+Hdy8+DF2pL/wA9z5Z4wZ3KsI+8byK0NLk9nAha2WpgSKpXkF+pqiZHZ4wLmwM4cyTel9UK2F2Ud2QWY9lxfx3/ANwAx8+49msNQRKJBtScNyO0POOPoH2VJE4bIvMCRKLbvk2Sqy6jRZUtJdIGoXJ3eYBwJ2vaPyCkZBqwb9lqCBZ04SSEiVR2mZbC5MRbqcpqMe8gnGyKoOKBXaQQWVzyzANACLVnFd3w4Rzi4lrl/k62s3BS6t27/wCGLrGiaz7QeSLWtajYVD2Zabk5ZhLu2r94SoXrqpKkkSu4Lt1uJTMTNzKWkmtJfSDs20s8RkqcbykbcuFjNu4VVLQ3h47i2+LFrdWQZenaqSbLVp+pZepNBZLJGtAPb/bDBc38lI4K39TlSP8APBNGQf4GFnwr4taPaLygQoeSm0Oy/SgxPrdo1XYiuHeq6S5JKl3VmwAL48XvsyZyUHmDXD6Ny8yCpyk3DRrrqyCCoXEG4bdgD5sEjVzApCqibPShLn5YlnRWTwlgHSmQ2kqA3dwl48DtEGYIqaBoCV52J3B5cErPZV/+eytkeDJdqcoBnvErrG6Q8h/hwMWrg0k0+HBVIuHOy1K34b9hjgF8tSd0+wVoXN7vex9l6leJF60V/wDFwAstY1YadzU1QIRVo1UPN/HGuNSP83kcpOzjQM1MUdG1Ig9dOkOGe2CaSt5lcJcnLioxvbCpl/TtVTrXJSmRThYtu6XT/sd+kq/bNdIv7H7cS93FUiMBER7qC6YYl4iWcey6wbMu0hQYBdslktxewWC1nSrdmvWSK6KophUDgtQWCqvwncIe7g15WZkx1bnS9SUrlDRbJSVICScpsvRqszvITMSu6SHANzsV9KuclYhonp+u3QbSAfvbsMalyQalGjGLqpGg2GNTRNzYJt1UjtSuHl8/P+Hnxj+uktKcmAIxKxU8a+a6yrdRmWulYkZpCo4Q8H9BtxkvNYgGspwLOd0fVd04Ls24l667BWjcjlVvRkzB2JJd0u9VElOYe/VG4d3mLmDGgMlho6UrKPbZjPGIwQC61+Ndd19ltK4bbN2AZkLolkzTp2JEQJOz3JXAP1pfF0Uem1RTNUF7bftR5793shdjB12iucP2l0ina6zbhalGQoi9pykezvQ9JMZXKKRiFpWYqGMB02Qf64cOkREdiXT03+5jISfaqqqUlG8a4p6niTdrgkRcKQnYZ2+KzBOzSIHiNNmZiRfSBukrbcJ9X87GXY9nSsbUkf8AU5cXjd+ltJ+BABgqI/qOXGutAtVrBOuCuZXhorZVkwJSRKLP2VlpxuzkYdjo+sUm5K2ltDV9rGhcncralVyBTzCNyxGC9YqpjaXf84hy4yVRLWmHVcM2ws5DWSm25gK78NIj1/DoY0BkrKPHWW7qK9cOdFKU2tCdKilvAS6Bs5xHFV7YaaptqM4ddqHbgMCRCIQcI97pFffYItTG3+niwjCvzSdFoLCktqgkkkSXj27bPa6fPhOPC+QvVC21K8kySMQEwuv6eazn9m7DNGUphgjKTcNULP8AgpBV4Qi61bXCSRKpDv371R0t3ixkWGCqHYiuj1dSNEwT5cqGeb2YKyTx5QcCsSTFoqaT9cf06t+9L+SEx32cxh7OBaStqd+PPNYlu9W1VFd91113n+9hqoaxIiAgREZbBHHTaVgaVoW2l+d7lcHbk+T75Jq+frIOE3LdYk1kldVJQdpifjxGunRunCzkwESVK+0QtD4cLPr7i1egurbhRmzeKkoCSNxKt1VdpDyAFxn8A4KSh3WSt2UuZDmiJMYiWuVp2TcAToSEr2p7kuKQ8w9fjDb4TDVTxlJMFHXFaBEAfWBS3avgK7rEg3XclhhjGNRNWysk3Zwx67cGTRuPLuV0B4i3/OkrjQ2U9Ss6oouHp51PD6+gmCoOkVQMlRbpLiKW8N+3XEefkDGS4noRNrrIjqFdN8n95cafK3ulpLaiE4FEpAkRNNJPVC0hSK8fas6fNyYnacyqqCvaGrGUhXLMUoiLe6nHFu3N1bbdnSY3Yq08q2dpprWXCFg3CB3qhymVuG6z2SYU/PIxs2qlrQkmRikSqWwGqpBd4/hxjqWOaMl1G4i6dMWUUViOuB4KrpIAt2ECSXV0iP3MTldQazynaHWSWESSppK4S3f4Y6L8WLVX1UU9WTiHhDp4WzqmmDhqS7Haq6uVJW5UrSvILrQ8mG084o+UZ02zkW0q2UaQIIaqb1IRVAVVSHaSXNux0lypKAkK5AwwMVq7sy5W5a1Lm23/ADj1CMa3jMvoRVqmq8FoK6ptUhV3F5VS8+C52g6OynpZ9EP8tnDF2su1ccTwj7i96VultE7BLeXtYzgi3uzbRYKglaFBxVg7i2cKzt6eaznxcFl0UlFEXAWiAn9qkYj3oby9m+0fLjHXepkUSFbfhm3H0dazNMi0rzdXhZBvsG3V1dNDp3lf5w39PJgL5tGAi+sRElNVwBfWBVt70ukOQvJgxNWCIvk9VygoV94WmqR7Ct5TGz3sB3N4kXQuNd4KiwKntHiNv+lEfluwPaPWp1efVrT3ZNSBLJOHfqgzQbpOnBkqugSu/V6dw2FgrPH8Ulda5inZOBANJdhdby7BHV3dW3Al7J7gDyPi2dgpWOHB6lyVw7vCYlgpCwMXQrM3mlu36ANeTwlely+zvxn6tuVY5LvIZguzFFGi7CyGmtJZJIeM5kxtEe9S82A1U0o2MqkpJdGQfErREq6MkFQHurkErOXYXe/IeDjRZOfzJzCqBk2ccZzWpc+qn5LPlxTKqiKwpyJmpKSkiTJWn5Am6+kgRiYGkV/2Xm9jHRrT/p7I+z9+Kwlb8Oc8SwHlrRr+jcyqugXTwXg/QOo10FxG3VS4BXd/TlxRezaWrntCnZ/gsqf/AMzXWNlU2WYX0iWcupiV4X6OTYqirENbBPg1SEgV0Okh5eQrsZ3yTzszIm82I9m6m0CbhGyrghGLZJHelFrq8wJD4cMqaQkRId1C/syoNv64TLc9YSI6jjLN/XxA4+jFTJB+cKoFleD0/q+1dK49oF5hxi3s+5v5hVDnZl/HSlQpKNXdQR6So+rmaRkGuPUCQmHx42pOcZ+cypNB+TZMASIbbdp7vGkWF3GDZBQprw+U6n5K5TViidODGKQXTS3aia4Dd47Sxb6IcM1aCzRWZs049H1Iv3dw7e4XxWCZVCKyl02ZWN77hBIS+RDF6y2OQY0nmIsq5u4eMVVQ2W290qXLZ+Esc8tAu9ebE1pLxHqZfJ+tfO3s0sjHtAUvcBbBen/3BfHXZ/H/AIcqBsRIR9fMv9qODNkfmhWE5mJBsJnNeMeSBuHBcCyi26SRNAjlyPcDMTu1R8fJiFyVzVrmWzapONeZrxDxm4m2SXDJNbTVAy3h/FQ+/jpGeJksjlECDtHwK092ooNnrJIf21JOAVVEyA9J1dbs6jstxRc/kli7QWYnckWlVsmF1m3+OK4OkHmxXKueEKzdZrpKtzqpJqUe2StVsN1baRcKP38Qubmd1eQ2bGZ0a9zUVFRvUD1vDNEGoESBg/5TLQ5dK4ecsOqMtKXuCW1bYzgbous3oVFeNVeD6tdmIjZeO4fHilp2C4vasNUdXfbIoK27eXyezi5Z4RoP81olEZteN0o1wYEkkRX96lsKwSxXwVWSdIqLySHpFErV9Ju8X2W+EEsct4rl14orf2EvcYyVvyofor5pw1yIpk4JxZbKJKiYbukB3Y+cGeCDlXOasDEFSH6QSfQf/Oix9KcpuEPNGO4R22ciALECqaThPnuu5hsP2sYSzgzfzmjszquimGZFQtmLebkG6SCS5iIgC5WBy4Z8LEQMOeL7sElveupHwj96gc7Ga39c1NXokNlSh0/tRxIdvBqsfacrA0GypCaUUAWj/wDCtrixZsZsZusu0BOQkbmRPNo8Km0BaJPLUhDVEbLfYx120c0M1KZ7RFYQNPZhVDHx7f1ZpNGzohBK+OakdvxF8WNnT7xSEuZX7IFgatcDxCJDZlRTQbtviwZpxn/wB0i2SMUL5SPG4toJfXB8eBnkvWtczNbCwf1PJro/mtpx/au4MvrCo3Kq+0WCdVjqSV7P9MvHiyr58b9kRkreqRHxQ+Df8OAayHbeFE0Hr2/EomQSmLnCwysmSYCFigv0i6ufely+bHTfj0BsVRk11FVwV4ld+JHz8uwRDHKjcElFFn4CktsvEUpJIOnp/FhZ96qapt3J26ZrgGnpP0hE92267HJyINq6SO6awrV0mBrKNleJLSPSAt1llpeXfjYGTiTz80lLBrSVqsdtIXiXJb07cY7rZUDWE+AVT39RpF0eQsbKyabs0sqadNJZUiOLvO5k6VEjt8QF9zDbiIR6q34lVSbiRGomLWaz7NUXkh/H2/278VS6f2VuDdmZSVQzVRg6iotRylwqQXCqA77i8RebAJphA/TUMVdJFb6xbirbxiV+4em7/ew57STuSh8z3Ldg8XbIrMm7ixNUhEjO68/lwy4KiDT3Nt+9ZbikSKob8JK4TGWdeqsyBrSaypGY3DxDflvEvFiQqGh64WeR/BUmsqilFtUjLVS2mCW8ObGYFp6eIS/h6QH2XSv72LNmk9koirFGbCYkEEwYMjtSeq85NUiPq8eN4MFmNaIdfZdZgv6VeMG9GySqzgQ2pJXdYl0ezhhnUzWho3LNnLIqoLNOHBdNRUEDEwYPNhmfJgHvJ6qiTs+lUr/2xX97BIzShHkXDw4RDxzxBySTwCVNVUxP1Srfbze1aGBrkPuFwATOzfDm5qu1NORpGmBopICd+4pRuRDYRePq8o4KPZZdesp6qwbuUFVlYkEhTSeAvv3+D2sAhZA3Sahy88Sl95gRa/dBu5e4vS+PBP7PDU5aNrthKLKvBVgkiuJu4S5L9wkrb8uMJY6QWqxslur8X+XOCpupsrc7FU00Yaki0zHcQvW+qP8ArdmIGh8is3Y2smcrKUS5QbpC4uVJ01LnbqiHIr4iHEgVEQPIbZf/ALYv+9j0DRUOVWLM/rnD+pHqumTxey/SX3c3s46WJD3VzFVVr2e86W6af9oDxMgAN3FNdv8ArcWyi8oM1I3NikaknqVcizjy+uOyVbkKXN5sJ/QaE6uOH2ZF1/5uK61pxt+diNpviX3Au4t2qqgTxUgI9JXxl5cSaISLavEJxQ3zabsF84HzN0bFMlY6MvVVVQvst6RMubmxX1HCLMRbKsEBTNUAElH6XjHkG75cTWZGsOZQomsKX8CQ4EuQGVp6HkSLDFqle6LVfjw5kAGIpLjb7xoeMuXGIuHwkl0i2/A21q/L+Hkai7O9HjSEc5kk0n7otppX2aq+/YVmO08vswtQfSrRkgI+ZVv+9inwtLtpLJugzXcvCUSGQDVQeqpXBxRc2lpX/BhinREaKn8Zl7f/AIruv/Nxp6MhyG5DyrCV0usueIkRoPLqvmVKLMHFKuxca7Qrb0i2Br39XmDDxrl9W3pEdWmHg++l+9gbxdGsF6XTeOFpNVb1i4S1CkV7rB97Ek1pCKStD69/21x+9gzT3UHqVqhaQqGmmtRHPQ6jRN66j+HJQw3d/v5Cxhtu/YDDoopP2zlbvdVBfhUtLdstvVvP38asg6aRaySjzWeEoyqZuCWo4MrQMVRs39OMu02q/Jj/AB8RG9XuxYH+tLaPcb+bx4S3koNNxFajhoZk4oVZVgTNTQNmgp1JrihaQeMSu9no3XYCtPpQ8bmRTqz+NKST4wL0B2kW3ku2hjQkpELTLXhjfrp2AZXKpW28uz7IbPaLZgBxMsjTmYsKkzfNhlOKbroKkP1dA9UdytnTtLkIdmBrQUyJM7yMBFaimqjnplnUFMQLaFBukzSlNAjMn6CpgkkYpHq2KqiAjyiQbLOfFZoeXyrQp+WolWSVbJtNV1FpvkO9KQO6/clbfv5BV8+7ETWmYLyRqjWFZd83tb8RwzXhklTDwilcADf1WefFsh3UarNPIprDtoh1Ht/r7khSVAm4ElyFakCq943XBzAR2jglKuVUsZZZy4IjtIg2iXhwuapCQmRkQ4qpz8QmsIi5ItlwEI23bvFi2s25uBENYiUMcczqqNyiiTgxXQ2qtt31ZSRmyjq9hDsFmi6wprOB5sXWl4dmNeLPmYCKclGOBtHxiSRXYz21S9KPpFILrhwSMrqsRiajZt5RyQs1RVSuLpMx/m4xNZb4G480W5RcHQRCizLU/wDUVhVu0zSMRt8duKNTlYwsvJOAnWyC7j06VjlcbhJUNt3vW4MdRSTaLhkQkWybxvId0BW3CRmPKXtYh5ihIOfiG1XUhFtvSokhoPWgpCILh7PjDmD4cKbXSFlkJoAaocBwzVkHtgS7ZxVkG5i3KCFkWbd0kO0BMVSLoHzYCqb+NFNiAmqLzVM3CuxVKyzYIjb7WDF2qnsahMQKMSikzW4Vxr6YgOreY2GW3APam5EVEScqjfvIbP5uP0fwl/ozPh+9YS6fDHIrpw/NqoQLuRT3+C4fu4TWXMlNZcxFS27dcN3y48Tcy7lU0xvMDH2D6+XHQqm33i5tED/VBcPLf0+DGi0pZqBdesgSElh4Yi2bdxfKeFkXiJpjdtK/7QTtt+XHTgnI2gq/V0+baI7j+HCawd4QXq7BvAhIBu2Y9pXk44rSTvbgqomHPcRdeGOu2Fb7bpstK+/5xw417lLwbKiPIFweP7+OVDZiSht0Uk7D2DpByfDixSXUe4NeSkm2sRcPDGQWiH/OEtxYOU5n7CVN2Y4nKV5xIzUe4CxcQtSJukqVm67msLl8mATCvACYmDVbLiXqaxIhs/XpYTHWHvrx0wHlsD93A79M1UOjm8upfRMo6VfMp81ahy2qRFzDPyVZ6ppPGKobVw/AXmwVsxO0os4RTDL4REXCXeqKiN6V34sAPSZ8Om5VeL2nfZbb7h8vzYdNY1g61DJyrptxV5SMt+lcHx8uM/cuGLVcq4bhUtyIfpeJG01wfp2iYaJWiLzQzFSTcGrWcgKId79bFJcCO4du8vN04jZirXMvIcS4lVWZKj3pNh0gIw5OrEOi1eEipoPy3ie0uoAuwi4J5p90sXRdt8mGTVroQdzBZES8OCr6y4emSdIujdLcSk5c3e2KpkfXduws4Q4hEQJzuuuFTl8vixEt2qwqKBrD0GdoB+7hZRLSRTA3K4j1piY/u4OiHKq0+EQFRNa8rt9w6uyyzlIQLCkOgjJQsfcirrKpHZbt/wAIV82IOSJbTWcpOXig2n4buT2cTFPgiUHT5pGqkoDDvRK3n4hW4/gLHndqgO9FLK2OeIVhSYCzV0zlkriHdv1R5t14fcx9hun0en/Fj4/5QgZZgUiilu1ZlvdckA3Bq7N2Prw2cehwlcPSRB81uBKMvdJCXs/egrv7woY5w/8AGcR/JK/gwE80Ero9ZbqCJe2f6LBtzhC6Qh/5JX8OAlmkWlEqeeLeh/qsZyp+HF4kbTfBhQJzOsSqoWwf/AvYX/aksWTJl0DemaqRvG57Fu7S8Nlw4q+ai6KWYyiJGV30cAA/7Uli0ZK8N9H5htzXxKp2/F+9jS1PrRQdNrFXbsyvVjyRp0OaxBUfD1lgvM+k+mzAV7Lp/wDAzA6p7QJUf9aWDQxVAiJHy4Mkomhb2iI6HlKL0ZlgJCDq4FBDvUtpXqgXQQXYzXVWczan4l1lRnhDnUNM8kNVFmu6a79gui69m3VHf5TxqLOywWrEyOxEzVu6rdmMvzFONqio+ooiUtK7i0kiLkC4f52M09V4UtYXdTxhgXaYVDUpkbIy2c9MVBEC2ClYOUZN4ySZmNiaLdIlQAQ3GerdvVv3GqWN5s2ukLdErdhBy4BmQmWDDKnL6nKZZmuop63ScOFVCIu9O0TLyYPbcblE7vEH38NW6kqo+gkuJoWgiKbzFR5kRr5wdPQIqMQC8VRkkBu3F0qpc3v4ao5jZo8C4fuKeK1uYDpi6ZEat/g5QxcuHBWJeOS/VHittQtiXHtBhyMpbko091QrjNqrXqfAP6DnNNU7TUT4AgEPEdjq/wCTE8sXeLAH608RJJBb8GJBT7ZTVMruIPEHSIg1K9sRlpTWeqFanI9Ny1YPF1DcbCQa69vLzDcGOfz4LE4TbFFSaSipaQipAr7j9wsOn29NEP2p4qMoTz851KtryFukkqrbdsI9w4mDroEIiSqJoD3IZ9sKqm1W0DSckAFcyqNw1MSbrs9/DiXWIn72Mut+Ut93dbN9uNSdsBrdl3DmV1v0lPpu526v/lYyi11hTvC7k/oOM5cB90ktXa/gwr6a9lAm35m2JvA12/Co3jbdd9VQ/dxLJ0m5SaPGbeqXSSbhdVUboZ1ckBndbjHWU/avq2iMvYeln8O+FxFJElqx4NdBULu6t1bTu0rb/OOL4n216hSKxWKqgt/MLNgV3+txFj3O0LWnSldTSuuvk4I7loYqIm3DjWHMqTEdKwBFk6S3/HiHUpyViJJuczmuu5bt1TNdInDoTILOXmwH0e25NXf8W1Hb4iYMP/PwqHblcBcDyEnC6S/glqX3F8HN1xBzD+f4oTze7uIUNO2EJjm0xNJYtM4NvdaHNeqria7Fm7N4gK7/AIpVLcPs4oOeWaEJmRVEfUjNF1si+HVFdvpGkeqqXKHkId2GuROa4ZV5n+u14oVYs4twhxICauk4IxsHSDfy3bsJKkOsP6VoRAho4+ytj515NSWYFa/SCnsyk6cT9DIG66Ai43qgRER7TEeocVamezxW0NUUPJOs+1XjVk/bunDTiHggukCokaX2vWOI9PtuQiWwo1K3w+q1/wB7Egj22YTcasanaG0rY51ht1l3mj+f4rN9Rd7pIr1nS8zJSTJzR1SIRzVFCxdMpFdC9X2AHFGeQNcsJBr67zFQSapb1R+kbr9aJcp+S7EGXbkpJAvrUUQl0fUHu7/VYef18eXppki/ijAS22qM3n/kYJari9lR6k73UDe2l+QM0IkwMrThErSEz/Wq4e9iZfQzbsEyLVjnA7j9nFc7RmY1N5kVRF1VT62uiDDgiSQSVHSPVIusR8WOezlmbTGXVeN5WoF1W6Zs3ApGoWkh07CLxbvlwjru1f095aVsI0MPZW7aqRqr0VU6Wj4aNftForQFZb0ICoKtxFpFeVxByYq7tnXyrONRSo+liJJIOIFdJrYluHktVxVx7W2V7xYjJGKXIi3KE/Hd/qsdJ9rbKkysVSgxK+zdLIW/dw4GsKREA/S/ss3kOxjFTldNK/kIVw2b0NRkgoZhYm7BqSRBd51cDLtDNZIciY9nLM49i8bvG4qto8B4dAx6RsIgxd3HaVyUl7ePGnjEP/h21/ewNM9MxqArDLuQjaKfwIpt3CT3QbTaSqvMImVqV2LH6nNYKSuo2DF8dKx/2aQBDtpUby3BNu7v+yr4lGoopZ95lBu2Kpcv8qWIfs+rgl20KPC8iL1843XXc7VXFiWOztC5jAruINv/AHpX97CniT/TC8P/AFWt4RL/ADkfF+KnBvusDS6N2lg69j8rswXiKvNwZByW9Kv7uAkVmoIJbtgc23fbg1dk5B4vmO14BzoCkmXGiolcaqWgrZb4N+OcWMfdzPiFdV4t/wBFqPCjjkE0J7ljR7lfanHso8i82kzIvvq4EHbam1l8skUUmwuRdVaaR8+0Em6/g9jBJyTzDyyhMroum5vMqnGMgCWkqivIpJGh022mWzaOAhVmSOVapTSyXa0iLZh+4ekgq8br6RqndYNi47d2Om0zBVUSFfn9wsp0pIvVwqbqlafW6TbpEPl+yLARrxlr0bNGYbQdTA/MrgoPMw8q3VK0/GvM0aVQdNGDcHCSko32mApeby4EuY1a5aNaZeItcwqcfE4cSCum2kUiMtW4vF58aylkDSWujrVZrQwdVALkrbVYuHV+JghjvL7bW9O79vrNrtL+VHEdLk/SlI9aWNC5xDQ5JaZHaTfgENL3rebzYe0MrfXcBb0yjXq/ajjhty/1FzxL9F24umyt/wD9f/FbYo+xPNjMA+oZ1p718a1/8rFtqhUGqajkj/i6/EF7olitQgmGZVbrWXCU3Gld/wDS4MPc2HRxtL1A5ACtCLkDEvOKX87HT2C3D7S/P+O4UJaPE2tROtn2VPtEuX9q8LGJe2g1A8woczAbVaXhEvmdF+HG7mbI2c5KGP2iIA1IfDY3VV/8XGM+10zR+lUO/knKSDdpS8U486p9/YHzYdUxQaVLg9qpOi0T/NDTQ7RsqCd5fMlHlhUtqPOXIF2I3K1+tN5FwMqaNurUEmW0OW9qx/dxIEO0gVAhUsu3B+P3sch4ul5zL5K71wKXRZW/lfaWvaVLvKCf8w/m5lLvdNr+9gpzTNEYNREgEvqDRL2u9wJKfUNNjl0f/wB4FQjzf9SwZZlUFYm8uY2bIv8AXjjfW/1Q+H7hXE6/0VReIvtII181ZnmE8uRTJY2EeA3bjsJIr/w4oq1PxrhF4bqNbEKrhLVKy3oHF4zNXZtc3o9mSffPWAmJeEEhSEx/1o/DiurKhw7iz9el/shxo6Talz6G2T8JFRFQZ8DFNhSRd0U6VNMeS8SPlxTHgNriuNUby8AYJOWTU0KrzYvAvrdETNw+waX/AJuBtIcTqCYm5u8I8lmOX8efCW113yZ+rf8AEKq+aDzg6DlnJIpLkDcBtXC4Nyojd7WB/wCq4pco8CZiXqogVaqD+i2283WWL9mtvy8mjI7rEN138qPmxS2aTPuzABTK0NxbbsR4cOFGXiR/GHwkfCjf2XUjHPKljJH9OtzdXdFjYuY2YmYdCzZg1pyNfRjoyKOJIe9sBJK8ldw9RK/DjHPZnMEs7qRAQ/wox9ruixuPNFn6HfphE+UiQcCPt3JYfUbHWpaormV4LBt8ekeVZzrnt4SNCvGrCbod4Kztmk/DTZpEIAfQXf8AN+9g6URmTV1fZKMsyoZGPQfvmvrFJNZvtBvzW23/AGtnmtx84u2pKPGeekkwLvWaSTcGQj0gLVAT+cSx9AMiJGSW7LkPJLvV1HR0mSuqqqRmR8HtK7DMraLTcpFqSsylh6BVPcdraVSWZtklkCeSBWt2ibNIlS2kX6/wCXw4d5aZ9VVmpX7il3LB00asmqrhwTmMST1bdo2mKp9ZD04xplmutUHacgZJU11U3T9wqeurqmX1VXmLrxsjI+I0q4kpKz7WNdmH/bLfw4+UNDtLMJWuEAS0isB1RDNqj0wfuVUCaPFXgEn4xMtvkwSMoAWa5sU4i4P+L1A3SuvuuMFxG72f38U1bupB0jfaXFO0g1R5t6vj8mLplOZjmNTJ2Fd65bmZEV13ejhVVlpIVphHStzZ31fm7Q60c8of1W7ZSJmgLZZtcqgYhdfd7p4EEznX2m2ifJHti8PCj4xHrS82NMV+PpNjHKjb+QF1z/1R4oVbINlZxMyttNqZn/pRH8OJlSGT8RIo/wBlm2XAFrUIoF03nh2gKlzQa5bylZ+rCcIOHCq6CDO4QFqqqFomhv3CPuXl04K2cCWbNAMIqQp3MqWkxfmrxCT7ST0rQHlJJIeq7Adbt7e2tFoiG1KOcWjb/wDCl1+9jTufKPoVhIb8nMCTo/T8A4MatQuiUiLT7WKidTExiP0cFlB9mdn+ouSPrRzbq2bZh4PQRdBeXCuS2ZOatX52UzSNUycl6GZhxitk6/VvsSVVsIDKw/ssENrHIqulgIB/jCv3CxX8qYsGvaIp87NvqY/j0F/3sOqa0sCMkO5WY4e9gs850PVkM3K0NuagkE89tUE+XvcQMCaxzUSs4uVFV03Lm3/a4sWcyH/DJXFgCKnrtwfxnd+LFZhRNKWjwEx1OKSO28S68Zuu3EtdS+qFb/7V7KXh6BkMx6Um1GMtGtzEdRIF25pJJLr/AGSuz3sfPB12os7FdhSUCqPmhkP3cfSDtLXvcgJpQbrSj3pf/M5fHyNUSDru5PFgymt9MY5pjKSzOD7ghASX077FyrnMbJaScVh6EHCtQulkHmggCQEFyqXKHkDGNq87Qua9M1NKQjOYphJqyeKt0LqaZEVgEQh+ixsf+p9kH5k44w5Tcrf+5S+PnpmFFoylXVIbh4qkp62dht/lSxHqbGZGKkDjvSWpae7INW1/mlmFGvKvkohzGslTcAkhCNWxXglcB3AkJ82IntNIA3zyqjqE3DQzHxfVUMW7+p6w3AahkZEIXhcXs3fixX+1YIJZ3Th7rlRaXbrbvqqWCX6ZqnpuzRVC6TtTq7qEsazZpPGoJMxbJgqkOmI6QiAbbcN4exX1k5JFUSN+43Jny97s/pZiSjRNw8ao3kShqgIDZzHdtxD0mqtOQ76SFFVWxVXvFxLaF1obrsJ29ZyTp1SF+komiR6RASQAoRXCXdcvNy77vLyYOcI1cL9ijN1mxRUUWcOmVgiJFzKtcA6N4MUU0VY142FKwLRjuu0iv3lv9nGhKAlpinOyPmjK008kI+SYum6oOWhEgqluQvEDAvBd8eCi3D8r6sUBUeoL5P2lmnIOOmEM8KfeOmDkRVJ6ZFpGIXmyX/GWBKiMqksjqw77YaX+DnjV2Xtd9pKIzapeKr+rKuatZU3tiDuUIgX0mqpcuqXlwE2/aHz1Im6Kuc1ZkJWCX8Mr7vmw1bfLcSUEMjWju1cqj+fZwiV2p6ujOUD3AYl4Of2cCOPSbCsNqJCnqhcIqqkJAYb/ABdHV04Mna0VD89EoZGRWRMef2Vxcvi6MBtmRtXiOqivbsLVSa3bzDyF8uAX9yZ0fqhWtOys2FXIHMWPUU9KV7Z3rEqNoj6Cafdt/Jv8V/hx8/YFu8b1pDmSKpCEi03WHyao4+iHZT9LsMlq+Wik1xdkk4NqSdwq38HssLm9jGUJ3MrtW0NWEFCVzVlYRQybhuSSDtch1UtURP8AFiLEga0+19pD4xzz+Sh1nYzkkM8q8cpNnRJ/SiT3CkVhBxRYJXauauXCOVKKCK6gnQEZeIhdaF6uI7N3tB53QecNaQkXmnUrNm0qCQbtUBfEIJIguVgB7IYIvaIzczfpxHKlnRtZVH60qCjYwjQaPyE3TsyIbz8xkfN5cFtkXZqlwUDUWD/8x84iLBzcFSx+0Uj/AOausHb+pwsHLevKoNdmulZGpAJKBb1K4Fsbn9nXKZK1NULzNCpxfNKojGSTlKWXEgSNBzeIFd12hg3f1PnMjMWt66qhtWtf1DPIsmrfSSkpRVyCRlr32iZeTEhlzd5UOqp9oTZnRW17kk75YBuSVMTS+qpF7J9OB23cORWsJ4qVgK8yqpARnu3Wff24J2fSq356qwRS4y45YNqYK/8ANUt4kGBys/coETndpmCurrqmIEe397f4b8AvbiTqn2Cib2iQeSPZKyrNkiouRzLpXurit2ngDUPGypZZ5pNn7NyInT8eIfVz/wDfyxxp/NzMSrKG7LGXE7SVQyEao4eSTU+EeqpEreguAbgt5TIVQ84BgH5f51ZxSOX+ZTx5mnVy6zKBZKtVFJt0RoKnMsxMx3bCsMx29B24IbIsofkpc4O7xfejH2FVVvorTKLoFRUSmXaVpD5rvxYq2dSTYc5qzWB+KSyU641RVbpKh8/u/Fir9lbNzNmez7pSEqPNSrJBi4fmCrJ9NrqpK7eUhMt+LhnESX53qzRTeIJLq1A4bjcqKXPy3Fi2pKYKymGDyHzhusq3TC9AiS1SO1BIdll3L12W4yTmgOrV00dlv1o+i35Ma0UVMRE0H7NIjF2X2oEGkAlf0+C68cZRzavSraoAVPcDow5rsG2bcSruuwVpTItdZDJ+l96qV6TvcJCP6dezF2dLhKNyWSuSUDYW27o/a3bfL5sUzJQG35qKVAH5Dege1S3afEK+PB9yIomArbMJKCq0tNs4ZqmWmvbuEQt3YwtSBu15APMS6Qy+FJbhdPlFZ9zQ3xsOYmRWSgAe0ecAVK/Z/TbjMsbFmrOM5J6sWobxvYn4u9Hnx9E+2DkzQmT1ER9QsKpeSgys81b2yD3ieBAEF79Lq3kW7GFFI5sL5qsVSRmik8ScEmPEFcAkPjS8uNVbJUTeUua3SpauVST6g6dMEsxIU2oW/wBsDQNv/WhxozJVIEKJJYXn1hWUVPSVJW3YCXgHATbw0Izno9+hPMSbt3iTpe3iNXYrdt241Jk7U+VTrs/fRZCkV0qsSkD9BzgopCJJ3j13X8nkxXd3+sU3dRPD+OTcBjqV3yRXp9DMymvWrhMWTdc1XOuqRNxbmkqIXXluG/ku8OCB2zXGRCeS0o8oZWlyqB26aNdRiKXFKpatxhs6eq3y4BTd0sOiiqCpCCp+botvvDw7sUfPJ0aVCtwQO1E5RJW0lTLZpKjt8u358IrRVQcFiO4lo+KbYNRTFWS2jtWf5KzWLYPw4jVrBTG0B9qzDh4rtvv5ywzI7hx0YVwR0ta5UO+67rx1fcJHYPtW45RFG1Y1TtIBMkh8R7duOb+5JG+4b8fVBOBs8A433/U4X+TFM0dU0rVzuAbTqUp3S75MCXFuaQ32kfIJGHy4+fxK2jg7dnGURZQNRLKuSTscNxG3xnq9fu4SXs4UclqOFKXrtwFgi3LXPaaqCiqmzCQf0xLtlI9KMbpEo0uFIS1VbrrB6RIcBh2aJUlUjnibiCEk7iEVf+Zq7C5fZwp65RN8TlJ4qVithjxt3t2jds/mYuVE1Zl1E5YVwpWsAtKSi8NIhHuEy1eEDglxId5CYXD9/GEAusVUiXb3x82W7KDVEVh+eiEWs88WFYi4rVMrQtt8uPyomKMaNOyjoLh9VpWpDtu3q4cuo415x8/SmGPCuNUkLl7T3h4ejClSRHrZvDo+uI8iZRqTVX6xyHcRH97GvwbdItS5m3V0wiKPyz1ZfOQpFI9ATy+hFerYBNWfg8OLpxSJNyeN0UFSMTMk01191gdN4+XEv2Y8rqWz1zkk5tOr3ox1L0fBRZJsu6B0YtRQXA7vCaG32QwTO0plXTmUakMEA/d6Mkk7JUXbq7d3Q+H9rd7mEF1oylmjtFa7hq6sR6nzFJA6LSRSlEdANBNwrfcPECI+70FgM5gJNl+MWJmrqcQr3t6W/eXgK/BogxWCURWamSqOvelphcdnN0F/TZswDcyI3SJ4ZGJKapmZa92+7n5cD2r1qdXb1S1p2U0gPJ2LPg3Q/WHYkqT9dAC3F0gr+DBcZteIJRFJgKhXBt411u9675sCXskq8fk3CsBBAiAndpLxwkP2v60y34LxEzYLLLAiJKG4SG5CLStv8VwF82EtWPulwfaQQlBpF/K2G9Epls7hXv1H0uHZcpkvZYYl1+zieqzL1hVbMmDqdXQTNgswuBLdarpbv9V82MlR7Cv6cTdI05X66bN66N0SDlgleJ2iO3dsHuhsHDqoKjzFhBbrBX7FdmrsMii0Lr7iEP3rcamhvzFKwLHd/es7VWJ998nRLctU+nLz0JRRRqFVSCv1MmqRO0wXtuSId+3fzYG6/ZTy9SSD0sGEYzcJRzpgg7bQiQuEhVaqoXX23cquBVPP8xY6JF+1zFbLqHZb/BDXS5OndhnLTNfoQ6kqhXIoEAbRVYIWpe9cN433cvLi4eIqY9Qj9aj5hqQ/SK7QvY6yoy/mKdqSIbNmj6BdNHWuMJ3q5pW37rdl1vTiJmAM8xKmBKNXckYtFRXQdKpGPNstuH4cQrWoc4CixkkK5j7TSA0hKLbl17/kw8Fq/lphNzMzEfJkCGkJKsm6Rlt3iQh09NmF17vzFbTZQ/emNqtT9K7mOp4nxKCylsIqV6Vqoi6IjD3TVswTMnoZtLwNXQyvpXZpyCHBkoQ6mnqpENw3EV/NgXt28Ik8sJnFH+iVS4VAT9i38PTZiFbtakpyqaiqela59XuJhJJD1eSSCqA6V1m3bZzFeWM/aqsWqkX3eVH3OjdqGCYHmV6ofsQ0TQtWR9YNa/lXL5kLgBEo5IQLVbmgfKPhVLEbQvYKoahauhawa5kS7laEft34IKxyQiqaXisxHp1NmuvaZZisUituP+DUCt93Vxy+lMzm4LPFc0YNJmAfbkyQS70/Huxqh4ko+UfrSDzHWcxfUuz/AKnvl0wr1nXkZXk96HDSXSlhQ9XJFcYL6thHbfbdiEzO/qd+WlZVpMV46zDqePWmJRxJLpJRwKiKqqt23b/TZh9H1HX7gi4jNeMVFKwLmzBuSV5iVlxauzl5cKSFVZls1hRQzFil79gLk1bikVnh3by3Dt8+CWOLmI6R+tQLh9/vKWzgkmaua0C5bxpPiVi3YCJd1Z3o815CeI9qu5FuKziNVIbzMxtSLV2eLVwxkHUrUrqJbVHWbF4QK390LVIwPl7ogLl2lh4LJmqWjrNiUSV2rjZfuDm5v97GTu9X1+pJ9taa3sdVYFolcMnkmxZhtX5Aq2JJJUibEIbdpXEVpl8uISpewXlfVVRy9SSdd1ALiTeuH5pptgtSNUiIujl3YpUhThlVUPPRNbKRElG6pAk2JLSK+4T7o7r+bl6cTgyWYQptwHNqNXvsAm31ASv/ANF8tuGNormrewQFzakruFsdrKjNaKKn6k7DOXNR108rl1Ws6k8eyPrI002aVoncJWePpx1nF2Icvc3q+lswpSsqiZvJXh9VBo1Ss7pBJAbb/IlisN3+Z1qwFmXH3GBqoJocEWkfmLQ5S27rNoY9IS2ZYsUzb5kMWZc6txM1+S6/9AO3zYbjxAxy/el5WF/mJEimey7SNFzBVIwm5xVZKmWVNd6klbw7X7IrfFiu5uREVA5YxNMMHLxVGPlGVi66SQn/ABoek9nx7MD9nVGbTolAZZr088WAg5UmfwEOleHtYWj6gzCkol0wrKs2f1hLQcIDwqQCBhvuLQvDFVTxAw604I7iFX01mfp3xdItqliB/HJkCuu51UrhEmrCxU7va/mY5dEiqKOvcRGqBCnwDMtLyDZhq4dQ7MRfylWwoikhoCXrcBPnLZcf3cNyNF5orRteR7pua4ABDKXW+S0Lr8YkR0rWiWpYbqhJZVRTSZqCmBneXu+1sxtDJVKNQyxpZSRkWw3xaV2tGCppbR8KWMT1k/Bw6TbBwd2qaRCIhf8AFjdeU8w+DLSkmajOVUSSi0v7AJL2lsH9KPT7OG3EAzpWxJQpykRRVmgVYtOqIlZq84lo4kWgN1hZpJJfajyjpXh8eJTtN05UMpmZ6HMXAyDlH1W3S1EGpkN9yvUHtYZxMuslUUcnoyHpE5Np6BRMFSST70eUlSu+LHs+K8pVhnE7p6XhxeOCatNxN26ojcBEIbyu3WYYcHwAHPEP3rN8SCec3Hu/ghMjSFZuo8X6VJS4pqgZ2kzVErAuHltvDlxZs3IaecVoo5Sp6VVRNnH2KJMFSE+4SHoHAhqLObKWlKkdMIGm55BqaVzoWLJuKQmBEKq497efhP2cXyuqtpV1mtNRq7l4o6SSihatibjpK3s0ivItW/qHbZ8eN+JU2VLM1LMk07Lao11SFVDzUrL+1wCv7uCF2jlVmEHSZ3qoEEo0utEL/wDi1Xx4HdQP6Yax6j9IHjZNk1NV13QbgAbjPm5ubF+7QjptJUzSLkTcpIu3rJUbeffGkQXCF3iwHWkPVHEwtA+7m5IRvI5mksmsrKtnN4mX2SSRhzbN/wDTx4N3ZjI3X0zbJWEXqEAS0xC3kPwYBZLvG7hNZ0c0qR6piKrhxt3EO3uvmL38HPsyMFuMrT1szVJFxApWis8Ne8LDu2kIh8OMjahhWCtrfCnQuK4lBzdxfwO+L/2cseg4OYGrFlVYp4kn6jdhcSB85pK7cQtaRtAU0xTklaPj11nDoGTdAWCQ3qmWzEtE0fTDOrluCh2KC3qR2dqbMRAe6XE+TG3lrXNeVOBg5i3/AInff9nPFRTgZtLPKFeFCPhbhEu71ybnpB3Stm74cTydEUkQ/wDE8eQ+IWoFiFj4aKi84IltENkmqJxzgtJMLQI9JXfbjzBCLoqZDpJA/NZfSzQeNhcikicbGFq2pbe685Diss2qLV0obCYuUu3d0lb73e4tmbDV/wDnMeLIIpEz9Wx4q3PTS38P4bSDzYH5WJamg5QLSILv4UVIeceS9DZ/QcY+4RN8l0i1/BhWxMvWD9/krRvCouXNhSFxJJXfpy8BEHz4dJ0/MXEZQ77mD/Bz/dxX8vUoRfs80Wc2DZNFJV73hK6oj35dVo+LwYdQtUZYwyykUymKaXUVLaJEN9+NZQj2Dcu6sDcPhLniJTUHByqVIpolFPtQJJwraTc/Nh43i5ISvOKebPEgeKrU1QUq/puJOZ9XpE9mXDdrclsIwDEW1p6BJQbIRjd5W43YJKAIIdauRMFmvrA1WyqV883JIlBIbgsLGJ6fNZdveTZVBFLV3CaW7f8AyuNQZYzzyekq2RXAUm8ZWDdugmIW2pWq4zTAw1SKxorNY0ST1TBJQn+ls1S6dIrB+LCO96224rVcMFB1yS8SSxJ2JASSh7btt/8At/6bMZ/oexLOKn37NHSeJOg4clRVIRPmvIUt5iIFdsxo5Sja/YJiEa2QJ0HU2eH3XsWJf7mMy06bmBzYhXKSMQkoaqQpKL2EkldtIyExs83u4Es2kiTW9lMBWgKgZyvrx0jFvCZ8WDR0krHt+6dK7SFVXiN4b933MJuJTM6RFw/nnJNlo1VUjTXSHdutVIbLr+Yee3F4o+BrmZj1jgTVjIOpQBm1TcuHTlhqmYpESW0UgHaQ7A2gRhi5TuVFftZoUpzNCk1Cjybiu2eS8tfxCTfSvEiHZduLq5sEuELW9KCdECVI9NPdjL0b3lL5zNit5l4J0Qfex07e9l2LiTYZeTlZNpUAvQaTMK4SSV8Vyquwdt2N7xqSyqJGCytwF48ROY1JfTKh5qnldxOGZ6V360BuD7uK37E1WURHgRFp7yU010OlrB9PMsDRELLzzhUGTQ1VFVbUBHcRD4vvYuGXeXSD6oFvpA5sax6Cq6oiVtpCQ27vewR8louIpWk5aoalAkBVV0ECIdxBb+i9vFQlZSNjnSjlu3dkm4/i7ZMbrva+EccIq6p8TJgF1mmLrUhH5ytNGVF67nU8sPVSScekzVXVe7hu3WpFb4sWCemZWgafcAzRSeOHSRj9ral5zVLw4plJwTk5JSefuTQW0jBXd0W8vs4Tl1WzhvwEfpkza9XSW3C7rrGDoiAyjuUit4vkQiWlAzNQpLMGPsShLZCPLuibAVhgV2ru+H4cReS3Z5rjMWqG8Kb9CmiWMiBd6hq3JCkqRCIAQ+EcaGkYgGUQ3ciCSafhs+b9zDvs7xcLV+bBNpAhd8EapEiSvIekX7uN5YuK6kmOp0w6UjvlkpAaKulqQXqfs4ZP0hPOaZrHtWUpFycUroOGikSuKoGPSXNhilkT2YVU/rHbJgt4mHcxJW7h8w4KXaVl4tjmvUCSzBpqm+VEdVkO4RAB5rd44qFC5oUNB1AzlZ6mIx0zbla6EWCV9niHb0Y6tSW999jMzCXNnKkWyioRTJzsityvX7YxnZv7iGIh+VAsIKZXdjYi73tdviI+b+19f/52xtatouiXUXAz0dStLk1cN3Dhu54BAUldiXNt2c3seziPy7maPeTRUZUGXUUhIJN+MBL1W1IFUrxEyFW2xUdwlizqTsok8Sj1s4zFYjnKI7ITNj/B3a0k11g8NMrlbt/kBxUc1stFsoq+kqDcTHrXghSNJ9oaWqBiJcvvY+mFfRGW6VA1IbOg4fUODkDSVGIbjafDqlzW7OXGBe2A4D8/1WAQXCkLcD5/+apYNaYyOaS+tVJ1BakEUQRGakjExtCJD3vrSWJBGwW61pjv322+blxDpzLniEz9VRhKGke5RquJ2bS/W2Yt1UM2DJjCnHNhbesIGPfuk0riDVcDcfORWYk46KKaFH0+yRStP5YMc0Mw86E6chJJTTuQp9VcUDIitErRI+nmxCtctuyYQCBdsb0j5RgVBu/1GNpSMSxeZLZewbr+LSFRNGqm0eS5cuv2MDyvoGYyZcIzczGxU9SrsrVXYxaXEM7/ABDbjPUTdTVMZpES9i+ODmXJARHKzspCV6XbH9Ike64ovS5uf9BhP8yXZh3Gy7ZkXaqNp6zUBuu/zeNo5bpUNVSKbZ1R9KuVFR1Ul045ruC3wgOKLA5oZLQzFvTc3lpEE8ZIAkRcA1LVP3xwfR0JVoyYcQ9XVnSFF1ZZdZGZBIJ/V+2XRSheJy3u+4Y4p9ZZNQ7Kh5Su6IzppWt42CdN2rwYlgqlpKq/Zc6pB0Y2RmBmJldKMRjaNyugSJXnVUi2ur7oh97AXzajUWWR9fAyimbMXEpTV6TRqKAX9+R7A9rDHze5S7nFWxV9YWVSSNVNYBttBI7/AIMPoNgfqWHuZiV7BK260btxcuGaLJYyLZ3ZiYXeH+diSi2rkWbVEViVbsgBBK4uUNxW/Nj66WhGCilkmgf52qNPhmwqevGgFaYif2o4+vvo9Bj6PT6RDqux8jshUHJZ1UOF5b5ZpbcHs4+tvodAS3pbkOmfSJdWF7ZCD5S9n70BcvfFC/OFyCUpBAZhctqpCJePaX4CwEs3iBKHTDxtXYfJg45xogbuAIg3aqtpe5jPmfUkjEUujKvDLRbqg3O0LrjVIRxnHJ9eLxI+n+DCgXm4Bus0ngJLWi3p5IjG3m+tCOLllPe1p99xBjqcE7Dk39OBzV1QsKqzEnJJgDlJEIFoNrlAkiL60PSeL5levxEG4tWEiNqY/dxo6vcJKikHSrF2Y3R/mvp9G8rUuLK0f5W38ODszdBcoYbiDGe+zC/bfmzjW1n1wCVH3NW7B4arguoSzU+7uNI/6ewWCRLUvEKH+fklwUG1MgDkcK7vII4zyT1ZvDpuXB/xpI1S9u3Bi7Vbrh6VIEFkxdGweihcXWYj+9gD1lrMINENpKAy329Su3GYuY+6STyh0MCtbLNTatY8NYrePbkPx4uDFW5ZvvHm5cVOQVPg428LS41vtxPRq4KkifLYqAfPhhSaCQL+1EBv/wCjbg/2X4RxV1Nse46e9D72JZGo4cYNZgMkhrGAWjqh5fNiJWVRVZrACyREqrsEVRxqpgs3E1G2ncPthhwsrcSlofpT+/j3BubkzJFURvC8rOTDfiriLzqnih3YiGE4Irhb/wAqf4sVuWSW/ONS61haZpOwu84BdizI3qpomIEXenygReLwYUTSAnjU1WZESRXCRJFt2kP4sXtDOKgWg1mvtWVbDzNKtYSJm2LxRpONCVTSVElUjNJ8O4efpxmtiaLpNwALILkltIR3Ekdl2LhnlE1JCZwSjOUil0mLtq0cIO9I9J0eu8LaRjv2L7/DgW5c3vfTUUqgCRInMq2FfsIwFLzeccZ+tamRGS1FvKDQirtHquSaoopNrvaMxxJJrvNMruW/aJcn9NuI8V41moQG/SS1UtUU1ytPcBdPXvAsLC9bW2JORLeHKHl/nFhSmaeJrnbZYNxjYl7fRhZN+aV3EAqqPICX6o/Fd1jiNbyMU3FPXftki5CTXPS+/jybpnojw7xsqIb7hXH97HozUl1LP43c8dOUkEdg96XWfRh01E0mtl9omfV1YoObwgrS7EAMRJKUb7rx3c373yYJiYmlHrMBMR4d1fuL3dv9OnEyag0JKoXZuEK64WwtZLiSRPqEuX5ccpi5JqSwrFaB9X4sdcU59X9OpdftPyjhFMtBEbQEhBXx9AeLFStU5xWqsSJLXDZt1PHzWYiZZ0DohNqYimAgZbLvnwom9WQU1kli1Aa2/a7uXDNTemozSAh1VQLaXRYWwvfIfhx6K8m8oqzQFRy90EhSS1TIrBtDCjcAakWqaFtlu3dinZyqrfm8fnuSIxaJDzbgE/8Ad9q7FxkolyLggJEdQO6tHpMDt+/i3Kg0JKqUyilL2wXGYD4AJUAwoTwLS0lkhvEBL/e/pz4TJg/SElgRIhPvbvlv+PbhQWbziFERRIe6A+QN/LiCtXkZECRLfaQcg2XXhhZN+BEWgbYlDb97dtIf6bcNXDNZIXAcMQ7z+/djpqhwqJOdG6wbhuC7oLESFeFVfJlUEu2dR5j11Ae2/wDYK4tEgQJdpnMRESuE9W4f/bMUfKXWS7ZlLubCJMKhBK4eW/hS2YvsxYPajzGHcJaTgvhf24Pv+HTb/k/gquFC/wA5Hxfip8rElB3iPhEsErs+ZoQ+WlbP5WrGCyrLgUgaKNRElde4hMSEiHbbbgclftvuEQDHiSWO201brTL7K7+nKWOZUdV1J0Xx5V2i50DV1pSpXS0ktgFm/wBmic+svcsGS5K86i9OtT+LmwzXrzscqegfQ+y0p1O7lP6KpF8ySWMo8a5uI1TVFMN1tpDb5t+FkX+r9ksReMrhw5Hiys7orGF5N7Z3i+d/ZaeXfdheR9P1yi4Mb/FSjxL5hSxEyWXvYFm+WnIBEj/6K8S/DjPaLowK8AEhxy6VWO4BuEufbuxaPGNSG1sUOXk2of8AeL+n4K151eikG1bptKOmWhxAs2STX0Nlb0gBJIUgS8W2zFWgpKnqfnYJ5Jy6Caaso1SVWI+6Q7265XwD5sMVnpqvhbGFydwF14dEWlafNYZ7iHl+C3CV+p6w+T7o7lsKW3dXoxoxLaMVtCeS7KOZko4lZStaWkXziziCbVSKerYFoXCkuPSOHrbITIp/HC2iZiU9XkO1BpVjvh7fZFe3GGlOGdCWxJWz9YGHCKUUlp6sIgSgfpBSG8vlxo/8YBzMrBF5M8f0VQXzf/JbYe9mXLR56C9KFVVq21eYm1WPd3zlge1P/U8so6tJRWVr3MNY1UgQuWlmq+wCuELlWxlbjOfFANpt2ZCn+yVMfuFhbj5JItZq/k0PZer2/exa1xg1/tkhnPJrU8tQP8kQsyOztE5EUHBUfSb+clo/0TD1wKz30AawEqkgADckkI8qXgwJU2ZoLEDhs5QIAs3Db+HE1JVFNP2gxz+XfPG+qBCm5dKqiJe+WIcmQCiPMXg5fuhjPXq4DcqrPFbzhu1O2WjGmdKUVsGgKBPMTKaiZOFrx7AvYqOexxLt2aS+oCpACqRiqP7LEpIZQZ7kj6UovtExpJ6QJWv6NQLaPLuBUfDjH0RVtU061Tawk3KxrNIj7hs8JJIzPq8m/FgbZuZnAQ6NeVEmJbSSN4R/NjQ03EtK0A9mW1YGr4Ar33ycaeHURI3z3Z77RspPtarcZj5fSUkyAxQJeBdNhsMEh6F/2Q4hpLJ7tYt2qyKUVlXKit1IKv0DHZbdvIsD5rnzm4h/FcxZfZtPUFBT/apFiQa9pHOUPSJBXSjnk2uYxnb8iQ4YNcZUzRaZIB3ye3jvNl+f3Kdy5y8zgpyTzBqTNCnaej0XdHy6SBRL8l7jMUiMSE9/6LAXWSWV9OsgatvhEeb5cEtXtJ5uv2L5nLvIBVq4aKorj6m9IqkJCQkNwq83uYGDpUDcKWGNx9P9BxnOJ7qxdCbcaW14JstbZsHhqh3RVTzW4n83s0Z/qOUhPxjiqt1btNHhiIbem7y4uGZmsrQM8HdKFwZFan04osaQEm3MjtEA2XbbjO3BPDnwMvEq+MPhLfhRr7Nw2Z20dYH+HmJf6IsbrzGcIjL0u0K64wdn8JJYwV2cCNDO2jw6vWh7rujSLG8q8bo/SCn5V0Yi3j2D01S9pVKzGmtmjM+T9eC5hdxlUN/n9a+WHa2eA4zakn6qIqqHKSDW7/q5JJfvY+iuRf8A+ilEmP8A8B3oL/5nBj5oZ7OvpCpD1CJ3LSElMPS/zqqRY+m+SrfQ7KMOmW0TotH03e1GBh44Wa2KWPDDBYayBZXZ9U6sdvdG7L/uquNtZStQbzjr/wCI13xPV8ZByTSRSzihXKVuxJ6XPd/gquNkZYkHrhbz08F/+nIvxY+WrW0vlZoJfPuokASqqY3jphKPREesLXBDiyZX/V8wKbAzG4JloPLv+1HEDWg6VdVAigZaZzknen4A4pXEtly4AK0p/Z3hzLSwiLfsVG/744zlXzLWN7V9La7HVj2SI8xEv+EfxYoFZJAc4oH6qLu+J0r+7gj1OyePmzYWSOqQ+hcvtRH9X48VScpWeeS0k5SYCQnFgkH1lId+uuVnN4CHDZhsjdlHlH7Kx+BjlQWe+FBLtrRp9RwypD7fqtfGiM99tPxPi4dwY/6r97AlHLyuB7TUfXLqnhQg2kSaRvikWpb+AXD7IFb+ch6MFrPbdERQWf4G6+8hhg1pzPz+pV7nRQfbukeOK8NvGPUvgBXCeXrUPz7Qa1/JFqgI/wDspfvYRbpfwgtdy+tHHziWHmXKR/nyi1ukGaoF/wBlw7Y2od0day3n0IIZ1Vl3NonKAqHm7pIvv4rqMiiq4Y8UjuBcNwlvsvxYs/lVvz3Vxfu4d+Ft3/VUCxTY8g4pussjaQWbrrbv6W4wdduJbqj9UK+k+a7ApfKdrD2X+shNraPVewVH8WPjkxVN7cZbtnNj7QyST55RNHuGTRR0SThk4VFPdaHCnvx8xHnYz7Q4VBKBHZYqpsQeKg1JSZjkBJIFSs51x6LcOKEhyB8KyR7vlLbf9T+SAMjoz+VW/wDcx1jCGYCTBWoqguDTUCWdiBD07yx9FOxdRVSUJlJHUvV8agxlmnEEu2TeIObb3i5BuSIh5Sxk+a7LebL2WmH6sPENk3ck4dAS9RMNwGRWfpcVO6CVjZj0kil2CQD1GsfMXGHu8X1W7FL7WgGOcksav6Vq0IP+z24M/ZWy4lct2ajOYcxAkapna2lkHJ/xWz9ERYDna+L/AIanQEBb4hkfxkqP4cE3D4GKKt/wxCODMGco1PcktqpGkQh13YhaVdAvGvrguJJ+7stSut72632fLiWZkbV81c6No6qR7g5rD34rdK63AyRpGhslnCo3EO4Lh5cIW9yfuq0JpIkV6oCW4A01G/Lst9/GnMj6BlMyuzhmPQMO8QQfSzsWwKvrk0gP8iRHv3XDt8OMv8UsQuHLfcIHvuVCyy3k+DB3yT7RUllDTsvENacjZBR0u4kiSUXJIhMEA23DffdZgnA4EJEltUBG1BvcihN9nTMSYrqk6tXWp1q3ppV6q4FORNcleIbklt7oLMZwLsB5okKelK0rqBZ/h5fu40K87c021FTSoGLV7/SARfkV2xIruTzl8GOFe3VMKNiULL2MUT1SSL6+XjVET5OXurvewRngRSIi+alvVqruoX9q5uC+dEsjopERxLLmS1ejpwD49ntFyqiPDhu+wVK7Zs3eG+348FLNfNX85FUN6wQp5tGk4YNxMWz24x23AW8QsILsUFuvpWvGrMdhBaIqhpWF5ejw24gRTTZhuLQiS2b2GRSdUJVIIpmmPrLS7wLd2gHl82Oe012bayzgr2makp+ShkGsEgAKi5XtVIwX1duzAnyO7RDjKmmJCKTo9o8J6ub20pAQKwGvLylfdpW+2eCQPbaecYDMsvo4SNVwgZestoGldzd11W4kLrWRlmlrrFV1knWhQwzB7BWY9YZgVPV7KdplBGal3b5BNVydwpKqkYXWhzYNcrkDX8lFU5Es6jiY9OPpqPhnhCuZXKtyVvtELf1o4g33bcko1TSVy7YCRs27pL+EDsVNVIS0rtLmE7x93C5dtdcXizb6GR31dfSP66r47Tt7rf1l7uPoPtNcyiTFafKmNI9mLMig6EUpp1XcHLk3Vj+FXsNra3biqNhDu/W4U7O+QVSZQZlVlXNRz0Ku3qVfVQSaL3Gl3qpbrx/a4dxvbYkpIR0sv2iRBrXio/IfsgEjt2b+bC77tkP0VOHeZeIknYBGfFFbcS4peD3/AGcWDUtbZfRVZU1VzigL2jItyvnRWR2IKCq8aGJEldYHBIc1hcuBuMbNpNSWas1UxPkIkjvG/oLds9rddswRs4Kvpusp55VoxfDOpXSdEiKpFaYJCN/n5cCt0OkiKwG2tAbRUG25Kw7gu3b8CuFMiTin0iMlq+Y7PFRZ6dnbLmGjZVi1OMcqv3RvCICVuvHbYJbsU+newbXlKUvVcKvUNPrlUTBuzbkJKlpmlIoOt+3wIW7cSWXvawmKGpCJpNKDi3PANbRUISEiuuLxYsqPbem+K4Zel4tqIiR6ihq2chF+H5sfRJqIpeTFZgRRjFUXKTsS1hltnBT+Zbyeg+DjF7l0ECXvL2bxxTs6gNfNSrSFErwm3BGRL2hbcVpYOMt2z5dBN1r0nBOU0g1Uvrphr8vLePmxnvMarUaqq6Yqpkwj0E3DwHSqaHEEewOYTuELvLbiRGBhAERStOic3RVPblci4bG5IbOfVXErTMeTlsuxkHOK9vXlRNtYVRSdWXDyco419scNbzNBBQ0vsNJUrb+e3xpXD9/GQc3EjCuqgBXm4rdst6Bw3sY9oSHunqhWqcoxD05V0pd6AUW9XCN2raX2pWbeU8WuNeAqzT7lASVELx1bgGwd3ddHnHEFlYldlZSyJgQp+qUj1BC7+Zixp/VysdLaCd4blCPdt37rdnLzY5/Wl7oPxLqNH8Gb8K6bv7XX1JmkgsqW64+bfbzbcOhqPhxsdLLsxvvtXkrbT28pW+z8OI9RBF0+TB6iqreappEKobd9v4vewmiNyaaJoql3VqAkY2FaN3h+U8DalaQgacPlWzpqTAQuv7q3igVArNoW38mG6ark2qblVyI7QdKroGA3GG7uhO6z37sOFlTcJkAuUBvALSJwkVthjYVvPhRYFlRTWQASIxAgEVUuewbwL8BefH2WheiO5R5Lm1kCbKySRIgXUuBXePkLeO7FFz6JY6HRuMiH1oltv2DtV6fFgjaTknDW0LryPcJAR7Lb9vi3YGefhAFDxYGtuVe3pJWeVW+3+m3B1q+GN+JJeI/9Le8Kz68Lux9rDMi7vd4sLOuccNVOWzHTxX5xLevXf2dmPEdolhP+8WOVLyux9UTSxK3D5sHzs1iiVM1ECqyQrca3NISVEbtivJ4/5+M/iltE8Hrs8tzKlagtMt7puFtyQ/olfH97kwj4g+AktpwH/q7fykUFmppOkzE9BZuX2oqpFbYJeblv+E8PG6qxkQNbRauBNBURcJWurxtO3dzbsJkkBDZJNl191hkKqWqJ+/suw4Zt9IU3NjnRtVMbdAruX9V8+OdyXeyXTFnCJIlqw7YlNKzc3aj0aVv2Xvc/ON+OXyUI6WT4qHSV0kr9TSaj0iRl9lv5d/sY5a8YCIggBKopJKn9qkVoaRdJ7zHqMfJjp0q/9W6yvcOG4pd/ckQWbduz3d3TiWaXeQ3Vm+6nDdWNYOicxLNnHqK2XkmCSWkAEQnuARvSLm9w8JrSzl61/jJObEDJIuKAjv0uTf1fe2YRTQWdLJ71RT1dI7VULuqzn6/MOOk+9bqP79ceFMFRTVSEOXw8/ix8makLQBtSdPiZTQ9ylpg4uIklbg5t9w8+BTnA1ubyDwnKREaV5kIbCPw33YNECgCrxFYHOrq7twFs3Whut9nGec0FTJu+R4xJId9xaR7jEuQrBsw1tXr0nvJdmtfdkgmh5DwazxGQEb3G5NIxt70t32RYNDGNdCNhemXXFxYaQquhHk6rdD5cBTsmOXLXIOnwR9DL02KuCtU1+fVLqFUfuYLqPrJwtwcs5jCEzvD6qugkXL4194+XCSrIesueJAtgWWKTfMAfiizVm3zElTV3C6Q3bC226H+6eHZxccqqswXUWJBpsVFR8lqpHttH7LzDuxVqurKjIZROKlKhQYyGkC4aAGqdgKlZbtI+cerz4gXWc1HuFCWB5MgTj7Uk6ffr3d0QhyIF+yL3cUYC68OgSRMB3ESI1TK6UW4RZuSVTv2IE8SHxDeXdF5vgwm44RKJTRXcyC4uyuISkRStDdy2JeTFOWzbo1cick2qtcSdAqqmnSEpyCqqX6j9rhu/zgy9VUTB0/qNJESO4l6TlB5hETD+K+18WJdWq+UFEcjmJXN0q2XZk2QNVdFvYgqXHpXjyl1peYcSPptIVARUeq6SRlaDoVLenoS93AycZ05UIsWyPr9cVrz4olIN+lcZK3GW9Dou/wBViepWtKVqZaSOlKkaS7M1Q1yIFUiS7obAArhMNnz4rJh1rUQqzSY6VYFBmHQi/QZy+jdqgP6Ky7xaGrjzp+5ZqXv7kLFQt1ZG0/D+o8w45QferCTeMvUy9ol9uZrnuu/Sqr7/AIcRFc1VRjSmGzSrZIYhR8q4b28KqOqBAIq2jcXIJj8I4hlTHTuUZGG9SrBVJkTjVeOWhARkQ+tBXtH30v2SvwY6N0YksbaVcqpaQaqakilcN+4f0Hsliivs5suDa8GEzIOVFRNJVRKEfrgPKRFtQ333L/6XEfH5sUY3cKXOagUFUwvtpiULYKWkP6Dw24+YUVQOwSUhJo95IhLPGi7dRZJyugs4VMQH1pbvC7wJebqx4j10x4wFCI7EgH1jtV38v2XVt3c+KE4zZodIk1gRqkecttJyIgO+79R5cMkc5cum6cezXmJdBu3sBXXp2UHktsK40Nn6UsVjSVv+0XzUV003eRGRSbFpsEpWSUuANqEkCpmeqQ7r0ub2cOCZy7pQQIaiT/8AaCEOXd+ivxT6Frmhqtllo2nKhbPHTRJVXTIFUlbDO3lO3F2WKHVJuBRzFckj0jtVIQDb097zYrdEmtJDFVaeXUuVGpxbpHXbaSJtw7tV6qlbfd5fL7uGLFw/XEWbGSdCoGlzPBG3V5enyl+LDGrHUJCQ7h46nmzOPRI+KVFc1e6M7TDqO6/S+fFRLOGhrbEqqc6hpK3E2i3iu9US2DYl0Hi+BO7RUYjHUSvkTLg8JbiJhcrEjLUFfcQCJFcW3wiWEUyYOmZGVVPi4dUDMheWmrfuC7uuaxUduKJIZp0IkKnqQ6iV7+y1ClpS0m5mV/6DwK/Lhm3zWo1mMoCraq0+OVSMSUpaRtGxJqO3uPIeCQoanuKGe1ukiGzVRaqKNmrx8Lq7egm/tLmEdvQGI0QkXjcfS9fy6RGqbVqKboBG/lMEh3X8uKIpnRQzSSdPBmJ5PVV17VqYkRHqKzch4yHDmJzVoCbeR9MRdcri6dqgyZ6jBdJUjNW1IhvSHvRuIvbMMVnRVGGrFskQLrXeV4WVqGOjbF1p5VnYBiSAKqq9PgSsw8alJPExBn68FQ3F5EvdYXwDhrx6Nz5su2T1r0rRULS94d3u3YrNQVGEWoXqvSFbn2qpKh85bPZDFQjm6RVsYaljWspB+3RJhxhaKqpmKfTvu6bsayy1l3LPLSlWcTJKvHiUSFra4BSS7oRHcYkGMf1Y8C5r9QSS3GrqXXXbS+DGpMv5d4WWtPgq5jFERi0iG5c0jssHwLh793NjS3UewbQdv1ESt0OvPL1xBnIrXE4lI/uONSK0NUd32W/m8eNPVXk8VRVC5qBek4CRcOkgb8S7ZpGqSXSBFpebGKaqqV/TjWPm4RZiq+j3APEE1XC+kRpEJdbrfgoH226z9FnoKg3hC4S10lUI1JW0PP8AXtnvYY8PtMU4ET/Mk/ETT9Q6ORyq6152TXctDItaUy7odB4Tq9wSkcl9jad1t6RXFeQliIqTsqZs1NX0pOyLSiSjzZR4tVvUyXFKuEm4CeqRpFsAx2Diq/1903qWfRuQuALC/gsbP/c7Dhv23KwdDe1oaVXG3mTg7t//AG7D7NofyWCzg0NcfKrBNdnHO+LjVgifoy50mp6TYmDUblegP4ry82K7n5GzcbSdMxVW+r3jhpLNA0ybpIJIADAttvkO73LMIrduaoSUsb0Y8IutMoYi+48wPcwu0JJZqtWqKtHycYUe8B+K7aNVbCRgBCYkWqqfIRdGIVbjBsELSMt9NUsVIk6KcMV4QLWzoIptq3naSqFhc1g8w/02YKPZmJaUkK5RppGMbPDi0hS4TSc3c23YW/q5sCqLmXIsd6KRaoKq7mDy8uYuY/w+5iSo3O6p8o6keLQ1MKyqMk1BJVdJq6X0jDk27Tt3F7NmMrb3R6yMlr7q0R0ZRRWnqO7SDyrIvhotJ3BxjxI9d3T7clSO77VKwhs94CxzJUh2kizenHLOHarw4087Ng+Vp8iLizZq2t7tez7Xy9dnnxWVu31MJKEirSTlNQOkoZ/f7P2uGrrt/wAqlb/aYuXhIo56N5/6XGxF1jvLAdRqu6rJBQHazBqp6yi2OoBWggnSYJGXUW41yDxYeRsNnG4rhu5dQM1GrN2Dj+EHdPtxQSPSLbqh/N5sUFT+qJrJLcM6pgki2beDeX/7XDr+v3WmW6wJZYyS6Id0qWg/IfesHE5Uw6pL3Vqnuqn5pOmH52HyLpaFSccBGJCS4DuPSHl78Tt8uINrPM2Czps6koq0BAA0pEBAQ29OuW3EfU2YLOvq8fVmzinTEnTdJI2nBuhSHS2gNhiV+zD6QfgLVui1OXJxb3uo3O3p+yLQsD3sZWp9eS3tDpphRjdwle1NkfQg5cUdD1AiPrAzFeGVkEkldfb9k6Cy64/FioI5W9plJ8i2kck6OFE1Qv0qVdFaF/i44sReXfbeeZb0o1o1/RL4U4xVUElxJ13oGZHcWkNl27FkU/qjTABIEIpyRB+iJKRv+7jTUuWLQiSxFaw+6+RCiRUeWVasaDRjoPKyMecK/VVaxZQy9iZHtI/t9mJSSpDOxgIlF09HKEYBqinAqjb5btcfN4sB9H+qNGqRfwIuJbP0UjhN1/VGuFUEF4EtM+RUhkd3wYukwSE6tUhyo6KQ1bREwo5fsIpsxdy6XFKFHEg4XOwrFRLV5vi5sY1gRBvDrPJ5s24duqraouqba3vVbC3r7x2eDBIkO36E9ptkKJ45ZLduQlFbT8VuBXSsiCUeLx+i8V7+1JNVgSXm3Dpebx2YVXUmgAVobG06BFpTp1LxQkPBuacIVTsItUv/AJ6xnMnQMM1It+k8fMVmmkZE2sJVL2QPz9JdGNHTi7CUaotm7ZVs3SANqbUNI9/V3F/z4zy1VMcxovhXiSTdwuAK3F0XcpWW7b/Fii0RkSYXXYMlrKgV4d5WlFzH0zlZp8+lo9IhJugQiGqlff3Q2EB7dl3LjU2Z1KRspXU08dIrkpwAOLhEtxgKQ+EsZNy9jjVzOpuyKiHzNWcj1Rdxrc0jQVBUbwIrlbPZ28+NM5g1K2VzfrKniZvhJlTySuumIkkQGCXUaRbt3iLEakc0NSUP6HRIe6oips7oSmpx9TyBoSck3f6qS5KklwrcEh2ESW8yuu24qa3aMzOnHBM6bbMUG4D37ldqJWhb57t3g34FWXNAOXfoGYmwLTV2iPUpguxFMJx7PSBukgN1+mO7GBrvKKNtpCpmNTn0RWlf4NYKpEzLT9IiUW1qOeqBFmcu5JdrHoA1aplt2AFvLhyzh73hSKtyjg/F04UmlG0UogZKtmyZlcWpzW+zhKTrFm0YJu45mJXbLl/3ccqqququLnWPjJa9oRpxFpgYirQ2ZtUmKyK6P2vMRFtxXHUMo6fOjatkBiGqQbUz71VX93lxXZTMhgyiidzksu2Lq1toj4bcDz8/cIxWUWZzxKj1ChuJTy4vttgudTiZMiRfzUCq2qX1rkU+zwrCepeNTVVu1HFiSSd20Q8WLZ/U5m5u67qB84MVVBC64ue/l/EWMr1tmDPVzUBSr9YhTSL6qgIWil/S0ca0/qa4o/SmqO+EbkuXpsuS3Y7hb7F5jtAtuj2hEMv54aVzm9XLzk+RDtEdKH3bHcIpZwyWk5EuIWeirv8AsjFdUfuCOAg3YTysWUkgjds1QH9Lpct/gt9/3cEvtZVfTD7Oao2qs8g2UjpOQbri5QX2nxSpbbEi6CwhROfGV1JU63jTfs3jrQBJ0QpOBIrOn7DeO7y46Ja3xCkFYuqCTmCI3ZvzIqesBWy0fmqu3ioh6SV3PvNIdIr+nFyy5zVeU/MJxtQLJJNWiWg1XXS3tbegvGO3Adp3tD9n6kqudVJDP14xw9ZmwcELVVLZcJGYjbzbflxW6g7QWWj9ZR41qpsSypAR/VXFnwW4qdazSLSjaMmsqLhLfA1bFZg5Z1BMRaxKCcNINzHrE9IvH08+ML9ra9ftCVsG7+NJBt/kBwzy97R9GDVTGm4uoXxKTDpKNFNJJUUlzcEKW7wc3NhTtVFq9oaulhMivlAD/VDjxNZUVJvcUCQL+j8kkRaU2oNgGIDwqRWh+P3sXR0/czbOPReopCUfGsosST60m6QpAXvAG/z4iebYG79qQcv7+JCNBFVw3RJYSE1QHdtAd2KH9iMa3L6kzXo0MvMoW/8AziqWn/uK5LEnnVIs4jJurnMiwSfInFqpA2UO0FVVdofOQ4rGb9ZQOX2W+UdUVGjJrs2U23VNKNa8SuRlFugAQG4eshwJs4O1z2eKwpt5QdUSVbUy4MwV0l4sUlbwusFUTVvMb8DcPuj1aMtWn6sErrQInZeL61IZUzz+gHTFy6RJym0G0rbf1W/AhzAdA6mEXiR/xpqkraIW8/Rhmz7UeTLWNTZr1I8VIEtI1Sb2lyc3MWKqxz6yTbzC0q/qFeQFltYCTe4CsHbd4MN7e2NE6RDtL7S+Vb/WmxEtw/ZV0b0vUJSigNUSQWSFI7lTAeb+nLiazqfySuQ9aOZtZmThWpYRra0StS2IEW34sU8u2Hkzanx7mQFQxO61C7fhSerSKzG7KtSVVDXE3cZgtELbTv7pgl4/axJ8iLUS8xoKIrP6ZmlrHeQ+W27D5ile4E10UCEzAwuxGqCiSewy1A3XWfiuxKRo2iJqvBSs6lErt/h5sLyTUUYuzekj+eihbVrbJxv7JY+tK7dJf0bw3dJY+UfZoVB7nrRR838Jtz1LxK+3H1fP+56MRpBEickll10GKEWda7lutT4WEomDg1VVRHlAB3YAHaESZyOX7FyBiu1VnmXKdwFvL8eNGZw7XUN4rVfw4zrn8zRb0rFrNbkFHE401dLaBc3PjJODCuLxJhS6qUUAczmqLDNqoAaoikmcNHltH/pQ/u4lsm5QFWb5mQCkTdrcBeIAK67EPnAN2cE5YAkKUNH7vD9Yw3yVXMaoeInyhEuLx+HGorBmappNqIHZnagrlzHv0DuUNVwlcJef9zByYqg1UUDWIRv5RwG+zKQJZYsz5vrjv3e9wYFhBUi0tqh9WIRgchUkD+1sRv4+j0WoaqytQaSvi4dVIhP5rcCPNaR0Bbo7rnCvDhb0naRfhwbM7mfEN4tZwG1J7eHthuA/jHGd8wkjllIsLx1PWTQhLw77b/mwkqe1qYmm7GhhbImJsycRJk20mbiSDSXUVHdvKw/IJ+bf5cU/MzMlmyjVISBrNBjLGKTq1BwJOEg1R/nY6qh+2cSUa2emxdR7t0rZxPdA6DSVvHZyWbd3m5esgbUi7SUnKqBqi2JvBKt2od64IhPcqYqqgW+xJIbLvJiAT5VQSuETN5u1HLCi3rxikmyS1VxXhkFyK8BLmNKw+bqPFqcQOa6SKbkcwo1dM7LU16cYaXyJYFOXL1y6hXQFVSCTNVuqCTRBqI6Di64DK+7rSP47QxoSLnoFw1YxqT9BSwQSAkzuHYPsjZ7PTgxp0u8qyaBVum2dc+uCWN5Aq2GCt3qRK8TDw+DBmh+M4Fv6y71azvSELd9xFy4rsHwyqyiyHiMNuJR1LHGvoFsFunJvzZnutssQXVvH/RD8Z4OYIuZCuiKg6oa1U6buHLX1YumkqrworpKiqIX8mqCv4MVVOGr9Uu4tbKH1Jy0iID/rcFJ4KLdmpqrFbdsxGlJNkhsSPFT7hCW5TaaE+VZ9z+i5VCl2J1A8743ncILzL15sAS1bRcKlZzBfZjMOTqWlFyRpXJoqyitg37NluNsdoJujJZYun5gKi0Y9aOElepK8rTt9wsZXp2Dh4lNRtHGQomeqQpncd5e9gbPmJCXMmtK3OJDyre/YpjI2osrVmjpslqJPXDcFtICJLmLF49OYGUDVy5YOM02aazdU0lQUi0tpiRCf6LFK7A3oH00ZLh6DuFKYMA2W/oA/exA1RlEz+mk4s4REi49V0H+dXu/FhQVM1kC6LciIi733YoCowxxqiAi7qJjzMHIv03cbmrTqgj0rxqBf+FitS9bdmx+6bwjWuct3L56qDdIThxJUlTK0BGwfEWB08ydinEKzckzHUNqlfb4zSHAtrjKqEp6ejZtq20nDd+3VSISt3pK3YZ0lEMpOt/SL8UPjj0bS+yoft4UHA0u4/gmEYsR4Bu/MWyWkHEArbfaHtYtHZoiIWps3Y+KqKNj5WPcIOCJs7bpKpEYDcOy3mu3YnO39T4TdQRsaqtwychFuG+vbdbYqJYZ9lnWb50QoK6REaTtvz8xhdf8AOliV0EQAmh7yaUkjYJz2Vqmpcvcn6Tkk20s1y3iBcDqNU38W3TVIfetuxGixyFt0QkMoyH+Qbjhr2qcqvzmPqeteJocOzNuF3VqkH7uM/T3Z9RgSj9dZBcnaSquqI8u3kwG/TU1PUk2I/SJK2M1xoXSJaCWpLIB9cPp/NIr/AJ0B/FiJlcp+z499AN2dP5SOXjorUhF96BL0n5d2/Ga5bKBsy0zS3XGA/HtxDx+WgRtXQckQfxeoWXX0a6Bfiwxpra2ZSiok6Qc6ie3RlVSVBRrdtTMalFN3bdo84ZoqWlq3EJ2j4bMEPIKlaczBzX9Q1lFesmKvEKkioqQiSu7fsIcSP9USplaoHEPGtXKSChtVVRJXl2KpFbjrspOtXOeMWO24+IvtO7fpfzsVXUQEcse9+CZ0kyYJ32VoiV7OOS0K+4R1Q9ANhPcgL0iFUkvfLCf9b9ksX/2i5aF7I2/+JiI7XNCLVTOxEltEWkIfVu+3D97GaPzSo8UsDi0tIlevwKjf8hFiJW1rPJoRLT7SVg86bQmRrUj/ALPOQ7dmo4dUPRIj/wBHkNL5yUwH86skcvaSoUa6o+KVj1uPBIOEm3Dlqu3MLeTVJI8DuoMjAasSbL3EQAF3x6R/ewYJqGCN7GMOwsu4RJvdvt/wy38WGDVvymyJWNVJ5ghJYfyvDgO2NTICsppnVAHaXj0ld+CVVXo/92tr5IdpcLIbrf8A4aYHeX5APbApdyqZIIhUIABD3pX6RWeHmLb7GCRmA2Bt2va84VyqSItZL03KDbv48bw5uW+74bsU3zD3F/8A40+4Y0XcfEpoVbh3gQl7IY5UftmqJLPFkmxJXikosYpCRkFvMZdBW/EePOCWuICPoO0SP+dgtdm+NjpmvHrCTiGUldDuVRaOxEkiV/KFu7db7o45TRtdYdFrvLtN1qvN9G5VRlFCP13TxKbahjbdUB/jiW20h83iw6Yk2JNb1cs2X8OmqBfqsW9TtJUnLWm67F7J5qjfcnNpFcHi3IYjnedeTHo1Dm+w07BML9UknLVW2zm5hHGnDh4jHSSwBcfjzMqFUagWpeiQ3iCvKXOfP/tccpquRtWIyuArx3cxhu+fDVPtJdjJysk29HZZqFsosYAkLQ2okRl4bTHHUtnX2S2rcn/pyRzbiG5hcSqC6Q7+jkeDiWPCdR8SmPlDpuZsk3amZOlrQVIUitSK7cX9DEsPnQrXCCFw3gZW3ddxfBh1VMJTkRUiiNMNnIxbhrHv2ovXRqqjxDNBfcZ3HfcqRc+HdJxLGaqKMjpAl+GUeJNfRprnykrutLbZ1YztWwTT5MFyrcUlYLlGNYPMMlHLM7iEwC4jcao+YL/5w4WRagqm3AlrRcJGJl4T27/mxdq/qLspZf1DI0nUvozSYvYhyqzWJu9VVAvSkXNtX33c2KkjmJ2MnFwIV9mSzsHdrx71e35iw2GwPmKymHHtDzCSbItVrUzA9Ile6u8J2/vkOPFfpkBHdfYdw3bcSC1ZdlRce6zyqxtZycTT7jafvoFhi6qDs3iJcH2nBSvs2u4ZX3P0Q+EcQ/w1Wd1EBx5bD3SSMgHconeI3q7h1TE+rq9vHlCcqola2VHwdQ4ZyzNBJ5AzFP1/H1ZTdQMJB0yctmHDWqt3SSCvUV+/y4WRagP2ra7uj0uoPu4W1lG7b3ch3ctHQ3Bq5MdZY2rnvnDgkQuEQ+yt8Fv4Mct3DkxvVPUI7Lbtu/d4PZwfZmi+zXT0ZCTNR5kSsC3qFsblis90khK0rSHeNgniG9NIdmiUt9U9odH8txEN3oQX8XgLzYPKyVAd352Cz4ca27EolL5pIOpv1l7nKSO0Nm0+c77fwlhRNwFqhhq6YJX283i3fL8+C8hknQa6JBC54xC6ZkZ2rQ6/IRkXSfiwk5yEbg4vZZr0QZW2DxLhRt4fKXhwL5qf7v0hRgcYWn/c+iX/AFQoLRXUJZU7dITv2+0O6zHSZ3qEskYq+JITLuvdwVQ7PU9JC4aQ9ZUG/WNI+6aTV52W/wAl5iwOX9IFS0utFryrJ4TceZo51B8m4duKn6N2nGToxR1BeaK5uxpXJEqhmIqZULPAuZDezOwubp5cUeLI+DamRjaqkF+y23bggZnf+gM8Cqw7GavLgex+1mzDmE24dXkHpxoOH/gxeJZvjD17aLfZ6P0fnoovTMbjlh+4ePoTVzGcfsxbRFXNIlX0t1UrXDPXtMuQh9nHzZyhVWHM6n/QgWmqL/XSK77IxSIg+e3FyY9q7O5cS1a1VTUD7UeCa7flw8YdyiKK51cKM6sxMUdp/K3O9Vu3Zx3aSppJw3v4hRWi2Sury2bdLZbg0Zcx0z+bD0wklVibiVSZ8ArLJMgFLiNAUyVFC2wAv3WcuMXl2qM71Ub0K/eJeH6m1/dxyPaTzyXW+tZhSAiAhcPDoCXtbEt+DhroDt/P80AVqdPRp/P8Fp9vl5mFGy3GFndHqo2kIIDS7VLfaXUkN/Xiy0/CVJEPFFpyvE5dFVvw6TZNgSHe3juxjj+uIzeNMnPpzHlB8Q64XB8GB7nN2nM94mDa+q80KgZkuqqJEg83kIht6fHgq31k3RYEVVU2x0BzCIV+5kJG1ryrEdEhEKgkwuu5vrSvmwnRJAlU0CsC1tkk0uEuf7UcVek5R/UFHw9Q1CsvISUwKzpw7cncS6pGqRkXjIsWan1QGqIszAk1Aetytu6NUenCerDUQrRU+wV9IMx/RAek4z1xP+rSsXFL06Blqd6htuH3fixSZQaGXeTBuK5UV+qpB/FVT0jvXLoLfzcvkxZ5bOTIFwvwMtmXRzlZIi7tV0g5IfH90fhxFqZvdmoPSssVYUnartVVFikQq+0Qj5iwUIjm5un8/wAVlmiMAjEvz/BCCIi8u/64pOSb145fSnq5W2GGEVAFQ9XEP2plZyb8HfOv0p8FFB6Nvp9XPSG7222KPIV72ZVZH6QQNUUqxmwSMUpBtBBq2mNn2oJXchW4sz/tDZDyQNweVUxdiCVoakcag+7cPlwwYqWGhIT5lUTbpmJxJCwjAXg7x3ziQ/GqI/ixIZbkZZzMTLmNq4s/7LizOs7ezsShEEjGCe1TbTYnu8f2WK9UXaW7OtHinPHUacevvSSctqR3+fcAXcuG7FyY2CqHKZzmFZQ7QQm3zyroFQEU/Wjc93nYNS/FiloqgJCtZtDwl14sWaFeUHmnmFUVf5fP3j6HkHSR3OUDQtVSapJKhbtO3aO7FZIbSWR0bbB8Zl9/GVrfWkthR+qFfSYqxyeGnIila0qqkXrqKSSBVFeWAdJwkFvteLA9nqX7HEi4WcrQuWRqLGRrqKVAQGRl7I4zDWkvwuYU0AGSSKr9Xary7C2W+4WIf6QOVWabnjC1DV0vD82K2Kx8RER+78ECVpCUpLbOWNc5CZcIqwlP1TREPCgl9XZMJkl+ZU1S5xHqM+osVuQj+xK+EzSg6BMriI/r64fcDGRhmZJJQjf2qjbaC6iXLv8AZx5OZeEKgJHzjaRCHzYsKsd7v1fgvnmkN0iWv42puzbls2KRpJ9RECKQGRKi/cqgIEFply28uM1doXMSiczs1nVRZfVSxno1KIaM1XLS60HAquis3CPQQ/FgW5kSkkzoOYAjLvUthaVvUOB7kCXFRtRXnapxgH8YF+7hjIqijJ0lFpgaWpERRUb/AMcb+IFQt3F4vPhnFoBDN3yLq1AfWzsFSG0gGy0TuvxIMWCziUatkA1L1Q5Q57DuPDVquzVWnlic7TmTs8W9JIuvf5vewsb3Jm/sXmusQunhLEV6XelsK4NLxfDYWHQ8erptnEU8SWuPSu0isvO3b0H+LDUTbKoqGycoW6Fvdr/svP714/vY8TVzwfDOFmNt6pgK5h4R23Hs9jw4NigUms/fpOlEeGFJQD2laNxAfvcv3cSjiUfvXhGUakgN+7QbjYSoF0jbZ4vJiPbkaQpoqmkneheKurpWHeXNYO/l8HJZhv8AbqNzJZn9YEyJLVuMlQMhsErRO0ub3cfYAvKWbrgKY7BSLZq3JWiQdfnt8uOkXTNC0Fz7kNK3kE7PKVvN8OG8WqsqRIqgKZd0A3L2mXwDzebCLU1lW7czWSIlUrlSF5dsAd/T7XxYgpqcRfrC31o0CVUSVMrduqOzpvKwx6rb/wAGEVJxZBwoiaKTYTQNv3rUFUiC7yFv2+HxHiPFUFWbjYxKzmEnlzcubd5OXYXx4R4xsva5NbvhK7u19nhC4T2aukRDj0V6Sknk8Gi6B0a7a/utO3Yau0g8+63m22nhT1osKiYODX1rrjIWbcu9C7mHn3HcN1mItZ08dM1gcLJEJhpEXHqpXGfPtMd4384346RJmq4vbvNJwF9qfrIhtATIgu23mPN17cRyl6SmlnmkmQMn6pblVQTFult5S23ls2dPlwzUdPCa96ZLkkAGOxIeoRMfHyXBiNFw2Le6eCN5WpKKOCXG8A2CXm5RAh8G/HPGsxT1uPuvSA0i1bblQK20tpX7LvkxOAL4RKUcONdumYaWiFg/okrfJyj4SwisuCqesqatwcQCqfdFstHlHk9vxBhNN7oLEHHsXKZmdoruDXAg3Fy2+zt8GzHSKoFHp3IigsAmGqT25JXls5B5v5mPkV9SwunPD9/aWwB/i6V5HYPgEjC/Hm8yZdyCJICaqqX8VakQ8tgXc9wbt3UGEVn4CKd7xsomDgNoriVoEF3IfvDbhimqYKCb0x4iw7tS0Q5+Qfvc/XiUV6SmFFXipECoLiOr9hpIEkG+6y67YPTd0/JhZQlrlgeGqTc3AaorggN1nschebpxDuHjZDUNe9NQAMCLV5VQVLeI27/Zv3WYeN3TYiIFQilROwhIbFTQO0r+cd448vJREH4tyA9dVRukqBikglb1b/B7vOQe1jIebDgF66qI9o9/tEUrekenGuBVMBFFB+haaVt2uJArYJdJ9RgXNz4yDmUrxVWTjlUB1jcGVw4dWbcSV3XYK2Tl4q5i8rqUNJsSgo0+3dc2wr0hLEZlHUcxW9PvJWSNV0oD9wkqlpXd1pXWCl71tuH9LiDXLGngS3F9HY8xEUBIi+qpYrnZ3VRSod05SBzxQSzjVQ0jXEjtEgPyeG7nxh3mhMHy9pdEaIhJkfZRGuctyFs9bfa901XVLXD7Xm8Zjy7enfhRmqsWms4bCkoA3mV4XkdniAd+wevDcnFxEdlthHd3FvOfOJc93m8uHDcj4fhtG5QErLrS3Afl8PzjhRJOF4b0kVg1iXsV3290YgZ+K3msLHtJYkSALUlgSsFTZZ7VoeceXHSxcV0DpmlvHmu70ea8f93Zhmsk/ZrKaGvcA/old3L8hbeYNmPKCr+XstUNfZx1JQ0Siq5WbpJcG2T0huMbtUrjt6B+XDPP6iMwmFAvFqty6l6faxkik4ScruEnLdXVMhARJIubdht2b8woqj+0NV+YxRD5/wChgoK6TdANI1G564lst9n5sHntZdoZDOXJN5R0VQ8kyeOnTF03K4VzKxUCMdK0T5Cxq222KWpHvafqWCu79fUU7gNBISkvnW6BtqCHGDvHfcJiA/Lhqmk2VUbhx6Q6p2FcBjpe1txNOqFrAlhD1DK3K8ojGq3l7t2EfzfVb+lgZVIrrd0WqP4sa4alvvLkRW+pP9GXzVD2AkRa61whZeSAXfu34UcJMBdKIpSoKN7TMVyQVG7ZcA8vMXL4byDdZvxODl9WemQfRuTK8upgePfm0q0VBB/AzzYj5R9UluD4hx7rLHeX3zbU/wC2XzVBo8GrohxOkJnuJVI7Uvaxpjsi05W2YsHUUFSVGryrdiGqk7SERSXVBUR4czVtDkXIrSMeTZgEo5bVIkRAvFS6anNapFmOzx7yxt3sW5s+jI2hpym5ik3b1w4kQdW6gtiSAwEbSSK7Ci8vsHTRIlouG6SupKsSYb1KqVe1rKk81voHVUOMUQQPrQI8tJfXPiLRLVC7baJbL8eRFmXEIqnwqySV+4B3ctnTv9rzY/a+zois5e0+pUDGHcxRNKcGOSbPVbCVMXA39PgMvgw7Kxg1T1zVcqcOfd6WkkglYlYA+Xy2eDGOuDA07oiHdXZLS+/UMTf3SUa14khJmrpCQJfsuewvn83IVmFEeMFxZxLPUMbguZhdfYN/8/HSxAhpoocTom3S1RJe4d5WmNpiXQQ+zvwsnYlqbBJn3QAPGqkCR2+G3Zylu8+AU2XKy6LUk3KBoIKJONW1dK4bLy6bd48w+Pk2YrEvXLRtUtMUySeh60auDcFrpCViSC6qQ7NlxGIb/DsxYRfvBlCBktpKG8MLdXeQAW/3t+BTUjyNf56UW2B+kJMWCquuoezVBBdVIS8vLu6bsMLe0LrsS7pJfcHSaakKMEe6ilZJrpGvqcUA7RMbeUbOXy4z3XjVs3bvg4lAlu9E0xI1T5+ffjQkO6Nu+T0rlWuqBq3PTL2DHbYY7PlDw4z/AJlIPzF48dLNnxOAMtThdK3f5CK/Flp9al179UK1V2TyNDI2FWQklRICdmIi1b3D3viMcGh0qsomiqq5XVTOw1RFmh8Rbfu4DfZTZKK5J0+ajZdy3S4u4UXiqQfal0ANmDIs1cqk3BJg5VHVu/jipbLx6jSxmq6RVjniJepo5Aol0aLZTKZ9UaTTXWZqqkiKauheO0bCJLA0g8538s8kGytPOWabKJdyWqU4v+iAdnxlgwUUg1YZNzKSqPBogk4IhK/b5uW75cZRpt1TE23rJgwryBNNWkJPVIUnl6Qd13pDoDtD3j343drpmOrN6R2/fisNVERPveJTNOdpmelqxmqSf0wIjGw8lKJOW1RuldXhWZLgPvWiJ4gste1zJV5mFB0M8okWyMwqqJO0KhdESVjdVW+0x8uBtkbRdMQ9VzQM826ZklApOdSJFBq/EkgNircrvQ5R5j68Q3Z7pynmedlKyQ5r0hIcPxpcI2CS1VfqC/LqsxDqu5+jDJqjGW1UEURVwo3tlPMxMwqVomSy0JBGo5RpHEulVD0jSBUxEys232X4NRQnquvJpnFw+qiZtzVXJBAuktpEqQnd7hYxrkjREC3zwy5eIZx0O+JrU0eqDRsEpxC/ejsG9mIXH5zxuCYauXGYE9oB3ZmkO5Uht5vAkWFnFLA09vkI8yacPuzqS1cq6dNTJu4ct2z5moCV4qigw5/aPFyokUfRR9bzC7JNdSKbE8aiH1YiJJIiAbkiv6cVNwusDUuKAXKgCYWk6Lbu/ksWiixuoHMk1STYitDr3EW4Eu4V37REurGItUTrmx8X1J7dp9TI/D9aAOXPavkq3zCi6JdUTwachxFy6VQvLxBJuqr1/wAljnLftdv68rin6SVoxRmnNyjdmqqNSvTJICK3aHi+TApyLpKFa51U2/a5tUnIqWPQ4ZslIiR3s1x2XtbNgFdiHyKoiBYZ20S8ZZzUZJrJTzQwYtkpEVV+9HYN7Wy728dDao2+6siRIxNe2G5f5gM6GGhlxF3PN4YXJVM95DXFC635sV3NrtgyVKVpUlJJUAk8bwUs9jUiKpX4qmCSpDeQAXgHA1i6Npss7Id/+eOjCcN6tbnwIpSOqr9fEtIfqtl3T4PPiJz0ounnWcVePFc46QYqK1NJmq2Xbymqhe6LaVjWy4PKXv4vKkiOkRURdFbSrakm1P5pMW0RxKf8EuCIlVQclzpcxKlvwmt9IWQqHx6pJmV2uozQvS+AsWLNIQVzSYmr9mESe4XBDb3qXTbiB4hsOo2X1SRPmTF0Q7LB6QS5cYfiVgQuBCK2dmI+qCStGVEcjI5gos3Vrxqq1cCanCoDvLzB1YD2ZPa5b0BVs/SqdDSTn0QT90zFf6QGlqikqQ3WAl124NeTy7Acy2bBgwJsmCSpAmnyJeILbBsxiXPKkIR1mjW6zvN+gWSjiekFTauXTwVW56pbDsbWX4nZmuwIhGWr7sEqupe7NXdH70bswu1sFEVdMUx9EpV4MUrpapVQSV2y7l0sJ5jdsGEy+migXFGTzxYI6Peav0lNK7imaC9lukXJq2+7gM59UhFP81qoWPM6iWKirw70Hzp0KqW0eaxAsQnaOy+jZjMlZY80aKY/wPBDpPHDoTEBiWY9CB89t3v40rTBHKYj/RJSIQEUZa47XkVAo0+CuXs48RqOBaTn/pQqkaQODLbsS8vNiyS0pD1hkfT+bUdDvmKjuXSIWjl+b7S4d4kN4Ersu5sZ3zYy+jXX0B0swqQQFKhYpuGu8VHXs1e9DuuUsaGZxaMH2NaZbA8ZyqKT9UzVj1bki+vjylb+DBhMTFwSHlU6R0hdbKXMqaVQPFRW9ZOdC8wtuZIbd34+X+fhqnPG4Jw2IEtRuqfe8K3LZuHlArw5cR/FM5RmnYwXEg2ql6yVSPm5bgS+QsOFm7Nq1LQjV7jO7VUmVSIj3dWhv/DjKDTC0ug581lmvCMVLO/tvPaSpFbjU9AGzLLanjQeR6BN4ZJU9dBDnNIeW8flxlqsEkSBNZuBWmdx22bv3/axp7Lx6s1y7g+MN8NjBLmXMbe6H9v+D2MF3QZ07aotvrXFJLKs37UQN/HqpgXSya7dnnSwoKUaMWsZPGKBBpJJD6ubjdv37bejEgjMm6TagktIEIGH2SuqXuiCpGfs2FhEXrxwImvRlcEoY7/qcltP/Rf05MK2hIxiKYuuNCWpRLyx0oma+qkmfIl6tZ978pY84cLJC4Ngs5TTS1TIdJmkKVnvDux03eyoE4bOqJr3h3FnelGv7ku61dvcdJjpe/dhN1MyWssiOXtZvB73vFGD8tezkuvQ6gx7qz8tQr3WWNokKUJrGpbEjG6wL3OkgIF5bdW/HLhJsvGphY5QG07tLhR6uX7X+f7mOk3rbiltWgKsSHfaoUW8LkEbC3oeO7DV9MsyWaxX0eqFBw4QVICdt3CQkYFy70Oay0rvBsxflOhyqrNYLTJOFkHiQ2NUZAhtO7+K2f7X+nRhEUHgOE9Jg5uMkjJS5Cyy3+V+8Ht4mFmrlIh4pmQrGZ6CXe2kHQBlobMRclJM4sROUingkqqAdwkq56SvO3Q+XqxQLRGaKkICm7xhKk6F56hl3JAkHd8Q3Ei97X5ceGEBdTj/AKKvkHivVxQbbLubv7PNt6PPiNj6ggeFsdRsrrGe9VWNuVs8N2hv8OESqGj0mYgvArp3qmBJFFiQbEub7Aev592LyYLuoUX2+8KlPU0q/eEbeHkBENipEqGlydPe496jfshTRSh5ffYdqb09u7n+3xD/AErpUotws1bE1JrYSTRCItBW+0T5EsJs6tpgxRBwzUFRUD1SVi7usf2XNu+ATxImHe6pC60Y7hUojFv1XBXQ8rcY7lFXRERe0WqRhhYoZmkoRyLOTQ1b9IuNIQ5eqxf72E4uRhJRYjhGyS5NyAOGVStNI+a0i0tnwbcdEwWdit9TZiiYHeRN9IOnp0t/4cV9qvaQXnUW2apoosISQebQASFwqJDf47y5sRbyGBV1YUDJ3GPMJnb71iuGMxUdN0+sowfyTPiAXSAhSiUiDe3uutt90y82ItGqKJSWas1VmKfG6Wv/AAI3LSvEryu8nLiXVnTXhfYDmVmYxKxLJgrCPkCS3Jau5JX2u93+yVwYWdU/9Y4k6Yck4NULhFVVAPhSVsxVWNW0SKwouH8fpuEkt3qhAdDVLeN3k+/h19KKJZKJglMMe9Ay1RiG9/L7XVieQ6AqJPsEW5WIYZmgsss3ptVIrL1VR19vn5tnu/NhNxGs1U1ODh3yZX2/8YvSP4TKz4sV1GvqMVcCi6lWaSerzFEpF0kV913ltxKMXUa8YpvGcxEaLoQJIk41C0gO0vF8uJCDvMqpNcqWTYWtU0fVT4UbtpcQvf08l5fjxmGNeLNc1ItZu8FKx40PXEElz5rv0o2HyjzbMaMIQQWECOMVG64bo1uJlfby/vYz3GtQm8zo1mDYRUVetA1NI1THfzpCkJX7B8GG9l9YSVXf1QrXGS9LuXlb0e8QkpfgTkUnSqhNUEEjcJLiVmxW09/SXRi8Zt9p6uaczdrimI7Jyk5NGKBUSkF3Frh03SAdp7vBgf5UlSSub1Lm3bDNWPASSXXZOhNqrxWzkH8AhiZzajvSvnlmefqp4pqx70BIVXFhbB8hB8N2CC0Akb7Ym7qRE9KLtdgs2pdsar22xBQhuQS97Cb+GzBXb2E+aNtu7THcXvdOJyIzHh3Q6L5JVgXKPUl8WJlxKCSZaBi5TH9XuHH5ROqqKYoE185dDJx2WoUHkqMmnUja7bqqkO41C3Y6nIZY124OnaaSbcbBTv2WDi8yzl+6TJFAFbT6UA5scs6CYtmxy1RqCuQjtb/o/ewzC6FhiLjpdCMF3vIY5tIMJXLV8wagxFR7YCTlfalcNpWCR9W3GO70VVvthV5+jGlM8PWTXs8wITJoE6e147enpFsEBa8oj72M6jZ+pEhMTx+j+D7MNooYtuSEtS5hea4q2pLMbiQ6Vy3IxUENtvixtr+pqjr1NUy16v2WlzeZDGK0R3EHj8W3G3P6mshZPVIfnsu95DDS8+oEfaH60vHYXhQJ7edVBF5yukW7ZAi4l/q7Ob64XN8OM9t66YJFuRFITG4VxD7w4JvbxkeKz9mm19xIvn4f98VxnRE2yTj60ZafUQ4a2lgeqClb5QPBG6hXrabrRq8etmjxFlETDj7DYelFvFQu+HAzeVQbhuJ8MgKniTStxeMo3QetJp+J2pt6UqMhH/6UOktvxYD5KgqiPMJYMYHtSQ5EitkzKHM5sZeo2DcrUsUkr/2pLBi7TCpq5+V19kQ+tuUv5IcAvs4t9fPzLlH/AO+iMP8A144N3aE+u59V0tojcc245bejbj7U7kTQoepqgI91aJdSeJKFNYnzMD0ivcJXiW7rxGppapawB3gdVm/EpFiiL6P6frSQ/P4cLntpJm1uX1IzZhIuT7OrUHLBZ4/j4xu8iUx3WvQSHSL5sfNvta5dP/Q9cVCUK8TWjRaM11FxuI7UrVbiD2brd2PpDnss5iuzq5WbAROGtO3gN3UOgOM8LQgTNMylH1bFSYE9F24XuAlQK5vakIq+G+74gxg2qgqKqbdEeUfqwRtE0NRTuD7S+YKzK79DjbGTMHQ1KZV0TKyLaMbLTDNVw6VU3Eve6XS5fFYkOMSvJkxIkV22kolsIfCeNKSTpGNpGhWYOVUyOnG7zw23qrl0Y31W5lRWfFqaLFbZv0lRsOn6hh1Xko6C9JJQdJIQ/WliQrAn7rskitLrCo4mK+SVLTHmPgEtoj7uMlupaVlHBBequsr3QdReQcbGzYa+ruyXSqJbSVrLlIfAwtO74cWkWhQYGDorMLq80ysPSIy8OJiLCSbpjqmqqKpbCETsH2sRqKR7jBFK4No+IsTUXYTUgsLWNXvRIT6OjA57U2FG7subc8aLMli71+PNzchY+qnoL/Jj5Y9koQLP+lETAxsXWV7wPIqIbsfU0tvp9GB6F3tHPkpZd94oYZw/xyG9lX8OM89oDdScL55xp9/GhM4i+sQ4F4Vfw4zvn8rZT9Pome1WoWn38Zt/XcC8SOpvgYrPubB/8MFSAYbfU0YPs/WMS2UcMDBu6lSMSJ6yV6OUAArBxA5tKmOcFRbyG+NjA/7wWLlRbo3EC8MgtI0FbNvgSxoa4u1VdJtU12ay/wCC1v5JJ2Hz4MSJAVtuAr2aVf8AgtEOoJR398cGJmdqifsYI5l8Q1zwXsj48L7S1VVbfIA4xjmQ8MqgRRMyFqlZqjfzXljXXaGdcK1i7+ZUHA3D7A4yXVS6KUwx1wEkzVSI7vIWEDo+7CTZouwFaiUqNhW7ODOLCPj5iPeKg1acKRAkGkX6Ladp8p4Fa05K05QrxnU0UkmjU024fuhVX7gUrLQ59+zSEsT1QSTaBrZE0nmoi01XFqA2vQsFUVRLwbNKzYN952X46p2EOrXUPDy7lmgi3apELSQDuklXBlzJHzkYJeOzf0brpNDyKoiUDSMzDlIN2YysQTcBvFikqSrdILystG4eT754NjUqbMW7myB1gvMibN0hHk9rZihxuRmUUk+J59OVZUTXMFW0IyaqqpHtstQSSIzC+4T8NnViwMcicrmajNhT61Z3OFdItejRQFA+Y7ydICAWbhPf8WDOrd1UdZHnRQp2eil0VOCkkCs/VqiX4sOKojglJqi3irDX9VSyq5qfqPqS4gfxkOKyXZdpVgszfnNquUwXSubKRDBDVC4dhECQmGCBFt0WbNnGoI2otw0hTHwBtwWLDrW5UZgu6hSbx1aJapjvLaWKy4VcgSaKqK6il52FqhYWKjmRlfFcK3m/XCqS0kRloLquC13BkRbbFRs2By+TDWi8h21aRqcxF1PH6doG3VIZHk5eh14xLFDlI4fKpjUthzKSr5+s3yxrJsuwUuBg3IVbrQE+PQHlxm9m/cmjoldbs+XGkqwyYm6Ly3rKbf1C2eJ+q0gNNJV6X+FIF/hC6vhxmmPM9S8AG3C99smtJJvb3BdEiFbo7ARH9F55G+6yZu/7ulgkVa1D01XUHp/atB/p8OBd2ClroepEgO0vWKSvluMMFGqKzfxNTy0c5hqfdm3ct0iWJgVypmldu73HmIhTDIuYkrrpdcKHdVdJqAxcejfbYk3D/VDgS5sCikimZaV2rsu9rBkkMxpON0QdUVBCJpCY/UlOS0S/WYGdb56KMm6hnlXSTvSV267BQur+Uw2Fxoo6kH0H3VC9uRDVlqbu2i4B2lcXu4HPZmVNDOemPrlxOHTg7bLecFS8XmwQO148Wm6VoGoX4IJuHqRqqigNqQmqkkVo7r7d2Bt2fVwDOCkDvL+PW8vjSLCm6F25J/QD7jj4lvPMwQ4qmfT+Tcq4BK32SHAxrxAFUY879zdKz4xwVcxpmnYFhDPqpZoKN9fSZl6CVEklbPJ72B/JZjZQKokDqIN0QWd0iqrdtu82L3aYOuE7Lu/UkFO6eQICKEE8he3GzdpC3P5yxXZRI0lG52bgmUjD3FWuNC10hljRcfGyU7RWunKpASHDP1+XmtLd58Caoszckw0f+CiVVIHBkFssuIiYGI3c3itw8aLK0mq5mepRPbqQNWoKbsO0TQkx57bdyH72KZ2V0ja5vQzb0Xb11tvgDS5flxfe3EJ+sKPcugFBS+QG0TAhG/Q2fLgddm1db88lMLK/pXJhdd+yLGcu3wgloaD4D8lbMzkaA5kGgKhtOEd/Laf4cAJRACnHAJXfa3cvKCqCv47caGzTmqbhJSLVqeH9LhNwg4QQVTdKiQd2N4EIc913NgW/TbKX+ODluuZaTc7vWyvIHJ1dFuHjYwqSWcwLsBTOoGSJccZBtAzt9gwEvwjhvmA1Br2WXyIbeF0ubyP/AObi3Pq8y7SZjq5euS4hBJW31iW4DHZiu19PRVW9nOrHkXAqxEe0FVJJAlzVIjBW4zwzfITYIVCm9eK+dtOnwvaopc+r6Ssh5bfD+9gtZmEbftg1qG7vWUlb/wBvEsB1mv8A+7NUubcy/wDSaK5vOaWDVm1u7YNWgfNwT8Eri5frSRfixmL5/p//APjJbHhr/WB8SdLKrEntMSHf1c3zYNHZaTFzm3rKbhGPdKjaXVb7W/ATWBYhG9ZIS38p4NvZSI/ztogVpKcC63XeXHMbKX+Ys+IV13ij/R6nwki3k3S8O4yxpU3Ua2XWOGPVJRIbivt/dx7MqmqeQpGqHiUUzTJIpUtqAj/gC+K3lvntk5S9Iw9N1HmXBsZSPZcOq2cq2mke7ZdbZjrMXObKKWo6pkYbM6lXjhwEqSSCcolqq3slxC0bvGQ46tQtaF+fXC1EsI0PTkU6zCp1twCRWOgVLb4HSQ41dNUXTatLugXYIEIN2h2kl16X83GaaNJtB19T79+/bNkQAHCqpOErBvfiW8rthWeLGjKuryhlablEWFbQaihsGlmlIoFeff8AmxtKFscspJQ+WpDWQjfSwkKfNlqkicTTTgrnFx2Gza6vn/3MTVIpaU3SocSQrGvY4JO7/nWz5Pv4jas1kBpdYNwnSUEf/ckh/DhSj3Dz6SRJ7bQeJdH7XHCry/lVzjEeZfoezMdYtDL8v0f3K89o3Kilamrmam1bkHhrOEh8BK3KlcXy4iuzjk3RkvWlZRrqEF4z+jSQCKm7SVVBItvviWCf2giYBUb8FXlqwIul7b7S+1w97KnqdjWVaLKyTESNVilcTgLdIBeD4vKONxQtFmx5VxNxzoZTeqMiaMVRlmY082FNwr3Re2hv+ccCWrslKDi0yW9SIEpqt0hEfaVxqarl23ERYMzSJN6q4O4SuusSIfw4DtWbyK5Et7xIdwcveljWMMClLrpSQTcQiLKFoFsl3THVqBqkkkNul9ajiP51SLFYpyVN5HQzlyCGu6iW7xXTQD7W1tq/7cv6Di71COrRdLvO8+rzk+1ARHxoRpfhxCt3jl64LVMiI0jS3WX9OOX8UutM17gGPdXdOCm3XrQ2Yl3vtIm9oWnoGY7K9CvJRprqR/EcHdyXmqIndy7bLsVmiew/QVUZf07OvKVbktLRqTgy/LaYkqhcHz3YuWdrpFr2PacWVMhFInG4h/6UOND5R6P5oqPWACt9TR/+yt/Fg9kXMRHoPlH7OC5jWuQqXPEX2sVjWe7C+XEcs6RGLNAktUhFNW3rGz5SxX33ZfRptu6OmanqCPUagqSSbaUXSAt9ochY29XjdFKUdHYO9ILf9EP7uB/U0dc8a6X6UwAhH/rA4cMN4lpIiQuegvkJSlT0xnY3YP68qCXZvYudZ8FISSrtICBDaQ6pFhiiRtW6YDKoEoAgBoau8PduwS6DFH8+VIKcNpKK+uxIrea5qr+5gWbw5jStMQ3Xc3zYyHGAxyx8X3Lo/k61nUfJ+9V/MWEOZpCVboGkbgmappfCXmwL279nF0mzmH/dN27NJVUiLbyCXLg3Pkg9VugV3Dw6o3e7jNdeNdLK10YmRCDBury+ziPCfbATRd5H8b9lFxGjJkAVzSptYQL/AIxBLnu8QnikiKxkssqBKj0Ffd4h/Di2ZMpLM8yqbZkGkslLAkRaRiZGfJiFZtTXIgILkT26qgW7P6bsPtjqw4601vBVMTVRJMj94B8+HzcjFQUSBJUtgbkju90rseaxbkSvV2ke0Nu0v6BhxwSypC5SYCQ27x1eb4+rEpKYiuW71y1HR4khvs3J7btxDy4HufQGVNxawXfxhUNwWhggEwC5RYbRG7uri93FBzwvKmWYXiRG4Mztt8PVgy2/CRQ1cPYEpCg1zYZLx7xL7ZvGu1UiLpMFVcX6h1bqipVyfM4XjHR+G89IvvXYGdIvUUMh2rl0Hdt4uQD2vrC+CNTJ6ExTJkzJAgCHVLpuvSQK7f04hXDu8SlTbRH2VJPpxybp0CTkl7FzEtUN4neWImQVBwSYawjuDyhftK0vlx1LJLNZaWZpGqOk/dpW7B6iHHKaSxDxKpkRGYFy+UR3fCOF4kCJITSbF6aBCYnpXjbtcW+bd8OOidGldYs5K+y+1W275fLhMot4qsJjynZ0juw4GDlSIQFsvp2b9hj/AE5sWzBR1puiremnxADaA2FcNtuKHnZYhTLExP8Aw09o+xgkJw0rqDdFLiR8w6Rlge53QM84jY8EoR4Q8QqRELcyt2j5fawdbyDrIoOr9QSicm3hxuWctJfaE0fu1QHxWJCWLlHugmYuJlbBFZ1FtHCuzYJmkJH892KTlu1eReVNSNn8auktxTg9Am5iqfcJdPPbizUUqCtCU3Yd5HFpXbTuGy4beWzpH48X3AAk4XtL1CWlsfZRErxxdXEoAuSt4o7BILvmuxDkW0kVUUBU2W91b13X/dwR5zKDMyeqN5NQ1F1A8jXti7VRNiWkukaQlcJH7WE0ez/m8SKn/BtUBFdtIhSHChvYiyeZ7yoAkG29G1QL/s9viLHKaHeLbxG+8uQtgX/ewRkeznnk40Q/NpLjpEB944bj0+1iYZ9mfPgFCBKgHVp9RP2Y7L7v1uPqrz2O8Kz3moIJUK8MLRTVEN13Md44pPZ9Ewb1Ue21Jw32l7CuNQ152Ps/ahpZSGjaBS1jVE7SlGY3f63Aep/JHMjIx5LQmY0CMYtMC3dNU0nqDkiANUT+yIuW4cOGHR6iQmlxGB1gmBJxQc4/koGBqR0CSTpxfq2h9r9aVSv+Abfdwzi3Bx0pUTBVFfR9cmYiO28NBK/b82E8u92XdPrJGqIqpPbxLnSMH6/4NLD50kC9STy3DK71Wj0hFK0y1WaSp7bf2vLgSMKkgRha2BJOhJy6ULQ19My0rlVftTANg8vNtIPNdhxBt5Ik0XLcJDvSV1dNLV6B37B333DePgw3FwzSTFy10rb+91TVtsO7efxc3TjRnZmy/ozMOAmlqwfFHoRT36qo0V0DvcAOqJCYl0pBbix9zKGRoXHGATNZ/wDUyzMeJEHzZYG6XeikY2Bq9W3oO75MOniEqkmKNk4JcVx4/Vzs1TEivGxLr1cbTddmfIBVT0rLV/Njs0v48hbbeRfqPEWPf1smQa6Io/nFnrQ5S9YoeYv1G7mLFY1IntIfnYfiqeuNe181YqWXsJ0Cq0qJA4tNtu0g3FZvMb7d2zZhFNJYiFtfJ3bFeUxO/rt284fuYv2f9AxdEV6EbR0wpORirBuSRSRapD02ASQjcNgjzYobPdJJmDZK2y87tUUi2j+lusC+20/5uLkSBAesV5qDwtYNaXQUVSVSIdw8+3aJpbx28vgHDoW8xqKGXrcSNIEiStLdvSEh6T/n4PXZ3yYpPMWk5iarOoJeNGNdJICoy0krgIEi3XpF4fRy4Jx9mzI8iTMs1am9JJBaBcU1IrLwL/m3iEcUdZH8kqXKpoCjqWNSZrcC4fq1C8InCSRapMDE1TMd926y4DH3rcKJpP2DweKeL6bS9XiUEiIkkua5Ud2kW64xO227GxT7MWQpMSjV80KoXb3JGQ8U16BMQ5Gv7Uscl2Z8gjFTVzEqxfVEQLekXRb/AM28OPvWR7w/OwUBqmu6XzVjpuDwWvqp4i+00mptbSakqIgY91ut5b7fZs8eEXSVQpE4AgkHKZiGugo1VHVSBUS3eO0NwF+7jYpdmLs/q+kRXr6tFBHoKzdad3/NbubHRdmfIUfQof0+rUlDFXfaHWBCY/xXwkWPZ4mWkh+dgpFWNd0vmrHDe9qmoiqtK6YOAFVMjLugACvAtuwr9t3IXgw3FUF2OiZuR1UnYEJCSQWWjf07B5RPw4t+btIRtB5m1RR6DlzIJR7wCauXdhOi4hqgruILb96p9OKkolG94iDAe61eHTVvu6eq4fv7rAxYUwJXjrCaUkGr9ItZJGaJu4sSDS1SPpv1xtst2jZ7OE/VtQinwYgVrgjEde9L7XpLbymFuNQZSdnTLKsMuYeqaqq2pY9664hL0+r/AEJaW0zHaJoK9HVdi4n2WsjNv5MxKx5Q5uHHk2j/AIHivrI94fnYIcqhoSjq+asaOGbzWUYLtpMk1QBDmPveXm7qzYY3AVngwsoqcaKxis+FwkqBD3ulv6/0XNjXbzso5F/k1jzArIvSHKPoVSH7rW7GXK3pRpTVfz9Ns1nL5CPeG3aqvQuIkuZLVILei0brcWSkE1NmoB7YoV46cuhWBJnJksHEXDql12j0Ic3j9zGN62PVmpQzAhI1bt3NyY2Em1ZriSws+7t1e9SPdsG/ddsPb5rvLjHteJaFRSgJBanq8vuYeWTeSBuuwVs6jFXIZfUuaXDagU+yuuSIRIAQQ6vdEvc82Kr2cSP6GyAAA3HOKjdb3t+kNm3r6sWWitH6DUw2NZBQQhGRiRCQkPcJbSw6oqjoehmq7OJ1Saun6rzTU5RuEdokfTtDffjCOvgAvtlzEultMEeS73RVhdMgVIWyQCRK91ttIh8AfzfLhGUeU2wWZ+vptnHk4AAV13AIHfYW8d3gt+LFdq6t3MNRKMlTj9jIOnb84lJzqjpJK2iqapD0aQ7j9oObGUW845qCto9F0sS5PXlq6iplqlzc2CLbZTrRkWkUjvPEo293IYGRLaDdeHkmKxsJhm5G7mbOhIOm/cHIV/4MJvO6IQcARDsISLaJJbfu7sZDoevJKNkHBwkiqzeJIapJFuBUOsC+Pq8J9ZY1lFuPXdOtZW/Xbu0AcANn2WzkH38UXC3lb/CjLHexusmyGJChBlOXBZt18bUyubmJhaf7VWz+ns4N7d45X0QkQVeEkWqhqOBvSVt6eaw7fv8ARdiqU3QjOnKllqyZPHhFNWiQkQiaBpbuYPauxZYuwVBN0CooneKpCeznHZdyBii4vhUO5od0UzoWCp2ol3iUs64NdNT6multAgckduhekW7l2bfPiMp6Ibs6lhnMwoSjZKREFzTLmb6o3WkG8RIRLCsxU1PUrDvpuqH4x8KkWkShGKqq94DtSSAu9V8vx224ANTdqKVXEWFFU8xj0UitSkJBLiXtltvKfdAPlsI/Pi232aprxmOkUnvnFNDaOydLV7K+p1d5LZQU5RU/Nr0cgScZHOn/AKSJdX9EkRXc27GF+ANJqmi8fvvq9hpEr3ukqA3Ht+b49pYCLzth9oeRRfNpHM6QeN3qRt3CDlugqkqkY2mJCaVlpYeU72kUXThNGt6bbJWF/wAZRHdGJmFt6qBlYfspaQe1hzV8OumMmBFZDh7jKmpCIaki1IyE4WFYQNG4XGkNqqtu8N1olaW3dy+TDpZJm6WJZWNbEWrcBE61w3kWy4x+XpxFsX7NdmxfxMk2lY02vENZBMbgXMQtPnt0lx8JWn4+i+SF0wXkHANX+qIK6FqlvfmA8o39V+Mw60bJwNdQYfaqGhdaKQoRwvDD2gHzbhkB4SGK24tnIl1fiwXNVY2fEjq2gXD65OLrb9oFdbsG/FdKg41vWBVs1frtljYG1NMUhsV5d3L5d4kGLMTptHRq028ciabRJVVclDD7Ld4Nnu9WCal8agm490VRTNdXBwne8RJwzBy4IuN1xIz0ldIvsj283tfjwxj3nrRiLYXKS+kAK6aCurpHYN5Whybx/wBaGMr5kV5U8oSPr6SItUdUWKB2t0APkHZzliNRkji5ZFZhJKsSBm0uIdtpkgkV9wdN/Phu1w+4TUiJZBzjQczsm9K14sqZOB4fcsZnzHvI7v3zHdgO1k6cnnFS7Cx5cyauBNMnH8rf09YDb/NxdMuKqWqpq4h5v6tU0U44d4gQ2kVn6XS5A6hPwmPmwtUlDNpSuIetl3LkXEO3VSVbDu1UrVRCzb03eLC9j3E+QP8AdJaNwhutMLtN7Kuia4KvEXJGukWreqomXgO20i2+XmwAcxH6yqj7XBdBblItX7Xdz4OTNUBeJrOo1sqmZJapFq3WbbPw4DeYUi5dNVgIHNoBakRNTsH3jHFlp9aqrz6tai7JrKNcZLxLxVza44pxzHvLvS82/BQdQbZKQWNdFs5tX1R12VyoHt5u99ndga9k+ORVyXh3iqypEa7sDLuNvelyEe/BSTZtgeKGb9clCLl4pnzbfNjMXIZ1LmnmVbBaR1IsUcyNXI6dYRaHo1FUHYJJopcxezcWMT5R5RZtRamYC0plpUbMntCybBlqMD71waqFiQ+YwEsbTpexfIeotAxUE0nfUlt+DZjA2TrWSQ/Ol6xWXIQy+kNIiVuD7dry43VoiDDI+z9+KxFRLrLxB3k6yNyZzggasqJ/OZXVKxTcUhOt25Lxyo6rhVmqIJe2Z4h8hcjM44HOam5WcyoqxixSSkBVXUi1RSG9guIXFb1mQh7wYj8gVZIamq654uWlRFQENyplv4NXdzYjeze/nlc8qdReSUgSIN5XulFzIbwi3RBzljSsbkA7OKa9n/JHOaJz0y9lZvJ+to6PZVHHuHDtzAukkkEgVHeRGNgY3JMR3FVxUlp6RGSQEXBKrhyl4CHHz/7NL+eVz+y5RXm5Mm6tRx4GmTpUgMNUduN3VIkYZnTjkmwqppaV5EdwCG7nG6zCji6Pm/5SZ8O/CS8KfqMEgjCRdKtiMx5RhnRXe6CpfF04tdCxNmWeY6Ma1eOln0Y6AU9ArlD4crBEd15bsD8Umbd4s/ZLRiiZpXChpAIF711n72L/AEMKZZV5koi2bJKAxkAIWg2nZoF0jyFjB2ofdzf5+JaS9fAy+T9axJkDkpnHCZ1U7JT2VdVR7FIHt7leLVFIbmS4heVvWdo+/iHyIyIzpgc9KHqGXyoqxjHtJ5oq4drxK4pJBq85lby4b9m2Um3WelOtn8w+VRskCJJV0RB/EF+kyxD9neZm3HaEoNmvMSC7U6haBpqOiICC/qG7HRmiJY10UtC5BZ2IZ4QtQr5RVikxCrW7xVz6kX0hS4wS1SK3ls3XYb59ZH53y2dFeSsbk/Wbxi7qWTXQdtoF0qkqkboivEgGy2zqxE0vPTzzPKDR9fSCrU6waBp8adpBxg7beTEXnxLTzfPqvmyEk+QRCq5MBFJ0Y2/Wi82C9w6lVrBfRbPSGOUzQjURNISSjlSHVZKuf0qV42gQ2Yrow0CkxFGOeKoCB3EJQzrn9/E12inQMMzo01WzNVP1aram5SVIeZLlEOfA7mm4SKaa3ARBOFdwIOW7xI+Qf2v3sYriBgnbg4txY/gLZItZPBbmTGXNEiJJqqGqMW4Q964zK0faHGEc/MtMyJzNiuH7PLSrHLdxUEmaTlCDdKgqHFFYQlbjW/Z5dIlnFHNvo20j3Gk41VEG7j/anzj7WMeZzV/mWzzUrgGFc1Q2bhOSZpJpSzgRENdWwRC7lwXZqZqnYKXeSa9y618lTmfWWmYspm9WTlrQFVLs3EiqqkuhDLqpEFnOJAO/HHaFy6rl7mS8Wa0HUbluETT6WohErmGyGZie63pMSH3cfmdFeZix2bFYAwrapUEUpFUEkkpRwIjt6N2HOfOYWY7HNN8yh69qJk3GHgj0kJRcAvOGZmfV48NSy+03bkr16Vxm1RFTqtaDto+cJRrREU3K2NVLSMNW8S282NCRrB+17FNKsJKNctnAPzE0FWqurfx4/oufAPzGrXMUVKHNrX9RpcRREUu40pRcdVU9W8y3c3mwfFJKYnOxfTbyZfuXz5V4YGuuqqqqX8IpDuK688WiI9tHu/gpsSzWZ95DFRqbVmSyEC+JuAW9xEuu9O7q3cvl58JzDp4/j1OFRkBWbkZmJMl9p7ubd7WEUW6KTFZF0DYnGkCtq7WSvHd0ke/3sNZpUOHUD6KsSUDdcLOU5LC9wC9rm34zm9b0Fmesn5mKYKrJqCOy0guLYHiuxrLLsFlcsIFFCmGad8ckYq8VvKxIf2RBjI9VWWiffpkBW2kI/u41Rlm1ZoZf0+8XZiSxxIbrXBGrtHwK4vuQ+5xQts9eSIFHpSzeqKbRcxyiSKsoy/wpKz7feP2A/Li7Z/5u5i5aZjPqZpCm+Oi0kklQdu3T2y80hIxuBcQ23YH9Ik2GsqZVS0hIJZkG5q6Ex+sfytgfBiu9t2tZ6G7QcowYS7lBEI6PK0Vdg3ID04ot5EFM4Te6QpdxAPuhuXdJWhPtI5taJLOoeFEgsvtdSJAN5W8wL2Ynswu0HWdFlFg3bMXxSENHyhJespG/VXQFUx5+Xdsxj1xmbWDdFQEph8PED1K26oX4uGfFczcbUFNog/XtOjafV0hI9xnHIX4Z0jr7rRSWddAQNEKW7b1fxCahuKDS2D/8ELwcEzPpVaZoug6hdI8YUqbeSJCQdaqSBqsFSMRVPp5ebGG5yr1n8OtxCJW9RcRzY3Rm4QfmzyruNVIeAj9ySREX/FyvgxcUjo3M1E28oVzcUIyaxSTxG5tCoFeYd0aA3fN/u4L/AGeI5vER+ZUw3ZIIEyhAfoExVBLVJJJdUxvC7YRCOB8iuz4cTdOZoVgJUErUiEeYuk0Nhe0eCTkc4/tYzUNB45XL6ML3kqBjvFq58QD+54cZ+1EDtYIrY3yQUDiERdtetiak/LL1URusD+2hxf8A7LFoyz7WlQ15ViNKuqJk48TZyD3iU6lVV/i7JdcAs0us0vnxilvmDU4oiBSqoiHTYOCd2ba3npLOBmzcPyJH1JO9If8AvmeY3QUneEVzwn0Wv6+SrbRMsunI39P0lV/8jFoyf7WU3mnmtA5aPKSkIhGdNUSdpVCSppWpEV1ppb+XGK1Mw6kVTTA5IREBD9EGCd2P55zJdqCh+KeEupquOYB/UK4tbodWoVUT/dRyzI1lcyJLXfiN7dkSqq7U1QI9Ad+xVLdiqt45sgosaDlAdtqotoF0PV/L78W7MgnKWZUsaXEkIN2Q2p8PZ9gP60fx2YraJtkBcGay4idndKqtdvy4w9XofJdItnwZtFx/mn+Zvs5UTWTWKl5VSSlnESLZo6GPHnXV1S1Uly6LffxQWvbhkiGz829S+7VqX/zhjrP6bON7IeXLlJa2+sHAbhSLoeeAbMZXTr6oRK8DSt8XCpfu41lDTTpmyisLcH4VLg+0tnR/a0eSlDzVYJUZVCRRL9ky4Qqlb97xALlffwfRocvVfisuO3G5Q+3oCpbf/wAKm/8A844B8DX82WSNcP8AiUCUSnqfSEtARtvSkfL5cCOQqieeIqGblArAM7RSD8GDOreygxfX0OyZzxPPNnUizBhUMGpTRR5ELmWQeA5BwraQF9VGzlwB6fGVQh1AZvH1oEqNooPNIe9LwF9zBE7E8bwsTXxjtJVrCKn/AKUsDOJQYCitqgzGx44u1XCQ8jgvNswhvIiDbZCtLw0UycknGhJKkijKSr5IgvK7h39m+35sAOm41svnBGg9RX1OKbgCSB3OlTJURC0QIbyK7xYPhRcUumXChHipsS1UnA8/+lH4MAGPE3+bkC54NmQpSjc1Wwt1UAs1Rv6vx4DtBdoScXceyFbIyljZul81ImEGeqqKJV+kRxr6nDs0r7rSLXIwHl3Fdz4d5qN6PLOGv+PfsdZVGQSVFRkZWbOouDIPnLFCy34mbzahXKVKsxIKjZGLvVcEq1SBwJWBeVgfz8XjNitZttnTXDBvEUwSbdvId6vDRaqp2JFtMj70+XrwS4ImGpZt8izUoKW27x4fwTM1CdORcKDw4/oyt3nhWJ0nQuAS9AqKbOXEtBs+F9JNyDaqlpbvH0Hj8yPPwEhXWiFTNOvXiTZRwrKESaW0rkhLd8OEq5klpBm0g0G3EyMzegzT2pERWkXi8IkXu48b31WIx1hW22lt5jLFjY0srIyEPPvvqnpiVNRBNRK4uUh93aWFjWLLT41NRtQTsaftMFVcn6LkWEX6KZzIolQlI90rIsHLkUl0r1RESt5rCxCZzdnug5Sg5pGi6Mjmc5abxmoglpESwdHvBd5L8HR091vRfuD8nhwIamzheRizhs3gkHJN1ySK5W4Cxp6Pim6vVg1NIWkY6ZaUmatpXKWlYTfUXVVOI8ZPUxKsW7jkVctzES/p8eNmf1NLctUaoBtFQd3vJYdRGd0mum4bzEKwkGxbOFJK0bPDiBoCvU8n380+yzgUIxKWX11UFFdcEjt/RDs2+1jqv+MW69kQqRiQkJfrS1/g2ubwIG9Sy72xSptTP2p1Zv1hxXrGQs4YhsIOMX5rx5sAtRnSrgSD+ErT5+9D93G7XFF5XZm1Cs8zIpJCRcSCpuF5FLVE07zIugvGRcuK3nV2EINtT/0nyPlV13AEBHGuVRIVx8aSvi8pfGONPYuL7e6I0xSGPe2pBeeFK6iKW7wrNmVKTZqjUXqEF12IU5MA6J2raSSRtdJUh27yC7lxQ3DemEkR4NaQVLwlZg1RWVmYmWlGVY5qyj3zFNWBkG+qIXJXqqtbbiDYGwSxndNA0phM7xt9vGxon23zJxspCsq4wTGl0Yowdl9Jm47RGXIJa930jZGF1nQrglZ4K6udleaR7Tnnv+1LA/7KaAK9pbLkLxu9fJENvskWLpm0q5LNytnKQFd9IZMLv8+WLanciqRVVPaIgBqiVvLpfzcWKP4ZxPRKKSyqifGpWESQD+l+T2ff6sV1ETuTMFhuVH9KHLieplAxqSF1TG5WSSC6zzW4XVOhskzp94r6t5wRbOXynZ05JG5JrJNW7NcULNUgNdsG2/bdimVVTiNKOiptabeLs3CW0nYD3oeEuULhC3cPNi0Z5VAwhaGi0lTUJZJePO1JIy2ca28Hs4WzYl4coNG6VJi6cKmCDleLXIUFbNhkJjvG8RvHqwhpLU1dWCHmGMf5KmnqSpCEuXUviLmpEtGuYVSIoNhEfWLgtNIeTfdb82CxWUo/jYGl/WMIKSiVMx7duok6uubklcBENuy8FcC2rgmHtRSzme4b1gq9VN0SVtureV9nlwSs0JxHTj2GsOylYJv3u20wYIePGgdb9WJoSWoiUfkmEk/zQhwjoFtIOEjVccM7dWpHYkRbitL7mNU50PnLrstUD6ZRmLFw7rJ6SooK6toaRjzWjf04zV2X9FDMBxKunJDw7NVICTE1bbxK89ns40FnouH9bLlKihqqirLSatw9VgiOIu/Cvkr5T7BQBb6OjZrFb1bevE9FkwIU+KRXV1TtBQkgEOr2jxXWpGS25sNodW0vdtxKR52uCPWIbNnL+/ip1MQWheyikiPaEpgCMbrlj2kdnIfjEPu4+oXN+T/Jj5bdkRs6d5408MaiPGtwdr+nUS0huFIuYwMr/hx9QGKjhVoio8SBJYw70BO4RL2sA2wvdLw+FLrz77ZIa5xfx+F9lx+DGX+01KPGDWiQQRFVFWeDX8Y2cnz/ACY1BnF/Hof2VvwYzL2hog6jRp2NQDVcJOjdJJ/rTS70A9+233sI33MquIy7yNpAlTCs85sSLk80px44RQSE2UZymdhACqpbb/ZxcKHqGHQRZwi7m146Zq7bP2Rfu4lO1BAxX5nUcyKPh0EmbpBIHSjYP4mfQr7JXWns8GBjljSE36+jZJ5UL54LQz5jERLZ1Wc/NjR1Y6hI1VTbdCK3Zxcf8GrizomXv3hwXmLoFSIx5fssBHs2qgllmtctd/DjsLuXpSwWo1UNYjQWuFVIFdvVzbsE868hr2ljMo2HWv2g6NL5P5uMg5jP+DdNXKXMC6Vlx+bGsu0Be8p9My3E3dXfL/Oxj3MBUCRYm6ttB0F12FZD7pRg+qRsqpgdUVw1eM0Yxd9NxrtJAlwt0jsKw7bi3APIXPtxcMs+Mnqo1l5IiZg8MEkiAC1/qtoBy7LBES97n5rRXmG/h6YaxtVKv14xwkJmApFckStg6VngHZaez2hLD7sy5qwlOE6Wryqo9BEFXb9mJF3qSVipGlb7YiQB1XY800R61UTsNK1U6yscxLeJWi0WKsaboycINm/DA1s6uXfvHx854qrPOyjH9cRtMT3rBCrjZANxOF7FzVS6SMiS3gA83gxS1O1fVVRRy0DDQ7aQpl0OqgTlBdmqQbSO6wrw33df7mIWuoig1cv2+cdTUNBvnkg8SYCxKSeIKkACW4S1+m3wYa02UDqWPiRitVR9f0Su6RolnPD66A9f1a5VudaV287d232jwo1dARJgB8g9OMo9nWSoYc0mYUvlc2gXirVxc79YulS4frtFUt+NKKT0bDcGi9ckKz0gQQGy3VP2vex64Oi1qU6EdKrec03CQNL0jJTz9JsmDgySJUre94cvwXYjeyXX8a8oePbOngiQi4NUrtqWq6VIBLwFfit9pio6DcUnSrOt6Sk5yNVLVQKPl+BVSdgNpgQmkV+wsR+QNQUGUPLQOXmXUgzbxTU5d4UpObySuIrRLhSvLmwyaiTQkKDcHtdS0pnVor5P1kAmkV8QqqFp7SsIS/DjCbEO8vPVtt6d2DNF9pmhq8pOqKJp+Ek0lpCGkHCGqqRAgaTUlbw7ofBgQtRWXU26RKJD0kPJjOXf1orUWP1ZLZnYKVubVIjuuBdrgq1oyRCsZ1Yg3FKR5f8AdywIuwautrVIiqHNwh3fL+HBorfdW8mifWu0If8ARYEphEqP5X3IOv8AhxeH8E3zEiwbvm4eNqr8gpDgA5pM0WsHIOdG4g1TAvfxpTMofyyyQ2bRakPxqjjPOdAojSsgHj2D75W4cxEBS9qRkontQDfk/lq56dBuFxWjztRwJsjVQTzcpIw3D6xS6sGPtEJa/Z5y5PRXVU/g/wCz3H/Ei82A3lMuihmfSRJAX/GjS65LzYR3n1pLRW3XSreWfzVF1QsKCo3D60D/AGSuBG+iYQadcOUmaQlx9t1m7+Kq4M2eSV2X7FQf8HfgXylgP7FadWA+XjzL/wCZapYJrBm+JeyKTUZdl8pW3PFIHVDUMqYXXpJfcSxnipI5mMWi5SR5PWB++D0f3caJzZPisrKBc+MW/wBwMBCebgUCPh0JNX43hYfxm6g2S0Ka7dzcwUpNUbiEHTsfkH93Aj7P5Glm1Rt122Q9N3wH1YMHbeMHVO0i/wCYTf8A30Lvw4DGSq2nmdRhFZaMiJbd3R4sZq8+vJaW2a6LHBblzgYNnktRaLpEFRVXdJEJDd/gpl+DGb0WbNWPiwI7eLZm3P5f/NxpnNW0ZihCH/34uB/7qrjMCh2ptd9pR8oqzt/p7OHwj25fJ+pZkPUCiMswB1Ewb80REjb2K7OQ7xIPxYRno4B7NNeMx/RJSBW+wgJYnlkr4luj1NFQP5cJyQArkbmIjzWBK/8AuAkWGb4DlkqmPWivmWiOl2kqZ6v7aIe4rf2qGDRnQHC9smpkb7RVQdc3tJFgJrd12jKdW/8Avjhy5v2qGDzn4lb2xZY7NxoOjH/RIYyd710PyS+ytpw5/rQ+L70ktxPRy7/0pYMvZSVP88LMPG2XH5cBpRLaK16olZv5ywX+ycvdnHGgX6pwO7b045baPhzPiH7S7HxR/o9R4S+ynOWvZhy3rdvJSs5Fa6ys84S3AJWgaqt4b/Pdir5tdk7L2i6RlH7BsROGTWT0lxERLYguqkezqvSHGkOz2l/Ar5Ev/gje/I8dfu4i+0A14qh6mt/RNZMv+5vMdft7QmImvzu+Wsl8l6ZpB5UeYjOlTqGTJi7JpeJOLjEFQSvH41caQnOxbRjKBkH6Cz7USjW7gSJXrLXv/wBkGBDlSNmc0aaocgtD+FVnj6DTyAFAymr1xbQPnfY2dG3mjIkmcKBoI10wWjmdFtjO8kaNiguId+y5Lw+XDGmb0JRqYaQkDpI+UfFix5sI/lVo9whaQqUmx9G7+Xcj4cVinwtkG961vfpcoebH594gD/NXvEv0lwvrsbPhUx20KLqp/nBUE2wnnxMW7VJfQtS0moAkhy39N6/z4puU/ZukqwUrTjK2k2I00IDckkkOqYKrifT+yHB77VawJVhWyXUrTXpL/wBw/wB3DnI8Ab0HnRKr3XJP5gD8ulql+Isb+mfMnya5ZLhZMCLQmsT5VweYWaE5G02rmFIIJmbtJuIpDakaVxHb4OjoxepzsoVmwWUclmvPXcUklamrbz+xhx2W0PVuchM0tvBS1QJF7Fg41pUAoqxqhkAl/CTfGlkXKSVCPfWbaXg3kDkjGxD+VXk1Iqt5VqLlQt56rBqX4cJtftPFZvxZ1vQqll9MqHbYhmLpW+G6G/8AyeKwnokP2xWn4duOWcYf6n8kV3nyff6R8okUc+TmGvY8pr0RrOPctfQ8dC/Sd3bm4qkW2zqvAMQ1Kuu2ZE0PD/R+rRShVmSXCtvVDVUEgs2DeYkfMOLNnKld2Hm6iRiWkTz/AGvpxoik0AHK+l0QDbw8ePzY0tIJEw3Huj9S5NdSEa14ce8X2lgvMPtU9pmjJ2QpqrYSPnHiLXV1CSQQ0Avt1RFIR9m3dzHhFx2h+1Q9kI1y1oaFUFwqBtRXbnuMzuENheXEH2ynBs88pJEf0tPAI/8AaP5uNOQsMiTWhQsG62PVPZ40LsaVikCKSE8coIRdmrMjNGq+0XRLDMSlW0YJlME3XQvtVPglyMbTLDu1G1NE91gB1YvdPsgYdpDKr0JAI6y8ncP/ANLXRYpDi8ViAQSK3xBzYwHHLUSb+V9y6v5MiljUfJ+9cuLAZuLbreHVu3+XGeaua8ZlS6NwZaYRaRDu5uWzB+ef8VvNVFUR4VXdb5SwF2sO2nqNTph050k3bAGuvzW90Nn3cA8IlGRe0Kd8djLLHxIkZMlxuZFNvHpkqmrItL7iMvDj6Co5Kdn9kPp9P0IpgTDbvs2/EWPn5lmy4CpKdRXcpLk3eJJEuPVZb09A3j82Nv5tZVQjdRrK05ltHzjyScEo6FyqKYDy7+QsOnnCaJx8REhH8/qxXMa7D0tAREP5/fgrh6Mq8gUbQ+hlGjZ4m6GFhy2yMS3JUjRY2f8ARGuM+PqaWi1NFXJaFSU8Iylv/gYuGV+VdM1sm/OoKP8AU6jA1URTRdAqClopFfcaG3nLFtHVlWllC2P9fwS91rJCZOF+f4otDQ2TIf8A2u0f/wBlbYjKlozJlVFECp6ilRSu2qs2ZW/LjMRNawu+q5URFviKW5v9Rhu3ZzcjUkPDzeVEGgzk5FowXXSeGSqSSqoiZDt5guwaw+YEJC2P9fwVRNDzOF+f4oD5rMo2NkK4hIlFilEpSUxwaCAiKQpGuqQANnTYXLyYZwY99CnuHuo/5Ekh/dxMZ/UujDZgVlS0CjwyKRpJNxT287JIt3xYiYe9v6rbBbckbQC8A22j+HEakjyi8S0DGuMe6vpy6qPLGHbs1p5GPbcaNySjmOt19tx9OOPRXmSoj/xjA/6AMOHUe0fZXLLqRrGQWZQ/ENhdtxVDWBC4CtLGT6gqrOqGcR6RUbQ4jIG0tup5PcKp23Yj7pCMYxL2VmW2mTlKWlas/ODk+PLKQvuiGP385eV922SjvdNL97GQJOtM54MWpz2X1CCLoQILqbQ/WiP3MHvPiMTofLSOnKDo6l0JQpPhy9LmEQUDS0lyttt27wDBLTFc6JEMdPsqJCyBR1Ih/nTy16JJD3VUv3sRNUZv5at2Yo8esqVwHahb+8OMUSmaOe6SLh+EDQOikz4gBKlUPLi4dnatq7zFrgYeu6bo8olaLcOBFpT6DZXVAdm4cHN0NSGoo/NXwSY9pULtVS6MjmxPcKzfMxSiWgGkuQbj0iK/YRdBD14CeXJB+buDAd17P8ZebB27UQ8LnlJWgO+Ljy5R27CH8OBW1QZxyfq2LYJJt7jMBFLrvIj/ABYBqyhIfaWmpB0iXsr6FUVmmzp+hKSintLSTpb6PsCFVskaoKjoJbhsEsS5Z7xaPo/J9BKgL0+Vgr/5WI9KCeVD2YKUi4mcfQq7uLhUk3zBc0F079IdpCQkOM4N8vczV2r5Uc8cwfytEtX/ANIHm611b+t8GF7dNXBGLmkhltFJsMKY5aebvLTBdoqHErDy3qovZjixyXaHYW3t8sazL2YsPxqjih9lWFq2NrafbVJXdRVCiDBqSSUtKLvASPXPeAKkVvJzYDeY9G1tUFe1k49GaNZtUwmZDh0Ept0CSAcUuIAAXWAIWjhqxQ1ZCJZn0cFSXVhMgj9JaWcdpAEhIxygrm4B6o1uI/7fGU+0VX7zMGrIlZej30CTRuraLu25e9XyeG35sZjz0lsy6LrxOBa5o1iSPquPdHdMuudUBv8A0uNldtBqDOvINbaIuGr0bvYVQ/exZV29+lakTkkRb3GCfiIrKuXKh/REQStIQkZIeb9uWLJNWBICsgapLOGDQlbjtArEEh5rtmwfdw1asGbUVAjmCTXVVVXLT27y5y+7h1LJIuFmPDrf4AAnaPegfMfwH8mBBOdRJOiGDUVy14ZdRQFWY/oriFxcrZZ5y8HxY0ZkgTlLs4ZvuQUXQdAhpCSRkNuzp3bCvuxnVmk5XakCRuV9Jn0oCWy0f6eXGl8ixaK9nrNf6QSr5i3cOB4hdNtxJJAXoT3gNw3/AC4sLfq9r6sUtf8AVfN+0gNltVE8rm/RMO6m5VdqtVEakQk/VIf40ltIbvNgX5mVfPJTEoCE3J3a7gNrxX9aXmwf6AoHJdrmnSEjD5uTMhIt6gj12rIqTNIVVQdBt1dfZdt3YGuY9DZBqyUlxGdFTpLAu41U0qJ1dLcW27jAxfRkxmbUvI3Ioz9otD0pSlJoqguSgUbD9fWPiK6/mwHY9d4KaayQFcCVxCRBzgPUJ/dwb+04r6EKvpsAIlkApiN770oCJEG/eQ3F8FxYBiOxTpHurUrmoklq27N3OA39WIvbiTGj9UK2Z2Nz9HoyprlRAy2GXoBQdpbW2MgyuZteEzRSKuajXJXbumXRfixsPsZtzHKuuQXMkBJ2qNxDqWhwobvPjMDigclLG+r2gNJQLy0xpB1vv/zuM5dRcNpmPtfWpUhCD70vZUh2isw6yp/OGooqNrCeZtQcNxSSQll0hSDhUOkCsxLVk6qoOyjTtfoVbPFJA84clRkVxVVvcOucrvAI/Bhz2gKLygls3Kgf1BnW7iHgqt+IZDSbhyCR8KlZ3oKWHeAX+9i5VFA5bL9k6NinmY71tTzeRSMJsaaVVJWxd1/gureHMe+7oxUxTSfckvOPdk3D2VmqHzBqp5lDWEkvVU1xTeXhEgXKRcEQgfGXjdd5R+HEx2Saonp7tR0WjKT0m8bqlIBprv1VQKxgvZcJl4sTMXQeRP5rqsYBnjLDFOJSKJ1IK0grcgqHFaQaWrvuuPd02Ykuy3ReSkD2jqVeUXnpM1HKBxYJRqlJqtkl/qa99y5r7LQuLl6MM6OOaMVQ+egk/wC1MOhn1VzkWyqv1hkR2gG/6ght34EpMGwvHDbg1REFTVFcTDkA/a2dPs4LnahEBz2rQzRSLvWg2qJCQfxBCzdd7XRgWlweojsFBQ9U7tIBLyFb1/iwyqfWkiqb1QrSVavTQ7HlNOCMmwpTRDcJW2har4PdwGcuZGYL6fLcSronQcqq1IXRc4qobrujmwfpWJpeW7JUBG1hKPo1l6Jj0d6yjhXIzG+wNK4dpYGNEU/kugNdRUPXVVOyCkpJu/QKASEmzfurzSvX3ndZs68Z6qaI6tspcoqTJhgwWBDzII5DzkrKZ/UWAT0qQpTzfVbKulSEt3tcuC9ni0RDN+s3N66RBKcyZAXMA+Iv52IbIyksoXGcUC7pqo68Ucxs41VFN7T7VskaplsuLjLrfMKV2JjtAmHpzjrVuSKdxyIDcXoH0XHpDYF3m8WH4lJhCtaahUQj0G7j6yuuiYq3i5bpXiHKBCXxfBjG+aXdVlOJWWjxFw8n4MbGFm2b6wA2c6ZiqkAqNRV7rzbrP3rMY7zS0TqqY0gtEHB2CSVuHVk3EqbptFa+glTQpiBSVNtcENH7RV37Uh6cG7s519Q1H1o8kq1WSNqvHOEAL0NjW/KRqpFy2X3bSwEYMUVaXiTFyQk3jmnKraOxIen4cPJBU+IFyQIEsBhfqd1dvHZdu+YN2MDmm1UZorpjtKNXRdXLaSNXaadZV5vz1AUNlU7ZMXEq8mjeOUocxEVRYD3pgYACpW283lxn0uwk5ot4nVQ5hKvibug1UlI2071VRSuu1S6yvxzPZhvMvquo2vGDZoTiH9dqimSQkBXt0kui2/mw6ddvKvKoUTptekqcQauF0j1Eklb+6MVw/S/ssaehddebzQKMly240rVDVuMDqih2PZxc5I1I3kpaUSmWb1q9bq6DUhIT4VUrt/sjjQNGZZtITs7UhXCtVMXakinecemmOogBmqW7ddstwLFO1K/zhdepFabiGbo2EmrqoJK7fqq5Ht1d99uJjKVUwytp87CtAXH6LbZqq8xXbC282BLvLI7XUmfDwYncMMrGOn8FYk1dBQQQ1SUVVtPYO4Ogy27/AL44kkVWCUejc5SSEx+sah7RsDeRbugNxkPRfy24Zx8ab90LZq2XElTVuFskSqpePp6N3xngf5mVWwDL2qmzBy5bPgbpRxJOWBMyE3CojtC7fe34zdt2YRUNMVU6I8q290uQ22mcf5kAM18w3mYNTKPBMhh2X1WJQL9E3HqL9qfMftW7RGwaVduw4cNTSIkSctto3bVx5MJi1uIbVkN4XfajyY6o0IgMRX5qqX3at8nXdxLoh+qit41TD4Lf3sciraNhY5cCaQqIlbcBGHNhQmpiRImsgJW3fbjyW3YmqUQMncynNDTgsJE0ypuYVSQlGyoArpeB0PgVS3e2N4HtIsaanmbxg8dQLpZBN80HmtAtdUdwFy9Xi6th3HjFaDQ1bbVkLVeXvRxr7KKqXGa1GRKTNnKyszS8a0YP0UWpKAuAESSSvKV9iSSQX4x/E9HNoakeVdV8nt3JpwqJ0tJbVMEIKpo6oFqKluVFLl9o/FzYs89lJ9J+zxWtd/SsGPqr0fkJqsluVs0C6C6rrcQCyElHSCjCWZroLXmNq7IUlR2bLhMfB8WKNm+/c/m/fIqokJKrtdK7cBfWkuXbjKUAzqBwJdHvU8aFw2ijpWcsykP4cW0gIUd+kJeDDWeH+2BQA2/V2ln/AGVLBCzMaw6rwXLqHeWmgBiSUkHg8BobMRfBxUjUTUyRcpaqDIlSKRDSDuEunQxvmH+yXIw0RW6MhKNyFQ7QuczvNIYUX7KRjfVvHq27TSV1dvhI7cSPaL/N01rBk5yrWjxauGAAuMWRClq6pctmwCt+6GAO6Vkl+0LmyE22aquBcMgcC0NUUP0vLyn0+7idWFmk6Fygi2J0CV6SgncQh0bj5x28uMjdXe1yo93Ut9wxb+zGskXNp5UtGq/wg1BXiSG4DtFU9L5y9rATrBc2cbKIpMyQF7Zq2lcJWF5ywak3ixSTUF5JJVMx0kh1zHZdd7/2uAnWCqxR743/ANsZnpCKpkSW7Zz8mPlp9amt59WtVdl9+ilkvBm1BInVzu1MkLjHvS6tIsFYpFFUm4FGx64u1QA7kEkjS5eXut+Bn2VSefmLh2wxrxQQN6fcAVn2pdQKj9zBZQZLKuiuNVTV3iRcV3HL5ub4sZ2tL3S5HvIZgmiaGSu8RKuaSyFmJaJYRckMaSxqsnKXdLjfybLfF4cZmy07VLStIuvJEez9l+xUp+lHEiYppFa8HVSHhVdnKdxF1cmNWREY2PImp2Ui8Jm1VaO7nKoGrphbz28xYxFk9llldG0/mmjF59tJNGQohw3eKfR94kTFLXQ+sb+ff0h48bazfA25d0frxWKq441Lse8rjk32iGGYjitDbdnbLqKKCpV/LmqgldxIgNpoHt5DEiHELlJ2lKfq7MCMhI7s15dRL5w1kFW79ukVyWkwXV8HWIW+yeGnZloPLSBHNIIHO9jNcRQ0mg6JKBeIcCkfOuV/Pb4QxWchKGyvgc1o+Sjc94iTWax0wrwyUG/SOz1cuBnvGzYG/DfVniLW1D9AZZSUpk72h6MqPM6jYSG7MGW8LISEu0SayDZItViZlsVHaPL+LGiKiVflXk8ArCheLc1VNBuQie79bv8AvYyX2b8u8sWWeVAvIbPuFnHSUykq1YpRL9I1zAC2iRpWBjXFSJa9eVACSzkbDb36ckuhZ9r0pc/v4XcR5pW/te8mljh1nR3UitYycLa/eoiPNaw5Du6cXGkZ0ILKvMWoYuHaSHqxm4VUZOwAUHIpJXGPddJhioLOZHcLp27JRUBC0X7rdtK0uX/dxcocmy+TeZTd5NCgj6Id2Crly4XcigHDnvK8brfZxk7U17sbj+fQnV4OVGUvZWesr8+aTqXMZhFQ3Zoy6hnhISDhJ+gkV6ZpMl17dgdYpW+yR4g8pe0FR9T5o0jBRPZdy3iJCQkm6DWSbAWqzVItiobOnEHkfRdDxGard+0zrp+TUCMl/qqMc/1S/gxyBnvSs2Bv9zEdkNl5Q8RnLREsyzop+RWbzDVVu1QjpETcHcOwDNCzG/DNCMvuWRPL5PvUpRvaOoabzCp2Bb9lLLVi8k5xkzSfJhvQVVcCOuOzmAyuxV8wO1PQzSvqkYTPZLyyk5JKZetXT4hLVdKg4ITXLbzGe7DfLfK+g2GbVGv0s+6YeLN6lj3CTNKOkb1zB0JaQdxZcfJin5mZR0G4zMqh487QlKs3CtQyCqrZWLkSJI9cu6+wsuEytwc2WhDEtudoAVnVbQ5zc2hGOgZO7lGzUVQLvfCrybQwL3Q8a+Tci2kV9Lbdc1vLbs/wof6c+CV2qkmy9bQqLp/wafDu9wvyZ9Q9QCR4Doiw4xNtI1mKDdIOYZ5wqryD+iNAb9nn3YzNzaHrhLZ2h33IKJ/Z+Ft+eVgsgwkEHRg7/jOhbq7ubSXL5Asxn2p+0blA5qKZOf7KFOu3xPHHFL+moHg6quqV+327saEyAF+eccI5J+gu2+thaLoiuCwt2lpDZ09WMdVrlVTbut5xb+uDy5akci47hf1peHelsL6nz4toczK7PvJZd4HUdp3UXa9zyymQzIqCEm+zDDSEklLuGbp2FRv0tdUDtutEsL5vZ5ZS0/mtPUlVHZhiJKWiuHaruxqV4lqgk1S0tol0JCkPuYpuamWkC6z4qh+rnHQDMjqZVc2i/rEXSR6/2R2MyC4fat82PdqLKyEm+0bWU3+emgIpRw8bkrHySskLhLuEtpaTMg5LS5y5sM+0iRad37Eo7LT/AHRDrLOPKBgdPs5vs1xzklaainDP0JVQ+SJBiq3FdJL3NUhuwR5ybZ1H2Y484SiRpyn1SBVg0aSKrxwN78RV3K29Q+Pq6cAzM/LyIlJOk/T6c4aDakjRdPpaS7iRHVAGCQAqFjM+6PnDB3lmDanOyHTbNKViJdFuIfW2ypCzV/hHpJVITt3dYdOIiT5k8Lm2P7FexlC6zHvIUtUo1dus5smly/lULy3EP/Oub5MIzSTZmzUuOVV5xASNIrf9fhqoui8akAytPILJdSUyPj8Why+XHMk4YDGiD+SiiT1dt0iCurzfsN+M9FbvM1LLNYcSkmnr8Tb4iO63YWzmLGrstfVX5uafB7KoAmDBK/6qgV3dCXWO/mxlWsF2YDombMSAzS7oOXwdOzGvKHQeK5W02GjJimccFwtFVR36Q8w3DtxK6D2Daothdu4p6m/VQVJTZpP1Vy9bMtqSDUf0o+DEB226ArmoM+ZZ/T1ASUm1cM48eOQYLq8iA7RINmLPDxpt5im9AJPZLtL7nDr9aPNeWKh2nO0Bnnl5npVlL0xmzUEfEMlW5tW4kBCkJtxIh3j4ixXasvKIXe8KXcRzz24d1AaSyszUNNP/AIN6j2Bbti1/3cXjPnLKuZSqoM29FTzpFvSFPtz0o1crTCOSEwuAfHiVoLtU9oCaqyLjX2e8z6G7t+0ailwDdfX1VRG263ZiV7RXan7QOWOcVQUZDZvyCDGP4TQSVZNSMb2qRHuNLxkWNBTUbGURCRLLuOnLWs/1FlbmErEqcLQdQpFsEUxi3H7uNyZ3NeFytyvbPUV0lkkIxIk7tJUT4BW/nIcZRW7eHaZQTva5tKrqB0lEMi/8LGqM5nFSTdI0i/np5WTeO37R0ajkwbW3xZEYiSSXLdd0deIvtC1QuCKMtREdwbVBUFyaiJtVnltphziVn+twUcixduoTNJmPpXcX0wqCSfMV5oOfCRYGDgkQJEFXLNmsfNc8JUC6etAb/wAWLfl5Uc3TNC5s1TSk8gzmIeBSeNXrYklyE0gPdaaABbjK2qIVgktxfJHQuLDRZY1mlbdQFS8n/MHH7uCJ2daPqeIzcZvHVJSrNH1HUAXKslecoh4IBvH2cWBTtpdpwyvVzUG4+n1S1/8AKxbsr+1p2h6rkqqZusyxIoej5ibb2xbUfrDdK4Lu65fLjfsPiZaSXNXGiAVlFbL6rSTTP6JTiW0NxMHH7uCp2NaSqqL7UVDvJKnpVs3vcd6qyVEPsFeYrcTSnbm7TioksOYrEbP/AIUtf3cXjs89rztCZl5qN6Jma/SFmrFyD0iQi2oq3pIEQbrfHZhkCGV0r5V4lmlKAkba00GX2pr/AKr9kOK7IP34JrLPVkFbLNIlV3lqXvW7MSGYTpZxmYsCvBkm4i4xUycs0FbjNLfz8nuYjWroyWUvYM0E0gDcg1a7TuHl73HMrgPukjXU7aXuRvwp5n81eS/Y5y94Vnrl9MHBWtBVIA2vPGN/x4yi4g5tVMbop8PstSxsrMTP3M7JbJPLmVy7m2bYZ1/KpOhcsElRI0lbgIeazmLrwL0e3r2kFSGyrYHf/wDClDG7tXwNtc3upe7HPEqDSNOSSWRNbM1WDnUVqOnyt0DEvsJPFHTpQxj3CyqKoiYmNukV/JjUifbS7QP5qRrkqtiuKOpjgyH1MhpaXC6vL4r7sMf69ztM8KssExBlpJGX/EyHhwwigZIidj8A9U1wHVwcIH+tLApg34CLgEmcYSgPXF/dWq/aleX2HN5t2DhknnnnNm1Tcg/reYjOHZSkUlwzSNBLXScXX3H7duAPC7xfXRsmVj9xauk3C2/iC2CRrj9zGXvwxFsVr+GNZOJws6AUxWftmy7dUrdBD7W/b42vtbbNuM4s/Un5wmqM45bINbgK1RuRdY7Bs5C8xB7uNHIqgkRcYwqW4xAbUG5iQ+C4TX5d2M4yTUyrxvoLChorpKqiuqQkr3o2JJEfV8OF9m9YQpzeRgwJLU2StdT30+pem6cqGV9ShOJGTZtJG2Em5rj9qJiIK8w+ezq6MF/MXJvNaVzdquoGdGzy8W9Rkgar6pEkeqkVlgivs+AcZsp2qJvLaoBkmbOXipA0klWQvrVVdhXX23WW7bdp4L3o7e9Zvl1PQvlFRyqhLmkrpv1RP27bcFONzFZ58HZyaUxlagziJJ8z9WyBKRq6oFxKQCQ9XQqWJTMKtKfpOYbyJIvBbuEgVBRdA0hQO7fcR7LfNi91E/7H0YJPGFMOZRwZXWNkl0zL4rMVljKdlGqphvEVRlk5j41X/CZFzrpCXgJLdYOMLX0NjuTvbxkXN/fBPLe/cKUc0WCiP52l0/0UuzrFtFPGTv0t0SczTMHrB2SRr2tzHnGweTzXYmm1Wg8/i87Hqqf5Q3F8WLgnkl2XZdNvoOYhcUW+g305Ue6S6QHwjirT3Yz7PCvoUfLv3GmBXgPr20vdwmPyXW2tDS8Q/wAiH7vrQBcTuZsyZH+q7cS0xaLb08MImRAdqSt9tvT4cCp9SCjZa1y5SIhK41VjG4j8WGWdmVryDfUjTeXNbPoOLhGb0FSQe6qqpqqiW8rvKWEmr+fNmjGvppd9pJAKrlyY3K4x904f/wAPO5LNQLne0xW3sNwcdDPy4iSj5qARQXJJD0p3HuuE+bDZvSrZq3FYm2qsr7WHDlVL0CoCAGuW+xMeo/Di55I0kefEI4qE/wCAlGSvD8MRAoNgkQ9Ps4voqGuqmuw1JnU3pinL3YURVORSBABbcNanbzDhN1UE7Fp8MzmnLZHxavV7ODbKdn6qgSJNpLRjgfEovafzYBNbxPqyRTaSLNJ2QL2mkgREJGPTs/Dj2FDU0ro9ZGMkfT3ihrggwQlFPEM4Z2LY8HIsU5KwD7wVbSIPNtLGQO0HVFN1hXBOaZZx8e3Rbhrkm1FIlXFve3EA7/5uNO1YNUlFrQg0GhFMXYgqaosF9VW3k70y5cCGWoOP071YdsV/OmmluxvuF6mmszue8JSJZu92h2+MRYiIqodkFhq9prLfvhUsljLaJ/qFeoxw6rQuKrqpnhgRE7mZMxuC6/6wRYLXZxHLqlM3qbfzcI8inEe6sSek9IW4q2EIaqRj5ua8cBOU1nsxJOVTS+tvHZ3WH4y3Y6qxcGq/U2uZVNsftTuU+KbifcqAq2G32N/tYslCt/7dKfbECVvrJvYQj+1HFZFuZ6mkdqlnT1bMXTK9ks/zGpFmOquo4lm9oiHsly4hW/BnPCS82WpfSLtRzARuWrY+BkFxSdRgkohbb/HEC3XkPSGBD2zO0ZWWUEbFysXTaTZxNoJNWH0oO1qzWSvNUhSSuvIx0uYx5caZzAoOk8yIhjDz1QE2TZOG7q1BdLcSSoq27x5dmKV2juzfl72nadh6Zq+r3ke3hHRvEFI1dITIyC3deJberCu1VPUpT9lAFEhivjXJC5liWm3klFLuJIzdOCR+yIzMiO3by7iwTMyEma9QIs73KBN4aEQLVSVIxsjkPLjaDD+pP9nlpINHjzMOqZBFqqKhtF3jcUlQEuUrAEw90sFdfsIdn9/9og51DAAu9bui2CNofp/LgqtrQfjlSXmsQHcsJZAzdKwzpRgZyDl8qZmIoMlS/RF0gOCR2hlQLs/ZPgkzcpjrze0kDuCw0h3X7gxphHsIZS0+oUrEzTxmoluFRCSeCfh/X4BPbYgWFFQeWNJRzlV01jRmz1CMlSIzVaq3ERkW7cXXiumYg7m+yrhdE9IrKpF9VU7nvFQs3Bh9Gis3IQ4kkr93V4cIk1RX74HI3dXgH5b8LM0g1L7CJMD37fL7ODCRILVXYYZD+fuLP0ekvQaUa9Ir77uW3rHzY+kqpgkO8hHp3Fj5y9g5xx2eLdb9VEuOVLSt2httxqftlVS8ozJl5VjHXFSIet3hEkdpCAnu+9ilmo6tSPPYd78EurmOsVjbXe/upTNicp5zMtYr0VPCoPGQ2roOX6SSoErbZsIurAirmlp9RzBVSix9DyK9B66b1meuh6B3brg6fNiGkpEKnfRdUlTraQGYjoR0LtzIkKqt4pHvDVHlt+XBCZycnCvMh41BmgzZyDaQYP2SS+okIer1DAec7xvSHqLGSKFa646WlMG8TpAERQByIqCHzSdZzZA1CYkzOem2rXqHh1Vyvt/kiLFRpmn5WjZJxCSzbQfMXpt1R8Vm0DHymG7Fuz2kKeo3NirKtoqm0IyeoqShF3CjENIHyT9DvdcOQ/b8dl2E8yqvh6jqqDmIkF7pNkC65KmBX7h6g9v5caozzWBlyoceyc8SofZvegVBvGf6RKWcGfwpYv0W8NnNQKO4dWLepW/yS6BB97Ap7PomNIvFhMhvl3Alb5ASwSHDVyExBvEjG2PN3q/ySoFZ84ji/mUuRVPtMSLlLLGYfsjJJYNLSIecb1RHGQqBQzfma2i4SkqsQCccGZMNcUitMEiLbePNjVvaQlGYZXyzZ0tpk4S0kC/a33B844yPRs8j9OIdhFvFWMsa4JJSGqIggfiuxbTiWBaRUSINpEo7M1fMCDmVKFzKl3XpfNS4xeOIUl+GM924UtgH5OnFKWkWJiIE/STt3ARMreXBYmoSVzZkG86rJDJODNJqLty1JAiSMVVbuUfAW7quxYk+znDqt02yslcO87SvtG7y3YNHEO6lxCUkNYF/W1Pii5pVyvpuELitakQF5SxY5zNDN9/TbOHmVWTmFaLmq1QUY3JCruv23eYsEWYyonqcodT1NWy4om42tkg0khNIbegv2pDhGn8t38zBqJVUs2lUyENIV9cdIAu5dJcfEXNgXHAiLarSLSqPQOeeZ1JTRTcCwgV3Ue1VC1ygr3SR89ogqPy4uNQdqrOqqGvqFxS1Kd6fDpLNmSvEKhzGkN6pHafWPVifjcm6DZKJmrTDNUg33a78fuL4lnWWWWi+/wDN7Hktfq3ce/5/9Pj68yTmkh0qoXCHaqFmdnbmyUfA0TXmWkNTikEhczQJq6YqqpGNtxCqReHpwllX2k62y7TqR5G0Mxl05OL4J+rxStrVLd3uwdnN1bMEDtMZdZPtcs4eYoiVUeOo103auBFu6SVS4gVSMSJxdq2GkWM8U+dNxMdINmuaCkaLtuYLthQVuX8hFpWdWL2icFuJCvREykiPlLmGm/q5vDhSox4uoaYbiqL+4R/g1106Q7uXB+pDI3N+vIVvU9KwSjuJVVNIVdVvzidpbTVE9uMg5Zv2zCtIMAmEk1EknbdkWkffqukFUreXmvVHH0Xy1zFq/KjsS0zVTeYJo+SrQGsi5Tbg8+qqyJC429fdXctp34T3lonjEpJvb3zp2tHeRK7H2W+YWW85UHormnnce3epJGkuqaRCRiXLsVLBqqeEkpHMBN22YKrtCXSM1hHaFgDihQ+Z1TlnO8pl88XVikqaj3/AC30jB2qqImXKSobeki24vs7Uk3HZnxtIMSVBo4YG8Lkt2eYh5rvu4U0L4dWLxCqqvF03809xCu66jpV66TWZRrlztSHukruoSwAc4KJrWXptwzYUhPOVDs2oRypXb7ugcFypc3JaFjHMonxWmwVccQJCgR2JBdsG3d+9gZZgdqau6PYRb1gwYrnJqgCSTlqKvMAl0KiWGmbmtKgBdaUdn1R1XymQtGwkVSE48fMvV/ENEI5VVVKxqQHcIDfgI0XQtbQ1XU+/kqJqFBNpItyInMWuNoX+IxxrFl2hqsetqHU9TsiWqKRj2r8fQkFiSThckjMe/Ih+fEFm52lqzoLN48vIaBiHbEeFuXWEtUdURu/Sj4vDgC5NT1kSZUFVUB7nAUYM8kzPLdyKKZEQLB6REd39ObAJJws3g3AE2V3unZbh/wDhNaHz40FWtUP6Ypx5MxjYV3bVdulorpbe9Vt6C8+A+67Vkiy4hZzSfo9DVuayRK6C/OkPxdQ4JfIDIS9lLaWYN6BUxmKoiWS9CujMbR4YP9V/NwFZxVmrCtwB4O6LVPm8a5F+LGk5/OReBy8g65XhFiOYVBLgiauBNLulT6AI/wBF4cUeQ7XEa1EgcUmsSyTMHDhImrzZcF1t2h7OHIv8/hVAT+JDDtUPQe5U5fvNYdQzZK83LewIsBvKV62b5iUyYGAiEilcQ7sbwozM6EzEor01OlCo6Hogmk2CCqRWd6gRWXENu20h24Bsb2w6SlJKNYK5Yx7YnrpJqKnGpd0ZmI3cvnxn7rqckadWyqdFvKFuSO2ci4MnVDmqdv8AC5c23/B1cZrTQ4qopiKV5Tlkngb/ABqkP/ijjTeYddQlIMICQlWjCRQlZHg0jUcgIJEYGV95/D72KSwzty+eVQ1hPohEC4cCaoLi6a7rBv8Aa6cN23yzZx5RScJZSjpR+DVxZ06R/GFv87HUSQPMn60SvuFVd6HtXsEMWqSzfy9aioq8p6KJNL7UuKa2ebH7C5qZcTkLKKtafj0GrdxpOGwrt7FTt8ns/Lhg4+RtkMVS2MCnFfKhZrdnpT7lLl9fQ583nQweO0EkBdsJ4iQCXdODtLb/AIKhjV1R5fZL1PlyGaaOV7FNF1Dt6gZrptUkFWJJBqgZEBXeDluxlPtEWD2xtYT2qoK//i5AsZC5VMqMmi5RL6sVseHDzrq26Pe+/BR7pI9O8We7yngs9lsjHOSG2d2YK9d36ItuBMsICI+/ygeCp2aNmcdPeYlv9kWOb2h33Yz4hXaeJR/yqo8JfZWgchgBJjIAPRU8mH/f32IzODvaDzAPl0oaQVuLp2kP4sWvLyYqk3r9GRoWPjxSnnaQKoMyQvDXXscWl4wt3+c8VmvKskBouuHj3LOLXFvHK3Nl0lR4wNuw7CuP3fDjsVNFoYL84OTIl8wMrWqwZmN5XWQ2WCSF3e2BoFq2+HbzY+g1XFoR8wBGPdRzTl9t9jLtG5l0S8rYglOyXBsXADscspSUQu2+G7yjjU1fVRSTVOogdZbrq8OybkqScuulqhc+2b7uW0i/zvsY19vqey1Jc+1AkIc0Q7mjAIC/9FEeu3/C3eKbDq/wgjpNru9DmO3w4vOarxhLNKNfxzAWLU6fcCKC6+qYWPHPVtv3eTA+apXvEzFYdhAQ244NxPpury/RXCWqxs+H/kjj2sEAGr6icld3tKiHxelD93C+TZcVl7ngzG25xJTFl3nFUcWLtETdCspNQKuoqSkBcQDNXi2kmKBK3+m3SsIS8OGWSczlm8gMwm1PwtUtkVXVz8V3yC5kTgrbku72jt6rsbamGFTKS4iePufAVl7IdkaHaSrAAuFOPlKgMreXeBfuY1ZLWHFrGPKEol/tbcAOk5TI2Bz+qxtHM8xhllXsgMiurwCrVI+9vLYInbzWe0GNAPpegyYrXv6hSH1iBGJMEiPV1eT7UevGnaITJLIwQVdIa9AVaBGIilXrN0PvxbkcVFuYawom5Hzf0uwQ5b6KuKGq5SnJeQeKIzcO6dJvmYthS2vErgsVK/q8PJgdJpHqJgLkR6/F+LHMuMx/zAfCK7b5Pi/ysvEX/FGjM/8AIr2Id1pCks//ABljR0C34eiadR8Btwt9jVwCZRCk3nZFGNrCqhp9i4knSAv1GarkQM0lbBIErj6sHtqcQMMxbJVMytbvD3kkqN/2+zf5/uY1Ft+DN+EfqXLL0P8AmD3iL7S+bHbib/8ADYm5s2qwxh8GrjV0CkGtRd/N/Bg23f8AQsCntQ5MsMwa+ZzDXObLWMIWDhrw0vOcGZXhbdvHB4gaEfpOqfNKp6TcpslUhPhptBW7SQt28vhxqaF2aROjAkMo9e7tHZSLX8752H/zLeYpEgZi8UvtEsFxDKqthzhy0qNJnHrsYeTWXfroSzM9IOFdDyat584cgYEMkelJOAVAivMxDb5sc/8AKB+j+V9y6t5Lt9R8n701lLCiXwEiIkbVxuv/AGReXAbptUyiY39YCCW7xYMk4qfqeSDREvqavMXkLAXpIQ9VxoFtvSDd7OEvDBdg58laLjbcyipl+J/SqDWV5uPSG7lu3Dj6b1S310Y/+nhx8xKBV/tkgeUk/WLQuW0/tRx9Qpzc3j/YP7uNPTDNioEu6P1rlV5KLrPykJ6wagMk437gs+5i5ZaMwbup0P8ApTj7qWKrXhIpSTgw5rQ+5i35cOEXTiZcpXCmbhUtwWlyJYZ2hoRfFI6opghMi1Dh0eblDDMo5H6RQKwHyTLIub/pA4nERPg0bQEtgYa2n6+g7wtH1uy6f244OYaHShnS1rIfaWI1c9q+bAYiRuI+27aP8TZlihxIrNVhRHcmD0yG0vGuRYIHaSJEe0FWmraJG4jwuLkL+DWuKKiGk4RtMt6obrMI64oE4K21CM2hX1Ej1LcpnivggPT/AO42BPUrMXE9TILB3beGbuLf5JBdX74hgqN/SaWTUgfhp0y/7tgTVu/4CbhVi+zCmh3WeNI0g+dXDWn9Qz4VlMPWH4lDZtIasPFhZyC0D/W//ksFTtADblpH7B2Sn/gL4FuY0k2kY9qDMyIQeR7fcNp71V1fuW4Kuf4+k8tmIbbilA+4vhnb+ZU1PKspVAgA07MGqFv8EK/hxaOziwBvWlOnZao4g5NUrfYQxXamSP6IywX/APqZXd7qGLtkagbPMCBZn9o3hJgPmSH93DuPZklwb0D+10vbnVLAdtpxEeHLy7FcClmzNKSUBc0iLinbobVeg11S2+4qOC52rhAM8pAy5TjY/d4QsV/dwJ2N6qiN7nV5LLv97GBrSg6QroFD6oV9MaOUBTs70QsIWgbOCO3w70MD5qwBunUjYv8AB2ph/wB6HF0o0g/raqFu5eAhx/2WIF1YkpVhkBFfxAbR/wCkCWGDA6W/CKzZFqc8RJfs9pGNWyqx9cW1/wBueKBUzX+3yqm3615IF/rSL8WCH2e//SN4X5P/AFQ1/wBueKJVoB+cuY9G7vX8gH3i/Dh9RjtQL28lgntcMj/O8mFhWq0/GHt6diWNhdurbVVK8wiaUnuH22eMv9qxk5Szijw5hVpyK3e4ONQdvT/0io/pI0pg/nY4ovPqCRVoL3SKzWJASeiXX7WFnwm8RRvPu0kgSAVenaPVzgV927zYYoqmrvEy1OTdiScCCTMn6oCRGNhEQJEKW0dpX9Hlxk2iga1TqYt4YHAuDsSJwkFlxNSSV5OXZ93qxorKBIG/ZjzZu0BTJVLckFo8yWM5tSROPdIpaSSmgFwqkNg7SsO8x8fIV+3GociaiXpXIfMqYjWMXKDGv0iVYSKFyCvKJiVtv4sXkUCEvF9WKVv+q+b9aB2UzLQzkocyC4TqBkX+tHFDq6nAlK0GKDuhlZQ2qq9vKBq2341BRHaAXqSt4GBb5OZdsFnrwAFdKNU1UOq8eXw+LFQlu1S9YL8UWRmWaqjdxuUGOIVdvUJXc3Ni9opFJL+kwU92sWiMbmFCxutco3p+PapXcxW3jfgDIoXfWUjZktbcYkgF/wB75cH7taE5LMhjxrkRU9VtNXQARSs1Vf0R3X/HgFt2euonaDYtUAG1S3VL+nixU+czJMaX1QrX/YwSbt8pK74fQ/jCpd0Fv+ChjEjyNNwsiYntSECt6vixtvshOHbLKKuXzZBm4VScGqCS4d0qHCgVpWeLAqR7QEEqs3YD2fKEFMyFL+LkX4MIbrkQZzHI7vrX2mN0KhyA937KGvaWSW/PlViImG9w0O67/oSGCJURPP6yGPBq5VuOWBqZatvda6+z2fLi0Zh58KwVeTsK6yaoKQXYPCbk6WbkRL+Ai/seG3Fnm84ZOGyIja1HLCi1UXrpJVKO4UuFSM1Vx5bubbdd5jxXQ4Ux1L0XOUuXFecN3Ib0d3mWPGrU2uS9ZNj+09bQX/2Vie7Ht5dqCi9VFPnkLCtIf/VzrBfDtHyy9FzVQ/mfy202T+Pbk2KOVsV1Rclee7o0vnxI5DZ9zOYWb0PAoZVZdwiiqDpUZBlEqC6StQItpavVy+9hhRtBIdSqfeOJCQKk9pZdyHaArbSWEb3TcO9ttH+Dmv72Be4sJb+LCgNypAKdg2nt6sGDtG8MGe9bG6AiE3TQrRIP+YNd1vP04FryxBFRb61ptFVd14lsu5rev3ebB9T6wkTR+qFaFq9QlexzCehIt/onvRuHy+k/BgKZQxwesMxObvaDmOYPEKRdfmxolrmDJ5c9mWnaiYwMFNt1pNdA28uj6VB3XlcHw+HFUo3tNz0+FZEllVl63KCp85EPSnHF9Z71ITSPdy2l8uENS2J1IukUYiPKvjb5g2QAPN3kMcgWADmtDuXTgiU4+H2ql5ixMdoNI3WclYBopEKUjaOogXJw6XIV1nu4v2UvaGma3r+Mgxyzy9jVnDhokThtElrpGYkVwlq9FuBzn4kf55KyWVc2qBJAZbQEPsEvHg+2kIU0WylqXsTM6mRjHSh61I0mqyLpFAkzvIRJIRuPb/Ty4yTnJ/6bTx2Wibg7BLd142ETVZq4UtBIlO9ICJdAtXy+fGP86FQVrycNJEkhNwFo8tuwfZxp7IXakgrr6oVrym12YxMaBrc7JolbcY6R6Q8p2+Xx45dM+8I3Swk3NVUde20bNW2++7l8eJSNvVjW/fWikkB2lYPIHJgn5E5OQuca0vFVLNScaTBsC6DliukKu8j5rgMOXltxgwEqh+IrpT9UFFTZru0VlrNsm0W1bmqaEm3SYSRK2ndvPQ23Xcw7C+DAFy/cf25MwBESFJJ2rt6rUFcbc7Z2R9PZLQNK02vVjyUUmxlrZJ8gCrhAEjZkCRaVt/MV5W9IcnVjynaXjYSpU5c6qZkiCThIhFq4Et6RCPT4ixsre3lNQNciutzbqKxx3vL9yVVRVrQjstTCNlbRL/qC+NJZY2NcradsRtI0ldXZzHqq7Cv2H/v4znQ8Szo+YUlXFSM10wZPUBTQSX1b1WqqQdPjLGy6Z9OVDrIiiUqMYyyFTC2R9arLKq8Mp6bVRcCImRAPe+EcBX0OwTnhStEq7COrT96tGRdXwtF5hx9W1I5W9XNEnQkuj3n2qQW7Q/oOOf6oHnTlVW+SLeEpElCkFZ5o4K5np6qSSS/V12XcuB0Qgu1J4ksQrA3MiHS5e66hDfd5cDftQA/Z0SxbLmkSZyQF79iv9P8Adwosz5dZFjlIk+4utTDtI9XEWoRWbWbM5eSRYILJIE4VtElDtC/oxHleKhXBuv3iXjx0oWOnbg3DgliERI+a3qPrL3ub3sdMEVwRc3XDvx4fmx63bjm0/wDlx9X0FLU7DOagnI+Ba2ipJvEmAEQbL1S2Y+k3YTzxy0yvyVbU3M+h0nIetnu5q2EhILxHmux8z2Mo5jlk3LByTZZu4SdJEPOJhdYfzY01kDMo/QEkV1u8N+4MiLzkl/S4eXGe4iImmBd9pbTg2jbuFb1Zzuo553VZF5kZpyVTU08/guSQb7itFUrBtLbd7W7AazoV1cv3BgCVxvGpW3Df/GB5cXpbhlSFsroCKV/MkAhefhw4zKSydV7Oswcy/fqVuEi39W6ZKkmPp4hC3bycmp58YqjPNrBP2l167wobUTQ92KzDmIq5XcIoqn/gqQf6ocRrFIynODSMbVUmQnd/JJF+HF6qRhQ0ksK305YqiaQDp6S49H8lh5Tb/L2LRTNWeilXBoNwcDYYmJg3EetLoPGuGQNbVywX2pbkUZCxr2nc3HJHaSUkyuTVXFID+357/ZxJvkGxPi3jat3Rq8u/duu5LvNiy5C5VvO0Rnnm1XtP1NFp0+T1ppajMl1VwVFUkj6OQkjH3vLiwZx5WPMpKg9EOUi0lBcs27w1+FBLYSqokNpkXh+fGbvDBYv5vLpXQOGLmwVMNHLVq+tDqLXNB0ij3pb+6tVH7gW/0DAXr5Vta4bABagGG4bLS9rBm1WaSY3XDpFcJEQkY8vUGzARrqwWayzIyXbnZ348o+UsetHrUxvWwVrbstv2DXJyJB4bVyWq9E23GWuCPiC3WYJksDN+WsEqxQRAbyQcr970/pbtmBz2V3jlnknFuR1RT+u2KIJGRD3pfsiDBcaybxJB0aU9IrppFZ/FUh+ItDGduAkVS54iVDGhrSr1REa8f9nmfjkhUduXTd6CSQ8xnu28xYxTlHklnNFw+bST/LqeaKS1DOGEcmugQ67jXS2h57bixt6H9Czzs9VL6FXhERsn3eknb0l5R9nHzvyTSP6G5wmYaRDQKoCXLzroY1tCQtNsj7P34rHvCRPveJXzsx5M5wUu1zUSqbLeej1Jag5BqyFy1MeKcHyJD5sVXI3I/OKDzOJ/L5WVOxZhTk6BOXbAkgJwccuIBefjvsw37JrX+Cc6Nf7RLLmQ5Su5xwPezKzAM3Na9XuqcqMyuu/99brGiYYF10XO6g3HCESFWzsp5E530v2gqDmKoyoqyPi2UoBqu3MaqKSAAgqO4rdnNjXVbHFM8yJxy9fxguj0kkknLXVV5FeUrh+HGGexPGmXaKodaRklUiCUDhUiP7fulb/g/HjamY3GK5rSTNm21VD0rNzLzf8AON/wYqvzQu00R7yOsOmpl7K5RDQeLLIcGSgJAWkUMqQ+Ldu34t0K8kamyhzYimEUS7ooZwk3bR8aqJqkaStoiNxapexgUrMJhJ48Rm36CSiQ3KocYzIPJyD/AE68X6mwP8z2ciKrNsl/a+4HUT0ri7lXm0sZi2U2VVCJLRXop0ZEsyZLZQZtRuaSLyUynq9ozOJmkjXcQLoBvOJeAI3mPMRkIj5iw27PmUubMDnHQb+ayurNs1aTLI1XLmn3SSSQAXOZmNgYb9n9BZLOBibpyvd6rm9qivhiXRB827EL2aeMHPjL+54qqJzjLuyVu6xxrCYGoiSxWYQp5lbkvm+yzWpB49yjrVBm2qWMVcLr0+6FJJEHSRGd9tllm7FRzcyPzpe5sVs/YZM1svHuKok1W7tKnHRN1W5PSIFRLSs0rLd2H2U8pJfncolE5JySa1URgmJOC/56lgc5iPZX86FXAD94KYVRJh/GC/50WIi20A/KXiI19Hu1ElJL1tEhG8SRcO4G5Jqq56h8HJgSqRE8uRH9IZxsIFq2oMLQv29JjfgqdqhA1cwIVEXiTbunZXKOhQA9wjbdqpfiwIW8Q2MXHBwjGQbpH9acoP264JHbyfxr+YOFV0KFSUVsbR8EbRQyIauUs6YVb1l+Rqq3caTReNVbH1ePk9jGG60ybzdKsZpZLKKtlRVfuzFz9HnlhAS5WW91jb2QSQNc5YRFvDtUhMHFyiCqRFyFuuBU7/exgfMaerMcxqm4WoZNNMJZ6Fov1REQFcvNj1HEmtXeSq7/AAnT3UVM3sssy5LtAVVJN8tKsVZq1Qqq3XShHRJEHEc4FpWWY67VGWWZEz2nq2fxeXtRuYt2/b6TttELqpGHCoDeJgNh8pe/it5pVbUiXaSrCN+kkm1RCqFRSTF6qI2cR0hyYtnaknKhZ9o6umEdUMqgi0eNBFNB4qkA/UkPAWGbjYgLku8lTRFIU6zdy3rtWapXgqAqVXSoOnW6qqESuVppMEgMDsHmDwY0Q6i5iN7HNJxrhg5bSSQgGg7SNJUT9ZCQXCe8P52Mr5+VvVsC+oUI2bffXaFglVfrqo7+CS3bCHdjSjVd/Odh+lXMo5Jy4dgeqouRkd/rHr3X/Nj422Ik877Kk0RG42Jd5VNaRrb6PqMyOQQWCwtPiBS6/wCS5fnvxyo9mEmawSzaTLce7iCI+rmsS+7iJasJIYEVkqYj1W4B9oTVW1Xvf+te7d7uGrgwZorG4pgRK7p4hJIebl+tFZhCU1uGorK9aE5EkwvIRv3loEPzY1Rl1wA5bwf1yKLSiQMklXCQlyjsIbrwK/GUaqv1B1QG4yOwr0i+5v8AixrygVX6uXtKolMS+mrFgAaCAkABaOwfqZ2e9j130MNyUbV69xT1N8A6qCDWagxu9aNyK09U/tR6bv8AdwJ+28u2b9pCqtU/tUo8Ob9gODFFj/bBDonJSH1eRZEGukIkXej+wH5MD/ti5XylUdoWopVrmLlzGomLICaTNQpNHQlw6XOkY7MUWprrAkPhS7iQ8p1svZQXylQA8zKPBUyL+Ho8rhDZ9uOLl2zI27tFVYYh3lzLveW36qlhxlrkjMMsxqVkkszssnLVpMsnBJtqvaqqkAKjsEesvLi/dqzK1/UedFSTDCucuWfFi0IW0vVTJm4H6qlzIKkJh72HWQ+NNp7yzAuiTutZBmgb/WDJYdbSPaJXY+h2dSGrl7RKInbecZzNSX/9Vl0hjGsh2fp41CJWv8rd9/LXMWP318bSz0jXI0LRLAXLYlAdRiRKi4S0isjleUjKwx282PEJDQuSR1sIevNqgtWsqBd1xKpXK2CnBuEvjK7f7lt2J6DB+llLnWEi5XK+kDMbkCS/RK+MsVVSLknSZI3x/wBXMwVUTXaiPP1lr7Pdxb6AgXEvl3mzAs/V7FSQpfhUlXL9uLcLwOzVVFUgDmHcVuM5bCI6ltbW7jChcXz2494k4vQWK3w82ClkC8W9bZiLL2bMt6j3f+y45ddmzMJUSMKqy1ErrtteRP8A5+LpkjkBmLDSlaespuhV05WhZ2NSFpWUWuQqqtSALrF9g7ebkHrxuKFrVqXOXzmsuqSRlvvuvHls2YOHYXDiO0FG3W74uVA/Y4NXEOj2Rs1BTvarUKvYNwkNeQxF/wC5WC52Qez7mXQOeEbUlRhTXApR0gKpNKqi3yt5tSELUm65KnzdIYeCSXxRArxu8dZmPmzNy5SRBhHkaaYHbsS2brSw4/hUEVNdnKkmqkF4qOkCu6tvdeXHOYDJ4WZUtoM49UTYRg3LpFqj3RdYLjZiNKIcoNx4qKj0077ElRSJUi5dn2+/HMrhrqSXVbZ8DbUL2mG6L/s95WuUgV0/Xc6ACodx8w9Xu4yXDtTJ1uAi/DjcmbWXlYZidnSgUaNh2jxZlLSrhUVH6DMBA1bQ/jC4/fLGeY3s05xt1i/tVbcp/wDr6NLf/p8b+0EPUW1zS76K5zxJu4Z6vZ3TRFG4UswTu/8AlbiPmJRY2bxFgYpDw6t9oeTBkY5D5o/mLdQJ02gL4604wE/WzL7I2BDddr2c/nxS1uz1nAk1cAdEq3GkY90/al0eRUsHoEFojsisg/NrNGr3omrCOPkLAniy0lJAFYpO31k73C9SSu79XxpfLdg7dmWkqqpLL2UbVRFKsS/gcAFUgK6wSv5CLrwCWK62o+RQZqqqetndxFHPC2cUr1AVh+wHNjI8QbBWw4W3OJw8nAl2aYSgJKkG25eRQVIQD2xHGZU1IQswmfHttdmk4BVUWS+7aW7cAl0eTbjSxGDLeq2fCIWXChHOkgIPF1Yzy1mZKNrxi/i7ieA4BVISaiRr2KiQJD3XNt8GFtoLtCTy7+oFaco2raDi559QzWNYuVG9l/Gwjpd6u3cWke5K3aG7nDzYr8kybUfVjrgwF5GuyNJImjgbLD3AkRBzhYQ3jZu8YW4piNTTFYZxzatPoFSaiMM3F031VSHaqV9pAJFzq+ztxc0ajubow8yC6TdulqhJKMvWDglSS5rjETSE923pwzdCGlJmtavwpbSLzbbcRbpgsbojX3D02+PD5w6MSUDcJJc92JvLmL+k67p4rtQZq6QF4lcfnnFwqZonyXUpQTD0ZfVIsLECRIONvtG3cIebEnB5eNoRdRaRLiXR9S1tqfs+EsFhBscY3WdqOFCFISuuLEOs1SfKIrOmwkmY6oj+LCDz8+7pHSKHzZblXFmCxCIbRTAdg2biPFKqB+/UUFs1Akx6i8WCuTDVIemwsV+eg2ypDpAWsAlZs2lj1BXCDmpEtRQ1aMjFZFYXKvjtu5sWiDfVPCKWR0w5QZq96aAqlaWFWtPWuxNfu1dPaPTj0tIt1C9XR3otcfZEQ4dYV7uJ9gSvJtp3SQrvQfunRHxi5LK7z70sViXcuwkSbF3al21QunE9A8Q3NRw6W00kh70sVyYdLT0woaQEmJleJeTE6bAsXCltFTcYGOlSU/2h83aMRZtY6hqal48kABJ2TB0qqRh+tsKwCxRZLtl14qJNpTK7L4S5SFzFr/jVxf2hxzw0o8i+rcp+bAOzmoN40mJCrYZ+RMzIBVSEbjS83s46nwzxMNY6NvqxEdO7vLnN74f6nKppv/qo2oM2FqofDML09S8eRjubRALtg+EyLd7OKzJVRDuiJyrCLoKKpGBFYJAXnxX0UjIhvfoWmfMQEWOVmQCmtruREgG5W1K75bfmxvWrZTNO5jQxJZ9y61LrGQ4Uh9r89KeN5Fs/p9rJJIkqSq6rcUNo26QjYfv3fLiao+spijauh6wp9+1Yy0EubhrqpaoirYQ7hts8WKuxi3jKjYV+azbh5NV2q1V0tl4K2mPLzbQ+MOXCw620wBtdv5RP7luGCXb1ooe29nS3uWe/Rdz1gXqHm3eQsOv6+bNRLfwdHXH+jUhFRt93XxnNbamP2Wpb0tzG38GFHjW4bEDSX6hVSSIffwLkApxWih7dGcA/a09RJDdbthnX/n4eD26810hEypuibT33cA4t/wDcrGaU0tBSx0Gkpfyqsix4uAFMkQBBMTLl0j/dx9yhXyILUSP9UCzUFQeFpKjuXaRMnG7/AF+KDnh2oKtz2awcdUsPEMShFXBJFHpElqmqKQ9ZF4cB0Y41R7hmO87bRvLHhsEUwcIq6m9UiFIiLfb5t+JxUcoB1JZ5KBFtU3KtyYuFUkhG7fvO3E4QALgmdmvpEfeXpDd0+IfmxT6gSRkii2e5JZWUb2iSVuy8RxeHyTZvIKAkDwSSVPVIkDEhPcPmxU4MBFWta1rX+p5Ai4zWklUr+6hPRzdO8BxpvtwN/Q87LVettHU9KrNIRG39uGMzf1O1UCzNngvItKEDmE7vtR8Y42DV+YVLT8o+y6gkoWpJ+KJJSUh3rnSFIFROw1e6Pw+HCc7i3SUlQZFt/DBCVQl1xsu6sq0nTjl/RNHvEqJl5CylacscoXWKmCG/kHotwaYmhZaQPJGYTiF2LWm0ZIX7ZW4iQA2SgJXe/bimLZuU/DozEVVMFlzl61hQtS9C7BV4Jd6SXdd0kJWmHQJdOKAt2pMs0FBVZV9OVLPopKiwSoukVUkAVttDXASS4hLr0iOzGWo38XXHMoZS/Px9CYvCePRyqqdpFu8Sr7Op4e1uqhSXvd0X4hxX2bVEXkGbNFIbIRp0+1iq192iVsxWtYRLyK0BVVbtXDmWSFjKcQ150jQS1QtHdYN423HiwRcyiTpmaSyRcPDNL938rjZNgeVrQ7m5RfZ9V/tLkP8A4suD+RLBMdONIdbAh7Pr0EqLkN4jZKK7b/2SWLtJVAiIqBrDs82DS3qA7UL+1cK0llqKIXWhKNyIb+cNJUvv2/DjOdLw7Fg+azcplq7fN0gHdolYR9JebB8z+kjeUKSKTkbgM1R6t4BsxnOP7T2ZkQzQYMfVem3Gz0ajACxax1sg9zYD8pQPqwfCUeqZX4yWdPwRVTbhwhCJJaVvdOunFyW5R8mBrk/mpVGZUJKPqm9LJMo9+3FDh2+ldekrfd8IYIybxEx6bQ8+DmcHcB6H9yAfypdntSzwgXpMgV8apfKljqFdAgxTRAB2bMIvlQKJUBC3YKu34cJsUjFuN1v7uPDuUORTHFAfix1r3coYZiG7fy46cGCCZASwobTK6/lxeqlV87NH80bq/aR1LFB/qH2MttYiLZqLOXTkVRV1e7UK3f0Y0JmhJf8AAixWdaq6jioGTgyVO67uHny7sDCr81aDXBxTjDLRoKyqGklIpvQK3z26H4sCGTuJxbGSPaygbk4SrlLs/wC2BGYsEm8O/bmZbP1vL71uPorJLNnvYGpN63tQ9EhVzUkhU6SOUIRLZ4eb3cfOjLquqShHjqNqOkzmXDv0C2ZKcQI8MRFzcvmHl8OPo5LR2l2Dsq29o2nNsnVvsqrr/hwruwlnjMURQEGQMSROobMKmHvatrBCoH7SNcNKVikyJyqCQKkqg2VK0jLwn97Bbf1VRT4X1bcZFOZRqSrNMhmxG5JBwSQ7ei4d3vY+c3aYmQge0FW0w3YCKzdKHZna4tVL+Dmu60xIOnFHWq2VQj49gqiKozBXDcqkVt6vV3HtYAYomhl7SJcZJ2JL6vSUHl44cxLZwybPBS7jup3+4CVyoEW4b9+K1LZVZR1Ks6B7QCjz0wi5oNbZ3lMkEldX7cfEI+7j5nLVo/XlHyIGldFaqqpXJWFZt29xjyeYcq1jVJi/6u+fmkI3BdeCSQ7uXDBoRDb9nBUFSuL6DnFxTc8vG0XFepRaVRHq8IToVzIFV7rbgVPYNw2buRLAb7WlYRUD2iXCLp+ggsC0a/K4S3ACA2hy+18eBZ2b6rWdZ9Zf026AScBLJKkpYXICBFzXfgw67cCDN/2ppZtJG6G9hH8PoAG49Idu7AdWIullIqhlTvz9n719I6qphzVdHIxSTxNm6evmhqqc1tioq2/Lgcrdm9w7lnTBWp0BFXiHgjwWwBcBpWc27lxfUwmGLVicc4FdNWRSIrQ6rfNh8LiqfRVigWKWjHB0ftSwdRsMVDDZEKTk660RC2Sgqhy1KqsqkqZXmyQUiFTEXIoXX8OSqRbLurdgUVx2c2bMYuKVrN9rVBbGmuLUbxPSVXvK8v1SSo/AODMLypkqTmDEFLeIk7Nv/SlcVuvJFy6lKDN0YkRz1l1v/wAK32GrbbQ7VTgTneUXRUSjRtGVRRkc5J0jTlJsWrVUgtJUAQcjd7xpEdvmx884fMOlWctH3vF3yMO/aP8ATbBbd3qSRJbxsMj7rybTx9D/AEqknEZouRuuCn0h2/yTr97Hyyp+LWQp9vJJAIyjtXhWRaqpHffcHsDeOM5WNtVD5ZqfW4iATivrJVVOBmeknSb9SQjCpt6D1JRNLU1yIC0t3Tbd8Q4rUD2fIeNVi6yKr5MlkvQaaQqtxEtJXYN423dfu34xg17SOZcNOSTmrZgUlj4cw0n70W9gAW0bFR3buUsKRfaCzRcQMeC794g3BBo3SSSkXg2ABj3pd7zHaPs4tbrBaVBUDpaQW25nJSkyuptxUc8t6zA11RRSDcKVuuXL1mY/GWKkpRsPRcPNNqekpV8s3datsgJiRqgG8LtIQDuit9sjxkOH7Seak3VQs3kw8/gTi0tQZR19av0C73vb9lg+1hrmNn7VSVMyTl0wQcuJB7pCuT9xcgZ9fV4MFjcJllFzKoKF0O1WwqmeIx3Z/pFnYRKHly7IR/zTMfx4zb2m2Jtu1HDudpC9ZmW39F/BaG0vNt83PjRGYAglknRpkG4Mt3HzjHYAPakE/wCuVgAIBtVH0q7S37YdLy4QXv1Dke6X2cU84U+HM+L7xVbUV5bNcf6e1gp9m4zLN6nTvIu8P7h4GCggqiNqNxaobiwR+z+y/wCE6nLgXEQeJGemqVl/tfDjllsONS34hXc+If8ATKnwl9lafoiCfsZ2c08wo94idROFRbJulVTSAyV7oruQhIuTk2Yg6wga8+i9aNo3M1izfHEfUlxliQFqr+tIv0XtYfy/Z7rYqnlqjpTOD1R61fm/0Po8g50jLpvMr7cVmT7K2akq0mGL/PhBy1nW/CvROlEBuS8IEK+zHZBMglISX5pwfAvfJZty7pHthMKuRKU7QDGoY0lQ7tOu2q+ywr9pldz240DXKGeQjOHCSqpXsEuFtfs1e9veX85F4kMDKH/qa9R0dPN6korM6GF40XB0kk9hj0tUfFYr+DEzVnZW7U8l6HioVVlgrxTXhSHSeobB1fKX688PaGraBrUqHsZkqfm19KigaHWrXV9deqXYurhFItjxez7K0OW3A9YkAvCMw3dJCf7hYIGYVA1hlvRtB0xVr9m5lm7OQ1eCvVQC90R90RiJ27+rFDj0DHU1wEfMSp7vjxxziUv8zcL8+8v0Hwf/AKMz8r68VqnNz8+KgU/I5Zorvmq8Az9CrYWDBcRV3XH9YG/weXHWTrrPRWIqr6b0sLZYTj+D1YRBPXuXLVLuhHVsCzmwhm7kHWmc1PUZKUwMCjwsGzEl3rlVJf0bbrAsAtpXD8OKzQuQfaPy0hZCDhhpl43kl26pko6XIw0i2CJbcbtlwgxEjl+cFwzEwxHEdKqslVGejDN6qGxdn6k1YNJ6qKT5eiD4h+lcNl6oHYZdV3lwSnlR1ITH67k/TlvrI0tsQqlsFUu92F5bsCZ92Vu0qlXUhmCzeaqz11xQsUKlVZoJHfdaO4tnTb5sTsoy7ZjVqozQy0k9TXNUF2Nb9F3KOHdM+2ZbkI4q7JTzaepPMJmllqxppw0VgnBLNNcSeXuniVvekQbN57LftcD1mqZ22AVuzq/nYIwq56r5a1ZG5q0lOR5NVWTg30zPG8SdBxWxJBK0rCDr8WBq1VASR4oErT0rt934cYDjXXXD4fvxXZfJ7/ppeL7sFpBhKRcd2VXpzdIhUbAJh0C7ApI2h6XCmRkKgXFdZdtwSykaNJm3A6ZfCIShgOkvcF/FLjzGPXaez3MDvLWTqqO7PThzSqr4XiNTFcMbGg+VUSFsJGlpmNu/lu6bsSxdoqXax6LaTy0zA1gcJERLUmNlmuRH1+DDuhdE6ZsZco8q5ve2/wDMKjo/3CWZO1cWRv0mj/phTeYOorGqkl6rVYEApX7zIFRHBSov80vGU6s3+meoqubhJNzHNSuMhuO6xUfF0Yp2euadcTsm3k6ZyfpaTZpMFdcqiotBdcTH9EBc1p47he1PluyWhUagpimmKzcD4ohi3SGgelbtEPhxoreQmOkkpeFStJReVaucWWD+Oq2aTfIy3pNmg5gwEXRkDobCVFUrerd5cQE0IDIPLVrrFTv3+bw46oDPXKmqM1cs4qJy3hRklp9JJJRB+/E2Jnq96IqlYfNy+fCMsuHrZ8ZgI/WFR5i8ZeXGM472M/KXSPJn8IqPk/8AJMZBUyjXm8rQQVIxKzw4CtJgZQ8fvEdVIC3bTHBuUS126yK4CQqiYXDu2WYCdFqmUUxttIdLx2778JeGPVOD4VpON/0JeJFLLswXq6BArSskmlwld+tHmx9OJog4WP8AY/dx8w8v1dKtIMxO6yXZbtv60fjx9IqicTXoRjyp5/ECoaQ66b98SFu0bbRASxqqba8Hsj9a5RetzJ+JUPMRVEZBxv6A68X+hjDjZc7xtvMv9UhinTrbNN+RKx1YUqz2iNvrC/f7yGLFSHpqH0guFU1FG8bpHpcBI6iXTaZbA333eLDi36HRJIH8cMQQ1ZukSbo7x5Q6sNydIjUVPpbbjmWX+3HFlWj82WDUTf1zTqSYhaahPxEP9kOIFVOvPRKx7lzmtSYxiTxuq6H1yOrw4KiaoD3XNbdg6mFVkMyWUu1AgiOfFUAfMqbLo8DND93A3b3pKJgawlv8HmwTO00kirnpUCyTkbtKPtIt131NLfd14GqetcIOER2F07sZu4escW0t/qm19PiL/gTlT6vo2t/7i4DOYz9El4tmSyf/ABewQuu/Zir+HBpZA9d5V+lvGyqMdJOIcUmblZW1IHBId16S8t3lxS5iLzheyBHDV7Sotfyt7UiejdtbiKv6AuZW4vZwe2XYM+FZUTwB0/EhdV0ki/cLWLCQt5mHS/8AmWS/4sGjtFOAQy4i7rRumQD/AFS+K67p7PdYHWlWtN3KyLddC12ntaCy0lQ+w5icbvZ6ujFxr6OrGQg2aNA1rHtpIHlzkpF6NppWFsHuld24enDK3v5UpKmpxAyFZMqBUF6fUbJLDc7jjSHf4uFHF8ynXbK5yMQbmJfwDMFaPtJYvJwfaHQJus6zQo3REg1/rgjdvSvt+q+AS+PCVKxebTGqkZCt8zqYeQfAOEFWjKWElVXZmOlb3A/terrw8CpExQWXEll3tcaKWdzw1bt8NH2btnMvgUsRWN4iZ2bB5R3EWDB2vGZuM8Ockr6cZHy/tXWBPGtUUHF4gIlaF1x3YxNd6wlu7f6gV9DaTcA37LdFKq7RCPiub3MMm79FcqqsMd6rsPnSxIUIEq77OdKJU1Pso6YViW/CqunOklZcN3SXT5MLREbm4mjKesa0ptdRwZkzFGQuFLltEu49r4sHtlob8IrNFjAnA9olE9nJ2Dmo3npAx/sRDcdv8uWKTUiqJ5rSQX8stICXwK4K+W8PmLHyK/5xa1i3jUkABuLJ/cWrdvu7pLoxFv6Tzy9NVPJFhmHCeiFJdwq3QVdFqikd1gF3Hs9eHdK5CKBcHWSwB2oCRd5pQN32Z0zHnd7AFjRXb4O2oqJ8Nsx03f8AMcTGYlB9qWXlGbmnO0HRUYzSYA3dIKyhXKuA5z/iZYg+20qwdOqHWav+MbmExavq6t38T6sV3cpMEi7UMakVl1Ne3ZZd7OHzh0bPhzPhiRV501Ttv2pEF2E2+skNm0hDxebbjmS1rlASWtatBDaSu280h8peXGSb3LVObUisPD28ObkUzANIkrFQsMSsAvL0mONN5IRbmb7PGasVHNhVcOHDcATJUUgPcNm4ysAffxmZNINNZYXjZAm4gF13Kfms/cxpfLYeF7LObSaool6NdIx9KA27CJLaXTdtLBRazj4vs4pc/wCq+b9pVbK3K/M6IzYpt5L02z4VJ/eSiUowVMQsLwK34FdUZRZwDKOAYUwKrMrwIikWH/m4mMqXEaWcFBhFvFCUORNVVJW3VHuisuxW6gSoCbo+UlVYqTjJhukrpCLwF0rwItxX2mF/48Xi5lEKVxM0du2QZ/nSYgNySwQjcuZLn3bd/VgFx6qzoUz1iuvSMRIULC9r4cHztgWL5mNQ1kEv4DaBcoNvOZdXOGAmzhnkiKfctEluIBIkCsK72TC3d8WKn9ya0fqBWvOx+zc+jKOvEtEyUVWVBK70iN/1UfdwByySr/jGbz6PJpCBpH/xsz6Lf2+ND9lRB0lk/Wor23F6Vbbf+qjjLTVk84xNz3iqbc0usvFjI8QQAaeXtfWrKMTzXo+z9SvGa2T1fTeaVSS8XHxxNXciqslqTkcmRBt6TXuDF/q7LqqZLsuxdLIR7QpJJdIST9bMxEbFXO7VNXSPmDqwDM8if/nqq7Qckgn6yMwEfYHBYnmfrLsm06CvNxTS/dtINd5iy2ZQ1b0R5SQ7+cbberuodNcmMxAyqqiFONiUnjiTjVkhKoY62wEnN9xa9o848xePE52V8q6vpXO6DkZuPi0m6LV6GohUDB2rval+ibrkfyYqkfDIt8o6qB0AjqzMUry83dPBw+7IiQB2goM9EUyBCQ5Urf8ABVcOrfGQxVdSJxJO+1CIK561iYORFQXTRK3m/wAAQ8uBkjwySZLcSJaWraKgCKSu3ZcXRy+7gs9pVBEc7axO9oN7xveLkAt/iDXlIxwMHDW5RZbjFe9BXVESArr/AC3WH+LDCp9YSJpfVCtHPablKm7I1MxMS2RJx62VO10+QbD+l6lSEcC/LnKCvoccw9eNibndIOGrUk6kjldVXXQLf3+zYHOdoYuuZSYK9iinSC4iSnupK0v0vTgDZOpORUzaRIB0/oG7sEdv6VrjP1Ytdbl7Ir2YeWQ4d4vrRS7OeWteQWaUTI1BDxqSYvGVxITsc5LYJX7UlyL4RxG9oFdsjnHWi2sqK3rQwIrRt/i6X73Liv8AZPAPzsQ6RI6SwSUVd4h2K4smfTBg4zmrgFQK71pf9gPOTdLquwxtoiLBR7yrlKp191DvVMSG0F+ZwJ70hS6en+hjjJedw3ZlTgGe410t1tvQPTjWXBoi1Kxndq6u1XSIVT2/AX3sZLzoHSzQkGwopCPENz7rk3CJY0lm9aXhVFw2CtkNb2rVrYGr3Qc3se1hRvNotVlDauVULzPV0jVHZf14j01TNum2J4gksiIF/GiICDd5dmHiZHcLleVIRC+611dbeY7C3DjnJ7l1QR0rmXNnUDhj9I0kJImN5/wglrgkBiV5Fql9ltHxbxDDdajaSHiAGHgyvBIgtYJCaRgkIndt6+f3sKcA5VTcfXyXcWmBEqZJHfZ7PNuHyYWasJLReG6udCqlcKqQ6/h6bhv6vn8mJZ595VlRsFqJsU1Wo6kBcKIlS1Plqjs/gtIegSs5QvV6v97EkLXhW4xrfhmyLd0rpJJpDpWGqRWDZ7RezhFwQKpizcaq6JlxAELdKwUrbbRG6/Zt3Cd+FlnDwHBesma9pladqR7t39N2PpGZ7yXmmGmtQjFIk1bEostwA3Akf+GBYVgctxleHtYF/agSRGhYu3Su9YgqlahaQpWK7SLn57tvnwSCeAq1WAkeRAwt4LdyeHdf07cC3tJGiVEx9rZLUOU1SVTPbfpW8vRy4YWb4c2kvFn+kPeFZrLHJc1+63HRYnoWoAYUjU1PKmkPrUWiqVyVxkq3VutEujYZY6ia/OAjItShv0eE8d8mEsfUQv0jxqzs4jq5XjqhqpnKOyAeUiPbtEuf8GMnqf3Ma07O7DSyxTYOgQInDpVUhIi23iNnybunGZ4q+A/KW78n/wDqvySV6ktiix7kiMgVVElbTHmE+TqxyohCTcaszmRbPm6thkmoOry7gLl+PyYRfNX6ChIj3SwWWJlz2bt/N8HsHhRNvcSgWK8h2FoAXT1bvZ9r3cc+akGtdtdETGJJF1RdAayiI0TEGi3sVEtJIdXvbj6vAVoex048NF5eqkoCtDxCDhIDC5JgkVl/IVplYZBYXxYkFmpumeik2G5XdaSFtp3f0+/hu6YWp2bh/lWQkqqHKfV4zHxW4MCsd7yWeaKP/bH5qstPz7qlHck4oL0rU2lIX66UPYxus3APdF06p+zj1T1XVE4rxEy+ev1xQFPUdLgoSXNaO4tnNivJ36gojrrjeqFwiPlst8BdXmwmTh+w/jQCuICBpEql7Q8v4cUE66e4lc1R07WPSIik017SJZU1brD2ltHAdzEcWsXyxG2cls3Jjd8x78F5MkW6d4thEQG7UTP+bgH11rOIN0sqsgJAqG0b7zDDmzD2qUXzYK2l2VAbPcg4VguDzTM3d2ga4lZqkX2oKjgxNWZko4BqzXQENo3a/g8N1l2Af2V3UahknDga0YSwcbcKiCWvfrl+lMvwYNThVhGiRgaVurZoJglu5em7CGrYJ2rcj3lS1obFXPLDN/L5alnca6k01zRfLNHiCiCpeezeO/YXs4knFbZOIN1mx09FkiqhoKphD7DS8PLvHaOAFIFR8ymoDylWK6h7y14lAnBWXbgLrLzYpMxl9l7PKcNJUeNyQhaqTNIfD4FR8XXzY01JXO07Qsd1JnrI0+6Tslp5jXmQ8SLj1XS0GzF2kbV1oQJJaoeErA3jhi0rnIFBYnkdRsMgokBpaiFNKgQiQ2kGxLqAixmlbJbLq5R/9GEEm991qEWlffu2iJkXz4YusvqAZJ/UKVSJuGw7oZK4js85DZ793kwyG7ugqf8ADzXeWnEavyBZySNVRdG0+2km5dxIJUuqkqkfLsPS82APm1PQ8pWT6YaorlxCCWlqJOkrg3b+65N/UXt4pv5qqDePnAOKSEdUUldPgASAfB9kr8hYkIOGp6IdOkY2BkGJHffoMBSMdnkVs/pvsxCrrutNRNE2+2dSdkKWavYRJqSK5qs1ASO9RRw93c36U0t/vYMeQlWUNHKVlA1C/Yu+NFJNwyUauCQJItUdwqj1+Dy4GDeLeOhTNqFQ6h3mC5Jd6XN06ukf9LMRrqnKblJZR5WtHysi31zA1Ca3EICWy0jLYN9vJcfl8QNN2TuamNc11tgmlrVi6yWYqJnHULT6BJX2KIQlltwkJdHUBF8WI5qy7PcXJN5WNyypNm+aKiSDlCnwFVAx5DEwSxjUqDpJmmPqSmJdVrv+suWG+ywrLt3Nt6Qx1+bynhtcjAqlqkCQpk1PVv239Nl1nuYeDdYLPDYZ8y1w3g+zNHSSL5nlXRLZ80VBwkulTlqqSoHcBiWlzCW7HUxDdnKeW1pnLejHji+/Uc09cV5FzXW81+Met8vqSeN1DawMuLfiA1RK7n3WXEfJsu5ebrxErUHCRyijl+zeCzMDBIk13Aj0l8XL/Px987z3fcveYfaRy7UUuczOQdSRbzuUhcN1VBSEUiM7dtqqReHAlY1HDrrEDqbSQIDsMRYaol3Q2WkkgQW2dPOOEYmio3jGZxyy6DjS7rTmXSHWV/TvHzc/uYmhbv41xwHrJ8JJCFxKS7i8e6Eg6d/4sJ6x0ah0iT+hYKlYFtX/ACRrGmKfzRi0F6hFLW4ghRJmd652EXOCQX9fTbg6fRvs4K8Y5HKyk1fWZmq6U9RkRKmRbyLuvMWMfLUywkZKN9YrA84LlF3Irid+rby6VnJ04iypxg/YlDquUkibkaoE2lFRVs3EfegkJn7/AC4OoakaQYpZcKEqt2a2LKUV2XpaWXnpnKqmnUg5V4pV2rGq6qivNcRWc2OqgpnsyVRLOqhqDLynJCSfGBunLlqvqqnYI7tnhER93GPlsvGb18otGmgm3aN9UiKpngkRmdpiI6VhiAbrr/cxDrU+/QFqAyRC4MjsFSZXvs67Nu+0OrBxXMdv/VAeZiW2ZmnuzNUke3YTNBUm9bsWqLNAVm6tybdIbUgErL9oW4p2dhUTEZOqU3REbHx8TDmDhJo0ElUkkgXFVXaqPLzEeMyiwBVusCAXCqFmv9Mngkkf60u63jhutR7lBq6OUqFItVK/vaodaV9vJy+bzXeTFTlwExIVNi0E06J91STMzm01nMWtaJgHdjHMxAfNv2Xbi67MLVFByQxYhx9t52BpNYsRELS6jL+fhaBJaNu4WbirUkgExKoHH+10tns2efEbNVCYqOLJhjc7cGkGnKKq9RdVo6vy82EfhWqFZXrT7ZNEltx3jbqnz+bGwMtGR/m9p8ybLqJ+pkt2qgO/SHq1f3cZDrZUDcCd9+89xW/zsa2y1QfllvBmRpJJ+rgvJW4tmkPl+XFd01MNr1tGL7iuEOwkl6ggTQh11SbyLInCmq3IB70evXI/kwCe3gzBx2jqqeaxcseBCIdHCpYMkG3NWpIXh/VRCEoyIVFDK+w1R/ZbC2+PdgK9vRVFLtJVkC7zQE28eYDbzfVUixRaiLLKPspbxKPat+EvuVPynVR+nVGthRtE5xkJ7y/Xjtxau20yBXtJVNbtvbshP/saWKXkyRlmJSLZxaJN6gj+XzqpWYMHbIpKrVc9KsnWdNrrxZiyMnNo6WxqlfuwzbE2qYo95Zfe6KyvLNQQjyAmeqpq/a+S3H0azk25Z5fmRkluiry/+lavt4wnKUbXKEa4kl6efNmYJX7ktohbjd2egGOV9AnzFfFWb7QL+DlerBYkR0LguImh0VzZChu6dG3Wb9yqrtM7iB0QjzeAdn4cW6FSBxljnMjrJ76SMrR1duxUuscUEXSzd0icu2Q07zIhsFXeAW9dthYvVGkzdZZ5yG1bJj/aWqZWoCkf8XVLoIsZqjbhWDFbi6lOhcksE1BGrNY9QO4tNUAuHrxYOz6qsdUZhNrOTLSpRH/sRYYSQP5FBxGoMFXLrV2oJhq3ezZ1YufZ6o+eZVJWSslT0gx1aAqVK5y1VSuvjlfGONRbaiG5YOpb1IHx7A0mabYAVSJVvaRD93B+7E7VZl2mqbRVbEhfEyBiJDbeHClvHAxj6clXUmmzeM3LFMEtqi7VWwj9wcGTski//rpqVRdIkqLeIlUkl9IxuAG6uzfhlSVJvuwJAvjlCjRmMkiOaj5YpIUlPVcfakICRl3ReUsRrhfXai2N420UrDJThQuV3dXdb/gxMZiEA5rPGxvHzZY2EfuQAyAdpeAvwYh1nkkSijZutILkkYAZJCru8+/p9jGHuA+6SXTbV8EbUP2lCRV7MNBmkskoITMqFwjaP2o8u0fuYx3FofwpeTbbZ4cbG7SXGPezLQICwXElahk0u9DePVd8uMmtWXFEiALafD96Rde/8OOh2EZ0IrmV7KFwc8SLDMQLs1yAAAj/AG/NP/xc6xQRQBwJMxBLUVSVsEvIGL1CyjNLs81BxpkqIVzGctnXGvLMUFxKMNPawIVtIxuJW224MMxaQM1tzsYtQSyvluRUjShLrfewOYlq5XUkjXkiQTCZkDtFJruDil9vj/Hgkdi8wVylkjANv8Hh8DhUfw4EbV6s3kpgAWVJRKXe7fWLhC360r4BxjuIh0CtjwtrJxPnBm4EUQfr6JhdtFrffdy/zsZrfP0WFaNzeNhVscBtVG3fqjy6XJjRCa6xsScqyRe0Mo6I/nH5cZrnh0qyTWXNcVAcAKRX3CRmXnwttA9oSfXT1QouU+9Tkcx/S8VeOYhq4i26Bkm4JJuh36vdKkrcZpcpbcT1WPY2OkpY0DjGf1hVuqxj17m6ppbdcbxvtLcXP18nJizZGpPHVTQ4MGyDx47lG4OElGSTy5peOqYrnvAubaAee/BY7RfaOrXLDN6coODpFtIRzQG6qShOWqFuqkKttptSPbd4sEPPY4Y+hJZ5RQFHesMuKXqP0KqvGmg5VH+MJ7S97xYrUbQqNJsk2yHeNkr1SWHqMvFgrPkhXbld72KW8VcsVis3I9WPxZQXOoca6uZaVp6GpdjGSiRS1SFZX7MP0ZDzYRdMOKW1rBEQxOAcdLplwh6Kx/oy5cRiiukSzQWjlVRI7eW35sEtmckwB2ai9C1QQsuTxEOI1Yliu2jdt9jFpUYSJDeDdAfMRXfdxHqQTh0JA+lCHdcIthER9nqwcw8I8yKafgqfVEW7JsPq5t3l1+IRvRFroXb27Wt6tu/FmrCbbUo11n4LqFb9pdtLFcRrBtNCSMMYisrdbrbrS8pYfUZVWRJrb3k1YzSHSnTil0V2CzNA1NPnVUEeY8QTyLZxjZMAMbT5iu3Fjieq2pm5Jg5AkBSHcI8pYq4TiQulHC6ypatokn04bU1LUkPSZIkRLmVobxDVr6O5PSPp24HWblTtYCjVpRkenKE54NJIrtvURW+yOCTTTpN+HDqFcSV/uY/FM4M18vieMaViclyaGuZCtKKuVHSv8rYuI40nDVE5WV/Qf6P0+n6lnuJbgNBRxDcSwqpPG/kFnjo0FXDj2RK8vKGFnSQGosi8Dk/RiIidnvjjWyeZ1d5m1NLRWYcHlI8j3tPzC5jAMSJ0kbdgqqBapqkYcuMqi1Ax4ZJYhUu5VA9r48foCkIiHUuSyE1Gs1QCk4NHiUtO1wrpW27yXL90cTDGzTLfww8xqeIMct0lkoWLinQEKkUgaRkI817hUvuEO3yYJnZ3i2EznRR8a4RFym4eGKqaiWxUBSIt3w4rq38honO6ptDOIoeIvEtYrZFMBVI7bVR5y97YPNh6xeBcsihMNkBVAFbV3AjyDaAj7n3cfS3OOazcpzMNxTOS1IZaqRzKLavXnpqFqveKrg1RtDhyH9QWKQ3zO7XIfa5f5HGn5QkR/EWMq5xGDTmW8TYl/wD2f2RAYTGQCS+fss6YKksAv2y4nYYERCN3u+L2MRuuwNG/jEBIOTcOPoZOZ8doen/Qx9a5S5QuvWbxvHIcM8dF3qp6Q3eW7HKmdGfp3auRmUag9f8ACa/7uDG73gQ6SH539lEsPZJYBbqggsm5SPclvuS/p5sKNTeAsRiiCuy3m5TvuxsCq83sypFMm0r2YMoXu79LIqF+HApz6g4RJ1RM9F0lEU0pUtKpST1jGh3CTg11RO2/p2jhxTvG5qL7SoxMcSigrUDNgqpCvEL+OCRSAbkiG3f0lip1FW9SST508VklBUVIy1B5/i58XaWZGRRbxruGPeg6VQt5rN23bgTuL7SPRIRPxDbsw7oRE9ZIKpIgX0ZpFeApnKulZ2p6keCLinYcEhSfkK67hwzQVs8Z71cfuY9HZuazhpG5qUHRT4bDeNpiqCSeJFZsuEys5CHAiWfv/pHktT6t/DpMaPO664TM2bUrR+LGz+0RSdN06/e5ro5X0ZVM44mgi1Sn0i2JCgNlioidlthdHVjmOHD7VKR1zxcxFq2p+7cTcjTCghOuo9nQ9JxzeYbTNQ6R+uH7ZwqqK5+IVbrTHbidRfxTyPbslWaseodmqSS/MHXhOazbrGJkeAQ7POURKcoqE7c7v9VhBrnRmkvyZA5PodPerOS/DjG1FrZfGY1wDL9uKasvvtDDJL+iLbeZyuSZpxQRrO5LqJkNhe1t34j3jelXgkszARHl7gBu+ceXFPh8z85Zgb43J/Jj02c1voeFaeHS1b9oZkxUfusoMm00UlQExFu63dPjwa22OA66wf6qM3R/Ql87BXBiygWsPwyDNNJQErzUsISI7ufmHdy4fR7CFet3izyKuIEu6VT4ghv827FMiq27ST8lEkMsMmh/JtPunXP8WHpVt2omKgo/m6ycFNXbbpPBu+bBbYMF/wDyh/qqixdP9CmtYfm6g2qK1Ws48bxuS125q3eW08Q7pvRMjAtzoXIFjJ3rmHGvmCSTcrC96/3cPair3PtBZu2ksnsl3JH1KA6IB+PE3FVz2llotN2yy4yiJvqmkkmkbwbLcGMBTNausCRfxVbhvnGTf1IdUHlLVKVSyU3VEBSPq7hQNvBMoS0OKAh3EuAD07d13Pg9IZb5YrtxeOcr6dTEBvLUa8vy4pv5xO04k6URQygytNa3cXEvBu+L2sPG1adpao0EI383uTzhF2B92Tx4QhbuIStx9xInXJ41SqLGIep+kp9jljlRpqGlQ9Jubyv0+ASG3lw8YZS5aPHP/oDTlt15JjGgPzYq7eQ7SKTvSQylyd1AG24XzzpxPsZbtFAKhllNlcSgBu05R4N3+qwQwwUtVR9aocMRH1f2VIvslMqBWURSoCKG0tpC1HDGWyUyzaxbgyy6g7UkjK4WCV1lvs4avax7Q6BI+lXJPLhRVUtK36QLiQ/6rCUhV2f5o3vMgcvXNo7v7ZV93/d8HDgJlpe+tVDjiA+rWeqVauWVZM6JpKNeOUZtu9J0m2BBIkEkkiILdLkG+0ffw6eZUZHVG7mnZZZQbt8yhGiusogJE5cG1JU1T8G7FoRzdqhgp9I47IGiKffsSNvxycooqogJjaVo2CO4MVuTo+ejkVuFcsYhHMNDiFyJdLSYpauzdds7o8X3IXyIequEp0xj+lFUSDyVymbpwLp1lTHk3mJRoDVe0UjEBIhMDs5Lztwee0V6EqO7MuXkRCRwk3VqBmzRbD0pK6o7fZFXAxmn5tabh6YlDXeR8JfwpNG/8cDXIftbtg6Q/NgyROcPZbzRymo5Gt6h1W8QNvDOW7runYJEBpHYlYZACpfKWKRwqmns+qKQx/5L5UE3EBaFZD7QhM5ztNVc84O0QSZOEhLcBADVBIDL3LfnwJUeDGmXzwG2qs0XBISIOhItmN1TDD+p/wBW1fITj3NCPTm3Yik6T9bLpW6Qil9kfLyYbFkV2GV49aNQzfTbN3Cursnkr7/aMSwwGrMNwko5rSxkmyYHJU6wBEkkXaWkZXW64c15e/bhFFmzkVKgZqsyub36Q/qgV8niC3G21uzZ2MXrhq5Qz/FImQEkl/bNGjt99LHX9af2WHRPloztEK6j27VIagi1en+Sx96/7K9nNIBdkxozVztyucAJEs7kXrpVW7mtYL7flxNdq9uzmO0nXLlcrvTD+r0lRHnAOFQVAveK4fgwfcrOzVlHllX9OVzA53JypU0urw7Rd4ztU12pIFuDdyq/LhbMbsmUbmNmNPZjlnEmzUn1UlVWXpSSUSHS0ht+1Ev0XzYrKpEykpC6GbMtqP1ESMnM0/Fung+h09ZNkXjwUdl5ikNgCPn3F5cTicgSb11VGukTJ0lwySmrtCy4r/ivC3yj4sU5Okrjj+FqSGFiyEu6SVIdXbs3CrhX6EhpronMR/DqgIIJjKOhFP8A1u7EqG4OtNRyyS11hszlJWRZjLFCvKW9K2k+kNVdJUT/AFpkR+3aZEXs24qk1HP5daJeWKJfRp1x6qekf8Y0lWppF5dJVcvgLkx2nRUwio1cM5xA3ADpG5Oef3WEW4RG/Z04dStCv5Fw6L0SJki6SMF0xnngkR2W+K3lwzG8iG5slRkD3lV3bwE6AzYmybko39TrelISC3VAG6u4fKW7f72PmhlyN6d7pa4mi5pNy6LD3B7xH+DH09QysmRy3rOhym0BWn2BsGC6rpVyKCWkSQCRHu2eXGaYDsA1/DxYxyuYcC4LfuBBcfd2jhdU1IuyIeZMqEwaPUSylWki/WjyD7ROQeNBSt6gut++JYsnrbQRRZmiQppWJXWcukY3l79o/HjQ0h2AMzn7hq5Cr6cJFJXVJMgX57CHw+M7scuuwbmsIkCU9TiixJWAWq42/LijNGIyTLrTUi1LMtBvf4YlnhGQkb96kJF7aQ/gH58I5iD6xp9FHjEhTVeG6MiC21IALf8Ad9/2saSY9gjNyLT0fX1POUVQDVEVTE7x592lyliNmv6n7nHJRsgiElTyrx6YWqKvVREUg6fssWjUtZ+Yok+1lRktAZsfVci6fchyt8ud3vHHYAfatI/R2kaSPpNIT/8AmSI41HnlSBtOz09J0ShPIWlkos0UOQj1W1x+yJJfDjL3atAku03RjMjtU4MT/wDmZb+HELi5Kmc8JfZJfeGMfd7Pi+8VBkkarcTSREiAt+zDiCUlIOoWVSw867i5GKAyQUbW8xhbuExID2YcJq2okG3yjbjlYzQWU0tISPcIkXLjkrDptFmtFqX6IqmGqhomnRkJK+tc+c/fT6dua6tvP3kOzUL/AGWHzPtH9oBrcB1/COi6SXp1IfuqjgZC6c7t6QldzD04cCuaqffgqqR+H8W0sOx4guH+4sy7wjZz/wD44outu1Ln82H6zI0W4EOcVIJcS+IXn4MK/wBd5ngkoQFTdDvB6hHjED+8WA7q94miJkOzcKpgJ3+zaOOSPapyiIdWzb82CP8AEtwD9Ig/8DWV39CrNm1m1IZoFGHP08wjHTMTEOFVIrrrea7A0lWb58wUaRUuMS5OweIFIVzH3bhxY1DO29U0vLz+XzYZiayRbjEi6bUi3/NhU9Xu1NR1pzctHR2pihpxpWB0o3Q/azzYiGDSOCFo92i1QBIe6cNrgEbf1p4nWnbUzAH0XvsuKaIfLUC6X/gFjOiLrvL7LS5doFZhYXW7cHOXtfz8N2uJ7iI7vorOOcC2VzVgz9LFagZ9syYMR4zLNkkXVw0/q/fbDh6n20oof45lrNiPiQWSL79uMnKOjEbx17gLltDb8Y4URv1BNcxtPYI37cW/4quAc30UMXk7spbW/pEj3ml2iqTzBoyUiG1Ly0Q4daVpOVGtuwhLoVu6cZ+RV0ltnDWmQWkI+15sOC+sKEF6QkG20rt2ORYNusytMvs+YR8uF9wurtwdzHU+stgYsjBMU21G/s29ommcvqKexFaQcsxfuZRVwItEOJS0iTTECuAvLgxNu1llM4/ulUCQ+an3R/cAsYwTBFJMW2jtDw/7uPCqiNwAtzn+ksLDVjip1poWxbGIrNV/k7oax8qknCkS2qPatyEK416x9LQg2/W4t4hb8aWEVO0T2VZcr5PMag1SPm41wkJf63GNE13OnfeKogW8hAx93HuPbJWhcqh7SXRgsOKYb20sc8mbHK8S1qxleyxUVQMZOk5jKJ9KtXKTluoxdsTepmJdFm+7GUqmsSnJI0juE3Svvd6WESFtI6LnRbEKStmrZzH5cdSBWjYIbefw4U3y9YXURHAYxWl4X4Xx4fdcPMlJeatTP0pgqYjeWArTI6ESiz/SN7wIvDvwYG64EIn+AsCskkWDqSRELuEeOwHz2KlgjhbVmB4UPxuPZNl4ldKBJyrWFO6DYbTlmgXDuC/VHG/j7R2U8ekii9qEtRJO0vqTguUbfB4sfN/J2ZOUkqFmFQEVnb+PV29J64/093FmmHBlNPgQWtEHri0fbP8Ap8ONLIqR8gXNH6Nq4NiZLdhdrPJYSs9eu1S/Zxq5Y5HtY5OXEYzEhaG3/ilxt+XGB00lnBDbqiR9PLhZEdW0FUSITK5LZtIP9zF/XHUL5mY9pbuPtbZPo+mxd9Kei4L7Sh1RuG4fFikVn218gKX0AkX1QejixNUPyQ6vi6cZMHiTW1rFVeflC4b/AGsCXtEawuosP+jq9Pnwxtj5PPi0SGqbc1TtzFFqvs0IHN+tp7MimgcqwbhVJBAnLU0lfq7VATIh6N4liDUdASxXgOzpI/Nga5YiH5iZ54Zq3N3EgQkmXKekOCgnwzhmm5JsI8QkCtpHyme7n97FFwbi454k0oT7IR9lbwQ7UWWdHpFSz/0y/Fw6Qt3VjA7b0hG60urHv683KUf0Mv8A9g/nYxzXyrlXMCoEftBB6raN1u8/6c2K6SqwojcigXPdb1WYDYfdiKHxtVMRLcynbPyySKwY2ZtPb/FRG75sIf17OXduyn54rP2KX7+MPJqo3CZGKXTbdq779m3owmoB8QQJHu2HcmZl0eH28X9ac7yr80U3dW3f6+PLsi0fonUBX9P1Wz/a4qde9vfLClmaKy1CVGZOFbLUia/+bjKTNXvCuWV0z2WpncZezii59KgVOxt+5Q3R3kXgswZQ1brr4iW1VVNsYp2yMUTK4z2ge0PWTqqqap6QimseybxxoPiDVV3qq3BZd+txW0zRVbpvEFrkd9pCQ2bCJIx+MSHAvyBJYWNTaQdykQKmPi2li2ZbKrOss4XSNK0AegV3P/Glytx65Ndo4aKoXOzEVsag+07O5fUfTlHMqTj3YNYtEhUXeEkRXBdyiFv9PLiwl2y6tFFS+i4lMkjIP40uQ9Pk82MySz/S9TgIbvUzTdYXQZD+9iNUVeFp3ARc9pX7iwnaddEdyIKgpSKRCtPF2yMxVdO2madQEi5i11dnl3D1W/CeOFu2NmQKhJJQdNkXiJsv/wCbjMgutJQbzK4wMDHHQlqrEYrEKYcg3XeXFuc73lDqFL3VoKpu2vmvG05ISaVP0i5Wbt1lREmrqzYP8rjM8t2lq/7Q9SIsK0ioFmNPxrhVqMa1VSu1TSuuvVL9UPhx1VgOXVJzF5/WDYOC5Obui34CuRqttZSwX7Ti7bv87h1RyOhckgnKdpmpbyhRgFds/TIGbkSJq6BB0mO7SV8JdfUJW/Nh4okCFoKuSJZ2AKoCLjQO+wRs39W358UrLTa+rW49wT3/AIWLjJEiu3RDjEklNI7hJK7Zf4efp5sAm1kuxRkptSScWqboSNByNwdRGNn2XV4MbT7IdNw9XZRVbTkk3ckzkJYdcWzrTV+ySL7QLbeXGIEUEUiWc3p3dVyQbrx2dIn4cEKja8qOi2b4YGRk4wZNXVV4R0SGuaQ/eG4Nt/XizAYGJoOoAnmoAt3Q/ZlywiJtjULNjUBuo9XiG+tOLKhf7JnirSHYiyVf64OKemlRWErrp1X97GVBzkzCSeKA6zCqFBMwDSFeUMbfaIy5SuEbuk8KI52ZltSbhI1PUIlsFcRlDV36XjSIuvExJru/UgfN1T/uK9drds+TzZTH0JOUb4toDcdW26wy3efeWAzA3uk0+C1SRBIDu4rwXdNo7cc1JXU9WEgzeTNSKvHANQFuq7capjfuO0/Ddhi1ePyUsMCJwHLd9rye1fip3WaY045QCK232OmaDnL+qY1bXVRVf6Bd6Bq2E1S6g9osXH+tfyoH07YGVHaI7ZA//wDOMVUdmLX2XjV0FMVM7j/XCt5CapbjAdILAP2OjxBtsxYh7RGc70pLg6rf3N7nCQlIt0h4clRID323jpXbvj3YiQsOtCL7co+FAnS1WLpG05GS2DI9nbK6WlH02+pd0u7kFddwobnmPD9TJDL1WmG9HqQLkotuqKqSHGHttIy+HvC+LGKy7QGbJrDxFfSCCLgUjC2RA9C8OcrOcbi+XDP+uBzZXUeMPzgzKUgCGkCBPLbXYBv5+m4cSa6sJTFv6lEqGqIY5n2ltAezflQMc8ivoq54V6qkqqkT87SNK6zq85YZ0x2cqAomom9V0zSwNpRoKopLG/VK0DGwtvsljHDjPnNYi4ZLNOX1FVR4cuMIbrVRvSIj2XWFj8DP7Ml4N7fMGokiaJHrpKSKoGqZARAY823lL3DxaLrAfo19831X+59asXaRiXKOc9SLrio2J2q3XSV1Qus4NAOXw3iXVgNPEETZqGqt3wX96mvadm2zduv6rPYxLVDWNR1U+F/MTruScOLEtZ2XgEtgK84F1Bd58QLqZcwiJG6eLjpODbqkTXXtVMxEwVs5OXrt5fbxURTKSYtDABFbzyRy8pnMHs9wENVLH0yTE1lXgJiv+S0rzHm+PFkj+y5k/EnLLR9IuECmmJxryx8fo1W5EJWc/kHGIInM2sKLgfUkXUi8QzAtoprqtkkDV3Xb+QTMvudeJJvnJmWQl/bhUNxkDi31vd3QGJHbYW/YJDs8548GLGnNbkX8EA7RVJGUHNJLYMF2Z8uaPk29QwVLLpPmRJKpF6xIt6V1nOXnLGRO0fHn6M46tIlgbarxJfvTSLZpJb7T6dhYZ/n1zIuExrmXSTCxxukT70NLf1Xh4sV2eqiVqdTjKjmHj6QVSAFVFJFrzgA7gI7j59wFuxIsgBiwMVbTUrrRzdKSr5OA01ESlUiTC8SEXQ2b7fLsHweDGV85h/4VpI+6JPiG4XJls5BxqpZI9TgxRIVkiMBEl0hMj22WkdoH5x6t9mMq5zf+9eedySXftLhV5OQcMLR6wvCvlw2CtXTU82hov6QunJELJIFSFJXfsEtngDePgLDiNf8AGMYlyLlJApJg0eCmTjSK9wkkqA7/AGixT84JFsllnJGqskgo7SBIREthHeJctvNaJfDixUBT60dRMCi6ci5FWLbiK6C/2RmkNhFzWW3W2+Ty4xRMCFLmlukukC+XWcj2VJMXQA34lV4zJqqytFQSIbrLubcVg7rvew+ITVa6zfaWuleJK3B09Qcn9L8N3SXCje6NckVg4cLnSXdH7g7C3fLhu3B4k4I2sqRd1v4RW5UTv5R5rCsEb+bACNxTgVUTG9WNVVvVPagqJWq2b7fNtL4MdETY1NFmiqreapbg3pBts2dY82Gqi7xJYUV3hEpq3pEVmkrt3/z+u+/DVw8imvFPCfuY9NuZ6oqFckPmut5TASs+fFoiqz2L1AP3eZ9Pk/pyKfSSySr1uLSNQJyvYgIldaG+49Udw4FvaCcLPabRaPI2TjXEPKAk6bSzLg3SBmhcAkke/wA15eLBw7A1VwWW0Z9J6iBy6YPXkm3AWjM1SFXuLwP3LS97E3/VA82sv8xsr4FhSLJdmXrzil1XbYUxVtQIeYCK8saakYYp672hJc94grqx+gJqPZkO5fPRZuPfenjGnchcffj4hHb4/dx0jFuV1BRQWQUU0jX+3Dkt9rHnCCN1nHsy3dN/7uGoskSLY5Q2eLG8BccJpcqXjs22/Dh4UNKiSyPDd43S4pXcO1Lmv9mwhw3WZGSd96Re/hR41ZrtWPBsNNZJva8InQlrq6qpXiPR3WkPuXdWPq8KUWhpIE2pqtrBdgbhC4x70AIhMh98Sxpjs3z0arQcgzeyTa5q64ddNUrbQNLut3+atxl1GNMrQMBFPl+1DH077AM1kRQGT3oTqV3TsfUTp+4FwawgqqSW2zvRuEx97Ge4iEHabLLvLXcJVBUNdntjLSg01lmDydfUy1ed5Gi3XVXENiAKltDm8peEN+JJwwf2pgrrpI3mQqEyLSPeJbd3unj2a1QQ9RdqXMKdoZRvJwvoi49uqTTaN+zlHr3j9/EG6VWJNMxRXQE1TStFuqRlvutKwubGIrWApzygXbbdUlWsZpKxOEnLdNNHckmYhuJLYW4uW/2ebCjolmqKeuzJMQVCy3baduwrfY6fYxEogsrHjpdwIJcxIGIaV/hPxB97CawLaKxoBcKR3pDuK3/dwEjSUgoqcoIrKo899tyWz/d+7iFWq2KazTOnhAVZCTDiLhIRAUkhuMvgEvaxy6eA1bqORuTWMHGkrpXHfaNm3b/O3+HAlqh08Vzoh3LBYVSZMFSVK/mbgK9/yFy4Z2+j606Ql3UurqnqjUhRudPEUiT2EkNqtxav4cAetG7B0xdOUAVEbgIEy3fhxclK1eILWCfdq7CtE/iLFZr5dFVi4WBYt9m260C93De0ME0WpJry+Lo6Vqbs0yMqllDCtkI2atDi+H4YHvDkeqXgSIPnwVJD6Wuo9uaSM4kokZ3W64gV9o3Fe1I+roxnvINICyvj1l2ceqVjhX6yqN32pcw6o7fc+7gqLS8IyWarcZBoECpmKXFEVp7f2/dcvNgR9gQfJebHshXUa/eRaKhvTJfS2GuUp3obCVtLuBs5h22e31Ybvn794Lx4hoK9xuIpm3SsVSE+dqV9h+TELPZg0fEPNGUq2DFRVK1Vsg4Erdtxlbce4jFVK0/1oYh1MzaDVhW4IVCzQWAjYLjbca6QCQgrs8WkgWPmUQahFWSHaRKeUqCSJ8RsmaEgmbo0LvXKStytxWCIm1HbtLdhw6erP25BJM2Ij9qqgu/QVMQs5LtDotL2cU2Pr+j2bduCFToXG8VdXcKr1G6VDp8aojhOSzGoB6IopVOgKZrnq3JaVySoJCfOPmLFsSlpFeHL5iVuTiQaulrUWa5Gr3v1pDoAS37fMO7HRJRsCKZyXqEU1b+8VBrsO/QP3tXbihxubFJPXixuqnikmrQgb6CqqSGuekKurv6eIVEfYQPF6p94ElD+tYF+hLqH/GFGX1k0AsHb9Xu59qtvmx4mi5lMSHlJNfXkU1i0Te/RwWLhIwQIVUCBUAAr7RuENnhv2+fDyPi4R0s1fpRUUuLh+DhquLhvyGexUSu8v2ob8OuPmNPv0ZPTPZakweFds6h0iP8ApvxG1NNowzhMKgeIQqbgzJu5ehpaSqSu9XvRG8R7hXwbVcSFVFvTFOLM2KYAzgS0knB2pN2uzYRbe9Gzlu82/CzeBN4+UWAIxRQ26RcNwSSu/aXQvvGzpxW1q3ownCgfTCBbEaXD3E9b2CBkV583gJcfgxzQ9eUMrOM/XFbQ6aZm7uU4puNvDtXSSXVyEAofF5sTEXT5VJ3KDVJTziDbP2fextNWhfuQapCY81/6fzcvVjpOEYE8JsvSsQSYczZCOtSSO/YkPf2W3XDpeXFXi6vowkRVa1nTySnH2DqvGu1I1RK7eW/YlzexhuNRsGseUalWEKT4DBkTsXCStzgDEW6/N0qqrq3dVmPC0SjNrvK6PKXZ6Yg1bMRbqqgQEUcBFzEIbuK73f1e5hRwkwN8mYrRgqB9lpR1p70h5frmy/xdWE2Mk2dM2LOIcpPCZJGThNNVK7iFSErhI9n6USDZzhhiKQJSwrerZe4C2Em9jSAu6HxofzPBsxAhgSmOsFJKITci64PRZqMXAHqoLxxEkR3lst4rl/Zc+E3TCYSapohA6Qgk3SAUGBq9GzaDrfvtsw4qwYFrC3pPGxKAqBoKaqRAxPdYrakI3j07v1uKjGqxTcVnkaszJux4LuhPcO8iah4OcSE/aDE4rw95WxGJeEsWhSSo973qnq4iuMN11wL9HNiNcU1MOkx4Bm+YppF+gjVR6CK0+9Ly7uTfiulNsItwmirNxmmkkqzMtcedXXE+rwLpYTYzkaktKar+PMXarckhvt3mLEdvsgJYhE9ykMT5lbo2EqFBw3Obp6XUUbrmSSZM1xvO4dxWFZ7/ACYWOGnkESugZxpYkqklYzcbekx2cm7nuxVR4MpZ0/A2xIuF3A2irv4RVwRfcEfjwoLWVcPkwQeR4vkXTcDUUO1LiwL7XwWmqVx+RLHpESllCCsybOp2CPexs9o2JCSXDuBLn/p58N1oOrXDdY1UaqIdU9XUSXSAQ3c20g5MQ7iDpuSbuDVBjqH3o/xNcuHDk2AqPxYjXkcwat1myrCK0QI7yFIBEb/YVsAvLux7QqokazDVgrJOE0SB5sVNIri9ry41pQ4MGFA06BIxA6sWkdzkwvLuh3COuP8ATdjKNbNQuTtbW7vL8m35cauyvSRdULBhxMu1FKLS7z1c68I9WgQH7uKrn8HFW28e3JWqLIG7iBmFWDMWoSLQuLFK0BDVHddrkFuDXmXkx2QM0KndVhXnCu5h6CXELpVCKF1gCkO0FfCI4ztWkSczCqMAlZAm6vdDdHPLy9mxrinyDKvG6zFFhWFQpaogbrXZ3FZd0kaFl1l2J2qqapRLM5kDebe5cCHL5VqSByC7FtOSzObiHOk6ZLt3SRfSi4L0iuC4dXFnrigey3mNIPJKqJxJy4kxAXWlUqSQK2AI8oK2co4xg4Qq1CSWRGv5wkTE+DHSQE7w6iI2vl5cR5Oq5JvYlWEqmQDeqRC13fGhhr53pox/4pH/AIcqRWmFuxp2KHg9w8kBE+pKrw/fwp2mEodKj6biqcklVU2r9ok1Fo6ScuiSSaqpX7Lr+nfjLrqerOI0dWuZUU1eTumZdHV9V2YtVPjWDyNGRqivF1WbgjAUyOOECDaQciV92I1NyYdYIR5lfQ2Z+nqRdJXBuMqk1Y6H0lVEwM9NNquV3k+w34JuQFODKLVtT1VFUbZlNQ/AKkq4VAhAxIO61QGw9/8ANwEHCsa1JEHD9suiqZmChPWHJu5iArzv+Px4rtTNVgq4VqNqdtGOm4G1VIXTBW4OsbVfZ8G3Gct45T4kS1l1aKopibHmWrp7seZBVBDDBPakzBUT/SqFUZqkv7QncHyYjaT7FGQVEPpB/CTdca0nEyEMrrvUFLW7puSStvdc1pXB5sZfeK5tJN9ZlmExcrX7U/V0WVwXez7OK++m85mskiz+nMf3wASuqwi+6A/d5eX48ahqspB2xWHK1VfMtSN/6nj2eEHCblWocyFxAtwqv29pB4fssWagexllLlfXyOZdITdcKvGjdwkgxeuG6rfvUiE+m/58ZBKWzRYKaK9bR6qJhaKotY4bj/BhmMtmgq4TYJV/EC6PYCRMGo7+jqxY1daYS0qZWGpPcjFngkDXN6Qh10UidHGsvqy7gBOy0uk0i3HirpvAFQkeJG1IQArnXKHX+i2c2GLFCei32jX8qxcyCoqgkRNxbEN1u0hSIb+rn37sSDX1krIEDh+xFu3VArSVdKgO3+X/AN3Gaq4uuyFbG3iTTAi6jtQeS1FZ05EwcJVslJINmUpIOm5RGkQlfelfy9NxYiai/qfOSEk3YowlW1VEcESpa6UcgqqvfZsVKwb7bdntHgIx7rMVKWkggazjGbV2rxSSBN1SbpGdt4j3+z2cVt5mNnS1kibNakjHKN1t3CutvwK40tvrhaYFuW396xdwtDrtS45HctMRfYNypjqLdUSWYVRuW72caTxkpFiXet0FUgEh8Pfl8OItr/U78l9YlpavKqc7e6FCLFI/e5r8AmLrXPiZ4gAmIxAW43jc1dDq+XevzbS+TxYbrV9n2AjbKtrT6kmTy/8A2uDPO4hpl9ao8xv91bQy6yMjspYiWiqampKXbyqrTSbFE8MDUEjIj6i5yIixjcZGKi6knmDqSgUnCU5IAqm5JATH60reBXqj8WEUa6z1V0QbVakInuJMmD/b/rcdRrWSdOFn8si8culXQa/BRzoW5bOb7JWz7mFV0faqmxinljo3aJ0pCniM3DqtbxOl1xCzleoJeLq1f6c2AC6aglmREmJoCKsikrpiekBWK8l12z2saQEVhRLhY2cFMLLSJJXbzbf4r/PxmGpkgeVk3RdAqm3SeGdyiCt/2vVt/BgG0esJNbz6gVqKkVUW+a0HGxFrF8D+PSfpIK6uuYLpX97cQcojy+HkwTe0vV2UERm7OI1fWUexfEg1M2ysnYX2CVuwfLgJUa/RcZiQazUyQT9aMgJBWW1yIwVSvMRO3H72z8iqYzVz+nqyHP3LyFcabRmrESD+x0gqk3ECE/hx8ftjF37B9whH2Vnn6hyiPNaGS1tTucM+XpH6URyBNF1dNN20G0R9ocWh3LxrtZNL0LCJKltu6sCukHqSDAmKrYebVJFQvdxZWksw2xLvTJC61sRdI+ES8uPyhXW6nFwiabj4V0WptQgUmhiu5xyixkxSQWsULpHEyNUwrJNFnJvyJTpXt5fawycwzmNWF2zRTdo+wOr8XViClm7aUTWeIhqqDt0y6Sx8ZFh2MtQr40w3UbiVk+kzB0QggsNp8tvj8OGzSY4xVRvbdpbhIcC2IVnW7tVmCSmi1LmLzeHF5h2Eoz9JPhMVFjv+DF1TbGqT3iRjlI3TjuVezTdA3STReNNRJchuuwG10FYl4TyDlU7Ui71NTaY4KNeKSk3Kt4p80IW/Nd4ebAkrKOjoFuZkspqFf7tvT8WNrw83BgWi3EjcwWGhFFCAeSjz0EcxGKGPKKllw4cSFN05INOOX9KbETt0lC7oL8BOmc35SFUTZkZOFObTtuuxfK0qNnmvlZLQsw8GKdqteKYK8oi7SK4Ui9u23BRWSqarGxx0NkW7+yEqbplNETYyJRdRV/TeXzBR4rPESbgT4UUA1dcw2nb0bTxlavKt+kM48lWYcGm7V1dLw4lszvWFOZb5ewkozNBwkyk1VR9uRV/m4EribR5C1brfDjt/DvDdNa+3aKRFzLkl7vz91KLgxijt2X19Wvpw1Tu4ei6jP/uBD+LFZLb0DvHwjiW7JLwHFaVksdwi3y+qBU9v7IR/FhjvJNG8yS2+QrsachglVNtXSxIurTVBIvBttMcFjsy2fn4ou0Bu4px/7iq4EadnEX91zXbQAcGrsooLK58Uud/JxCofAQ/iwsu+ijc8KYsblqftV51VFkzmi6kqeZxDj0yUfFt3HHoErtAXRDbaQ+LAha9t/NJx6C4WDo8iDpJiqP8A4uFv6o6uslmC2ALrTaM7vdTP9/GQE5FYVitW2+XGFqeFrbdHyqalkSIlS25EBFasT7V1cZiVDTNLS9N0+3b+u2r4ibCuJ3tS1x/S+JLEgXbDnp5io0k6JhXaKu1VNV69ISH/AEuM+5Trg9zGhVju+rpSCpD7DB0X4cM0e4RvS5TxLHg2zuYCBs7f3/io9ZLkSNRTMPLyziV4Dgb1VVeGS3JJBdcCQddo4Imej8Bp/J/vhEQy5inHJ4zVLrwHZhI0k1DQDUvv2jgtZ4K2x+Vba9K0Mr6fvEv5Ii/HjaW9gacYio5hG7qQnkJlFBEQdP7UzE0rrAH7g4Fb4A5BPae8cFh5Ftn7dFF1donqgdt1u0bg+9gf1FFtmTpMELrbOW7lPGioSHahKweZaa7LVXVHmlXUa3lcspCep2jYZkkLSHb6i4LJIJIJL3GSXUlfbdjXWfdbVvL0PDQtCZSTlRuZ4EpdVVX0fk4G0iTIF+a1faQnu+LAD7A0BXkM0dVaC68JTTjun0taIpGKRCVg6obivIh2+LGl6nzMqY4RRWi5l63FDailYkXoTS1S3qqmkXel4Mcy4kq+quuNGOnlHvd748E+t1M69lk0s+RMF2lnTpJy/wAiZxduiJ2IqvbdIi6kr8WYojPNJunwvZ0lxW6y49Irv9Vi6oZz5selEXJ1Y9FM3AAIppN1dm3q0Melc585I9imsVZSqRJCfGF6oaq6W4CHZaOyzVG6/GA6LZVuiJN/a/7rTFSXQBlp/P8ABQMC67RMM6RNLs/SJJ3BfpuG4lt90cEtjmpnGSfDS3ZfqBUub/jBqQfdwMW+f+fpI6y9VPk1G4mq6SKLajpAO39V4xLCB9pDPtJFFR1VTpt6FCSDv4pISEjIbbtnmw3pHWKPs2h+jj+KDdt1fUbo/wA/7IuDmzmm1cp6fZWqIR6hSftS/DjmTzpzPECWW7K9TkigNxfXWpF7WBUj2k88VVSbFVb0VNdFrtiG+1wrpWBy9WqOOVO0Nnop6VFgrVcU0nXCq3Qze4FRESs5dxWlgrzlAY9H0f7qkbPVdMtPzsfwRCa56VzOs/QbPss1USdttxKoJH8J7sWGNzjrNlHEk87M9bJKah2igbNUPi1RLAaT7Q3aC9Ik5SqpU0TXNBAvVKFxGA3kPL4RL4eXC6naSz2b2mU65FFUti67BBIbPGe0rObl6cWN3OJSj9H+68VoqT06fnY/gi06zdmhLjB7N2YYuLLBUTFkRWeH7fEJFZst4FTWU7NGZnGGXMkya28vlX8xYHzvtM53xiIyjyofSq3QtVVSSaNy2Dz7reXzYVHtJ5zLrEilVHptAQP+JJeXqt/pbity7tBqIfo/+S+haK09I/a/8UVmPaQcxrcdfs4ZmJ+YWDP/AM/Hmna4jXCiwDkLmiThAe9EYtqX/j4FY9obPjheMCom6yekCoiTJLq6eXCKPaVzzFgThV8zTX1RC4mofNtxYPEpNDEY/N/8l8LhqqPVH6X/AIovOu1K2VG9Xs95rEIbw/gZr/8APWGMv2p4heMcNhyIzVSUVSIBuiWY/wD2VgWKdpnPH8iajqXY8NYrqjwAlyex7WGw9oDNcU2IOAZksaXEOv4Lt2bdo+PeKuCAvxEMtP5/iohYXR0mP0v7KPQzNeKt9F1k5mMInYR/wW1Lr6e95sNfpa5cEWvknX5Jqjzeq249Q/tebcWLAjnJnGg1b8S8iB1R78kGe1I+oC8/NiPeZ/5hJIjr1IgqV20hYDb/AL2Cm+KS9n5v919KxF+SVeqPNym6OppxL1tlpXjSLZJd6SsW37jfs5V/Pj51s54F518Td8+QaPyMUFRMkySV/RFzeLaXlxujN6sc483Mtqkp1jKoPUXSSQCgmwSSNVIlx6unGPmuUdYJDZ6k1dv60S/FjaWS7MVzBG6QySK4Wx+ldiIpDIlrJTObEaBGqu4dJO9Ui3EXdKljTOczisKFZ0qcC/XYlIFJmqKDg0tXSJLms974sUnss5W1C1z+pdZ/Ari3+u6pc1v1Nf8AFbjUnaeoZFVSh0QbbQQnTL42v72B7g61UXAY6tK8wJNUxASznSdaZhTKzhs8nnyogzkC3KnzpNVSu+UcM3FdVmLUf4bXIeXkAvw4K1D5fNm8woiYd24YTqV3/sCuINvl8zXaitwau9dJK4ixcNI26W1RzSihxm6zmEMpm9W3qi8NqydcSntITNVLcNmAbUmZdZVBBsmEjU7x16HA3PBX3FqpFs3c9tlnzY3PnVQf/uoouWrPVWCLj7bRu/wwRtxhsqImybksNPPiTDq0CsE/6Dgu2YNA0WZykqqnMdIctbYRhnLOiX1QiiKDqMagYlaJW3qj0mNh4HMlmhWbDYg/bD5ijmv7uNXVtSSLXJGoHLIBJT1I3If9KljHriJeP5RFm6C3n3eTGWoWxPUSY1LhAatTrMGqgptnNoPEtZV4bU7WqVmxJIvD5sMSzVrYhsN4h/oMPpKnkWWXLPQuUsqN2J3bf8FQxU5JI2TMj6unDDqzYcqGzyUxmBWlf0rQbWrYOedNFpBJvq9Q7lbeU+T3cZyns+M3ZmWUeK13OMySIEtBo/VSHZ5QLGwc0KQ9adjWJm0kSVdG1bhtG4/40WMZx9FSsysp6th3jnxEKRFb7W3DaztsA0ROCMlVU5pkIitnMayryLynmqnbTcmpIRrVo6Q1HqpCV6qAncN2/YRYqNO9o/NSZarLA5S7rqFw6/8AP82NLTmS8k37O9TKukUI1RKBaK2r3CZG3JBU+nyWYB/ZfyvhKqrB5CVQjaz4pUTJMtLZoXB98cZehyKgCLdqRj5aoimdWZ8ZwU1OPmDKeXVbt1bUiVdOr+Udv2uOYXOTOCqKdlJI62qFm4j3STe1jLOhGwhLm70sFLNzKWHdVEmtHMxSFx6vM7en6mgRH8Y4iez7l4Dz6cRTpn9kEeuAl5+M/dHDd9gerZrQ6lQwfaxJDxz20c4WuSklQ0+2aJvCVbsHT1fVXdOWqpEQq3mRABEKVh3799w+Ui9pqTOV7S2XMr1SFOJOPjjyxjfNSGOl6geRrB+84WQBJVwmorcBGCqoh8PR4cav7QBavaJymRU5fobHn4f8BV/dxXc6doaMza5hL7KY2TAguzYl3h+0Knd4p7rfawxJ0s3UELxIvFby2fhxIaVqJXGOwsWXLihW+YVTsKXUl12gvStUcICBKjYF20TEw5RxxqjaznRa7y/QddVBQ05PntHUqcorq70jt7oPDz4Wb6ypc+rtAw2eMh/nYuMxCdmuBdkzf5v10xNEySLXpBW28Nu0uFwyH+tjEhNDtLSCSgFyu6fMS/2GNUPDlYfKsV/j62e181VfipVVMuH0rjsABtIegvx24cIqrE4JEdqZq28nQdtn3SxKLJZCEoLlh2sKdQJwkFpOWSqVwbfL5cRr9LLINM2vawy8U73bzX+XrHE/MNZtipDxvbD5i+ambp0aQiDoLStDlE+f93CmqaqamlzX8tl1oX82EyYP2CaKzqoYioI96lrsJCJu4ddveQ9fnEuQ+rCzNI1VuG1lRE9v2pjs2+bCKppipXyad5Vq6SuarGBfbLSSa65pEIbSLVACu6d5Dt+azyY8LfV0wVBVAgIL1Ej69v72LXKZNVlCPfVdR5j5VRUlpJKcC+mxQcJXbh2GXm+bCzDJrMQ1k3MdU+X8gIWGQtqnTLVs9wum7DYbPUx9Ws+HF9p/3lUCsSHWFG5RIjE91x8g/vY8o6WSWEBRV07zEhtEuQ+f5MEBDs8Z5EImzpCKeJ3hubTIKgQBaP6ofBhq6yDz6Zp97leorvuLSfpFaGKitVSX6NEDxZav94VTyeWkQECtwWdAc/8ATbjyK4c5AQj7vmw4mqcrCnlE21YUNLwpOD2OV9Im99l1twFzbS6MM02tyZABjqWWHbhY/Ru05RcGKdUdwYrWs1gpCuvWKJW7C73cOz4MeUeth0wNHkvDl5cO2tD11LA3e0/QU7JMm6oGThsgGme8SMea/HDii8xW6yZvMvahTHlLUZcvwYKG3uxkIoIr5QiRNE4MkinKI3EYnbuMSEfHdb94ceImDhNQJJYSbmO1O63Zb1fFy+XEa6jqkavCN/Tcuz7o/tGCohf0dPNzFhF1LtiUIF2woKHfbqJW7z/n4l1Y2i1CrhuVM7tcFWYn95CHEiV5eDlxzJEZFz2jbZyYp30ihUCJUpRkmnyblxG0DEberoxbXC6ytq24t3SO3Aj7WIBM0Ww+JbEmJIpXAZiPs4Es8qbBnUy1hLrJKydoj49VXBaTVWtLVPd7IYGNUAjx1TXAX28mrcNv60ixoOFvWl8lZHjn4M2nWTaBsG9CgG3/AIsK0t28jEjxaJBua85KHfb9cdmJb9/eliFypEPVtH3gNv8ABQD0l+i6sfSGMytyXXj2qz+g6OJwaSRKktGtbrrbvDjUOgTtSS5e/WDRNjIZL57C1ASGxyQ7gu5sdIt0Waew7i6CIBLZ1h93H0cHKjJP/wC51RX/AMq2v7uFUcrsm0h7rL2jUv8A6Vtf3cXDRnzEgfPg/wC2vnI3FEFL70rrzuS2YEfaEboqpw9jkVSBJxu8W4cfYAcvMrg5aHpbb4Y5D93EVU9FZUIpom7pWjxELyLXYNdvxjg+hY6u+LshQr11GoHLivkJleksrkDUwM1k9bXkNpcpAaSQ+HzXYKSaX8Bx4NTVEgi2RmJeMmo329Ft9+Ll2iGcOyrqvG1LhHoR6opdxHgkKX/FrXls2XXkWKS1XD6PxLkVrR9TR/6W2/6qliq4HKXiTShHb4Vaq6YAvXlQOUlhSHitU1dURt5Rv+Mh5cQfq7VuWScpEVx2DdbaePoxTlPZY+o41eShKZJwq1R1VF2qFxlb1EQ+LFjShsvEBvQiIBL2GyH7uAWGJCOoUIV4EC9WvmELDVTsM7Vubar8uOk40xK8GzlRMx5RO4/Yx9PeOoZIv45CJl0/2UhLHvpFQaRbp2EEv5ZIcWlTf/IKj56/+NfMYYl+qSdkbIagAFxEkRBio5wUrUkpTLFsypWVVWB1ypMlS6fZx9ZfpnQY7xqmGt/66GGM/mHQDWNv+mMaHe2iaby77mCaMQp3RKQql25k6MctfHbKOnJ6Gj6uZv4d5FPnCQEkL1A0jssV32n03ji2ZQxYHlTCuXTlBAQSd2FuvL60vt6g6MaK7WUi2eZvJmkaqin0Xb7ivEyDXXINx9N+M85csnkbQ8PCS7YkFG4uwVTXC20+KVILfHsL5sW17s8zxD9SYUIaRJE5SkqkkWMG8jYF8+RSiG6Wqg1VISMFVeq3HvoDWZEQBSU4qJidn1BUrflxs7szzsfEZCwT+QVJNFuDjXUECIR+sHghHmbRSW5WY9ABzflJJXCcBaiOY5FVOXF8HSEW5RXzpUyqzIcKfVaJniH/AOJyv7uHQZOZshaaGXFQEPUPq5XG/wBxnTlc1+3qhAdt32Su75cMlc9cpkklFjqlIUUrNUiSVEEvDcRbRxbBjlcFVec3/wDbWBnWRecrqJkmwZa1AXENXCQpkzVEyMhK3pwFqLyUzOyxqopWv6Jk4FnIMzbtV3qQDqqgQ7fax9Uz7TGRDdQR9GYkOqsWwEE3QEqZ+ARu3FjPna+qONl4Gj+DZvmwvXTt0kS6WhcABb7fOQ89uGrBZTDjYkqwqnah8ZisX5esjCUrRnx9xJTwEZF1bS8GLws10kxOxfT1TAVUB891vg6uXFdp+Gcw1QVU5V1RTkniTpqoRXaoaRX9XixPSR/2vszsLRNd2RFuEEvsLLv3sUOlN+QJnGDSarAsrFk2SNAtIjMFOKVK4AAiPbby7fuebHThksKaay6zFyi4v+zdHxF9g842+6A+Q+fHTfRV1g4wiTvuEl1TEiO3f73v4KOVmSFcZowS0nQz+n+HaOnDV160kHCY8qRJW7D81/L72JE4LW5UdMN6GGq2FTg3mrakIALkhLbvEvF4NvJ1Y6UXu/iZk2WamappatwK+US3fh9vGhR7G2deopqyVDaaogNvrFXbZ4e4x087Hea6EYSJTeX7XbZqkur+vFX9V4Bt9jERfFU9Ya7yzw3cG8fI8RdrAKQ3aRJER285DydOPOmqy7oVkLv4v3XelZy7OT8XLicqyhqhy5rJSlqyfxDt03SSVSdxrpUkCAw2c9tnLbdiFTa3OE1kH6usB7FRStIj+LmxI1cOsE6dOkX7UdIEEnSqt6ChEvpX7eWzeBBus6Pa6fKPGySIoy8lpKAFyX2/Od3LelsKy7afk8WCDl1khmJnBAqSVDt6cUTjXnDuimXRoXnpDaAiCCvi6vJi3I9izP0HDdYmGW5CkrqiJPz59Ig3fUN/NdiIuTUCqGg0GSCii7l6ipesS7o2oGJIGqXhHbt5PHeGFBeaTixVZyherYkK5KkKX7IrxI7d3NuPYGDe67FWejom/oNHL+5uiCZfwwtZ8PAezu8mFPT2K86yarIi8y/bX+i0S44zt2/9QHxc3s49L2VHrTHeQCRftnjVE3iKqpJAeqRK96ViQjzBbuA7SDf47+XEepIxSCYrGtr96Fuk6tXLcPSezqL3MaT/AKzvNpJbWcVBl/zGVovHA86Qpfqh8N2GpdjvMFqazksxKDak4DS09RUgE7AG4R2+Eva1T8WIymURXutMd5AQeDeKN3LV+harYemRkSXJ7O8ebz4RUf8AdugSAkrEj/S6qV/mMB3/AHMS1XU1JURUE1Q1TP0iloJcEDctCVFBcNJJVIrucCtVHEeLo109kr3x6u3il+c+gtvXZvxKMFaJTTxNwi3WTcqopCmrpaopCqI9V+23HTVUAtWQ4Ncgv5dW6y/z24MGWvZ9rCuKfY1tE1dTLSPelaLST9Ct96Cu7d7uLQfZJrMUk00q/oBKzfcPoXu+1IrufwFbivMFfCqWQ9ElnVNVsPDmayCqZ3krakukqJ9dnLjkbDat0XrliKZgHfigSX6L2S28u3nvxoyS7J1Tumgpq5h5fioAGkJ6KpEVx3frekbhwC6sp6YpWqJqm5R5HquIx5w4FG6qSSoGAkG09h7CHmPp82LBHTNfQqGj2KJTJEdZFe0rL77ryPlGzdb7eMt5wJGWcV6R23rx5bvYHGoBI3AizcGIqN1VQAidH8HLsLaN44zPnMwNnnMiBnqoqqslUC3bktv4xIcMrX60vChq7aPiRqzpZi6oKWWXWElm6SR6hJARc4idpdHTicy9hgdUHArC/Jqo4hkubl39R+Md338J5lQy1R07IQLE0knCo91qOOblKwht2FfbznyHhalmbyEhomHeASijKJ4MtBctyoiO4S6xvHGNJwSohb5pLoYtF1zNjyqxJxLZJNQAkmzweF0iJQvstpXiW0b0OWzmPceOmLA0m5I6zMScWOO7XLvUhIRvLb4xIQ9y/Cce8eOHRM0gXJE1bS4kiIR8ekV1/IXL+9iQKIlWboQ4/wCr6RqpEglu2BcYW+2JdA8mFxEmKiRI2bxZE1kEFG7ixVTVXSO80iHd0XXkO7qCzEbKJWovuIbILotBVIiXVtFcPB4Lu6DaXnsxOSDVyk34xg5V01QDVtX3ifLaSVvl8fJYeIVZg5fFJRpABC7bmBELUNXf1XAN5lzbufdi9ohkJKp3aqT2d7CoV025lG79xqp327DAR/CW7BYJlDzYpg9iknQshMzSXvICSMeb3OXFBy8pqSoOlXUbLJmSiUi4eAp9kBgdvMV3kLFsRSknCyJt+DIeIABHVtPz7rurdZi+ucAqwnWkHRsENMLbopFvTmW5t1gdUlELravMKXNv/cwi8obLK1MwoOGJZYzHakJfDu9nFiToauJRsnNRdJzbxmreOogwXVFWzbts893w4TWy+zBJ5ohlpUA8/f8AqlfnA7RL7LqHdijPfDmJRJuh7o/RUCNF5aPERMKDg7lVTvEWo2CkYjZ82FRy1ymeprf2jwYqXBpFoGNvNf8ALbiV/N5mcBC5SoacQUNdLd6kXK0CO2223k6sJ/QjMVw30XWXs5ssMyGDdc4Bd4fZHH3CoqsNUiUMi3d0f6Kpu8psr2ourqSiuYNAiM9obbbt3NzYnImn4GBRGKYM0kGt5mkmgVtxn0c2Jj6H5ltVFASoyoV09gFbBrjdy+XDFwlKs5AkZlg5ilrwMkJBA0FS5bLhMfasx8J190O1IkRTMUbRSYEZeyg3l6wR/O9WEazcrinwu3SO6/vbvFvHBcImy7dbinKS6iQhqtl2pCY2F4gHy82KPC0utF5uS08QXRcmwAAIiDcrclt/FtxJPJZmy74AFey9LX4obi5v6WYYV3buiQ90VRQ+52iEu8SsDh+iDpYBREi2HoKpfueTEXLTyLO4ybDad6Vw2bTxVagmXKSiegFpHsIbAK33cVVaoHKqahnoK3jdaIWlv9vFtNb56l5+uirU8rR4kSYIGKul4hBUS5fmwK6qfmrWkW/vIVFVbTtLmC2234LsTTpdnp3tw0rN497sLyW4rcswcupiPWZhcmkvcqXhCzGjoaYWjSGufJ0FakyWVdI6oc5ezh9XViUKojYOoFlgliHZiAvG4K226obhH9/ExXFi8WsaTkSsIN1oDs5fFiQj2ooOsLSj1kDHANBsX95CKvEWpcK1VS+1Lx7/AOgYKQt3LgUTXeKqqGexBJnGl4fLsL2jwMez+UU9y5asHRppLAk7uJKSVFwXel0gl+PdggI2E6TbIGWmCp6pCqu25Lebut/s4Su63SL2kwbKDQ+FFv0O2dC9m6TzQOFVcykQ4D0aBEg2NfVeJod6aQkGzVu24HVC9pt/VrWqllaPXZlTlOOJtIRlLhXNJVAdIu4/al8OCo1g2lS9kmYhWr5oKLl639Gu4XLS9H8IpHzmOB3lzk83i2tYAErCrk9pd2z7h1y3roFcW3l24ZsNEGXEeVZSpdHNcmXMouie1FK1W6mEXVHrthjIR7KbX6RXG3QJW3eh1W4b0L2oHlc1oxpJWiV2Yvknauvx6Ctuk3VX5Ta/srcTlF5OoxricW4+KIlack2u1140CHEPlzlEENmNGyRSURak1kPsnoX72C47fixe0JHlyFVE6IS1Kt0L2oEcxq2pukl8t12yNQSzSLJyLhkrocQQjdabPfbiyVpR7CLryeYRMaKSIJARWqqtgVO0hvLhyHw82KbkzlUtB5nUet6ygV9KqI9xahKJEezoEOe7F0z0SbFmxLOXSKBCkzSPVJqgqQ83UqQn+DFdS17mlHVJMLQ77pjLlVTZxxtyUD1I8FwGzUF+rzmBdWrf/Tfgq0FEwq9B1/XNUQPFLUrHOJQRJJBVwoCSSqppDxAqgF9mBAjPLKt7FX4qpqgAaX0eaiZAY/rdez97Btybjmb/ACgzfjYhZuQu4R63G4EmwgZNVR3EBFt8xYDpR7UU2upQpSIUPqD7QmWtZVRG0q2y3l2KkgRiK5BEkA2CRdDPy4cUb2jMuqwqSHphCgJ5spMPEmSSiiUSQJapW3fxXzYb5W5KLReYEPJH6vtbmqe1+gX6BXzYWyxyRcxdeUrJKgxIWki0VPTepFbYQ+bBLZOnHs+ZZsiDVqXTXtD5VylTN6bVy9nBUcSQRuoq1iSSv1dK77Dlw1rXO7JCkqqmqSkctJp2tCP3DBVQWESQKmkrbd9ly7cRrXJmSQrRi8EI+4JZJUv4Rb3/AMYHpuxX84MpZt/mVWD9IGP12bkFUrpFAedwReK/FZZ8ZZfN3V4SaluV2zooCkqIrKHcwjCPYk9jjMyJAkNUL0iASFqO+27wYp+rG6iKJP2NpjaSg+slbbA5eXZy8nTgxdqAXjerKdRQN4kQRZ7WxmN32VlxAXLgXtR2p8Q5nOKVHVtF04390PLYWBblFqpIBWqsxSoxIlcspKNo+tKya0tLnFSqLoFT0lGpKiNl27vR39OKnUmc+RtH1BMU84yfVUWinrhgqqhDRthGkqQ3j5duCT2fXhvc34hWx8N7dwBaqq+23y8mBxX2RklKVxVTwAjyF3MyCu5+hcVy5F1liTcsiTQ8yU3IvdUSLlT6qM6ckKSqCSp51lcuqUerpKqIU8wt+8OOawzkyHpWaUgX+Va7lRJBo6uQpxhZ9YapLhzr9IKiPtjhxX2Saz2rJx4LZqRO1zLc8SG75sM8zMkZJ/Vjp+LNsQ8BFDudJD9lHNUvF4xLF5G7q7P6KWyHTqTGqM4ezrTjeJcyWUqqozEWlKBoUyw7pIyIQEvrXN3WJapqQy0qPKONzUpejGcULiSAEBKISQXSNJ0KR3CkqQHfcW3A/wA4MlKnft6XBhCJKi3ppo3tF0gO8FV/N5sHSchjgezHGs3TYkiSmb7Uld4/X0rNwXbsFZZdpIeVSYf7duJcyCMgLl0iIM2wJKAgHMwaiY7/AD9VnVyYj3V6rckXpkKgHeJCyZkJBZ73i5ufE464ZJre84lXiBAB15J6Wy8v2Hy4jZBVgk1JZhDs1CVIwIillxL2P4rv9/CURmts6WhZdrRJYlEbWagiF4kRW2/e+7jVWXqDn83MPwrB5a4iwHU4rYN6Q79io/058ZZqh0iqsNjPkIxEfGGNaZaulmuWcCCUaq2EI5IyVFwqledo+BArMRuGhoZKNCRG4UU+4U0E0UXTZ4qnqgrqC6tu/wBbf/TZiQUJ5wuszil+MBIEkkFH5XiF3T3tlvVz48mwCecRoKopJLG6StXVuV3mdt+9qOLc+7K0oKxcLWFUiIbRIYFJUCtVu5rhv3YBYoyqvVImruDVFHPVBFkiGssyYDvE9cilHRGPmuuLw83t4TTaorsdYWYppgO0SfvSItheazFycdmKsEmqYfT+eQaty1e9pDzEW4tfzYi4/s3VO/QFnDZuybsm+l9hShqnsAuex158X+aqkPzigyv1CfMqzs1lGbVFJcepInrwR9z+nx484Sh46J0Y3QjxVDvU1CcEN9923aX4cWwuy7mQSZI/nOk7tLSu+hC/R1/xrmxXaqy3r/KpRvMPMzjVTdvwQdC7pom2kBpFvHVXIP0HzniRW9xoda81d6Z90REtSarCiyFE/WTYU1dUy0HDoQVvuHrS+bDMl4318txUq2Ekg3W6pWmHXbpf7uFnirDiETSqFB9xGqqquLVqN57r/wBL81mH1LU/VVZOCYUlVTaPGC+uWrxOuZABWkNrdfV/S9WA2hmcBTNx8Wms0lFuBbGzUNKebJFycTpbx3dY6HLu6MM00o1qprSUqxXLSuH6qkWr5t6HN+7iWHJTPFm4RWDMto50jbn39OS27SMi3c3i34RWygzyVJNYa4jVCCzmgZa2wFSK3k82GBUDnLil43mj5iTNu6hxeCs6m0G24A0+CAj5P5L/AHcMeIh1XQmykmOjYZaoxaFl/wDosSy2VueSrgTVrCBFMFdUhKOm92wht+y5d3yhjlbKXO9VronVtNEIWHcTCZ6Atv8AsvLj55vdEVDzvR95RqyoKvkz49BUgBUiLgGolyb+dLf+Low6cG5XIlgMSESA9rJqkZWDyW2/f9/CKcHVsdLLQNYLC8sapP2ruCfukgJJUSG0tW0wt0vmxJLILDaCraVJPwqyToucOkt3w4DdGBRJMWHQqBkKrNr9qKiyDnhbGu1Qmsaqe8v3PfwzGGm3nEOWqL4m4GqepwEaV/wdXyYsn5ts0Jtii/pCHgfVJ3pAMsq8VX1QV3mdiBeUd2GyeVnaGQHRS9NJtEQFEUhQUkUgvFK28hBn1cx4YsU7pjIUC/cKZookWpfkOTxq3cA1jVbnCVm5JgJCHvl4LsRbyOf6nBicgqJpbV9KNHr8V1/4/cxJjk7niJLGbShyWV4jvfyP7+96t7HDgssc3LiBWIy8JO1UBTInVg3pW/8AMekt+I9SqpKA3Oh7yhkYuYbrKaTB85RAhEtMGF24N+w1enrt927CjVCVBPRSh5dMlnQWkrwFtlhcvekf9N+JFPKzM8RJYo7LgXWqBgoq5VsEAQ0rLDjv1tquIaFa6QrNqgZ04nKMnRsn6aYa4qqiqSR7dDfce63E3WjANatpalioLsiXJQ02kx+uRUnbsIbtDdvLd9r/AE+LGfW8N9IMyk2zqbZxiiTw1zVc3EkVit1nUHT7GNDN2EINPibgGNplYZFGjfYHId2l/u+fGdZpKNb14zAgLRcPbCJAbj0tXfaNo9HTi21esJV3cpto7ZdsGcvm9CrThrkocskbXT0rCsIbA5b/AA/CeM49tRe3tQZhneNxzJ/dHGiqNagwzMpFzSiy5JuH7ddwJJaC7MOItMSsIzMbN12M7ds5rd2n8xFuBckPrk7SENvKOHdoH3T8lY+8+rX0QjABxxXpHbekYJ7cOYz0pzGszQMUCA70C6hLEhFQCsc+TaahF6RK0rsVJ4Tmmp1Nyatwn3RXdO7H5NGNQZC0XhXdig6UQRBpipluH4N5qXArauKnMkeJpw1i5JVRZstpuDG3iE+o/NinzyGukM/GF/Gk9Bzb0q9JYe0Kk3Wp/ghfEsuZGquJfoj9nCt+lDAMahvGKRuNjjqHSSTfxzyHRI3jcUxMvtkSuSL93COq+JoSzNzaWJimpz0Sqjhsq41EwVNIRIbuQsNZyDMhWOBdotCMe9uHUSHzW+1iQnF3Le0kolICiaDE5M1IyqZ1Iiqu5bJJmlaqNwju6cBatJiZqB8RvEiSTFXV8xbbcaWrJot6rWYu2gtFEkjO6/aqfTaXVddy4y7WzOQ9DxYPQNwgPMW0ebHUuGXW6g5xGSjcBzQko2IjpRJ4M0gwXXFqqBJW8pF03eXFgXlJ2YWRfPgIRPfbb4f93FcjBkTT0fQR2+XD5qMkKhI9/wA3SRY1r+EikSXtDEVa6YVYupAX1WU/HzLdISZtReoCraFu60T9rEbV3Zsoyqm7qVpWYGn5C+8WxD9VLy+If6bcR6wn6fSX5EyJTouPFgp9iJabhMVVXCSSrrQTG4lbAIrflxS1WVdE4LlM5H2UvuFJTVTRZ4qrZE5aVVlzPZgPJ5gqk3Vy+mG6TvbpKmRobRICL8OKemYE3FblKy8rcWjImspuuZTNx9JPFNFvl5IaDYj2pAbxmPL72Ke3I9PcY+yIY6oOfEes7vZXPmsr9BtThMQIr1QQJO7m6sHfseIAlnnBmKwiOktzdR66W3AG2ad+j1bx34P/AGMxbL54RmhqiKTQSH/tSGFl5L3C4i6f31a/6pDOQjTNNvFzDl40PgG7pBVJqKqSoklZ+tHwYxepUtHgoR/Sdf3mQ/8Am4+gv9UUOL9M01SkE0iHQjQC4f2boi/BjCSyFN/82Q+DErNTA6JSHmJKKh3KwHwqTy4zUoGiayaz0nKPHiPoZSDPTQSETudMl2wnvLoJcTw0PMuiRTIGsq8Lyk1D/wA3DzLv1J+camQ4BDR429XbcJAAkWGsgrT2snpM0hEAtusw3G3tE/lRQ3WSjNRJZzUwJWEjIKEHUKQWfewcs6FWaryh2aplc3y5podL/wBgEv3cAeSjWZDekzSuDyYPWfBcPWESw2/VKNp9K0v/AInJYsq6RqlHSr6F8qh1D3g4229JyPKrzD0WeHFBhY55W9bJxrXQ1FdVUBJUR2JBdzGQhyCWLpLOjXi3RgiNvDq7iHcXvXb8U/KUD+ngrFtFKNk1enoZr4ra7JhxwUW7qdEVq7sq1A4KiaioqRleJYG8B0g0klfqtlo6quke0B3Dt3dGDVChFFFExcBEJtNVLVTTBqIlbq2kqPi5rLMBvsgILFBzHD3anHpXKaBECQW23bCG/wBm/wAB2bcaKeOkWsCibp+gCgd1uFUrT3bftefquxw3iUzK4OLo1ogFMKrsoNPMW7NnGeo1WrcdU9c0kxI9pWpCHOXv4/a9ynexkMhKVFmhDU5DzipPEFfo+uQJXpEIAqvr28qvy47kJEBhSebVyVSt2iqlcY22BdrlZ5y82LZ29Fwi+yIiMW5IhMmKYKcpEFw/vY+2OiKtdKMdMfpFhgh7xWO0mLQDzSQSTg6GZppgr2mMulSbquCG5h+tJW//AAr9qWI15FZd3CavaSy2tSVNch4NUuoS/wCc+XHz2dP3gqd7JOdniVPDiPfuXD5EOPc2mqCVoql4sdBw4XwHXmfRFZv/ABAco6vz/BfQt9SVLwivqqZ7RlHx7yPeaqrR3DOhVQcAKQ2kJriYF3CXRhFuWXMMmQf10lCiJKmqQ+onRXKmJDq/xnmt+7jQPpyxpibe1HULyNbOZRxUckFyh3AAAuQhcN3lwDc/MsWyTGPWVZpIN3HdXNhtC+7ZfZyYU0lCNQWUX/H/AKoly6OiEpEq9GnFS0wt6aWzOpOrGMOJupZAYRVslpONVLVIlVSDcbrl9jFikFqcbQwtEKeopdIBvHekKQnYly2Dz/rcDbsiMGzWJzx4pyqSbd/GM0N6u361d0EJ/Pg0PjMWt/EoICrpACi5K9/07R4obLNIb/Fz4XcRsjQVQsD3U3tD5VrWaXeUcFDMJ7hYqKClmzmVNxFpOULFRHVHSuARESNISIiC0hK+/C9VManpiWd0ZMZo5etJVgBJukfUEwRARhfdcJEJ/a3YtNJPwLMaloX0LNrfXvf6aapFZYJArdxRbSPaCW63dtwI/wCqjrvIHM6nxjHCqCisKTlUkztuuXV/cwNaqRyvOBbf24dP6/wVdfcDo3RCXKrSVRVGspelmxlf6FLbDtjpZC/2sN3Tudf3M1c0MrFFlRC0bZS+8A5rbfLdj5+N6onij1Gy8qWxXX1CI9X2fZwVezvNyrqopz0qySivD0lOq3F/1BX97D93hRtvWUfmoPz6XKRLVMq9qtm2JGQzTy4apqpaVp+mUQGy0hutMC3bvlwwCqpGO1HKWaOUQqNQPSLjJG5LmLaWl+1xh8a/ryLkFDi3hb/8GK3b7P3sOVs5qkSpxjTC6KTZFk6N0kuSAoKneqKtpHpXnyiOGI8DjjHaSXlxSQcxLddJVLUdUQhA8CIqOIB+bpm+gJNfheKvVJxqmaHN3vl2YfSFJO5R4sbqjHRLuEjFqsTpUS2BsuS0PZ6sRuQsdFOOzzQMk/RjNaQKVeKk+0rBueK796on8hYIDoWDd+TZB/Eax3oXLLteKPdsu3fagHVy8mMLfGAo6wmw5VqrZUk+wJd5VelaccxrOUbKxqrN49YAqJSDgySHddq8o+HlI8Z5ZnqgmCCxW27CLm97zY1k3fm1iXVrlshw7W4l0ySJVW8xvAyC6+/y28+MkwaQOmaNxiW0Pujgnhos3MJeuGgorRHY6agrnYxuWG71W9+PbjXWZGX2V1dSbMauYSwu4oHCQKMknAD3opau4BtP7IMZT7HDe3ORj02RbvlLyjjXGe9JQlUR7FGbj+JTasH6oCKpjaekPgxqaNg+0fHlisXdi92CHsqoReR+RMTJJvEpSZBYBVC1dwdvepEkfOPgIsQz/s55IpMUwY1/JIIpKg6t9ZNbtnLzhhplnlzAw1eMn8eD4FmUmIgJP1SGw26u20it6cDiYpRsrEx5upKV1td3cRSLgSKxrd4vGONDQ57qBebyj6JKQzyg6ejchZiEpKVJ8zgUo9AV9USMvriXNZ/K/LjJ7V0ByDdFJzqpmr85ldjZWa0bwvZfkGd6qpJNUhEl1SIi/hYeYjxitqkbeUHfuBfcQ8o7sKro2YOlJPbYU2l9OcwKIoSoKBeQNXSyEC3k0uC41FVJAuYStC/b+iwBW3YeyadLDMROd0oQ2ENxOGqo4Nef1RzNL5ATlVU9Kqx8iyBI0HKXMlcqI/ixnXsw5s5lZiMasWnq/lTUhHDK0UyAR0nAr3dPjSxXa6IjYHux/PxpFi4erUrPL9kLLJWnk6eeZ4qjZKHJAva31d6QpWc3LtxSKh7B+XciSZsO0UoKIBu7hBW3/Xjg1Zn0Vx+YbpF5UNQiiqkThJJCWXSEPZsLxYg82YlySUcZz8yiKUZEJBpSiqX6Mbi2Fzl4zwyYo3Tfj+frUi0CJSVDzCoqHoDs0lRkNU6VQp04q3SN8ICkZXuruW4rPtbcZ3RQbEipoGkKaoABDZzHcqV/+tH4MasrCLctezfUCLh45eKN1W5ko5XJUtiqHWfnuxmEWukiojo279okB4XXdsxKCd2optL6ROqaaVRlXJ0g9lBYDPsOFSW9A6mnekO63Aoyo7HDfLKRKWY5qqyRmqkqQuYvwDbb9r7OCbWUXFOsmJCZXYNl3UVT7h0zXVQFUkFeH5gv9nGNezXXlVZl1NUUPU02LkYyLSft7Wrfk1xSPp/ahj7baZ3IEREYxSLM9JYyjqWsaz7Py9ULLP21Xtm6h2d2MdcI2oCl+t8mKZRORrnKyTkhcVUhKqTqTJgKYsCQ0jS1xu3kV92v8uGGaVNOYxKDeREy5j0ZBmyIxapJJXd0N5cvOX4sNMkAkhruqIyUkl5AWXqJVqTkRuSM13Qq2lb12j8GNBkO5GodKrB2JaiXzX7Rzfh64WRstsSVH4HSuNF5/pGfaNymt66IZf8AuKvgCdqZIBzCfbBGzi//AHMXwdc73SzrPnJhyqzVbErQrTauW/7ByN33S97AVxH/AC35JfZT+0F/m7fiH68FZSSNIS3kNhAGCb2crQzWgESPUuUP/ZFgWLHt5x3+ExwT+zeqZ5swGrddqLfcPHGrVorG/EK7txF/pNR4S+yirF5WUfUsepNzMaLl0q371cS69VUfwjiFZ5QUe6ZyDkGygqN77RFUhHnSs/FgoUqiCFDpGW4lUm/Lu/ww8R9Nt0VUXSKv+FaQ/GuP7uOt01NDSvzxnzXzhqyDbSOSNByRuV9bh5hvdq9AP1bPvYCMow4MkzScqkRqntIsHKsErMm6JbJGVt07eN/L/CiuBK4ZgqN+65Llw+pBgl7+odS1FTYk1yZy5tDvPUwDuuIbDkVxP5CLDhqr/CCKPdW6W7x32pfvF8mOaaVuydy1Pp9SKn7Jg/XIC+MMLNbOOFyG1TYAqCHs/gtxyu/OMDXPCQ6l3fhVt07VTkJaYo5ZqZL0nmhm7MlM0zFvHTeOajquWCSpfYIWdN/UWKpJdh/LJuxGSVoqGtBvq/xMRu2XdHvYMzZxrdoeXjdu+n0HRf6NAMEWvkjHLGYcpGQqBGuBAh6e4LGwoadx03NZblxV2pJoBFYBheydl1UNeZmQ7Wm2yBU+6jEmaQ3WIAaCRHaWr13F0YgcxuzrWGXNI1JNxMw+FrDtVXSSSUo6S2Adv63GjMq3n/uw2fiPNw68P1c3cCPy24nu0guzSyfr41z0v4BkFfZtVHGnYpNUiJLXKktqyXkGvMSmVNQLSkk+eKJTMOaXFvFXOle1dX26pFZi3EqBM1JU0SJrxnAEQncd59Pyliq9m1VFfJeplm5oKD60iiu6Ct4wQ+TF0WBsLMoqwhR9YhI7Su3iJDZy+bGA4uGmC5lm90V2LgQqnzQOV3i+5EfMieqemuzJSk3RtTzkG6byL0yKJdaGuG/aXl6sZoT7TXaPQUJo3zuqUg/VqJN1R+dLGhs7X4MOyRT6zi3e+eIe+Z+kA+9jHrWqAaolxSLohAf0bcyEPeAcMLIJ9WHwrnl6hjcHvEX2kTo3tO9opWUZs1c0UFxcK2XPoFmrsAS/ZD4cFKLzE7XM5Dxs3GTVJvGsmhqpJuaVS2hds3JKjjLKdYNgqSBedLddUyFRJUf8HV8ePo1QsNoULRbbR5ImPDk69Icaajohfd1Ckrr+VtWe4ueziqurn1DZs0rQqkTIRcqkqu0gQQdCqDBdULC1S60sM49U/VrO4y/iqXXy7MG6uI7gK4p1yKO56cwgX/yoeYCMekasaxvMd7dLbt3Hby4xfH1MLGSI+0uqeTF3N6xL2fvTq1YlBRVMh3eYsCM1XL+QlkV7VUXDx6JjdvINVXBWTSPWG3lu8YjgSoXpSUgjYV3rR7zJFaXflhDwtucWl439S34lcKJZcHIRLNkAi3aOGiADu+yBUbBx9Bs3Ixd5kY+mGDldtMRsYkqxdonaaSpae/w4+f8ASbgPXjcL0LgepKkIgV/2uPofmje4yMlwQuIlWLUB95VPGuYEHXXM3ukuQ3MoZMO8sTN4vPtcicusxZBRFo8cJKpESW4EnRJH0/sixd6kgXL3OCo6WjK8VSbNVHCox4riRICJJeXzYXp9q/8AWEWC6KopuEpN0qRdOrNqiHyK4hoaPk1O2/mWqbZXhfV7pVBcuT7djtxTR0gVcRLvCqn3zax0qWq7KqTSomLct6hfJPUpOSSXciraaqQpIEIl7JavxHisZTZfPwz0puEqafkJWNcDIETZyrcBWs1yAvdMbsaElEwd0giavL67kBH2LEsUmiULu0NSZpfZ6Ehu/wDYnWNlSWumDlSJyrdQV7SSX/D1WQJBdqqstXwWerWuBvxRsGaLNA9CxkAoDd0JAI+/zDgndoa8c/Ku2d3xEeQlt/8Afa1wM3TVFAWq32/CMOD3Bzd0kN/+o+bGarY5pLX0PqhX1CpOnoipaHjYiYaA8aLNgMhPylcGM3y2R7lq+TAq/nlW/rtu1/jVtqRg1K3Z7RfFjUeXF/0eirv+ZhioTFE1M6Y/kQjblvWyTq3VHkABHxeXE27a3V0zbkdWr7lmgqyZfcGSG0d2e4JeKTZuKrnlfS4kUD4gn56ojwqtw3XchEV3u4EFSZTnHTijMazkxT4VLulZRUT5LfF5cbFi4h+kxTbKoiLhou3VIbv2VvixljtRZAZr1RMevsvqeFyQcOkRFItUB0gSK/7VUeu3A9TamoDyohquKWolC17la2cOIs42YdNiOEjQMk35jq/VR3Fu5i8WIvInLlFhnxC8Y5J8JoPRIVFdW76qriFzayK7QlRuKbOlaVFdu3peHaql62YJGKqTNIVQ3rj1iW7kxMdlvJPPiiM8IOeryjFWMSk3eiq59ZMlxEzaqiG1JUjwRQ2aNSLvtLz1d2UU37YTfSzubrAGlfS7QLrPCu6wJ0e9EjJbVJWzbq3c/V5MGDtlWfnkY3ObROmQDaF36dXATbtdIh6k9Jkglutu0gH79pY9cBDPJOLf6gV9COySgkrkrDNlGw6Jk6Ek7em88BusezZQ7dZj6op5BIlVVVbRSHksQH74lg29kQQ/M3CWcoE4Hnu/SngJdrCjs0agmqcRoii5iQbs45ZVZRsxXIQVVV5Ng82358BVNJ1qjb+V9yVC/k1jim6jyUhZeEpcHEUKvq6H4UCJK7ZxK+z58VSocrYelcnc02yLAEBdwjS/b+3HFXzBy+zwkaEy0ThKGqRV81p8kpFIWK96SvFLlYe3ntIebHGXuXOdSeXOaEXUeX9SJvJOLZJMEVGK9y5g8EzENvg6cWU1ohUi7+dq+41nZQ/O5ZAo+nI1LMqldBEf+Po/o8DpLG7u3ABpOKHAER2etf8AwMZvpPsz56Nasp2VdZU1Ukm1nG66qijBUdJLihIyK/psxprtyD9ao8No/wDGv/gY11cMKYiQFvKdSKymWsIqGraO/cPLiaFqatOx6wuSSUMnGlpHadlwjy9e8flxEuEDJEjS1dhh1eTm/Dh4o9c+p40DNASZIKuG5CKvIborxL3xLdjKitU5tXmKD9fU1URITb3XbC/RXXezjS+QSCjXs/5iPG6KXFt36S7YlUBVBIrEhvAT8uMvIr8amQcMhqWXhakqkQnpFZZ5vL1Y1LkCokn2eszFFHkcxInqR+hdyapIAPdWGVm+27w4881mjE+6X2cUA+UQ+b9pQ9ISVbSNVwrSUNiuzVkWqC6RRLXckSo3j9l5sUaoKtzLYE+0JskxSM9IRYNdvg/RYI9DVBxdbwTP01xQToTkW/dNAf8AEHuHlvGy7Asq6tWYrSCKuYVCjYRj/wAVy5eLwIfjxmBtD5DESRnXWJqxdqSLbNcyGqLVFJD+AWStqCX6Xd0h72A6i1N6SdrYBJXfp7VbfJdaODJ2vX6yWZDNZvuRVpxleXKJgQn0nafh8+AmjJPFVkTBEdNUbLeXpxsHRhpQlKXZCtndkGLSeZR1yzkGiS4C79BWqoDYRC1AhK32t2Bqzka/dCmbo49RMADmi0C/Dgm9iVdA8o61JBZIRSdqjcqFtv1Ueby4pDWsDSTTR+meVZbLT05lxeXs7cZXiChKoBkh9r61KhfFp16Xs/UlsxmVQs65mGENGxCcak6sQS9UtStCwfGlhvLNaha0/TbxhDwPEOGqqrwlIRmWqYrkIfovAOLRmNW7CLracbOqzoBsSTr7B26dcUOwdpgA4j6kryKYUzS7kqtodMXbNwdzlw6EFQ1y3JWJX2+1gQrW7JzV+elWjVjlN/n4lX1HlW/QyYkgZxDaQbumQN1UIZqOkB6+r+i8o4icjKmrmezupenqlkwdxL0nvFNDZICCtjNUgusHxiJYsadf026oadfr1xRgpt3keJroKv1Ugu19h9xff/PxA9nyoKNqHPWk1oiv4GQcN1Xv1RiykRVK5guO0lUBDzbiwyt9qfAmyL8+lC1NW3AhFVztJNTPPKuvSlcSfGMkiEg1Uv4g1/m4GPqt+koNqJDxGrda3VSO8+Tn8G7owSO0cR/n+rwG7YSI3TTmIdx+rWu3eWBu3VAnlioJIEBKjqaW++4eYbv93GjqdDpKdN6oVqVi4mIvssQbyBXJtJBNKpa3CiR2XneO8cVCiqjzFflUHreYJfhKck3TcSZod04BLYY7cXKPloeD7LFPO5uajY1H10qJrvfSrpX79lzdNXFYo+u6Bfo1Rw9b0wvw9LySqvDesS0khHeZXsx2ezceMxWW912sF0dsRX1p9oGiEu8Sq1B1lmQ/ryn2EpU7ldm7lG6ThAkEhFUDV3jy4j8/GaKGc1aM2QcMmC7cQTENn8VSENodO23C2X+YOW8vmRTLCNrmnFXSss30kkBlCVVPV6b2Ih84457QS4FnTW2roCmD8Nxat38VQ3bCw1tVC/RMOC/3l8J1p18cvuqhkMklqA6B8hzgGwyAvKN/yb8Zlz0SP88FPmVwibdkKVyWl+nV/FdjSyaSI9zY2IQvuVEbbd/nKzGc8+m/B5uUrZ3iirJkqY7C38Uv+71YfWz1peFRrB0j4lp51x7hR0j61tWBIB0ivsVDV5CK74CxEk1flKOuK1xcJKhtXExA1ebdeN93L7lnNiedAHHFezVLbeJCfKF49PWO7BW7PdJ5RVV6KqZ5orRbIh4MWPGvDYl6ALXu0rlRO3djC0rR1DsAXRLhV4UFP1gxks85mVajQMCKzCNJR9KloNWTm7cYDcaqvjEbvjwCSqjMWoJj+G6ymUtJu7XEWiukCWk3IrREP5K3Gku1zk5QdOT0TQ2Qts0KsMq8NNCUF2SV7wr912wcZQj8tsyIWSkHL+nJJBP1dIIJdVxk1KwebGrtjFNTjEiGXtLnVyuVXciIhEstXync06ph0WrmfmymafWVBgq9UStdMVSDaCpe6XiuAD5d2DSKBuE0TcNmxPm5AKo3iQEZ7gtEy9r4gxnTKyn5JKis1kalZuUGoUqi6SuDZxCUkzFIva3EPvY0jFxsrA0fArTEU8bLSEM0K18ke9XQSut5TARPq5OrAl/pm28BNtPeFa590yYf+km6iQOm6jPRQSUNUwS1Oq8P1XIZfsv9zCKMWwasR4cEGxKkZpEmCW2xflMbf3bMOHjUyJxoXKX3gQ3gkdlpdQbLfN1YTUSD/Bzcj3t1rm0TDfdaXX0kXmvxnIktmtHVpnbWeRXYsomuaEcMxflMnHFxbfVEkDVeFy7epIcZpL+qcdo262+mv/lcX/m4tPaFpp5TnYkoar1a2lHLhWe4AUbx4XerJqmdm7dut8tmMPHW9QpKDZKkWkd4XIJbva246JaaYaimHmX5+v8AUuU9cQte19a14n/VNe0Tdf6Spv2eAL/zcLI/1T/tDJF3rKlSH/qSv/m4xW+nlnjpR+raKipX7RtDDdGo37DWBq5EeIs5khKz48NRtrXdSbrtT3l9AKF/qk+etW1pA0w6YU0g3lZRozVJJqreIGqInbeWLf24ZZnF5yuEVkSNP1S1vHm2b+ksfPrLObqGZzGpWNayqUes4l2iAO0GoCqgZqiOqPmxr/tlt5eAzTj6dkZtWVeR9KxTNxIENqrpZJIxNxs5CK273sJbvQjLKW14RqS6xmkho4rlySbhFnPEuoFgpa+47ALYJez8tmIGcl0Y5m6fyjkRauEryVttL3fHvxGqG57w71RTuu5Ts5sReZVL1mhly3nVaYmUqdev26ASRMFxZKneQ2ivbpXXj4ujAlHQtZoitpcrgVOwTqoUhVtYPxFyEkUYxPegKfMQeIsfserPOk1HLCS9ecElqumhDaqIBuuHx24kqWpltWlYNabVl20UKoqik7c7UhsSIviO2wMTjSl/zbZ+RdNx0qlIJg9jxFyJCQrpOkkiPkv/AFuNG05TZvVB3Rkuc9ZqZZhOJxTq6MoimsJiSLjlIuf2MPFIs262zuhO8rreXGkuxxkRkPUrWulsy6kQSKBrCQhmcS5nhYiLdK2xWy4Veoh57PhwPu0lSWX1DZwy1PZdGkrTqSDUkCbSPHBcSAkXemZ9RFhc41FwhFbC313WhEC3IYM2rl1LMQXtUvVDot+Dx4fZkOgXZrG3B4QgqAiopzWYYw7oxkG6yWqSapXBc1twtXjr+1tQ0ltUVbLBULekd3JisfWois2rS3Z5OS/NnFpNXkwzE27vu0Gq9thql1AQpB8GDQorUiEeiD9zLuRPYSqCTwtgW85ARdd3XgG9nVJF1lrFomwijWBu41VF3CQ3Bql03X/u4Kz5VmSNnDQKSjdUyJUX4+Md12qNntYSlocJHC1NofCjVTvocvezVLC6BcS49LavqkY/XEvHvxB0OgiLept4iPqRwIXF+1SxI05WDakuy9J1O9m20U1avW/15JW1JITfpJc9x9RYgKL7QVJTbWplmua7N8nE0+q/XIX5FwoaqA6peXd8+HVM0Ji2Rd38VkKsiB9wfaUhTKSIrSm8bvUz3r/YFiu0qgiNZNTG0S4WQPm/6Grh9S/aCoybWlgjc2o98TSGevVU0pG7SBJIiMi3co4jaRz/AIGbqpvGxebTGQLhZBxoJPwIyBJmury+7g1qmHSgScLUhblm30s3qHt6KoZe6Fpf09/FozsVc/nalGYNhXE0EiLVeglcG7bbpFfhvl3nNPVhmJSaMNX6UqzVqiPbvOGVAgsPp2YWzu9cFmxKBHMBctzbhqiLBdcy2K37g+71YX12im+UnVk11nyVX2qsxoog/gYpnHsh1XDtCZFdUkgHZ3RtbMFnLZVm9yiznNrwxX0/ICeg4Be4uFX6gEcCBuTlJqTZqiWmCV6SRRa6QD5R5f5uC9k3KnGZYZuvGrDQdtId679OuyMRNXhVS3CqNqvL7GFVC7N8U5vAxoyTqg2WlU0ee39Ly/yRYUotgH0qgbQH+NN/vjhxQubtMS1SR8a1r+kHjhW/uGz1gSuxIiPaG/pLClE5sU3M1NBs2dbUm8UdPG6QpNnTAlbzLlGzfdh0wwMRWTcdKRKmuGofSpmdg/8AGiX+1xQc2o0CrqqjELf4Ze8pftywVE8zoReoGbNKpKTVJWRBLSHgyV+1Hl67sVHNLMNsyq6pEQmKVImko9SJNVqwJW8FS59t9+3FhMDH5SmLpSUh2vOGGsKZ1YdB4pwZ2CoaQ2fZbt4lgFyHqRq8T1YGK4g+9tEGpHfaPTbf73VjQ3aovKuqfbJOVRHgD3IWX/ovGJBgKqJGqsKIzcuRGZpFpKtx9vnSvD7m7ZhRdPhhLWWYZUIok9leLjW+bsQ5YNmrWwHaQppNUkrN3JaO4MW+qGDb6UTwAiNxyj3/AG5Yr/ZyBFnm3CItTcqoik4sucXAAbum2/4sXKpK8ZtamnGyryn7m8o7SIVEEL9ipDvxbTNi+xq7yT3fsqrT3UjVjcCqCUAgIe9PcPsYgczG4fSB4AAX8Sj/AP3DQxaKkq1sMtIIm8hbgVs71uhdydWI+uqrZhOKIg2gVy4NkRa7VK4r2aRYZZA9ok2aWlA/ORg24OBuRG36ON9o/wAqvgrVQw4/sss2HcWqzJj3vIP1xLzD98cVfNSpQSYwaww9NL3waR94wSK3vVeXy4tGYT83XZXTeGzZofwidybQOGD+OJfB7WLSHS54VKmLtW/Egyxg55k1cBEvGyQpAAgSbC7nMi6HnLhOQFyTd0jKOXxLXBxCqUMZb93WC+8cQaNhs7zjWqhN0g2qv0rC3EP635sOJRCN4PWQYRg2FpHcvpdBdV1gfi93GX8S35Esx1kw0lBAmaaRXH3io/zcaiyxJs7oGFZqxTNmm3YAJORNvqqnpD023h8RYzDVypgSKLdZsIqnvTst3h72NVZdqtTypheCm4oVuADVbKpGh+iETG7X83g3cuzEbh6gV9t/riU9FhDoS0WtxjbTOSaWDc3LkMf2u/GsO0F2gKS7PtBjVtR3OXjuxvHRqR968VtEj90A3GWMlwIGhJMb+BEQetzEWi6u4AMf2u/A5/qnlUPHudFP0quZ8HD0q3cNx6eIcKq3n7wJCPuYM4afKnziH2Ul4ubCTPylQ+17mRmvM1cj9KMxXNQUjNpBKU4q0LQYLx6vJ3QbNUeRW7rSPAHp+qpalHydQ01MPIiQbleDlk4NBUT9zBKyx9T5v5bymScksSVQQpuJ6iC/Wq2XOo4vKqAaoftR82GPZ9oOHl5KUzGrpnr0fQ4A8eoFtGTe3FwsaJeJUh39dgmWHrg6pSWSElvLs69rSepdrReXXaRqddzVFahxrBdRIR9XMldIWQvCD9Kv3peUNK/mxfu146eJRsOsweLoLce0C5K8rQ7/AMG/HynzGr6VrCoJaqpl+XraVecUqqI2hq3cgeAR2j7AY+kGb1Rua0yFy5q1+apOJVlDulS6yMwK8uXxY+VlQb9vcEkdamhauDZCh269dqumZspWobUrzXt4qxXZdeN42feDBc7Mq79XNp9xXrDRcRqqoEvq/rUvGkO7d7eAiozWcb1zkiTAdlwocnviPy4LHZfdAWcjzSBUU/VCplvH9al4BvxibaXutvxLoV5EuoueFETtDZ/vKUUfZY5SuY+QzSVizlGEa5b6oEkG4wHcN65BqkCXVZ5gx8s6u7Uef1ePHElPZr1RqJK36aEkq2SS6bbUrcSWfGZ1Vf1wVZV5FzC7aWiqwduI1dI9yXCqkkl8gjhPPqn4qeg2OfdBggMLXqv8LNE+eHmw/jTUvAJfbpeQvLjp4uZu5cmjBWLIXtVdqthWUHStG1zIVQ4lXgNWsTNqm8SVM+fce8PFdfj6nZR500ZnNByTylZtjIOIJ6cXKcN9kLsOckr+dAjusLqDHyNpEQyOydcZluLRrTMBBxDUuJc0dFfZPZH2ldyCXtqlglf1N+pnlL58N4Fm5X4OrYl2k8Qu2kqkBKpH7QkBbvMeCGtCrNHrOhgw/Ogos4bNlBbwKVhLt0iG8F3XUYlZijos4FeQI0oqDJwZAZ3E1Hm8wJX8/wAWLZns3Nxm8R3trUoZuXe3fr3XSBDirpyKyTggSRhUiDaJECpbzHyK3nze2WOZXBv3SS6taC9wtrYHZNJg3yvcAyRbNm6T9XagYaXnLZgH9pbtkVmVKvJ7s0yrFzAw784ioZsUNVw2V/RGkJ7NBUxVEFfGGOnVdStA9ietpFA00pR6/GJa8NeICbpURO28j/RauMU5Y5jI0NVEkwngVeUbO3xc8xT5yZOOcx/agdqoF4x82N1ZvgLcVz27/DnCTiU7R+f0kzRm186avInA37ZdwkI+6BWYP3ZX7YGeTqoHDat6tbVHR8OwVkp6QmzFJWObh1iuA3mqR2iCRAVxlbjKuamX0rlzKTFGOlvWCLddurFvkuWTj1bibukvGKoWli7ZtRrPJ7K+PyNjltSoJU283Wign9k4suax3+aC4j86vlww2JfKa+szOsqbzJyvTrOl34yETKsOKbqWdHhLwEPhxhsXUU/nqojReLi69cyF2mILiN7ot9oKifu7cSX9Ttqp+EHX2W66xEzbxreUapl0n9kr8Vw/DiszBANUVEbWSeEt6+kAVTQarkSQaqu77Kzw8mM1xKUxbJarhHQ44K60OIjyP1kNyqu/QjVSV6vA83/cxlmqEHitcEsusuqoD8wut336uw95eXlLwY0oiqicSTlKVldY/wBFwqtxbi6jQxm+ouAdVU1OxdIQf3q6pAO+7nGwR9rzYS2j1hLR3fW0KOlMrrVBW1CtkuJVUaS7RV0XDgKQ2Kj4xv8AD1kG7EX2ma67SEbnxXDCk8/whoZvKGDWMWrpq1JALR2cOquNvw4s2X6TaIqilXMswbTichMtwYO+MVSXQPV0riG0tUbx5b8Zq7aiLH+uhzHJXU1vXPi/ZDhza2xKp+SsheiIRX1FRSNmI2kRLXWgSnMQYrNfRyLpuJ8xXHdt3YvUuwS4wlWREQKjdu5RLEDUiTcY5RwuBlpFzD7OPxpRv9qLgrslG/qE1U0ajWYUg5SQiRcqaggVxW27ebEEi/lHFPE5hViTXtMVyTK3FlcM2bqIWdswEtUQ97ENE004SGVcxQaiPpSFVduXg3XW+bGjpyYESLmkmDoAEnVF0hV5wMgLRXSVExuVUFXcOLu1ryIdTBIhaSbpLQJTm34DFVQkjGvydhpoC6Lurdu3FTKecxzxET6CAxtPaW7lw7KyMXHtAX0mmndRo3zUg5ZvndHzoCTdUDFBS7fb0lvwNEWdCPllGNVA5aqCr3qt+27zj73TglEbPNGB4psqKEpEJEQ+YLdw4EdcxbxwScqWmSq5d6IjygPL8uLrLECyy0lzeL+6AqW5t+0KsrzKVsBNnlMPGztHqJArtuJRnl4tFprLPGZKkG8fDihM56SScIvIxZdLZaWidvLi8tc3H6qItqjbE7b/AKxLulR/fwc8FZtlJK9ijJ7LqNfWv+JSaLKjuSEtt+B4TP6PuBWv75I+lXGmImnKPrWNFaOkhJTm077VR9ocD/MjKU45YZVh9Zb/AKe23b5sfKS4YtllPkqigaBmT9FHTTvO6SSC6Pe0QqTUv5V+1vH3bbcDRNIDR70C3gHTdbg/smDZ3SucTE2IijAU5Hm1K4huNwvafypYAA8SSgmBiXJeI8+O9WypcqqRt1/urmVWLbVS4LG1KNxO7nLyY0P2JRD88SS3LY0SHkIeZ4hjOyKq240AtE+bU6saJ7ERGrm+FxjvBLl/lRL8OBL7ooXCVlP76v39U02VfF7+dNqFv+YVxhBRxpKKI9PTjeH9UpYSUjXkaDCNXdJpWirpJEVvcDZd4OYsYdeUpPH3yUO+37vsCw84fjll4iWYuG4fCKlMnwB1mFG7LeHaybi32GC5fhxUZB+fFWCeCJkzS82OYH1qNctiOBqAkiVSMQI/VLqwMDWQiJVqsOuwXH/NFh0wQ9ZLwj96CKWUnicoZJ2F4ea/GmO0YOlmk6bAdvDwcO3LygDJLGYWbBZwmWqiQkHiDGpO1Qlw+fVSMy5mqTJqOzltapYovPKmVmHUSE9TJIoRKlrkFx4Iz2gW0z6Pu4qOUo/2yTDmza3p+TLbutvQIfxYtlWK6VMulktC40OHIdIPF5xxV8oyNJxWDkv0VNOLrQ8a6A/iwqw+BuJqXwkVrDsiEipTssik8FBZJ+k4uJqRbLSG9IdIt11v9LsaLbpqFFKO1ZNoqoJWiaiBJFv8Pccvnxn7sgrySFMzB8G2GNNfunZIap8RZbpANpdFt/kPB/bKB6u0knLK0A3klHDqh5RDQ5dw44bxIIDcHCXQ7XM6YRwUJOKm6jkQdSLRAVRAv4qqry+2h8HixJ/1RS9v2W4hjdzrtAu9jTL8OG00Ta4UUlY8lHC9tqqFpGHKF3dc3gwY8/acyRrCg6fgc8XDhtEImkuiXocKtkiVtttJULR93DHhN1tp14iLlH60p4m9GT8r6l8Kl01jUUvRH3t2DH2WchfRnXmG8hHVQqRAxUS4mdXQ1buHt7rm8+Nxr5Cf1OPU3Ttt+60Z5X97FyyqoPsT5fVGTzKuoXqc1LtVYkkmTxV4qukrzCKR3+Hpx0Ry+Nm1FvT/ABH8Vkupw1avmohRrWoZFjNGrNx4t/WknwbbVFJUPrSvN4/5uBnWlYUe1jRpiqphnHjNjqsFSIRSFUFxSsPbfdefwAZYg6tzV7FrCqZyLnu0dmZCvglHfHxraZl2yTV3qkSoiklsDfdy4rdQ5pdgSXZ/wh2jMyHfD96kK89Nq7/FbiFNRdDk4qWdpVH7MbVEWufSKFqqZVo3bj3WuJAJr9NpeHBMqZuiIoomD5AVVW96fqtIhV5v2BWK+AcM8v5nsx/QmpluzdPSEgTuZj1Z5d9xl+qYL2HcrYe+wuU8FJX05WTbZGEfK1My9Lc+MJf0+kdU10hV7tUri3l07RPGS4rYM7mOqOkVqbFUdWo9stSrWXZOVc0qWRPiR+vpKnrx2lv8Qloc23fyYE/9U/8AQ2dZ5QbZ08QQRa0mk4Il/K6dbfetwcKDawiubNJSsdVguuIeW8ILhUrbfCJ9P4r8WDtJ5M9mjNev/XubVWP42WaMAYJIcQLUNIVVbT3hu70ld2IcOQp2iJ0uYfvQd+dnVN+H/kvj7LCiq4WNryuCMtv6q7BM7Opej1/WAWbfoNUFpf8AsuNsl2POw3uP84Uvb1F6xS/dxNUj2W+yZFOJJWj61qV56XsW4h3vCDxNrdcd24EtpbduNU5dmMuP3j+KSC1ql/xJfLd0CypNVhPTJ2kACoXJeG4P3cPqiVRfxbd4gdo2gdvhNLnHH0dHsjdh17HkirmVLqIn3p6kgO3zcmzEJMdkHsOCSzYc45BIVTNXQ9ZJd14+nD2mvzDun8EvcoiUtlm1W/MPlXw8o2YkcC4V3N1y53Sv6ocSjyE4icTeFUzYG7c1UgaIJPCtC4h0gVNKw/5XzHiyPIGmKQo+hoGg36ElAx8cq1jXblrrrqpXK7/sC2ebqHHmrUEnws3K0KgoCSok2SYJWpd7uD7C/SxyHid3/MniXSLMJjRtqL0gVpaTNJm0d3IJCaVy46ZnaQF59/iuxlWDSRFuiYokKYCF+7cPtY1oSQTES4AEWKSiRtxSVFJVtpW3CKpGklf4fJjKsCOk1b3d4VtpkWLeFhg04rblvWluxuF2bzHm/wCK3Y7vdxr3OaSbRkWDl0wkHQ+iLkL+EENiWkN5byHGSuyGf/DBH28xxzvbb5RxrnOf0h6KWdL/APwkkAt9pIcbq2+oe+SsPdPhzfh/FD+i56PcZgNmAxk8g6Vcir9ZapCkOxfqAve+DA0mJylSGnWarCqCJw8cJIELJDcZpaR/p/Bgp0kqj+dD7YSsWQDm5u6X/ewLpYEQkqRATG4HrsvlH9zGhtQoOp3qQzcdNpLswSztiDlJE2Z/kFdIRVGyWG+8AIsYlZpHrc4luv3Dz+9jbWYRAv2VZhb/AKA95fLKFjFbfuEyWA+cuUhwqvI9om1oLsl9H884djUvZrqCHkZ9vCNXbNK+QepESTcNVPeYpXHjMvZKoah6FeVqzjc8KYqgpNm0VVSjWby5rpKmIGfdcne2Y0bnc81+zTPOSBckzhkrxFW0Uu9S3YyH2SyknVfVY5VMVU28CCRq6Qid5uBILrOfkL4cX21vsG4lyikhEWYQ+0S2RmR6nSq5u/c1S0YloaGmu1XK7l3XANmK1nBGsXTSN056LTFVnG6Wu/BAyATHdarbzYm8zibfThqiue3hb7fPdb+LFSzqaiaUebpHVJJjFcxbudP8WGbfwkl6JZYqMzASAuz7WgNVkHO4CHQcJK/p0PAWMmiK2op3JCVm24g3fNjV1WM+F7PNZMxARIR27esF2w4y+prCmQGikNnUIBjPX71qe2guzJfRZ22Rkcj37Zd2LRN3TpgTlS4gSA2vOVu632cYj7KuXlAUHmpKPGGflI1G4lqfdsPVrJq84gQ1UF9W00ujQ+bG47Q/Mm8uC5P6OH1W7OFxgDsnis6z8a8Ysgum1iZAkrkgvENK3m5+rDO2MTYbis4T0CIfaWvczWME9pmmTdVO0ZJpMUgAlWrohX7jZZYniEyxYRSFa1Y/YVC0kFHBxQEgm1dIGgAKnzaqQ+LpuxPZhIIuqLp1GwbgKMSD2DARPdiHoEUQrKrDDmNJoRXeRXD6PYEoAWoV8ye1U3WQzEklrx3qu7fL9dXwdc93CzrPPIxFVYiTSoVoqkJeM0HN/wCHAS7XAGlmNLBYQiDh7b/2xfBrzvHVztyMPmE6Aaf7BzjPV3+ml4S+pai1/wCrs+IfuU2olcmQbdhhgj9nX0elPN2CMiL8lytxf5osDYStR+xErD23YJPZ5G7NenbQHmcENo/sixxm3/DGfEK7xxD/AKZUeEvsqzIZ4Q5C7jaf7S+SjRi1V4VBCSQXFxYCuqF31rfzeAccMc0uAITS7RuQa4gYF9uuN1n+fLA5oPIylajyppus16eiFXz11IJOlF45JUytl1UrrjHwfdw4qzs503G0WxmxioMlJBq4G31M3HS+quiuut8aQ46+LsNC/OGV7SrI5PUe/peLptXtH5RLpxRvSSX9ckJkbh0S53D7ZW4qrvs2Rtv1bPvJ1yX/AOEZJf8AhYpOT7Vm9yjg3j9gzVUN09C5RqJGViuH1RJMEk9YWDMbBvD6uOL4uC7GSozJiikkwYQeX1GU2xnoyc9TsHbNWQjyVJqqfGLkekRjvHdbdZzAWGLEbHQ7OoNw/wC7iFypVRLIvLU0gtH1M96B/wDfk6/HdieRK1ZO0Ofnxy3iUSC5PL9BcI/6Kz4VpiuXdZUvnO8rKj6Oi6qvhEGRNCqdnHqpXJjziqV/SOHUhm1nHM0y+gX/AGbJC11suaVlCL9NvKa44COZuUtMZtdqKrIqoKZSdKN4mPdArqqpW2IJDZsIQ3XCWEZDsaUHDE3c/QMl2arhJDUSeuh3mQ/tcdFYfGnkIrgZtCUZK3UTHZo05mJmRXj3ISsVCrh00Vbi0fxK+kkkkI7/AK1zX3cmPZ1SuY9eUJVFIsuzzmYg8m4Z3GpKFHNVUBVVVuEiJJctvsYx/lfl9A1lVlVU3Is32nBOpPhRbOjSIdJwgkG//Oli4ZgZNwNG5azlVRf0hbLRjU3QK+u3W0AMRPqs6sNwccEooQ8shkrBk3QNVZc5S1NTdaUrKwb4JKK0m0ggSCq+11eQifTuHEoS913MRXXYoPZpeov8v8xHPHvH185Bd47VNdUQ4NUuY/ORYv2luTAtUui4f97HOeMpBcNXdFdu8nsTtGnvF9yvmecW/meyJTzZgiK6issrtK3vfrAlYJdHKXw4zHCwMkyTTCRZkgLe8Cu/Sge7GmaqrKtKBy0y4eZeV45pd7ILzoOlCapO0lUm6Cq4iaSt265C33sDZx2ou04ldZne0V3WbqQYY1Fm+CN+Fcsv+i4PD7RfaQpqyEN/IQbaLZpKujVccoBycKr/ADfix9Bk63oZq6hWA1hCppt3WkX19LakAkPi9jGL1u2j2lm1aN6OOtqcfKO0m5pLqU01EL1VRHcNvm6MXhTP3taG6bxpI5fSZLJGqIq0vcJgHu40TD7tKW3cs+QzFGquKjgZmtqHRiZiPfKA8mFSFs6SVMQ9TPN+zGYKnVNeVy2jkltNRxNtFSS8QJDdfi00LnbnNPZqU7SFa0rl9FN5hhNLm7hKcFs8AG7Iy+1MbgvMkh2YhJBqRVfQayqJcO3J6qRW3WmEcpZ81uM1xW9OoZdL2vsrpvAI+5qgR9lWVOw9HeQkG3d1YGLhJylVUoY7bJZ7cQ8lhOivwUiMxt2CRAd+0MDWab21hNIpbU/Wjv51SxieFNzi2vG/qG/Eusq1wftU35GSo+tne60eTiur5/jx9Nq0nJWlco1J2JbR7lZq1ZADd6mRJKXqpju+LHy/y5XWbis2VRJKyZe7bTHYbovwjj6S5v6ymQqjxM9qaDJVW0tukCqRF82N2JQqXCHurjtwCbbIl3kG2PaNr566SbJUVQg3MGj37E/snC4ht9478SyHaHqN3nzVOV7CBpMVodq9ccXwBk4V0iQ5937X5MBSmR0q0YsFQuIIOnGBe2APFz/9xcM6JvV/qg2aCfSUXN3fAhg625rpaiS2pwaa5VpZLNvMiWp1vJMmdOoF62k2Rj6uvD6vpWHz828sR9I5r5izOaELRko2hUGsm3cKm5aMBFUbEFStD4bfewjR6V9G2dP0gmPvoYqKCci5zkodGOFQuQnQpnaXDikvq/Ld7gnjXNsaUmItSEfaWLSz2qrltM2RbvBwCA/hwOy4YWKgcu3bbgidphqbjPqpthaeky3f5hLA/cDpMXGrtLftEMc+uA9qS3tD6gV9SaVBb00WyJs7JNb1cFqgjynZgbtpLN580UdI5kaRg90O7h2vJt8Y+bF+o9NZfLlgi2HvjjgsLmt2c2K1TKTkmSwG2X/40P8ARF+ywYxmkw3EiFZYsAxdcmo2lnuaUwjLJPMxHmoyeMkhUGMZ8iqAEY/ZeJTAm7Rmc+bmVBIx0NX7pdX0vADXKMYchpEXISGD7Q7NykVRXtlB1XTIguS8DVL93GZe2dByspOI8BDvnP1oCLSamqH2Hk9rDB0XQaHUX9VFrEDPaqlmF2kc+oZxCtmeYjxNN7T8PJKiLBgJ6rhmkqr+i8Z4cZD55Zy5gZyU3R9S5gzbmJkCd66fdJXWMl1Q3APjEMUrNKEkjkqfujXPc0lBJF3BbT4BLbj2SlJTclmvTaMc3PUB0aqoqAQiukkkRKoER9KqQqpf53Awvvi+IyJE5QE10q6dspIxziibTIv7XN/j+3Kz72A+i6RBHYYkR8gl0+98WC52zg1c5oc0gVTvplILbrbQ11fjwHWY7RRSuVIL9o3dB4AunryT+2eoFb77K6XH5HRYKuF0yV4q80jJIh709wkOM+dpOvq2yvrCHhGGaNXs03kC3dLp+syK5Ul1xIrvcwdezmrJf1uifpiUSKUSbveFEepxednzW4yh2+3SIZoU4BLJj/aq0tEitu+tOcfKYZNNjKKRuYdNS4pbMjMvMCLiaJcsc2KvaFK0kyfOSSmF+/cGqverzc1oiPuYi4HM3MGTypzGmEc06sdvIdenwbuVJZclUOIeqpK27uoLfhxRc7niyVM5ZmgYkQUDGbdW39K6w3yhcLDkXm0DoBSU4+lD+1Av/WRY0VMwOkiJAuYlgcQXWWOauaM9W1CtpvMiqnjOSq2MYOEHMiqSSqRrjeJD4TDGkO2kzbNWdDotdNJFuUnaNnLsS27MYvypknj+ssr2CTkUHDir4QwX5tI70N9vvY2V2wm+hC5ds12aTMkknaRpCdwJGCSWwSxbchEWCirbeRdZGSzWsBkiofL7nNhm1ktIXCK5kvekkqJC1Ija2Gr3XMN49R/fxLPGoJIuDs3HutH3cVViblWSkHKDbVU10gtV0hDlt5jHlxl2FqH1JNRA2og6MUk0hC0kgtMdvSR+e3z40rk8Wl2TM0dVYVSB6lut3WdxZ72MwMeGXcJtr1Ut36IbflAtn83Gq8jpRjA9mvMh9K0shUsW3kW+uwXdcMDoe6H7UBLyY87oP532cUBUeq+b9pBrKXW/OxSIaNo+uW/38CmqkjFSU2FcZuC+csamoXOjLl5WURFRnZlYxrrXNVBz9JVS0DBIi5dDdy4oEtnnk/6G5LK9kyGPiANcxVqVcur+S82PUwe0hSM9sVYu1WvwmajFEuZKnI24bALlEue/7uA1Hqs2/cpI3JgYaWn4PxlgwdrBd2lnNuRJBT1JHgIoH3Q81o7/AC+XAXF0aqKbk0bVNmqKYW2+a23F7m9FUvqhW0ux0qH5oMwl0k026Zu3CoCPh4MMZHYt7OHNK0SuC7ePjxrLsevE2uTVcPxjfRIIg7VNdtq6VyQNUrgEhHmtwJTzx7MMi6btEOzrVOoqSSCXpUktIfy9PI4/p4cL6loqgG48sv1/rQwFCoc/8UNe0UwqRXPCsnLNYiR9Y7frADs0kum7CmZDd5+b/LE1zESSgXYFv/6arg11/m/kjHV1UUVUfZ5XfS7V+qk8c+vTtXMNt4/LjrMDM3KKjqdo5zJ9nBOQYysWq8i0CnlfqqWuV6XJ4ju97Eoz5vr/AAXhxjpj9n8VmgUHKWR9eHuIlZmEs2f9cxYOwwzeNe0NSvHhaRk7ILub+IL4KC/aAybb0FLTC3Zdixi28lGNV2SkwXfmrrkkr9l0aSvxYm+z3m/lpVWb0LD0R2cYamJJUHZJTIyJL6FrVUitCweYLh58MaYCBpCvY6veVI7URglnpWxpXaxrtP0QWfxBr48DNF5qrJmuiRKa5kRECQn71mCR2mDAu0JW1rkU1tdkHsfUGuBmo6C4gcw6BJ3KgBCgA37+kvueHEKn1hJtTeqFHXNRIy7EEA2K246lLr/lcZ0yPSWQ/OQiKO08u53vC/khxrJzW8DQnZTpyXqfLVhW8d64XS4CQeEkQq77C+yPp8uBlQ/aOymqFtWy0X2SoaK9Q0lISL0Ep4i4xpekkq32IDz6+KWhdPVHuoJwxAil7SzV2Z45YM9qL1dpevmXN/K8uNOdocGxZs1p6FfQCmrI2XJEFyH1dD7W/wAXvYreSPaEyfrLM6m4eB7I1Pwcg4kW6SEkM8qRNTu2K26Q34lM9Hrz89Vadylqceke4AIP4qhfuPDKrIuZfKP1qo6ZaCygK6+oeqNw6BW/v8xc+M/57KmeaVGrFp3AyaWlaFhfXHXSGD0To0hUuRFVNUVTIRS0gH+bgEZ42ejNKiT4YRLgmVw2h/z9fwCPTj1u9aXhRlXsHxCtRzUcz4xYHQNhEySJUtVcUjDouHbYXV4MN1BRjXSIM36BD9qkSWqR3+b5tuFJJUBkhAXK6QqpGAd0BKj7PjH7vNiP9ZOVdEBDV0jASJVlaRc3l+bHOx1rqxRVEqbMFnlzmm1lFw7n6L8LbZaO54v0hb4enDCWz7p6eWHhUVSFJJ26V0krbQBAh/Sl5unFRzuGSqark0YuNeOXDeEC5BBLVILX7kujn5vb3WYGbGl6qiVpL1lT0q2JVg4bpCq1VG4zHk5ebm+HG+pLFQ1rbb746orklyu9ZS1bzDBaZItQFVMJehM0louKfPhOlwSV2JIC1D1kzIFSvV3jekPIHVjQk5nNV2YlP0L9Iij0vRExbFL0cIlbsVSQJW68jv8AsugPFjL+VTB+yy2zk4pmu2/tNS+0SIb/AOEmfjxZIWe4OHi0tYiTbt25iKlyoco9Xt+fErvRCDItNbUXw29g9VE+/uirw6nGyTckRRQIbzEFUENIBCzYVt3L+yxGvqjbXaKCKpaV6REokN9l/SaXtbN14Yqbp0a7OwJJQlt6o6l+qStvSXJdhEryK83KXMHKOkZHf4QHCkaMVsiqSNH/ALTb/X/qdGW6wXEJ1gfNz80rj55KL7vLjf3aSL/823lgAHz1gf3pXGA3gfV0TSRV1DM7t1wlu6MbSzNRporit9CVWRfnckSVPHJbseITHnC0vDhQUj09bp6cOYpJFXTI3/3r1E3B/wDbBH/7ccbM7dRrFn8+C8SviGW0vexjXI8D/PFRIGFpfSGP2/8AtA42J26hWLP54YrEIhEsrhsu8WEN3+ECtjwiOovz+pZ7tbEiRnpXAV526ons8W2y7EtmlnRXDzJKLyaXeMyptlMovEGyaA6oncSvNz86p4hSdHo7TXSv8ID97rxX8xjMoNr9ZJX6+32kJ7ebqwLRj2orT3cJ0bk1WZJJmk6UseKoX9JNz5PNZixZZpQ7XMCmXgyROVEpRuqLZBqeqv3t1o9F2KjLEZOlLj5DxZMnRNXNKkwLl9eNA/1o40IisCSs0OucvWVbLcGLZRxUsmva7VFK3cRaRdF3T7eHya5ldeztUDfp3pfe68RYlbXFcLCAin9KpOwiAFQ+1LZZh8T14goQCsJF0CTUbCD8HwYR1fryW8tHwQU6iVXLWQbgN6e77LVS0i3+H9zDHMB1/BKIEY8/2YmZB7eHULIrKvkTVZtlSvs+wS5PHdbswzzKZAkKayF2jyXJ3WcntYGb9ara31S1FkC418pYlsS0eKZg4PvUNU/tS5fqpH8+CU++r6jl0jGOS11THUHlPbeV3Cju83IXgwIci4ZFfKmLSdBL6JpOLl2jx4NpgqXgIQAvZwVFEptduQMkZUkdc7rnry4vstgj1l5enGef0OkmrHqx8Kt9WzmXML2N5tLNaJmvoc8kkk35UvoCu3+vpklYJ27dUR6cADK+qOxUzgcxlqLZ5wOWatJKoVDr8HehGKukBM0v2urpe5fgxZuUpUlW9gqoKepyHk5eWVlmVrRAXDlc7JICPn38m7GT8kclM3Y6hc5m0jljUrZxJ0aDVgmpFqibpX1i1IwDbvKzG0tUSoxWCuRe7HETsm3HYwIa0m6FbZyPk2NLvUpknKTAdCPcBpKmPLeW7COUcl2IYusvWtFyWc7yUaQ0qqaS7NnYLTgF+IV6eRIlS9sMV3st5T5qU/ROdyM9lpUse4e0K4SZpuYldInSt3Ilt3l5QxWez3lbmpHZgShy2VdWsW50lUbcV3MC6SAlTi1xAbreYugerDKCXI09nOe7IENV8OGVcpm1NP1Z5ou1bO45mOq7SAiAbrg224vedT9Y82HxoM5UVFWSRmKSrcRADu2leuPyXYBfYdy0zFhMxIF5VGXVURQt6jaK676JXSAQ4VfcRGPjId3mwfM6HTZnms+WdHGCmk1SP62qA+Lq0isHGfvPqi08y0PD3wn5KpMa6eWqNmsPKiiCV5qJEws5fFxV/wDTfgv5PSkVE5b5pLV88l4+JcMzavXfBpOVWqSqSomrpNSPkuLAcTkgako8SWgbTG4bVUtJXaRcxof72C5lvHNnmVWbrBgBuyWi1tqVpF9krYAiAj8OEFGUHxWjvAypiQTyhi+xJDZhsZWl+0nLyEs1B6qk0+haokqHCriruBC/YBKlzdOI/KGmuxVCZlUvN0v2tJqako+Ubumsb9F3g8UqBXAP2WAf2ecrK2jc8mrx7RNRtm/CzfeKxC4jvjXQhzj7OIPs15fVsw7Q2XvrGhp9szSnmWquvFriIhf1EY434iC54RGj9SuXnY5XzKh5iG7YEhISXr5u8Qjypx6Ou44gSBL7LrO0cdZgZedjqqsxqmqd/wBrxCPfTEy7fuGSkC6uQVVVIjSu0ukiIcZpydo2s2Wf1DuXVJTSDdKsoxUlyjVRAA49LdvGzxFiHzKpCpBzWqgBpuV0zqN7uFkraQcUXlx6Ir5mGvph2lnjOerCnVo5+voqtVTFThXSXJaPKFp4DronLVwKy7nVcH9komwfrlycl12z2enBe7USQBWlP3BcJtXBjcgkr1j+tIflPAlUQbOlGqIwPE390enGte6D/T8uMPdS92Et/Zh9xiifkIyWh824Yn5udZLiyVH64rssIuY+cuX8OAtmRlH2Va3r6pqkV7ZELGKTEs9euGZQ29A1VyIw8e26zBpyNvUzogDONeIDc4O4mrVILzAuYgVI7vYGwsfOTNZu5YZpVciTBe06gkD5T63RYa2PW0SR374QK11mlkj2daqzGnJJ/wBsODiHzp1YrGrxZ6qCtttpXlvwtnJkJkDUeYCzyU7YFNQLxpHRTBePds7SS4dgghfvIecErvfxmXOx+j/XHVMzNsR31NzDy/ajia7aQIt+1FXlodyBMkgtG3/AEMP0hJaArzIDISeb0ezddsmk4pSHplpGpaiVvGJXqqguN6vKer8uDtmZ9GGfZx+j1P1tFVGLd+CqrtsHcb3iXtebxY+dOfyR+sqB0kdUjy5p87beT6uWz7uN6TCTOL7I8aZXJJ6obhIxL+PiW2z4vHgOr9UWnlRVD68Zd5CEW8akxEHUwgSJpB3iTdJXq8jW+7HSjoHQrM4l4rppK3iSTVukYnbvDe1vDowRMtcpTqOWizqWpHMRGveZL14/SdGFxbLbrA5g23FioV7ErUnWczTMc4frer5EmvEHNv8AvwEvfv6NuMkTDrTWaQrdN1TTrpNCSyZWzM0lhPYkOqfMgfX/AJrGsMvWppZfxKwzDYi4MDBBIQG3b+1a/jxlWvi1XRGNopgqfKPy82NSZamszoOHbMGzpdQ2H+CNQV6Orvb8A3UuwbR1t0PuKcYgt60YrC/VHiH7fVLSS3BePVoD8uEu1yy7Idc5yOls1c1Kupqpodg0i3TJtDEqkICJKpK3WFfcKuOxVcoSTE3UPMM1Dftz0yZpCQ7h3/b+1yBjOf8AVCElku1NVCoh3bhhDn74MEMGcOaRc+SkvFham1bIPLnsSRs5HzdOdquqoyUaOklWS/0ZXvScAY2HsHxYMnaSoPsqLkzoyXzjfZZIqvHFTOokacdCDx642m6sNLZyEIAOwd9vNj590y//AIaiwV5uMblaX8qONbf1Tg0fz7QOqH2tOB0c31pfGoEuyLSsZzqrqZCdjx0V/wDXgNhEL9ykMe3Z7ONRZsL0xE5E0bTdFVCU83ppKEa8XwpIGulusV723mDwHj5evlTFu4PRK3SMN3Tj6cZlN/8AgHpVyZigiqwpfvLOWy7wCXixRUlKjciKYW34c2hy4l/swKKkHInu2uuXyW8ZZ97Bg7O6rCEzGUnpGpIoWPqlwqv9aPuO9S3KkqVgc3NgStzfg6E0nLMtU9hFrq9HSOhhrVzf+0TNsF1o9RQ6IekWmJ6v8YQK8+6C/wDptxiaD17fiXQrv8Dc8Ka5gdh6kqrqqeqFr2maObDNyzuS0iEC0tVUlbbtfzYlMtex1RlJRtQUfWGf1K1DSNSoJceyQNJBdJ2kdzd0grqlYQcvJyEePnT6rcnaaQFp+1dhFZI2qaixgY96Ajjp4tkC5IT6+iGbnYtZ5tVk4qr+uEpCPj0m6UbDRogGlHR7cLW6A9/0gO8uo7y6sWbs99kFnk7mpB5hK55UjKtYcHAk0S7o1b0CS5tWzqx814lKKddy8BXUPqFUhx6WjvVpXoOVS233XF4hxbqBQzANfS7OogLNRR4zkkBTOBSVAhSJXX+sOuUwSVDFFTXgXThZYH7biLg7oUgK07N/+Cj/ADujFgzW0WVeQrNBgvw6VNNw+rN0iAUgXXsAtw7cQJINjWLhWEmSh82wRHl8IOi+T3Mc5rvXkS6lavgYiic4pSla37L7qg6rzIgaFUkKmB0zcyliSRG33WWnpYAqnY5pInRGy7WmWi4qpaSqaqvMH+lw87SyDlXso02ZtnmslXxja53K/wAQV8aqv38ZBTVWSLf3d/u42NmL3IIrCXn4c4vpRlrkZQ0XScHJVlnNQVRzGXi7g6VkBe/UhO25ug/3b0m7ghVAR8RhyYDsp2N3lQSzqYf9pzLB88euDdOl1ZEr11TK4yPb48S2T7NE/wCp05lXthJQJlU7rfOxxklmIaw2Ij4t2Gc0sX0Y7NuSjPJaeqapJTNqhZpOVhDjUkIuS1VdU1UiDaYj4cB+cZ6VXVUaSL5dY5t73aDoB/Tl+3HDrsUs20vC5harNIlG7eMVS7rlPVLf8uEZp1wtZVUbWVQSWCce90Ui4SAfrBbLQQIPnxm+IvVitbwt6wlBum/BR6yLJtOXAO1VB+I77y6OK+Do8eM61YTlCpkfqyihAvtu3GR3cpWEWNMca8VaqXvIwiCzSJJ6qqXV1cL8vVzdOM810UlTVZM34vIFRYHR7e6K2/mv28w3eDCe1SMoLQ3c4jJFqi5f1XVkPMTwKk3CSbvHVrhL6mDdcbz327rEuk8a0zB7O3ZDzJqSSq2eiqckJKVX4hw9+lq6RKn4rQXs+HGLYVd5VUlUTZ+wXlZaKdNEotihG8SkqBbtxXe10Fdhr9Elm8go8b0qgTcHioKtF+4NAw5BLx9V/s2YLJmB7oks4+PWF9BPStQ7JL0eiOkWLZ/b/FOKC8g9ksQc0mqTRVEEbh8Plxl3Lt+/qOpGpuHKpKXXiWqfOAXBzkXhxoVlUvoqOnkZWPLvhDvUuYwPqHH5+4q4U8yYtPNlKW7xLb8MXbzk4TRJBu6RYAoArXI8pJl04TpuWXgZRZykdwn3Be95cVaoqgbsmSjxX0mmn+nEuYd1uIOj816GqGpG0QwqH684AbEV0FUxX3W2pKmNplt5fhwExZamqYccbbIh5vQtnUv0zXZvkOpEGuqXCr40VWawoLAB7ekT8OM4TlOTUCsXHARJpFbcO4MaqWcJR6grII+YvCXvYo9Y0U69PocTMP6RcpKkeqPUO3E7BdSo+wc2qIt8qG+WNWHGSaZLLDbftwVasglmswhMM7VIx5zCO23qtwC3Ef6ReC6bgaDgC5hxpKjXgPKOTbPw10wZ7rRJUyD3erB99Hqzo1LHNpIVEi6vqJB6rYxjSk1eiH8GOivH9kXhxBotTkpVswvFLVLmLl3cuCBKTlL1YyR9VSLOZjDG8VEFeXbykHOBeUsDwUgYSSjBVZQhbl3S3kuwyozdJvEXhi4KWVbY6X2ikKlX0dUkC5TNJm5aLJXmCqZfdLEkeZFRy0eUa9cq7x3qXWkWE6tzLp6l6fcSM+8FJvHWroF1Kn4faxjvOLtIzWYXpUjYFiEFFmW4Ule/XDzF4fLh5w/w3V8Ql0m3ER5lnLzeaG2tylIu6tbR7Vb812ek6ksna6i6daiokd28V3N4/GGM5EAWiZbhOywsXLsyen0p9kTPB0In/wAaU+ly+dXFPTcAaN+jbuSuuSPbzY7DT0nUGxppSiueZ/WiJ/bJc22qJ/a3eXqxovsPpAOcCFwaWxuFv+aVLxeXGdkUjVIeHMUhNWy234MaX7B6Ruc1gUMLNJRLbpW/4K8ws4gL3CXyfrRdP76k/wCqRkza5tN3JM2qqyqHD6qg7wAEECH7x/FjD/FA1UvFsmXXuC7Gyv6pOr6TznIPT/cEDAf9A1xil1ZqFsw+4fbE2C8RfWsxcC1D4R+pEzJ1xSsvUE4FQU82X4Kkp101S0thO0mapJGQ9dnN7YhgU1A6CXeCZs0EB5LUx24vmTaXEVBPBeKF9LyaVxHsHVS0vxYHs03WZyjhmv8AbN1TSIfOB78OqVsesl8lAuEWUKsVItYFwimzdQ7ZVRwYJahJbxPGnu1UkzPtJV1daki3kW6X2QWfYJeby4y/l244qrotgYd49lGgeT7UR/FjUHaQVbPO0pmBqrLoJhLHqkmHgSHl3eXAd3GBJraNUkEaq1nEC+MLSEEgNVUUrdl+I3J10bVnXxiCBX04CHejdbfJM8Pq2I1YN0ZnuMQ2iBX8+I3KsQ9Q18sNwkES0Abv/ii1/dwuL4GSZ/8A8kVpzstnIuqVkGYgouzbyXFWoABEJmkV1u0ukRvxoY70o8VijpLWS2XKIWl/suXwYBfZdgWD+gXzziZJiST00lVGndErtG3cQkG3ff7eDkzgW6seTZVzMkikIHrOVRuLzFYlv8mOC8TwduDi6ZaCyqQVCyzC1yLlcFReOHSRl9VC7nLer3XMPL7GLZ/VMvSiHZ0g0T3XSSQh7Yh+7fisyLAGcvGtBCS0eMD7QbiLverbtLx+5iX/AKp+7Ra5K0Yi4SXVRKZuVFErSIBRLrIStxoeDNXWPk/WknFXraf5X1L5Ivv4+oAfZmZe7jRfYCYN1+1LRViP2Iqql1fov52ARIOI1xNrOUEV02JqlYiqrcqQdAEVo7sav/qcTikH+eMIwUpxyhUzT0OHASCTouFUZcPaSRJH139Q46bVkQUxaViwEZLOHaFj5Wcz4zFfINvqydVyYKvVPRagkXEK8yvTgROtYScIqrXEkNu07h5x6sFvOusDcVvW8Cu2UJm6qqSfq+ZXXLEnTMNkpK0s6l/oJVypQjRL0yJC9AiXcGQiOkIjsG7qLpw2pXMQbGQqhxuZaUdf6noS0Xl7XzkgbKcVLRSXeikqI906LrIfvY0fVj9ZlIMVgOVUJ0/sVSaKgJXgfV3+9fdzebAL7EMbGq0TXjaCjXLFmdVMtBs9dWrpADVfYRXJXluxo99AO0/Sj6EpFuRJEraQzQgRkO7/AJ59qPi9nHJeNXP81l7IrccP4gFGM1KZYspgM1qU41sWikoIkp6SE0rwu+y73b82+/AD/qqHpbejPSDEgtUGlW5CQju3OnmNDZUMFvTnJArADcm6ZGrqpygriXdK8ocUW33Cxm7+qjkZdoJiHoAe6pVrdd/1hfBPCIkTRS3S+5AX6PXRh3f+SxeRdzwa4ENm+7H0F/qWjcBpGvFtpXyjQPasar/vY+dzglrbzAbeW7lx9EP6mN9Xy7rpzu2Pbjt8AtcbO7t5VCSQMERkvnbVEuArEzZgkmPMRCPWeE5B4jPIo3QjVmSV4kSXV1cvRiW9QrPVtEkSFYyO8VNu/wA1+HklRpso/jEniCo2mJiJ3bw6Pmw4pmxERiqH5GUiX0ycRoJUrlqzSh0nhNKNjNBQUBK09L2SsHm68dJqhxljumATsYJAS5NRHvdtwXfquazEpOM9KHodGwbm9KxQeH9B1Xly+PyX4j42DNqm4WdGJEqkBpEu9SJIuWy4QV3j4Pcxw/iSPnJwV0i0F7kbUxFU0zqwn0alENV3CBt3KoubUh6v2RfLjHLND1cXAPQFMmncF5bS/m43DlQ1d+s6gWcM1blRSS7xUSLYR7bbitxihx3U1IAJqje6V6POXjwTwoUicFUVpFmxWjeyJuzjjf8A4nOi2js5Qxr7Op2+YUaq8jpRyxWSZq6SiBb79uMSdkSGRXzfj/TIv3z4eDdna5V2Dy2bOXG3MwGkq+S4SBqJJk89Ijek9aEu1s28u3by439sLKB4fCsXd/hjZKh0m+mizN9EYrWEqu1SciQILqCd2w9hFbgbz09WDqap1mdZriiZvVXG1IuRJWz9F5cFWDia8a1Wm8e1xTRM77l9BgKStnlIh5ve+LELK0/mC2URdL1bl9pgK38ZaNecrrN2l5huw+oXRFL3injoVIq508f9kqYcv3nGODjpASXsEdWyUKzaFvTbjFpJG4TURsIdIbjt242hm5EuV+z7OIzs7FPpKNYKkYwhpJNUL36RAIglaG8d28ee/GKWsa5cKOFjldBvZeCCSVpmHtc/w24WXfW+nVn0NL6S5pyHqTswzU82ZRj5u3p1BykhIN9dBTal9qPX1YzR2Q81ZXMZxXDwaJoKFGKZtBMYuBBtqgZq/akBeUsaieQ1SS3ZuTjsvRRKXWg25MEJAUnKS6pJCVqvEXCQ4FWTtDdpmCaS/orSnKLj3LrS4UYuMjErgG6+/S5txYnQuDkNyHlSgceiWHtK71xUcqrmAmziXjNJNuG3XYJL3fV9Wwbxv6bufFcztqmbjpNuk1CKQFwtGt0BXjm691yQqnZeN+wdUvdxfJelcx3MnrKVNTbRqqlvFVqgK4XIW8wj0n5uTENUlLVzbGvGdbUuum3SaA8GZQSVIVUkLVSSVNIuYsMGC7dQKMRVNrZw/e5H1t6x0CINUEtJAULg12vgxldQ9WPI0gtUD9YPJsxqzMZCYLI2tEZuegXzpukq61IZUCHS1UNqoh73yYxi6lH5N1myANmiJ7BJNkuqqPxlYHwFhVeRm+ntoLsyX1AjlyQyYJzYipZT5K2qDcJ/VeocYd7JubUrX2a0lCDQ2X0GMZDOHHExECkg4LcI827bu5cbRo+GlV8nIuOi5pc3Xqn0WE70ldczQ2iV22263AKygoDtRwM09c1vTNDR6arPSbKRsdGJK339ekO7lD3sW0L/AGDelIwwGRK/VhMyoQMai1Rih0mse479mJCPjP5cVHKeqJuZqiumEojFWx6ViRNGApERgYluIOfmxcaihs9xY3MI6BV+oJDc5asLRceHf0YqFI05nSk6rIMxEYWDi3rVVJg5hEmCDpW+2w7krjuAN3uY0GeJMEh46l8+e2ReGZUxad17qQ6/+lK4LedZGeb2RDkDISKgEhuHyIOcCLtdCslmFMNiNVfSdSAXEVxl9aLeWC1nBuzKyF323UL+FzhDXf6aXhL7K1No/wBXZ8Q/awVguWt7262/m0sEns2kY5vwYEZEne46f2RYFyioae8y5g6dmCV2bCD880GG4bBcdP7Iscgt3wxnxCu7cR/6TUeEvqRCyTQu7PlI37b5SYP/AObJFixVwkB5exIWXWM3f/uKv+9ih5LyNQpZGUm2ZM4om/rGatJy4VuI/WRFyAl+PExVU9U7qg29v0e7pg90rTdEX8VHot8+OuhDSvzeXMvnzScpWERlPTaNMwgvkTeSdylhFpd+OLZVDowi3B81jdwY/DhrkzIglljBrOo0XKLeRelbxWlqhq7wPuix6sBchTco5FFIRSYODVucGV4aReUcNIzdQY7VdspS/wCAXLE/BFyA7v8A4qOsWZuqfEIgFw3l4MU3KlfSyHyztMh/guTL/wCajzFmavNJwJkZc13LjkvE4/5q94l+heD/APQ2fCtKU6v/AO7lVo2JYrVacjBBK7ZeaCX/AJWDZJIA6iWqNl1kikf+qEsZsVqE4Ttnz3BxST544jIUEk1HWgBBwB37rS8WDajUdYOrWwUqx+3SVP8Ahnf9h/IeXHSKYRyyX58elIVg3s3iH9cJmI28b2bSIfDfItRD72NHZsU0iWTM4CrYFxNgG0huAgJVDpxl/s7yLxLtGVtYwJVx6ykFeGSVAd/rRqVlx7D+yxqTMiZqocvZpn9BleHVSb2qFLIbQDQHkD2cN3xGJeFLw3Cs75VsEYxHN6NZs0mybabpotJNK0A/g5XpDFmTN4KlhbR395bbiFpFJ4chnJx7NJioEzShkmoqKtoeq1er4cPOFC4TS0rd5kRKjjl3F3wwS9kV37yf/wClfKJELMdBg/y4ydRlERJu4kalSL3451u+PGa6wpqSo2oFISUBXoNBdVK0FwMbgt+LGhcyV2DLKnJ5Z6sKDcJaot24gE/Vzizk89uBM+rCKdKIoqz0YO//AAlXQu9oleTZjY2FqdG2S5NxCUbg94i+1igPEvGcpnpBvI1bVRbqx4kQjs/jSQ4+ilLxbYpiFPRErKcduOXxqpCGPneVNU9B9oKl42mpiPfN3bpku4Jo/Sct0FdfelqgRBt24+ilL1LR7WcR4+tqaQFvT7dK5SZaiN5uiIx5vLjWNiMhWcIiiSENXMkWHaayvRSC2+Bqu+3b/gGGMara3bokAq/VwMBL2MLVlNwMv2qMs1qfqGKlU0qcqVIij3qTnSP1cRbtIis5sRrUDVYp2BaWkF2wfL1Y535R97MfaXYPJR6qol7P3qSEQNwIEA3eXA1qIjOrJYwRFDVkVS5t+9Xw4vjNXSU3mVvs/uYotXWDVD4FUSG9UD8XOIl9+7GS4Y9a4tZxuPuVvxJ41XMFE1rytAQs1VbSKy7px9FcwnbBh2eZd4/hClWaUIKqrFN1oa4bdurbs+HHzsiw4gkW2skkPiI7Q+fH0LzXK3s9SaKX+FM49nt/aukkvx43NH68vCS5DddjfiWchqWim+YjiKHJeQGSayyTU1/pQZb28S6K+3S390uY29d9/RhCk6vy1cdsXMmHi8pnKFRNI2YVezKtSmSToAELw4XQ7q/b19OEoN02l85qgMQG5KSnXh/5pgxQ/wDsq3FQy+agPb5zhc3jcENOl8arUfxYaW0ppRWAtG0vMxrilm5xdGcMmc9KpEkpLGr3oKoCZ36XX4MRNDSjFxnJSbYqP4VZWOcG3cjKGrofVVys0tLf14cZfmH0XagNtx1RMf8AuQ1xH0D/AO9qo2/mOJM/+5usbBj1SUFuQX7TViWc0xv52rQvltwNXSRqsVDVNe209pN/52Cp2nEkfztSSxAJfV2m4jtt7rAxJUCaqBYJbT69445zcPWkt3Q+oFfTmib0qDYHykETddy9GKFTvofOo9Q152XIjeOgC6RXLk0rOr28X+jv/QZlaf8A6nH/AGWBtS6pqt4u261WScB/ssGteob/AD+pZYvWueJWuk03bo55u6lH6og8ZaX1pXaGglybtm+7GYu3Fm5X+UDdi8ouqpdsSr80rRfq2CGkPg9vGoKLVMjnDsuI5Ful7gbfw4xj/VKI2SlPULaLZuXinHqmQoJEX+CoWXYdMCMhkqCJcVvmZmk0cQejmJUTdRzS8K4V0JNcANY2CRmdgF1mV+J3s65xVHM5+QNBVHX1RPnDhq4eA2cv1VUlw0F+bmG4NK7d4cVnMpmHriHAQG1KnIcf+4JYtXZlboM85oMxbCKzhJ2kagjvMAarlbhNnudcER733pjAMoi9n7k37ZDe7N6JWG0bIE7i9tx1YDYi2IR1Vkiv3buTpwYu2ZxIZvQ5pAJEcCY2l/L+1gQs2qxN71dMU7DMR0rT5xswNdfhJJ5avgwrdfZM9GlkzG2rF9q63e+WAV2vszczsr6splGmawXQZysWqSqarVuvcaSu/nHzDg69kj/3jcaBbd7obffLGcv6ogAEpl+8E7dIJNv8YtSwXahm03L2vuWerfXuIe51dpjNGlIXL84mebC4k6NZPXRLxzUg1TVXvL7LZ07cWim8zc0ZnImvp5/U7ZWQaKwWkQsGtqQG8VE9ulYd+3nxm/tSLuUmOW7YVu7VoOM1RvtusVXIPnwbKFsS7PeaB8thwhXf+2K4ayGYxVJDuVHypzpzUkswsr0X9SNiRk6jh266XqNkOxVVnfaQJXhzFyY1F21u9Uo0OXvZA/gBLGMco0v+EbKULBuCr4cD3ftUP3cbM7bXLR57buIkOb2EsXXD4MSlQfChWbXS5imRmsKt9+27f8WB61ECqypGbo7uHcN1Q1T5e4H5cXi5ZVwK14jfu3dWB/Gka9aVfsXDSeJCNo+BBLy9f4sZum5lpanlVgFdEtY13ifFaAKlc4EiK9LqK3m8BY1bkvEylR9mPNFpTsco7lJCUSFJs2SuJXcgXL8eMpNVVhttuSUu2agHYO3q241HlTopdkfNWwFUh9aJWjfcI7kOXHxzWfzvs4oOo9V837Sr+XuTmbUbXsHITNETCTRv6XRGquhaA+nhVd2B4+yOzd0WtmW9QiINzAy0POl+6WJDJ9dmrmlDgkzK62Q70g/6Av48UdSJMlGINVmdoId6mI3EPeoYKpmCAdSWkWtFjtlaKGejg1TZpOBiWQpahgPi2/GOA7Gg2cCnfpCWzbpXWnZdzBzlg0dsVxpZ7PAsV7qJj9yY3dJdIFvwEWIa6jfVC4Q0rdJJUT2Yg9uJM6P1QranY3b/APATXiLdMlVCcuxDTErlPqSVo4y7E5ZZtcUxM8q6sFMHCRERQLqwQvEvDy41L2QzNrkPXqorFcLl6qO60h+pJYxpE15W0zKR7z6T1CkiqukloFKLqhzW+L2sTppZGn2vrS14fdBoz5z5XZiS2aFVP4nL6p126siZoOW0IuqKobeUgGwxxPZ1UDmPI5e5bRsTl7UEk+ZU1w7oUYldQmyt3KQ27CxTM4qjrBLOCsGzCbcpIpSyoJd+r+AsWTPaSfs6JytW+kj5m4VpVIiUTdEOqZ+LHmBUSnpQ8eZP5uPcragYP8sqsVdKzMKaTYYF1cqAC8vMRt3gFw/GGL92XsvK/gc86dkqgy+qWKj27Z7e7fQy7ZukfCriG4xswHquf1OllPMArNypKOJ6CBLVeERjeDy/7o/BgjdlEnh9oKlTdP11ytkBtJclf8AXwyEYNIYiTPtQWfn+rjegJcU0NW4rf8Aa+9ga8OBDebNck1QVMN11wdfTvs68ETtOHd2hq+RPVIuMaH3W7Z6tQ6cDP6mJIuWqypKb7+cjv6D5bLsKqr1pJ9TeqFaEr6mqyrPsbUpHUDTErMvPTOqLm2ZJEuYhae7YPLgEZVZIZ7RrHNFtL5T1g1ORy/kGUfqw6/1hwa7WxINvPYB/BgvZ9SErF9iejHES/dsViqBcbklSQOy1XbjMGSNW1O/is5nLypJVUm+Xj1VuSjxUtI+NZ7gvLZgimAsiXhSx7URfKV77LeRud1OZtUzK1LlBWsU1SmWiq67un3SSQpXbzIjHZbgh57SgJZ7V02VeAN8o3JK5W0x+rpbw8eAL2T5mqpLO6jTfzcq5b/SFkl371VXr5ObwYOXaCSWXzsrpEDEkzkQ28YkJ/wAVS6DxfXDqVluLWqKs/RK4HT+1Q7wEtXSIjuG8RIMBHPLdmhQt7nTT4BvuJXV0vr7rx4NSI93okBEoCp8roVwINvgwEc4P/evUGiqBpiDduJCW0/4+6xVbtLpeEkc/rj4hWgph+CEooi8mIVfV3pLpmklcfxFYX3sE3JjIKfzti5l7DVhFRi8Wukl6LmSTwFbrrTvAh8JbTDFCniYSKynrFYkFD2GO3veWy79b4rh5dnRhzDVTVlJ+lw3oSspeBVXVFJy2aLgmanMQkqJjzbubGHpXWgPtV0WvYqnWCGlKJK307SqPZg7STUM2a1gwWcUQqqDtskSCVhvyFIBS579hFs8WL5XXaKyimZSj/V1eNl04+oOKdETVXum/AOhMjvHxqiPtljPuYUGGbTpvN5gv31SyTJLg2667or+HArtLYXSZKlyYpbjILLoeHclCFouFwC0Xi94hpFze/bjUMXehERnJYNzhi6m4RSEpfvRc7RuYNBz2WFeHT9WsXijun+DBsSRoEdz9qV43iN+wS24rGauXWU9JxlHK5V11IT3oesCKTTJZL6sqIIWiNiQ81x7fJiiOsgsumoqOkopcmt58q66tve7LrOTZizIoNmqbVglrpEDcG93Duh2BaIDbdzDiu4Xlh0BBhMrNw9WUr5O1JfNVNThHLhFZ5Z3aSRqq9wRJCHNf5Bs/HjpSGMU9a9VXvQFIbC23FaF+3x4uEfB298bZy+s2bUlUivO4fFZd5bR5sRL6O7lw2DVHh9nP47Sv38/4cLhriWmKkAER+1GzNr/U5ssgVR0iCsN4/wDy1x8+NU0hIEjtE8bn7SdDP4TsVZZVqrWUm7W9aeqOCOzg7DVlVdXSP9LvEAPpHGIFJd//AGO9SIg/YDu9rbjoNk102lcKvumrL88yjsdoulmqhaR23jbjpRW9QjPmPHm71y1FQUgQIT3XKJXW4dJErxkSF2clD+L6QR/+3HGuu3Zw39cE8B0Y3HEMuYreksY/ypcTczmVS8bGvG0Y8dy7Ru3dpNQvQVNURBUfMHNjWHbEazENm43hpabVk3kfTkOzdPlRt4xVJraa5D4iMbvexnrt60VteFNxfn9SBqLdsY2CbZe/mFTS/oGLxm5TWSH9bpSr+CmF1My3E43Sfx4mYjpGqruELbOXSxRU3Bqt1GxIoFqnadrfvROzmEvFhGYjmFRo8M/bCSN4GSaYKpXWdVvvYDpiFp0SJaq5sFVME0KqMtR9SC8WP1DIafPcKB28nitxYsnYGVb5lUu8dMHiTdKWaKkrpHZZq3XcuGI5fUeQ3i2eWmVwaap8nw4WRy8owCG/1h7PG2/hw684MRWT8yVaOWQnZazFz1dVRWEC5gWkK4qWVSJSQcF/GAVEuUBK8e9+U/JfXc3st5LKCuZCgZSRbLvo3h9VZkRaCmqkkqH2tu+wvDh9lPndmFktTalJZc1U8iItV0b0kFwSc3KmIiZBel5cVmvK3nsxKmeVbWsr61lnoBrrilpXgCQpB9l07ebChwpuESf29ippRFtzaouJSW9ZImq2VSsLmv68J5oJAEezutK8DMS0sLU6y1ZpmzQcikmqQAIkRF1/dx7NzjFWYmrwyvD7TVQAdwePlwP+lFG1PqkfMkY5GRyrjwcOWKQuEnH2qVxF3pf083vYtjOLjWThbVfwo3utLQTgQEyvt2W6+8Qt5cQOQr8Esp4tEJ6TbKcO4/ijW4R70uW9qr+LF8ay7NUh4WVkCHeZkolbZy+NqNny4Qu+tKfeTdseyEvZTzPr/wDZ2VUaSwl/CMfYSaWkAh60S5RuLGJ8g1Xh0Hnh3y5EFA7SIuT+EWfLj6CZgVAjT3YcqSbdQ8bPJt5Fl9RnUtdurfJJDvFLS5LruncGMx5Q5kQ0lA5rLN8nMtGwt6FVcKpNI50kDz6+z7pUeK5eq0bd48+NtaPgYrn10+HOKh9klV4vQOfzl08cqqN6BVJIlFSIhMzLdio9mGWm1c1FmxTD4k/opUp2k6It4wzogP48aE7MdcxUvSucxjktQUKmyotVd0hHsn4i8D9Ure6Lb7FuKvknXlE/nIEGGSFAR7r6PVArqtEpETsCIdEY73hBaVtp+TksPfhuKWTTf+p+vZ6ZryDcy0rIPBSqhoNzl0auzQX27/NjU2cHr4c2HhxKLxUQbt7xSHb+l6sB/sZ5lwlS1VD+pMoqOp5NWo2Te6P4+8bkld3euiC7m/dwSs8ohF5m0+eG2ilRBqkH1l/oH+l5R1RM/gxnL56j5S0fDmup+SqyzbzyssoDf1qKiomIIJEqO/7n9NmCrl0lPDltnCi8bPGa3qlbQIlzvHuleW/fgQNxbK3RoNo+1v0+tLg89qRr/wC7gu5QNYqn8vM29KKQXTSiVV10ON1RXDSV2kQFeGM5TevFaW6/AyWIsh6/zOXzuYw8pmFVS7MEpj6svMuiHYwdEGwy8Yhiu9mvNzNeS7SmX8PKZo1e8YuKhZJKtl5x0qCoGXKQmWChkrUuVzrNpqjDZSs2boBlTVL6QPyMPqbq+wTKw+offxUez7W+T7ztEUDGxuQiUbKKz0eDeQSqh6roGRjYWkY2HjetCueOlBUXKfOnOB1ntR8a6zXrFditVse3VbFPOtIkuNETSIbuWzbbjnM7OnOaLzcqqEjc4K2SatKgepAgnUDoUkgB0Q2gN3L04sWXNc5FK5yUyzjsinLaSOqGSST4qmcEKSvFCOraY79+63DXNatMh0s3KuZr5Jy674KjkAVdp1UqkkqfFFvt0C+HFwqrlW7u1Y6BlWECa5pCJtVblF3/AAwWd11WleWBKNQRSSKYJOYUU77908kJ8nTt+bqwTu10us1qqmTag5u0FR7tmu5IuX9UPzYF6cosJIoktJpEZmKv8HPBO+3pA0ObGDu4zrCXRrMXuEURuz1LsF856dYIcHqATgO7egRjsV6QHZ7N2Mc5kdp3tFU5mRWUJG5zVsLNGcet26RTK/cADhUQAN3JjYXZ6nDeZ2060SKRJEidmOsyXSEdivjSGwfb34yPmw/7PZZmVZ6yy0r03QT0hxC7asmoAR8UV5gBxx2B7+GvD46Sks9xF8KGKlM3u0JnfG5+VBTzDOCrEGaVQ8KDQZcrRSuEbRE+nFi7X2c+c1H9pSqoGnM2pyFjWqEYaCAvdu+Nakfn3mRYr+a35il8/Km42g66VlEp7vVUKrZJIErcO4UjYkdvlvLEt2ynWSxdpKrgrCkq6XmrY/XVj6gZpN/+LmtlqRszPks6/HjRwWfmovN7PPOlq6oFhE5kTyakrREOuaSaQrm6cK3X849e3G3qgybrzNTIWHpiXii+lAKmqkrKEKDhAzXHdzCYFpXcp4wzmtM5JtZTLuYkYGvdZrR8Oqz0JZlaKQkrpXfVftdu8sacTzL7QjWgXVQxZwKFJskkvUxPlVSXIFSFK0iSVSs0ruYzwM+TTQ9qiWBI3By9yvlH9l/OCJpkmBVnG+ttc9JfXu3nbeHMX9DwPswci8x6EQGRqCOeKIOHAcQ/QZJPklTLxWleJX+IMREt2h8+IaBR0GGWjxqkYE6aNrl1bzO0CEfWJGY+xiaSz3z1dxK0bLxuXzWNkB0l2iiTWwxIesSeFbt97GeqfN7o6SJaWkK5tORiMVifMBVzdoulnJCZbSvOwz8vRjXGV7Co18sYl5EtnzYWTALl2yukY7PZvxj+uhAXQnoti71ULU+j5iv9r5caiy3iUXWW8KslGtrgjgI1iVEunyLh7W728IbloYbWmtup9xWRZ5Kk4j3MoDx4QOkgJy7VNUhC4d1xjgB/1QGGCU7V04Csq2j74uKLiXJlaP1BLm+H5sHT1asqo1cgjHoWOkjutMj5x3D9aKzA17eObkJR/aKlISQyUoOpV/VMUqD2Ubv+KMTbjsIknQBt6dg4I4ZEncyKU8XRDL+UsnRbCUSm2ZqooELd6kJKIbv0o7ruoca7/qn7X0fnvpcx09lNaveH4XS+AZE560Y7cot1ezrQCBKqgH1ZWXSPnH/p+Nj9r30UtmKDnNN1ljT803pWEJJdKbfv2zra4VLSS4RcUrd3VjSG+3Tt4i+UZFFZGmpnaguwGUV86VnSLoXSJM0kycJXAPhPH0uzaEz7NdFrcv1CmrCEbjHcPmHGB1MzsokkVjX7McLphekJIVLKDcXvql5cfQDNhcF+zfSbyObExE2dOKpIDerpd6ltutIz+bHx9nKpHETbynVt+JCVFcDWTRVkkBUbkFpKRBEqB2fy+z8XPhaRZo/QbNpYTuWVoOTO7hSSu71Iua4r8KXhw6ZlK7jcbhVLSt28u9DDh4YL0Nmo2Vc98FBzA23AXWleW0R+UrN2MNbfhTa6PdPgLnhXz1ZqmDXWV+zwxliDgyAD3a4bSHFuKknjUW4Gi5XJxfYQpCIjZ5j2Yg6upwIaPRf8YSqiq+kY222460uKlsTGLZG3UTf6w8m0evCk494p0N20tIxt97D4aIkkoNjUhNnxNXyV4Ktkrrd9u/dsxEyFmnZerqJIHtUStLHiX0V9KM2HFuYEPeiJj9HEtxPdC360uPhLFfklWDV4oDXcsCVpKFKAVwaW+0dLZb4r9uJ7NpuCtcQKxghadOAfeq28jhX9ql+LEKMdcmICsJKK79yRkY83LYrs+a35McuuDog6Ul1+0DOjFVHtILmr2R6fcpASWlmGAfxrXt+oL9WMeymtcTz+MomlfplttPG+MxhpKN7McSdfQk1Js0swwNBs2XSQMluAXs1eKEr0rb/D0YzqnTORT0lnP0ezNt0j5ZmOILP+y421k10YxWAveiucR4yJA1f6njmgG1IgfuDtE/8AqZdeMis3S2peduwOXrxvLJONy0f9ivNBhS61SqwfGqg645VDjNXSa327RC0Nvz4zS3orJxVQgE668fOw/ew1jNLNCO3YTQ0m+Ym+6+Njz/1quI+rnV9VVYiqZDfMuwAtLVt73w3Di8dkNvR6CldM6ZWnCWCLZa4yQIWWCqVlukWB3VQrDmNWCPB64+tnAgIiI3XHs3aXmxnuI9orVcLescSK3EuocmByTy264bo0SHq8Cuz8WM211rOqkj2CrkdkiaQiogqkGy7dzFjQiKTYUyeKsybJ777ia+Muk0rPi9zGd8zEm3r5q5b7keP5tvj8lvy4TWp3t4rQ3cewUzT8tI0fmDPWTyS/GsG4K6Qd0rd07xu22jgls2oE8TWM2wtVVVdVNVqSr8TAN/dGNnIXj82FKDpekvzmNXj1zIE1mFW7AF10gV2cu7wc2z2MW3Pee7KGTmY8pQVVUpUfrVkYPCXTm3iurrpX3F59+D3nsXHYNDJZ6YU46lVI6LqOn3RPWD+8v2XN8OH+WddSlOV3OcearONcCkuWuBCBOjMUrvCA7sceu0S/TFjv0y6C42KEJj4VN2P0LxF5CLRdqVximcJsS72r8F+b+H/K7eLS+L1S2LkfkriqszabrHOOPinAqjTMag49aKCgaqT4wSK20QITMb7eXEbSc5DyWYWXLaBCQjBOqGTXhuFNJA24KjZtMi8RYYzVEZdVGdz6EbJreJt3BfCGz5cMsvsqKaoTMym66Qn3yzWCkUn5NDSSUJWwxK0D224yLfkduHDdILFCOYI93ct3/wDtukvj8q3syLvCjC3zxaK5qVlRNTvdJMKqlUo1f9Fo8UrYkfgtwYacm0GqhN1PSJJuBt3cp4xVVVIVbI1VOVCyRSdJyck7fpaRCVoKqkVu/q9zEtSWb9W0MQsKmRc8GB2WrpFqiHw2H8WPz5x15J64CKpZZJsi3DGPzV2rhPygWyvYGjceEh73/ZaZq7Lxi9dca0MUVBL9Hy+9iZoFw8hiUbOlrdEDVIfd6cCBbtPIwi0aCcKhLtZUgAiFe0hG63w/0twcJNo4jOBNduRi9QFdsRbSUSIbhxyCst9ztzTfXm9PL/BdFG4MVhlTNlIlhLNKpqeeVAVSZWsH1Jk4vJ60Ted1fdzDZbz+982FmPaMqFGE9VVzDlKphtOSbbVTDxEPKeNIwXY4qGu5F+4p7MCjWDcVzVSZPYYCVQSItnTu6d2Jn/6HRU4lerm/Qre/d/6Ppfix3YamzXSmbzBkPKXpl/P31xtw7ha6kolEvz8SzrXisVPRMC5FgSrOQi0nWmue8TNVWwtnkEcCv6G03xGsUIkoN/2aloiXwDjeXp/qflSOW6LZ/n7TBpt0Abpf2vIbAHpErsRbj+po1IqJGHaTiLQG8BGIEv8Axcau0XehpWBphHas1V0z9Q6ThFuQxy7ZM2vYzzW4OHYx4nPQ4WthMbt/V4+bAJG9IhRVWtK8NpARY1xmFkseQXZXq6knWYSFWLTdQxjrXFhoaQAYjpWgRX4yG4AAIliWIiBXdaG/Z72JPui66RAmdI2TTUSXKaoEt3oapKj0pfNjXn9T3b6uZj5YAK1JID5eXulR/FjJLUjFYdK4ht6lRE8bM/qdbX+3aoJVc/qaTPcr+iEtu267zfJjP34ZU0faH60wbKEvlKgf1RV0srne8SABtS9Kvx8O1xj5wgtcWzqx9Xs7+yctm5X0vWLXOthEt5cgLgF41JyKfdCHMR+TA0P+p3vPQXdZ6Uxb5qcb/v4Otd2bom4kPMX1pJVUmeQkKwVQfGMyqgwAtZvAqjuDlPikB/FimzBPF5BZy9uJZwWqqRdRlj6Uj/U+KnSUI2vaGhElDSNIiGASG4L7rT73fuHEHNf1NGpJZQTSz9p0S/8AiGA/jw0Y4gpgdIiQpUDkYrB2U7U1c1KNbDd9YqCPH/XjjQXaMVWXz+zAc2EX8POA6ejBip/+p2VDQdbU/U8lnxTjlvCSLSRJsMbbrgkqJWXXbOXARzwV43OLMJ4Jjb9I3phaXMGqWJ3CubrYk0jLawTUpIT1ZeEO47krdg3eS/DHLUrYGtLQuvasg3f9cQLD6sgNvCrd8QlqhynzebCeWKSKtM1osbnvtJkIjpXXfWh/dxUXwMkYPwoVpXJb84P5r4YKLbNFE3c244xTirXApWkPIaVgBy32XXbB24NlFZfo5eRLx5ZKKupUkgVQB0qoInu6VS2+7s8uKF2b3TaByZZuV1lBUN49uFDSvENUdxXrjg28YLpim/XcSWikSQiIuhuESu5+/suxwfiCqd6281tGXzvEunW0Q6s2otSJ1KogWibebX9KsiiIqiQEBASo8xdSt3N7uLB/VHYqkJHL6lgrV/UbRgydKur4Zk1cq8gjuFVVLx9OGcFMB6a2hHyXrVclHzUiHjLUitIeUdXm8fixe+0vUQ01PUhAVYrTriHnU3bXj5pg1c8M7tHQMhVGzSvG0/bDGg4MMAYeId2lZviPEzrGRLukvl1G0b2Y0JOPkiq3NHTJXuiKnmBDcPSX1zGnewxE5Mh2hUlsvpWqClAYO+4koRu1b6W260kl1fL04HstnFmrHupJhF5a5XSrGI1VzXYUQ0XSXSDrAgQsD3sX7sPdoGqc1M33kWdB0HT4sod68JzFU4zZq84bSVBK/wDexvHSKoaIiLSkdSzjT6cR3LJNYShr1xMOUHhfWJlxehwYlzqkXMdu73sTKlY0Uyk1IiWlZV1JOCBuloNe6s2kAmgBJBq37ucg3b8LyvbJq8F10RypyyQdCRjxa1ExxXH1EPcYYB2xqyFuV2V+VRujVITXKgoyxXzF3XNhu0w4Aj0qn0u6lpXslJrPKcrqScM+KTkq0tJRA+GElQa7wAtcQ+csG19FMXXobrfR1FVuN/dDIq3EFo8pcZbd4/ZwJ+zpnFI5lZOqP5Gm4WNkPpR6RSRgGCEQ1XAWojyt1Urle95iwS00EXkaib1s5XvamCRJvFRtsDqHV6evHIeLiIbqUvZW0sIdNIPylf8AJZu5c5pRqycS2FFukqV6K9wiNpbh78tu/Gef6oW3yYe59rejMCqqxjJIItqiKcTDNXaGlaZDuNcDu3ctuD9keu8d5h6N7tPiGK6HEpqbkjIftd6pWezbgB9tDtA1llr2gXFPDA0RJCLVoqLmSppq7cF3HUqqN9vN7ONBwYM2It7iL7ln+ICMK/V3f+SEVL052Z1ct5iHLMmqhHV1QQd0+gLpVUeQkktcujxmONM9h2Py+hcsa9c0LLz8hGoel0T1eSjkmaoGLVLaIiqXRu3EOMrK9q6uXL1Qlaby1bJuOYjouO/8rGruz7XlYVXkzWtQsHFLsVGSEgXDMYZq2aqGDJLnFukAHvLq6cai6WvqVMThFuJIm7gVU4LEdqxe8pzs2DrOVc0cwtT9KQwLIrj/AO2YjSjchBFZslXOYzlMxvAfo+wtELf+uWdPNiab9sCtkmo/2q5ZoOBC8x+g0dYX+qw3je13mUfpU4WksubUh1RL6Bxwj/ssNmAfaFRc7Ul9B6wTbKnAgDN8qiFNR6qSnH8Ns0rRMh1xC3x822/AVzUouplnbWoI2dFTgmoJOo5d+AqpftRvV0rS9rpHpwWKvnnLyYiPWeugLKn4/iE01wbJXl3mrpJLgOl3tttnSeGlUT7BVnIehR9pOASSFDUeFckBiVo7HW8z22Y4xeqowubhB3l0G1TapG1bMnkXcdHOEX7bhHCQN0lUlXQlvDV2iWqXUOMNvl2aTx1wp2iDo7dQj8ZD143LQBgqwcAmk5BwDxuIgq4JXhjvIrbtU8YadGZSDi4Ocju+IsT4SHtXvkqitlmkRIw9lZ0zQzjYq1bVRM2bdm4VEkHhM29422gZXX+7dYWN1lmvRaipej0VbCl7Uo3EvvY+YbFdZraY8vKY+TCyj/STT+skqNu65JK8sbuKR1NGNQcyJfT5PM2jz5aniC9mUS/ewo6zDo9VEkTm4pQT6Slkh/Fj5di/RERWsu3cpAOGrqZRSJP6s2IrbyEkh/dwSPhQxW1rvLePaHZxNR5ZVG4pyso9om3jlXC7ZJ8krxwhu0t9xdPTad4jj5+OJt43UURS4Zq3AdihCCtvu4RdTIOkx0gQET5LW6WGJPwEi7nd5Tt+XF5NT3K+nDq4xkvrPRYfROkYilJSpPWrxk3BJd2Wl3pCHTpAA2+6OJcagYXWA5BQrTLaWPki1nkVS+2STU8w82Fhlj4ggVMCs3bSPFQ0gjtQeFH7S+tvolfQdugmod/UJBt+bHngFJpC2XaPbR3agqpCI4+RTd+wVbksqdvP0FuPDpGX0k7NG4eb+LgRh71uJiwILxUftL6M560tMnl5VpRjwhZeqVlV9cQK4QISt6bOUyux87HT9+3JZIEWyQhsuVO4Pawj9IDVuRF5amqNhCRWgYeEsMVnqyo6O2264t20sWOtzV9OGSK+qeW8qaWWdMJunwPFji26hKpJCkJXJDZtu8OLO3f6qd46vwjj5GpzgIbODSKwLNwDh03mTVuBIExTtutEOvFHVBFUYUftL65cb6LdwLl5bQ3Yq07TBu2pqRQr8UV9qShJcxBb5fvY+XAzlqaYJLCO07befHk6qlWo908XEjPdvMfxYJFqC8NHHaSh+1+LlnmjUkdItmvFIOndyoj1mqRbBu2YJubp6tbZCLAY/wDoRdcX8k5xm7Nh+5lJLWNa5RVDeXVzljQGby5jMdn9YD3fQAN3uL4KrW+i3kPskirUULuz4hUpx5iI99cN3gEvf5cFDsyPDPOeFCwR2uP9kXhwE1H4aesZqj7J/wA7BS7LMiauelPgQLkRi4uIg/ZF5scro6SFS2XtCu23x+dsqPCX1Iudn+x1kJQSxh9rUE7aP/t6/wC7ghS0Mz+g6awbeHi3pDaPN9VSHAbyIzLpWn8iaXRlpCn1ya1RMCbZ28JJVtc9dFq7SH5/Fi2TnaCy9XpV8wSlaeYkrHPeFEXhq22JDs9rHTWxmvzsRLC+T4n+atjqgWn60e2+beOJqsnkUlRM9rs9wRrvcRc3dFiLyFr/AC3gctWbOsKPhZVZxKO1RVcy71sqgBkOy1uqIc+JR9nZlRUNFvHj3JynklnDdVLgfpNI7ukN2rh821N1LzKAp1lmuH5i8tUdwp+rZMUlPF/CS5H8+z3MTSLoBUEBWVG8vkxWaPdIjkvlaikjanwEwYiO63+FHW3DxmuesQFdafPvPHLuJWP8wcJfoLhF+FlZH2Vopxu7eCZ2X6qEUh7J+rlS/wDC+bGmkWDZwopeiJKJA3VDyd0r+7jOvpdQMd2x5aSmEZI1m7On3TPhuHFK/wBVvAMlzVMbBtts85YOzevKS9cLI8ZwqmgkkXFukBS5VbNwEXixuKaOWS4LViWYKwP2b2d/aezIMg/igVGrb7DoSD7uNcZjRYIUDUG+7RQD3bND93GV+y6q2ddrDMZYuJVZq+vUjJokKuxV0kN47hv5sa2r6Xol5Scwzez0gzFw1AzImCREN9pcuvhu/rEh9lBBoIVl2FH+HM4rD5pulLd3/wAKcKJ/afbbvZPkw3bhG/STORGLeE5b+uaStckADd/BCvSBF4S68dJq3ON4CXPjk/FmmsEfZFfoDyf/AOlF4i+5XHNxf0pZPZXCgdxm8qgC8olFvB/exmrg+7+2+fGmcyY5F/lTlEzJ6zjydTFRIcS7VIW6V8c6G8iAS2jgQPMrw0yBrmpl2v7MyY/fSHGzsXwFsVybiT/UnvEX2sUASiGcXnNT6LdEdE1Wiqo9F/EY+mFN0BFDJSCyrBsSPq6MSt0gHkNcj+8PwY+d8hArRef1NxqslByvex9qse/FdDe46j6MfUhikwBOSum4jUcCFtsklZ9lv6vHjXUwiZDJZhwoCSyfVFPhCdq7LtFqikKZ0rUZEIjaI/waX7w4j4NXVYph3VwJWctuLdmVt7VlBqN5JioirA1R/FHSStwDGpc1hbNwYp8bot26KwatppdIDZjnPlJ9az8pdi8lHqni8P3pwJoisJiY7OmzmxTa2SBrWUsCW7ScbLvZEsXYb+IEwuPx4pdbXjXVQaW4geH3RewOMnw160lquNfUN+JJsxcq6gbrbb+frx9I8wTjUslFVpdo9ctW4xqpIMiEVTMHSBBZfs57MfN4lTHURE7i0rzEecA3fzsfR7MUfSeST4A3XJxoj5rnKGNtSlF8i9klyO7fo/Ess0bUeUxV9Uj+LpyuuJ4OSN4uo8akkkCrxs1V26V4d61Adt3IeHVGJZUf1z+c8rDRVZ/SKPSVZzLlR+1JqQKqiR6A6VwfZdWKXBkszLNasNEhZ6sZEoK+M39RqrmPwKpYs+ViFufvajkiD8lks0QArub+OX/hw3t/N8lKn96KlEyNPlTkWEPFzOkdQStwOXiF4LAqhff3XJyYaUHJQJZ5Uqz9TyqDw4M1W65PElUhDhV9pDpCd1l2GNFmbWEjT6TqioBEf861L8BYTodUP65akUbC/wDRlUx9xquONQ2WlKyFC/tNKrJZvSSKACWq3adIlb3RePAzUF4q3WBXSS7oy5ME7tJLohnRLIkBXA3ZBz7L9K78eBesr9XU1QFcgAxPcZHyYwlw9eS2lD6oV9M6LUL83jFZMrVAh/QYf6PA4oh7PPmkGo7qSSUJxIuBVuX5gutAfvYvlGL35XtVur1B6P8AZFgd5WrgUTErEf8AhDsv9av+7ibRdgz+f1LPx1ueJXDL03j1hJcVMPlSB+NhE4K8d6uy7AT7StYVbSdRM2EDUj5AVTO8iMC/QIF1j5sFrJ15q084ULmJ0JF/rcZ/7ZUo5YVIxcoMHK46pgaiFndfVWpbvhLDB9yDUpKppqb8VXc7M657L55BuXU3Lkm9hI3a2BIt/CpEfPbjns29oxzW+elL0erJVCqT31heg7QQFItJmuW4gK/w4FvaddnOSlOsBbEXCQMUuWoOwtVm15bC8hYb9jtqzPtWUWsgCVwJSpXD/wBQXH8OLKOTrspcym/oCMUYu2crbmxBnut9QmZWj+3wFxXWV01lQIr/ANKlcXJb4MGbtiKgWckKiqZWnTh9PN9YwGxFs3Ee+usvK1RL+nRhXddb5J/avgwrePZQ9BoZNtTE9wG/MOrrLAg7W1aVtl3TtMyTUKemievwamUvAoOdK5rdcO3ZvEsFnsnqEOTTcvT6Bu/K9/8ArlgTduYAcZNw79we1J6yFUR57DSdCdvxYJtpCLTfyvuSKrAutORQH7QXaCq2ik6JBnT1CvBd0bHvVeOpdqvaZkreA+BLy4vjHNyqlchcxKiGEpAVo8Yokkkqfai3VvXV+1StsPlwB+0tSFQzMTQcw1bXNWmX0UaqmwepXF8pGXZzfZZzScs7ki/gpJVNTmE9Vfn+XDpqJCJChnwIC1KJy0zmrmVzLoSMdQNCpIu6tj2qpIUqwSVAOMITNI7dh7efzY0Z23BBUaNRO7+NPfuDjKeVrMEs6suws7v6btyC7/r5WfexrDtpJXKUaZnuBWQ+6liy6/BiU7b8JFZnTECRK20Sus9rA9p9rpVZUzldZBcXrw7bVzExsuStKzzDgkaVvOA2h5fJ4sCWlSfun1TAKKo8JLOB1NVXd3pF0F5sZqj2ktLV8quSLds7a3oOVUryAB+sKjstL3DLmxq/IZ5GodmbMp9KQqMo39dpKrttVdsK/wBhtuG0w93GUo8UQREFW1qitg2kHKdnixrjs80hUdSdmev4KHYKlLPZ5IEkxJITKwGp8xEIePHhmbun2vs4oOqjlavZ+0q3QNR5buq6jUWWUCcc4NJ6YuRqB4VocGuRhaZe1ge+uctAUZm1ylSSK0DAhqN1dvVSH3+bBXpLsw5mU3WkfUz5jJGmlxoq6hs9IdVqqkHIvfzH4MUJ12ZM8klI/gKJVJMNLVFddDaGqkR8ivluwyadajBJSHpLcke2ZZ+fp4dhanquPt3H4S2bP3MCWLFskpZo29NxGr7/ACdXw4L3bKarOM8pQ2oKksEWyILR8hdV2AmUk5ZOBB1xNprgluAPF4rsL3zmSd0fqhW3OySEd+YeubkT0ScvfSqIqncQcEly33W7Rxmmn2HZ+CWTWhqVrFJwSoH/AMaN7BO/Z+gxofsYqvpTJvMVk29C7hb0+lVJLxEqTW3b/wDUxn+IyX7R7Z83WqCnKpdNb0tVMmfKN4l0f0tvxNhgTYkRR3fWlxuQqDFTueM7lpFZq1GylYuunDj1iqq4Vj3iAt7/APQbMTWfk5lv9Cct3M3FVdw6tIN3DMWLpqKqTcuS69Iry9jCGaOVOb8lmdWkrB5cSjpnJyJaS+gVi6Il0/EXRiWz2yvzFqCnsvGcFQ0k8KJpBu1daTU+6cDdcGzF45UBFVFL4kIpx7k5+amWWBhXCrM56CbndItdXVseaVvcWAIbr/cxe+yo6oI8/KdCHYVR6w0noJKyD1BVIfqq5FcIJB03YpU9k3miOUtQRq9BzST456HdN0E2CpGqCQvL7NvmH48WTseUHX9JZy0atVdJVC0EEHpunb5kqICZM19pEY+YRwwDK6sRS5lScpKP7TiQFn9X14CRcY00hIi/5g1wMybs1VCN0slqXmdxEqJl47ui7BK7SzBb8/VdObNVM5FleN6ttnq1DwDgdtWDkW/6cu6NW0klb7LLvfwnqfWkn1N6oVoTM36CN+xxQ35wWc++ivXCggMM6SSXv763cqJCY4DeWsbkPJUvmQdFUxWySatFOG7riX7MVVW/rFqJ2lpCAFePMfRfg25jUHVOYPZAomBpmNUeOvXarg9NIiFIB1d2zkwJMs8lq5o2DzEYSUVUCq0nRYNUmxQ1qRK8e1vFIjLefkw4aYpgoW3Zai/skTzjhVLgx0qN7O9JZSxecFEhDfS8ZD1s3tTVlGS6CR9GrYO/l6dnmxNZ/JI/n2rq87f4UtuIyHlbpeUsSnZ/oap6czWpeSlqYk0NWbbjcrHKpaSQau8ttgdHx4Y9oIwb57VyikYiotKWWqDs3t0uYfDiq5ZQF2ZIi2TI9SHqaSIs3SLhskVhKjrqgqJ+9YVmAnm8kilm1QYJXDe1amW+7/D3XjwdnyCwCUkwbK6KWrqpDqkIh0DzDZ1WFgG5rfX87KJbL2pWN2SSto/9KXK4h9/FNDvLwkmD/vD4hWkngsxWW0lrVP40Fw27O6E7TAfNvE/DjyKoGKNgIKuG5BbauVivdW3D5b91uFnSSwyThtxgpKKmkIJaRjv2kG3xWcheDDdZm575m6NAVNW0ly1biPSL3AVxzpdaXSxcGsJpAuVlgGlbd7F235sc8OiWmDcFRL9PpWFce3ms5C8u3CijU1d4ySCaZmf8WVMvD0n8+GKYrWpuUAIRD7Xp9wdxAY8u7bjy8lHBtiYkCSIpKW2EqQqlvu3+KwtvLyb8N1BWQcIgqslonYaRIGkqlzD1Hzj5sLOtF011gDQcJAYbiAS6htuAuXzc9+Ex7pYXjNa5EC3pE3G/pILh6C5tvV14tHaoGkVPq6ZAqYkjyGKavj6LQ/2uIWUXBK4FUXKSN/dCSSQiQBu5vaEhxNPG7BXmYFwt9mlwo90G7cNhF5dvsYq8gkYiod6pWK3gIjuDlH7+L2hVD5Im9rFUFf6ntlZ031TdzeSTx87lOb04+hfaxvL+p9ZUHfd/bNu+CTx89FOb046hw7oo1+fuIfhpfnmxSZf3ccl1Y6L+7jm3xYfJEiBkD/72qhbf/ggZf7Uca27chAXaAlD7rYwZfaexjJvZ9G/OyhbP/ggZf7Ucas7chB+f6WAuY2DLmDb9l7WM5d/hAra8I835/UgWToCGyxmSgX2FpGIHs93CJEaRCaQIJb9+mJ/vYbkKIpkAgQkHk2D82PaSIplaiuI8hbrvv4XgtypDlEQ2pplvuG4QL5sciYK23ncN3Nu+9iPTENtpl7OkP72PXAlprOFrhv2/Vw/ex9UE++sgSeqiqoJltu8fmwmortHVRG4x2EW3DfS5UVQ237RvEt+ORHSIT0UiI/DaWJKCfRpGUgKI3Kjz2838/C1bMpX6JunJBoIpAA22dHv78NYfWGQFYDSEeS4SG74cSmYCrlKi3Ad+Q6Qaq+0bvaH9zFf6UUHU7UfMhb1cpY+9hajpOLiJV4ldvLf3S44JjGOjbkza8YRARj3kzKFdy7gvX2eG7yYFeRLo/wA27NY2ZEIJOBJdKGSVO81S6j3n04KTNLVkGrZK4k+KMBuhmpGPLvEg2AXmLZhI564k6a+DD4VYc2mdPK9g6qmdRzzyDjfWLLXfJtXEgql/CiRfZKq3nee3n6sZUyHhMogpnNz1XnM+fJnQyoPVypRVDg0uPZ979r3vKOzz41nm1R9RVv2F6xpykoWQlZJxIsiQZto4RVVtkkjK1JLybvdxljJnsx56U5SGbCc3lfUTFSoqGNpFguzITcrce1OzyHt+XG1tAzoxJc9uRe7CVo7MbXLFrRucyMXnArOIuKKVSdLqU0u24FLd3u8u95uUcUnJGkspUs0OMjc/mcq4+j9QJA2GmX6RiBxDoTK4xs2hu93Fs7MeSeZFF0HnkwqOgKjZuHtFm1aivFqjrq3ltS297gd9n3JbNGGziFaRoCo2wqwNQICorGuEg1SiXQgPLZvMhHDWPeJLQRW7GMDl1CVpChT+cbGeUOo4+xBCBftt9qo23KpWdXjwZM7BbfnUklifkkQM0i2hddvL9gX9OnAN7FOV+YWX2YUawrWhp6FcBU0era7YKjt0ld1/Jbu8eDpnMksObUgsTmTQR4VICJs6XSt3F4C+bGcvXqvlLQcP+v8AkoZopMHrhwZTypCaHMo1QL2NvC3/ALnXgy5KtmwZf5upPp30elM4cgcOXCQd13S+89BK4vhLAqUiG2s4WbzDzvUgC5WRdJK+9u+bqwWcmmRq5c5xtkrSJWBVSFJNwqud/Dr9Jjsu8uM9TD2orR3MvcxLKmSuXlEtc5I1+wz3oyQUuk7GjZhLCqV7NfxsxDZd4+nEHkXkzTcT2gqFqFvnxQsgTecj1RYtmsyLhWwx2jexELjt6jHEtkTlvMNc0qdqQ20uLc3UgkSqsaqLcb2roftfFeXlxA5Q0/MQ3aEy/B+wVSEJ6MPUsuSLcPVjf02sVzx1QNB5N021zWp2YQ7Q+WC5N6jaOuGTcSnEEYOhLSETZ/a9Pgv68dZqZKQL/N6tpL8+uWjYXFRyDgWi794k6QvdEWkqJtbLg5efnwNaFQtzup0xRJL+21ptVC3/AA0cOs/Ih4yz0rw3DNdAXFWyZoESRDq/XFdw+McTIle01IV9Eu1464WoqfWFEXN6Cu0THwjy3kOKjlh2mMvcsolYJbJl1POgVAXUhckQ32jsG8ist8PixMdsqLWl5ilURBqQ6Rl36QK3AYjyCeAPF0RFN5CQMwIibs0nGgmyIUiM3SCXKGw9ivLZjJvv9XqScHctQxTdaoRaWq6EzDorMvP+jqkpXLVzSbpZJxxl67ex2jYRJKikkrzc/OljGmZ3Z2lZTMKqpJDN3KZJNxLSCugvVqSSo3LkVpBbsLGluzdwf59YIPU+g4MnB6gMEkhvsK+4g58YbziHhc1K8O8lROek7iESL/ClcE2Z8qjMIkBdqcachaHuo5ZoZGTz/O6amEK5y7ETnDV01atZpOLDIdhJGV92HXa+yHq2su0VV1Twc3RIoveCMEndVMGzgQBg1HckqqJhy/BZgL57KouO0tUnUX0hH7w4uXbi9VMO05Wz94iq5EDjxSTHyxbX5caBJIJ5nB2c8yJdOhTYLUmXCURGM1dSr4tK5UCXvsvXG8fMOzGsJpg5jeyWpDvzFJ0yVaJKk2dC5t71LcKre4D93GCc/n4JN8ubkbk/oHFGI3ht3r/097G1IdcC7JLpmB22NYxUSSO2280vBhbcvVI63+vFC8X7AkR/htzdw4JWoNXV4mZluK9r7O7y4UUXjRb6LWeXEtUBtEVdp2edreH83HUeLxu1vSmJNVPSDiB9bukh5i6gVv5OnHSwcUSayUkqkTpexIhnnlhbPFbefN14xcxXQY61l2sCuJufElaBmkY2coe4ONYZWqxv5u4dF082qx15WtxvCwPEaVh4yrWjhztRdANqR/rT8BY1Rly4inFExfMgibPY0+kDpAUg8NocmK7oJEw2pW0ovuKSbnpCx0pgtM3SVwkk3K77K8tiHs8/uYAv9UcZtle05KLGdqnqGKsSv3l9XwdHgosOFNq/FNEnCXdjUbxcR5du/n9npxX+2x2X878zu0c6q2gaGfSUW4gY9BJyI7C0m5XhdydHVhhw23qcSPi531fyliWLVAZBiiDMtYHSV3Lt3D5cfRPtDSkVF5N1q5cPEBTcRyrdIiL7VU9oiOMA/mgzQhqjcOXFNutCn34JSiaCokDY0jtO+wvEOPo7W9CBmVCO6DSlWce1lXCTUiINyoE6ETESEhLquxfxCyGAMYS/SD96G4ZdgTxf/GSqeSPZY7JEvlTCyWaEwzQqR2wSdOhKoeGEQcJaoFpAV4cxD5rMX7NRgCXZrpFs1BByIMqfSG1UrSAF0h2GBCfvX4F2anZgDs9wsxFUqwqmuBq1u0aqtI9k81WYN914ugIrLuS20tmC3mcw4Ls00i2f08ugmkyp9I4tdK5VAOIS7ohVHeQ+cMM3SImHpCl9HEalmJIQrCAi3AITvgILiVkX9hd1097s/DiSdMAa5c5mPLFUHCtAyoGguTi5IxNLpVIgAcNVkgdKJohCSCGkq3tthmRWhpbOqz4cJ1NOItaDr4B45yLqi5NqKTaOSHQut70rP0WMhQj7oFbq5Oe5HPCsm1FVrB++eMAfpL8OhpJaBWpXnuuu6+UcDOvpYJSHarEApKG6MiEeQebFoi3UDEajlkEC+UNC1L1kkqrafiK9LeWKzVRvJlu3bOp6KFNvYCSSYEkFnuDjp4yMlyIiGGlEzLOefpUjFsGDxBVQELNEUlVSHcX6oSxV8zn8rLtnRvI3hiapHqkq1tK+/kG/fiNjZt4wp9OHZyseP1fh9RJW0/tbvD48Qsq4nn7VZGRqdJdPSs71/d9/H3UvDCK+iGZxArVVKnraBK0kFilqX/OC2d6kWKr6rcioTlKoVOHcEelakzK091n6K8Pf97DWps0KYqutKTjYF/IKvGlPpMD7pdt3pld4d47h3cmHBFJXKa8qlo84CUkqN3N1W7/xcmOaXBsgfKS6taHPcYwSee8cs67H7NhIyS6hJZkt7l1NC4fqDr9UIhjI7Xho1usCry4vLuuxsDPxA3XY6UNVYkuHzDaHcrd/zNfy+fGM1Il+wJM3TZVDVG9Il0CSu9m/GzszsaQVh72M65xbi7NroF+wbm42O7h0nT20SPlDhUCP8WMqjKM1VE+FW0rA6Txp7s4pGHYbzystLSGQV/8AmckX4cYxialYGomzfszbavKqJ3CWGo7UqJbo7Dq/16vETMiUOEaHu8ipYhauHSr6slhRQEvWjj6yqqQ6R7fAqNnwYkOwbYUxXQCtdfApFd/7RiLqzRSzWrDYkX8KK7fVYLnyj1HyYzPEXqxWq4W9eS5eKv8Ag712DNzYdgJpE6SPm5ysX/3cZbr5I/pQIOliQTN0Z7VTLS3lt70ubbjTigsCal/AiGw+mBSHq2dV/i/HjMdfLmxqhFy9jRXRJ4Yk2UQFIbDMtuzf+PCSzevWlvOhhGCj5IxqCn73KvEBLMj7hIiCzVHb4PvYof8AVGEm6vaeqA13Jip6tjNIbOb6uI4IXrmBdVNBtggUo90k8ZCBIE4sJxcNiv2pAdwbenHu3PkHm5XXaGeVfTGWsvNwZs2SWu0R2naG4Paw7tzgt1ki7qyF1bzWtK3U47AeWJDtkqoQE+oZFL8aRYi1v6ntQZD3FbVakXSSj9n/APOuDTQWa9WyYN0aqSj0XJgSi6bRA9peHmwQBqwSH7Bb3kjwbbfKhWV7GfSVzkVl6vg2jpSynaVtZGW/qfMCkPdZizV3TcDVX8I4Z/8A0Pky+wzUfCXTdFpFb/rRxsoaoR/Uqf6I8c/Sth1Bb7uG4+Um7htriQBcH20t1KKxj/8AQ7qn52ubpf8A9Mj/APP2E/6wDMtAbEczmpDy7oYh/wDsrG1U6njbdxj8OO1Kvh0x3rJ4Oa8p11IYlWfRw/BBlwRapT6r9f4rAT/+p0Zg+h0i8bTlMk4auAXbq+q1Ut4ndcQgReHBFY5D9qQZETqWVoWaamYa6pIPGy4h5bErPkxrUK0iOlwnjv6YRFv8YDGcvN5pOIWibuBNlL2cB+roT220T9oIXaSQx9rH71h2qwfUXOKxku39AGncmBkJD+Uh6S8mFFsue2cKY+llTeVOke8CEX5X/GrjU1fU/Rdbm2klQZDIsl0lxUXC4VBArtNUeocXVvV0Cn6PQh6HCWz0eLGB4bs1NYyebzhiW1bi93w7q2yQs9oO5YKqhh27aXZ8YhlpQ80mF5EMW3VXMfdNe/EdlpW3bXzFilJqi6HovQSXVarg8jlWukqkVppFerzAfTj6IJ1VDrFYC6fxY+VHaDz8eI9pGtJGkqtqoadVdA3VSpuR4a9VJJJI1bjSVS5xtus9/oxq+yP4MQkkjDrrshcGKJub0P22a7yqmabruiqSRiAfNdUW3pJs4uSO4TAjVsMP3vLjEQv9VRM1UUiFUFdwq8p4Mi3alkhgaginTnMSqGps0gVjZ2o24pFq7Qt0kLz5uYLcCGWqH1i34kKPiqaJuRt0kI1d0uCtoXGapKqq39O7bi9gXQ3KWEEmJObtrndb1brfmwSsp87swso0ZhnRrlikzllQcLi7YCvvALQt3bNuBSjJGqS1zZUkTDeJcn3fHiWYs+IETFZtp2XharpHZf7OLHdq+o+D21c4x+1Wpwr9+6J3F82FE+2hm6BWEjSpau/dDH+BXADFg5uUWVcsx3WHvtG87i8PlLHRIXN/0WpZfzb9tvl82BstpSij4XbKzXSUJHg6QVU6v4JLb/rcdM+3DmiBFbCUSuIBeX8Frjb8C+M+6RiOs3BsQn3pdVof0HHSjVZdET+rJWdJWiXP7OJi0C9EFqCP7fmcDAvq9K0SO0Lh4B77n6fABrqspiuauqKs5Fh9YlX7h+qLYDFJJUyu5DuO3m68VluqYqC2X2pnzaRc3y2fFdjwk2+sbBETHZdaXucuLIqIjDaoesnV1P6Kv21yXLyWYRy7VNvTtULWEXex4fMRfhxzWki2BiUaLnnEHQJc3Vy45oFIPojUlpjvfx4cvlXLBjmijiqB+ErX2SNX+qsk0QUqZOLUScKq6Vm9ICXtvItcdpGVtvsYN4v1yj2freRd2mqKQDfvv3bC7/m8OAlkXOv2eWcDFOknLuPIHZhoEKWgZuC3K96JGPN0lzeXBzWSeM41g+eqmkMgrYk0uISSMdopXavekXQQljgF+DNqXI94l1C3kLTDckvQ0ibqsaZWGeuTcSKQEnu9mzmxUv6qujLKxlGcAzcrtWouHDi1K4BtILLvmxaaWrODp2rKb9eVE0bIk8D0i5WfJWECQDcNurdgtZpVtkRX0c4YVrKUrKROlpKi+lFkgt5hvEBt5hxqOEHGaOmdF0hEiIVm+IcHir23G2yIRHlXz9zfcSNDZut4OgX68XA1cziF3MS2X4ZBRJ011FUiPoEiESu6fLjQHY3zNyfkwqvLjLako9ipCwjiRfSDZr9rtBK3XPer1c+Cm9jsg6lNtLuqToWU0WqTNBcXTtUhbpDalb3HKIjiPYr5KU+0m0aGj4OkZiQiXESlKNEni5+gD5LUlUhvG+0rb8PWbnSsNZDpD+f4JZVYP1uA6SWPOy/lll66yXqap8xKTpF1IOH8g6ZKS/Ck44QG6Vlt5X26pF7+M0UblT6ajy+qiqX82hEBDgGkg/SL6yuSqAiCXmtP4bsasHsOZNU27WOS7RUeIoIASpOaV2ikfUXfjbyliXW7HGWTxFFx+fKNFNJCxqX0LKxVLo3JL+bmLD5ziWjIREHBVo0hSIol83FN+xzA+q8j9FeebIC3quQDU3WOQBJqO3y4NJ023QZIyJ1oisWoSG01R3iIkBB7Fw/DiJyaoGlcraWY0e1rRlVMarIu5JWQfsiaDeqIhpBeXTpD1YuXoQXVgkvSunSaCBqkQqJuUvyEqIp3dXNbbjk/E1SVRcnnWikPs/wWvtNOLNI005p/94qx5CM0V80mawTDZUkmqokkLglT/puxjnt/RYT3acmGzUCJ80atEBHxd1d9zGzsn6kpamcxFlpKfplk1BmQIFrgkqZbcMq6hsnp2sXVbTVAULU007IwVepyiyTiyy3q8m3bjTcKXJi1UOe+WqRfUs1xBSuu3EgaHTEfxXymi1wubhwCCt6t6SvV1CaWPoP2Vm1nZUzRlUm2lak+NK4Lf8CH93EujRXZ41CeIdnCjk92qCo1ABe/zYI9F1FlvEUrMUZE0lSMTTcuKov2hTJaS+qFpiVlxbw+7jSVfE9vrxyJJJjaqprtctfJKrqBWYDx7WSbM3jJql3TZ0FyvNqlzc3Ly4eZYxCL9vKP55FeQFuy12qZOD577bvOXJt9vyBj6cKZJdkpARtylyxHcQ7pdf8A8rCyOUfZniHPHMKIy0YqJBfalUzlIkjHcBD3Hs4bN32lqNJEKoOjqcNrZJ9VYg6nCbFJSTMWkIyVBVJVXSQMQHcQgqIHzW/7uKio8B19cjqhlXPD8OOqKrq8jtt5dX9KYl7OJDMCoG03NKTEXKkLeQAGrBdJmqSSSqWlercduqO0hxVZKqEXsa6ilddItLVQVJLSFWy68B3X78cjvPa3BwhLTJb+3tEFMIl3USstpZw4WcIouV3GlIiBpDzJbCt3XYwy4L68sjt1EiPmVuPnxt/I9JScbKMY30qSAtXCSqoiApCgBiXiLy4w1KJOWck6YSlwuGjhUCEgLaYEQmPx4Z8IsHmPFypfcHQzYJnA1G8lHEwC+kkMfKGzS0vACGJApLvCMtIk7+XxYo9JuAJGcWSWIeIm1e6sK8Nojuxo5v2Os+HCaZ+pI0dUQIRKYQ5C8t2OguiAnFI8/TrQjKXAftXNt3OOIt9UF8gzYAf8YBxzH4ECL8ODcp2Js/iIT9VQuzkumUBwO8zsgMy8r5ilVq5jY9i1nXTtgkuhIpLhvQITus9vF7AiaqJ8T2kqm3QlX7oWbBF85cAF+g2SJUxDxWhhZxGzyG9xFSaX8uzVH8ONB9hyoGcPnuMa6mnPpUmKcdM2CBERAbgVUlyEbR2d0grzY3ItmRDILKNjYVSZIkaRkNLyhDePmBCw/dxF1yBKsnzA4L5HE6NuJa/EpEB/pbxH7uG5SzDU3uREvMeProWaFPB9qzqgfapeU/8AIw3WzSo8RI3Hr4RDd3tOSX/kYqKpJRzvZXydayUbpqBx6AkfJ9Yx0TpmBCYvEBs5bVR2Y+sX00o9f7WNkP8AOU48/GhhQavoYeVEh/8ApM4/8rERqVLO9lfJlxLthttcjb/1r+bhq4lEUGLhyJoLikkZWiraRfLj63KVvl6wEnK7ls2ENxqKRyogPvaWMe/1Q+WbfSCNbJGmTdxS6SoW8u9dff8AKOCWnSdJQz56FlNN7q2m327A282FBl1rSC8h97EGKoag6TlIhtAu75NwDj2rtv8AxYMy1OanCmVrbCut8RDhuUodpBYN3T5sQpOjusstHw3YRUIy5zEfjxLIUc1QdSSIPXT64Eh4cgASv9r8eNKZyibWUyFMVrrcvgIPfFf97GW5BW1SUMDQ6At1d99hco8+NOZ6PQcFkDaz0iPLsCIhK4yDdYOLa5r3GSlai/zVnxKHJ+skNiq2kJ+LBW7Kjw/z90zzERkqG67wYCZDcO7VEfMHLgsdlJVFtnvS6t5Wiqr9zHPWmO1HxLsV1dnQvD7JfUjt2RnXC5CtQZ1UMe6+lUxeJSOh3XFK9N1nTiarx1U/qskfznarNxESBroDNiVx8oWbt482K32SnUah2e1DkWzkkUqqkNUkEAX/APWKvTdf1F7g3Yvk4VDDTajlk2cvNWGdikSTD7Xm33XFy7vhxtBD0rhBFqWL+yXOZnQ2U6gUVX7ODZ+t3FyC881Y6qtg9KpDfsxeKgm+05JUe4AM14/1kaRiBJVbHFad38r4cSn9T/qPLprkrIQ9aP2bYvXzhX62kOkqFqQ9Zc2LF2rpLs9vcr3jBhU9PRihrt+/j4tJyqNiolypEJ40Asa5JbNZziTW/M/liBnu4ObvtIC/9buurD6N4ldQbll7vCOIenS/4I8t2yW4UmcqF1nMHrR0QfexKR7pEthtrei7m6vOOOYcQfDnF3nhP/SmfCtWtYl5P9smWivoqzlWasLBrul3saTkGP8ABzyw/AF52jvwTxooGchJOWuW9GJcEF4kMCCRqpbr+fFIoxqBdrippJ1MExYtKTpvVDVVT4q5BezaHPbaWCHpM3iNQQ/5yLnSqFkWKcuSqqRqpCIXj5zIujpxpqUpNl8lcVqvWYLBfZ1p6Bl+1hWkPOU3AS7HjZuxjKNRXalY6Gzb5Ob3caQeQ2TJU68fq9njLJJNJg44i2GSHekraY3c+M/9mFU/68iruDlRbKG6nTF3xWlaHEeLG1KfSqpeQqhGoK8YrsQcB6uEZtAjEDuExKxXZy9Xiw73mlprI8WhApVFm8jTkJHxTH1tSSqTRkhpN0v4JVvtH2rvjw4U0dZQ0tK22wMSk0SKWZGeDbWFyQTNHnqi41bg9UK9XXiLtuIgvuLw45dxgMa6Psiv0B5OC/yiXtF9yv8AX4RR5U5SBNorqxqUpUrhwkgQapAlFvCK2/bdtwHpxnkaUgtwp5ls07QVEU0otdIdl3WN+NFxTNtKROQDB02TdIu6vmm6qCu4FQKOeCYlg9zmQ+VyzNZZfKWB1tAyEkgHw+zjUWRwgpm/CuTcQ/6k94i+0vk6sypVx2ioVnR7mcSaqv2SSq8oyai41de24QS2GNgjzeDG+mdJVU1GQBLM6qLQLvRGBjefSGz5LcZdziiGbDtTZe+q6bShuLbw6vDcLpXGbwt1u3y43UolVvByR8HTyBGqqFpRDgdXbaH6fy42NNqIfCsw/oWOZBKVa9rSjW0jVUnPOghKjSI3cWgz0vqH7It+E2aSIJtW948Q6EhSTLmLSSJUh5fCJFiUqxxIuu1bSrySjYpsojHVagBR6C6WqYRolceqqr+tt2YqDpwAZg0GzFsqKl0ld3XKHArj+LGI45pes1TLXskut+TR/q9G857Qq3tUFicIhoq23BdsPbio1oYDWE4sWqSaro9txWjsHbizNS4h43DaJXBusDFdr4OFrqaZoLCIg6vEvBtH5d2MRw3ucWz4yLsm1ExL9m847gzuKPeA1Md+1W0S/EOPp56YZpU2XzSn3L1RsK6TBXVFO77JUFbPkt97Hycy+kLxqcHTYk1iqrvbtwEAJCIfdL4vLjVj7tD5mQzpxENamcptmSqrVK1u15RK0OnGyJ3CkqvkrlVZTHWtDDlR0jOytRrWnHVKyFVTL5i7l2s2uWgKZKqt9Im43B0iSQl5t2LN6ciqUBWoFo56oxWqOTcSj9dNiHELmrdtJXmMRu2CXLjLinaWzaIv/TNyIgAf4K3/AHcNy7SWb43W12+tDm7puP8A4WC2LgLW0fz/ADS0rVVHqIvz/JadT7PqLJhHsY6rX1se+kJHczEjVN0IjZzdFuIqLyFCksyofMt1VT58tExbiNFj6uEQXvEhvu1fPjOifaXzbMhvrqS5eXRb/wDlYp2c/aizijaZayUFXcyzUBfSVUIm6l1/+aDw4a0l3zXRaihXLQ+AyIk+7RSqK+d1YIkjcLc49I91v+AIF+L58DHVNJFS5a4TG8bj82IPLWuakzGY1BWFYSSsrMPZG1d2pzlagkkFwh5BHFgeFaioaQbbDuIcJ67Q+Qp9R+qFfSalXtURmVcIrTlOtJt+qzRS4V294ZIxPnuKwvu44Qks3LQFLJWh0PQPp/KP9s57brvCx8xYyNUGdNfwcoUOwrOcYs2QJJJIoLgIjtHy+18WIdbOvMgisXzCqHrIvrpjb8uKGK4mmhbFL3LSZkRaf6razFbNpmhos8rMvWImf5SFKfXt+HgB3Y9OUrWs+V7mjct1VCK658yVedNvhHGI3GcVeGmIFWE4Q9JceqV2I0s0K2JP/wBMJwhMbz/hFwJj82CPOLp7vz/RfPMxd4Vsipcoa0mmZH6aUyZdvk0QSQ9MhSZK2gNo23EqVoiG3FXgsgs2KZlGU/EMcmIV+gCo+l3EUcCToL9vdKAImGwjEtxc2MvlmDXP6WsJwrxAA+vrl4R8WIGtKrqp7Rs9dUkqJJNTVuJ64227vF5cE01xICiqztJ4apCil2yEnP56IVsW0vovzEJ8/FF+7gM2g1IdU9vmwJcl5SVmawnFn79d4pwaVpOSJUx3FgxOA+qp3AI7d9vtjiF0GD5CmFt9QK3R2VHLdnk6xUc6enxLpNVNVQR2X4IEshlqu2bozMRAqoty7oXbtIhE93j9o8fO90QJRMaGikSirMw3Dd/hCvLiFecHcRpNkC2dQhhfS1jrQ5Y7VW/aRdcJ2S3vIwPZufoIx0lG0MqkyZCwSSVlUrUm4kRaVt3LeR4YIUx2V2kHI0wyRy9YR8qSRPWycslpKmlyXjdutuLGC721xWNkiG07bUh3f0uw4JVG4fqw/CGChrnx5lDG0iXMtlK0f2T6dct6mbzmWzV7Dr8a1cel+RaSqRXXfxrpPAf7U2b+W9byVGxtJV5AzzxIJBdx6veCQpbEvg6sB1EQcIrNiAbVUjSLzXjbgC5GlxWYzi//AN9Z/eHDJupcq6ZzN5VThRjRVLcUei5XBhaX3x5erFDpVuwSRlnjqNVVTcSKri4UuUzdK2bujF8eXq7zBISVPms5sDHL/iWTGWZq8Sqiq/Mx1dtwX7+fz3fDhfR+rJNKncKuwv0Um6gd79qAKiu1JLo6ejp5erB9yC7SEZlfSkhCyFFoP2bqRB4m5GRFMBvFJIrhIS2haO7GerlkFis1VUwE0tC9IVSDlC0rS5Dtxy1nH7DeZr3JKhYImGqW7eF1pbvJ5zxAm5IV0AMIGtqo9tvLJ6pwatBIF3WqIk/SILt+zl/ZEWOlO2LlMGsCuXDlPh0tUibLpcmz/wA0cYo4oxTTWbvLvtTL60lYIWbNlu/w2hv8+EVnhgo8AT0NW9JC20h2GVgefYRF49+LxkG37IofqdN3fpYov521bQ+aFXvqmj6fcopG14Ml3C4laTcyHpHeO27n5cDhwrCMJAkW5pawEBpEg/IbfB967EHa8uF+ktqjvu1VQsVC/wAXh8F3jwsiu5VTUB65SXWBI9ukImqduw/Bd1ebESFEBo0LUXZjz5o3KunJmOmG887J44F6KqVitoCkNwFuHktL3cGX09s7KMXGiTWpNS8B2pB1JCf63w4wYnIvGDN0i1VVudkkJpCkQpK7B5iAuazk9nCab2S1k7jElFb7Lm+7Z/ujtx4TdDSKHcoGHTmS32n2zMozH0+kW1RaaICR/V+X2t+O1O2FlOl6C9C7OpgsM0rSabiILbuv9qHxY+foi/0UWaTZJJTSOzulR7o7ebx8xY8o6cmSZkiLN0aRq6opKjvEPaG/8Vvlx7NcVfmymX0Bcdr3JMkUzcq1EKZikYlwpdapJD1eLHk+09klIpkizkZ8TEj2i2O7ZcRbbvIRY+fQuJjWIDWbd6QKiSaB2EGrv5ys8XQNt2OSkrVkzVPSsE9UdpHZpKjZsHr2974CPxYkLpd1e83sB3kUM86joyo8z6grOG9BOWskTRdUlmukX8XSGwr/AGbvlwO0/o8kpYqzbcOeqrakNwD7O3ls+G3DFYAtFbutPutVPVAki5R5ecCw3TI7R0nlqiSX2uuleW0h29YF5seLXrRg6Agt3dnrO/K+ksrIun5GoFmjhiRgQptTtDVVKzk2dWL8/wC0bkpqki+rh4kaREJCLZX8Ae1j5y8UiO9ByV31cNpgO8CEr+XZ4rerHhdGTwtVy8ItLfzbg5bwIx5d2KxMgGKFdtzRlLpX0RXz+yMXa6yWZ7lMbjuIkFyHadp3d14itxijPF/TFR5jz8xGSLaSYyb/AFUHfD/sh2WqiO7xiXtBgfi6bC4WWXfq8K4VsQJIxVLfcR3Wb7bxu5Oc8I8OikTds60nJArduvK6zaF3jCy0bwPrxYREYKbFKNPtJckgiw1LGyQ3lpHpNTG+/bt3eYfZwDcxFQLtEQKNlwpFFCdw814iXL72Dg4SRSITVRQ01UrFdJkru8/VYXL8GM/1M3M+0ZHhfap60jRC1IiP7JLp58H28d3hJfaktbfiFa6kAZ8UoaSKVrhuF6FmwuUdvNt5r/P7WGKbqNIRNJZImqqQaWgQX6RhyXHzjZb578OHHBpOFj0UhWA94k3JI79tm4+rDF4LNBbj2dwogudumhcQq2lf07C3W2Dssxz0RXUZJ4skiOzWcoIn1ElaRbxELi+5v6seFJYhEAbXKAB2JiXMfs4Z8aCTfjAWErL9VLdpCd5CZjePj58Rakk2Q75W3Rt23A47oDHydPMN2PZRyXpKQeRbkLTXilUrxAg0gt+C/n5sMZBuZLJ2Gu2dGlYlq85ct/wbfZuwxeSgaadq0ZcF+4hVtsO6y8rvdxCvnWlqIpLNtQ+a1AiAT2+DkLy9WDmqaaocfUsToEllDFYidJD3oltIkri3EIF4x5sV99ItiU4PRZrqNOVBcrSS93ovDEe6ehxHdLNiWtvFcUlR8Xj6vLiPWfuVxURSNC1W+0hAufl2ld+DDNqjgl7j6O/autP+p95SmltH6T8vuSGPnwf2noxt3tL0WhF9i3KavAmJf1orJeqDQJ0WgKV0mqZil47urwYxQT9+JD9cVKzxABY39mGFNFcQvmqtJNS/u455+XHW8i382Ok3DxISBJW0T8ol9/DdKYogdn+z89lB3naP0hj/AP3IHGrO3IP/ALsJLBw2qXAMhtILv0WMk5Qs5Wo80qVgUJhWPUkJdu1B22SEVUDM7dUdvMONUds6LcwOcXqdWSXkVIyEimartf7V0aTUR1S8xW3HjOXX14rY8J7iQJutLRMLejn/AAY8RgaZIq2pDvLcWHDgnhI396KYDduVDk/dwjqrCneutcmfSR8uAFuUm3IFfsjEhDlJJf8Am46TFz+gDXG7lTK7HuKAbTVDd0ldj3FLa1gh3wfq/B7mPKldJrrchAuQ3HYNp2j7N5bMNVHTYUxtWESt6lbRH5eXy4W75wRIqgugR824/wAeG7hg8H+JGvv33CN2/wAezExUZKSp/wCsSCZiYiJ9V/Nh9mEC30ddIncPdfYF1e9bhjAunLecTcv7iRC8jFVI9x2c9x45rxdt9HVjSWSG+zaIc/vY8I9qKBrC0LSGRr9ZXKWLNKSc6YJOFdApc0EgDVLpBIrBwSmcpTargWbySYk6VVMLV36RERnbstNL5cBvJ2sjpKhYuKeVyzYkaGqCXqnibeI70O90iv2K/fxbizYNLW4Kv0LrTsJSG0gHlK/elhQ/TFmkSNarByBFHzLPtO5aZeU+tTclJcC4B+qTcWxaoLpHaQmJgNniH3MWZHttZSq3f25iPj78LxP4cZPeV+5m2Itn9SQr4jsPTJg4SSGy7mECvu/exGlJNlWpIuFqCVK4LxUSe6qoeH+NdGDmql1gIiP1pW/QsOlKX1LYQ9tTKjUURSrZK4Oa5+kP3xwp/XpZSiSl1eR4j1EpNsh+LGPx4Zqs64B5QDlQ+RAl1xAg3DdvecuORVeEKiK/0EUsG+4XSqofEDq+73MXjXP91UFb2O8tkf15WTLgSRPM6DET2l/DzLn+LAZraUpuvqyKtoF/T9QxtoIJKtAGTC/dtIgVGwt2ArNMjVFrw8VQS4hsVFJ4rZzc1vGcvTiyN56SSFFFrFZbpNeZLXXPoDwccPPy4qq33agYxV1Gw1SuyFWpGLhENR56qdisqJnpDEGkY+bVNWw/xYKWTuZtGZXyU8znqhGKJ6LdVJV6kkxS2XXilql3vN4y2WYzfIVa5aqDx9N5fOW5kAuGKDhUTs/7YQfewo4qCHl26jOWpWgnIqgDdIilyHS5rLSNUtvmwMwJNFIhRlWQVTUVtou1BQaq2ilX8eqXRa9ZF+LHi7RlNrkPD1br+yq1L8WMEqJUeUk3fyNGRTl0lYIkvVALmNgdRWnt8A4kBSyxQkImVmctI9SJSeXSyEfPCuqTLwilaG4z3bD5MNRriMopL5vaEVuBx2gmBDtm5Ah6BSaoFdhZHNUJQSRSmJUhPZb6uSLGFZqlct3slPHHZVkUWD3+CE1ZdJs4Sb9YqiaSu6/z4jYeiMtEnjdyllovqaqRaRTYlcF2+2xhZ/vYgVc6C+jb2iFaI7SzqVknVPzw8cKYGq3Nyq64EiPm3WD4BwLY/jG6k8as3asECBARTxkCV79n1aQ2e11YbsZSHi2ohCUqTEklQ7ppLmNp2eRhv6sN5irX8dMEcDTzxBN61Nrc5dLkGrqoLgd2kIB9hb7+Fb8qh2SeU0adjKRMyXkThM0KfkXUk6eEaqrUlfWXEjeaSukJJW+z141UVbm1JxcwbfWB7+6EPvfa3b8YVmJJhMim2cMy07QVJs+mWpWq6W/7W3bfd7nVisrZbU2uooZotkljV5U6mixCw/AOreHVz4upiKnHSg65gaopES3dIVbQxKKOZajKaUUMriUXpIiMj8XNhhLVPlFOuCkqgoSj5Nwt9qs8osl1StG3cZ+UbfdxihrlpAuheInCPCFuOqBJ1VF3c4j7/u45a5YtlVv4ORqMk9lwpS7C6y7xAQ4M6877SB83sLcXplspZ6FTp51RVIuocABJJgrR5E1EOgRSLZgQ5pN4pelcyGFLwkehHt0mRJMY9hwyAglaqr3G0eQS24B8fRs3FsRWKkp52J32LrywXlYP7J8P3OvFwhaeeN8qXzORhKhJ0lKJarZJVAnXIqO41VSAxs6byxIqkqhshJeCmCncEhVdTiWz+PRctWbZAuHABVKGDbuIrB7/AJcPCjTXHRQRQV0lQIyViO6Lb4gX383Ry4a+q3OmswVoCrxW8S7eN283gVsP2ufHnFLzci1E2tAThC0700uAYDyWjzArs/FdjOkw73VrBq2+8sn1sK2opeiqNip/4OQ/ixsDKeBqF7lnTZso19p8KB6ibXeIbtokauMm1xKUwhEzkC4p5X18D8ySckRiTWy29Ix1bLtqvRjSmUomrlrT5+rWZarNITIlWZap7t+/fdy4ldRhTCvWopvlFXyQZ1VFw+slCTjwUiAwQ4JUjIxt282CAXbUbdyDqKfMyPYCaoP0g/2GA/JRbZdmIcAxX3bhSNrYAEOzkL/ewxnolFdq3YKnENRSICFNTm2ewuO3Atvruq7VbcraNbGXKgTWFWItZbMKpJR+vHp1LPSBsklElx1dVclQMTtG8dxfHjZlHrx0a/puYmH6DRpFOjerrObBFIAuvuv5MDOhYagKXqIahr5mM0xZBY3jWKQkK6qqojaQ6pXiHhG7xdN+NZQz3s31UkozYQsR6TNIxNm3fEKvVdclzh4sG3JjzlSD2giUhL5qRU742ipckJEMSH5yEZdvelV5Bu5VkkEk26Rgr/CnWdv7DptHFPza7TFCZuUu6p6Gm4oZA127oCXlhVD6uqK9tul4RLGgHWQnZtmVtNJq8bKfZH6WU4n+T3vQZ/hwAM5KNy2oaeVjcuZR/IKI+nSfIvWbpUmxaRcqrcLFRsLovt3XYNfriNgtQkPiVFvpmKiqEGpCXhQ2L1U60wN5TiqwKhroWIXiZjyW/wBLufFdrpuiVPVU8peYgYwjp964frNmrdya7T9KhcBX7zId3lxfCdLKtWph6wIVSC5JRJ53R2W/qL8D/O104CkKoSYLPkiewKqVy6twn3qR2fZDu2lhJRa6oYrV3IYUbku6sOKG2FEdJgmdohzDzj04/FvVq5Ci1bJanVaO0sOvqzgbCWPR2JXKEI2mAfPuIcM1kEWEgm2JsRLAVp6pW/Ljqy4qlnCTBuKdzZL3g/nYauiYK6gNWyFwDdcN1tnxY7kWnpZqJgofc+iw/SV1xbxu+7jkmJoekgagSvFpd1cW+z2erlx5WCS2PScRUa+YTNtNxpPm8hCN5RgKbUiIguFIrtLzpYLi0S8GUUNCnpUtbeZJxaohfaXUez/e2YErUjSqHLVm4tbCdNaSSjlUS1Q1dVL7X3uXBIWZxorLNheMV1jSC4RVSK7eXTdf+7zY5pdRk/Il1Wwue4xFHLs45mo0pS8xSr+EleOB+bo0HLASuSMBstE/ZLBWkM2Gz9EQkqMJ4mluEXMGCtvu3YwfJUlT0y8F4vGxRbzC1UwI77PHq/72K+WX0CzWUAGzMr1VbbUiV0g6ORUcF01yGkaERQldZiqnyc7y+giOb8C1j3DNLLpJBi6vFdAaaMUl9lp6ogVh7MN4/M6jKaWcOYvLGKilHCWkuo0o80jVDwEQFvx8+3VDRQSiK1jMkdK09AV0hM/9L+PDxnTLB63dGIaSgLnb3C5XBt22grv6vjwd5307kv8AMOqJLdieZeWMWi4OJoyKp5R6Fq67GkDbKqh5iAhv97GUa6qBseZFSGNqTeTXN014l/oKkFo7tK3y4oalDM1VFNDiRIOcRSejoecryxNR7dtFvlEUkXg6SGwiQeX83sl8OFtwuA1rUU5tVqKgdklCm2CqhIoTCCqeqZd3N3AIGfUVv+9gD11watWMzXeNhTVdWXNtx/a7TuDnK7qxpRm/ldRRzrS+nqq2fakV/mvH8G7oxnXOBua9QC8cIqJqKvLydrriqA3n+qAb/NtxRaPhCMvPqEUKdgW1LyibOZZs2zgHjRdAmLrgzIDId5CqkV4+zb7eKf2484M2KS7T9Yw1LZl1ZDR6Ixuk0ZTThBIL2DcitADtG4t2LUPq3iItzKVbK3NCbpCIxCSoqgZDzGqQnb03XlyYEf8AVBB/92sq4vR1oRRf/M5vjQ2wRKs1d3H7ljruRCwvokp2vshHSZMFX75dF3e3VTGOcX2H7uMx5YQjnN/OF/QUJmJVMbFrvLWqyL1XVSSBfpu/ZDyliq5hZfcBIFK05tbnv4QS+yPy+XF57DQEt2gYdURUI0i9O24f1Sv7uMPbqaht9oI7WX/YU5uLFTT1EakUfluzDlhELcNM9sCsmi27avUbNIi6esfLbjlPs/ZNoFv7adTe9VrP93FB7dydDT+ctPxijd22UkosNfSQHu7nStxju6rSxiRRmxXTUAG5+LaN2CKBp6sazDcx/lglxkTeHSvpGOSuSaQjb206rEvLW7Ucc/mhyhSITDtuVds6fpu1xg+vMlIei6qUp43hPCSZMnBFy71WqSpcvTcZYGlRUrwso3bM+7FUrLS3Wng9i2C/sqC/kh3Kl1rcK+np5UZVkNiHbdqxMv2daoF967HI5RUiBDwXbvq5NPzVa2L8OPlujEJN49Z+6H0rlx5tQu5dgj+9jokGK6aht45NLSC+7m8I4NCxOD+mL+WCp84eyvpM8oeRF4oziO3XUVurYkRTzNW77uMzfn4z4SWIFc4KvFMOoX5Fs+LGfsv4dvM5hUzFAxT+tyzQNv8AKji/vh1SWO+2/pEMMMKNpvSWpfWn83UiN/XBZ2OG6jP86lUKpmVh6kod6obvlwOVEn+sms4W7uzfaQbgvw3eOESWTRV1RURvG289vzdP+/jm5ZVQQ1lxKzx83zYuFgA2Kck6o2LZyRVo5dOU7mTWPINdURIg10r/ADn07RDEWQ/aAKxcxjzDj0OqCUhUAEBFek3HcZ9Jeffhx+hvK4it37yIvvYmW4l8Hak+FciJBtK8QvEb8FrJnITMfOeNeLUSzjSaxp3PFJB5ww3/AAkZbCLAxboLEonYGltAg5vHj6E/1NSO/JT1VPFQ2qvbN3lHCq7PvtNjkbiKKtHQBEgvDdifOX0KCsE9QNpDtunzV6rr/sv6XYfF2BM4FxG2eoNKxLSG2WcF728MBKvqVhI1xHyqECkqtKpPXji5dcbj49cQMQBUbNgj5MVeagWCWX8XPMmCrN5IT0qz1Enrr+Lt0GekAiapda6uFjJPOjLO+j/dWOTDlWjPR2Bc72Wxq/ox0NthCU2qNwf6LDM+whn6nvIKPuAbf+PVS9/7LGdoGBBWlqkmH/EuXUe6jG6Fzx0IiDjXv2gqP6rFJkHDr0STz6y5SRaszVFAX7qwj5d3e39WGjFNUPkQi5t9n+6GKpyh1CtMzHZGzyi1iAYSDcqBsSFtNpbvjtwF2rcxRUMFkhK7lIbsddk8XMp2ksvUV9fROZBUhJdVULAEi3XkXhx01JEkb1QuG4ytK/rPDHIKn0kUlFp/N1Kk1Q1N1ITCwLJXR7dvf0/pRHE5QbVb83805AO7ObZBdYW2xu66sQdYEByzy0OhvzbrsWSibxy1kAvLROebmV3Jsbq/vYJqvg3zVWx8JW7+zjVWYVN5L05GQVJsnYGm4VBU401yMFXCpju9k8GaNzPzSfLKDI0VGJi3arqoF6pISExHuhHf4sZ5yMkE4egaLlhg5Ryo3YIOR9PoXtAur9WW3F5i2EY+B2a0NOjwrNV1dxPPZbs+z82OD1FyqWa1zBtwtxafzgusY2emOnEnGR2jq5vtKxVI9qqtGh+ipMpqffCkP5QMoNT0GkXtiWwsKMox9T1IMoyKyhpn0IPVVeLbKw5Lei0SG264vMWIKOkY5pHvI70U5LWOySIzJ5uDSus/RdV2FpD00y0bxSvpin6i75EnPoR44b07VyTttt8t2AvOtSerOItPzfT+5WHbmmywayREZfO0+NcRtDsXUvbI5JUoxSG4y04skLTtLp9CmOmtKqNW5LJZN0kJCW5QmHpK0i9tTZylhwh6pn5V87Xpt+JLi6fK+gXWy60i/V+LbiPTloho0dxhUs/sdKpLqlxX6q79l+1L4cQK5vnrJwub4/7KXU5F0CyMtOn8mpWoEnTwGcM0ywo1z6ZJtru0vTHJERqioptLvOkRHHHqgVoz0qrZaUT6VgXEBT0Uh7q0v2/lHEK5XgKaqVi7aQT5VbgQcFqOuU10yGzl82HqLeBGDSkPo3J6yrxVtp8R0CkmV3L5vlxY7cH+Vz8/yUsbc0At9npL9n7/AG1afSwdPCNnOUVTDXgGinCoJrpNrFbdoWCv4rcR69PvRi0Qc0hT6SVyqrX+EvRvMrRP/CfKPw4rVeQi+ZtN1K2ZFO0xIE2SdoP45wV6CoOURts27SEi68SXpkCfNY+KXpaQU4IdJIhVIbzIuYtviwPVZRMzlqKX/Hdo/eqmGaicQ0x+jp5daeOaDgUKmfSsNltSbwVUrCXVd+hcySHcfO4xypS9OOov8qWV1HE8XXJAk7v7qVokJfb+Iiwu79DWn5GVYMqUkT9A68cKmqW4Nw3cuEnnojoaJiqgGl5InLhdXuycFtFIxt6eq4sXDVPjIRLb9H08uhRxp8+JODKW339Wnm1pJtRFGsmzpFPKSlkXTdqkIIr8vEXCJDaS/KIXYYhQNLPFB9ZZRUuiiqkZXIkSF20rORfH7xcVKN5WceU9IC4Fyls1+Y1dQvD5cJt3UFMWgvTz5IWTAjG11d9kJEP6LEuuVOYPaF/21fuVnmwAEuz8Xs6fi1peLoWlvTJtEXWVcAmzVIyuVXUMdLddzL+IcNmtINVJRg7dZSUwm2VXESWsUssuG8vt7cN0pCAmlU2S8M9RTYMnJCQvP7yQrr/q/FtxzGy9PzasRTZw8gglxJiCnGD/AHVSG79F024k1WP6e0/On9iK83xl2fi9kdWrf76KFN1xW8aTJilRVMNIwVxS1BYgFo3bv0nmwzWzWzQSMCKkoEUyVt1vV4+/u1fewMmEtTEv6up31dIpgq7MtXjhIt1o/q/LiP8ARNUu8FpTgxj+w5G68nyRXGVqX6vy4KaudZERF4vnfu0+8qg4bpydIjYH+X79W9ahyjq+bqSVqgplgwQRYuxQYE1StuSuU8JeUcfOjNZAG+ZVWJEikSiUs9G4SMf05ePyFjdHZm9S+hvVIQzNZukEuLXTUc6/IlzXWjZzY+f+dEoZ5pVdaY2+vHthCkJD9uWOh2IidbEyWAuDDdLcHGmxiOn7KodIkDVaYDRIhCZMw3+RLH1ZzvhpaRy7hFqXmHMK/AvQZOW1uqSQIHtIvDj5QRbUEHi2ksVrt0DgxIB2nt5fhx9i6obgvSUIzLmVSXt/0WHz4yIi9lJnyhBfOjPTMPOnLZOn+DzOmtSTXVaq3aRbwQQIOnr1SxeO186JfJfIN46O504AHipWj3qqqSV5+0V2KL20hNrIQtyI/UpJw49nSZIYvXbAZGvlDkOwSWFIkoNu6Ei8YN2ZYbiPYSQQlN9VHsag8X7TFN8ezHTSayZoK/8Asao9HtY31nVmrN5S5QuK8i4pm8kG67dAGzkjFItVW3o8m7GH+xm3/wDdhIsD3cJByB8nkEfxY0526HiyHZ2delI7SVlI0NvvYGY9aUe6pVm7UhGP9ULzLER1ct6cu6/rq+DJ2c+0tUOey1VMJymIyMTh2AK3NiVIyNW4d1/s4+a/HvAH+Prj5rsa+/qfKTwizQcrrKqkEdGbi3c/Gfu4YCJ8yXkQ8q012ls7pvI+kYmpIGBYyriQkQYEi7VJIRDQIrrg9jGdf/oiNfimJllXA2n/APDFfb8uLR/VGHqyWW9MooOSQUOcMhIemxqX72Pna4qabQW4NdyqkR/p+YT/AAYnrMtC9IAFfUjs+9oyb7Q+XtaTc9ScfEDBKg1STbOiX170iI7rx8uMydvn61mYwYkKqHD0Syt7rYQ67ouvBP7ArXgMocznPSc8Y7fADUf3sDXt5Xq53NW3MmFKskjt/lXX72Ba3QQoy37yQHyRyTq3O6UdRVOPI9ijGIA6dO5BXSSQDlDkuM9+DZPf1PuuWMbxMXmVScg66G2qSGqfhEjx12Q2vAULncssZEKVIKhcQ9GkruwL+xaBzebFCyqqy6pfSg0riIy7pJAf3sAiLrpEQltV79TlFBCVwgs1cKNlUVUlEitMVS3ieEVC3Ds5MWCpEDVmJR4JiV79wfxkWIkUDVEgExuwerVQ5w/4QedPIfL5CxprOqw0chVv/wCG6X9PmxnGpI4xdOFjclyctmNIZyCBxGQd1t35twsu6tyX72Pld8EJWWr/AFJnxKoj9mIAFvzYIOQVVU5RWbMDUFTyqDFkg59Nyqgly+yI3YHSPLYCNvs4i39OBMPBc8eug6alcJIW90fw4xACBb112swJ6nJoeZaaoNhPZbRb6BojtP5YJxMg6cOibPUl196qpK3b0thbrbvIHhxKCwrw26LZv2nMnUkW6CrJIbiG1JW68N4+YsZSRy/l1RH+252I9HdJf+Vhb829QGP/AKVuS/8AZUC/8LDrziXfFYX/AAoHtfRWj8s8ma2yqptSmKD7W+WjGNVdKutBQ27nvT6rlUC8OPV5kRWNfx4sKw7VWWEg3JXVtIG6W8fMCA4zmOWVVKkOlVu4L+Zkl+7jn83dTpKWL1UkkNp7iaj+9j758fD9IP5/gojwY37X9ERKkotnl3A0zQzCsIqoSh2rvVdxdxJfWHi6ttxj5sRMekBKNwSNUivtt24aw8ccQzTZqvCXIBt1OXqIvxFjmfhJidbC3i5tdiJjaWnd+DGTq3Ou1REXMukW2h820IsDqith1nAdp2BzRcV9kNR9JzTKYp2FZruZSRQuSVaircIDrh+txW2zH+qCNnjx+nkRls7KQbt26ok9bkFiV1lt779qW/nxm1nT+bYiJxlax4klZtUFcbvasLD4Uu0QzJNFnOMPQJnt0pN4ndhu1cxAYhiP5/gueucFOkUpfR/urZl/2bu2JlzmFJZkJZDN5GQe8WWh6/YJIBxFt9tjojt8uCEsXbxgkZRzFdlimRKTVBVfUkEl94BbtseDgQIzfaqbp8Mi+JUjEbSTn1xt+McTLSuu10mBNBN0rcHKNRfzcGf4iMClEfnChS4GPbmfRJS1PUjnWwZZhVxnhl96KTk6lloLhWzawkFQbtV0jtAFVekUurH6oO2/9IfUW3HbJ5mlNsRDMn0pislvSbGoC5huK8isSEOU8JVKM81iVnNPxqD6SD7JBfaJePGIv1b50r+kdPKuncL207HbsgylzIqu5laj8v8AJOvzgZqXZ0/U8k6dIRDXiV7DauEh2mXiIMW2c7euVbJi4CUo/MiMU4cw7+JajbcP8rfgD5bZ8do2ioFrAjTM56E26qpEMegzVQsMys2kri2O+1BnossQK0dUrtMx2EVOs1T5fDq+U/ixoqG4jRsCwWqPdIf+y51dOGKqsrHHxIdRF3vwWeZzNqnq0zyoWs1ZV8UfTTKHSknL1IiVI269yp2gSpnzdONVPO2Hkag1JsGa84ut3vecHKCZeD9Fgfvu0VUC7gfXWTySvmkKCQUu5eYkhLqwit2i4pncbzJSjuQSC6gFd3+ow6Y4kJrY0STOcHVXeH53/iqK1zcpjNXPikTpqqpWedQ8JVarpeQ1e4vZ8g6u8xsSL4sKv0HhVRR0iwZqqNWDlxrkJfZgq1VG7m82L3DZoQdTeh0EFljRkC6cNXDX1hGUsk2XsVSISAVSSEg5sRqLcGoiiW1My5VMZbim/DV1TZNDtEt3tLoXBHD7ttpnGn+Yh2rqNQ+vNw0Su1Q3XYFPaQerNSqxyksSVjoErhDovSwZo1qiMgiYnaRlePlwI+05AuUomsHhIkSZqgrcW20Dtwt4RGNTqTHjcp0wxSMRCO6fqyrNf+JyE8bxDT6QC4TEwwRKoFb6USGwv46qN3SPelhi+hlknj5yuzK41T1eq3cV/vc27H0CDs35OOPSTtejhUXW71UieL7i/wBLjSEJ1b8hXOKisbt4jmcy+fKjU7i2bT8PV/S4cKLDpCW8SHf14+hI9mvJf/4C0/edLl/4uHQ9nrKAUyR+hbbTMrrdVX97zYu6i+gfPlN7S+diZHzizK3w33dGKbnY1WVoHajcQPEjuE/IWPqD/W5ZJ3f+8/ZXf5397DGc7M2Rb6GdNnmXEW4RtutV1S3/ABYJpqN9p8SVD16YdbjqXym7OaS30VmA0BIfWVluqQnyjghPkmxCpcA3WmkQ8QW7BQz6y2ozKqrnkPl9TaULHuosHS6CBmQkr3o3by8AjgM0PrOqAgddZdT+Dr7i3dZePH24a3HHUyofVCKvlcbqweLcwq6QD08iQ/u4hyEFU7x2pgQXERXeXG5IHsxZSz0PFz0lFPlXkgwbqrlx6oiZkkO7mxOI9lrJluV/0YXV/lH65fiwubpnY6UOV3pvaWAVGp6g3nbfs5sIkkdt6SO34iL+luPoan2Y8mkuSjk7fDxjr/zcKJ9m/JhL8ltBMdniJUvxYs6s+oeeqb9S+dhJGKZLWEJBzEQntwnLMlnUHKMwAi4hmqkI38144+kQdnnJUBs/NxCkPmQuw+a5FZPtxEUstKat5d0ckX4cEDTPiUlWV6Y7pL429n1LSqieBwA2mzDm/lcGJ8q201EUgt4cgSVHutuy77mNDdp7LShqNkoF/RdBwNPk6Vei6KNjkG2qG2y4wHfjNdPtfW01WLxK5dNvMtGqvVaYM0hMLvKY2+7gqtLOfIy7qKofUCpySBYWcKHDK2rMDuIQ3/br4jSQc2/YkNnJt5cbO7PmTeXddZXxMvVtLISD9FR0111CVHYLg7R2l5sE4OzRkt+XbQbP/SK/vYUsMOu6hUXLsw0RAWC+cPAHbtBXU6eQcdEwchaYBtt8WPpCPZuyTEbPzdxvvXF+LHQ9nPJYf/3eRRe0BF+LBQUj6p89U3dJfO5jrJKCidwp3+PGf8jUlkMylrgtI45Xm9scfZgezvkxt/4NoPmu/igYzH2oMp8sctI6LmKNoODgXTiUVbuHLJkCSppWEVt3u4YUwlTsOCXMqsK5qtfbjyrN9NzLaqotaVatiSRSlHbDdz3t9K4y+IMDWhXTlf6RNlwt0plVJK4rTGw7rb7vGWLVku4Rf0xLG1c/V/pRKroEIXEV6CGKfQKvFKVMYvBS4iUVVFIiPdvEvfxFsYZgYI9wp5ZK6OHQKiRoAkkoBArpKWFb7GPOHAEjeNq+rvNMgutt3e3btL2cJkqiJE2N+zGxXehqnq32dPdc2OrXL9MlmrYXTgFVdUtUiAg8t4828tvmDEAVaTEj1kwBy2UUcJWWkG/mLZ7W0cct3Dk1rNb9OZihu2q7ukOQrCIffw+WhGZM2bxKSV/i+qCSXIQbh8W/f1+PyYjVItZmRLNZJVVMDs4ZcT70DO0wuDzYkK9FPLrllFmTwhWA9ciSvEb77j2ns/oeG4qhw6iKrZJNO00turYIW7/d/n4RYpSoqFfJKlqjtUHV1fkS5vfw8UdcUmRqs3gledipePrAto48vJRPlJZK5UTO4RsIg5R8ZeO72cdLKrLqJmgilaZGqaa/dAl/QOrDd46ctSJGwl0dW8C7oiSOzzleHN72zCLdd4qsmiFzZQ1VQQ4luWkrzEYluLwltLEF5OtI194NnSqltg6ZBt8fOQ9dvyY64OVVIXiTYVxMfCYh85D5sN1ImS01kW/BkoA3JJIAfeheI2cvjVx5FBnwrgwc2k3K4SILtXvSS5rvAN/gxNeUs4B/cmHAL6d14CgSW33j8/xYRWZSTpwjpNklUbT3JrpJFsHw3ePps5MM28i8biJjoEiBhapaOryiXw3iXX/OWj5w27pYHW1YOkhG9UDG4LVegrC/oGIKSRfGYrKLCikN4ASQiqJW3iJfD+DbhqKSyolrtkisSS2idvi+XE06XYE3vB5rjbu10AJIuXbd0b7fZPDFu6bBafHsxTsSHlPf3pfN/MxMVFeWcOR1NBFJVE1UvtQtPZpbVb7b/a6cdPlX6VppOVRE/slCILr/AA7xs5vJhZSxVRS2SQJNLeIqCqVoWDf0lZv8Z+PHLhVyyWIB9WCmCulaS6o2mYjZyCW398MeUkzF6sSItn5r7HQK23B3RkBeAfMXuGeG6apqi1RfgKoqi43CBFcd4/ZF4d2+63Eosq2VRFZ4wFIgsvIXRkl8nJzdQYj3X1cU+HfkQ2mdpOFevk6eb2PFjwqK5dPVicKaAIE3sANNdcy5D8m//cwC6wJFXtFNdJEkEzlIzu+a3ukvMX38G50qiXEGaw2nZtFU1wSut8uz/fwC54NXtGMz1iK+ZZWlb4EksMqD9J4UG/vb8QrVDwm2s4WA1xWSHuukxDbvPxpdPVbf5cJkqdxSThgPKd2qZikqluILuj3tvPiLmn4KvlgSsJY1QtuagIKmADeIl0Fz3j1Yi1pQLhBJsugoBHygFvVfuD7vTjDNMGunuOCpB04RSb90Ci6nUKa9pFsHm3f72I/ikW6yjZVtpjeY3CuZXbNnV5sRVR13BQEeL6VcKtGu9AUgS3rl0iNn9OXAbm8+3zFzwh04gsidqoES+6zlH7uHFHaX6sZAKR115pqIoukjO8fgWp9ZIkz9m/xdZDiPfFGn3JbtXwil5fAW/A+pmvGNXgSjMSQdIjeSKm8unl8WJdaSMiExWK4N3hOzwlt+XBY0ZsnA1V14KgZNEpZ1w3DqNhcq6IHtIREtL+lvNiPIlhW7/V8hCKW48Mxdat3fCW2y5Xdz3bS8uOiJsSYhYvqeG/ZgnLVZOrZ9OSnZezV7MVCZVZz5gmxWgnCr8mzZUkFUnGq5Ebi0iH7JU8UR92af6nousXD5xzSXWH8OJD99rjM5ILaieqaqqP2pW3c+POkmGnY64HTSv3KWCeDBdIBiJJA9ZaZ0pEtFKdlfsJEt3GfEmkPmnmX/AJGOk+yR2Hl+XP5e7zVKw/8AKxmdT1ULqxJZiQ79oqgPJjpZqesQGjbv+Tmx7Mf/ANwlT5kpVr6g+y12NqSqyFq2G7Qgqvod4k/QSXqNgSRGkV1pWDig9siepKrc8pKbpyoWck1NmyDiWi+qheCQjzBjPYt0bhWJsPiIbuXDi4CIdJG4brbr/wAN2/Hike4kXSW9uiKbaWIbfsnLMiPfoWK/u82E7UbbFVmapWHtHiOjDUiDRJE0V7esbUiD73zYRFK8h394HT4ceEUcRKQbpNue9BW/pvLb8uGqzVG6w1mwjfuIf5+Ks5rqmo9xapImfTagF1uJKGnYafEhYvk1PQNtyaoWqiGLyYdEZRQo1jBlASUyKAaYgKw29FpFuD4sN+FRJO82aRX9JGWORagJCdnvWb8dKXhv7zk26o7MQVpEnkGyRcSiaINrRsPruwxzCVP1GoiV3MFo+HD6D4/jiBqdqhj73J47cEB5ktGy9Ipv3kw54gw1du4Pn3480XapfXbVKQdIRr2DiZjhkiU9WxgkX/sCGPLQzAmqgKxqBCat4lZ58WiDfuYGk41s/pu5E2rRJByuCogvpN0hO2wt/T8QeLDqm3DlWFePG8azSIFTsK3VtDrt1brOnz78GpIotHKcEiJyUPc3vC1RRW0FQ9/HS2W8IkzcSvq1qXCWCSQvRXuvu6QIrPsiw6lpQDRJy/klVdJVLv11TL4ix6NrekmalQM3VTx4jwqWl34ECqoK/uKlj4RAvoKps6LYPZBueiKWs3vVtMxDfuP3ebFub5EhIo8SwkuJvKzSSeER2fFiBp+sqVSdODKoWIlwCopCoVu/SIQHFogXrN41TNg8bL2bzJBcCs/cxESVqia0yqbQicXwpuUCWamapC6VtIwVJLxezikzkDMNWKazWSecUBd0WuRdftYNCcotPNW8VMueOTb6piS91yAX7+957dpeTFHcTlK/SBvGgzck1NwAKri45Qu5uXEgUF6NoBm/jxkjWkNQ1frBE6IdI+jd4ebHKmUEk6a8SwOaciBWaqbpW2zwYnlJ6YjdaEjmyEemq6+sESALqkYEQ8yvJ1cgDiNkvXz9isbx/JuU79mqqZDiQtKJEoUsr2w/8ZTEg2LqJSUMfvliv5r0k+YZWt5iiJWRXkGS5uHSgPzVFVqJEJDzcwbCxzJeqmBFxD9skn1iSoX4v2W+auQqFAydJVvBPpd+7VdpNibSPDJNkSSHcQ9W+7E9IaiUSkYaEL8uZRhUdKyzOpqneDUGqBMBXlhuXuG7bYXR7HXixDllVqSgudGoRILDEvP8OMyw+W79eqGSLpD6us8AlbnSFulfvuK7ZsxvhOuWEojxjOEfXGN5cNJNVz93biToNFtVTTp8yz64o9+wWJsbyQZl+rVAfxjjpnBySTpEEpV0Sd264R/dwfCqqN4X61FVKRXGKqCgNVUiD2TX5sRqx5Yv9Q38PVjFZLcJNI5kWufLb/HBANpF8OKiFWiSEZU8jxRLay5LJKpc36W8d5eDCMPSTyXbldKuU1gNU7U0g5A9scE6Wb5Sxc46YPH9eiokdio+oWCukqAcl3H820hPz4WUlMuqS0fVz+sUFlUAXSXd0yzX57uUQkbOkua7EQVskO2OWk2/UWZ+u5MSALwEWqF5+DnHELPQklQ0s1YPXkmrekCpkqkkkYncQ8tvjEsEqUqOlZJ44RVzOrjT3gKX0VbpJF4O6B9Z8mGM5F0ATNiaVZy66YJH3jmnCHftKy0Fy5DLEoL0lSY1vVs26eNo5+SibJvxDhUmqRbLxHw+MgwbGrWYddmN021klXiUy01dVuFnMqPL72IHLl5QENNCYV5oM5BVu3lJDgFUDZtzIlT2n9qR6XTjREErknLs6kRkKykF6FMmSoyjlgYqk48GlZeG/rs97HxVESxbUiFTwijhH6jsSBXvWYFzgJfiw3YqzDN4iaTxiJOxvNImY2FuHb7Nwjg+ZiUVl7Lyk8tStTqrx7JuAoSWgekqGkNgEke+7dZ7fRgSlS6PHNzOpIwhSK37Jf8A8rHyasQ/ziZcLOSjbvUBScWaQiIpCdvTtxpjI83i+U9P6TkkLGACIi1S5N3V7uM55vKtl6mltVZchNcFbR5Psh383mwesn0DVy3p9FKVG02ttpcUJWXFtuDZ4vixlbt6gfEtjZvWF4VdFHEqk3+2fEPToCw2+O6/k/pZhnLS0wg44Cx5qaQWbmdgB4MdM2pt24mqApI2GFtipCQe/jycJUjxYghmbZdvvLVJJUTEDD+QLr+LCFpaMoLn+G3DVZmMaRKbx0F12ogIGXNclzjjL0FWlR5IVbB5oQkf62rqTlHZGiqqrpAeqSV6thCJkqV+0tuw8avkI5aIcCDy0XBn3QqpaXWN53Al9/Bmy7y8on+tfkJ5ej4VzLNPXDhu+UjklXSRg6VIDFUxIwIejw41VqP3M5IZLHX717YjzIFlU87IppvqqZilNyRg6eKJP35WuC6BAisLoGzESL+mEk9ZcGwid6XervytMw5bgIg6bvNbbh4+eIuGpesjSKPuBua5PUBVS33XCkaAn93DgV2zxEXLXiUhATP7BqqK/MPLpWe9hAMFoxg0ERUSm8jVVBNqEZo7CMklXhXHb4TLm+7ij5i0bUlRxkg3oilV5WUcRytsakzeativdGQCYjygqRc2Lw4kkW7cQYTZJKGXLpNUtm3fstMOrCbeoZin5iNm4F+mu4SS71o7MUElwMOclUlbz8mDKPLZdEkJXZlQwQLMaHZf7TDe1ZbK58Nm61SGbl8olhnOdnPtGvbTc5VyK6gcunCaFvvBjZymZeaL1ElmEDBvBSEzVSbTzwXCW/w695+7s3c2I91mnmu4UJgwoxVVSwD7ipn6R/7XGt87l3hWD8xeySxn/W59oRJFNFXJl4SaXUpEmRF73PiPlMhM9RTUWcZPvh22d1Fq3j8GNqKZtZkNU1jdUquKyRgOgVZPRMg8fMXw4WRzxzUFvrN6DeKpgW8irdfbiXncu8Kl/h8g5SQRgYaYqCrMvWdQR1QMVIeBsdKKsBbaSod0CSXEW6u8gvL7+DQ1YcOjtm6jFQFQ7i2LFIUr9nSR3cvkwxWrV5XlSCFeUTJsXzRI0m7lOUOQV8WhpGQ2CZ2/DiYUV4pEpJWlWOmFiQkMWIgPTbdz8nkxmrg/N1ay1MG01FRswk/QFFZq/fLiqZ2kp6uE+X+SHb8VvRip+sZV+8EGsa8JT7Iria3jZ02282LY+VebuDp6KSRuMdAW9xK2cn6DzcnThGLgZKo7gas4VDSsuErBMrx87XCrRBPBlzKniSy614s9oJW2i6QK3zCW3D5uqaWsC4KiICqBXGFm8bQ5Pat8uLISS0GUg2VeEmsd4rjwtqSqXWVwJDhmRtnDFw5VbKimkR6vdbStHl2CPhx81gvEU1Bx7xmq4UbKokJXcxcRYQbfxdOH3DwPHKLK6X2VhkTh14/EH3vdxysbB0SelMLpCqYGCVo3cvtXnhup6yF9rE/dkXhVbgPVb+ts6sfVISXSzWNEVjdaSQmSpJapPUr+Xn/d6cAXNImbJ0i8jn6Quge90KTpXalcNnOOwubBuJ0s94rhXkglpaoq3coht5iNfZgJ5wNbE1FmrN4o4B+AEuqklpFy9dxYaWoe3Sq6F2CuCgLRqLdKOcsXiaukqSdtyqG7qVMRA+XzcuKD/VB/R/7s9UBW8zGM9P8A3NLBUj4OEcM2OvJPhZ6TcF1xQ1Taq2d7tAt4+W/Av/qg/o9A9peZMS2lGRhD/wBlTw8tXwz5Jfcsnd/ULRKCTdaYaesmwky1wFTy40bk5kJH5c5+QNRUow0oN03HV9InfpO9JcObmtISHAUTiZKrHRN6ajuN3cqf4saHyve5hUzEpxVYIpCLVICbOEl+/wDZL2RtxwE7yVtwlLTzD0rqHENvGrHoDch52w6Tay3ahh0k0vy30+B2juts4pUuoPD4sY2Ki6JZtXGlWbzlO7Thv/y+N4ZqxsfUVdxuZT6o0knzWNdsATcqgkC/1VcUtx9V6+MUvKAqQuINdm2FPqLjUvF7WN/Z7oNcOL7GkSWBqKMqTAWn9yvmcg0MhmxUDN/PSsU8bk3aqtE4RJcEjSQSSMNUHQ38uM/1whG/SxqEc/XfNzdaoKrtQbGWz9UBF9/BwzopWYqDOKsp5ibFdjITjtVq59YoWEldsO67lstwCaqZuWFWMWCtuskuYHpKgqHTykGw8ai1tiG3upXWerUGKsUrTtj1y6QL1y9MSTbiqBd0h5sMxSp4mrrhZWQJFVIBIiYDt3j+3378X6nYam6gyzRinsqg2kgfyD1LUepJW36Q2kJl+yw8h6cy9iGKay79i8dOGeqq2J+gQCrqpeb2saMXIDtSzKlzKt5O01xFfQc21WcqtWT8HBkTW3Ylu8RYeMWpvxsdAIt1RDlAht923fzYI1B1rGv6mFgwZoCm3jZB0kIrpF9k1VLlAvLihp8MIomkC6Sd1g6hctlvgxQTpGWoYoxhoBHSm7r7ZTVDn97f7VuEx223ntAeod+OlBAiIBbfEWPOB60ESSKxK8R8dm8eX2sTkrF0iwNqs4eJGqkTsAvTTvsKw/52EyQMViAzQFwkO8Rx5wSwpkYBqJgR7b+b5fmw1ITFMbQXFHfYIjzY8vKaapBrCYoiQ2Y+if8AU50OFywqN3ZaIrKq83tD+DHzsapGShGSJEmlv5vnx9GOwUBs+z5UMkqW30NHnymuWEt03sj7X3YqzH1R/n48FkvMJrTBI0qjL1UvEOkqfbq6a8dqgWqqqreJAr13YhXjCiVcu6RZvazVYo8fKukFyYXCuCpoCZCGrss0MNe0qut9KqfYINlCJpSFPt+6SMt3AJEXJ5ixTczG7mNo3LNnYSZepHDpUbPG/X2/Lhfb6bS3q3K5+p1Erci1oyNomprawJePey8UIu0mBEF4JOi0refqwH55KEJ9LLRs8k8T4MBIhbkOl3qA7rxxZk+PHItQxbL6bisvDv7pn/8AlcUFGOkii576mvcqbRIdvNeV34caW3sQIikllS5MEYuxW3YK9oik1mr/AF1GQO3FukY8jdXx4r7dIyap2AkW0OUR6/Fi0diOLctc9GrxwiqkLeDmDC4bd4M1S/DiBF+bVmzbcYgTc0gO0f6ebBNdvXqTaqLWDdmkSzlDXFYHGgqP6I7B6cTVLmbDJ8nIAP1ioXAl7ANR/exXak4lqx4YzEU3D03W0jLm/wB7FkT4lhkfFrEFqaszJ2kXUeg1s/Fj1T6gR9pXsetJbpyMqKRgKDoX0r5iOmzRKCZFwqazy0bkBKy0Bt6sWuHkq7l1yaRGaj9wuAifpSF5IXKXEIiI7d+4hxUMt5JilRtMcY/pkWgQDQBTUbDcJcH3Ql3fitxKQ1RTrHWcRclSwkgIGuqmmkNo3Du+y8VuOAVTuJ1Jy2yL8++u0t2/AmZNAMojuEY/YVjzGLP+haXJB1U6rR4vJ2oLryDwyIBT6bB5dw4zfTLXPkc5WdT1o/cpr8eyfJSxOiV0m+3vRLmMSEeQw6jxoupswZuq4WK9fTtNyUkguumRr6Hp00LU9O3bbddqYhEXTtOpm41J9FBTEUE1xVUbDY3G20f9Fhq3eeoGQW8dJR1Fu+tLxsmFYx7uERIZbdMvD6FYvTP1rKqSD1hmwr6EGiZvFR9L98IglqCO3b4iHbhi4rupEqcJh+dhwbvjNUl+LfD3WlaI3W+O7biKRmp5pHSSrBOmuFJMUHmmTT07SLaJ+n2hHFYfTFqImDOB1NVUitSQ5OjCEarFr5W7d+Ke0tjbePGQjEduz6WlWmHqWbjZ2TOXr1x6HC7Mkkl/Q5cl6CVVTGwrrbuUsTCk5WcehFS73NpwbORuUS/hB9cQCVp9PiHA6ZyKxu5c5JvAKSCQiklxZNRuVEhHxD04sCz+oF1YVhPsKSSjUh+rCo6ZJjoEuV1neeLUwU0OMf8A7fr/AHqyutrGaJHH2tvd5dKs0tVFUybiVmmWaSwMhdflAfTIPBsBUi0htt8pYRc1DUcm4iI6NzNMl1EkmdvHPBInBKFb0+bFVVdz3AvG7WNpb0sF3IEVr1oIkQ3W7tfzF8WHrdeRRl49xS0TSirpJNs5SJF+0I9cUxIv0/SQliOUcpf9voofqFK0MBhp27O7zehTTeq5do1kUlszfT6TcICkl/CDkt4qiV11vgEsSbt8tAqU/No51KuEHRpOSR9DlfkFTvR2kXm5hHAwfSGg1d68VAcRsFDReJKdW/lVwzcTTly+ZJS0bGim1aaSdp2jpblA3CXmxNt3FodXLt1Y/rRhWRt7UBaebSGrTyq1BVVcqIrOvRmk+9CPpXFC70SrmwTK4h+7iwHW9YOn4Kx+Za5tmbJsa6JSTwBO0U01PiUL5sDJpIuXQerkoqIITV4rcvaBHaQ82r5sTrlwUa6kPSwgIAmPpT4ZT6zdclcmXSv4hHEwdMdUvtKyotlMRxwAZeEPZ+krW8rSupA0Sjc1VUvQ3YgbgTknPvenl38w4dHWlcTDSGiozNo/S+RaOfS79JPXI6hCqspddbv7q34MVgk3yRqnDUtTi6LhilxRccXUI3/4Tt3YcNlHrRVi4p6lKaNyUaubn696TtuFQVf8L5NLB4Ovges/td7lSpykooDiADp2+r7vMpNCtq8ds2MYxza9JPjcq7vRIOfyFdpWBdb4hL4sc+muK0kWkZHRubN0io8MbvQ9X36umKQXW+K7EdGsHwlEvIui6aUeCoqSqSch6SILeS36z4N2FUIOSRbxDuMoeF9dg8JTu31whaSWlt1y6yL4cSm/HcX0v2f1UsmgEtg//wDPd6ff9lGvs1yUxI01InMVQcwunLGkK3pXJT0JWpJ7N3tY+bFdSXEVlUCwHamrKO1bdW4/4wXlx9JezYi5Y0k6J3FNo8lZJyqYtiuAtqPmLHzqrTLauTzGnqYhoFdy8aP3FiCCoEdhkVnyY3NgIQYGa5reRHzk9Dvfn3lVWIok8b2n9q4C7fd1Y+wtQkklD09fb+UOI+6OPkVA5eV4VUEzcU8uKkU4SJ+JKh3QHaXis5CHH1AUz6yleU3Hv5lnIk1birpEraJD47rFfvYfFEuZIakCOMRWM+2xCG9nGsUYFrPXTsh6hG6NtO/y/ZYsnbIV4KiclWwLEkSVP27er6qzwQMwM/exPVElZWlGTz55HqmIELdUbT5T5FfLgC9qzO6hs3XlJtqDjZBtH001cICT5LS2GKQgAjcR7NLDQC7CKDYEgclFWLsLr8Zns4W3FwlKPbSLzrtRxoTt7L6WQbdG/wC1nI8P9UrgB9gNACzUqJzf3gU4YfG6QwbP6oYQfmTh2xraWrUCW72Gq+BWPXkp1xL55qOgFPddb4sbY/qeI3ROahju1Uoez/v2ML6S1pd8WN8f1O9qsND148VMlScP4xvd5ABX97Dg0iaTr+qOPLKRo9Gy6+Wdl/qB/exg9q4BV81RsK03QCXxY21/VKH5tYOi2wGIkq6e7i9hLHz9h5wHVQN0UH6/2uy4ObbditpqepWuFtBfSTsOoaXZ9rbZbqzKoF/2BAcCHt1G2Vz8WB4CRCEMyDcF1vMX4sHLsZpAPZ/qS3vRcTzuwhC27ukhxn3txK6vaCmgE7tJmyD/AFAl+LAddvFM7fvJTvZMjnMtljnezgYpV4+d00bVBNslcqqqaStiQgA82IDsW5LZtUXW1HrVfljUsQm0npB0uu7iV0gSSNqNpGRjsvMcA2Fqirac1PozU8rEapd6Me6VQ1fasIcXyl6j7Q9WtVkaZrms5AmgaqqfrdVLYfX3qu/FTHYS9pW1NL1gpIWuiMiUW/Wqmrt85YaltuvC3BEUyRzjdKXpUHJqjpaoEnYQWeO67DF9kVnSN3/BdPKiHOSTW6z3gxPNb7yJihHVCqIEVpikJhu6caIzasVprIFb9H+bm0iEbv0qGA3VGUWa6TdRyWXVQimlsJQWCpB/TlxoTNSkJhXKXJGSZ0xIC+jaNNu9Ilx7pIySsSJLn1dpF7nJj1aQdUKKstX+pMy7yE6YgKaaKvNaHT5MOB2qbbbum4LsdFA1Ok8JgrTcvxSXOgTBW4faG3EswomvH+xtRlQuRAdVXQiFytD4cYnUut57XMS5bugtECtHDrjDMr0rdnLs/nYdfm5zLQRK7LeqCHzQzr93DttlnmYsh6HDbLaq/T6B6k4l1+7irUr+sUuHMKZet3JJiiZkVn9PFhMpQ1bu+Ei8RCXgxKejL/MpMC9LnL2qkwHmUKFdCI+9pYj/AKNVUqmmaVPTQirZpFwDi0r+Tp82KHQNWtPU+PvEmqaoch8vm5MSUfYN12mI3dJYbt6UqQCL+16XMg8TIv3cSTeOkhEdVg5SvDqSt+/ha/NN2nWo7lNMV+HEVh5bP0XjxJDLXLI8VzDsus/fxEs0FtHazuLk5MPEWrwhs4YiT9n9/Cxx00UDTRKwN5kEhTWv1U7+bVtLEszlDJEeHAtm3l6L8U9FJbRK1EbT5toe/iURJFJPcFqnlDAblSrwpgT59JLOnGt1dewx3454gFVB3234jyVAyK4/mtx0iW4bOYA8WAc/mRIMCCukLKAzETE93tYIFM1UwVTvI0BUALDIStDARTJzrcTfutMCHVxJOl5Uod8wZAIrOm5pJbhHeYlhnQ1MC1JNcraLokSLieZGWr2UbwwzbVV07KxLqSXO7lErbTw8cKwg+gtILSAg5S/cxlt5Q1SSk8m8ZM5BBYH4L6q7dVDSDb3RKnaBiBDst8AYLkhNrKuCR22n5QIcNaypaaFZS0UblURS0qUqRVmu3TtR3AFtu7xYqeq2Elkb7RVAxIS6vH+HDV4/3FsEfZDEapImChWor2+UT/dxmn35FIVuaWjymoqYtbNRFZK0RCwgwLe0Ev63oGpDSc6GkqZaYh9rpHpW/Li/C4cukUWyQLqKKqgkKae647+kcUlurG1Q1eMJFEXLN64e3JqdSRuFbMaPhgoOk6slxkPuYW+ZXaWVbE1cGwtLiC+0H3enoxuyvHkhSlOfSRvJy5t2oWrM2yILqkVt1w3kPLjAaYth4dsgiWnxCSSQkd2y7lx9Ea9ZOndEO27VsS6hr2CmPhttxpqemzcz2RXKLwUTZQbjc75SWXTRbsq3QRJ0k1JyrEN7EjV0rCPv+XvRw0rjtEDl60fvqgOtODjpE4w120a1IFVhVNPZevy91iapulahQJQF4d2mm6nEldw8iQOkt3s2IYHnaqy4zCqyjXcPR9KvHyzipdc9MgG1K5XfvLzYvo2XXY5ol/VClgwJqWHtQxjyDpudhnVZSHpqo5PgEBYMkjHgzEVdW9XzjZ7OE6Jz+fZtVE1oaNVrCFUkmbt6k5cpMhEgblYYlpFfzXYGlC5M5kw0fk2zkaMfJlDlVQSOoSXccQSBN+rrtLF8yKy3rCAzOi5KXp5yzax8XINyUUJLbeJF4vEeHdNbRN3bpQTjgAGlC/tPRoNcwpBh6yfFxEGlYqq4JVUd647SPAVy7SRVyzg7gVtbxNt3i3q+XBw7T3e5vLIjzHDNx8u818B+nYZ5TNCowL1ZIloxkY3JbgLm3fNhRW6MwfaWkodYtl7K+lUDS0xJUvBjE1S6i1wYNfSpeGvd3XLbcOIR1KQsa8XjJLtIwrV02IgURVcN0lEy8wkrggUQ2FSKjFPT6SuQYoD8SeAJU1KQ5VVNSKrFDUVXMyUJIerjr8V5DVJRtv5ciIu9is2xgdQ6Tctvsogx7+FlniMdGdpFg8dOFdJJBs4ZqmqXhEbixM+ikJVGLcS8zmxLMm7ZRwKqxi3STAQVIbiIw8uMzZSsI883IAGyKY8PUTgx2/srv/FxrWq2RP6DkWYgJ+hV0YEJeDjN3y4b0dJTVFMT7je2XNiqaonadwQEvoiqR6JCj+Qu0uh4f+MY39zDWPcoVWMozpDtABLqR+5x6tdMHJoXD3WrpBsutwHs0KSh1aqeGMagJHPAY2gI8iTXDfsSxrZrmFngzSARTAafSERH9k6vxK2MsVZRJuPysV6oEmRlJV3tPILM5KizVknjlY2DgiVXXJUCO1LdZyYz/TEJCRM9VnCsEkNeWSVuERK3VapHpXW8t5lZjQna2EGs9R7YViEUo1wA/wCqwF2rJs1kFn6V2pIGBrleHOA2gXk2YX3AxB0hWnt4zYEltXs9RnpRyETcoOXaC6RvXIkgr4VSLlLZuxXHWcFZeiPRkmkNN+hMyADFR0y2nzeEsXns8oqu8hEUR3KKtpBMPNvIcVtOjJ0qQ4JVmiKxur7eOa+Ef2vlwqfozym3GB7yXNONdYcF3vJOoq5zHhI9q/SQkHnEMwdKp8e3S0jsus+wK/EVF5s19LUrUVQosJBJaEXaN0maki3+smq6JA7i4UrLLbuq7yYv1YU7IuoFnoA21LW4Hc8QHZoLie4ys8OIJnRb9rSFRthBjqOEI9f+PoWXg6MzvK7Zzc2GrFCcokKGJ9rKQgje1FmXLylPxTilVGKdQTLeI10ptIjQ1TETVEeDG+y7C3awhvUMLR63HrrvDeKpKrrn9r3RbywxQy8mwnqBWSOB/g+ZSdOBCoGF/wBulbYGvv5S5MWTtrd1G0nsu+vuB2l+yw0coWqemIhUaZ+dSIgse5NurBqYCNUS+lTu0fbSQv8Aujiq5c8S1RqRmhxmi3m3GrpXc4FbdbyYJkLFxrBRY2bMWyj1finRCH2qvLd8o4osO/YOKiqo2rNCPFKUNukgRhzhbedx9Rbyt93C1t2ZufJTp9qEVYHDqSFi3Zqyr5NMLBS1dUQJLwDu5cQdS1PCUPGFU0jaq1SVBK3mJ5+y8/VuuHnPlw+EQSFRsqBEJuAtHels6D5fx4H+dlLuZGFptGJYPniZqyCqtt6oX2tbfvF8WLacQM9aGfIgGQob1Nn7meq89DNqbeNFrvQFNIFCASHqM/IRY7pXtIVZGO0vpGig+Z3WqqJpCmqN33sfq1FSStYWOIR8TdU7dzU93df7uKC8hjSEgNEhICASw9bxpnRjFJycfDVJasiZMJmFYv4tYij3qW1QryEOkbyP2vk9nD5q1RVItdmzJwrtG4A3eXZ57uTFHyGZmhl8LoTXGxdULRMBtO67beOCImQESizVzaSrjcmR7SMz+A8J3xgZDgnDBSESXTGLRScKG10F0zL7cR+wPlC6z2RG72PYxUM0c4qfoF/6YJ0zcr1DGK2uGmnZocmxUukw0gwR4/j4SnakrCO7iWj2qTCOXL9Abg7TV39QhdZ4TsPpwHpDIOCdpqArESYvFdxORYP1Q1eogsQ+9diilfYze3Xx/NPSwqG57VlccQm5iYuNY2EiqNwEruS6veLcWIJp2i60bMk40mUaTYOgUd1l3L8xY6rDKKeo9TWVZyCjO/7dWLdIfFqiIYpakXcW0C90TLGoZZo3RkIrPuv1LTsSJF+C7Q8RIii2qKNVRvIQVIN2y68fm9nBRialOWTKSgXIkiqIFcR3HZbbYP8AvYyO4hj5xArv5I8X3IqUl2dTrU8k5VSBw1VdBd06Qap/EkBe9ZiiptjWIzaV9LcHZCLi1G1nlnqzhF+iuqo4SCwkgJXVCwR2+7aPsYT1XguCRevH1qtjM9qon1Ft1S383zYh3ESsKxOVVmLnfdpCYCQnf4viw4Z70VAABFNwIJLjssID8plhDFPJLmoKlh6YiyeVA/0GapKtUhSu4hczG07R57vf3W2GQc+A1N9pJBKYUBhReogkqZ3OV7VbitEunyjj8zaScuswG4biaxotwaoCVwDykf3sUUoZsv8ASxy4RMlEmuqldzCfHoD9wiw0pKdj9JqSypqXZRFGqic66QqYkWHDqMJU0rSTUtsVO3duHmv5vbLFiJdGOJYEgYpWCY8oWEG7ePLtxkUEDarNlUj01BK64fHjUyiTlrrRrp+k5Wbk4bqkO1UjA7brt3m+PE36MGjm0vUtSTo608eSjYVhAjZqkBWbUgHp9rAZnlz/AD8N3KCI/wDGzS20LR5R6eTBKdOrk1jVBfmDmVuDydOBS4cA8zcYrWKJ/wAKJbrh6PdxZStQEvCpuuzdb8QrRUm4Zv3iiL/0sSUSJIkiJIOYRt5fF5sQLx7pEN3BlpB+t7oPPbbiPliWJx3oOVBv5uIAhG8PFhiSoN7TbuXN3N3hmW/4cZlimgt+6+hlnVKLPqggY4Vb27VqCgCI9ZGW74BD4cUeYEJaTEUjQv0ADcXXuxe80hmPXzWSQBBMbUmuoKQ7j3FgbKv5f0EqiqskKiRWn3Qfu429CMaYRFcxupTrnCVwy0jXiNTJ2gQgTNVXb/ftSv2/D97BRWsBYjSO4QVA9vTgXZVpOX9U2GsYiES6X27eRuXgwWdU7rwcqjeX6rZhXc/WJ7YSkwSZkq5MhDWQ0+fcdwD/ADsPnCjRnGrPHiqbZi3C9VRQuXdaPt3FbtwiPEgsV/DFffu0v52KPm+/P1JDw9lt7hwuraewrQSFL4e9+PA1Kx1h0RTC4VfUqYnVWaozOlJNz6Ah1FEGye0CvISLzW/72KsvUNQKFeUw7G7wq2/dxwmkFvJhTh0/BjUNMi1tFc7fuDlQUjJcp1BUCPo/IE07IT5hJYiAvdxKw+YEzF+kUVVzNt+XcA7fl5cRCiQeDDUkgxImwPcotVbgahJG2DqmOk26b9ZVL0Xr6CTnSs3brBV5reryYmVtFwSeqdxfEGBRleu7KpFoVFa1CTYOklx5hKxIlQL2hVTAv/jYKouFiTvcAgkRjcQ813n5sI6tgactK21oqyrG9SUTFG3RQ3b7rdK3f7OKdmVKOGFPCi2Mk+NX0jEeS3y4topMxEtI9Dfy23XfLilZt/kGGjlvT6U10+KPxD04qo/XirrmRDRkQoSEPN/ZxO0Xd9Io1EFjTJdyCVw9HpPaJfPiL4hG8/qKHL5/3sTdEpel5V0A2SEUiVlG4iQ7rd4Y0J7VhmtwoxN1VuHTNdmWoYhq3Fsv68Ka527Tee6do3+P2sKLIPzdOgfrCq4B0rda369Ur+nCKiFwl9gSYBy6X3sZkl0EdqlKVH+GkQIFUi3l3hAQltxdirKoW9LyDZnqp6QHaSTfV2e10YpNL3hLJrWXWe7dt8OJSrhNel1nOiqgNxiBCPN/T3cRD1qqqR0ooUy/gZKBjUZaqnKSiTOPIU+FJdJIyapEZ7C68XKj4GHm5BvSsJWYruJA1UrvVyqXTcYby8uBzS9JVDKQrGShmBPBNhGbddIT2NUPNgmZB0rVUXnFTryXhFWzcHDtUi1QIf4qqPQWCX/VFFIRWKKuzrqOUlFgaxEagLcySTJdLiTC3b17B90cVlTNPM0i7qtZVsPhbONAfhC3DCovrFQSi1mne/cHb4e9LDGwMO2qZsB2rOOVrk9ym/zpZl3d/W0q6Hwu3Gv8p3YkovN6eYO0Xj6KYvFEeVdMeFX90krfu4pxJBhMg3WYkVM2e4VEa5wNpLZNAVJP1JTLN8xlfShF1Q3dNQ48+9QVQVDVC8B3CQbOXlLFlYwcPDLN38tUMZpgrpBpapERkHIO3FRyrQc/1veXqzBg5eLetJsdNsJqnzD0BiwTzWp2bVE2cDLjw43kPAKlb5+XCwRiRCtABSESTfOvNxbLeeRWdGk1YyqHFRfAM9dw6Ae6MyVVKwO9E+jGeqk7Q0xUFzY4548a33ClJSyqof6JLSD5cEbtmNURprJ9U26qThaBkjPVG20OPVsH72MyCl/ixfSUzTrWaSX1dW605lCreOalQpEXoZQlPtL/AAMBIviO7CRZp1rttWjxHwjHN/3cVcRDC1v+PBnVGO6l/XH+8rN+curdwKhGKj5mCX4BxwnmC+SUFw6paDVMOUhSNM/iAsQzVk5fuOGZNlV1j2gmmFxEeJA6OqdO4Fadkdn/ACtTxIKAXdra8VyNvc4iDT/aGcpALSUk6iYphtG17xyAf5pXcPx4KVEZsy0r6UZ0WDWpoRo9bt3SqVzRdAyPbdds+XGTFkv7HPjTPZyjm63Z/wAwVfT6R1kZFuRfCNmAammBgJCj6SrOoOJIoowbl+6JY5uFFRW9wRLzKCR37ry3liLzDdNqapxOUmX7EWsa6NLjkHAPO6cXE3ERSIt1wrl082ItOLYOm6ayplrHeIXBiEzNa/8AADWQGiQaM3T/ADJW3X8Z1YBAOk+hNXSgBEhfUWfjO4kacjZBdP8AXO3GgBf5pLcP+lxTXeaDp0oSytMxZ/yvpXU+8eKsSQafvY5USDDcaFgeVISrnTVwQzOj/QmbZ/RzPRV9PeizeroX/MQ41bRtQQinZDnXEW1SZMQNuqCciVwCfH8pEPRjDBAF3JjXlI+kF+w1UyQgNwNTu9ySS/exS/TNcqvYqTJXSga6czLWSoB1SpRjoFUnipCrqgqBNREPd7j58PFqXqQft6ekNnULcyxG1c3CGrp05SDcrTkOr8u/8WIlZfuyPmswsinAoe5jKyRSzwFwIRS0h0t4ltSEeXk6caSyncRrrKOnQeMGZi0Q11SXeW77y/YFZzfa+fGdcwl0XE5JWIiRGkkBjt/VDuxp7K1wi1yvpmNVeRTlMEkrRJ4FyR7uYejeRbsZ67j2Y+JayyaSLwp4P0PlI0QXNizbn3RXKoKjq81hd0P9N+HTOnKemVHDNqwjBTVvMVNJuvzh9rpBaZjze1vwnIJSrKLRRasEiE+QUmS5DsLyFvt8OFp5/CQyJBItlW0bpA4XX1e9QdglcrcO3lDpPrwlaaA9Qp8T5JvIMoel1m9kCzapqqhquXbcEiX5R1R6A73p83jxoimZb1N2Nakfm84MW8XNlr/qtyu/Hykms2KhzUzWgQePlRhmEy3JiyTuEB78dxD4zx9K5hc1ewzWjYOuEnR+dXG0preVFSdqW5YC4XUbhUjljtQpg6tiKqRcVJEzDaca6pqmo2eH3QeZUCvusuPf4N+PLJVC4UGbSknPCuNUxFNuqJcvKW7fdu5vcx858ta3qKhqgF/DSq7IVTBJW0u7ICLrHlIcfQii6v8AplSrcybNhRVHh3WouOqgaXOkJK3chWlsC8r8Ibnaitp+jUJLTWq7jdR2xJPEyf8AEFx7yTbIuLNog8E77bdw8n9N+OZBKpFZRuCHr6Pam3SEeBVdJNxDbZaOlZ8l+OVGqIiTAXi4kkYcUK6rUd4dP+/zdeOnUXKqi1kpQxbRYCAFqukLB8l12/l+bAQ6EwJPiGYSIgYNpddEDVBwr3oqq2W8tiW/Dd5U09F6bmGphdDi1Ug4lSXVFUgsHdbpYWT4NUkTXlY9VM71Ul9VJD4RuLo6RDbhrJMIF+oPqZaMYuA+3IWZr6+3k2KjtxaqtMUxfNTkd7qEjCUMdUl1TBUCPl/Soc3+558eRGBas3HrGkqefI3nxAjwqR2AXL9lsHlKzx78RYpPBJYEvVCbU2+raMc43Hq2/r/m9zHPG8K8JGZteD3oNyYsnAmO7YZd6QBZ8vXj2wlaWsE4JBtWVVevmEIm8JkkCtrYEnJoJfCWkNnV1XHjmYGm36KINW0ZpmPFL6rpqqSrg1bbzG0dx7d3g2YWhX8U3kFgCHePlDSBv9ZQdEJK3W7SAh3X+0GzHmLV4I3pOZpAtK4REQIh3FuIdIt3yYiRL0UzasKYet1DbvIwkWip9wLAbi3Fy973Vv8ATwYUJ1TxPFA4Ml0wADSUdoAWqdm9IbLue7YXIQfM4fS4ccLaqALh1QAH66m1dqZiVhkkdvddNxc2Mo5tZ3TEvMPKey/mnIxbK9ApBMC9Crz8nh6hH5uoiwdQ2w6soilldc2reMiWlmMjWcMSxxqzZJbgwcWskisVPSIjIfbtHExJK8LUksDpsq5FobhuKq7pxoFYNpmQgXj89llmPm8TuWXVJ8q8ckoP6QiK7BYyqzpqxjIJxTz0lNNR3G1cqXGQBv7oughtu8OzDGp4ecaakBSS2m4nYqHYujFbFcOpvg2bxm/k1xsvK1w6JKzl81h3e/jl0qs9Jw2cLSYvD5rnTwevltO758NaakUp1kzl4w2ase6Q1SUcpbEum8jPqErBPw8pYkG/GMiUZykCxeRZpGGggNoXmexUR3AHi5MZzEMcPRitRIExYq1Uk1WulZMUTFVK71y4VAgtHxpYA+bTWbZxrxyqdzPjAVVFe5UBMPdGwcGrjFmCbp41RJIgEzSXETK0/Fd1/iwD84FQkW7p4egu4Vdb1eFIVeXB9s9eKV3MuwJXah3kxKQqkayphKV4dJJwQjEg+Mg2juvHl6rsO+3B2bM4a6zzdVjRFGKyUO6iY/TXSXQAfRY3ASG0jxGR/qql4dZsVPOZNRVqHdyUoku1S5rzHhdJW6zpv694YuEbnX2h0lIeEDMVWBi+FBJqkTAFW6TcBEUrSMSO3lHceGjJlTO5rSQ1jHWBitTKV9k1kpFsYeXlmsCs4SuBBQDXXPxEVl3zYk8s83KYztcPI6hU3ztRquqH5Vm+lrCIiREO7l3BzWl5cZGzzPJCcauKqoOVQcyzhcF19B0QmRkW7uj5OYi2hg2f1MxmH0mUc3F6dVB6qN3+YH8OOPN8AUB0g1L+ZnEQiUvaLu+lO6y7OtOEQRKOpWrO/K9hWFNvI2YiiFZreukJCe1UR6huHbj59k4hAUL0fR6MEg6RSdf+fjbnaVz1qzKjOCtl4ZszfNSfN7mzu4hu4dIdvhximspyHqCcdTcNCFEC9VNVdsLjVSEzPfpeAfLjV8KW123tOMSk3LSlt6rm67Ld5o6k1GShLhR9Qx938kv/AOfiJfP2zqWgXjdmgz7g1STQvsHl8ZEfzYTFU0iv6Qv3e7hioqCr6Lt2kDA/ujjeUzepZonVT1HQKuFPqzYd3NaW75sJqKo22aKH+iP97Cbfc6W9rCiiW7GhBAK+ZDkB184DRS7qn5grhEv+ZKj+LFq1XKSKYCaqpAJ2284/Nio5I6yFXTSyV1wU1IbvaER/FieJksqp9TWtIB5dc9p4W1frE2ofVJZZACTvVAiE93MF4nf7WFG7hHaiaNpAqAc/R7hfz8J6ppby0rg5h32fDhuRgldadqYHf1X4HRSkLWzoUwFG1QNoESvN839OvDHuSRExAki5CIiuD5NmPE4bE1ELxJS+67fq2YappLJJ6IgPjEbrsSEVAlMNSAbrUbi1T5Vefbj6T9jz6j2TaqWLS7mJdq7d3MgSv4sfNBq1cpahkjaoA3gV9vm6MfUnssU08V7MMlT17aOeT8XoM9ci0h1WSQ3ezeRYTXLQ+z8r6sVI/VF8n61h7OZ/mDHV44jaNmFY+Pj2EY3FBBckgEwYIX/NdiFzEjq5SjaPbMJsWvEU4k9eCquqOq4VcLkapbd5cuNb1B2Jcy6jmJCdcVVRaSkgpqkKci6sDbbt7jl24UlexPmHN+rTk5+jfStHskmYaEo5ESSDy8MXiwrpestR07VeTtH3liwois0sr2Jw0waUgtPSCTxVB0reqAN2ZB8GriD/ADc1m8eOlpap2KjoG4K3KOiLr5eXG4fR2E8wAiU4cqjpH0N279w/SJKWXEiNVJAd31Uv+ajiCnewBm04WH1TNUOSZbi15d1eR+4zw0pKt9otSofGmMdBIE9lOmZKEzIln7ySQXJlSs6qGld/zJUb7rfN82A2L9a1PVtO8fAW35cbUpvsyZi5Ip1tW1bzdKm1SoiYjW6cbIrqqiqqkPSqgkHTzX4w6V7duKJGJbLNwBhyLmbqJDCIBtUDVypkLcAC3nPF+zGnGZZB5ew7WKSZuOHeqqqpLkWvvSG4hPZ8OBzUirZdqmsTkdQFTS0hS5vNdi4ZpRr+GoHL9s8ARFxFuF25CQkNhkPgwS4I9mPtfcotFqJbRo4B+jcMjJ0zTBIpQqICp6ZS1QiFDbd6Rd+K3pwgm4k/Qi7FvSMAKSopJrknIEXVcP8AhfiHCMdHIqtWsWNPNV3AMkhQEXu5yraIgNt3UWGa0XUbOPdXZfLoM3avNxRc6QltxwA2ieMjiv0xR4NiIiZ6tO4sf+6udP0jL1UuxZ0/RcSu6NJU3RE+W0m5XFbqEC23l+bEarqy1QqhPUgxbLEKvEEmutenpJFt/sLl4bcHrsqoSVPR0rHyVLeliweMm8qq7UPUuMrx0rrd3dAJW9JEXLduz/mHE0wvmRUAUszflCd64bLqX3LqilcYheP63bhpVWbq9I2+G4twpHa71127VFI7tEdJdJfj/T9iZIyzlBkq0SgUNNW3VHduMeTqxAzBNkEWunFEksql3oiR+Ivw246cxj5oQG3pyVFuRdSSu7b4rcQ9QxScO5Y+n0RcoioqkCqorDbbvLy+zhExTblsCdaaKQfnxelShqhI+l4+GEMXCroCFNM1bTuuvxImbuTmI9pJ085QRTTSaCIkQ2pXEV+/2ixUo+nFn7jjxZyFyTrlHk5Svu2/0vw+UQRlJhRsug5S0kD3X/qkOXl8tuDiaGIkgeuzIhH/AOv9VYEXgBC8GdJPLTV4gi4rmPwcuJlBVjT1QE7iqTlFfQ1StuJzduVQtL9F5i+HFC9aQ4xqLBJhJ2gqav249YiPh8uJxdxHQE1JxYeh8p6UCdMfSpqiOpzDdbb/AEuxAtGpEG3PEgLmlp1av6qPetUuFcPxjpBAkl0khElx33XF+qHwjhFz6CXFMybLpWIANpH0JDaJ8vlx+ySLAoxrKazy1V4qgKREPSKRF/tcNFpdFd46A1nKSYJbiILjELhE+rzYjlk6OlD1dyapyiRLli6cisJqgqQn0iO3y4lJSURbuHDZJFVId4biu3hiFh3SM240WTxzsX0tyQDcHKBW3bPZxLOHKLWIWYILErqrpPO9StK8RIbPmx52mENyWsXXVpJSvok2LFF6kDF2710AQNdFURHmErvsi6xxCOXyEe+FVjGyA6rMhuI7vt0LS6fNiuqTaLcXjNV47HV290IEPNd4hwpGvI1gssi6fyVxtbRtbj1js51fAWCQY7JGt1eBkX99SKFPpMYtGGmG9PzLlZVJVUkxVG0SuJLoQ97D1m0YQIxdQoUzUCrhNzrikoQ/oiHnLQ68Uym5GHiCYyR1DNELhBVUE0mQ7byVS/X+ISw/bSUHDeljNLVNNqBqGYJhHjyh4vrOJwHb+H7FB3AsZFiRfT1e/pWlezhPwUVSPpYOAXjyUcunI+sFR8KY81o+HGfakmWzrMioKnfgkKbiRVJuSAiI6W6y3x7913nDElkvCxde09mLBFJSEg2cU64ak2XSFDeqJCJfalaQkHzYE8OSx1g6pKeueMYqOMLo9IkFSNIBELSu/wB63Ght7hZAtGuU3qnBm4PFh+f5qFqLMn64sszBJQj5rkrrj6ALCNJ1uBvGq0zGjPN2rg1Uo16f1fSVLvULQLxlfcOLhBsMqGss+Rm6YeSYqlZuXLoIb91wmfKXx4JkKlkszUj5WJymppmsauziXjpLZtIN2rZdYWHrBQFInXRWS8yJRgrmVVjmGBcY1Wcem1FXnFLVKz5MQaKpkVl+3GwByMyZq2eeVDM0lLpFNvFXlrSU+riCp6ppDpcnNaGBbmpktStF0zNVIwZyCDiPNlpCT0FUhBwqqNvLv+yuuxoWLg1pFLso0VP6nugCtfVcttuCGbpbf5cS/Dgnf1SJUEMtaPZ7e9nFVd3kbl+9gf8A9TfQ1airRyNv8QZD/rSwYO3nPUNT0PQ/06pL6QtXD96KTbZtMUh37y/pdgtjRIktrNZRXzV1Q4NQLBuPcJeELSx9Bv6nShq5P1Q53b6oSQuLypIF/wCLjOY5m9nVBFE/63VUSVHb9kQF83jxsbsUqwL/ACrnn9OUSVLtXFWn/B5Fdv4VmV/k5h+HBzT+aUYpZlQ1SQr/AKo4kia1FoqglsSkFSuC7ZckP4sZLptWEQeN0XRtkkQSMLREStvSK/k9rG3u29T9MTdUUaFTMDXTSZOz+1IbQ1UvAWMv1FlVlpT7MZiIinLZ8aulqJPVbrDAiPxYKaqRa7JBVdGTpC7JbG7KJNl8g1Fm6OgKssaSo29YCkJ4yX2xHAL9oirNW3uuHD4EEsa+7KYtg7P6Ohqin6+cB3itx/aj1YxL2pldftEVoB/aHJaW3qAAH+dgCt9aKfW3mQj19K07DX8AkdtvnwYuz7XTBKeUo9xazfOwvaimkqWrYJKncR8lwXcuwsWKmey1AvKTj5ibrxy1kJNrdaLAF26WqGwS728Cs6tvNiSonsjfRKW+mzPMgvWEUek1csW4iDU7CEiLVu1dhdAdXNha/WMZRNcyYC27ISVsdTyLVq8cw0CUqLewnpEqaSQArdZ5w5fH04syMT63btZWGRQFNVCw2Sb8LxMLtu8d4iYjZvvvPFkj8oo1nSIw8dXiTZ84AOKcrtQSNWy0rCsK+32cQspBv4ahUW1JWy6cmr9fJMhQJBwYDZaKq9h3+HyYQi6RpmRChrWH0hnqdkG0lGjBugVBukK6R8RYral0W81911nIXNi+Z7cBDSUbKq1OSTyKpqMasolOO4lJe4VS1Vb9gXWkPj3YZ1A3pWWp1E6oYSBOklfVCqTZe5wgfNxBCFyW2264N+Ljm9QLOuZFrCKT3qt0EXGuGq6/2Ty0eUtvhLm8ZebFlS+QUznyUO0IlVNqKYuqwqBqzmMuX8Y2h27ILrkOMcOrw2JCXQIBt5BPkvwnUEzJN2sSc8sTYW/F8UkV1rpuFultMR3bS+LFfpukqzpBnJNo5GDIkS+zcmC6ukZCR2kA2c48uK3nAU2rCp8LJLpJ2uw0uFAjVPutIRsL93mwJSPzGSPcbg6jJlevGuiKSm5JJBiBKtRQUHcr3XOO3wKj7+LFTc3TdP8ArKHp9ZVRNJ1cQkGwQMLr/Bv3fGGM4lSmYsM1fVPTkqnOIwiRt1UF2piBBpDvGxX+Vv8A5LFmpuspuZ4FGZjVIqccRtyrYm56QnbsG3V6duGDVToQbzEiJHSJreemZpujwyDFu3lDQXTFf9FuELvh9jFFyrzcm6odPIQnjlBqCukkqoIiAgBFy2CPJtxZKXhnIN3kkqwtsVAjtAh2Fdf1e9iFy/jUX4rLQgNoyoKSlFWFpN9VJ0kVtip2FfaY85e3ipyp1qItBFWp9m4DepipiRpKTSkNitzZ/pJEBbQPYXLuwpS2atOVlJEzk20rGOY+/ab268Lrff2EJ+9gP1BmbFRuZVlQPODkAEEOLQQMmu7aqkI3cwHbf7GCtNRNE0u8TN02bK/SNUElVBZmIJONo23Xd1iLtS6Ui5VcLTQ6eZXz1jSSUTIPI5zcUfqiqOrvSMLvH1XiWKslV3pmapWQiogXkWrFi6ElGqSgFaqIkXLeV1xdPRiIUXhCjZRsu2Sj4tw6VSdKoJfakYEqfOQ2bLuUC5cI00k/hKnaw9HLMXJRSokqnx5irw9lqQiJpWFYCp7b/NhU5Uk7pjpUsoQEu8rHJ03TkqhETjilWCcmxkfVz5IUu4WAh+1IbrenE16cs6LctEnZUPBGoqRaoehikN2FpSpEHzdSKbv0+OdFcCWgJAg4E7u9IN27l8OLHDyzZvHkiuimSiSvDmmJ7r/D7W67E8sT3Ch8Kp8B0kXzlQkcrKBdSPDHl5FkmrcNwAQ6Ye6Xlwk9yQyyIU+IgPQwUVstJF4veXjHcRYILuqY1nIItlW7luo7vs1ECIStHdu6MViTWkX/AKBkUm7tBFLSNJ6KF3t3B0fNgF9hjuy+SjmLlVz6cwh+USrUZ2fKPfekmfphHfepGfEqvVe78Albz4ZSGQVBsnCti00iolyimqkolzDzbR9rE9IZjH6sajCPH31uR4UU12qqBiZWj1/HhyyqiOeyz1m+nkF3GkloJCqGqqVnNb18pYqcpqOMWx1Ipu6XWWaTxR8SoLvJlT0u1mjaXcqekUtpEnyn8WINbJc+/wCJqBomsmJ2kO0CK60B5vexoSNkohKPTfvDFs3IDHUXLlAOosRijOEkfQnwsq0X4VUXBCkYkfKXN1YXv2jspI5vimuAoSWYatypqOFkE2xLsSbk1101l19JJQ7rbBK0sVnLqlakzAr+Uy+9EahHuIxmDpeR4zXa97bpJCQjdcV3h6DxqSsIRhPNWsEWmmMgvw4qCW0QAC/dxnvKHK9hTWclUR3EuXKwPG5pbyG7eqVvgPxYBtlABZhPjJNS4srjY0uRLwpzmZk7XmUMfHzCMiguq6fIIM3jd5p6Su4rt9vQJYBDdn6hkPU46okkSv26t3X1EHVjZXaOeKyuX8Ym5V1B9dCFqpFbtQXHbjFc0uYyRGkfPuIub4saO3iw06TDG1C1NdVV9vbqazU5IhVupt1q1BCtiC7iJRoFvR9qOPojmt6AWyyWBX07fTIMg/L7bpIfxY+dGWprSldU22VDTT9bNN3+dEt/w4+j0tMZc1BBlCT89HrtScJL+gBkNPeBCYbgLxjh1RjMnGpbhWLu29s4y1IIx8G2ZyUWtrKko3fm4PvT5DN4qH3kvgwHO3AgqzyteyEesqkq4zDJAiTVIbgEJEiH4rca89ERkeChLel6zu2bimD6OXrxHVXl/wBnatWHpiKuj42QaqPjltFeTXECdK6t6vP+1P4sMrUx1KJOEP5/gl1S/m7RJYHy9XP1X2YQf3KDIVDVbBW4j3G4NBAPnVwesgIZCn870WyADc9i3T1Uv80ulb/qsGj8yPZlD0Uy2CmIlD6JPFZGET9Es5Dg3BKiqZhae/ekBe5hR8jkDlo/+lQoxkQ/AHDVB6vIurNw96O+4Or5sPmH2zKQkgnZbYksu9pBVH88TjVu/wCLmlpCXnV8uBfJXpRbpYAVu0ldv9BxcM6KyhKwzKfTdITcfNR4Mkm5uWyuy8Ltolb5xxSZJLSY+rWqw6ZiYCJGZHv6cY64evJbG3+qFfVWiRtimoD0tW/3cBzNBq5ZNZpy1ZrrqGuYjppEXOC4/iwY6LK6Ob3c3DJfdwOKuqOrI+pJEYyoTQa/RqSegn6EEi0naXIqNw4Z5Au0LMu8sk04TVS5FAzJSOft8347ima6AhJmqJKJEN97Vr/Oxr15/wCishd4nf8AtSxnCi67rOezGy2YTFRcS2lYUZF4jwTdPXcXK77hG4eQdg40k4IwpmSNJWwgN6Ql4e9Vw3o2hGmcEfa+pUVZSdFZmrpJ48nPq7Zf+NO3H2R9GlZ93Ef2P2TlrmRnYsq2VTFx6itIkiG+xJ148Wr05hZgqVpRMOVSCTGTOV9ZDwaFyoJD3W63Zb5cPOy3V9T1pR89UNYSovnyqoDqigkhsDVs2pCOJ2podJCp1pHzoG9sQv7bKTAdv8HON3vJYDrN0BEJ8pHzjgtdsTva+pVsBj/xMqVv+dS6cCVFAEE9baI2gRkQYy919eS1tr9QK3T2cx9BZBswMP8ABn/+2VwOKXYQ7qjUdVg2ETfq7dIee7/dxbez9mRQdO5SwsbUdQM0FFUnFyCl3ISpeXqxZGtV9mhggLZH0QIpAfECOkRb/Fy49lNVTDY5gjFKpu09Q4WWRalWswmEerldrCimQx7OPXtt6LlUv/FxGyDBm1oWrERBPbTkIRDbzWKq4IiuaPZ9cNyjV14hRE0gbkgTAlBIB3CNtnLux0WZnZ9XaqtiGGVQdJAgqPqsiBUA5RLu9wjhiwLAOyzBQhE/GOWSyi3g2berqHW4ZIVGgtHSW3xvFSD5LcXTtwK2I0rby8e7+7gxv617NTBsU66j6bS9VICaS5QRXIAlyW9104y12oM7Msc0lqdjaBq0Zp1HquHToU2rhKwDAR5lRHmwwqXGjpCESkvtGLnXBIhihKzcWDeGBvEpIoTVUGRklfNqriqolbvO0rPJzbMXxq6PaCW4j324rL5mzYTU0F5DxRN3QCSpWK3oIF/TyCeM9TFuWjqR2pYVTEi1TJUklbBLuhLZ13eL908UfN5uAM6bBJHSHSkCtst/UbsW5NJFBSxXSVIC5hXVEfkHl3YlJKmsrqlgY9zWExUbN80Qd6RRDJuuKqViRGSoqqju9jBgkAEl74kY6EBUwP6TEZnyap/CkX7uKLKJXDu8d2NRKZWZPrvlDa15WIvALScCpAtdLcIiekQOrzsBX3jxW1Oz7l1JOmaMdmvNcO41UlVHdMpCaSoKiIbAeFeJ7t1/T5sHUdS0GokucYdPaK5yPJZLLRu21h4c3BuCLcR3ifRzbtuLkouCqYouFhIkjASUEjHfyn5/d9vEHSsI2pWnvo8ylV3zVBUzQckkLY1Ujt8CpWD5sTDhVYlCRdArdd3u0S6/3/u4DdKbpEmLAELQiStSwuUsuaoN0skSPFR9hJERfrf3cQrio1hUsSOFX28wvZT8auHDx65/NbVALrLlY/ihDk2gfFF0fixQ/W7lJawjldnii4si+dfALTGa4SqzYuEnmYklxlKutWNjyIBPcg6IjHZ+1V+7vxmlnsEu5FTykYj+LB8rCoDKnXTPRIiVSMO/g4kejxJKkYe0OM/pq8KoWzq/5ukr9/GqtTUGySO5OzfFJuLC/wAGt99LFoyPamrmpYNqRepJguUCt+oL+5iprOgIeQf+ypYu2QIgrmU6WIBtSpybV5RH/AF8MHPVkhmvWCj5IEaCi3cqq7t9vDj4bPD4iw3J13YhxKpCdnMqldzl0/Dhu+ehorGSLEiDdpi3tPp8u/Dcn7YkxAuDHaF/2tll+zp9rxYzOUtLNUuvJKSSqBwDWSXFG1LuhK23YPgxTX03NiUsfrJe429qRX8vepfzsFKcy3kp5F1UkdU9KijpXA2XlrXWwOW0x34rc1k7UKRDZUlGOeN2iSdRt9nVuvts5cEUsUC/NB184eEQ6rkyvwdpJ62aulGySxCm3XcANomXIWy797FDkspaqarLar+mlRbpJKkSE81VuA/DYW/z/wA7E5JPwVcKLWKiiqqqYiSpbQMsNSGaGaKCcOnjYisM7SuDvCvwO1LAzSamBpWjJXCRe3i1KH3hIkd3m1S/ex1H0GZVRDzyskIou3RqiJDdbzfu4sDQJKyUnB8StCz/AL4rtDeW3ednJhNY9W6xFsJdXekX4sF6iez6FYRvrJCthQHXs0/Vevb7Rao+IS+Pw46lsgnkdLOocaqZrqMh3kMRaZ9Pi82M/lktf15g+ZZ7zOqBsdLMabGnl3L71iD9V6KBEIhbaCV11nyYDbpKSInCxRy6BGW0SSxuxbJOqmrdGNjs0eGTcFsbJJKpJFsEuUCsxKLZM5najo3GcCpKNNiQjqkqQeUjLZy8uGrFcTQxis5V29uofJ3MWMMpb0KvU9BI89PvR3f9VIsE3ZtWBERLqEVd+DwzyPzLcLLcVWcfouL+KSUSJW7VDnIbfNhun2Z6kcLLAlWERckWl3jI7CwNVO9YKUUwtgjRCQkSCoijtMbiHkO7d1+IMDzN8wJ3DiP6hXmO7mPGpXXZuqdg60X9bUckNt23iB2dB26HXaWAL2mMvH+XkzAsH8lGPicM1S1WBmQc/Lvxdbx7cUPxA+2VCQiSC4jjq3/Hjq3/ACY6P+/jSLnEkioOGqyW3D4hw3Ux5WiSnsp0j+njWwN3BSH/ALhq4KDF+CrFG0xHug5guwO8mWqzvMZm2ahcsqykAAfEfBL4OX5k8yENSNVgUklmQg3MePbiZWeG9XCe4DIls+H3BBspKp8QsAkCBjb4hI7PY5sUzNtVRxDxyRGJd+fh8OC+pkjmiShIhTCpEkIKq2um+0Piw1Wylqp5cjN5ajNIpK6Q6jrekXl0lxP48BU/ZHNN64hqGCbEllnT9OoReXFuyhZg6zQo1sXKrPNA/wBaODWWRKiqIpfmXXFYLzIheL7t/L9r4cSFP5L1LCVHHVJSmTj5J9GvEnTG1clx9KqR38pkXkwx68BDGKz3mh0NUhUE6cH6wkDVMbeNcdP7UurDVR0Zc27ZftSxbFMqszpJ44BrQcqu4VI1VRTG60yO7d/v4hxpKsCdKM0qbkCcJJGqqmLW4xAOfb9/CuBLUtODHckaXIwmNp+9aI27cSFbLrFTpIuj22maQjbZ+/jqLhn7CSEJFs5ZlbtFVrpJfzMeqpUFadLSeK3N77Ehv+G4PxYh+kVT5yFFzLdVmVMxIKgI/wAGsuZXeXcJYK2Ucoj+din0UAEbHSt//Z1cZbTqaraabt4dhVr5IWjBkGmxemKV/CpctmCl2baorOUzupVnJVPJvkVV3ZEmu6Igs4VXx4vfb7IiSUS1wWI6iX4qoJRyYWkq/cHb/nSxH3/48OJpW2YkA/6Y4++WGaKoenZfbjQjtWMd3Loi9nCK32hBi3ZcNYc66g0aj7qPdPBQJdUyBJAy2iqRj0iVpH5RLEdUy7meqyUmJkEI/iHRm6Js1tbi4u3CAhstvxapAC0rR5GHZboFZJYhIJmYAivtt3CWIVSoX+iNrxe0Ct2qli5ZTqyodm2gUYGNYybxxNzCSSDtg3ciW79U4Eg6cT1WKv4GPbvPolSr5P6vxhJ04wSNm4VSG9BVIB2bxKwuoCDzhhNEpES0zRdkIoa9sR1xmXuRrxUC4hWBlbiLqDjy/nYy+I341J2zHHFUHke/0UEOIp+TVJNBIEgH6+RbRDk5sZb5bsF28YsCktw9eS6D+9joVd2Ebv8AFjxHgxCK1UTUDamqsjZ51rkiycAqQoHaful4sGgu0XTmgqPp9NXXGJgA+skiEQLpLut/y4zfq9ePz0qen0/2PRhlQ3V+gEm2uZL6q2sVrguO8q7UVutxqjswropdnvM63a4F03O7w7Rsxk0i241F2Y1Q/MPmkBBcNyVw323d0WEddraWgt/rVPI5tV+JCj9M5AU/Kvssw1zOqibqPIOuDmZVd8SUtT+kShXW38dgjROVWTkozp/Vzgg2MlOpR7co0mrojSdvUhXBK73ubDHPLKqHo+kaqy6dVJHxHFylLqupJzq8K1SVJ4IKltvtDdfYGASbICEo8yaE7JshWGS+z9/HKm0sdv0EkHLhum5TcCkqQCunyqbuYf6dWEiLDhZ5Il/dxr/LuONz2Ja0dEe1GJV2j/8AFJLGQFOfGzspfrHYgr5nZtGJdKh7joS/Dih5EU25OM8pZ/T9bQ6zDQud0fFXa7VJcC+18Ylig/nGqFJMrDih8vqll/5WCJn0lGuK4pkH4PCE6IjDHQMR61fHgYqMKV1FEeDmrrrBInSX/lYWCOlP1IV8gbdNNyT9iq4etWjg0xP7LVSErLeQPdxobJM0XGWMCklJJEoApHoCkqVh3q/sCv8AauLz4zHWRMDUUWb9/tSSS1VQJUQARSs5fLjSnZ7VbK5Y0y2dTzZonsVElGqSopHeXPuE/wAHPfjK3dssofEthZHRzS8KJT4XjeHUbBULNsjbfpIGK4K7uX7K/wDHgX5xuH7XL6rFhfkuTiOcHcLhIbb0vDtPkLF4kKgh6Qi49EJiIqEXr/gEkEiSbKpODIdIbQdCZ3XD4sQ+deTtYll1UqznLyq2jn1c6NBP0Cvddb1CkuYFsDlLbgSjpnZtyHuo6sqmouAJd5YPoNkt9PoG8ELfWLS20x/Wj5sfUpxu7EtXeL1NOl/tcfLei2DlnmJCtlUV0lkpRpcmory96Pmx9UE2oOOxLWhpLDshp0PkVxvK71HylzKm9avj/JRaySJWAV2zoxtzJMuC9ZeqVmMgi4bsnSvdC50FTQtO6xUbOUSxiiVbmLdQ7CLzWY3flKyMWqnCzEQxL1RFKq8WaSVxmKo8xjZyW4WXsSdpxEU34ddFqpkW1XJvKLLvLxeR9pkFw8G6EiOzxAqX87CLpg2FwLYreMMT3cO4HZfvK40i/m4IVI5QHMqIvyrbLCPssJJVORYKq322ndpJb+rr+HBMfdkEK3iU2b/MhImoECrco2IQHSPxCQfzcIWLNWO8q1T98pGuZAspRm/Y+rQZxiSYpcKkK8M8JXk2Fdoc3+/iPUZM5kUXIyr5sJ91cghbcYdPes+XkL7mNPUr2RGcRLRr9PNGrHLeKEwSjUxapNVb7riVS0i1feuxYHHZBy6duFJKTc1EN+4i9ckgA9XKFtmDisNSG1AjxFScyxe6px41kln8pxwikNve6CSRH0foL/wePdhGSg5LRK1mvwprq32vWfJ0WX7/AIvfxsaWyA7NMW19LOoK+VbJ33kK9bugO/8A0+IEcrexvHOE3g5oCJAQ2ENavFQI/wDT2HirzNUiUij85W/4io46ZLIOVNUUZUuZjOjKgm2zNqq6VYCukSpKpKhdYREkVm4xHkHE83ZMHrpm5BElS4BItXird/NZbqifh2mGNFU/lV2E6Xqgawhcy2IygL8QK3rkl7VfFvuxLSVK9jeVWUcus1ECUVIjMhf23brvD492NBxALFyyxoacWYjq1bi7yzlmuDtEThVbxOS26dqx7m0hKxtD1M5cSWqpHxbjStdatoK2jzmRn13WgQ8mMNtWDb1g8DaPdBYXue9j7BVNln2LKihnkA/zq02cgGkv6AkgAiH2tLAs9HYp7Bqri9hnmqSYHcqKs5cHs8o/ewPbQO3tELqhdqpq4EJNL5fIsm3qta8+837f6Di7dm+ORVzmptt9qLg1UrbS3XN1fLjdK/8AU+uyY/8ATZE9p1o2v6SlESLd7eJShP6mVlXG1BH1DDdoxk+4RcFQRSfgN/vJGJh7pYYOVIuiQpULJAQkhBT9OOaSq6pqPYI2s1SbyiC4pHelqjaqI7SDmHqDFkal/CTe5+5HSSSSVt0B5Nu69DwCPLjQ6X9T2qqLmH0vSuY7J03kGoIaLty8UIbTIvtTVVLqxTaq7IedtOPLmtMu5VvpaXEx8yqQ33eA1xP3rMZGsoX8TlFbq33GlyxaNxCpaJ4xmoi6qd8vYW3Q4NLSA/8AMWHgV5rE2Z03JNvrarpJw3AyXSQsI/DcA4MBRkxCSDiHlGy4qCqYrpk6XSJBULvNs5i2j5MBvNhqiqxnFnQOSRBVLSJddxtP4t+Kbf61FXD1StUXVaJIxJzOvGCySSSFCPcJJAqH60RARC7cRbgLwYTkplhNyDhg1bCKZkqCCpKoXrmZFvIrdnk8N1uK3As4RuzjUZGbSXTBACJONVNdUT8O8R9/Fmh+AayDdnDMBXbyAuBSTXapLvEjt2ESR27ffELMHkgeVBd01RNZZYNBIjMyFLSAfhHH0H/qYrMBN25JHcDFXvbfG4L9zHz6dOuITEweCQgX2ZX7fwY3t/U9JiUhIaRdJ3LoqoNytQSIiIblbjtAS6xPCziuvboKZupc2i4KVNjMHADuoOdtl4BZo1ofpMd81pe6AD+7jMSj9hdvWHG+M5ezDP5nVfNS8dUEam9kqiNdQlZDTual06Fu0uXA7nP6nlm0Dx4tF1tTRRoKmTUl5S1XS6LtvNhPYuILe6BCLmrcqqposMBwWQ3TpsSJAgskW09uI9QkRdJny6Ubd8mNeH/U8s2V0UyZ1zSbq8blbpYxsO8uXZuxG/8A0PnMj1gRuq8oHTEQSVSKb5g68aumu9G6MmiQJU7ixHHrtklFjcEPNh8o/ire6cpXe1jcKXZAdw4IwsjUdEpJt5hWeSbISIuRUC3YgXXbsEdvhu3YG012FKmkZInkNmRQDNireYivPCkKR3kJiBHziNnNtwVScSUdU+THMKoKkdAdqDOS9is9VDlI9oU4r866A/ixcFn6PEE2VbWjYFmwyuO/wni1M8in+S1J1NWbys6LqFGTiQi0m0bLA5cCqb1Ar9LyaRYpLWx+sLknOkoCV4iSRF7uwcFvkLpSFH0cgGJJN4kikneJjv5LUhEbPZwiogsLdYAbCSl3MNt1h+XDhwzWVUvSeESYWbiHz+zhuTc0iT1de0wu+95dmICSvIU3T/QopNtIgI9W7aRYcCSIkR8SkRct1txDhO8LSv1dln9OXCgqmI616ol4brbvlxcoJ0zG4hNuikr8pe7+7g1Uv2j84KSh2MPDVbwcSyQBBg2fNUlwSSALbBIxwEW7pyl6Lxu3hbdZd+HEgi8RNwmbjVV8I2hb+HAj4zVoktCD2vM8gRWBep49IQDYqMW1G/3t3mxHj2wM9RTTvrO28d4kwa7D9q0fxYCai5pEKLUF+W+4en5cKIqrCxRBLXEQ/S9RfL8uK4L5pRmW7YeeqoqG1rlDYPSzZq/h5sOk+2bn8wWRvnmhX2X3QjWzl+fAJePXKCfeovklAsMem/m3bx/pZhu6da5LaRrjyGWqV1p+DlxYLU18JHqe7Zud9RwMlTE9KxpR8q1VZL6cSkkRAQdJhyYze8PiFBO8iHmtLnxIPH6yrXRKxIfEkVuIckj0xsWus8+CmG4HNUF3VXaiJykzFmSxaPEG4C49u/y+4OCFnwqs6Y5as1W0m1I6cSM03zrV53Bbx8Albig1IO0b7diV+7Bkz2aw6WYWW8akjbHhTkFfaqCt/jL+bgmpKMS8X1KFM3N35q0lScczGoo+TmaTlCio9Vua6yZKpB9qkN+qA9A3F7uLxWWRzaXzAVp6k6YFnRs/IJJtZhOZ9HDCukgqBjuSMrryIberxYtuTdNZdsJ9s5ph5PVHVr2ON0og5VFJCKS1dJXbttVv22lcfNbtweySiUo1rCJMBSRjwBVJslZakrzCGzZz45narS3hTdrzal0a98VvjXTYlpGPx/Oj+9KUvT8fTlLMKLcuFXbGOZgxNRfbrpWWbixVaCywy7pmFkYmJctalpSVfEum3eAk9btnHKqIlbaW8RH2hxZJp7T8oT6NnpUtM0u/baojaG7ePX/u4z7SNO5iS8TIoZV1I3l6Mnwcd1OelVVVAryQuElbjH7Idhlz38u3GmedFoh7OUfnLJ0VM5VA5J7Ll0btvzu8pPtB5JUqEOk9oiDSbrRSSrx1FxaFpKpHbcru5LBHl+7y4ylUUZTkFU3DNXDx4iHDrgRAA3ASQq283NutwQ6plqhpJRmzhMz5MnACfGCqq65x26Rd1vEQHl6bcUo0HcVMuG87JNvT6GpOEFBUEi70UiEBus8VuMJdH2n3cxpuK7Dw9bKmnpoVNRmDy+/L8/q/eo+HSigTT40F0mqqqqQlYN6p7S8XmHE9KMEWsgss1eOWwpJa+3mHp8Q4Zt/XfAtw9dxnAqqmA3EPPtE+cfZxIOkpt04f8BMRqjVJX9I8QENK4bNp+7hS5Eh1JsNEVK/Jhwflf+l0zfm4TZtkJ6XSU1TvK20Cvt/a/wBLsKJzyySzpFeu5UlFWppJFcqQatw7ub2sPPRFzuhDepVabcugSMl7HrHUNxrq2bbri26WE04SeVZSDhWKgVbEg0O8Yc+qN/V4LvjxXlQJWhU4uB2hD9GXv/uUT6Z9/FrNXK9avVG59+Y8Ur4iHl8W35cVuWlHj+QUkkKtcpJnuG5VUis9zEs8ZyRPE20vCRiQmIJCoIpEQpX+QvMWEybvGYuDbwg6IdQoGXsbsTF3K2oWrtoVrkiL6l1TLqSdKM7p64rt2oJ385b+XE1OOgNFui3m2y6it95ENodNnOPtF72EWbN+wTav29Ma6hoaqpaS+3eW3m8GJBVutFRsdLhlomTg1SVuUQfaRWq7NurYWLAcI5SQJ2loI5ZbvCm+XdG0ZVLKXc1TUTZo8QdIJNkR0CPddvK/p5uXF0zNyfpSlaCQr2Cq1is5X0mot3LVqqHuqiF20B5Sv5sVrLCEZtVX8kpECzJw80hS37LUhIef+VLBmzGo5NLIJv6CglXi7Vy3NNsPoVPVPV3EIhuttI8I6m4PNXAQaLs5CMVnHnzarBblHUs5RoStzXinNPkmaCvDio3b+FWwt6X63DeQSkklGaMo8hSb/WNISSQsL2dvjLFnYJA7VFKSy4XSTasVdLun6XKkqqHOW/fhg3YMJlw3bPct3iTUBVtJAXXhIrbju67caEdRrYuYiLZafq+j6Vduz+4ko3LbMyauje4ihJLhkhE77vTzWYD9G1G8gcwH086bNly728XJW89vlLBYoFeRSomtGETTD6KJ61Za6C7c/rIapXilq8+zFDp3M+lYF0nTz/JxB84N0YOHK4pb7y6tUbwsxobawMhccKK5bxA4QVjgiP5irVUWXjyl6Pb5i1QsUU1mzD1XGq/aubwuuEPD124HM1KLVUxYs35pCikfDulWzc0AQPdYBX7OQvl9nGpM0pGmM05hrTa7YYdSlxcNWqAr3JCe3l5fBgc5kZIw8NlmjPDUjx5qqgqDRV1qtV1RXEdIht1bSSHx85BhxmtH6ras+IlHtdybosn8NAlwoICMYrc9XXBXSLbvAto6vh24syeSjDMZF5FVG5lW0bOqtAJOPPeQJd7dv6RC3oK2/BSZ5fUBFovEQgY9JqrsVG/XHYBF+lus324g6mjn9AU7CmzDQTBgDce6AhE7OYUj5BPlwDR1I1HbjtFWuaOyTXsP0bT1KOquRp545eJtAaNSUXC0/tV1QAvMAFjVVUUVR1Wk1Sq+jIOoRZXGgMowSc6BlzW6olZjLmV1aPMupxM0qhpooOYM1ZQVLUnAuO9JLSsIQAtwhyFdbi9vu1zQzJQtd+SqfUvwBWfdxr7VXNZUnC3LPXBgzd0olJ5MZPpOOMSyZocVkvsiGGa3+Lw4nIemqepdHg6cpuMhW7h5xCqEegCCSqtgjq2hbvsEfgwDx7XNKuFLI5FVdbS4j/i4yCzzFbs9nnw+Z9puKfrLGkszSFl3p3JW9Ptf0vDDXzhTAW5A9WdJF6oKDomqniLyqKMhZpZulpIKSDNJckg8I3jsxHqZPZROhEHWUtHKjz2lDNS/DgYo9qylV2qbxXhLVTtS12ComXV1lh16O07Api414gQ4faNjO7VP9kOrv9nHvOFHuIl7qj6JjyBgaNp1rFUpTbGIYnIh9Uj24IIXmY3naGzHyt7TRP8A891aPFe/W9aO/sjItgGQgXk/mY3pLdp2NkadkJWGFBopDq/ZSDAm2qr0CImuJmPjsAsBnL1k2qhvOVJVtN088lHcvIKmv6t10l71SLaSu+0brfdwsuFwa0k1qTChYIJCStU8wil2MfTcS2QFaCFuk3bEfOAD4bfdwzhW61OM3TwY1UWqrgLxu+1VvtC0bbOf5MXCBCVetW60zAsyUAg3OWaBXbvD0YlCo1g/eFFODXZs1UjcOmza1JJ0d48whz8xYyuo9Seih3PKv3DcdJygqThrf3SvMe4b/etuu6cdZdoLJJuIo5sWclJlcQvnA2CCQ2gkkRjsK9dXxfNiqxtbsHlYSkbGs5pNx3rUV0Eu6JuDjSS1SPksuEcTkpX9MZfM4me9SOZqSNu4ZSKblW1IgMyILebdfz4tbIQIdS+O69MUKc3qjRi0WrNgzeccD1IXTsrOHdWbTVHbedtxDv8ABi69pWTfQ1eMHYrWJpMo9h6B5tpob7R6On4cDjNCtIqSWTBWhmySiqrfdx6o6QavMkPIBbvNjUUhWVByGaEtl7VUCzSUjI5k69YKtUFzK9qgXWlssDE7tTBU0USciMhXrfUkxUyAZaSQZiZaVi4kgbs7mrjcqXKQqgewd/tFiNqSUcxEXH1OyZs0lHro1WTZQu9SehaN2zYY7hK7nE/axpCUzLyippT6MAsq8WSSAV0BapEkO0SAyIBEOoOXxYGuYkpRjqDWOOoZVQgfguKQq6Wk4EBE9oDs2jb7+BaRhiiYFoXJEKKcqXah2RDFU3Kueq2G9eZb+rY5VSSL667FUt3LYqV4+YsUmnc1awCWfQktDx7xSCdR7VCQJIhdK6rhJqYEIc5AeqXuhgmPH9DUkza1C/yfj3MhIPLVSKXXI9K/ZcZ8nTtxZuNy3m3y1TxuUsKg+dsknSSuqQmZmQqgJ2FzCe7BzTox1INwtWkVbqTzNpBWiXzlIFXL7ijNVB33Gv8AtRLrAwt+LEDBs4qn6nms0WBvFXk6uEa6i13Aqs1bOoSDw6vh6sVODnoquas+jZ0MvGC3/g5dRs/VVNALunby+34MFKJpCmZeDjYpRnKtVuMAl9B/auKx27z2+Xw4Gcln5o91SGIDqQTzMiXlX1U4kol4gqo0lDVSTTMu4b6oiqK/+i+DBaqKURreYYuZaj0FY92zBJUftVUjSJVUCH/RW/HjymTdHtWqNQx0JJksCqpEu5VSExASK8jvETDq5MXCn6XYVQs1NusUUtHq3gTKz7K0krCE7gO7Aee66WVFXllAOaqFnVTEWlRcVE00jwfokpMHXe8iBpGmkIW9H8ZLl8OBd9OpKNzKlop4sqIx7i0FBtG49JJIzuDpvEsbF/N1GqJixn/ySYpKmSXdClpAQjtt90cCnMDssUJMn6XbaoZyM9aqlcm2NIrT5tt44KdE2g1IJqqa2odVhmCwOuIVGDAnnq8G7xwuPdaCV1yRCQFv327bOrB7TUlV4impVmwTfO5VrpP0VV7S4ey4VS820h81+BXUWREIlIsS9fEMhPkDPVXZARLg3ESDaFoB08oYPFPUhJR8G1YrvkDcJJAHFpCQDYPTbu/pfi8Im1pVb7oyHElGg09NOZfeiakU7lmyRiYiW/SEi23c91uIKqKsOZoWNMEVWzh0qrLA2SK4l26Xi+IMflX5iUXTCbqhMzK2QhnCtjxJcbrkgIbuYxIOccQHCv6tYQ83l1WzOSp9VI2fFkzDvUt1hJK27OYemwrQxEmMpqQqDRC6WvvKrjSR1LF0+84C1Zw/abWg3AQBz3D0bC5gxdqunmFMvGbNBZW1ukeuk272w9thFeNgFaRYataMzIpeJbv15JNzIOHBqqkgSCQABCVm0ysMuUdtuAzmLmWGX896tzaePogTE+WOdKgqG221UBIN1vSZb8KSwNrS0OpNhynS3aUVhfzs81bmhXKSApJaRCkrcRXqjZ3QEO797lxYaiqH0U04Wbs2bMpmQMBZoIhzCXPf47sDKkygatJM6UctlRBWMVVFykSThJvqkqFwmIncdo9GJuo6spiOfOoYqviU66Fuk5QF2I3uQ1VSAg3dJKjt8hbML3ifdEhHcrDFqQipKoM60IVEyKES1GT6PKTYyCHDKocUa4gaRGNt96RFb4MKSNP0RKVajVMPKy8U6k0gXV4SRXQB9YXLsuA9vQXiwOouRQrKsqnpOtHKkNLTDOPSJusGxRdrzkBF1EZK+5iay4Vj63rBSkGYISreCSVbvXa7UFUF1RMS2+BUbx3fzsepnXXXcoeVecYaYalzKsZ4ZU0JG0y0qOno1zDKu5P0xaotF9AVEkknI7h6N24fcxmarFXjeWdLK3XGRnaJAXOeNy9p5k0h6DimiThHXXmU1LRVESG1BQfxDjClYcShIKWGOmqrqhbyF/TbgyikNWTRd1NBOdmAvaJWSDS4WFGYSckgo3Vb3KCrpEZmf6L3Bw8UrSqkm4n9NpzR1TLdKK+H9/dgdoyQOCEL1FdIur3f3R+AMLOnRjaHL1YZE1rSySuDitKh46/6WzmnfeX8IqidntYWKsqhLTWKpJkiSABAheGXh6vbHA/Ffvufk6rcTQuEdNEDNXoHy48TSnJWZTMOsx4EyrOoRU0jvL1ir+9jx1pWEuKyL+vJ54mDdUzTXlFSDk8JlisyTcy07D2gPTgl5AZLuc4HMtHDVjCEGPSRJXiw1TK+7lG4PD82JNCZnpVTpgATNUqLM3AqPBeXd7vuHert/p8GHyyvGzEa2SMTTVdJJHqjtsvHd5xxbM38nzyFkItg8qGPqD1kkquCrYNK2zbuG4vF48U+kSCUqCJZvUUCRN4lzech24i9olJW07oOxMF9U6FO6MZn42bc/lwLKne685NNgt1GVNSt1vgMdn3cFGhD9HpjWWrbqGxQL5cDN9lnXS1bVVKpMWZsZWnFWDX61aROCEthj4d3Nh4w26dCzlj3lipCLzkkMMrjuzJyx9JnuCnkh+NVf93GqHxANJy3/tv+1VwC6KyXruBrei5p8waC1hY1Bk8IXglaYGuW0er7UcHB03cv6WkGjUR1nBOwG4/EqeHlIBgw5pVNWYm6MFmOPX4qvsv0dveqzoH7lw4kOxyr/wAGc4fnD/xcScHkrmU1qKjZ50wZh6n9am9HjBLe4JWy3xcw4e5E5c1blHQdRRVZNmyC2lrpaDjVGwQVI8et4mEdKtqSE9hLP/a2SbPM5qVRK7WSppxpW37g4hK/AjfJALi9ICJMLNwgVofuYInbOLSz0oew9KynHZEX+dHAtWf8OmoZPNzjurUh5rMZW6j261Vs9QKkkZZsCaLNK5K9UA+3tEebo813yYmI+BWlm5PGr+TXUZWKqpJK6pklqjuHwWAJfFgdrGYEV93PttLCyL0EtZY9UlA5d4Wj8uFmQmMleFEDSIniElOXHeuKaCpladxCB2W7BDb8+IMknKQk5SknKoq7LUj3Ce3Yfg/n4Rp8XLxmo2ZgWw2itySGqRaRLkYkIbzv1bf5mGsxGtoRuLCxUUTXcKiNloJXq3e4PN7mJ5QgqZHJJrKhxSjZVyuh3Vo8Sqd47ef5cQbpdyJNzauVR0iuNO27VvLq8m3HlEli07UV7uQxLdieoehqjzFqdnS0Aigo/dbx1TJINgYkHsr6RhGRqtk6W1u6Dq3WhgtUXkJJZlwIzzWYaRQpJN27XS722xLqHb0EO6/pwxzI7P2YWVsWjL1W2jyZvXQM0l2i91ythlaQ8/QeDN2X2ZtcqdZXaUhKPVdo+AtL/wAIsecI2lVIXQkCoLrsk1DyJZisd5mr/wAVqlv9rV82G/8AWoTzJmmj9P48hAD/AMCVssPnG0y341ciuzbt9jlIbA5b7cQrpXV0TvHr5cVdbdPmVcFlNTsvyqrgrKwiiIAC4Saqj4vMXixyPZkqrRdLM62iExSHVVubq3JHqiIW/KXTjTyjMCK+xK7DGSSPh3DZuBDqtT28on3qWIlUvipRFZlR7OFTvCURGqoO0DAgFUVbNnh2lZswsn2X6zSuVaytIEV3SqqOz/QYO0awfuFuQbeTdizC1Wainqo/ovENhHcWPMVz/MrCYaDasp5pZc1Jl9lLNOZtzGEMhORggLJc1wAwBe/aYjZjPyj2liO5VtSJFzERIRIkR/CWNa9qieZq5PrMEniROm9QstdISG5Lul+bGTZCspUPsvXQ7eUVTL/ZJYe2zE3Bks/V9k+Sg6gd044akDZhT4rGCtnCKsxPlLpSQ34EKioJF+i3l47cE6ann71uQKnJW779dJezk6uj4sDF4qY226t158okX3Ma6kbi0kFW5J1cqPDtsvIP/aj/AHcEDs3snMvmg8YMgEnDunJhILjt3m1IebA1UVWIeQv+zq4L3ZFO3OVM7CL+BJPlArvsCxY/obIl5su0FH4ch813glpMI9VM+S6UDbiFksmM12VyJxQkXWIv0iC/4saIKcD1epv5EuXEgzSORauFklkkLOIG4itu+y/nYzQka06yLKZWZltWZLOqY7m41Ui4gLR8fV5cQrjLavLb0qYVIj8KodfvebGsJB6iqQtiMiat9hiuV3w4haddM4aaTmJkEFU+ICxBUNXZfi3rJKBNissuMr6/FQtWlVSUSG87VR5LPa8IYTRy8rwERRGlXxJ22bQS/exqpZ4wkpx85QbaaKvFkKVl2zSV5fixA6GqiotfaiHSPgwSNYSoyBWc1MtK8NG8qbfWhz2gkX4sTkXAuXjOLRsS0YQrX5CPeiZjdZb5LsGgj1W+i4AgIL+XrxTaFZetCrYEnjZBNKWstXu/VdNg4kT5GKgLQgSvGVs8tSlNvDYTxCjrgqRE1u3h/vY5qyo0ZStHD9V4S7hXhL7UjG6+0gxH03CGrCvodvKtSWNUytHV/dxHkkas4stxKBJmTcB9wfFbgYNiIRIRiDlBbyvrhIRMLgFQFdvdEO2wfHuxcHDc3UkWk8S2NVVSEtUbgACI+nwXYhaVko1KLaxpvEAJJqCRXX7jsK/72LYtIxXEKGrMMUNWLcNbrv0pt1RD7w4grVFx88zFQgF4JLGRie1XkALreXy4j2tQRTpFa9yJXvDVEkkj3byLw4bx8CEasKysxGK8QLsxUJ0F+9K0Orx4jYeEcs/qy7mMFTeVpSSHm82JKsSSNYED+QcOWr9AUzQBIhVExMTAy8vmxlXtfJLJVJTeqsJCqwcK7S/bkP4cbAlqcbOE3DYpJDUVv+ydNytv97GRe2YhwdaUy2NyKpepjV2qpK87pXwFgqh9eKX3f4MSz7joebHIiePCJ3bsaQVi14tl2G54cFuw3PHlaKuWQ4f8KkXvt+qyB/8AclcbcUZuZRF05VWQcraoEkPFJbj5vFjE+QJXZrRoWF/FZDaPV9TVxuyJoaYJw1cm2eWg6BXS4U9u/wDcwprty01s9WlGbWVbs5w2oMxWcRYNRQ49C4lbrrB3eUcMaFYLMHjj1k5ZiRvA7pV+ht8fVh83oOvGbgln8O+3tzPuBuAtpWcmGLyBqSNlpAAhHhC4lD3aRchmW/AqYIjJk2IljbgkqN57kjAvF4MVV8hUjB83OBYLle6cEdvSB6X87DylYuYborXMHIiaFhXB+1H93CMpEn6tfHwCpKaFl2kW7f8AzcfAUj2qpt6gqGlHTx4hGumZGNt28rflxR6XnpVWrphykC5LPW7hv9kap2H7uHEkksRLADNVLurgEgtxW41m5IW+xIi70DEj3YmqxVwnqfmHUCJsqVnF1Lbly9XGVoAXTfz+Ly4ENZMDkoEjVWV4U9wroOLjvEuTz4OVFvzjpqHD7BQFUtyfOO8cQ9C9liv89XDiYpD1amzB6qkSjl/pbw3HtDn2EOKo9uic0crWqHRsHArw7X1zTy5OuDabtdVLZw49OC9kTAwjPNqmXjONXQUBc7LnpFzpKjh5WHZLzIyWo9xU9VyUevCxqSSS68erdZtFK+20T58QuRctA/nepdGOmCXI3VlpNyH9EXViypEgaJBtFMtKwPOf8eSX/XFvvlhEBtG8to4dS3/Hklfb/HVfN1FizZU5fTGb9fRtEsnIs03Bmq6fEHdM2gBcqqXsgOHw7VkyHUih2UaarnMmecU3KStWKZaxSRv55s0lNCOahzXq6paQbvIR4MWY3aJoyBomJnobJlVjT9UFJ01PCk9SFvJg3aoWW6Vt5DxQlaQ9IbufF+fUatPRI9l3KOKc0ZRNOMkp6qJuSH608Ax7oiDbuLm0i3ns5bbMY/7U1SM3FSxNDwJ/wLS7LQYWjaCt3Mv7RncV3sj0YK0tAjIxFGClJ2Ih+zdS6rSG9awTaoXqok8YNdXpL9Lq3by5hDoxZqPYZP1fFusxa5MqThUnCUIzYxqq5OFXbgLkitAeawSHYBW+HFK7J+XUpnVCnT81U6kHlXRKKsnLSTnboKneSooeIzAPNb7WLDmdWRyhQObrOkm1NZU0ouqyy5hl9ysxIXd09XAN53GlqmVv6IEvPgPKJ12RcyLFwQaVVzQkYTtGPMocuoL0JQbVuyCGi5IiFUFzVV70VRAQDVSIt/L4+rAirLJ9SiKHcTEybpCaB5GBwdo7UnCTy/VHoK9rs8QK4NMblLUNJU1Fz2YdOqs2vFCZShoKk4VdK3EZJX6VlxeboxF5sV1QGYEW3yu9KBRAwVrcJaVH1hKLpCREAirekkCW8uki3c2KicFostTKhJ1rPWWD9Pp9JFv+bHPp9Pp2h6PTuwc4+k8h4EdaUcyU84MOVZWwBPxWpFf8+LBS+W9E1lMC2pfKCTlRcWW/WFUG/N1EZDZ8ePC4R8qGKggO4Vmcv7uOfy/4sXPMyiJ6kKwmomZpJzTwtnhiLQhMhSC7baruvGzquLFP9I/kxagyGCSIsae7L4grkjmgiusKQnZeRfyCuMxekD/J6caS7Pkszp7IHNWUkHfDIgTRId9pGqYmIJD7RfJfimrGbSMoS7VE9jVFKwzNm5UpvL5y8pIWTpd27VfpKpOGqQpNyV7+zVs8IYrmeGaDnNrLyvqqX9XuS4in2qq8Tqk1Q0lXll5K7rj1Sttu5enGX3E6tUU56HLhHQR1dVVBDqG+4tplzYN8hW9N1RljUlElKtmMpUDqKXb65iLdLhzX1brLrNqo4qckMRRokJCUVnMOX3sd9WJipqXf0rJFFP3LNypYCuo0cAukQHy2kH3cRBDbgsUmIYFElyQ+LG1sikFn/Y0r4EA2hAzA/B3uMTkeNydm9lxXY5zAcpLWKBA1Hdv2l3HhxW5tV9NuXs8I4JGrqLP1qxY2ULFGJOVdIFd6uKHIRLYVNb6QwolffcLzZizdo5c0pihVrC30HGf+LgIvn6xpkGiqPulgFoZinUk8ln8UrLIw/GEusboxXHZaNipcvt3YOkPmlU9LxbelYl4PAx6oKtUCv7rptHd48A+k4Zm6pOoqqNsKjxlMxTUVNUr0klVXRHtDZ+iHnwRpAUSWFb9aKX72BSYadkJItqpda1NFFHbKGkITOSczErPNClYaoSZQzLgNVlbwqpOkkrxIOTlLlwUIXL5ho6MNWdewKJ3iaEbVr8UPD9kapB1eDGLZSkjcKR9SRs3IMb3hg8TQeKpXJXjeaVhD3tntBuxfmOas9UdROKYge0JWMDEt1QcKjKRyRPEmgkImQr7QPd5OTxYMaIWhERQzguukThIe/m8p5nmgisyqSXITqEAtcqgqex0qNxFt60ruTkP3y+glExK0v2Pa0YIAqSjiOqCwREyLe3KwbcYtpHJuYqCcj5VWVfC39ZcQq5UYEKsiAHdrpDzgJ9ZKgPkuuxuzK9usfZPmuFBIiVi5MxSU279DyYqfL3MXiUAERd0r56Up2XoJoAy2Ys+gomlbYyA+rpBUwuvK7oHB3j8saYZRPGJUTIOW6Qnb6wSFi1Gzb13WF5SDFfiaqecQtGwcrwyjcTcLvUGACLULf1p22Dt6zH3sFvLvs4OKwgk8xM1ZtxStFtAVcHKSznVkXyX7IVf4uJeyRl04VCVZWahHSiJNUqo9HZezVbTQxWX7ApKWGxXQbMwVatkjP9Kao2W+1twd2tBZc5YTaK1cSkrmPXMcNicHCq2IRnUAKENgpdO3b7Hiq9YZ7JORZ5TZMMnFE0oCrVJ48ELJF9eeluLmS2ju6/Z5cQdWRsrRDdGElIF5GR5qmqk7bCekuY+YPa6t+GNDbwIvaSu4XA2BH2ld8xc9O0TMakU1Aqab8qTCm25EqI+E3io7PcD4MDBnl9UlZcRMZoPKhcrAQEkUo/Xcmr4/tbf3MKVFENl3Q8QEuRAkBlp3WXnuxYCy8ol7T4yr9aQQWBqAWqFbvAeURDeZHhuVIPMSQ9ddJQadAZaMmqyIRTFBxZ3WoqF9/wDmlcD2om4UlVhOWTkXIt1WT24Rtu7oSswTI2laDBRM1WEgun1aqpe/yDil5lM41vWUw2jmfDNwZN1UkyK4xAG6X4MCuttNBpTGhcddd1I2N8pW0zUBLAceTUItItJNqBCRmZb/AIBxD11ltTcXHo2TzGMvK37K27DOma8y3gY1mtMvFVZAIRkbjTcBYgkkBXqqq3WJB85cgXngd1BmhMZuPiYZUZdE+Tal3T6QJVJkPjNUj3q+z3XsFgHMaaLUrCYddkrtA5Y0fKQ80s6qFi8UbgHfk3+wxRVqXy0azjpnF5iwMgzBADdPUFwVFBUD5UgDnKwt/htxFrZN1PVSxfnQrOIYxIOASXXYpJJJArt2oIAKqpl7g+1iLzGybyTo2PGelK8qVBmBcKlaukk6X286SFt54rGp6w7FoVfFhiOaSnphhlKVNvo1lX5PHSu9uRMFVUhVDk3bjD3PJiwZYuuzlGx8k2rqHGpXSpG4SFCJ1VUAMR8du28SL38ZNRSm35PPovPSrGndXul5AhFUtnk5yw6Y0zTbV1o1BJSCtmw1dLVtPyJXD854ZebM0ZOkvOVbDQxFaqRqjs5QzwjjTnIf9oxEGZiH+adYK+VPbloXLkX1N1LV9S1nFjvjny7dIniXjSNU1+9HwHjLmX+WmRVZIrcFN1RxTQA1UCQape+N4q7ffxE1tCZY0/MLUxT7apV5BuYDruX6GkB81mkCAmezzji0aFsC0Elg3tg3ciJI59pvPzIPN5NGoaYi5SPqRv3ThVzFoEDpv0iRavMPixl6rmbCrYd0wiTjEllVQPv26Da7zXXFhPJemn+aFdQtJM1kifToKt0NdXSHVsIg3e7h86plgKigE83AXMNhAXsl14G80ME/m8yf+eyp2sjlUh6rjUGMWECYi6aJJEqPHpLnqh1Dj0Wk5ZN1nLeNZuSVV4d1xKTpVVVKzlSILrN/gt3gGIcqZbK70pIhU8wBZ8luHy1AVPHLKAykmzlwkX8WutJUOghE9hiYeE8VOWgR5laPEAnpVB9UTzBRZmqiKSiR2GVtpX8tt3ixYI+crCLaijA1JKsUQ2WoPVUg8Wls89+CpSeVx1a0B4lUDZAHijoxcOwJIEASJCy6y79f7ultuxB11TUdxLNFCpl3bVIjFJsSQpkNvUVnIReHdy+zdgm+Im33ch1dquHk7YMsqzOE453SGP0veVB/OHX4rEi4qqeFbqFR6vdy4lCzGr90iLk65mkhtP8Aw1ewvJ7WIV4wBJRMEn/ebxLVO375X8o4cI0+s4RTbIAqSgcoiuBJeLxc37+H4tUxDIRFcuqWH6R0mHNJCpJrXlWq6hr1tIPBNLaKrpwW/lC3zBhRSvMwmemzHMWaG8bytfr2eHw7+XFdFA/sVVlULC3iRH0Y5dCtrJmk8VuS+yQ6B6vFiWQ33VRNXAsycxdNqDzMWceCBmqSBOlR0j9r2yEsQMpV9cqvh/thlyagkDfSFwV4hbv9u8yIsQ6Y6RbLvePdZhwiQGJG1bERXcxbrdmJCw2G0VGU16akVpzhXj9FVdZJuCRqueb3vHjzMgESNdmkIh1CFuOVGrlL9CI3jdaqkZffx5ZcBb2IIppb7+4Mvx4v9lRSzxc1xTMg0hANnJhinzbTIbx8nJhNRwY/ZObS9sx/DhQV1iR+sI6t++4VTvxaIr0l4mCzoS0gLoDaYY54C20+9t8xDtxzxQc9nskWFkytTI9G3Z1GWPSUFII0+ardE0HguhVLS5t6R9HOVn+5h4zpd44RExYEgP2WrusVV3F7F1n3cNUX6OiIE8sT8KgmVvy2YkE1zaiQcekzUS5LVVxVLZ0kFwdXlxQRErNK8izNB4mtwfeANiqHDhZv5Oq/DwWr90mVoCqmZ/xZI91h9PNiPTmXLeSTkkLiJIuYr7y/pbhZGeftyWNu/JLiNx/N4CxBSTeapypIFRY5SKXHSPSIVNukfN9z3N+GMlLhKEijwCCBJXiRDfeqfiK8v5mLFPVrNzLEWC4JKjaCREJbiAOQfZ2jitiJkV6vzDgptQJRawtucUS1A5x1Rs+9hmok2HvkgK4+a0/52JRRLdyDhEgtUUPREk+UhwSCqJU2pFQJQQDdt5saAzQi5KoMwssTBFBIlY2Ca6CQDakZkVnIXSFvPgD1YkiLhvpBtPZuPz42ZmtG0rRGaWVM361Q4Vo8hF36HCgIJAFpXXAW8R9gcDXR0WhbHvS+peo9xEt75dUidJw6zx4sLuYmBaOJFdNXujVSbgltK3cPdXe9iBa505U/TZSlm02k7k36ot9NFsqVzgVSS0rgCy/q+fk3YrRV5VSdUumcOUUo1ZaooEv9khs+1u5t34sDGWmYGbWj3k9TFqiTrhddjIvGIEaqpapAKStm+4t237XHN6PimhOLTfKnJUJmRE7zLVEnEozDF56YlgzQklUDSQXXQusV6bvix+URGBFw/q0mGgIOnVo6QJbNUrStDbu5sCKBzIh2cPwcRKuRbsnCS6QkqqLfSHbpJEAkelybcIeh5JUjmS2kUqzcyDGYXN0DJByRBw4gW8rRs8XL4cNy4go9JCXi+UhRo3dpIh1/G0+u/ipGbONaCg6NAk1zSscpdRcwld8XVgJ15Wc7O1y/bURTsWZSLN229Pp1kFidLB9kIjeQCXm5ufHsxcwPpbPEzdNrWjJ0YiWh3tpFs5+Yi24aNIGipFyhFVO2dtiAVQZromgl3u20VSPp22hfdzYzdTxY3W13VGBj7XeT+3shRNZr+rSh6MG9caTOWp2n0haulUle9XuBUi33WL82IMQRJ0+bMKXjVG+qYGVzrfZuD9PggyCVPQL9FtDVOxXIyBB0kIa4pKkvvG4xED6fgxDzUTSXomHAS005eKcQaSqA/VgStPpsxnKmtap5CQlIVrqXiQpez8r8VXXTT1XIjIxNG6qyWkrcPFK97pb+rpK74cc/RVorAPpFKmFxcpLpCKIqq3ldq3c/sj8WHa01lfRaKziIolF9azJJdzJOiVNW8SvId1gFy8m/b7WKPUtd0m2kSl28YximStiSSA6qohcFtxXq+9y4Mawwd9VhJRLikpfn8VMsaceP5BNnLQMq2EO61bLQEPERW+1hNvAs3TP6qCoi4EFbbt4h8OEJCqYhV8k3dTSY8UlpJigFyQBZsIRuxCOGcVwOiE8+cqGaWkmhtIdhDu3cu7lxYzi2W8UMXED+4SVyiYNg1dCCWuoJjZdq7N6W/kS6MWRvSUPE6b8X7wlm6twJCY3bD9nAqi6cqaBn1p1g5HQZDeJEqSQKl1Bbd7WCmxqibdKJvFWCVqR8UqOkIh8XP1DieD1CzuUXOJasxiJKxZTw0aNPizXAtMJJx3qqXMlaPzbfmwS89msIh2fUVknCmik8ZKkKRhtu27enqwPss75LLJZ+6R1XEhLOD0xcctt24PLy8pYJFXU+4PJ/0QhTZRBFKtUF1ycKpGNp8gkA83Tj4+wwbvZjuJJAqiCpbqXC2kJLKbhxTlTu0UuMkWwtIkkrrAK7QQIj+K23DcWsDLM2LYFnKRNBV3EkG7q/DguyGU2Zqj1ucPXbHTSYt0tT0zaqBbEBFW72juwjWNH5rN2MSJPI9R4gzNrqNHSHe2lsuLq2Fg4re+EtJfNXRBv1IWI5Twj8rb/RDqgX/wBH2Lp+1ePF0yeNCVEguttuv2hcZ8w7cDOopt+6q508MyEUngJaiiW4rC5yE+orcEOv6Eqh5HxcDUSLYXDdVw87tVJVJKwdt3DiW7cW0vDgVpO4tyTgDWXIkiMyERtIiHd1fixY1hEIkudXupCoridFahloE5SonTknPDIquFbVVUree7q5MPHUlAwaI03KOW0gLdVk4EhLVBBwB28obLeZXfdiDY1lAvEXDxWKfSBKqq8PbcQleqVgDi6UfI0A1FPjKbVJwAgauoNxhvt6y82KmLo0TXVi0pVEgKSvkL6tONcNtZAUXGqYXbgEzL7u74MMZ56bLL1SVm6qKXcJEZILroJD3QdFgbOT3+fy4sDWUox7GqP26LZIt/KOkfTj1UVbTDJi3beqmb7iFbC1UhVDp8eDrLTDbaYmCclJeq3+sEJRWZagnOPkon1G5QLh3+uqSSoEKqVlx9XmxOTkWw9YMbNJRu7EFS1DEgS6tmM3VzmurTVaTDZKkycj65duG4oulRSEDXIh7oF0gDZaPLi8UznfmtWThFGNogLgQBqkkQCQ8pFfvc81iR7sXlb6hrtZaVQL4FpRVi2cbCKPnLA9NOy1UiERHyXieG0DlJVVQxk1UzBZMrFUlW+vIpIJDvSvS0gIi6C3Gl723FeRzDzySbuASozSv2GQpIJXe9r/AIsNW+fHaHSaovPoMxV9X3qpO12SC6u7nH7W/H2mIS3EPzhUSJMZSeCn5aLhJtnERijLiL0ykdVVdU7krRExG8Orbdy4JQz0a6TcAr6vQWbhfpE9AbvAY7sZ2rPtA1tVKY/S/LWFkhVXFJIncIJby6RLxXX4pktQ6cYx9e+nIlsps1zVRSflodVx/WrAw0womsS1lFVG4cdIrZ0LL0Yk1F5VBwetdcQk6AivDoL5vgwp9N6eiI9ONp9zxKbQ7w+sDYQGqWy4OkPjxhhrLHIopg4ydj5ATFJcSXVV3AY3DyLiOCPl/F1y8446N7PdPPLB4jhlGQvthGInak4JUPDj5k5QRMtXyfxXm3Z7hWwqVzLOWIWEobNiQJXAoT0N1heG6/p6rfFiPzgz/p7KoWtTg5Sk1uDNuCSTrut5ju+UfixVx7JmYtVsEQrKh6ChiacvqldWPu28p8KI382BpmZ2QhRoH6bLzcYvw8bq+qXbp+rpHckJpCqavSQ+AeTFrDQF61WuF3EwyxrJ/Ot3lVU+/wBdxsQVEh1bQ71cx37wLZ9zBErCOWa5UUinImnxjiUkD1C8A23CX+lH58D7s1QVPU7DXz0tBwajp4qAtDddCoCOrvK/+h4IebslHvcsY36Oo0/VX0dqrVFDitUS1UlSMC2l1CPMHJdhHlTuJEG1XS7LUhTWXEqyDNsqtd37QOe4Ptx8v72DpmoSzTtFVAskelezjxuv3CHBpD+E8Z/Yt6eq11AzEzR75nPBKJA6Kz6qJ6olt28oXCPP5rcHrOJhFfn2q7inKvGOOEBARAyA7G7MdLycxK3eQ/FhxeWidtUeaS+2xwRrpeyqnNLgwmnUkD8eIj0u6Egu2GFt/ubcETMh0dMsVmyTx9xnGHcO4efq+bA9cIcBdbDuV1gSP7fdy+HcV/wY1g1i6PzJjyqSUhIh46e6Vwu43VILA3BdcJhuu3YW2ihnTREtSJudXB2UdKxDNVrVTpiSMzMLk1VNKzX/AEVnh+HF4y5rlswjxbP41szUuDv7Vbzs7rbu38o4Kla9iahqleSDmNraej9Xv2rEXBKt0C8Nxldbzdf7mM7s6VRy8eI3m8kG6vEJNxF0ZJLuALSv933eTBj4uUrWpDA607tWiIP1aqTiYjQQFS0HQbgsIwS2CWEcqZwFZSpJuoKhctI+KS4d+SphcSpjs8h7xKzFfpSpKt9Aun8I/pFmSS4pJEpBIKKlbtv1dIdv4DwU8qnbWuHU0wqeLiOKSQbmQ+mEZpgR7txEKW/fgBipCqdFrmVThmA7VFVZm/SH0kiaV9ZPpBGTsBum9BJJIlbi7q5K0+UfAWHb6uZL85MHCU7KLpxseu3B+KACKSpq27LutIQK672MX5aAgFUSZy8PDPG7dUCSScxKBBeJezzYHlWU1QEIsxePPWFP+tV1TVSZKgSS5gfIIuL7PZC0N+DH3RDVJSb7iN61ZoC5RUWIkgVdaAJqcxeEvlx1Vz9p6FGjrj7Q19cbfAIb/vDhOIoWn45q2NcVHdggIcRYXTt5bcMpKlmhEiizi0U0QVNXW11bBut22gXlHHnKSsj2hCUkKJMZox5ULk5Odls3km0Wmk+FhCAqgKxbUO9V73cOy/cHuYN8W89XR6ZuFtVQysVUEuu3ESzjTSdJvPqKToR4USFmInZzWXAXLiTTCUfBwiryNLdaKZNtxfP7OLQph5S1KL7stywh2663ZqZmM4R0sSFkMLg1rxEBMxIbS2l+qwfOxi4YLZF0sZXaZpDtU8dg3XfNuxjn+qAdxnpIIpIkaaUW33JDaAq3XHd793x40x2LpueSyBhXLAECbstVuaayRka57f3sWuMjT04uFuXh16QWhq+dR2rGg6ZpORVVVINQuUdo/ixWc25aNYZQuI6RW1TdekPQ11EvDbiUl27GsQbyT/XYSLVIWarblS70h3W/NdgddoZN+GVyARyzZRNggTVclCKxJW4LCLaXTjJ+cCC7uNulp0x+UiBbHFoR5lLw9RSMQimb9ykq3RasmaWntHuhGwywtm3RkXmHN0nJemKZvJSn37dVclG47iExIiu+L4sPsi6Uip7KWl52ejk15SQZpLulCAmxXj3XRz+118+CJH020ZoPI4G/8YVu1F1zVL58GsUV1p3SKQxJfHammPYO1B7MFWOjncd6BcJFJqvFXHoTckSukZn3Sul4gItmIFCiKAYZvVBMfQyIaJt46PJI2iFpquHC5EZn5/wYIFaOqfiqhbuZPgnrqPQVQt3iI3WlaQ2nut/Dimq1NlDRFUy1VSdWyifpqVVIl2hiK4Cq3LutIudIbSts82M0w07mvME5EiR7jok03pQ5zio9kk6OsYF42TimTzgVWmikJCqQqFd4vL8OM6VEDld48WSRX0wcH0ht3lZjTeZVaRVZ0JPDlI7ZzLx6q3dLoEhpuLkDSEy5rOT2SwIKmrKlWC1D0wkzj2lQO2ariZ129w6u6+6/qvH4D8uNVaKZxhonXOUU0xrG3aNumHvf8UEUReKvu4NTZedtuFJIn+3mu8VmNCwzJpLNVnLEoF2JkYqrMo1C/wDEYYkSo9mYuNWm0BKwyaqNkNIxO0ebby7S+LAzvFdIycDUxsz5rL5Ctu74recitw6bs3ipCAmRF5saCLLE3Got6quWMgVuFLk+XHLjLR5w6jtdmzaJpGBkouQpGXvW4h/jC3npkveZnwQRFCVSTFG8RIOfl/dwbuzbRrqdd1E6UBNyTdukBCoIlbeV11vu4jlqYiEBI3kjApkHMRTaV43XW/dwd+ze5pxlG1E4ilYlQm5R7ZUkHgr/AGqpc5DylfgW5XFq40ZMjhuQrrJUvaIX9oiEcwzWn4dnGsxJI3CBiKX2vdNSvEcUel27z1o11YTgySegdxJaVoAXPv8AZwdM+a2gqakESqx83aCq/cClc60NUA0uqwughwJpLtD5GxzPiW8qyQkGiprgmu+uBc+awjBLkvt6MFWonHKMWWgURGAZhEt1wGc+UzVNP0HWDb0qN2oJW6Svh3dOJEu0LkyPp319Gj7RkP4cYqy+zsmO1eLWn5x9TqycQAmqrTzpUi1Ve6HXE0krLrTLZdh617cdZy0mrERNHUCThJXhhbK1AKSt4lbaV7ay738aWhvdfSuuUfQI5cfpfxWWetbBCLvTu9r/AMVstPP3JkhG3MeIH0GX6R1bhCJz1yfSbEBZlU9cTpwVvHh1qkQ/exmpbPDtJkFhZB07v3XfSNAdn+gw3bZ4doYXQw7LIWmlXgAZaH0oa6vzJY83xib5C2242ReL/wAlYXD8R1CX5/gtXo535RK+kQDMaBuP/wCGQYqlaZnZaVHAzzOLzChVSexqrdIkn6RbzSIcAP09oHtEsxFFfs4U/qWiXe1C1E/h0hHlxXxqqsq7mXldVvRsdTr6kWV6TZk7QeJL6Qrrjdpbee3aQ9Pmx6t41dpWi7Rsi7vN9pfGOH9UiEhH8+yqz2un4S2bFK1PTjxJ5Ht4Fwz4tAhIOINXk9qzAjWazb1NxPDGueHAQPq238/hxYq+qWra5qdGraj9Xvhbx3AJNGTUWIpBqiWraZFfvu5cS+Xnp9NVU6tTzWHJBcXFy+oruFufsbPEP7uFdXfW4dYIhWko7eQhlRQqdIP7tHvbjELCV2/iwxcayRaJ8wd7dcXJg/TWVnEQrhs1ptz6yVcXpKqugEBC4fNihvsnqz3aUIoqVtlxOgt6vNhc1xTb3f0g/ORhW2p7qGr7MWKo36o8Rck6VQ1UkBG4d5DzFt6Lx5+ezZz4pMtXWZFXlZAsPVTcL7F1+cgM/Ef4MHpnkzPcUmtNx3dtytSHaqW8ebmxzKZWItVkwGNkCuIztSMCtALiM/Z5cM6biS2AUWokSoftVZGR6RQ4oxWtaSotxCSNSISUHIK67xBRrcuD0C2qiqe8BEbhMdvNy8mDb2WqXaVbmCSL+VeNBZMHS+o0O07xHxYqpUG2YNWP0hgZBszeugFBVS+wur2D2e/gidmgUaezadQ8c3drkrTkgvcYaVu22673RxfWVnW23CPupc611dqLSsHaAkodXLkYqBknz5xD1C0FwooV1x6Dorxvuv6sWTIlwt+aGHbBrimkk44cR2hvdKld8eBzmY1D82s06VBS4Klb7i/SnoLlt3ftfDi1ZezoRGS9HgRpJCDBxq6txf4Yv4BLxYQ2Iv8ALW0U+MHCFFpmP1oUSWVIbf1p7uXCjhDQTvScrj7JFiot61jWoi5OSZ6gCYkJA48A/svKeOU8w2D0rCfthI9v2Tr8CGHIiqCVw13JIiHHuR8PfnhF0qsKil79yRfy54pLitWYrcNxiFx7BLvx++liBmM02EaJGqa6g3foxIrvetxeoxFXxQ7hsayTxLxfWP38V2WqqSarE29ZLqiA2+bAtlM82zCQEBinha19vL7WIcs1WxPicuma6pOxs0x6cEt0xrxOgmPaclgXy5J/ZcorONALZzWJL2feLGSX0ii6UL+Cmdu/mJx/5+NcSA5XZvwbqm6yrlSmmoLg/SVQS1zIwuG0x97qxRXmQHZ7tvb9oR8P8vDKj9zDq2vtUoxcWcuTD9Q7JtZrdKo3XkzQEQA9wmr+NUsVN4kao7wEvMV+NYKdnvIdVQkR7SCBF0fwMv8Au4jXnZXyoJP+C+0nGK3h1Qi/3rcPm7rTd5Jyt9TKUVlNZCwStAbvf/ewVOyyrpZnOD3CQQMhaQ9OwcXaS7LECgJGhnfTTkQ5R4JwJ/CY46o/KVbJueUq11VsRMJrM1Wem0LoK0r9/s+DFrlwpnWyESU2KOpB0TIVqJ9GrS6KbNJ4qOqXMRdAc+LAmdsfwyCznTNU1dIj2bzu/FjItQNatqqvGslETHExc6Kp8MvLcGAWBcdpXd1y40NS88EpRsHKtTSH1ggDduPHpEulZaO4brw6dxYWE3AZJ4LkygnAk8uvVc3EYeESxGyEo83LaKCgpD1IJEXzjiQRcBaSJI94HmEvDhi40V2ZAKJWmFoFePPdimCmkRmXIrIs0FmKXFtz0k+Aa3ls3/osOBi3LpmRulk7gv7oWTfcHw4ZrQxoLIvDjXiaaQ7LecfH1YWTmUUkxA0VxvvENh8luJqCTdRoKokt3Q7T26CVt9o+XFHyrZuXklXzNgCCpBOX7l0kP0XnIcW5xKcG14NVFe207NvjAf3cVHIt4iq6rxyBjcczZu8FuLg2konuV6o2npVq4WNcGYpmPN6xa+D2sQZMlmb4tf1eJbPsn6BDy7+QsTUXMrcU6RLvdW+/5sVGYan62bht36Q7eT7IsQUhRAhY146a2NwSUUNILxFwF159XN7OJZaBnl1i/gdcist0htsHHo+NWKLarWDcDNICKzEeokDWaZ6qNwm45RtxEVIlPI09UgsWqKsI+1LnHKkZeGzELJUvVRDYUDJkRrmf8VLHSLxEbTsEbAPCMs9RVRT1e9sPbi2KjJSTqLfpOHQCwXHvT/RHt2YHtaUhkDUcwoeeKMnGSTczbxxarhAFWnNtsSIOcy+TF0fEbcnGqjamquZJXe3gc5wUBMVk+ZysNKx7ZNubhqSbkldyvdEZ8pByKjiES5CVgiLulzaufzHdhh6mobXMKQQHwlMkJ/O1wmt2duxOShAGbsmkXNb6+bkH/uLgcqZKVOThFsExBko4PSD6wYl7f2WJB12eK/Zp6yrmM3q2Wi66/wDRebE5PhzKfUaE+6rkt2aex4aImhne+GzZb68a/wDzriJW7KfZgftVnMTnqoXDnaWrMsxt/wBRip/mZrNJxwBcMQmF9wuvHtDpw4WyjrC2zhma6Zjy8UkJYkL7/eUCttCa6b9nuhqKlxqPLvNeHknCSThukLmWalfqpEke20d1qpWYNCIOeFK1y+XsG24rxuP4RwBSyqqFm+RBVsgkSthj9aH2fF5cPk85qthqyUpaSbEgMeeq4UQNddLhLtyuz2vBi0TOo3Khxhil9WtBCDn6NpuScuUu9d7d4/4OOJhHiWrdFZJa4klwVEdXcWzfiDpeoI2oG7iYgaw4yN1XFqqborL/AOhDiyDKMybp6U25EvM4L8GLCGCoF1U9OXmOKJ4lK28OJ7VHVt1+IdarZUy2SqpKBs003BD1+1gkPHSJKOnLCbkNPg3pB9YVH/B1fNiivpd+lHpohWc4k4Vv3FMr2cvhuxRA1bJQZVK/kVCZunK93CuLiJci/RYpMLKA14zVWIlAvtK7FkrStZhmnY1nnlysa3vLiD3GaSV/x7sBF9VEwkssaUk5JQy6lbsRJ8WiiSiRQV8rLM1ywbt0YR+u2eW28TdvE9uOsuc1cyKUhVkYGtpePUVVVI+Ceml4d2z3cD1NBzNvGISjkiRV3ndh1TiqzWAcguAjYqaQ4X3gulgSFQYJWaoO0dmvNwL6nqozCnp5rIECBNnckqSRWEJXkGG+XeYP5vq0hat9Scd6qdauhxGlq7Lea3zYHYsALina9pJgrdbi2ZWjAz1fQcPPMyeRrt5pLoCqQmQWltuDf4cWsam9y9KCGkhQwyT51JN36iAuFzV0lAutuK7muweuytXFAZEesJ5xT01OVc9IGoKJPRbMkmV4kY227yMhHcXgxQyyx7RiC7pJnli6dswVPSubhdZds3XX4iqReTyU86ipyHGMdNFwQeJqB3qCoqjtK/kw2deqWWiMS2oFphg3dq+hTztzUNVDUYSqMjXLlq7AEtJ26QJIb+Qt4/0sxh7NWiXWfSNP5iZVN0XqiUWDCeY3i24FwBXXDq2Xierstu5Rw2zSmWzCcJs3eCJGIErpBbafXdhzkpmC/wAsmqdFVHQk4K1QP26TV2p3CV9oj1+7iFDUvOhmEr6lhratX0j9DMqOzD+aJhPU5ISkhT8qlIqwzde7jXCRDfcqO9WwxSusssDmxmCdb9oPMOHarZlN5IZGklWTynEhboJtVGiViRNUEktgGA2qh7CvViVa9r3LriBbL0lOJkRWbtKz72JZHtS5aOhcWUxVifCpa6pIN0CtDx/b+bBZVNT3VWDDEdysy2aFYOqPeQ9SwMvJsz7oot9CKlxQeUrbOQua8TxmyQyyJvSUg8ko+cGaal9QS4PUNXvR2q7tndXbt3Rg0l2rMoi0kXsbUbYVTvuUYBcQf6XD1x2gMjiR1lfXbMlbrCVj1Rut5uQceB+plIhXiFghiJLNcZVNSU2iqDqk37l56bm4E6QKxALRs227i5sEij+0GtAwrP1zlBFrkA8P60ctTFLV8doDd8OLjJZ4ZRKi4bR0wuq6V2/WW7gbT98cV+m1fXbhZaLbKyab1UyQ4ZXVu926+7EiqXI6hUGmB7yfVZ2iaPzTybmKKrc5WKqFo4BWBRhEDVi3XjJ1xCpG3s27kvhxnKmYP6S1HF08k5FNWTeN2Aql0EqYjd82NT1E1OixGNrmH9UOktK4nKQ/pbrLrPHpK/AeIWaeUA6akbKVhVXCQmqIiI3EdvTt8uBuvE0JFFTepCfiBObUWIH+pcC/auje5ovDUS7oeGhh0r/fV5cBztI9kyuezpTcbFK1Y1mYeoH6rpJIGpoKiq3ER3dHIr9/F9o7KjNnMCPTWpKEqh8xJU0mpNBXsILlevk6RxIZ0dn7PGJ9SxUtl1UpQrcjdKrjrvABXSEeYCLzfGeBqa7uOnqbKK91JtrasZrUzGwzVF/LSSgi4VEQTTHdZ1lgvyj/ACOzDgI1nRuT85GVBHGALlCKkTN0l1mrq3K3eH3+bpsLfJGNqj+DRZik6BJUR1H5IdQ7O9Ky6/pxbsvckatygllqkpmkpWYTcNTbrpJOCVS39V7fq8GC/OtDmxfKKs6jVtNzYbks/ZtIZfNGNPtKUgZqHmGiThKZRkLLVd17dUbP2RWn7GBx6fT6fT6fy+nGmM3qVe5tVanLyiPqF40YJMFUFSMrrLrCK/fdYWBu6yReJOCBCYJWzbcLXb97Bw1NMG0pClrlNUulmOtxJDtjS9QywicXAyDwT5SQaqq/cHG2uzVEv4zszV5ES0auzdHDVGkbZykSSo/UiINhbvHi6ZI9p1hknScDl64oNzJKU+wBLi4+U0jXMzJW+0x83j6cXaazGZ9oWSWrBnFSEU3cQb2GVaO1QVMj4Jcr7g/lRwCVwYd0iStbpCaKRLNPaWfuWS2XKzVyqgodFRgGSZkJ8pYD7ielVUd0q+/054JGd03D1yVDnTDljMox9LsmbohVt0nAbSEtw4nsu6Ky1pKmXE3mCwayFfOHTRCJpt3qi1jm7gBIJR5eVio2FsS+PBlta64QtNkrnCiqXlfS9c1lSdUQlIU2+mHDuZinFzbmEElXV+7kt379/gxpCmexzmRUyLdzUE9B00idgaS6pruBsG3o7r4VSxq7KGoMh6IpuPpWmazinzhxYSrkS0jeKn1CICNg81iQbB6AxZK47QmS2XfDtqlknirhwdjdBjEOnJKmO0xCxKy7d4sHMWscwo6lS5cIig/RPYjoyn2qIVV68qwUiNXSJVJs13W7rQIVT5R68EJ12PsipfRN7l1Hio33JE2cOENI/HaBCF3mxcKfzfZ1Xwq0JlpXDxm4SSXNRBqyIEkj5DIeKvDk5bL/AC4LVOnAyLP1gzbLioBaSou25oKpH4SA+Tpx5ymap9JCqRfcPmWbX3YtoNdrrRdW1xHoshNwDZtKCSSphu729IjPf58M+zzDNq+7OKNEv3K7RvUDdxErrIfapAq3ETIfiLGsHjhtwLpHVTHuD23+TGWOyOSTPKGnnjpZNBu1daqqihWiICkN5EfhwqqxEG9I8yOpiItyslCdj/LrJlGYqRJao6xcWg8CNfkkaGq3EiSBJABETV3kI6pFutxSHStT5lyQ1PmhA1USlgnHU6hS8jwUOHh1dKxVXxq39doWBjV/pq2mF4w5pvUMU4jQuInab1IkB9+63AYq7taZA0e8UB1mFGLrJFaaTEtf5g2fPiWlrTtVGU7VCsls6Bz+i+0MtmdEdnuoahp1JuaTNs9cJMUuIuKxc0ld52AZdHPjTkbVPaSnot1G1N2dkl498Jt1UCnGpWpWc28h33+Tp5sVuU/qg2ViQkFPhHvhAuaQeOGf/wBikB/FiIU/qgMUuXDNVKabEfJa6VX+crBwN1l3lLSiuqHzCnTTIHNqQLWk6PXSWMRuvkWf4VyxNo9njM5ch1YeM0w5RdyV1vwYDlQdvmpicLehrmcxa6RGApMqaakf+teFf8uKJLdujNaSBZJLNCQNP7LTQi0EDIS9hqX38ExqT2iSA6i2tF1nlw+yxgFqir55TEc1DYkPoeKqKulehJJIUiMy8o4y9XUMtVtZFU9UG5p5OVBu3b06m4AXS4AIiAql+iutHbz2HvtPFFqzNVhX8upUVcVZmV66VH8oPWUwqnpBbbaIWpAkPs4rsbmI2hJBvKxcrWbmQbrpOkH0oDKQVQVExID71Ar7PCR2Ym5R1ZjERVzTTTRSIltyI7GZtUk1JsIF8mkRG3i9VVKLan7FpavtGRGXWRYtEh2fa/dIiirK000jUvsmjQjbIJfL97GJ6g7X3aTnGbhgwzIeJav+FqRbNBx7pJDsL2MCWalM16lUWeVNX8rIIgldc7lFSVV8u9UjxVT8OS7V9xLql+pMojtWls+syYrKWY+hNHyULUNRAB8R6v1Saxx27LlT51fKJ+34MUnJXJGm8yZRarc+M7IiDcDZw6Ey/S4pe7dcKSpDt/pbjONURFSM2xIxbYnPdapmiuJXH19WKlTaD2sHSgKysQg/MvQOnIKq66pj4duGoNC0OWJRVY0gtah3EvofnplVSsbIQ9JURWECvFw7L1oqo2C0VVT2pbrivEBG7n6sReW/Y8ja0o+Uqqpszo+BJJ1w7XVMSBewLj5yE+ofnwNaDzpZ0lQcXRk3SsU+UjEjS4lshbqpGVwAd+/bv+PD5bPGgFx+u5aCrZyjxWkA+6A4qiQDAVR1R0dK0dlP2F2cRVDiSRzj4lmDLSV9RaWveXRed4Wjb9zDPMrsk5IRdRLPBzyk0poD1XTSQXarnqgkRbrACy8hAffxn+F7QVK0u89ZUpRknCvgvtXZTy6Bf7LES4zfptwm4WZUG+J4rq9+pMmR3n1F3W/EQF3mURoe0zVS8qaQqdvNUu/iwIVnAJGKiCoXDqgI+L9rje3adyqo9LKmn6MiQYlWVMoMmrfhku/VSAbVRVK3YH6UL8YPpuq21KPol4yhHIlFECokMiViulpbeXF8ddoyVevieOoddy4cHeaq8lqmR+YjSxAmilJHVLE4xSi2S2YpJ3t4FdTzCOJCFy2r+OHWdUwqoKX6JdvcNn4MMW/agnmo2N6VZ3B4nAf+VjlTtS1auoX9rzMSMP1/83FpSPchepkoCSqqsIhQssnLZsSgKqiYshD61Z3tpCA3iQbryLwbbsXXL3K2oVXkg/nopcSjEuIV4lK4VxO7yl7V3lPFnzJQpiXqaLq2ipRb0PAeOCdE9ZpEF5DpAfdW7bb+Xfye3jiDkijolrAoSzty1bhaBLl3pARXWEXlMixmOCvJnduJ32et0pU7JDJyQkOPyfz8a6HxB/8AkI3wfY6hq3uC9UOaRjqj4kG5QMqImcWh6ok6niJAFwE9eOakkklzXCWrvHdzfLiOy3q3I5WKeOJuYl4p0Lp0LVRBBR8lZs0i5RIDtuv6eocXXOKkhqdwx9XKtkFGuq1LUDdpGIlb8ZF8WBXTuSU3FqC5Op2KDoTM7hamqPk240l08mF2pX3qKiFxwdMSH/1/NYi3+VChv9MN0uTgi45uH2lOvpjJl0JW1nKWhZtKJuuDrvK797CPrXJRwmnr5mulVOrTix+a5ccVKayqOGYtwTqFNW9UxFNNr/OxEfm0crei83hF5iZjt+AsYq5WY7HUlSVzxNuDy+j8FqaG5t3RjrNJEhL96JKauSypaLWupkrLNxRIkJez3+zCyjfKUVNJCtpVK/cZLxICPyK4FzTKgVViApUbbv8AmeCNXFHZWK0HRMPBwnBVBHtXHrySTVJDjjNUtLbu5Q6sKiwZEojVF/T8EYJu/wC2lU2+WKo7MwnwkXL/AAWBfdX5cdtYrLXhiWf1+6Ag6UGAK/Ka+B2jltELiQDIvB6tzwv3cPW+V4KokbV45UU8pEWIG4Abakvm4L3a/wC2rUt+a7iBRe1U80T2a6UXd/4+HDWGyoetVHP5wlUCM7UmxMN1niLvR/F7WKCtlulqcMTxcRu3EVxfLhf05btvQ3FyrMBzW2pgV2LcwI6agv6fgo6/9tXkqcy3ESMMyGw2EHMyVEPxYRbtaDak4B7XJCVgClpMFS+YyGzFHWy3jbbxfvFfetw1/NywJRQ+JebPCvb81uPglge6qL5uH4KJT/20XW8VkkPobquszJJRT9KmnCCnb7NzrD9OK7Pao3lmHUCagbyti0NKz2tX2cCocqGBiJk9ciPiVfXD93DoMloo/SSiVUtNTlHUNJT5TIbsBuQxx1VjnzcPwVwz/wBtElZLs8Nbv+EiX5/tBYJWfOqOG6inZ/1EwHM14qjfuU4VK6z2dX8eB04yW9DK5YJ1kQ8u1m3u+HVLDRTK1w3IQZyrYiMuXQH8GJCFPy1jn9P+qnJ3/bFXadkci2IpuG9eTSon0qxIfhXxHo1LlQuA+rqhnHJXWkQtQEB901fxYp7rL6capiCD9iReVLCDShptLU1+GK/9WIDg1rJAPhBF8r+yoKXdRBKWyuJHdJ1KqXWPDoCI+8Cpfcw2+lWWCSxaFMybsQ23PZT7U7S6UkhsG+3buxVVKJfCmIKqiPu4jvoc5ESvcikPTqCQ4824Bfpi+co6u6pGvpaBmoqDGEYNmy0aJi6RbBuX3DcRERXn1YKGZmc+Wmas8itERUvERrJq3apDIoJDdYlaW0CLbzYBr+nFGL1mmTnXUcWaSaYeIrbMWaXyylYOeWhZjSScNSANqRDdsu5TEfFg17JNgRNzbtVPa5pEIo1QnaqpVdJAKinWvGx48HoJpKp3EltuLbZutuxL/wBc/T5i34CXFPh7HSQ6qt6R9Fu3GZ2eQFTyT0pojSQUWVMtIiFK273sWdHJqcaehO1wxFQErf44luP4sZWs4f4cwdm05q8SMaqa6GoUah7Q1LOk3CLXMdBmnb3SC4K2CZ8+0Ei+L7uF1s+KSbpx7ka8QVWSHv0EmBeMuq7fzeAfx4BTjJueVFY3DmNJMx721UbrfhLEct2cU2qiYHMJCLgbw+skVvvaWPrVlsOPvu9H8vwUirK7uosrZ8RrRZb0MKsJVrq3JWoC2O/2guuHHMt2jHL9mLaOrDhk0rLUlFTJIT3brbrDwFFslg1CBJ+ue6zu934cdDkI5PkbTS5XWhpoHu+XBw2SxiUpfRVfWazbFFaYzuf3NXq9WtHyyoCqqns8VthHdfy4pjvNOVfzLyVf1Hrk6IzMiVuK88R9cdnunmEszYUNN1FKs1mrclV14skD4sh71K3yntxU1cnZVJQkuHntn7I8MKa22gMNBfRVBVNZ3VZZbMRyqCqTXrvHXI7rgLDKczYcqoom+ixUJvsHdts+HFZd5aLNgK9xKB7Qn+7hi/oY0E9757d4VBL93DRmhtmEUM5VViKaeamVUmyZFOylQIuiSG4UEUO7LyldhUa3y6QWE4is6iaeHXBK4vmwLWmXDlM/yisBaobuI9H5PvYkU8vnHJxCG3pEcUu0NuHSBl/T8FIamsLcKL7HNqmI5P8A96ZOkndcSfcF8t+LEhnnSItiBxWtZWmPK0atvxezjP7nLGSVtBJ+0u/aYUTyblrLvWTYfFpqjbheVotBFM3Ps/gpZ9Zyivqdkv6IqTyfpR9HPklwcRiyg8akIqkatu64OQto4me07J0lRuQ/rCrHj7gHE63LVbJJEeqZEXKrstwLskcyKZTyciKXb1lHhIxEcKC7JX7W9Ix5R6/duwy7Y03E5qdnGlqYpR8Ug/dSiS5KNGa+gQJaonyCWOfUlOB3PIe0hJaCrlkCQoVNM+ctYtms7o/MKRjb0jJVk/IRA/N3REIfLiJX7ZTY2KzNYUnLxVKxJyaQrpIAQjfaN2wvNgEj2eKyYM3D9wzdJp6B26sS8IN3tpDisqZEz2kosqs5U27SFqvaJebuuXG+pLVbGpDnkkhP1P8AtouRmfTGmIRuClZzzRq7vDSbPFd1lt9wgryld1Y4a9oFi1UJ+3zHqdB5xOrrgKonpFzDdf7W7zYDkplFKxsfHuTftivNUrVEiG3l8uGiKSNu9moXsjg/Cz2xwZNlL8/uVXW6kdwo5vu0XRxJiH0vl+65RJJUhHH6zz2hCu4OqZDvdxEI24AhULMLpKSLZuPDuD2iSRYfQ+Tkk+ElTkkmJAPKuCo+bw4HPh+ytBqL8/yVrFTXOlERRwQ7S9Mnp69cSIlfduSVx047SFPJIi2QzJeEIFcFqR7flxm9WlZz0egWhRRCny6vDFb93E08y3qOOUTRdA0FZUAVFO0xO34cWlw1ag5i/nh+Co6/Wd1H5j2oKeSSIFayVIua5Vvdd8uOC7VMckgKSVZl+QOUdD/8l5j+LGaVqLkRIrgaCQbSwqxoGRkVlER9WpaQ3XKuhSu+PE8OG7VukX81Dr1T3VpiJ7VcekJA4zEdJJ3XWil/NxIp9qCmFGVh5mOElPRy2t/5uMuKZYzSSxJEtCXD/wBPQt+9jlTL+fSWFVFKGX2iNqb9D97FZcL2dz3j+z+Cn16q7q1Ar2kqfeEmkdfIOS/RarIVbS8f2W0sS7PtCNhTsdZhJE1PYYqsrgL2u6xk9nRdSJPkddixTs/bpXYmn1FVEMW4fk2Y6IBcX11C8PduvwO7w1bBMYOfZ/BTGuqecVpQe0JSSTFREawS1ErAQFOES4Wz4cN1O06bDTWhK5JmQ/p2jLQL4gG/GW2dJSr8UzQBtaqO0icJCPxXYt8DlBUx3LBI06JGO1NzOM0P9qqOIlw9b2CmThS/h+CsbrKl3aKPjXta1o5aqf8ADRUJKAXS9XHFdcdpqffkLBxmg4eIqlcYuTNQOa4tvVuwOIXsyZlzxPAhjg3Zfb6baeZr2j/mlSxW5Ls+5kQyjeSkY1mg3cCZJfwo1t/2uCm7VbikOcoFU1I/o1qJjnNk+q7bu6ll6Lc+kRMTF7BoLqiNuwRvHb/PPFaQz3gYls4RgZ2mYxq7V1V0IeOSbJEYdVoB5v6XYzM6p/0wjpRhNiJOg3FpmKvzBcGFImmDmVnAQMdq2Jd6VojZ5sUt8N0bYdGYUfor3X3+6tJNe0J6xdNYtCeSeOFXQEg2Qa7yVK0e6G3m2j8AYsFTdomoYmonUbWT9VjUDVURe+tGFrodmy8TG/ktxluDy0lXD6P0H7Nms4dCkJEvaSRkrbd7vNi25jZW1TF5hT0a9m20k8aPzSXXJUi1TC3x4m5aqEdOcS+jWP7oo8j2qmYiWvUjFVQj2qk1tOy3l5cLR/a5mI1joxuYPDbtpCKo7cZhb5bVUCJGiCdp3/Zq4blRdSXCiDBclD6h6sD+aKEtrxfOXiq3+YVrdp2v6rVTeGeaYrrGIdSpbOsLcVtbtB0mTdNs9lKWVRScGqkguy2JH48ASBoPMuLj55gx9YR6yo/WhQSNXVS8BWdOKbIQj9l/HGCq5cumQkN3mwQFmonTjnSUOvOhyrW0b2nYpUeGGoKVaohttsMQELbbREC8OH0L2sXMCso8ia2g2ajtIEnCiaW4vf8ADjHA0o9MhNKkF1Uz5RTQIsRX5u6sFXQOlJPVV5A4ZUS5vZwS3w3b9wufUo+cH+6t/Ne2RUSSPf5lxqt4brS6yHDce1alUCyIVHXcG54JU9DXC60LbuXGWIeha0NFFJrR8qKyCCWr9RVH8OH7Omat4huDmHXInG9K5sRXBhNU2mj1AR/SwRg1jvdWw0e2JMqtbFc34jf3tpJCO27kx4e2zUVusOasWkJqggkJNEi2bubdjJVOZL5urT798wo+aQJ0qZJKJxa9tnlsHEnVVA5ulGqtn0DMvhjXySqoi1V+o7SsJW8eq7qxDqFIDotC99JfBfdjIm1pf+vfqJIRMa6hiLf/AHh+Lmx+IduepWqTx8pW8DxlhikSfoSLdtt6sZ1WonNxvEDGvWEmmJrtzAVWqqXKR3e3jmWp+qmTYgmoFdRvbcqnwa47PMOPgBTCQ6pfK/8AFWk66fKijWGetDZgS/r2rYelZWYegkDp6Ui6QLYHUCRWeTx4/YjthusvKbRpbK9eNho9UtV02F1qgSp8+kRleHKOMtzkPBLzjm+KFmQWJE2JA0iSsER5T9nF2oCmqlWpQgpaLcqCa6oaqKoiN1g3dXNhm9S0tO1Iy+cgxcddKCNzjtx5jyKLYBrdkKiRiY7kvx+1hNTtZ17NKPE3s7EPk1SAiQUXQJIguusLx7efFfg6Azxa04zRZ0nK8dxQGBNlxFUW+kV9pAXit+HAzq+kmIuImNiKZmW1UpSOkuKjq4L7RG3d16t3VhI3RWm5PTIRIu90iW1GF1loVoth238znAii7rIUxANBJNsu1QSG32B2cuJEO2XmxFPGp+irwkETIyJD1mkqVngut5sAP0UbXDVD+G4IhV6O9QEbMQcrTlZOo5YImEVXcGJiqKTdJW0PcG67BAtsPnCX0l6BAO1aBcdseeeS6kq5ZNCf3aoOVng3X2WgRCFvLtxMR/avnqrTTbTbCIkE0ldVJNcErQPoIfZxlOlGdYNaZSAaLZOTATEl3Ab7riuu7vxYWX9Oa5JaydIwiSZj+jQQ/EOB3+HaInCjGXekvBWOxHStwRmdkUu6bnUFEwupYHetnGhaF2we6xDVK2yvzHkFG1RZO00o3AjMyUExcdO7VAhPGAZIaqkXiisiiKRBfeKZiI3+5hmcfV3oT/sJPBRuMkv6fDjwcIuBjNqriX59pR86jzNreVN5UUfl9U8VWOX2XkpGu2HKTaR1UHgFzpKirdt+L2caFh60rKSQJZrQ7xAQHVuQIR3W7toCN+PkFwtQJKbQkBK7lG/CiatW+lwiAP5BPzEvaI+1uwvuvk788xKsqpEPMWH/AJKxq9g1tZX19Uqyv3iOyNkkLN/Nb81uKnUb11VLBSFrGCqNRk9G1VMXQJArZ5rcfKZeSqoxv9aSReYlytxyFRVyimKKE1JJiHheW/iwHS+SvqmM2qkZeH/yU/8AEDf+2vofLdnPs9uFNY8uKicqXWCKs8Yj932cW2gsraQy/UcQmXVLVZCt51duS9smDlC9LcBkJJEYDd4Sx8wzqav7r/X0v7XFFgt5Iv5h5Cy8rNz0sTpk5bil9eVHadw8o4b1vDVzYpces1uYHdivlNcKZ12IsxJbprvKaIzPZj+denp5f1a6caCjR9whiZ23FaIjcJAI4HTzsZ5ApPL3FKzy6dur388ru+UsZTzek6ppljHLU7Ws96XCq6qSpcYruHSDxe/gYnmPm+oFn0zqD0j/ANaPFtv4cuuNIHm+uy2/1RXqm50YOxfZkS+n+RmT+XmSr+RfUTT85H+udLUFWWBcSNK639Ft5ixVpbsgZJupp0+SZ1xrSDpV0qTaYIRE7rr7dLxY+dQV1mx6R/KVWTtp7vtywp9OM4B2BVM7d5SL+nixe1wjd2nXHxrxzHIyLwqsrrRkEckor6LRnZby1j3VjN9mAgoiVwkVQXWnzXDclzezhA+yflQqZLJPK6imtgEZeuAEr/5UUrjx88k8wM4UhEEqsqK3/rKuFBrvNFx6bHFcVAh/KOlSx4eGb0JzKuw+avecqP8A2yX0CcdmjL1E1F0K+zFQeGJpGoMnuPb4rLz97FlpmBgsuIRzEQM1Vspx65rqlMPgdly6VpXDvG3pu6sfNEsyM3UViBLMCoObZa8V/exMJ15mWZJkOYc65I0ryucql+LAtbwddatnLfrBIfCrG7yxytktm5o5SUhV7tmJtpeNZt7lVVIDSbGWraRXDyluxSmGTGWMI2JwpUGYhOPskhUkwSFP4enGaXOYuZxemz6azJj5nCv72JGk6yrNSWslKjlnLckjE09Ve34cFU9hulFTZWFXpFR86NOltWrI3IaGFle4zBzNiCBuDgiTkiJKz/SDbzYhZbKyLRbC9YZ2ZlaN9paskpyeIS1cDOPqioW8uLkKwkHzcGugDYlXWl3ocw7r9vL7vhwwdVK/b7wmF1N3KSqu7FRBXYFFt7H+SJKoDuol/QUEhI2ubWZTuxWy5SSVHZ0DtV9rFyjUGbRFu3bPZ16VveruVFV1b7bbe9XL8OAgxreVILxlFbT5hTJUR9nYWOXWYNYNRTNCpJK0zPlcK4V1NFX1uh13pVrVaDIo6zWZr6k0HTUo4nxSDUAXJVC0r77r+Yt3m/exK5KZqemUratKqTjibFBUG9FBPqJUB7rYG0N1uMsvqtqF0871+5XIBPdrqlq7eXCtD5hzVOzFU+hPcT6nXAKqK3kQbbvi2/NhnR2cgZLAtWlBP1maXsrYuYQwVdM1IWENyg8j3GqvqWL3bLT27bOTxF14GFb5hPMq6Xj2dVAqvFrgqkwWSS0rVUrVTSId3WqW7AjSz2zQaEjPRM9IR6Yqn3pLpKmqZCX7ISDw4qc/nXmLmKgbafXQXatVy0E1m4kQHtG663qtxRZ+HKu34iLhDlDy/nBXVN1aMdG5HuYz+o1SCbyLB2f1oTJARVuVtu5iG3ZhrC54QrpwLlWYV00ue3GYvX0iq6JE0WmzbdZ/NxKRdUVBCIkDbgrTK/cldjRebsGh0ILzhNarTzpph4+agrUNqNwAYq37guw4mM0sr3sKiiFeNGzpJ4eqgvqiFl2wh24zEWa9cCoLzWjdbaIlwobbMQjivKmdIEi6WjS9J77rA5/Fj43bi5l4rgKOj7Mak3U03fpVDHuUY81biFfaqBD57cM1sy6bB19VkUCFI7ty6W07vawFGNVTrPW4VnDKkqkKSpElcdlwl+HDRackiJQ1Y2PuVK7kwwGngqCrBNaIj6gpJ/ErOVpiPSLVtSuXSv8APyF4sVGQlopJTupKPIbjuHigL8WBS3npRuJIii00f1d2y/HhmVh/9Wx93iu5cDdTKREolUiih9I2GsjpOY8hDlLiAxONasjlUWYG/YgIAfdi6S8ZYBq085uL+B48vMJ/zsdp1HMXI3RTQhbjtERDxXY+lROGvDUiCOTiqYgSUNVwxEQstuXS5/ixGTs9T0i6brHJM1Ebu978eTAqKsJof/VEbt8o/vYbupyUeIkkvCsiFXwliLNI8Bal8KpE0e2rWhq8lqfp5+8Zrw6skHGi0VEVRAEFbC2XH1YfTVNUfRdbSDOlzVGLNLSBeXf6rjVAhsDfbZs8nTjOMDPOaXmE5UoUVUw1RJPXG2w0iH8WFpybCXqCWnvo+KHrCRcOrRcct6pFZ58Nug4IbMGclpBjNwKWz1rHiTjfaThLnPn6sLeu4EVFNKYYl1n9aEvixmyPm2bV1rL05cJ8wpv+bCylQAqt9XhXaF/MmK42Yo6DVueC0r9KKbSTvOSj/MXFJYjXVZUwkj3EqxKzbtepfvYAzepYe3ReU5Krp9Qi8SH8GGikpSVw/wBpU0RDu/j4j/4WJDmr2a0jhLVRTyrEbFo8rw5kyC8fPij5e1p9F/XAeuI1MZB+q47/AECuDo/FgdvJmHEVAZU3OJat4GJPbg/2WImk542sfKRvqHVFwuFpWkRBgnADFslVnjJaUg8yA9aCZStNad24uIaiXLiWGr2E5KC5Scxi6dwaQiuNwmHJ1YzLHyzlgpf6qVH/ADV338TlN1LCRpOjmYqSV4hmqlckyS2meK9SvGpaWsGdYPHDdM0FkHKdllo3DZ82FFJ54lKN35QIubC1e9NUuj2sZLb1bDtyU1aVXciewRJmkkQ4fFXlMXWFl0+8xD/u4+CBd1eJ9pacfVXJCWslTDERC/mBe+/2rsRNUVHMR09PRTVskLdlLPWaBEkf2QKkIdV/II4zq4ranitBnTcu2T67RLHnGZBrvHDnWnLTXVMB3iCQGXT3uI9Dy9ntLRCNaysksNxsVytcWp2GJjYNwdXjxJOKjkpJuLZdmz+ruDVDSu5ztvu+EcZtj80+DdXrnPCjpGP8YVtEzG2/7XEk1zagTH6/K1GJddqqu4/jx4MHR3KeewSN1ROpUlm60TT0a5LmMSVVEvkLDz6S1gSO6HiFVDC8UEzcDcYJFzFceAX+dijNoeu6jGz9qqX/AIuFG+bVEpKJn9Kp4dhhaWqPMJebFpYGaqzWu8icNWypyCj9JFsJAF+nv3eTmwpIZjTdwuXtKths57VVUuf3iwIRzQoy69WoZgv80e3HL7M+k1x7qppi4+a4DL8WPdDi9mtd5FBxXhunzd4dMJoJpGBGPGluAN3hxcqZGlUqUfZyoHT+sb9vT5xak9pSI7x73S0ivS6v80eM1jXUC6WEEqneFeXKSRCWJL85eXStErMFTIZpWRb/AFnSMvqljrVEvf4X58XCJqJOj3kSIGUrOl/pEi/koOch4qXbqv1U0EkHDpw4BXYkvpeXfq3coYsEPXUO4nGMJI0rPIca6BuKgySQgIGXhND8eAGzzDpmGg27CNnnQ6r83TpNMiLVARS0ucejvfiwi4zQaOpQVlamdc1tyl9w/LiZYmRKDRCA6iWlI2vqVJwoYsJ5ITbuBBLiECAjVQJLf3Q8t93u4HtSVHSS5KAX0jtA95XoXYDqeYbQd/0wdCVu7Yf7uIWUrxEky0KheEXsfzcSaA5KLjgcqKE5VtKyksx9XHKkQOGiWg5bpWFZaO4gV6rMJvI0yRcA1BLTAL/sgL744B7erXiTpNYJVW7V6sXBrWrtJNQEpQSTPYQqCJX4W3ajdddE21EXQVudMnJJotlz2ntt5fuY/GMc2SY8Mba0Q3XJrkJX/NiLGq1V9M3IIKE3LVEk1bflP97C6NSthFZFVm5MjS2aVpW/CWE5NVOAxRIkCdrXMHCbyHeLsSbkZ3KJA5utuG3pxMN6yqyOWFZWNph9ZuFUUlUDE/cxWXE9GvE9gL6ZmG4kCLqLwe1hMJRjaV0ihcGy660uYenFoZojtXigiIzzNQdDfKZcM3mzcq0njQ2f50TxC1hLUwvLR7xhSD6IkCMOKWcvUl9Vv0cnmtxTOPN0twaD/uzvIrS9osWhNBF+6aoiZCmqZpXDziZpD+PFxGXMpDE1F5pOm1YPk5hJgQqWaV1+rd4OnBGmEqJzNptvZmRIfVO9jvW9SoIKtXAcqugqN/wn7+K23auWsg3bCDZdFJ+3V2iAntLfaPPhmxpJh9PH0ULNLTSXemhclzGKS5JB8o4KpnQARES2qJCqorkVVb9/IOVpikZf0vVdfi29QtU7TIt20ixe4vIqmGAi2f8AFuiNJI3S7SbakRKhz7bSvSvs2/NiWfMKSayjiVgYeMVjwdG3FImo3cPakVvt3kWKjVURD6LjhYFmkPEaugklynaJWezv+TDEqwndKoyABWIsssnWhJtn8dL63MSgrt01SPxXCqOCdQ9OQKsstVOW0DVE9XWgqTVZ9ONVXF9lu69fVtL2Cxl2aBggH1dsgnsAhIRt9vFxptrGqwEZpNkxcaRmavV9ls+7gKrqTYCRKQx7qJFU9nvOOdpaLo2ucuMwUhSkpCckZBpTnEpJuHAdJAVypXjzHbs9nAZY5D1FEy6bv0TcCi4Huko584cR7hfp5TEbC2+LFlZyNQoSDXgKklWJaoDqNnqoluLm2FgpRNf5tDMU/Dq5qVY5FwLe7iZRVcCvQu5FbujH1u78q91YTUxlDk3UjycY1hmhWHDDCFfExrQvWG/lElVXBWbRIrB3c2C5mMwimWXNUPPpIxdKJQzsxQUiGaW/hyss23hiitZytjk3DZeYj3KOqYd/T8cqqO3ZuNC+7A7zOr+qYsyYKsKaeR7tIw/4pIVSbntuOxUQu93pxF98jVojBGTJ3tWT2VVAQNLoUfFSbVikroES6qB2Err7rLvGWL8n/VAX6r5RI8q4wtIQVuGeVS/8DGWmTb0qQkfJF37dwlIKiNtopCSVoCPlDA0kKhdXOAa3Cps3Yz9PcrkXZA5pVhMMDqIUXI+uqShM7q8qGZl/Xic3NqyiUe7apKs2Kqq66tqS5q3gSRKj0DfaYYfyMZQE3JetYaXnoYTLVQcsHDVdIT8uqlf/AK3Gdqehjl28gkekSlypCN3ekfNhZvSUwlEi8am+bEB7tAyHm27sMa1kHHc3MiUYo6juGU1lE3IVslVqyzqQbP20or6J+KQ4B8/VZ6BPkR5FVbNULubq8flxDSHZ1nrScs37a63eoSV13wJDjNLqXzCo+PF5TVWyDRw4CxwInv8ADuux5HOzOZmoIPKnNfh1btNVIee3Flppuo0nV2ykPKo1dSxVPiUY95a0yT7KH5zm81MVlPVHCt4+S0mrZBldcGl9r3pWB7oY07TfYpoynqaSCmq2nmzxUlXCS8gkkvaaqWluSC3oHoMcYKo2v6wlIlnUi9QuWMoqkZGlHujQDnVEDtu2co42/V2ZkdlmzjY2XzSJFRk1SZuExfapmYgA39R9RFiq7XWmszYllkRF3UAzSO1pEOBRFZDq/sXyPZkqmlakzKqGIqGj+PMDJtqiqqICRWKpEOwVdobTLmwH69XzXzHi5em6XoFeXkKlqNWceO4m1yPpSESFu3DSLYIASvQHs4Pue3ajp3NiEl6DR9D+UeQekq1du/sFTJwkBpCAbzvuGy7Akp3NSioaIeJQxOkqvcGDVk2JqNm8xv70/JcNuC2LxVNUgu0zGoi5tytat9M64QvuLQfY+7PFC9nWlWeamdczTURXEwBeq05KWSQFiyutPS/al1GN1t1vjwaJTOHJD6ZxtZuMwsvpBaKBUI4RlB+ogrdfaJ90ftbTwM5St+xhmG1iXNePI+cmoeLaRbglWr1dVI0khExtSGwN92GKyX9T9ZoitJUZGCJ8qitOS1nzpb8bymrRaajIZLMP00y2owOs5MjaodN41fOymoxR86AUkIaX0FVzM7QSLSEea63qPdzYjc5uxXQ+d056+c1TM04+Mg4rgjNdu66bjSVV2Ft5htw3yXpLsl1QspW2TFAQOtBOAD1l6jcIcK4su+1cDZdZ8PvYJWU+ZbOrZhGNf1nl9OIuFbboiRAlSDSIrSsXLwj09OCae8v21zrbBRJeGmHaKzLWtVTvYHUgacpvPprWMZILpD9DJ1mQOk0SK3VaqpXaQ7uq0ebnweMv4b1D2aagiiYNnhN4uQDhnf8AF1fqA7FfLyieLLV/ZJyKzQnFKszGo+nV5wrLZBhIuEFdvJ+l6enEvW9JRtL5YVxT0Eaq7M4aQJLiVdXVvZW7y6g2Yz124hcu0XXB1d7SP2Uxo6cWygK+UMtnrVVR8G2eVgzQRjNrVt6rMWrUPAgkkqqCXupYI1H5VdpOt1E3KUklCx7jS0pZRU0hVA7rLRAbz5SHpAbbLhtxntrWUbSTpZs/jY8JRkqAtyTZpEkkYc+0xLyldi8D2z+0abUYpnm1JkzDaKBNQIBD/RYd0LFNUdu7EvEhqmpqWtLS0dGdjytnlQR41pmXIKwrpLin8pfbpJBz2JBd5uvkE8DnOzL7IHLSckKJoaYnqsqhkqAm9I24xrXlKxUbSI1dw7fj8GKPG9sXPtmpH8fmQkIx4GDJVeIS7i8LdpGl4cZ1qKuZSXdOOHfuRRWVJcvQodxLHz3mXiIt2C3wpGtQiKHbdf8A0hI7PqoWVdEzmcwo9ms37o0FX/DaXltSEQw1HhicDryraQamN2uJqrjZ5SPAjpuOZ1BIOKnqiVQ9XtEg11Vz3ruLOTxmWEKmrGWqV0dPwoelJkJCAJiVv5R82PecOykS9HWii8qqhmSxI+smyRB5AI8WKl0qeqO0GtVRSQntHiV9APitswFqdoCIdCmg+bzsq8WL8mnE+9+yO7pwq9yzcMpEwpx9IRrwDIfSxkx4da4ei/aBfLhM5dhPTJGdUcEZRWpn2TcPF8K5nJJeKj3ABfNrrpFFir0ASqVxh74Dgc1VM5aUhLPoG+TqHh0jAZCIcDwqpmPTqiJmN3kwN6CzZquj5BWlqkNVIbtBZs8Hui/ZKpFt97Hqu9Wi8WfxegkzVAzSQE/sPLvwN1l8HYkpCImOlXBbM3LdIS0KMqMi80ikP3BxB/TrKxKQGUDJ9cnYnfrlM2lf/osVNaIclvB5Fb//AIaNR+TVwxUhJL9E/ih8pS7X/wA3FmeRKMUQH2c1MJfZZY2j4VZlX8A4bp500xu1crm3/wAsVSxQSg3/ADrv4jZ/8Nmf/m4blBv7rAeRH/y3a/8Am4lmGowRKRzfpXULisumwiYnaKToufo58SFO5oU0wqlvJVVTychCu9LVj4uWBAEBMd4WqoGrcJf72BGUHK3bH8R/8uWv/m4UGGlRt76FKzxTLL/zceka+I8OM1clvWTdF4iqLHQV7+xUu9uGzpDo8mFFMy8gR3pPEi9pk6xnaUjXzX0o6npit5WCSMi3V+Kw9uP0aUlbiufwdv8A8XmX/m48K+zWihzOyNHeS0f7zB5+9iPlM68pYsk+CphjKisN9yCC46XtXqjgHlTUkqI6ryFKwbB/thZj/wCLhBeln487mDEf/i81/exMRUZrbMPUb8Wsu59SJL8ekk1QVd2jwyQldcleQ2kX3cNxqp+z9KZerWL7VO0RF5q/7IsVDMH0yyNPUJOxjxzpzsMZOlkzK8nqThUVd3NdYSWD3lPkjKzmSjqskqnnpJqIu1/V/AJK2OAHoudD/ToxqKzy4dR7ZtvS4Wr/AO3p+pYv/wDU1M+3lvubdv8A6/uh68qOPcelHiVGTdUBsUtV5iu5yvP2R93HL6o6Jjmyt1Rs13AJaopJnr3bhHbpD5sDJFkwVfJnJQaCSZDqqkTPcp7O4sdyzSNSNH0Raoqo8LsHgwQVHf1WEV3x413CXlbqeJruza22RbEpc0vi6Uku/kro7RQlVk8RR/cK1f2bI+Mznh62pnMmJY1BG008aN4nWQ0l2yKqBGYCular82A/2nspYHJ+tIuEpQ3a7eYjBkBSdlqqoXKqjpCQW3jt9rBz7Dvep5rLB9n9Kgbh7iVuKb25/TdmzAJcei2EaaZ7lUrt/FOcfjri+4Oh5WLlbmSixhjt5do/euzcLj0WKnluisuk3lUvtYpykn5tW3CazoCTRDhmyRJDaZCat5H5ry+7h0+VZpPCN08VJGy+5Mh3e7hnxjMiFZAGyCfLcVxF723GpYbE0wIkmo/O2wPD0meObu7E792HDw9dui8EBJQ1VdW3kHwD/QMIiJ6fIN2L8gQXhJck4MLe+t+PHuK7mwtxe3/OwmteXhw3u9nEgpmiUSIktr7S2D8+FhdLaKgDpDfz4YkQY8Jez8eLSpmlDMNSiK6yS1/4NmJAn6yqJfWUhG/9QkP3MQqa+3p+LDpNU9PptwG5SCStF01JJyTwxJEZVcRv6REfuYU41ZUhDjCVK7w/zcNxiJ4uSBeWmOwhaq7vlw+Rpyp2oibiBk0vMowXH8OI9TaUsw0xeODQUH97DEni3StaPhvx1MKueIJs6R0ySLcJCYmPtYi1C8GLBoWlWTqeE8uK8llSxzro2qdzdt8W6/Eaorb7WEyXMbgs9vFo0LSqz16QcNn9WQLfgRFHXaJGmJD3/e+cv3caArKGZq9pRjCUqig14h4kkKTYBLQDhUrxIUhLzdBYz3SpIlmNAg9YcYick3EkLubdjQmWIsZnthtSdLagtVZBX66BEN4JEICI3e77mIXJnLbER5RJWUZZrviJaBLJp7rSDw4iNtBIzDuFbP8AYDivNcuVnEkzjXEaxVKzVIRQXLp6dw405CwaLiHccQDO4r+ZgkXx33HiqxNLmlLC5JnTi6YDpBqRaQqiYD/JY56xZ8cSEk8zx1IcscjGDhumarNVsoqQGVrUx0g6+dcg+LDVrkUpLTw67lPh+FPdwaBEPg2ng6OGqyTdZYYSKHSEyuFJLwl+yHDOkYFH/jKUpuGj1ha6QOV3Vxl7uGGFmHA4qkXZjJZXnMnG0XLJthlRHV70NWOZiX3iwn+bJF0JGJtlCSC9ISDSu3fssGytKLhFau0WCySVjW8UmI2hfZz+fA5ZjMMBlO+IiSZ7yJcR++1LbzeLCgm6lp+Lu1O2KNp1qSH6NKuQqKNMnLFAeKblagKpb9uKspS77jFFvWMfvIy3JF+9gj8Qt64TWJ42KxLVtuHnAC2/ZD9zFPFwikV5rW970htwMFU+BFFGDaBNQ0lQpOkXQOZpPkC0W5oWbiHm1V8VyWoNEnAm64lVFItIVE1R3fArggPHrZ0S13ptUt5k25D1dVg4aulUeHbhxI71TsEkC5PHdbhixcaoRUSszao8hTSJuC0j2pDs1N34vvY6KnDFMQ4ZtcZ/aWDd8WLQ6O4nABbyeAfx4RJK9uNwCNheHExrnYihitQKJjaaR5AbGS1/MI2/fxYTidFmSToF0EzHYPcFcHjv0iwrCs2wuFD4NBMvN0+9diyLJNhZlfw2pbfaRXdPvYrJ43D9CgVsgKEUPlBms6ZuJKJZkmiZqmLkXSSVwGXhuvtwXgy6rKl6ApZWuGBJRJjYkmOg5uV3bre9+5gx0BRNOfQOLPgYbUkGDdVVROOG8tW2/cFpniT7RfojqepShmkOxFNP0mrubCKBFs9rzYqqbw/WuQwHaSqpKMQfba7yCnAUS3dOGa7AWybc7DFdJuPX+yQHC1YnSreGdNogGaqhRxjt1bt3JbYVmGbiUinDh8s64kkTdAKRCCXiIvFze/jqspJtKN3XDndw8clcJJDaIbRDq82JNVJFKSfuWZgYxQcXo1yTNmaTKQ1DM7hUAR8PVbiGh6SRVJO8nPNdbqpFd5d6WCYswRCDbrOodJcTv+s65JWmPOOkGw+bFUolswf1VFsXXoJNFVcAtJ0uIKn0CRBuC7y4csVjmWUSWOqWAadinZ5ZTDhqOlEyCifNaJoF9xLD6FyZq144I2qLxt4bkBL7hYvyzNFJYkmuuSYDba0eOrL/AGlSEsWKDbosJBuHBr96rYREuHh8RlfgU6qpFua80OtClPs81OkmRtWcfsLmXMUrv9bZhN1kLWDXReEcK0v2XKyjLd/olyPGoGbWjzj7FWzO4wDbbcfPhGtApWNiWqMTTcUu4u33NWvR7e/EqGqfqGs0lF9oAJY4Rp1/cTa2P1CMw3GhbzeK3C/0PeJCSQnEKl4U37XBYpWgYGecCtw05bce2Ng0HIWe1xQ7t3gw+qDLmSYSSyMJTcuTUEg0lXLIWx3+wBF9/F+a+eEhFDaEJWNITGneqszSRA+UXCSv3LsPHFFPGbNNzx4CKvKSTc//ACsFaPy8m14NTVbKpOL7NDSeEdnmsHEwtRraNo++cZ1C2cB1C1VcgIeya42fBj5GpPUvulZ1eQbNBb60/VFTmu0hH8OOUYhsqJaR3CfNqbvlwQPoK8npRNzFyseI2htXsFUv81cWJhrlzWDrURGH124FZcoweiJf9nSLFuW+a+SAEIhYRqTbg9aPTsLurWqpfLhVvHLIKDwQICoBhypaWCs8yvm4ZNQ3kVFMy6BEHRGr7HEIYj2sCi/apm3hF3wnZ36SrMfkMRx9PF0VYJdxVlEpuLjftuDIx3CmX2vtbrMVeqAOLFibyYTVIxAw724kgwdovLnj0RD6KkxHS3ar1uOr7wCQYh8yMuTFmo8Btcs3SAOGTkkrw2dKQDZ8GIMaT1qRDNUimaQhqvTGU4FV2u4ExJw2FncXlsVG/EKvlcvGQaM2qzXH1gubUbTapAWkF1xW7w5usBAt1uCDl2wbOmLdmMOJJpAqqWuQePqLD2vqfbJUnTLZlDiKjpd26XIVzK4LUh6x2c3KOzEW6x3MJoV4mgghdB0kbiep+K45ykRv0kgT+1VG9W7aIb7t3gxaK2oYHlb1IsL9yRN5Zxtcs19Uu9LnG3YWHVDsgSzKo1FVm23zzIDERuL7UfGOLxUUX6yzIrQ3FqCZzz2xNyQEr9uXx9WDa102qbN9pVUzQm7FCuLyvfquk7H/AAwqq2CqRglb7V5bMT0hkBPNxFyEkT4gV0AJBVIrveBXFwjY1yynG7YLbeISMCFJIuv2bMFaQnGETa2VfjK96Z6BR34UrQwEw8ZjIkQTAgSzwjlBNpJzDmRlHKqiSW9Hj0hNLb1cxH8WKWOXUVKEKKuv3RbS4oBxoGqp5ZJm+9VrKxyj0TDT4K24D5/FZ8eKbTMbJaiZqvFRLkK1UN3zYkTzo6xJQJgCVJj8lhEeJQfgpZyio8SIvmLEtD5GTcjrOWcqrp/xctNJqqRdX6+zB0p9k24EkVZKeQUAjP6ofk/lR+fFwodhFPGMkCoPl1DdX67nSVOz31SsL2TxAap/nUcsFntHJauDWUZs5FsPIYC5cNRVL/X346a5S1UEg1RePEl1AS2iNl42dHNjQEpSsUD5NylDiqsdm1VJLeHuCXz4h4mkll6yatoyhoxdYLzVTQf2kH+o/BgYjPYr8pD9nlbm6KaZxzyXX/Z6pJAPxlZhuWVWZCCL5tKOWbFSYINW17catnUQgrjWkTSoJEii6phmkXUKTwt3vHbhjVVNMGr5ubOEmEFN6tvEJEPu3q4iTYhqXh3QWY4/KipGay3Dv1JVRXqc8EQjt6dV4OJRnlzmKrTcpDlG1O+Retzbmk2fsyCy8eUUlyC72rsHaNSMJjhn9NzSjc0g4chkgSLl37dWzF8QZMWrUUUKVm0Ez5teRSIfF0L4JabHevOuw0L5T5oZUIw1YSTCZazzF0kqBGi9eoao3jdvtSs6vFi75aMa5o6iW4061XGNcKmuC3FER3kNv6Ikj6cS/a8iZVDPCophBmq0RccISXEpF/zURuAuQxxqLs70/GjlHC+sYdddY0DVImzgNI7+cxHVEOb5cNK6oNylEHNSDYaAXSJCimZTN4I9vKuq4k2aOke5Rm6VLcPnVs+LAfq1usVZNZVhOyklMO3iStxM1UCVcauy0dAQ8PixvWoGbNq8bsGcauShpARbR2837XA37SjVh9FYVykaCSySQAWmrpGG7yK3/wC7jHW+tFu4OMZcfz4UzdDsxIeZURvWFfuqdjXMdVLds8VapKk0cuI4be6G+68RMC97CECecz90R/TaDFS4trmUAtW/pFICL7mClD0hSqsLErPzfLujQSvJtJPLx7oS3bsXQqUh2pIrDJPEEdW0xKcdEr7o3YkeDAl2ba8XtLFR5S1UwdKRT+aL0rGqqqZJxzxQSMi5ruF3+7iSistq4V4pgKqv1UtIV/UT/cFvT3Gz4caPqRrHHVqIMwkHKaqQCKi6qqpbC6L19mImBYLOqsqDQWkEBBdLbckVx6V11pq7MBleSdIpYInqYi2JLPimTcxFx7hy9RU4VUgAyJLQ3/8AtSAYq7GnYqOkNaRbPiUs5r0rC8wd0XhtxoHMJk8iIEVhmFxFWUMVUBVSER2jYRAHUeBTMOrpBifrJySYMNnE3bTu3gPe8t927DOlqn3wIlWVGIRNUJ7SlNuHiYILSCSaqvep6F3w2pYukRlvRjRqWhOu0EzHcL2ESVu+ND93DuHXYDJMXKr9mNpHuJIS+UysP3sEdutCKt/40ooRj0kgkP8A7k4Fq7q+1gIgRfn+CkNG1uQocZQZbukCWVds1PNwvDfcVHEX6cr6A4XSCKjyTDqQeK6vuia5fcwTHxP2/dMH7FAT5buFV/exW5J7LsN6j9DfZcTZUEvuCOPtNcqw8PXEoOUzQ8qHD7LWivykqlFChZ1C6Ld7V+LJQuUFKvycLM1ZAU0l0gVFB1qpFf5gS2ezdhRSS9AEWhKuU1rrvteb5sHPIR0wf0++cvJVtxQSiV1xbrDHyCWCK261TVMRyJRbpmpbUFqkyro9q3bi8jWjtEFVbCWVuLlH2sNSoDLhW4GdP0/daduqgY/hwX80lwZuGNvAiKouzIi/lbfD4B5sUlbRkk0W1iXC2n36YcvL1AI3+zfiulr6p1gSmXzlMmGpbVCMciKZlRRW9OXbR8N9o6Mjww/DqjiHUyogSdlGtaYkoYjsSJBCUEvY+1u+9jUNP04jGt41swqp8uo9KxUZIniqRctgpDpFZfdvwQE8tXMczT9V1U+Y33qr+soFV8An5O4S24Moq2veIhkUR/P60G/kByrEP9bTDJKaLz0TLUjLlXND94cOnnZYp5chSSknntarXb/r8bQRy3qeUWWbJZxR5iY7UAhlWe/2Q3e9ih/1t1c8Y1lTf04N5AqBJOFSJXzFe13+/gsn7nubIlUHU9pD9pZPf9l2ko67VqFyuoHT9VL7it2GQ5GxsJKIyiSLldNLZpk32cv8rjarjKepHTxP1stHruGiVzcRboCCp2dWkxG8cD2eoaqlXUss/hGxKND4cdJgXBq91s6R+5il+53Vr1haVIWKY9orNsxSTYZbiUmAIcomOlaHzq4XplCRp94MqzNckwVuIUhS+9d5sWetmZsqpUbOIRCKcAgF6aFwgXmEduE4FBt6t79ZJPvT3Fz4i7WO5US1K9qmGUlckZEFxFy4R0i0DHVUFUebFXlNEG5OUmiDmw9xaX4sSiZkg17p85JEP2SX48V2WXR3apqF/KCP4Cwjpm+gvQjHWtKReOgeOCcpNmw7QG27w3dN2It8wbEKOuzbbErbhLm3de7m/dw4WSBfeOl8eI9wqDVSw0bhs5ht/ew5YlyoYmlDuWWl6O6BG4y6to47iKQXrGpKvWVZruVm9OmqBCV1ghZ4MPXWi5TvFFTn5rhHBCyBYRq9TVM2fmQk7px2KQ8RuVMbSAA8eGYVR0zZO+yhSYEyFDttlQzhnSwK8ckjcdpLidhGHJ0jiGqygX7VinJMwcqE4Ll4ciS2iO67dzYPmZUXFN6PTXZG5FQJe0yIiErDSIvF5cfoU5Ay9HwJrOSTU4MOVVfaf9BwNb7q+/F8iVrlI0OkVnlagTJqmsu2bJEfNcgY45Y5bhqXnJICn1WqiP38acKlGySNiE8KSdv/AL7hV+Y0r8MxpV5cJhNsVUz/AFsdb/4WGoXEyQhUgoAlQyIuBbIaC5K2Bz3fcxGuMr3nAia5tkhMjtIUjI9hY0g4pQxdCZHHkVwfZM7T/wBlhjKUvdGt2Za+mke0UuXFoVhBzKBUYrM40azauFGaqyfLzEgezd8+ItSmGGoQesECI/C1Mfw4Pjqi2CsgJqhJ6gAYBagGItSkgJwWgwk9niStwxCskqCpkI0aPYGx1gC4g5ysP93ESpBtrv0Qj7JYMlQQzmBgSfmDxJPigStIua8CwOX0o2EiBUDK/l3jjzT7pluVDrQgoFSn2xNxR0UuYz1NI7yuH7mOk6UZ7d6m8fMPUWJRGXbJKFYG4/FaX4sSDWoY25PXNDkt2q2j97F5Ov8AKqAFpVt1SDNL7L0Xf53+diPWpzSTK0BAvbxeJKRilRsZP2wkZc2raX3sN2LUHTzv1lFx0uo/3CI/kx5h1/mUyEFX6dpB5Nz7NnIopCKwGA9+CQkYJFZ1D4fmwpUlDOWFRSTNu2EUReK6HfiXdXlZ1eDF8i4YEKkjUQjbh1T+0Iiu2F5cWiQhGysks8VZptXG8FUNLZzYMzSUMoUE29GrEtYuzXIfbx76FmkREgwX+9gyJw1t31NmV/7LDcogEuRsI+5iGaankChK3poxHV9Vbv2qWG/0XubqGSIioBAIJb7iDdg1aB8ndf5oNmGa0dqpj9Zt/wA1biQumo5AoLrU0sKd5My+P+dhjBwx6LoxBUVDVvC0sGKQiwJuWqsrdbZtVxX6Bhmy6coCrMlRB5YBCe/F+aUSUMjUqe3hnjotEXI7PNy4eRdLrOFFOKWUUsSOy09t/R04JEbT7YXRWtnOzzfzsc+qwScEHB2+1/vYrmat6sCoo0fJKluBfm5UiIjx4qPktSxI5O7w6WC8jDRumJnGoe8Jj+LHIwzNJ8N7MRT3hcKpD9zEpKBUwoMrUlMNy2A58eJCm2r+j6qayrqKF8MU93NnaVySthchD4cFookFU+4Pbv5iP93DGap/VlHizda7VdKkXxezjwvutFIV4qYCFV3MSqHNct2calT0VEDHru17YtqCVwHut5cUdOBWISPWVHx3Fv8Au4KydPrJEQaIjYCo7S37wwo+Zotdjx4SRXc12PFUuulIl4aUQ2IPqQxkPO8L2TAseRpzjRsA3I7L9whgmOtFJZPhXJOSxIC1cqj37kUC3gA6QF0ljwumvdVQfUpc7iMTXLzaQYZrU05tvSWH3kgwWEYtEnCgJPHJX/sEsekqaDdvVH3A/exYL5KJUwoOlT7w7gI0iv27Ut3u4cI5cvxgynrx0+KBqQ6Hi1f/ACvnwRloRFJwmj9ZK/8AYD+9i2KM7Mr3ECkCRKBKJOv4l9Y5C6rbLd5bb8Wi+SqKmFAValH6SIuQBBRM3BpAQt7bjC397DEoFZJTRVBIf81gwQtPm/h1N69zd6d48ECtuwfg5cOk6NeesEXN7nT1Q5mpDiWeSj1QUEyp81+UB/0WI15ArByAkXltweE6Lle8sPkSMz2GPm8OKvKU45SItcPP9kZYtGpNQKmgg2tT7/UHufhHHig5IRL6sXvDbgiLQyKSyNwLiV4EX1chwsowRIStPb7BDiL9xJolXkIbt2r9JErgXtDnISw6QWeWkaSyhWDeRKYI00asvwuqjHoaTcEPqjMUNUA6ysHeXmxClDI7rkUrfLdivzgJ7hUshVtvMyojtflcHmLC/wBI5g1Bv0lxDqtEsSZRaI9Alf5MNVIjd3Qbfax7NYPlXokKZ+vxVLv4tC4yu1BSHEpF1kjHJuNBgNtwbVB24iyhtJaxILcdJsFj1LQEt2Jlgwfvr0nRVi/OawSeLOXTBsN4WkgRqjbu5h3YbOq+YC9RfhxpCapmqIulRMbhLqxUH1Gv375RZBZtce63VxIFDOR0Q4ZJUrunmxfgxShEhJRz31LMa+i/WSISScipH33LpoSJ3GHv3YbyVZQ67h0LB/JNm5/YJruNUx963EaMDJcRsjvJuw1WiHjfUBdhyc+zFgiwqiddX44qUEPT6FWr5dRYbNpDcG3Flp2uXbMRWVcoKXpWn07vuYiZpCNex8e2iYRsKze8VyQSVuVAAHcV5e0WGcwkDyZdOWCLMWqpXCLZAxSEPLfvxN+mYdbiSiLpBrRARrRgbhMNbQ0iuuIcESLq1hN1hTb8VhFq0EElbS2Xghbfsxm0klkhENHb7WFk3B6iZgblJQS2l/QsLvNQbmyRg1kNy3U1qim0pYUfWqVzstvuAlfipzVHsK5qCm6bKs4iB9YMlWrV7KKmLUlbi0hIgHZce0MZUGpp1BOwZclEwO61YbsaPyxjTYTVJ1a9ukE2UcrKINHKWulxqTMlW+3/AKxpbceKjLCIkrM8TDSrtUlDVhTUM6pB/GpITzJm4S4ZKRaqltP7Xm5PNt58ZYqbLytohN0sZrKt24hxCjaUSeChdbuV0lSs97Gh8vM2oeTyudRefBz09TsrPOIZddg6IXkcCqAqg4Eht1Q4i4jAy3+7Zii5tZY1PlVV0a/fvEpOFlWYfR+dbOFdKWjz5N27cF1pie8beoLcX0dB1IelstKrdf6whjRoP450xAXBajhxeJF7fVi/sJerG8o34N8mK1ukQqFakQGRXXfvYXy3rWYotFNhTlSO4pHV4gkNdq5G8uqxUSwRCzQq1JH+EawjEtUNqkpTUWvcG7lvQLC2tDMdkiaNzq5CSospKcG+EJZg8ZkAgrtVBXZq7Npj+PEBKVQ4az6baRh2KqdqS5aje0iv3Dye1gs0hPVOxY6MRMUdUDcVTK2WpqOeHv6b1UCP3eTfis1lR0rXNSPKkfsIxs4dgkBtolBBm3Q0khS2pJDYGwcVA3g176fULlM6+UhGPtKxR8NGtURmEGaCCzhm01RT6Q3Kh97FRzUrd49WeALy4nDozVL4cXiti9VxbzSuHukkgEi5bDEcBWSZBKPFAJa4TX+TBFS2JkMkhJzdFRVLyzMXz5i+eEgLixS4rrTtt5veESxf4+OilVBlWExFKPGSoOAElRvvC0g2nz4WpGGpinHCzyWolnVDc0gS4RfVK3z90qkfzYlpCv8AK5kmSLrs5QpD1EPrQbv++YhljUFIVHYqy8o15KKKPCbEu8lTNw40yHnMyLoxIUdAvGcaKRBIRj5JIBVtAkr7Ltt2ERzQyQZ613Z4QSUMjICTcTI2n/28sUeucyKekk2zih5OoqSkGTQEyQQcvFUHio8ypaqpkkZeXbhgNCTuklAnxa1K+Qc5mvGrOFkq5qFtGhaq4SGSVsVSuEC6uoduLPlLCwT+tmzCMb3C5Bw8IreXuCVs+UcBvLPMrMaqXMpGzU4Uq0SjD7tygkdxEQgG4hu6sai7JdPBPZmy0k9WFsi3i3BEsX6A1bUh59vWWMnxTKjYcAy5UZbyF10SilKRoI6iN4zkAXEo9R1bqfpUhX0ht8HMPz4OPZwzNqeXerZXoHEHSapSAt0yC5co0VSZiOzqJUbjMixVJ6qFqAmXrGdiHceiMikXrEg7hduZmrqiru0ua23aBfLi/wDZcpR4lQ3orhqwQN8FLrSKTYW9x6zhwq8bjs5x3cuMraHH3ZO9G6Ij8r30+ukWmhURO9ivKB09JydIRq5K7e8G0iPb4LenESj2IMjvTqXZYxx+H+E347/dXHFQqvtgdrNuk1VjezfIuVNK54S9OPUw1f2VhFt9vx4Tme1Z2lWcXx/5kYpysCQLm2QjZdJcC60tyVh/FgUOEeLmi0VpR/8A7FUNyoS9a39FWuQ7CeSjwRB5SqiSIDaH8JvCIfjXxCqf1PPIR0RJH6KgYpgF2khI3b/aK7AeS/qntTm59DeWysj0lPQpaVr9VK0vNtI8TUv/AFSdpFvlmb/LNB6RJh6BWYT2olb5S0sNGbBxnTFLPcL/APyKPXrKfKPzVcXf9TmyZ9KifDVZVwlcZD9aQK3/AFGE2X9Tjy0Ypi5javqsFFeYVjQL7iV2Kel/VLKP9PoTJXLWUHpIRkgK3zfZYslF9vKh63n4mnW9Kzce7kHQNRWJYFQG8rd1lpfLhoLHFTbXakX0VAfM5FpijBlz2YE8pcwI+taNzAlhYxSSqSUToJJJK6qWl3qoCJXbrrj8GIqT7LLSq63qaq8xq2mKliKiVdOkoMlRSFiq4O65BU7yuSv2cgf2OodmHNP9peh6trmXy+pw5x2+hUllZGQTanwaAJFaYlfar0/qsKS/amy+haQTrV+zqJzTyqooDLMI7WSIy/ztwclm8cWN43YCgUpIghozGaAFWf1PiWqT0tPQeYqAroCaQu1WB3GkHIJbtx4hVuwfUwo8N+dCNUG3mKOVHy+LBqnO2lk/FqFxVQzDQgFJXTcwyu24OUtxbsVx522MhXhd1WbtDd/76V/3cMQqr6IdES+agyYtkpEX0kMVOwlU263MqG2f9AV/exHvuwvWTUrCruILbeZC1Lb82C0n2zsixbiiVcKned9xRa+35cPFO1xkLKCosWY6CZGFpisydDd/qsW9evQ8pfNUerWw+b6SBSfYhq1UbxrmKG/xMzt+9j39YzVpI6xVzAiN9v8AEnF+D417UORfoRTD848NcFn+DuP/ACsfgdprIjTJEsyogxvu5HH4xx985Xr/AG/oqPUrd3vpLOjrsM1skVg1nAkPiFJX93ESt2Kq2Su1azg0kw6lUFxH7mNQp9prI5UdH84MII3bSL0K/u4h6k7QOUDxRMGFfQK6Y7iHVtxYxX3gi1j9FVOUNvEdJfSWb/6y2piEjVzBpgRtvutXL8GI512TpiNWTbK1nT7kj5VEEnhf+FjQDzPihi2fS2nFWrhXfaYidnv4o9VZw0wgIhDVhGFf+qXDbhs1VXHm+ygSpqNCl52aXjNMllaqiLQ5iFq6/dxU3mWLBgmSys9HkIeFq63fLghPs1GLhutdUbYhMTuS1brsVCYnYh4x7qXabh5dffgoKislqQbrDHKtfZRemCqXLlSHdQRyryj5ZKWZiAiqqLRxakrbf0iYpF5tmNT/AJzZUaSR9LBhTkG2VIyJBeUSuL+VA0hAN9vXtu58ZNyHa8HXDOHf2pDUF8SdyVzcrxuAys8KopfzMHYZSpJ6HfNoMFyeMhNu/ZOdddIbLhNURtIOnZs22dWOQ3kOl/oWsYgYrL9XC5CQWWdP0nN6t1wuBVD2eYvv+DFPU711z9AAA+HFkrBKSCWcG6ZtUFLzIxEBSMvdxW40jdS3OJd63Hl83tY7f5Fmf/8AZ6cvZL6sVhuPChaHPk/Wtp9hcAKlsxHghbxFcv8A4R9AYi+07TsdUWdIk+iHT5OMgGpkSY3CFuqQireNgBuuIsSnYK9PEZWVBIdLqrJBX5gw07RpG/zbfNGpiLxlwqqRpt9dUT0BsC0Cu3F17bcfnHiuoxc8q91cw7xf8Vp+HBjbKcfZQLqDLyhJdwstS8PNPnQJGbpoKQJKobbgsS8Nnn23cpYm6S7FWe9WO7GeWTaDaluFWWcJIbfh1S+DE+ig2e1AzRlI1mq8ORBrc0SSSAjK3eQglfsO7nMuXH0u9Bs00hA1krQDxDjolhPrEpFtXy4HlRgsgUj/AFNulkI5uGYNcLujDdwkQ1FAUj8qp3Efwjhad/qamWb7fS2YEvFl/wBNbA7H5SSLGs+Ibkstq2pW7LiVHvfZx204A3qRksh+UCv5xxqhGmPTl/SSrPd6JSXzXzC/qfGctJN5CUjhhZeLj0lV+JTfmkqSQDddpGOz2byxmCeZw7C0Ih45dDw6RHrpAkYuLO9HYRbRO4burwDj7U5w1zSkXl9VbN3UDEXYQj38jbXDVLujttHmx8ZpQeITG8FyTt9q3A1wFqkdEWCRVG67UNydFU9YzusELsJ8R6PGOJwYsHCgtl2aqW/mLbd7WCBStPvIhFQH6wtk0rDbkugY6pjybgVSA/jLmwG5XCCKFgiVfy9yvrCv5hmwi4Rzw7gkrl1ErQ0j6t/OPNjSGZvZJo+gYtk/451ICaHeqpurTVV27SSt2BzcqpYtWULJzCKLSsnNsyGxJV1JJmqloWXXCQ6t59PXtu5cE7MCr6blKf4BrFLyYuEr+7Q7rb1WndjHVl+fdf7LamQ0YAsSqZUQguLwePkE+obwIxPy9eHS2XNPPyT9Yys8XSqKtqtvnuP7tmCE3mTgZAnkSCF1tgCuySVD4TuDpxBkQCW/mwyarHyVBCIKqxuX1JRbh4tLRryXTJBUWokrwxCrZaBXB5+nFLdUQaChGhwxao2Hchd8OClJXgiR+PwkO7FVfONvdGKSh+bBzBOgRFJUFHaqXVjKSOLY/wAGwdqW8lI9gDZx71nPilrCYCX7+CBUTo3CIogaVuy9fq9rmxT0Ys3pEBPE2yNtxKKDcA+1hm0+hiaXVF0q8dVxFrShizZt3CS5L7VR8QXbuXBPyl9dyPaXb1Uk3bCik6dOiW70m6QGJDt27ubFYpWmpd+sstDP0FG91q4/ZcheLr8WDdRtH+rngv8AWbKkZaSSqDoCt93r9raGEV9vfV2y8MU8s1tF10ZLXlP199VL1pUg22mVyaFvw7rww6j63h0pQgOYckVu4VDMSLzD3uAuzVDgy0ni+mfSJc1nV7P9LsWal2rYWIvFdyNu0SIrhPGIouJX9IkK1VTY6YJEixOSkO9g3h8S8UE0lUjTFc/B1bsVWJfwKDFE+ASuSStAdUFfl5Phw+cSjkmiaLI0EBSvLQc2iKt23xc2BzLP3LclEVbRT3iKllvmw6dvJGUopZR28Nqha8kQXq4X7VyqnYIWEkId1/OwM6gmZ1f0POKBVdwqQfWVJEtUvgwTvtXBLWCQmltuVtu97FLqoHi7geNYJEQd1c23aoe114QvPuk7mLUMRAYxVPZqvuM1iSVuNKy7iiLp6sNm4PCAdDXIQV6SuHEixQW4pEFViQH9aoJWYnGqDldwRvXJKqHZuIbrve/3sDOOkAyRjUTJVtxEypqLEkiWsqd4D0WfvYZOImVSRTcumaYledynV93BHRatitBRsNp81wjiwQlKovwHTbJGmH6NNUfjKwsLxuZd1FuMNAMiWfXTBYHSgEK4kdltw82Pxa5ummC6tu7lIRxqmWhqSGCKHVimLFN0Vy6wgJGQdNp+L4vx4ELiBijeJo8MuI3WBvu2YeNVE4ySPNEyVHi13KhKGJ+7bh9Kd6jopLEShoaW5uBYJ1P0RTzhNwaoKvlA5brR0ju5revb7OOaso2BYKDw7DQWVvvEjK7Z+l8nh6sSEiA1EnR2K3ZeTaqtHwJvODScaDdIBTAL9h7OnZhz2nVWaVN0W2S9CusCipcMnpeEdxX7sV6mQW02bBC7hUrLLQEj5sSuZ7wJZuwYPvRxYM7jQ1wtNO72CwGR5Ts0FTUvuoXe6gk4dLKovAMFx4hcB5x813ThvOcMqm4NI3mokgk3LULbZt/dxdibo2qfUwFM+e0/38dM4ts8cDxiKGjcF4qK82IjWQJaJ0gVNmog29AsZIkWojc4HXtMVfYLdZZ5rMVnKseNqyPATFAQcbyJchu2+1g0Z4P2zWiU40KeVVTO/wCsti0gS2857fx4z7T1OPEvrKrxszUBI3AIObhV2Bd1iPOHJ4saek1sSXO67W+SLFQWNZRZFVYdggR27g5em+7CKiDN7PMXLiNZuU+QLkklejq7rlwRMl6NiotupNuo2MeIm1SVNdQrVeI23hyl8nx4lqsjqeJ8o5SeIEKt/eriZXX+Dr+fBIjMdKG2GmLFKlfVo+sUacSWOwLkGAqqlv8AZHETmEllorHiDem4xTbs/ghIRSPClPiiwlFji36pCYhfdddzct3w4EteNTdSzpZC3gd95CQlpB5byvu93FtDTZTUVF12ZLSPZ+pivo+mx9UyLBs3kFTeoJNqoJALD27gS69uL85pvMr0vi9Dmu45BX/8JZsrfe17Md9kukqPg6BbrUk8kF2rhU3C/HJJX6p9N4COGObEo5eVctpM9BNpYNxNbrvBbtvC/wBvGspGxp6ORJE/hN2K9MQFZPGq0c/zKil+jRUqORISP/T34mqJyq4eNEJQxfFef+Dm8D/vCpHgas3U3IqCzavyEgKxJMkldu7n2FfjUEbHRXBoguigToEguISu3+LeN/x4YUbQ1BSNDPkTQRQflKco+LeOGyEaSRJblUEqIuuD2QHfinPIvKB+tY6y59BKfrVMnnBfMBYtc9W8wynnjNhPOWbVJezcqAmXj22j8uGMfVSNpIiwQcrO9prrqiuSvl724Pkx907VHUqrVkdk+MWnGqooQLfhTFW7LxwxtCz7UfB7WAjFis/Jq2dLEkmkVokRKkBB0bbsbuqRWp2tNt21NGx1gZdxGlpJNSOz7JUtItvsDj5jtVZKOqBMDWuccUZqptjVXSA799opLkFvNhLd6aDqYW90jFaSatWbIRAuFciqO8RjRL5cR9ZRsO/jXywU8gqoDXSSH1WKXSXm2Yr/AKyctxRWi2AimaAGdzdVUx8/dFsw6mKjlfU5Iks5Iv4vtStS8914lfjPQTiao8G3eMG6wAzFqRge0iLf5cW6qkEXtPwNzBV9wkbzKOrTQMucvP8AzMQLcnICQJaQiZ7iFhb8wWhicmH6ysHH8UaS6gIWgVhpbw8WKGG+1kvip+WrU2Ge1FvAZoW+tAH6z9lyF1Bdu8GzcZhyYujVmENWVTItUVUFvW7stR2SqSt+qV+0OT3cVnLd0CWd1HvOGVXJKR2JXDYV4EPWQ8nN7uLRUDhtEVlUDNwi8XUSknAG54VVIiMz+ABwddNdGPiXrZ8JLwqajWpyT5u5mahlVfrAHoEzdEHN4jV/BhvWkos3dJxrB+5TbuFTut6g8dobLcRokaqgmLkUhuvtXK273bsMail5LiG7ZqttS3Wp6tnyFgFgeyRD+9QK0TDqtxNdsKpB9kggloAXvHzniWptu5SU0ePtRAjtSExK33sdKG24FqtJAKqhjuLvRtDC0GMaJEsk5SK/kIVQuD4MGZehVErdAoIiosaBpXW7FBMSVvMeoQL2sXKg0mYxqgLv3KgqlZpjfZ7m3EHDukShVg4y1MBPaoXdX/FiYpd05VZtzVcxlySVndnbs9kywHHUpCKcPkocZZmaC0mSZjylq2l7V42YfQ7Jm1qhqtHQ4ksYnxBE1IfhIMVPY4nGoceK6nMraIpB7N12LtTKWvOCs1fqtiAD3DZye3bivmVsdCJSj1ZV0z/gtURVE+VuuXV5MV6qxbetG6KDddh3RmRLqriBbvCWO5aZOLdMdWYXUWSSM7uKSEvFbbdvxTXVWnW8giaMi+SJK/8AjrLSuD4hvxB/WqmgKSkKfk2cNWS38MPBFwgGrpqqkl7w4Mih9z3T8UCMb7kgETs+LABp1rKsq0WeJSsO8amV4aSAqq8vUYEVmDs7VcjogkCRCCF25AufBQlAVQ+MyWBe1vT7kM0JyReUTES5Oibk3e6DpQ1w4cdypa4hcPsWY15lquwi6XjWa7kEEwSs4ZslppBaRD0EQcuKjmVBvJSpnx+qp9cTICBVOXYJJDtHYKRjeHv4tBMIqIiY1Z0iqkmklZa7VtNI/KW7EX6h2AyVrTQqUq51FKvGqzVzpN7LBtC7nPAvzrNgMbCsEGwqd7cqsyDvUt3siY/Hi6On8bJOGKzMCJPSPdqgVgXezim5jMjqB41OOhBKzaSqopLpWe+WwvcwgFv3ST6OBrsxFWKDZnqMw4OMVG4Lbkg1fsuYztvMvNeWJKYV4WejQcRUZpmveRKtdVXl6StxB0q1f8cis9DQFJUySSE9UbPBbbiWlOGVeIuRB5cCtxigSpf6oBxU4UBJeFrVFRs8yAprhmDxqKgKmbgmzMUCELtmqN2/q3bfexXctz0quqYGrNyIg8ACIUDELwDmLls9k7sSU5KcE6FygCg3qnaJNVRIr/CRj+DEflq64CpJgBMHizhxrmoTq3mG23eI/iwspmhMnCRxD2Qqv58Gw9UsWyGgxE3jg1U9fVVV2DutC2wfaxmOccRrdw3C9Ncgb2Fc1283TeW/28ac7Si/8E02Bo6VirtwGmYkBcvV4sZTlErnncAkKdvMR3Y1Vsa0kKqqfgzfyko1ftElEz9TxSvtCO72hxZ4+rsvG6Ao1Bl20Uc27VmaqCXyGkRfPhpQdESVaTjeEiZIWzha9W60toAG/k58aKbdn1Kkm6PrzMeQdJyaV2krQclKpBZ/JL7ME4tYk7FLDfyg1oDPgy+kvSKtOpeneO5shBa5j7wElhz6yoNrBoxU9HTyDhIrgJlTzNsZ+0qZav3sXaqaOyUNqUaVFZjLyQDek9i6V4NJ0f8AIKjfZ72K3H5eHIp/U2xpikekSD2n2aDof8wq8Ez2+TE8KfEffXs+QoeivCFKCboHiUbd3paSWvZ8Qh93Gisg1aSSiZxajTnNPXbkuTtkhcXl2Kq7erAJqKhqqa1IUO1h0iK0FUv4q2uDousVIALy34NWQrXMKkoGWZyNHiTEFQdJKE6QLveWy4Of2d2BrhSEdIQiMl9acGW5QvaAdPHT6F9cos1LGqoJKaV2w3F27zbuXFLy/as3leQbbiSYib9INdBIiNLdzCIb8XbtHTJvKoheMYEX8HGYORK269UrkuXpIS68UWl73lUQaMazJVY3iQJDd13D1W/jxUw1lUwiSlKa+jcp6Hsj6EWvo9Dte0tQSUpsVBvHrLVLFAnKQp6bfST6t52NmlG4hbxMSCGkF3KZaBGA+9g0QVNSREKyswQphzpfWLx8t2vb8mKxUVa+in0ZVaWk1EGyKQiDlsqk53l4Uue4bbvBtxq2qYsgXXR3LLNP6iEVB0bQdIBKE5jKfb6ZobFGxGp09I6Q2dXXiUqKkHTWlAeMpdJBIEgMU3bEUki9ortvzYa5YVXFVfVksEOtMPlIprYrxzNBBITPbtIBvu2l8+L9Vis01pC5iiKS/pARus4kUvNpdeGjFG2VCRRVbj7mFSKA30geMpAkZZ5Bko3jgdWoSgjZsEjuDS2DzWFfyYbynDzMI6koiYlRI1QScItuKXaiG2+1VurpcheG/BTWqxtERhHNysqRE1BUiZRI++Yhafw7sQB/RyWo91LsXt6Um/ATJ3aC/OkJiQWpWF5LerAlLapCSJcrFhntBPHLrNQWAmuqjGRaQDqt1ULTIiLbfz9O793FRZrm3Y7AG6/m1SHF67TCqzrPp8jrJrt28G0Sai2K4EgvK+7cVhX3Fb7GB6sqsk10bCtA8Z6upBlFP6ZzTJPHDyR4UkSjVbfEKpD+HEeTVYkdZeNXIQ6hVH93FwiaaoB+zYuZmuRpwTbma48K6eKkflHSEP8AW45dZeM5R0LOg68ipoev1g8YRR+6kq61fiDAI0hcqv6yKgWNOST1rxLdaKQR/byzO4fjVE8V18qaTr6q8JLbzNrBvxfnGUdWsFE1pFalUL/siVq2LG72e/xGjkxmc93xdKs3POVzaSZK3BzbRBe88HN0hAW1UZ4nzKp+tHirMUXDkrvNuwWOzO4MauqR+q2JQgp9wAkkZ+IdxWb8VlbKCv2seiHq18UgZgAsuFPq811mLBlMrJZZVZJMK3WXppSThFQSJ63tErz2XX2mA7fGOKqtgshyC9IZKUziX0qBbs1wXFRxM8Rcpq8gIFy6tt47sTFAvQ/N3Bg6eRWsk3MB1JIUDENUrNukWKfm1UEVI0jEtmdQjJKesnC9vAKpaAEkl1Klv5R5cXajZ5slRMKidQ0mqTdqkH8f0j94t15WYX0DBNUIyRThaiVoTmWZEKKs8KBW8oyglhYhbKpi8B++JPxC/Kz5MMW9WxqqmiqigPmTlEHIf7K/Ego9BARWQOQSEwv7tJC3/ZYMEYKpRv1Ylv8A0hIhDkTGUVS/8UsJyFOLcKSPEvNO+7/jEiH7uJZSeNK36hLvC/kkvwW4j3VQPFRW4em3lp2DuS96/Zd4fmx8kvKqlFzGsIIOZAk7P0cur908RMhQZ6xOXnrcRMf0/wDvYtzeZW1B/tel/D3CR/ujjp8vGr7yipxIrN9zVXF7TpqJNCg3mFFsIalRNuso+WWfgItiS1wEASK8rT5Ono8eA7LSLAm96VKvErC5tcLf9hg5Z4Kg4y70QWeJElMt9Ilwt1b0lfj+yxml4k53BwepZ4iPdhxQlMZEk9XpdilietleeHu2ntUK78OI1RxaomaUU2T29N4/hxyoDkVhM2aCY7+XEW+s22GkNg/qrsOmBS0iU4o/kRb3hG6qfUIl++lizZX2Sk46BUEmP1UNxL8vfpeAR9n38DHiFh/wZn7WlbghZGrmhPygiwQV+oXEoV5aXfpWDaBb7lbB/mXYvcARaJSbLUi5wYISiZ/SSK07z7gnTi7q6biD5MWJRqDhEjdSSApnvARVwxcKzZOBWLg0kQ8Mc4+9q2YklpmSFve1jXNpjzCZiA+zuwukmCjRasDuBKS1bPPiPWZM7ivkkB93+dhR9Mv3BFqsyVs6ikQS+XDEXCypX8MkmXh9Yj+9j0lBLFDMHF2kaRbelK78WE1IZFJG/wCs+8lb+LDdaSRBZQFXiSSlvKT0fwEOPJvzFGwpVsP/ALaP3dXEhJeSbxl9X+2G2zqHFby9YfV5p5Zcoq8PcJ2hixOn7Y25ArKtlfLqpfvYrtIrs0hlEQcikmbrukCdElbs3nzYvEtKrjqVsgWuqstduLl3bsR7pqsrID0kFm2y3DqLSAkVFjMbegdUyLDVZVb1gWg2VVH28RzVbBXJiGq3RRVtLug6sKeq/wCELCRHl5RLdfbhrHv5LTRD1DIWgkG4V0MPiemLotVFyJWnZrukvvao49NSikVItzppgq2Xt3j0kJYZrRKxrDewEdVU7B0hLqxIIyiIJ7eY7/8ACki3/Fjycoi4tC9UCAuoxsxKSrgmK0CiSyiyUahznzNQuxW6oB5GyCbZABG/eAiqY+3twQHC9xEDdYlRv8YYHOaQ6so1beqnT4jbmfcXkSW/wh04+iU14hgmLyZWStAmw+a5Vxt+DCgyLxJQTVcpEndyigZW/GlitqFDuu5VRt6AEbrAOzmtNAsJvGEU3Zk8JzFOXAFZplGqiYh7VohiySqkpx9KRRPEzQNIlAsO4gH4Rvxy6seJ3uDctkz3XKJD+ASxTW7/AEk9FqDxAT59AxFIvdwspKOeFIHDyQ8olpbfmxaoZifI8MrJJtuJNUjI7RtHw/Hi+MW7ZKnXDBICtcOEtpCfR1eTArpmXNxUzMDMiLvQSEkrd+kXmwXG7wEEbDYL2nYREOqQYlsU96ZwtONm8W4RSRJC91qlc6LdYHVtw+b0uz1kzJFsuQK8tgl/4WJaJVBdq8AQa2hedooaVuz2ccuHiLIhWdIuUhBXmTsxGSimrWDbNSW0my+ppGYiKuwTsxWZJgiqImui5Efd5/ixNI1BGqulrJtBLaf8ZIN2GbhdsuKYIcS8vP8AwZVL+diQkvRVLmIYDJM9Zce6A9t27YPNuxW+FuuRFy59kd2LtIKgTgr2chs/WpAXT4rcV0eGNZS9Fe3FD4yUIqD9SPCt4UF1S8Np48xhpJ1cig2crqfqxSIjxKOGsaqKJgC4l7eHVMwjOUccMKMuRX7fV7XiS90duAnJAvRVdfQ0qgJG6YOUx/aoENuPQsWi8kEWbi7TVO0hF1pfNaVnwYvw0lxUPOPGEpKtkYdK54g7lCbHzcmkaG8vLftxD0egCtXQ6IhOXOHqTf6s6tV37dpdHNi0ZRXoobrCiKxaWrp3Hbv82JhikjoiYnzmG2/fiJqIeCqKUYWW8O9VS7wd2wiHDyDVRJwmA3FfYZ2hg10SiqBLUpBRqArFqtrb7Orb93DVAEVZQbkS2KmHksxKTwNm7oTVDbsvEjtL8WI+JfhxzO0CETdGHkHwdOIMDMZKZJ0MTDt3hGqsRaJfsr+nEfJM7tYEllN5h9oIeEcSzh6/VlFgH1akN9oEL8Bt5fAOIN8q5SUU4hyhzByqkr0DgoQUDTNNrKxawvGDwknBpGlcmdpkBgQkHvARDh83o2Vtb8VFLpcQlqpXXjcGPEUbojrmJKGdm4hHZ74/jxZG7BFJiisLC1PfaoSAkl8QDZit90hHSqxEFUypDVWEODXIrrdqRlh+1y+iCno1FUV126u8+6t6LrebCzoTSeaJxzYSv5iIhD7uLbFizXmoHiopJAgILrbVxL+g4owddw5lYICar8llLTYONHWnk7ys7tqkX31cFiJlEaZo+HctTX1mSSRJEQ2kRgqPT/msTTiEh0JomzBFsu3tBXieDHnt5bef3sA1bM9aGlnlNzwCLdq6MLhSK2y4v3sHNOOx7y8QiCsEO6p5Cl55hSjyaSkI/h36TZ83SG1JIiSVG4C390vdycgBi2ZE5qQn0d9GRWeaRyVAyT03DOSIvrlMyB3EDpDyXmV48u4iwN4Nw5+kjiSE2aqMhFqpAJPG4qlqsNLakZX/ACYbRsnTk2neqsTYrtxaV3Ptxe/VvtRNDC0JpfObKKqsna2UoyrWzYhVsdMHyBarWRZHyOEi8P3eXFPfACSi3BLKiQcpX7xDGgMu6+obMSlU+zxnTJChEpKn9Eqm/SwDszttK/nantvG/bf8InrTLas8tqokKJr6K9XzDILh1Q7pdIrrFUvGJ82LJCY5grwz2knxUosrHs3IuSu4MFTIj5js+TDp9DVIwazSyE8+S4RVJuDZRe5JUDAfH7WJZi4NeLLZ9k3SC33RxLSTU3TWonK9pEkq0Hb7o4kMVcq3KOqwhCbrTx+t27gAVJBdK4S2/hw64xFJmL9Wg2ae0FTJJVUQsMbvFi8SQoquGOy0VYhwlb4vrQ4dUWvGuuHYOgVInYt7tUdhb+TFD7U19HQqazqqnkGqbxlDvELxvIhNUQ92wvwYmmeYNNkjY/cy7ZHqLcQfCaQ/fxZJ6Gp4UVoFqz0m6Qh9l4xaiX3zxU3FNRX0gdIt9papgO38WFFS1lK8SNTDeToCWT+oVfH6h/o3IJJKl8CpX4fOKXRdI8Sq8YqiZX3Kt7vw4pDeGZlItTeNhco2q92uNw3Dbu3+1h56cv6SWJx+Wn2wlwrdUCRuT3lzcuFLlxZaKJSUuj2UjW8SdOM03kclH71UjIWiVpEAqiW7y4JvZZkxGXqaI45IVpVmlYRK27BVSIxwIJGo6SiSfxw087lVIpVLVcuZF05aoHu7oUiV3bR3d7g0RGZVAsYOMbhE0jl9Iv0knSC6UCcg6XV5gERNXZeNhWmdm/Hy70PWKbK/3PZR1sEjLPHlV2zIrlSYaVPFUiydSUqhHBGKptkic710t9whdYInjSXZ/l4qLkJCLg5hs5hGTVo1auSG0eHat0kEi8I3AV12BxR/aVp7O2l1Gf5uEJGPZN+FdEu/NiLkxG07mrdcuY+nzYnFsxoXJyPbD6MkIuHcSbM3/oYDIueMUboKCRXIWEQhfpDvt5uXGXo6Ji1mNO0WpspF6Me70JlVOu1Q9q3u26hR6KvKVfoi5a1nFEJ7ztlEi+OwsMxmWbx4mbepGaghs7t6JXB/S/GVanz+ygqGTKXqfspxEks3a6QLlI32pJbiH7K0LbiLHMpU/Z/drMG0j2RI3h1dwKNpG0LzHbu0hxqyvlIO4vr/AAS0aB3u/Z/FfOzMqgpKTnpL1Tl65aOuPcfWU3okLjvS3aRfhxRFMsMwE/T+U6Skz9luRfdx9RGVS9nN8iJodmaQQRVVJC71yukCRCqSRbvaEsRchWHZYbtlnx9nap1G4rqoaraZVINVIiEuqzmEsNmOLW/Vjh9r8EG5ZCMpRL+i+csLTvohU/SpUuVdQSCvi1TQS+EUvx4jpNNw1lykqbpOWim1n5Cbr+k17fF6LrR24+lrSruyeucil6Mja4alCtm7p4XrcR0klVbUi3nv3YYrVh2M38sMe4oevk13DMH1qEgkqHDkdt3xYP8A8Qt7iw+1+CH81mO3D7KyJl92qZyikZ5tM0wm6VqlmMfKSQ+gk35JAlpbFeW6309QcwDdhjHdppTL/LyQyty5jFlod864xNzOWLroHtu0gARD0bgEt124MbEdS/Yc4lFosyzHQdKiZJNkjQIiECIbvs/EJYXUb9hJdETOTzJRvG67h0C/8DFPneiw98dyt6vVfqXzrQmaYmGSjusHM46kHC5qmaQ3CRF4yMtxdWE9LLAi/ILact8WN+MorsKTArANfV+JcUqgH8HNSttL+QwyVpXsLrqKIo5xVgmolt7+CSK3aJfqh8Q4MC8t4+gRQxUBEsHEGVlu718mXsDjj0I5WF/Y9ElMj7mN4r5d9ilVEVv64CXQTPlJal+bEapld2LFR/s9pogHp1KNVP7iuLgujZf/AGVZUBfkViJNplbdvlJ4R8QpBhX0xWVJFtqucEvMzEsbJWyS7Hbi7/3aZvb4fzfuvd/T4aFkJ2Ql2qjke1RHqCHIp9A3Qjf4ftcXecWlDCiLHlWQBp/LFT0f2a6fJ+2w9JYdR0RlzGuRdt8wXAOUd6RemLuG74sah/rduzAusiDPtOU4oR8w/Q11s5vAr5Pmwmx7NXZtlGbNYu05R7Nw4SBU2y9PuhNI/DzY++cWi0r71N3uoDNcwnrJTuM1lbfEIKj8nJhKo6ggayaJsqjrdBQkdySvoY7gP2h3GONHLdjrJFFHiy7TOXKbc+VReOdD8Pj9nFFednTLtWpBh6frqKnmNlyshGwMoqAe7pb/AGsXAYFtUYmssSsejHPiRbyLZ8n6OVZHlL4sRw+i70242g67LuSkcmJylZ1iRdQtsvHQj/pVXQ/cwxdZKdlRIkUvXeYiShnaWrTgpCXsd6X4sGC8W2KDJrmVqpNBG5wiDkRLSPS/QGJ9BXHs24MmaFWg1kGMx6teMyquJB+6cxr0h70w0lRSEys+1SLoLYfTgN0HJNn8s1ZuASQLfaIge4w/SmSVp2hzbfgxoqeoV+VAuKeSYRi8hT4OJeEJAgV12R7XSBbiMNK4Fd57rj8OOO1Lcn4xW2aIQFZlqoGfrBNyTlzc4EBIVeoOW7l/dxX4FIBnEdIyt4pv4/Hi6PKaqqWfCsaLMS36RFaIEHsgP4MM22X8xAPRePnKFiRa+3ee3djvvka4fudJfBq32SFsRLUQ/sXK+PeILZ5vKmF4ScltktSf1PkbuzyLkrrnE3IKn8WIPP0lnmclSAks5L0t1EfytkB3KpAgkXPbt3XX7sWz+p/tTS7MtOrcvFP3avxL/wA3FKzCnYuVz9qOldYLVnxi83aVoAlvuVMfu4/H9eR1XlFu7494/tCup2gY0TI+yhhXMstStISyq7Yu9MG6AubdVIy/SjtE/GPwc2BCnWUwVoEsqY3Xbi6MFntAlCL0jxLBYk3DiRSS4QnoK2pJAW8UkiIAHaN91vw7sAAV+83dYbMdLttMDtPmr7UumDsVdkalMnmiXp0ycd1uV2CGLBlvWyyuaEAivDlLo+hXSSaJBaqqA3EHJvv2+1uwK/QvcqTgjIRtAsXvs3Pz/P1Rhq6dwSdqWryfZK2/Pbi0qMMsix7q+C+tdx8SZKKSTwyUZ6QcQgO60Dt3j76pYxbPR/qaclIR6FqkY8VZnqBcRWkQ83u4+imUkcizy+f1DI3aLeJuQ3XXBpDeRe/djCPaAYMI7M6aBJygSb1uyeJJCrd/GGqSp/MZYTcNSzCEuZGXQxMdPKq2znDao6LV45LvblUE2RK3B7WCBBy8a/RWYMngoWEB3O1Umx7ukUtWwy2jgD3uWq16DlVLypq4fRck/FQWyRpahldqquCSuPmAiK4Q5/FjWP28XRShp+C3xSK7wWvBqtm0gmqGuqKEbqt1Q/p84mHkxZqmp/XiRbRdMKtk7z1V+KFBLn8PvfzzxT+zI1qOqOHWkJGkXLFUzVNJkkkLojAbbSSC4LhtuAhVwVO0eUElBoxriVQQUaiBaZKneSvKHIO/mxz52nJmqim4viay7LKghIKM+GJrw5WmkLjVH2hK4r/d+DECsqapbg9scPk0kVVFNU0ujcJmV3s4RbpBxCgIARcm0Suuxp2oAKXkoN4K2nYFvhu5dmK++VMLjvIlDPYI2WYuTyJRGPdPDcth4cLwQXcGKqu8R2j72KXNfVVkzLuFlRuFMurDFghNUOCQqvyi7ZLvlQXtu2oJBsHZ4sQryurRamLa5wy+ycldcl5ObePuX+boxKZjNZJq3Y6rltw7hK4RTG275R+LA1dCYp7sOWKZo9RIYnSBF6icxgZukbUWzEkh0BJyuuNqVu/V0hstVDutgCX38FzL2q2lTSAoqubVjV7pMdfSE/KJ/iPGUaFsdThJOjVFENxDZds82D12fS9c1U80kSKPb8uuI2lb4RAbsZfiu3tN0zjvdWn4YfJ98Wlp6LZWpkCAIWh+j6CDF+pEW2oQM0REQS1bhAlbfAVx7PnxV2KSLdimjYkkR7OTEtT0i/iJMUbzXFbnG24fe245dQiMxW/rqYzAhBWKpuJZsyN4Yp3kAjs71c/i2fBgezGiSwmLZVyjb9qgA2X+xz9WLlWipvWqbwWG62wiI7bfPiqoujJiSzdzaJ8uokW7Dx+IJbR02nWonQcq8oE1H9ufN7OKHU8s5SdFwzcrrdw3WgXs3ji3TE4HGfXWblIktlqWgRFihyhMyTWcg0ebzPmMeTwluwtxdmelOW6GG5R7ddZqmmB+nV1R70R/Fu+7iei1WwiJ7bi6bt2ImLI0LdJi7Ij5lLkrbMS0avJE42M1CWS6bkuTFdUE0ZTU0FMJmztLVckl7P8AvYlk55gzJbhTSXE0gSElDFIOb2r7vZxWhKbV4hEote3/AK0I2e9j8cKzXDjfHOSRDYV0ilb8OF7dPqRbjAmKtlWSUw6uct6ng1GuwR1HRkQn5bNnixR0agbNXRLK8G6I9v2pc/iGzf8AFiYeSleNWI6qMmLdvYYiLpBUCDygaWKG4Xnnqimki7UIz3FpIF95IbMaKmHTuWa6t3kUouutdupwsUkqoCQXoL6Qtxst5N3NZ48QM9KA/cKLNYRBIVSuISVb9ZeHnxWYOGm5EibNaVl3KnPaKCX3bcc1FS88g4Jm6pt82Ws+yUdAJX+PlxZEpqeQwHiROgWtiaIEtpX8w33fJh9mMk5YE1494kSKt+koSWlbiHpUJVgnF8YtcSSQatxkQ4dZvt/XsvFyLCRWFuYgkqK6vdX+UVfw4VvlN8WlCmb7cRVZUMFR4kQuTDntS5seReAzWLVAhEx720btns3YYlCG3T4bjxVT4rcN93ukVvNjpqwiieNzcLCIqugvtZqkQh8OPgtak1cYGKfZ1M5KnKHZyUIi5SauNqqggHe39JCd27Aby/r6vIQtGn6q9WtzAwtFJAUrDK4x3jZg1dqSWfsKHYwMC2iEGch3q7lNrwa5Bby2q/hxl+J4bhdZUH3gPSVMQ+THQrfSDkLltW/2q1ZlLmXU8zPOI2oFk5dqd5hoJDqpGfWJBeHsDiQqyZDjlDi0ZJsSSWkZDaJ2eazAV7P89KsK4RioSNaueLK0lZQAeAlYHNbaqqHhtHx4MVeQyxTD6NObiAdHs7tquzFI/DvQGwvkwT1OCCzdSg4VVENZyrKthEED78V/sDv57T6fHgT1Uu8YSnEqvIF8mqrqiSskBXe0IEOLhSKTlWceM2CyXFG1NLTevCIHQHz27lQ96wT82BbWy8kwkFG3DCLpuffkPf2bvaG/4MHMUyqJ1fUTIlCBSy5hVolg0S1Y5JW1ogqukR27+93X/HgT5nJP3VWPGy8xAwqiQAAJKKmO+3nIQErPe8HLi8dleIh4nJ+m0UmyTwjYcYQvX4ruANXcY8uzyD82ADmlM15UeYE1MQaMrT5aptfVqUQ/I7AuHVFdIhS82y48Pmm/cggkpHF8lbG8I8GWRWOqmZN2Q7xQVJLV3+QSs9nGqIN4wXhWayQCSZoBYJGavzW4wOLDMKRRbtmc85lXSp6SSco6l2YAqR9S6qt5/AWN+UWzmGtOx7OeZxrGQSbgK6DFwS6Q/wCdMQM/aswwt7cZKipdms25hRDmZqyWlWrCXhUTsAGyvBCCu641R3X/AB4r9OqrNXHrX6VIEsBgKA8Q3VIVejk6ubb8mJjP71bCV0o5hIqPJM7CVVl1VSDVPaeltILbLdpGOKeznkfWzGNOKjPWDd1qkTSO4ZIUgPnGxIkjKz2vZxQTQyXhLStMS6VKylNNQqBFVRR21NJ5xJaBkBhvu4e2z3d+PmfME/GsnwQMxHjHpSSoNSQFuKVl2y0nRap+0W/H04qp4cpTLxYkRSE2ZofXUh0uXmJJUR2+5j5WykNGxFVerWtTwdQqHe4VcxbgELTM+QdURC7yjswDdBm6jreUARmIZv1SxAVh4hUN6djPVV829Ug+D4cPHjo2UTYusQkZHzCkX3NmKnUAPHEfHsxlY/UaDw66qf2qWz7JUrSD/RY9IcSgxYgCKEgSo3EKjoENL4xK/wB4L/JjOZE03zVLa6KqN7p+gI9Qk4C8vdxKVMvTxMW7n18lsbgAimqFg+U8Ud4vK6goi2j0k0vC9SIP9gJ4bzFVyXAogMxHoNbbCLcVvu6V+ItU2pfSdUpRcoi1zYpdzAuUlXQPwDm1TsPae0/IRYumYUpFM8xJ5txLZqjx6pJcckLnVC/nG8uXwYGuSqsr+eqBeQ03EPnSSv1gXd9qSR7TJLVL7XdsHEhVUo5hK8mG0M5qEmbd+qkkJDuILi57Lg+HF9wppMCHtL5bym+XhVoKcZqopgTmnl+926bUh/FZiDmHkOUgNhtu6HdakA3H8WGv0rWdI3uI2TEQ5u9SSIv9UOIuQKxRNyD98RH/AIIT9UjS9r9F8+A2mIAmJK8N3rZKFsFyz0zPd9cSS++X3MKU24YKjYqixFS+y4nH9L8Ve9FqQrcYuSdp96Kuz2bVVR+IQxKRaBpJiZypWnyJJOjvED69hYty1VFFqScNnFNrcLpbEgEBQVAdX48c0+us6jVESBAhNI0trpIdn+ixRVJd5DRJNkHlXuUzSsDhGrMt/mI7TPDyFnqqbsSM0ajVUtsAl2DIbfLcat+Bib1q8WlPU6zReVIV4OmJAB/a6RB/rUv3sXal2bNKUWMw13G+4VWTUj+IEhwIYupZJKQ4x0/fJODCxIuCSX9y0MXqm6v9TOHS0pNvFxNL7Xg0tp+a8sCkMFblmaJkwkYrNVmEUK7izvbVULPatxRxVfs54tegHw6pmqLlLQEPa5sIuqqYP3TdydWpaiqV+6OZD7/2+zDeDdQ8k+UAX65Cke8hdaBiHi7pXAzqk0wpqNnljqYTXpuQJNvZYQkyvH3QVv8AjtwXn1QrA4FI6SniEBD6zaBB8IL3/JgPqSTCInCYJP0myiSQblZQrlb/ABFpEfz4sEk4WdCmtx8eQ6X/AMEbpL4bBx6WlRKm1aktWEuETJKBGoyqajgQuFQeXq5bTPHqkl9JrFnJM3TkgQs/4peErzcmwRxQXzVs4kL5GKjxEOdcZE1zLwbzH93E46lqJYaPq6sEEnDpK3TF+C5Cfv3h82KiJXjTbVKDKB6wjwVjZVIQAyERhniXP5TEr/jw3nl1pS1ETlebYJMuGAQ/zqV+HCa9zzhoupBkFkm4d4voF/4RYh3zVZcRWN/HqkavekkX4bbMCFvV4jpU1GyMa1UE3DxyqolvO5K0hP2tIcKPKgeOHyblmzXJPVuEuPDn+LEOjE2rFqyokR32CO37hDiUjI94saPoauV9S79MqK4/63VswLUjpVjYjuVbmhmEnXGepJX6wqWqKEokN5h4t2zm8uGuW7WVlJiQN42k2rgFftXMpcaQfNfhOvot+zeCck/fL6t/diuAkIeIbEis93fiDylfs4iSkluGcqt9W0F1FSVAj8BEaXN5r8DUjWhFODp0pr2kCkmpR7Zd4INTanoCL+4b795WnvAi8e7GaXCqKrrZcXmLceD12hmsOvMeuGSOgT1qZLjeOleB27bOS/bgCiQal483TjUWodJJZcNDbaL3ZyYouc0YcylBZEiKpB6FGqq+v+ytESLdfzY3XOItkIZkiTZ1wxAYkq0ZyI2l7ACX3cYi7NcC2qDMhnqyS7YmiCqopoG/Fde8LdpNd4W+K8ffxsStYZhGRMak6dTSaaR3Com6mVVVPduvVwxabI8whWZrCE3RElAeoYFdxYlO1pHCBWqpNkpm1cPZNDq8mBpVj1swnmqMNV7xSPbnYqxfPJRs4Mw8RAzE9vLz4M9Lz1MrOkwYu5clG5mkHEw71Iri8OrsIvCRYr1Yt6wJZR4lFVGg1VVNVUiQ2j5tjrV+X2ObEIlkaRXhIc2JEgDKURQbWpoMDWXlydxqXrHXkXiGqqZEWvqqqpWXhb4gxbsvYNmhHzUPT8UMKmavFcS5kVXwWBtt1bt/it82LZUky/iCgz9M3IKClHA1Xd+q3SQKhuJLvTLeW4ejEPRcy5YUvUk86eOXLfX0uG4AtXaI7rldlp/g5sEtNZoxJWSgKz/m0qshUiaLiVXklGjW3VVi0mwkBqkQW2Fv5i8PJhPL1W6tKfW4xBiXHpEC5NbtI7x3FYQnb7J4h6+l0ZSpHDlrD8Cps1UiXBW4z3c3sFix5Ms6ekcyacjqnWXGNVeCKuguKFp9FypW7b+ezC9xiIo0T6AX1HhVUSZqLJOSclbdaKpfjwMKtKbbFMFFvI3jHCQG1F2xNdJKy2/psu5sFOMZ/kjyFJYhKy3m2jgPzEc8cIyTAAckIDq2qutIDC67cduzGlqZNUzMVlaMQNwlK5eVg/eVM7iJhym5Emt7YUgDar1jpCNxe3y4uVXDEN6evQBdofOGg1IDI/ZtwPco/SyaVb6Gyemks/jvQempKm7VtDaRDzDZ5hIcFGtEgcQNi9oiFhkRDy4Y0xEdscIlU+IhWCIoLyUlNrjJMxm1bhQtEhJJLQPw3Kr2bvYw8pmU1ctSRePC4oJHSdE5NIjV70ebSIg3jtxCzlQNo0XWlMTRLKtUlQGPatb0gS8JHsO/4yxIUK5N1lJ62jnLxf1muRKk+EUlwMjtsVsEeX3h5setThHKXdV9SIxFYr7TEycpn1JAui2EY1g0atVEBDvwINUyKzqvIh9zA7UVu7kA5+kQxdu0Q8B/nlUWgsuookk0SXFUjIEj0h2iPhst9+/FFbmaQiaVyZBvC3bbjN1g9qS0VLtFahiMssu18q2MzUFEw0RLcKiThZ6ylHKpHaO8kmqt4XF8PUA4VoFqs14dGl3NKhFtCMLmlMzKTjk6VXRebB5yfe16nlk2fVhUXpcy7Vget6FJAiIuawj7st/L1Y5Op5ImqBt2yRCsdoLlMqrnfd03obcDRDKEkHg6ZmQ7kDKyoOp1ScOYTMirNY1QVbx6SVqQ3iPU4IuXFblKfqij49qdc1/UqDhVXiBZSHqkUCDr703Q+XGnquarPY9NtNtl+FkCvHhJlVJVBXmtvbiKtu3pPqwP5agFlYlT1S/qWPHVuMim1xJXmENAVUiA+blvHF8YSFSad0iSzrVyFJV/JM/W7N8hGpXt271tUcQI3+K0NXbtxHxLCBy8rBRzRsk2kmasMqBC9dC53mVvQKXk8XKeDZH01VSSykITysdZwO1yq9jVXpJB+q1R2D5duALXTCnoavnxyjBVy4Brw6/0rVMrj6DS4LZ8WJvsTpiV4u60zzIqiVf07Fw8pwySIP3D1AU29t/dClfd7uJ7L2v5WGouNgWSyTMQSM7Si35BvLnut3+7gZ1VwZx7FZrCRTbVVVVSXZOnRXhtGwxVVKz3QHHTE3jeNauSm2yWqIbUptUR9i3SIMBsUwiwIK8nUck8wZjUK5/TypWbyct36AfOWOlq8kkiIL6XVGwC7uoyQP5ywIWKoKolZN6peWecbf8AutmHElKZkJMiRhkpB6jZbc2m0iMfiEcSyB6YqOaig8q3jxJH1lGM1LbrhqZdX/wiDFRlFakcJkswqd8uPVoS6pf/ANuLFDGUzjScDezl0/5SXIS+ICxJNcxs2kmZMFZISFIt4rzjK72frA3n8eLQpi5YqGarJGNaqVRTR+kM9qc3eOjIy/7mPzYliKbjlPr6M4qP60XSBXe7df8AJikjVtQvW4g8YOVb+lCcbpCXm7rCgjPKqdxAuR2dVUAX3yI8QyCPcp5q6zkcP5nL1MEgfC3ZSySrjXt2gaRCF27eO3Z5yPxYzis60FCAzVIr9tuDxXRPPoC8Reo8MKsklfqvQfapikrZye19zAJdaNxHrDd/IW/iwbQjoillT62SZqOgVU2mqntPmPEG8XWERscls9jEk+stI/J7N2KysSNo7FfexoqZvSlD5al0oqZXXH8+CZkTerUTwFZVJinwv2au3VPxXGOy38dvUWBii1BUdx6XtCX4BxfsrVeAmHhquRfCq1sBLSLadwl1j5Sxa+PZEvMF2go8PCZtCI0JJi8INmmJNy8vlwiUs5FuP8DsVdvSyD8C+ItacMW/ewhIEe/VJld8xlhHjzFHWJsrv5S4IB+5hLFNksoWqSh/Q9JUj/6Ge7/X4YqaKSg3UNydPBuPwK4kpKLRZ0+NTr1VArkqX/Fonc9S3270j/Dirt56HFYTNESHw+rrseEZr6RJ8SocQppQLlK8f0TJXZ/rcSCb9+LewIpfR8RJOL/9rirlWTYCLSZsbj8MMFw/63Cg1Ks6tR4PV6e7YCJl72ri8WlVNWJaRDh1AcHpCYfpElb/AL2KvAnqi6PuiHXMhIR3WebCjg3mj3TByN/iSL8ZYg4ecbJPvVq7ZzddtJMSt97dizK0r0tSJ1NqsAaqcazVVK64fqRkZfLhN06R9YKcKC6SZ7gFRuY/hw3pesDi0SYcAuSZlvIRIrcIlMs3Esssu2JBMz5R3BimCJir4zOYcN0UUgjFdoBcSv8ANwo4gXnEFxoM0tu/cFv+yxEoySKAp+q0UnNnJpEd2zEs8rKSIRCRhJxsnpfaIJIfjux6JKMlHoxEUkoJqmkkpvv07/3cea8MlaGszVEy5V1QG35RwzY1AzFwpoP5dBwHSQID+EQwojUazreUk8Ibr9pMhP7w49BeFSTp6CSl4NmJD4k34YEuajoymEXKp6SJpWpaC6RGfVu2+PBOfTz/AFLxqFdJP9uqzH7hFgS5sVVKpSzVEXIlYGqDnXalsMvkL38WNCRkq6khFpV9qkD9YQOS0BMrdVdcCAfg34lnUQi1TU0qqj17B/RODE/hMRM/dDFTePHILJrG5j5DrV1ZER/2SuG6j8BIlgbIICfSlM8vzFgrImlmepohNJS8TFXzXYReOHOmRi2uL/rGK+tKMLVAdM1V07eUZQC/DhP6tb3UU20+nUcARfFbi8WIKOerRR79z9KmOqzeXXHYIqpeEubB0h5JHTG9nJoX2H3qR+Xlsxn/AC/atl6rYkuCSeleqPDBd3oBsEvAN+DgxXitMQXm2K6P7VJW/wCK7FDu5G02sVbIsWzhNYHCypeVW4bPjtxyi6YNVFEW88KQgqG0it2e/iHR+jausfGNiTPk0n7pAwPy7sRP8VcayEk5ETL9E/uu909h4qREFalH8Uqotr1OKVgnyum+K24awKqmySYuSMuVS0i+TCKbBFwooD2oXjMVf0hSml8qQ4WYxbBlcbWuXi5Hyio64kfgVHExVarckwitQga2pCkH6M8Vlq1PiiMX5JFi7SSukpoi8JUeodJLZips71XCnc3CHsjjy+RSjWDRV0TJa6/qUVtH7uLVlO6+jmtJM4KHmniTg0hTVqFJmuFh8wpKkIH712K2K4d2ikHJzXAKuJKhWGrJODB/GNiSI1bn0dxKRe7pEGKHVKCI2bWcNTzdKyEDN085YqTBJGQqzyTnSsIStFIELA6eQxwK8vWDMqyiXjqbZxiLd0Crhyqlq6AAe8zDSLFuqxd4kzUMjipDiEDSVXYsOB0j6BK9BL5LsRuU6X9vUGD+oVY9PigLc9Lvf2QEBWXHy7zEN27ZiwnJtKsRgs71FotZ6SRZuUnKIPFQSUTu70L+ffv+LDiDXNB0nqo2ifUWGdSXpVFKfUF0PrivdriF47+QrNnwYkKDdIjUKOrGrr3n+gMUvmtw2dDs0qEu1RaYxOWk8sJ1HNqxmwLVSflaXwNSsHFXZxYQyKzZrPR8m3Sdd0PFGRCfjSStH7mCROIeuU00XSLly6VS7pT1yQqj5rbhAPgxQX1MowMW1cq1Ig8Jw63tFzXvHz96kKRj7+B6QdKJdVmo/wBcIQcxJM20CqjqquOEerik62iN+klqie8PJz4p6eskxUeJPEEr9oCSSpWeYtpWYJlA1bPSVEyQRIOVU4+9vpoKtWaSSSu20UjEjPq3X4qLGJRkYVRswZoISgWHrrzySSSQXXHaJ2hd8WL19VTkuMSRjzavEHLoBPilEz2337AETw3dPJLg+9RStPuj+rmIl5CIBxaKmhmDOlafkl7eI3iZIOlVyIL9m0x0g6uU+vfitzisO3bqI2LuVA5CXVCz5C9rFWk1DYolu4fkRIhoJJmd2ny3e9biei5J4hINzZIqiokYCNo83kxU00GapfxNW4uX60RB8+LBC8SzcIv1Y3VbtyDmbgqPw9eJk0KgJImSFQTyuprsJdAgFJUu6SvsD2On38ZvqxXipySWI19NVwZbubB4kpym38LJP1UZAdJIEuESYaGqd3jAf5+KG8y84yNGYbnpN1d1pX3Dzc3w4taLKU3+1QuUqWZb1Cxm+I9JOI3hxQIh5QSERD5bcIRcy5ZksAmVypbvBi4vqQCTm2qKRnpt0m4K2l4R3l5cQjekHNpWgqQny7SwwKpYNvUl2UUksVRmuOiZlbbykONAZf5zUfm1Skdkjn/Kk2GNLSpKs+ZxDmX6B1+ta8vs+Lw51cQyyBWHdcGEWsc/euk2DBFVysqYikkkNxEeKAFrlU9SMdYsq/yWqlxS1WNxtVIFWr1Abmr5vtsVQV6wK3C7XNJgLWUjdEh9YKpGapeAN2K5LlmnTlEFQ1cenVgzLiEGUgRKKsTu5mpfovMInb48C8Hr9msQAsoondzEOKsKXB3aSuJ82lpNvmhDrizPcoo0QNqdvVcvdtwtQ9SotXF8o8FIgAASSu8F2M4o1AsKg7Bu8u3DpGetId7lOwek7sUlSuqY1K1Q+quEe8Q8aubbPrBiXVttP4QHE0TxgNXLOWBjoqq6qVxeRUsZmplWp5xQWdNIvHJXWbR2+8XKOCFLrUfQiHE5n1wMzNJWF9HqdV3cv6d5bpBzfor/AHcCFTumUUSL4bkUUaffzLomcQ2FRRu4cJKqKHpJIBt3qqnsSHbzFiMkM5oWiJz6P5XNo+takSSBI5lUTKLZmBlboJH/ABj2z2eAOrANrnPuqcyGqNNNWwU/SrUu4ho8i0i5u9XMtzhXdzliWoOsoGmmqwJs7iOxLu7btl275sA+aAou0dGRKPWc3SKuUPSE3GZbyjlBZs5cLKu112xJW2GaQltL4thY9XM1ltGzFUUnXyMk0mfShFK8QmgKpaQNUC0ky/RF7QkPTh/GZr04nByaJSOmRi3XbjZ1hcJ3eDlwMu1k5U/PfNP4oxJlMNY941WS9NwrpE1S3CXUN4l8ODAbKsqwZdwjpIvlYEKYs1PVaZxwe9+K+gHYukqNqDKBVxltDlS0e0kXDVLiXpOn657LlVVyHZd4EgHEhmjHPHR0sDoxXUVpqaZ6iJDcZjIx5dF363AX7D1Rgyyfev8A0LJtHDWbcKriJW3Xglb93BgzFzApJKZpZd+CDluKVSN1UE7C3k6jzDaBbuXHLLm8fnypY8X1LR0ge5W3VVhppsq3Fyk21U3bWVSAbPA18nnLH4MWwkaejXDORlE1lVWSukSQlzaA23+Hmx6FqiNhhYuUzFeGb90Sad2vxCquzb4bOccO4+bplkxhzfG8SEgZKqoKpXAIJaRHb8OM8Wa22PiTTTJN5CmuKpJ8i1WfNVDfS9pAdwJK+u3Ihb5bRL4cR7aiQmJN1SCsoonHuJZ+CXDEN14SLkQP5vuYtyNQRS0IotEy6REvPy4aZDaFnrhyuBl5d2Iqjq0RGfayS7YXyYTsg1cLIjdearwjA/mwW/UvSfEOU/xQ4Btmg8rQ0lA18/bIu3zlNano43S/KSvfuR3f6L5cLVDDKpVjGPHTZNdJxGP47UFIUivB4nbfZ5SDBAdtTka1BrCaguHVLMx7zSIRPjJC7nt6VRx+1bSEbGJw7B1OruXC6rsuJaDcIOO6LbeXKWGZ3bofEXC3Bh9hUExoVEyfo5nLZxKOX7BUUYqE0khERIktV0uRF8p/Fh3MQyyUMRpNhX0lXSG1IRCwStHz3W+7i+UtEM6ar2WSSeKXHT6QmotaKpHa8KwvNvuw3+iU8ZN2aEKuqXeqqriJ2jcRFd58VVd3E3RKXKP2V9CmiJIR0BAoM6MduZGEV1AfSjyOVJIhItxEIkV2/fbyj1YcMKSpiNqmo3/GNOHB43S27rUlY4SPxbr8FONpeYSio2NOLXQi0lXpJOdIVUtzghMSL/NYHS3q6WmpxsqbFBN06b3cIJEJHwY9JcuGI3M6l1/H9f8A2wVGQIAIKtxdKQLV96XJthUFJJwu1TIiEVLEBIN3tEXw4kZzLmHJNus1ZkSd0euJX7C1VRGz4OovFhKoF0qdm4mPSciqm9ZuAHddaApCl7m+7Csk1lUotZ4q80ET0lRHlCwVUrcHDVu4k2ct34qgmx1CmTOIcxiLD1zCCKbpdVqu2LlMwQX8HhMRwIUHDx5S0TQbWETX0nSz8FUB71dVUUkrfZC35jwa045ZUhN0/FJGNVdk8crq2pNthCZF8WLFlTkOzkoMXM8EnFU+r9kP2UjJh0ERc7dA/DzkHhuO/fcIWeru4EWA6Vl7zcm6Io8yDdE5LP6yqJRmkweSYkqCq/q3+Kswt366+kW7yiBH5caGpXsnRTVQlkqzjIVPSs4aPYOmZ+86cDxB+5aHkwXmaUC1aoxUMwQYs246SSSaVqSQeD+dh8ikzS3gsKpB4sdcY4UpmhWMK+Oqjw/ZmkohwTynFoVy4VO/ixVLXv8AaV2YlpKisy2H1aUjeOFIf0q6Tm73bcE6n/4Ii3FSPDuTSDSQT8WKitUyxLOHLq5Uleq6208LP8G0dQRRIkzHiepaa1CKp5Rsk3RJzPUeXDhzEkzXQt/7OlfjpuyZqiQJUTIKIn1NpnYQey6IfuYsH0wft9iRkPv245/ONPJFYLxzsHb35Yt/wND1Tir/AMXT3NoGppUlEPE2zJyzSeGWkkkhbql5dm/di7U3SuZ2UcoOZytHqjA2a6ouXQJFZ9kqgqkZXhd4bPdwEcqach6qqZuxlliVUdXpC0Qbrkv7Q6XJbt3bvOONqZtRP5vMntF43j5Vw3AG+tINeOI7bbB1VdgdRbh8NvixjOJ/LE+TXm230bbYlu0/+kLYfJo1RPjV1dU4854v/aznmVODQdQN/RFsOMhZJqElFridoE3PoIg6wO4PdHAxd1vUM2+WBdZBs1DV7tJLfZpEW4jwRIEUczoOSy9X0hnmSpyNOEmA8Or3XesxG3ZfbcHn8OA20ah61UbPll+FMyFdRo3BVdANK3altvIfBf7+NLwD5T6x2sIuIKrsxb+l8XvfGg+IvJ3badj/ACmlHMIvz763V2CkjDswUNsIdZRwX/eixnzOSEbT2bVXrJLekJJGRcKtS4MlRXVEh0m4EBby9oNuNQ9kuLjYbIuiomGcOXLNr6DFJRykKCqnflcRAJHZy+LGS6zlqmVzcrI4aoW0Nwkw/cKrruBbXBrklaJW3nd+q6sfj/h88azi261bfMRf1NdcYbJinFsu6kc+EFmVCxJlX9Sybpu4SDhnN4t2t6StwAOr5S6OrGa3V5PLBPcBfvYs1SZZtqaqSr5eLqQpdnDrx6WuQW3quhJUhEfCNvNiqk4MXRLeC/7xfvY7ZS0oUjYgBSStwplrUgS6JMxRINySV13SWLpkHrL530MCC2mp67Zbrbv0o4H7rmdNh/RN7B9wBxe8gXgR2f2X6yVxJlVUYh8TpIcfHGOzJeEtQrerh/FROWb5+JiLppSThqa+lsQvHSAbucCIx5erGM81pQKoqxZ+bwmxAwaNblbbSMEBE+ch8ONLZhVBJTIs8q4lHSUk41ouuvv2gkqqSo+0e3yWYyXUjBhKVFIRUlUK7ZZLuhSSagqCqqQW2kWqPWPMWM7YWo6i3JncC7qo7xq2QIvrmqV/KIYbj7ZYUkGfAOCbEsgvZyKJqiqBB7QEWEU1bsbFJlqzsj0XT0vVLFZhWVVC6MwcOkoZBVskkFnIquG8+Uto2h5ixpntJz3obRbWBXm2Pob8LtSWS4l4rae24jXv5fFjL3YSpCoZ3MVSSiYFo5Yt0rJFyu6VQJBL9kQDzeXB87R9ZQpTabCMgWKrdLZquUjFVJUbuYvuXeLGFupF16MkxY14igW3HVuWbuUlUzKwB3iFnWeGqhOXUgmi3WSIkj1bUz+y3dOFG71mk4eXOSFYELtMi3iB+K8erbZjzMWEosIODHijV+yJK7zAVtw4KVkVDyX8LKKG8NsqVtp3bt/Rdy4rcs1hxbpg6WQQ/RGInzGH4cTEk4RFwsi6PVIg2CkuA6R/6L5fBiq1JLM4RRiCrlASSV3qkB3/AM8cMaZDOpTMRVs1pmPB4wbE6VHZcJEVgbbua8MB18VqN/N7W7BIzWBsuUPUKF10mhq7tqpB49DnSH3ywN332d9+3DxjQgnE6otwwayyzkDJq8SSM0i1zESPw7BwfezirGoSTx2rNvmcg9vJVtYIpK4z9QLp4yqYUW6wiiYGSqZDcJBbv23Dg+9m6lJheUkKvQYcNAOiMGpEaGqoYlb+lEjt9m3CHi7Acbc5Io6Vo+EZdebiK1KxV0m+txhFeIbvtTHEtSa6zWRIt2pzbktUQxEpvnCTDh25KaQc6dwWj7O7HUe9NWTFs1cqiXJyDyfcxxS31ZAa6o81mtlNXPMKblHUcgfoRbIkQXri5Q2bfDt2l7o4pymsrEorayvJu0yIdXz3YsdUpCVLOHa6wtiSt0xQhnW6wuYrC24qzVwirHt1nTxsKxnzEB3ezdd8uHlc+Zai5kotQtA1pHaSr8waLV0P1MtTmuUIiO/FPqJU5QXDsmbNs4t3WkO/3sXiW+j1wmqdqf6cRYKkRfN93FZmRocVyWbGTlBUrRIo5dOz48BU4GOtaAXRKIqKifS0VG/gGgkA3F3o7vaIyw+byiJXIi2j1ET3XdwNvs7sTcWKJ3G2Zjw4JdUcqVvg5MPGbV2qnovPrNn6NVIkiS+PFRu80VaBQ0qDaixXUUvhYhQUuYi0vmIcJOYxum34lOLhLlStDpt9mzE+5gmxPVRVghIjsK1FBBQSAR5rrsIIwrOTkEmnppj0KjzGKjlBpsH2lR+9j42eJkID+f6qRPgyEy2qCkotmuPAOGNMC4bjpXC/XJUA9khtxT3STZVQQGSp9Mkj2CICO3/Rb8Heq6fytVpt1GxOX3piJFVK31ipMRzk0j8Yp8URHgWIlTEMom2dLOScJJfaIGIpF7ekqX38aQhJpZqhrhqxIhH6vuTGFQAVlFhRiFSAdUrklRSL3gtxNSDL1o0FJrBU/rK96roErr2f6Uht93C1KC2n3ThKC9XsSSO5UnC6rYwA/wBUThcRV6sSE/8AR+Ek+DTqBJ2rtI1CWG4T8FouS+9j5B0BUidYedhzKWpMhQfRrYmyDZO0CBDbZYPhK2zDGti9bVgOq2F8mA2hqpXElt8hb8TTZMHiqb2O9Kjlw22m2bJWERez1e7iPk5WH9DsWk6sg0kW4d43WPSJMPZ27t2FcTddkimBAHZCoFqlpRogMagIm4sJQm5CfN5CLEfpLE6JmcPHpM3TgEi0mZqlz7OoQPFsdL0wLUSSlWLkVb1f4+N4h0dWzDGGcQ7ybZx3p4F5xqoiKRSKVo+bw+4WLhIwLQjHHQyiJM+1ZJPKNomNph5TbF81kG6oJPpRr3qCofqhC1ICAC5rCxlOHkjid41Ik2UVAxu4BBcvnLGhu2BFxQqRbBWYmH0gA6o68igu1YhfbaKDcRBIi8RdOM0t4bjR+pRtRvlLb7WSX7gljptsEcgVxupIjdktSdmKi6trT1hMTNMMZ6lzE1VZaXapJKjZtsSICKz/AERYmpSLRZPnyKEPGNmYaukTRJK4fBtNJIw2YrvYra1tUco+p5nVq7RmG1VJ+urekl+ySMbPnHBEziQeUnJzCzpy0qNuKukAuWprpbw3l3WlefvF0YtdHuqgS16kM8s4tapZ50jNs0tNVuZM1UnBkHEH07EvL/NwIc2JttDVlJUq9h0Ix1H/AFdUWz0173F/NsFIOrlEBwWIGXRrdFam0mCQyyqH1BcmC6SDUEudVcjXs0i6B24Cs5WTZvLLM27+Pl1G5WaopPFUisLpvecvuYYMbVQa+inY9nBqjJlqtRsCpB+i40m7ko61mZgdqpCHFKmqVwl3p2/gxS8/NCLzBGm6tqGH9aSbVJ4TsSQFwluLkQtvu81+PzsXIBVVEqVg/qKs3LhJc2aUbEuFfVbELRtFBI7g1fHu6uUcRme8XTzqt1AcIs4NEG58QpUxtePeavOra6FXZt6Lbt+DG/VIA/WqFnswYGGfRv0azRl0JZkq3FIXLVJyq8Oy0C4VV0lYr7RFjbFGlNv6RYvKgbJKyDpkBq8S34YhPzJXEAF7B4+e9LwMJl9WETW1M5i0A2EHXCpLrsGCvCme0FSFuqke2666yzH0ShWEO9ptHinLaeauGoOOOdgkSTwDHm8Fp/jw3t6CqllXMarYp1U00/XklV2sUJt9sC4kEhO8S2ukrQ9wTxA5YwnrmtGugjxjoy1SiXNGqtkiv3aqqrhcjxG1RVVc0lWj45zLeo2LVo6MjUiGaSrAkvGK6QjYNhCPIXLz4UousI2oKmRkmUJUumq6ARdsUnQtUAPnuVBLm82qPnwMJFJS0LUldVADCm3Eq6gZd8LVIBNlDJarg91tgidu3d8GPlXmFX/0vzGfTbVF9Boqq6STS9UtAAK0LrC+O3w8mPqtXlPsCgZBsLx8qmrFqpa6QGuV9nNaG8y9/HyJfJVJDVRINmaKsc+aOFUlUEtVK20t+1Ur/vYqrtbqOofVIyV9M1JEKMaYkQI5KKQSDVSV2um5jcBXapGrdddcQDsHlxDzlW1Uyg41H6N8Tfef1aRFUC8pDaXw4nqo9VNSg3LiuUEJxVIAdNhYOktK8NipC6SHnut2HZ4Nl2Ieqn/AQcO2km0rPcXqqoJtGG9AAO3luIAvtuwhaHTqTCSrf5wZ5VZNs8oxUbNlyq5q2/Ahf8uOZTMTMiUW7qj5dJukNn8VVV+4I4UF/UKAphHUNWyV+4NoJfCGkWHk5L146TF+6oaqGwmICai7BJUT+BAT+fBItiPKokSkshaoZxdePPplCPoxxLMzaxcp6muBi4u+1ITLvS22hvvxJV8lUjDMKWja1cpVHJMj0lXZMiX2X3W6p3GFt3L08mE+zqvVsjnB6+jqSJs4p+NdutRywVECtSLutc1bGpFusVICt8J78U2YqGbjZ6QOeoNBm8Bwq4VFctVwlfu3KhaB7C5rd2I3AeyFX2qRPlFWAigbRtYKpKXbxQZK/gtw3cSjNKQHimz4U77u9YKpCX+lVxXyzNNUdFeHVEQ5CaL6RfOJB8mHyclGv2bWYdV05bLOn5syaKl3rZIREtdUgS+y6du+/pwuEU6dahuV8Wq2Hm0U/VE2gSIWaqa6QJGl8BFtw3ZpUwk64xf6LkV1+54qJ338/wBlhw4iGbVNMEs3WL5P9FpThkF/s8L9/HMhNrU1GozaVWvpwgcABNo2SFVX/RAlfb5sWxmhZgpRwyyxeM1FnR0mhtNU9CUe7j9xIQ+fCMPPZYsGZGlApWgNxqiyXcpf6XkxYJKqzkYlZswm3yCloGKHrQnI+8Vw2F7GKi8rThSE5Favx/RWxq4qpX+LvUjwNkTJXi6CWp+coBxIEs6OPSED1REYtJcFfcPkxZmdYUG/klEUmEY2UNWxK2Dajb+5gexuZdQsHQmq8niEAvEXpDYQeK41RsxZIHMiVlHD6x/INhaCG4SNVJW/bZckRWF7uA3BTNpvmRGkHEbxDdnxjxy1AzSV4YgFK+/xAkW3HUTSC0pJOnjKKQckBbLn/EqiYdQ/VSAPjxU29UVO9TJFksqmm45G0kLgbbOe4tCz58OnS7yIa60lAoJOnA3k7Qe693gMlQ0vNz4XkOhS2cyuQxNZtZjRZ0xaVoHrrvUtIg6NpoDt/dxdn3pnm/pJtIyNHoLWAJppMyVIPe0rcA9Oo3iWitGhKoJu0vsxfqudgeUFSMB9vZ4MSktPP0o0VkKtkIqxKxXUSeJcnVcZFioWlImpxIkRtCbkhIFUWLlHVt0kGYlaHvkOI2YpoGrxFy6hxSE7FQ1Ugs2eYy5sDFTM2SBFqbzMGZXTNDl4xUhL2SMd/wAGGv05jV5Rq5SqElVtUO9kkiXFL2rLbxxUaMapnQ1I7RcGwi1lpJ/G8KXC3iS7dArvJdir1IlGldxUagkLgryUI7Q5OqzkxAuIup5R0UqlpPLwvEos0BSVA9oOBE7rx2lu8h49KVUiwcCwko0WzoRstFUkFS9obt/u2hijea8LGmUpLmn4agGco6NA5AXDvYqTF+kIFd4tw3liUXpeBFQgfTcmgie/u9JUrPZPHo+ZpVqimjNuY9y6MTBJJUdIrPfVI8dEvAyTdT1NSUbIOEtw2ukhO/2bixFwZiosSloUDIUvDkKhlU80V5XanBAJj5LQ5BxE0Wzcsnzz+2GXYiZWCVmrcHsqpFiNkKmPiFAl6bXZtQE+6SXBC1X30LMc06/WSTWlSp50gzDlIngCBB4ruDIMREIJhlux1LnMZBskoo5bza84oaCuqTlfV0jv5OUbPZ5MBlNUCdCGj3wBftPd8OCxVdRt37Ynnpb+hkmCWkkmsoKhER/tW6CVg+0PvYFbpV4Mg3Bq2SJNW8y07lbT8xcgDh5aAkJJHfRIcsSR07Kj02mc8J6TbLqESTgUkRa8SRbOkbhsLbz43HmHW7/1WybsqHqPjT5e6SEgH3VR5sYI7OnplX2aEOi2SlfQoIqkqMequOqkI7rtIbzHyXj7Q3Y3DXyLxaOjiQYO9H9ZJcQgIq+yat5YYiRNNPRWQqWwOqbTWkJyVdSCYymXEk14hI7nrkbiTDS3Bdqn5uY8VuqpClp6ZZsPTSsk5dGkACSbNcgQVDw6TruvPZdt5y6cWOn4FF/IEC8qkrxYqqoIIOlR90u/K/4PhxA1hT8VKItZtsjIOXQKgaoxqBCqV/IIqpERhYVm8buUMVC6WUK8IDmqNq7LiVm5Vqs1RqJiTJgikwctmaRCG8iVSVIFRMt/TuAQLp34kmlMVVBU3LBJooKi7ELSUYcHcAXbDG5W/Z4cVeeoGhomTcfSWVqVB1YDh47cm/8AjLSIQ5CLmtMevDyFhKel4OQYURXIiLcQNxqSy74tIiLdbqidvvD72DaaWZpFUObdyxHVQcLUUgDWVQX+tGRrttwexyjZ7mzF4ygYNpjMel2Mk2bKt3UikJCoAmJbvNtxA5tRbyLryYBKYVl3TixwTlVmaF23YA3kV48u67EtlNwwV/TByUa5do+tG97ZskS5F7KQb+b7uBqlrTFM2y0L6rRl7dqppNi5bRHowC66QWSL1qvVUZHkkRoGTsbucuQS6MGR2Mx6sIIR3Hs3F1v1m8x+QhwISZ1hcoYo+sHhKhak2dLsRs/zqphzXYMqy7BkUhoR1uEneR/pRVnHKrBWBeEKHDuFUlw4wguvAxEGoXhuLrtwWqyNVKC9Jpt3K5J2EXCDvHA3ynTWcTU3HSaYtFmuzhimQcq2dYiKR3gHLzYv1Ss2jWEuS1k1FbRFPVVU+HeOH1DDzYXykHU/DNKAFcJTyvFMIaediTtA7UHYqk3Gzxkqr7I22YmqHbnG5RxrZ1cxUaq6TgWivEpOldXeqBc9t+7C1REwkW7x+/4FBFokYOCdxZubfGF1wn4f3sftBt0oPKjSatkibqvFSSFsqYpJAR27RVuJLlK4LsC2zmRdTyrCGeQzaWcE8znnj5XcBMCdmV/CWXB1ct92Ki1SBvyrK3Ad91+Ll2ipGYXzSnFpc1bQEEmCBOkCJBKwdvdEQBvuLfv3YpMCqzFZnxrlyKd4avDJa6vP0j4sKKlqZaU9bLQvpTlDIypZXRMhV7ZiL5ywAlXd4iuSpctwCkO6zdzYkU5bj1o9m1lYd8jvFVUXGuQ+XZ7XixI0v6KilsvEwfTUokZsL1V3rIBcDtK0ysLS6ejFAlJEF2N72YgybtftVONQK0PN3BGF+Bn23WhbJ1LqftSJXOsIaj/Q3RBPTaXL2kQyKra07OnvRt6erFdqKNalRyyySNTuyarmRaEzIlp2DzWguV4l7WI6pGsbOLN+NWeC8OxXQQbs3OqFnSRocu23eF+zEXPSjuNphN5SWXDOXZgqZvFmiqQm2K20ysSt3bQ2kA9eJ54uukpC1ERVbhZSj3SxOVX8kuQIGSSajp+J+Lm0iP8A3cZtzqqabqOtHTxnCakfHpcLc2HiSvPxlakYeyWNMZdVb6amqCSRnaJXJFFADYLoKmgQ7N9u4gVK2zGd+05JUB9JE/oHKyqkxcYP7pJVcEg6Euazn8HLgsJZEVcJDmoQyDeV9W3umbls3tPSJVvpap2eI/52GtPzlSFFogLBy00toFwCW0PaMcIpvHLhiTl4squR3kZEkQkXu8+PQtWyTJNNEnJE3DlEW6QmIe+JWYrEdMFe7uVibzLzcD+efbxuJNRuFnwguP3MNJeTilhTsqmkRLlFOSi9Ux+/hdasH7VPRavGyF4X943aq/7JK/ETMVg8VIQeyTNUQSsuGNQI/wDW249gKgRLsfW71YgQnsqSUPYl/A27/YYTlqIzQFr38bFLt1d4kyYOkAVDy7AC3FSkKyh9QkUJL7XbaVPMPv4Wh3Ew61PVb+mu6C4yck3Zq/IWDRAxVEgNXan0DQZ8M/RhWawbDFV0ul8t2JRZqApjqyTPT5h78rf9viqtZR49Zpm4coOf1tomv82Jhi6p7RvLg9TktUb/AM0sCEKvElPSTiHlKLkIcXgoOAV1Wuklrgurt22mRWbLtw24E85lfmLHKLcbl7UKApb1botcbQ8XLgqZn0/PQNNxaKTBnHkslqqptBSVJ0BlcCpKpbA2l9lYJWe1gM+hnMGt/Yba9/8A0i37hYrpd2lUP61T5ITEtE0bStutLnxAqOW20OGSL3rcGprlpmdNwbqoYGjFSj295EvxAiA289l6u/3cQETVGZsG1JFrwPCme5su1Zr3fGkR40NO/p0pU6xqQ6RVRIrEgG79lcJ4t2XsTI/SoXKXo3N0DMONEyEem7eOLcmGbtZM/WsRlAvItWRcKS7KnkCSFU91twIeYccxrKuW888CrYGPp903IG6rYWAIK7fEkFtnKPTiRPyD/wAlIWtauzpnK6Imq5pwtUb+dqJfJvxFqMzQITJtGL/ybi78WE3zgCEdJ+V3VcqRfhwiikC/+EtiL9qJ4Xpgo98/lUiU0IcUEw+yLitv3sPvpvUKuii4OnmaYWfZxLXVL2iBITP3jxH8AEasobMGNx9QkN/z4bi6jWqhG/Bjb1C9YXD8QDj7ETVZqUW0XskK30tEk3Bncogg6HS93k+G63C0gus1+rDNrvB8SArjb7WqI7sV1vUEa3fcYwfxCSgcopx1w/PdhwSqIiJ8e2eKKjeYp7bfb24sUZJ4o4O3a5k7j/V8uKrEynBSnAKys4gnqn3Yna197Eos8ABI0mCo2cpcofdxE0ukzXmHDl02EXQbwEXA2X+zgoNpKI63RFX5jLtkkStkpxIj/wCbJAQfPhu4lAcOiWVeSZFbbcTUL/kwo3bgq3JY1iET2WoOkki+G0jxFuG6LdYv4VtEP6eLACbkKfOF2a5Jor1hOR/lFqO7/WjjlZWnkCJH6fyqQ2cyiRpGr/ryxDqTMOLoUVXKSrgPEaX/AIqVmGtUOp5dO+BeOUhs71LhWtpfBg1oZpY6rlCuqSdJrNirBddToUXQJff/AKXYOH0b6qMtFhU6SqgcyYpGJ/dLAtpV08SeC5qCBYkm03W8LaZeyQFi1KVa/uUOLitJG7lFVUsedGBq1jWKtkg6Bk6IPpJFCp5npJH/ALDA1zWeGq+ZoqrRj6xK7UXXAhs8pYnPprVWtZZz8yXBXffxR64brJSSk26WVQJ35NIeTw24mxuVVdoaVXfJGqpuBiNg7CQIbMKM6flVVNZBsJCe263VE8LR9azcW3WZsJ6QQZuPt0UFbQXDzD14mG8zTBkRswnCTv2JcUglzc5cuDSkKQ6TNQriIfsxHjEUBFXYNzXm9krcIt6Xcv1C9VuWaqwBeaSrgUi+e3FykpY29O/wXN1GgzcK3mxUXSVQVMOrYqO7/NYo4zcwkp3Bq6fhG4SxMCJSJoVa8u4uo2U04AEkk2KrdUXoiuBAQdFwgXjtwUW/AN0UwXmGYlYG0n7gTH41cVjLVvmIMqyWZtMyI544ssWi2CtqqR8u4CErC8oli21ozcw0gn9NY2eKadpGq4GpG7hmrZ0EKqpFq9XQOAagjItSa0YgAxSjdWNASWSeJKjd+jlA/GWGv0oeNbQbU9CqkCoW6k2CXzAIYr+rDmRIjAxCvgJWU3/Jbtwi4XbadiFKxQifKQzaqRfDcWICOtXu6BVklMw5IvrkjCLkoG3+DagQXGz3hxEo1L6xUHhXNRpuj3CmRoF8wF+DEL9QBPWb0BLunAc4tpt0X3BxMQ8isu4booZdVOzEy5lHrrSH2r0ixflihpJZ5OORWJZWKlbj51V2Yif3cRrGeNu4I0gciPs4UcPw4hZycPNEJ77VD3D72liJTdIquPq8U+IfCLrf93FEEUrAVSg6JMF+Jt6hEQ3YUp+RhGD6+e4lJmCu4UGfGKkH8lqpYgUXSKpCBMJBIvM4uD7uFiFEm6l7nTvDeQ2EX3hxQ4OpSLaiNxrP6NyDyEN46RVsSZrqiCGkHhIbi6PFdbj2V7ysBriFOOWXZkk6BwqqJJDa3DcruPZyXc+K3EySKsG3YRsw8X7oAIlGqQns6S3Xn1fBi7Zbz30XqYX6qKXFKoKtUHKi4jwZqhbr79m27lvH28eda7LSqg3rOtUQxOqomloiNc8Cb9waBFuEgvLqtH7mPUmDaNnG7mUtHSLaKDoRO/HFRZZyETPSTB5UEQms0Vv+tr8GaoHuAhFW3mEsQrOLCNeC4XkogiS5btJyJeW27fhuICY6SSWRSWlZKUfx0WpJMIqnmzO4G5FKaBKkrbdt1d/vDgcvqrm+HReWR42GaX1FBvZZZbvEB3+0V2K+zl9eS4xfMUo9uY38Mxjl0Eh8gpBsD4cWB0vD1GtJNmfqxssklxGo2VIVebkSSMt5EPTZ7mKxaylbIjREyBSeU/F1A8lmyDGNcEkqDF8yQE1b+sScb7TtEbROwsRrNXVUICRVTJUt+ogIhYfRhHKNnMNYmcYP6nVYs3AgCSTlVITIOshEyQC6y7nP3McoxYOG4uUkWySJ2brktWy637LXE7urlK32N+IlvRTexN60Stp2HeONJcUnhkuu7MUDQ8CQq7jAT3FbyYoc0gzFusiLYbtIDuQlBIP9li5ZkP8A1M3awiFSMRvSAHDFcldLZyKkIFZcV13J8eBndxDNwqgzbKCkYAZMkj6/Dt/exIRUHSTUeDSUIL1Ui6x10rsPIsXjh4nwpr8QB7STVSv+7iH1XhqFbdaHivLEpDt3PGI66KWjdeYpq6RfzPgxeQoYVfCcZkSkTISv0kVFFo10lVFX7UlyPoAdt5+zjmn4aKl4NmwfoqE+cAAcSR8yu7msK/5MR/ANlXCbZU0hJwkZ7T2eyRHsuxJU2qjc1bcS5Xb3W8MRc3lEbd+BikYK8FCsaUbOHTp4Uqz1GSX1UbyI7w+5hrS9Eet3iaLp41TRP7UrnRW+6kJH8mLFFtYomrxFWHcoSGqF5EPNzbd/IPVhSBjodw34ZJaDiuICxXVtV1T8ZXiqYe7bioj6NK9BNfo/QcWo6bSUIrKomOxyhLGlafsqiOEURhaaRFaJjXzFN0QF3coC6StniHFgnIs6BUcHCVtHvnTSw0HMW6Cz5Erz908UOYlH+oSy78XSxneRf744iU9qsERUtPNWdQNb0o1mgQDq9x3V149XNiouMuVvrDlJEUhSsEvrX83Fqj3izyNRNXcWlzX23bsPiSZqouNfVETb7PrBWX+bHmjMNiiTYnuQ3fZbvEtM1QtE91w+1iLTpVZIhWSWErOksGRSLigj49ykBBqie7X68NYunkXhCBMy3htK7+diXXHwVXVhQcUgXj1wKKsoSYqnbuK4B93EDNQT+FfcO70lPT4kzuEsHeTpfgCJZLjO63COgRdXtYdT0cwmYV1Gy9ouHCqWk+JrcaG24wtPvfnwU1dyAoltXioZCs+tV1kh23YfpyKwkmZAJcmLzVlEI0a+JgU22fEFlokyXbKl5rTHlxHt4ZsunfxLQbNlpc+CnKlrcqMglWmkoaTn0AQKEJiF272t3zYKvakreSl6pYxTz0rMhZQ0e1SaI2igTcErxuHxXEWKEvBgK/oWsQttDq85YtvaHinnoqGn5R1ofwlTrJdK3wXKju82zAuJMnXsn7Jf8USIudWcEfZ+9SOSwsJWjpL1u6cknxm5NMdntc3m8GLfxrOElGK0NJPEkUhcAO00vCXi8o4qOSsW/QpeYWbvNIRPvdJxaXT04nHQSQPmawPCIdVUxLf4bf3cZ2uxE657V+YpxRy6sKsbyuq1pxyxcpO9BRJ0rYItbQUuttL4vvYjWMvMS7NtJOagkCU4VIS70rVbeS7d04SfN6klHDdZqYjw6tojxnNaV2GSbCZg9FF4a4uBSBXarcHJbdsLAQNs5WmMkTJyWpTkJmlWQx60Euo5URRlnDO5NU+6AiIrvZxzTuYlZs3ztYJtyKjd4qSSZLlaNpiV/wAW7FfYq1Ve+eWEQm+O64+VI0v5w45iZGWavpPSWISVXVMiEd+8RHm9ksWu0lN2kBFVZ7unUrE4zIqRWeURcVGIrN4tImqxDst11Ss3CV47vmx5HMGsC9DeLKoCURVScD3fSJDafylisunEw5d6IHcmDVXdaN3eq8vi6cKoyMklwZldaGr5beX8I48dIxyCO37l7Pc7ys7PNSroEVGJP0HNiQkgTkdVVIy1RtEvDuLbhRHNPMJgoQNaxWJS60SWFIbTH3cU1m4kWrt05QjuJRNAEri6e/1b/kLHDiWWIVkdEea0l7ivIxEhMvaO75ceK3Uzm4R+ap9Zc7ymfTnFXEjHjbMtmxa6pCoKCRKjeqW2/ntw3HNipHUlLelf1evqpNwIiaiP6LYQiHVtxUEXSgkJiin3SphaQcwapFu+bDZDXT4xntG9BqNwhddaJbsMPNtJq0j+cUL1t/TqVglMzaq9L+PPj0FCSFwA9wltAiEiHlxZqHkK7zNlm9NtAaKd6kSpLpXJCAkJcu73y8GBmm3XXkWLMQFQj1QtEeblxu3JnK08sqTTRcMxVmnu56ugYiCXLYl/Trw9tFkpq54ZCMRWa4gvb9rpiJrU4W1DmpJnL2BrJ1Tq79IomjHSQCgK6SHrGY5jVVvE+6b3CIDYQXEZYM0PmC2fppv5GYJRM/skEJRk+VIPHaaSR24y3mBJI5c1rVFJV9FT3AyE84mWq7bc1dJK7rSSO0D5rbgMTxzE1zkmuQrfTBVteVgtHtPg5SQ9nvdmNI/V3OidJqhHsx2xVtvYoTphJ/1hbpLXyNW03KPuAZuSFTzAFhe8BYnoOEWmXSLZqsOmqrYSluwfHuxkmjWVGPZBQ2VeUq8E94DxDyMMfeAiAMHJjFvMvqTKbp94K8xMBpMxbTbd9pJeISPS8Q/JiweMK6lGNS3/AMVV/h2mqykwSJmaT9yDxvSsaFrOMCwxHx4HLh0/EiAgVtDFDazmbTN83CcN5ICluVJzDL6pH4CJuqrZ7VmJhHMhsZEbyNEvK0e8YY+0kCSRh72H9v43oQERcEkqruGKwzk2SllplYSIFT2+zhmUsiqpft2YUGsKPcJlesqKl32FoEr/AKICI8MU5ShpR1waVSRSDj9Q9X4Fx8Li3Gso+IrbVaRcWaqbJcqflQn7P9T05SuZUd67eQy6P+EetktoeW4yS3e98eNo9qJbjMtoojRVaMXAhwqUdwal1/QW5UrS8QbcYPyeFojWEfKsqbhY2x4Ok/nwXfNUFbthaSV3+yLGi87WtXiSMxVEvEVBxv8A75YR40SS2Wlaqral5tLqtx+R7vTAdTIF2hgvSKC7VWSgZxmEM8fNnyR8UgoSRqneBcndDv3eXBInYGK7QojO0Ss2iq8ZM/4UgCVBIZNUf06F3KqXWHVgcSkRGpOf/RyoBJLZr+tEh1wDp0tUrOnrxHjTUcylikYaOlUHZCCvEcQkkuN27VEt1m+3cJ4lAMNWJakRrmvoD2a4d5B5Q0XFyTNRo6QSPXRUG0wV11dpDjDszl79Oc4ZxFqzkD1ZZ+4XJIWokkGuVqtqo/ZebBVo/tyRkC9Z0q4iZuQlI4Dbv1lNAkiVQFUlSSVu3XaXUOA1WoZZV9V7V5k/I1CKzhJw8lBlrlyv5u4ECtHmK/aXlxk+DuHbhbbvV1NeMcHvSP8APFFVsmhkOpVerpmlYRGoMvYYXLlaQfpLv3JWjoKpXaSVobD227h5ejAndbVPtiIrvB0Yu6dIrRdC/SSWiHce+kKlcIETtJUdVLSuS3H5rvk8WIJ1F8UN6BiRB0jjq5uDg6UdqROCWlRbdf65rFu6sT+VzpFLNakFnTzgUQqBkSq/NpBxA7vcxXmrBbWEC5tK8/YxYMuEl2uY1LvG7ZB2s3m2SqSCvKqeuNgF5ceOMSUB3LYFAqrJZ7U/xT9V84VYPRdLlu1T0Ff5vw4z/mFVbCNrKrGzWKjydJP3DO5VgkSv2u9XVO47r/DjVDyDZs+1NTcVGgkl6shFW7hJItnEEkqR3+bv8ZirmWh5GtKw4CgJB5JLSz1JJ2gY6BJGuX6K2+72DxlbQ4J1cf8A4x+vFNqz1UvaQedEjxBGgdyZkfRbjwljlZJZBYkXSJJLJbSEuYceHdjXJKtCdkKjq2rbMFFjT9WVBAxaO+RdxaThQhHwWgkQb/2uNHdpA4SN9LNOOo2Z9Z+luk4Kdll1WzlyiPdXkhcOkV3SqkJHjMPZXoQK5r5mk5qyKiGqRX6TmZ4M1z8Folq/LuxoDtF1Q8p+sXFPU+2YuY0EhSL1pTiQulQt3GKqrW60SuG7w8mMpdW51KPY99CGDkvWTN1xSz5V9w6vCrqaG0Pf37NvX1WY6TS9VyDdFqsguSomqkmgQFxgF1GQK3hf4b78OEaljWrV05GlUknSRJKpIcQhaKVo8o23n/Ty4mKNnIpq4fInQa7PVS7ol3RE3D2krS2+5iiJomQKlzDyESIVkJJszUVHegPGKqtQC7mJLZ+PFbqxKj3Cg+q6kQEnBh3BNXt/h2lby7urfgmOnkCuinJIU8k2TS4gTVTS0LDtttvARM/a8+KjUiTBUY9/A09co0DVVTVQVH2zuuvssLmDDakQzqH+ZziHJwxjUNIpaNA2r9dIlSFU+bdfdu6efkDpwPZI9Jvt3WeLF4zQdRr+sHUxEyTF43kLHVqBmQJGYbw5fHd58Ut8kCqJaqKVvmLDtpAOKVy/jQVQeOY0OMkrdgrpL2pB17g2/Ng5dmv00mMk49EdGvkpcEjFVRy+AhLx6TYN4fCeM7Ui/wBJy4Zk8XQRMdqLa3d7xlswfOzvTtM+vyqB1NRK75wgaCESAmq5SO4e9ucFzc2EXFID1F+ePxLRcKEQ1jcVpxMni+iAmlbbtu29fnG/EzGNz9D9JxIri9R5CRWdbS+G3DWNVio8RB4oiW20hJVIP9kWO1hhHj0kkHLYbNtyatvL1XFjhrBQOS6u/wBtoU9WNRvNI20SK6bFX7VogAEKoeXcRYqbyZWbt2poM10k1/8A35NxT6LbriwXIiedytIPGqjmLdLNh0km/BrrqLWjtvJK4cCmYlJh+1TBVyzYpmRgqnINyXNKzaf2VwB7+NBUsEQi7Lcs3bKoRImMvb9JKRjmqXDkpFiwYoEgJq3Jr2pWD4iC6/FPqWq3iq6yLBan3bg+9NRgYFbu3h3qol8mHELxLCaTcjVSQohzE2i+j3N582GdY1MtIzonTDlo0QArCRfm611d/OOkqIB7NuJ0rDR80k0JxwHdq5hcwF3T0o4njTilRMARFdrz+ykqR3YskelJKo8Y8WjyG7mUSBWw/B3RYrqcXVsi1UM3IoJnzCJvVR94rS/cwpScxS0mgtFpTsa7f+k7NFAj1xDxlyWYFq6UXhI6cf8AkjBqYFFwlON11mtyxOY1QldpDwpCP+9johRdWtlTYpo6V1ql272cdIlFcK4vckoJlakWvvL2rN+E/RGxT2SbMQfGisoVpKOHxJiPmK3lwhAZmmBuiAFira69Cregietcsox2HD2k7VQdbQD9KRaA/wC3wEHFVNmrhREo2MIlR3ig4dDb1bb1f3sFvMzjGTBJFOOnZBFqKSZSwTZkw3/q1dvzFgWTn0qFYtL1vw7hUAIheLuRs9kBK/3cbpsCCIrEURicnZbi/apahZZaUnmbmlaPcyroAMtAnCCqXhO4VSv6sXOoooWcyimMDBQ7pJLiHTRq1XtK/duIgIA90sVrLQ1V6lQhYKQZ+s5ADSQTaXtnWrZcdpq238pbefElVNISNOSSjB0/ERSDvyXidd1ePOOwrzDz2WYtISytqjnh1rcKccesZWOuDJQNpC2VCzSs8Zqj94cebxazouPGYX0QG7hkDS2eO5U7vlxEs3FARZM1nr+KbcQkaukMbpK2eDl2b8KJtXLB0+eRMrHRDcw1QFk3SXNX3jQ8HnwH1TmISTkanlkpA4kCTRF02fKkreaWou15PfLbhvS0Wz+kcWskzVavElzAS0mamr5bcIlrKtSeILLr7Q1RI0EvhEBw3gZeVVfJtlzeCV3dEgLct/vj+PCqUCkiXSmwQKi9tKNm/pUxnhhF2cToAlxPFW66txbNA+oRHmDZjNJKm8KwrUhSG7cqI40N2vHUdJz8C/KSZuX6TPh123rE3i6QcwmVnJdjP7d7FEsLN1AxXPuUEnQlZ75FjqltclSiS5RUjF2K1l2L0Gy6EhCoOZcpAvrSUfxSS7V4FnPaDW/3dUcWCtqvOI4pnUNKoKqGqYAgkaEe3su2CKRpEd3LzmWJLIGnKYYZf8Tk3qSdRR6uq6cxE3pJX+BUlRa6oB4TAvewxryrKtkY141qWNik3xJAquu2ZmapGFu893C7wt+y8fTix8lQGsiVVy7CNJnVkCwZyEHEuGoAu7KS4l0xsArza6QpGG8ulJcC2dGMz1NIxTiUcI0kFQqRYHYIy6oLuC8liSQWfNgzZfxDw6imJsnjFs1j25kL5y94NJmfiElRELrB2CCvvYptbRMVPOETpdaXV1XQaqiEWzVAr9pmTpJ0qr8fyYMad0xUYranZFYVDTOVbNGIh3y6ji90qUy1ftktXltSFJIg6R3YG+dUXKvcwHAZtSVPoFsNhxsu1EFQtu0tJxwpnb7BYIeTVPVK2oiMKj6zy4bikOiLwkFI9dS3pVQSQS3f0uPFczgGj5KtNavI0ZCW4cG6soyb6TJcx8rgrD9wPfwZLsEDHtVD5d0/ldVrxEGrmnKaeGqFigpA2Nc/1Wrrq2X/AMl7GNcLUrWwiSURU5xDMWYgKaCqC6SR284arUjP3jL2cZrpVXKhWajXlL0wlRK2uAg7cw3E6p7RAreRLeXSOD00hK2Qhl+Izv8ATJkCCpC2aJIs7tn90ztJUC98RwTRyjIRL5yqqDWd81uMZLLMJnPJB46M9JKQcpMBIb92kkAW7r/FsxV6NqiepmoI9nN1PHy/egIuVGaqTpLwKpJJETdUubow8nIarZmWkoRxTaTmWcFe1kFagapP1UuhXVSEj90jxPUfDZtQyzGHm6zJmikWqbFzUqvGvALoFVVqqADf0hbgZp10y2q0hBW7PbLvOOeplZhA5wOYxNkka7pRVJJmC+zqIFys+DHz3ZuEYiqHDkakXnnxjufJJEqOqfi4oR6/Jux9SM0Mist8yabRYVlFO2ijdI7naCuk4QP9bqgWkry9QHj5yyDCrcu8wnFB5fZlyC6KzgL1ImUBsCp3ENiti4gBbeoxPEqkSaLUp0xCQaVdKmqjMI2MWjM1I+JZoGlqFAxFjXZdpAVt/hxB1VUE3HQ6ITL9yuo771q2Kko5y1s8Y9wW7d48EDMzNCSkqgjUac9ZQrxk1Bq/uda7XV27BX/Sl+1uL2tuKLW2auZEIKdKpStSoKa/GA+9fKoKrpGl9lcfOIc12FrBGiTQjnGDOWece6CTS8YtKabsQH3UtmK++iKJX+rDJSqHmctR/BgjPK3zUfkNs3PEpz3K1Mqr/wCLiryVJVm8bqOXUCS+qWqSpOrjK/zXYZNOd5VEKJXY7iabYZrKLRbmVnETjlUn4oNVRZoNLO94y9IgNL2jEMVH1bQ3GOjia/IWpunFugzV0vtSLbZ0+D3cWDsoxrmEzcFy/wDWsY1SZqg/UQSSJqLcwIT4pU97UdwjqjcY9GK6+o1+1lpZswptsLEH7gGumuuqlpauzSVO0zHzkO7FNyLstyOsY9uSeJx1JDzZiyWp0fUHFuClHxblLLNq8hqNipWJmHgxyE62auikRe3bBHvyMPYJKzAdcRbxqIovKSLU5RIVVR+W75sXik2DCZ/tVhjnLf45wwyIJWmA3HpCrbYW34MJZAn9S0WUiUjlzWa7dEJFaTQLZdwj2NS1fdBLYXv4h8woaSo+Pbv3ErUMMi0XAVV+MavjIz2gFtwnd7IX4mIN6wlolOViGaqqZ7R1HTgT2bb7gEsUfMxhJSjGPWVqqMZi0dXBc6evD1fZMSwWJakn1mauTjMH+BU2DqHfOUepR2gA7PB/Gt/v4qJTzN65UYNazkxWdjYlFpEz0kkvEO6/b4t2OWLCYl0y+kE8u5cXbVWjVdDZby/YYjXVKU8/eDDqtny8kCRumoqN11zEwC67mHw833MfcI8ytEdSTZxz9XWWa5kM0CAv05IXfeL7mLxRsdVRDYrUlPVDHgJlwzZmkqvfZ1K6BKgPv4E/0fRGQWB/JEg4AuVSwS/2uCVlfHSoyTiSpmSXVcRjfVX1VSVSVD9USQJFff4cKnVodrSlI+kn8cprVCtJJWJauoxFCzfy2XtcSUO/Wjm7g4atpdB0CRgkLtWOQSM/D3o8uJJGoVhfPPXEIvwshe4boaQKghtHlSNXYPNZvw1rKuabp+HdRsJUjaQkgvSaxLFkKpi4DnFfSIrBG7faJHgdpo3diDdqxAu0XNFzdbN1nD+r5KDeSl9qXCSMRw5Bb13qid1+L88latcR48BWFAKvNK62QkWton4S0v3/ANzFFpGlHMpTsXPOmySSj1Lc29V2kJ/tdURV9g8PMyJRnl9S7iVi6ebLvFUgSVdkgqQpGZCNyo8hiG4tp9PPi9qmfMoxFDP1dJ3iUjI0tXy7pN2hmzQbFMh7pNCYEQH3cQXokEUJBxFVrmhT8zxCBsktBurY2cHtBXVBC0vitxS5nMGYZvnEahGwot29iCWm1tOwB2lcBDz83v4nssZJhUspKP5ZZsxWimBv2qAv1RN44DkSHVVK8sKXAHMIRWiATCmzHdqLsXC0CCpNEKdpZV41HQXJWUVVDq8alvVdy24YVY3bC3RMm0DH7gsXhGRKuBAD5vq6pezuxW3VfVbGrOGCoPuMVIFV0FwAj3+Itcr/AObis1EFYTjUpJ7CL2qluVFw1E1fJsIrPlxNtie5JSc6NacUzSVMeupKdYVtIcUreDhN63XQSED6BFUR9r3MI1M87kmzVyuqmd52pDvV5vBs6y3YQytlGEcUowdUPwMk9dAa7tk4QVAub7cg0rLD8IEGLvNOuMZ2JarbbfdxiBXezgp2kme5Tpq4WtwoVqU/JOEUzi6bklxAPq6bYFVSBLaXRd4i8/y4Rp6LqmbScRbCipdyrdvV4VUrbOkSHZhu8M4lN9FHKThERA8EnaokaRmRDaJJWgfNvuu5fjYw8iwBFTiFppMbuZAwSAg9nAFXTA0WpaakfddakKslRQ0xBNVGy7N9ELOEtIiWtEhMbS9zZgVk4+vCzSRHUS724R1bfZsxcpImDyJkjjQeKJgkBGLkrj5ua4MDtPRJ841QVuBINIivG0Ov278M7MPZlFIOIpSGa132Kols8zAkn4t2jl0yjisbOUlRMQMw70VbbPd58aoq2bukBbP4SEXbtR0ku9uNC/qK8bsYi7LURPVDXKzOHq2ShUQa3yIx6REq6b37khVD7L2r8bRqun4uJbsJF0t6XG4W4BKOHhK3+0N5n8WCCJ2LgCsg+I54mS/WogMe4ct/RH8QaViBapaSnwJbCxFz1RzzJuxZuDk4pRYQElECuAjPxd0rZ8uF5aUiqNURqGQAwY+aOVV0vZHheIu8G/A6lKybS8hbGtheNdirol2CTF0qkd32F5JKhs8g78VaoR5l4RGUuVPs0pypIGaZ+rqsn0m4NRC5tFt10ry8ROGvel5RPEKTKpI2iXFZv3LlOUVA9IlaeaqvUA3XmIgSCQX+9itzkk2ZVmozpSsxfPgC3689SXMkrNhCKq++0NtqoDickqIzFrmk3QRc9J0uoCQJHwi6S6S5281yQqmA39IK4Z0Zlm6lFyINLGNXSTmclnzn1k8eKO1QLi3qQIOOnmSAiAPYwRsiPS+9ObdK+mOhXMo44+/hmitipBaV533dAbucQwO6qpKSo2onVPS3fuGTi1UhvLVv3ao34IGQiFW+jM2F9NKM2jxwquAq8SBikkHiJUN6Wy7diisKQokdi+izoKuj45VJEKu9AiN1rFSJ/wDsgsDt81qotN4wByTxp3SRS7pIbg8P1XkL5MEN5TrN6wH0Lv3RJtytIkHmwv8AX3YF1RMAo+PJakI0Xjh24sBWQmfWAbOgReuh+Q8SqZRb5UupY6k9gqkhKQIfTmHlfOFIuLw4+JZDIJGl4bWW/wA24LsTE12gMnWLkYyHqFFq8S+1aS1PyKRcvUaoiIe9hbKxxK1ZFOybu20a6anpKopLtVdTqvEQJWzq/S4/MyqDzml2qiMDXNHQo82u+p9Jy4s9+4Pkwcw7U9W0jp70f7qghYzdX2v7Yqk1BnXSS7xNFKSbOdXukiQfhYqfg0Lr7dxDd5MThVHTbWl2608/QFwe5KPd66/DBby90W/l6rvawMOIqGJflFfnwqGSkBtPQpWkGYiVo7+/4EQu9/EutV7+iKNcT1LwldPlHpcQ6YyEWKrhW0936oLuq0DLFFJU5R6ka43MNKyHnQvFfnSnEYtnCs2ZkCqHApKpJKhaO+0+q/COU8zCQdeQcxJI3It36RDpLmlpK6o97sEjP2RxA1lXL/MGppKsHQKtlHq92kQkJpAG0A3kXhx1Rq9PIVJGrVU/fJxfEAq6KPFLXHwW32hz+bkx59zKOSMHWMV9UssZGVSpF02ngaKbFTbpIOgXtb7rEiIOf3cQYQL8E2qQzAqqEveeuvaZXcgco/hxDO6vaVezbo0/mW+TQkI69CPQXakS4GNvdK8MeqXvlhnAMZtoZNI2rJFXhzBUW02zVXdWeFLSSCy7l5NuPXW5edMsnB2pZSMlSyMVaakk3CTBRirUEvrXCHCMmaCpiHsGJGY/vYazTqQSphONhoFm2auFTSeetm5CkYW82wh5uW23FFqJXM5KYsbvmgs+lAmr9IgC77ISBBW8reorfYxLQcDU9QMXElMuUEGIAYG2VZrqn7XeoJK/IPkwtzyROUACOpC9avGdPTibCWqqPiIU/rAKxqQaSB+EkrSNX2TxlnOyo/pNXDozzLfVU3jyAgdi1NsaXjS0tvxDjbdUOIeIRCLm6pcG3cXikTaEdJWgFv2pN0CI7buUsYizgiISNnHQUzDzjaLVLYUlHLtklTD9UqrvMfcH38MqYuwipxHNkqvLP0VWd8lJL6IX/bn9l7NmIGDsSbkaqy4pmqZIEPNZ0Y6qp0Aw/GJNrk1SC0dUhGwvFZhNjrcKiau0jSDuhO4Rxe0MGpKTpalMLT0qQiilKuiT6NQ9+ImWdSUooiiOu6UDcaqXQHw4cCVu8ugsGaNqGvK2pUoeUzlpilFHqQik0d0uCSrpvdzJKtWZHziXKd2KicioIArU+ZJksrTzkSVEzNRVv+Lbivt4FglIIrPXgpIgf2SlxB8ODo+yvzWcJOkY7NyHmmNtqqIzIobPEYOtI7fawPZKjJ6GWcA8rimk1m+4hQm45UvZEQVK/BDDh/ESpilmpMOHHVuG/wDViGJRirApFvYOXheFRXSD5CxAs0jFEQJ5xJfrC23YdJ+DECVwogI1abKgZSNjgKNayF6WkTgySSO/eSSWrvKy0TMhLn9/AjeRcwuQ3ouVW5h3Q6BWFg6UnlBFVfQaNQuqtbR8gappINuKYDcF9pmRKrpKh7NnvbsSkfkjmKUkMbSWYlSulrAtKINmukIdd2k+v+QsL2nBacJfS1isrv4RzxXcRrknVvKgVpj82IpPj+KJgZzzZYOcRE7xxruociKty8lhlalzSqeNknQnpPm1Kv111ffBXZhi4poG6AvC7WYuXQF9aRmaeeJLoH5b0i+9hq1XQD/3+CDKmmSywtG8OprPXk4Q+VqX48W+l2rBdQXjLjFSDZaqqH4MGyYjs3It9ot8xWPD3HpOXdPvEAX+BqWHcjRuYgQ6aNX1pT8MKpWm+kOPQaugMS7oROOELvfx9OrzQ9CkDGUSGDxVEx3xSSHs6u75sI67Ym5AkzSHfzWXYkKigVoF0TZWSj5BE9yDuPca7df2bxE/jAcQ46wjYG0TxGavXmqEC4eWTkqk2anzKC3EjH3bhwo3yvlawdOkctESlU24ARrjtP4dUrMW6LyWnqlptGp4F+zVRVM0l/7X5FzoKh0kSTVUDLdiCqTJOtYiAcTaVSU+84cb+GCmpZJXm5/rEcIWjzc+PjOI4luVZCoZxlo5ZOuASrld5NAQNyiRYK36t/2V13NhaoKQqenBb/SCm5OP1b9LiWqqV1nPbf7Q4g0yrCbfIozsRGqrbEkCZRzBmJb9l1ghf7w4kpaIkot1wEozJBZvzJd0VvvBgkyKe5VCIqJWZrD+tL2sV1mrMDUhNoY1V0zVAFxSb6oiH4MWRYg3aQObsVePVNWor13JCWzVQQJcTL2tu/3sEtEUSUdMhRQa8SyTURVbJEV20lUjIhwzUaySroXIvCSG7pS/m4eC3PTEwklRE+kiP93DdQlkisFbV+b8OEuaS0pNCot81q3jlFkqgTVRPaKZCI/u4YyDqbi7VjhOJuLeqgqrt9qwixPPr1xT1X8KqXhXjly+4liAdIRy7gliZs0FACy5k1eIB/qhH5sMWCLHUaVPtBLSpuJdNpFH6r3Tq2/UQJwvs8FqoliQRVqFrdwsw+QTPmtZW/cEcVmDSkpQlEYtygSiXOJJPLrPfw4FB+LokSbEqpdsFBVUcfHJASsaEYqSlp6oR3upV8v0XKJXfixQ66XWl025vO/0h5iO0/k2YuD6NmECsVhJXzjcqRfPivvuJFYUUGY+HTc2c/tW4mwUCkq6loSGKH7EITUUN+bxAQHZoJAvcfmvtxzEvHjWQ1ol4u1cHtuQ7rZ5t2zGh6gqdhTlCsaMrSKyzdPtBVJAkGpjIxx6vMqqkgKSvKXWrzYr1TVlRKUO3VpUKe45vpBchAgglsHfcraThUj9vB41JlpikBUwhzKLjXgBT7qKViaRlZBY+/137rXQ8wkDwW5+8JYgRgaeFm4ReP5xs8SvILo5LQVDo5LvN+9hw4Qfpa0w6eUZGNXBgkAoJA5G8x5bguV8288JoqxSsb6nSrNCXeKnYItmFwK+ANVURVtxIfQMl9kClMp6JjX9cMQloeVkEeZJBBqZXH0XWDy+z1kGLNmIzc0rVkhCfQxCnE0j1UmMvHELpID3br9+IfLWOnvzmRYRzlCFFV1oKuxXX4VJL2gV5dv3OXnGazIaysNUjgKrjZUScKmq1Jd1r6re7YYkZKmA2bvtSwOe5H021VlGWMis4mPuPwstn+ywzeSizVPe8bCPh9VgX4cdKK03uMmcnqfyofu4iXkjTyRfxNyPtOhH8OJgiHR0KSbxslM7wCMd38g2hZ8iWFE4OoYFwmasDGsUwPYqRrpb/cIcVt5IwjgfqEUS/lUdB+7huJm3URcqw5J7+YRDaHtYu1oOOpXZ49eKuCWsJIjC89MisK/r33YZorvEiIy1S9kcM0zbERAgirp3GKV1gnZhHVBIiAjcj7+KkWphGSMVBDW2+ZLCnGAwTvVRZqjfda5ACD+f7OIlm6tWG01Sv8mHT7+L3mZXXbSHmxQe9QLYr8ocOqipwrAUFOgRapNurftSHDym2cU9lGLN02Fs14gAdKiqQmIddu3mxW6fVNWPRPRVTcc69ohtP3OnFkpWSWiKmYv2QIawOgK5Vrq9fsl9zH0tiqFC3OpaSzGzWqOsGEUuUe4XAGtqokfDpCKQFbdzFbd72KjHsHMC8F5w0yxWDcBFHAr9/b8uLjmLSr+arufeCzCT4p+qqEkkqVq9/XvV/CPs4iouBnot4KPqoXKnSSaSRaXntMbzLDJt0YiKUkPayVmTzVqd04EPpIN3SSkS1ExP/RYayUpWwko8m/V74XZnZphpGPtC3Ssw4N/VVWy1j1gxVWS3ASVGsFVVTDxglb0+1h0UW81FESRkF3gX7fUKSCRB/JGWz4MfBIAUyViylSmGVLyVSMoSN+tr6Wg7DXCxILlVbVRGzmEfNv3Y9z8yy6V5dIlaN/gxG0bLVgRKQLoF2zduJrtR7q4fGkKSWzcJEXJ7+JxR0bDUjZlHu7gVISStVHb7N4ezfioy1opvYuqwZMGtOxpymlwqonpcTxC6SpgVvdKhbYPlI/BihvGaLpiowaxseKN+uIpK/pbP5XFqzCbrVA3YvwWeObL0iY7OFagA8yQmV4Xndt83NgYvmbxkRGlFOU1PFxSo/iHHmta+OpGWYVC1WE0oqTQE92qQbcTFIqyTp8mFQzcmg3t3qtnDclfhVVHFd49+ldxEUzVHxOTVV+a7EojNzDVvrNaSiC28yH88vw4vihhVymm7ZVuTBdZ5LpmkroCu3IjS81qSpWFzeHFdh3sIUhGtnSI3GqFygkZaXv6pfDYWKnIVVLrkLYYRs0svE11DXIlfa3YuFK8BxSbxWmGMgLQ7jJAkhIbBu2EC4n8mJNNQHWqidmStUXFmkKwMnJKtVT2tib6tvgIStv6runDGDdcK6TRdSRNm6qti64oERCF3TtLBAo2Unl6d4kodJjpKmIqpOkkrzPxX3KmPLh0s3zjEW60XSsQTVUDNK2WZJavmtMt/wYQ4ayIU1ERih/WDWiXROvo5Nyq/EK3gvIQyomO/l1QtvL2UrMUd81NIiikJ5BVMiC1Mr0N/smNmL9VVQVVGzSbCZiuDcaVxiMoNph5SBWzFflKqnpdEUZubcuW4fYJO3uuCQe+RYKIyUxaE1CsX8akzTbEFylu8u9578TSL1mk3dHoiV4Whce2/x4cIrwjqNUN1SrEVjGxJRsa6tpgf/WrN3sexj05T6zeLRc/RgmJBs1/Wn2vumWJ5s17KgpSQP+DY0LxHSQMzt8+GcW6bJaerKuUrA5VEtv3cPEY5zKNW7YQbawN+pwApfFdj0hRU8zTvVYsxvG61tMsy/wDFLHxxwRHUqop48fg8LiVXgqDpJDcIgOy8v3sNZCUjV5hMO7EbUg3cv2Q4hVvVrMuGecWgpZtERSV+ZK7Cbd9FLyFkTNq3DZdqpBdy+G3A5a16SeVIhGyIqIoRqCo6pnzAld8GItOmhSdJtvUKTYuoSuuLd5yxPR7UxWIH8lwqbsjNIhbpKgXtcphiUlKDRbkmTWajnyjhDa2/ixCfiudJCB+6eKRN1RJUtnD045byAKwg6yIpDcKpbdxebCnaOQey1RwbSM9IjFsqbb8GCgFqII6qu0tt5b7i3ePCyLBaNj3zklu8M7fqMo1Vt5v0QEVmJiuvVkoSL71WyLVh0hSUdzBNlxASIbSSAdI94FgrA8WqkHC9pEUzQusOD4Vd+yTl5FyVH1AdRUCUk6SfAIk4QdDs0rrBsVSAOnmDBKzGyhpWOaw7xXLVtFCck9EyRlFR7oGoly65+LmHl5erEp2Xl3bmj1AURppm1kCvSJtMqgapjcJkRB9kW0Bt8vVgg5lU4i9g494qbxBu3kXaQk5niHV1WpX966EQO3S5RP8Am8/udbVFeHMJRl/1WhpmGhoxFZriaGpxeSYh6lJUeMstUVIurZbZb5sdp0LDrxjR39HmxESSX2K6u/l/a/hwV42g5glma0NwbnhX4LgRVBEKgW679bittaalSaC0as13OkINT4ZfVAjEeW5K4PnxS5UVYDuUxFoyVQOgEW6cmDNtIIClLOAG1cd1pW279+37L/NYi42g5pCUFELlFDkVQAVNIrrCHy4K1TUbOpPp1mTCQQWdLmqgKSoL87VC8TO7Zuu9r58QCNNVUyk3RSLxePdNXSpoCugat52pXjcldYW0cWY1j5y1L4TQ6VQpSDBg+jmz9mzLuHSt3CmNyWqIgREl5hK3b4sM6ijoJJFhwcU0Q79VI9B0aoF3XnG/qHBCkph9M8MzkaQj0pBIXDxUi4+8wMht5NUTEjEvDy+bDKSpBm+jWPBsWb507X7pRsq6EG23cKqSqV58vKODG3XcIkaoIBVIp+NeSFTJxEZEXFwZK6GqIiVt2/Zu/S4fLxsil6RsStTBUhtFyRb7vMNhYsVG0lU8Nma3AqPfOh4VwhqINVSS6bTG8dnN1YazSrlg6dNn7Ryk4aulRNJe3V9or8QqXXBcGPdX0RGKqadPtpGO1nURrlrq9KG7cXlHEG8pcG8mt6UooUBFm3vuK3mVV8BeC0cW6npYH8Ot3TsRSdK/aWkBHcW1Kz8VuH0bBN6mm2rJm5bK+lVm34oRVK9BLXXLvdtodRbbtmGLDtTg8bWCoIQjJNqRiWdFx7GqlabXXlJN7pRoikCqTr9UkN/7Ubuf9F4LsVmtq5oFhUxBmvVlQ1pMAWkrDU2/0mTU/CTr9KX8lsw6z5zg+jUCxpuimaUcs7a2sCEe/aslS3qj4FXXN5W9gdeBFlbRpOnik7Jh/FfshLdcr/Nx0NjAbXTa9RLMmPXX5Cju1HJ96SZwk9mzQqxiHcJTKD5qPumV/wA+JR5lebpQQLOmlZAVfskK2pDg9X2V1Uhv9oDLA7FK5ZTYJb9L5MSEPXlVQMkIR0kXCpJWm2X71It3hwAN+fL9GKIK3td4lZJrs1zzxvrBk5TkreNwvqJrLhj9oUnV4YHc5lu/pISCSZ5rUun/APDCDF83H/OpEIfJjUk7VGWlF0NGxtfUrFNqoqj6wblJC3hfeDeHtYZtaVq1vEi8y+zXqEhPek2XkicgQeUVdVI/lxaPFbYFF0SH7Kl5mdjICEllxpILtxRZw2eUA6/IX8SmEHkeQf6VKz4TxbU/64dVqL+Lh2dQsw5VYaZayB2fyVxK/JiyVJnTVUN60OqoqkqsZxgmS/rWDSFVXfaA3JWhcW3o6sSsi3yNdUpS9WVVkczjZKpWZvyRp+UVYqtkgO0DsSsE78OuusGAmRDq7woHKdDby+0hY8zclYtTg6roycilg2GqSThsrf5xPuvkx03zapV4mnZUMgktdvFykgqH+yxeGrjKLiiRpXObM2iVkv0UgXHNR8lgXXj7eHn0FWqYiCOzXyfrET/RztON2bov86kOriWRTO8o/JJRJ98NxIytqWGjpBq/hcoI9s8aqgqg7bQx6qR/yoDiyVTXuYdSIpnXENGTKI70kpixQEvZBUtuD/odesI37Btxym1AlBRN4REfKI245O7xCzj77IrYDavaWUVJWm1SHjMostys6RQZEXyFfh4nLxqQk5YZLU9aAapKtI673isLGmpKGiriOUfNhG3lVsI/htxTZCnskuOcHI0wxkHrdIDNbhUh2qhd8wjgR/jCkY3MipeaC/3F84qfL0SubcxKs2GggsvMOEkEEi2gYq2JAPP1YKNcVpl7LpptqyYT3q9uR6TT+JoJeyVvlxp549yiYN+JYZe042FJvqiPBpEaXk3/ANN+MR9pyJl6laNFIVk/lfrzhUiboKq2DaG3y/zcM7NfWLzcRA24+0p3WmdZo5iW1fmZ2ZdB1bRQ09RbyVtSlmr1dNeRJVK/aleA8glbbu8uKxx6LWUI0to6oF/qv38D/L+KfRct6AlY5yiQrpem1RIxLbcX7uLg+ABUsC63Ye7mxrKxtunLKb2rNNOuu9q5uXXrxZBZFZAO8SZ2XeKwSH7hYseXouZTMSmUUgEVFZuNSAtvPrpD5cUh0AGQneqJBsuHq8uCL2fWByOb9OD3RItH7d+rqDckAIKiRkXs7iwBUxaZJ3uotjtXRFbJZhJf1xFO8eiqKj1q4cbktItnl8W23nxkrOKUqT1+6jXhvohjxCp+rVZglQvu2qghtsu/oWNZyeYyNX51UGtF04TIooXDXixIi11VUBVLZbfzFs34D8HSlB1upVEVNs5x5JSDg+AcpJOLxVut0hvEUj3+NWwfDjJ2NwcHM0h5R+vFNbgJRisw39fUeFE8SFURDaEqCQimurpslzQtUVSVK8PMls+HEanvxs0hRNyLnYKEzGiXlRSXCN0lQMV1FRSBLz6tpGA+UQ3Y3hmvEHnRCKVfl1Xz6Zg0G1zwlJsmzBAw6xSt+O8REfNjPXYUlqmCZlI2k6ZjV1kEjdOnbmZcM0tK3dqpAkqLgR8JYmM4M1KVmKwGRoVygxYmOk8XGJasVV/HcaSF5j7d3isxlrgOfUwFGtlHFUcmEOwUJnCVVKjJKnpJKNEjIiPbsEu6O3d7e3DxuwlUHTNtKOZxJFV0A66kW4QVQcBtsSsFW8scs6woBe5m6kpqKRDvS9XvxVVX2j4BSs+AubDMa6tmiZ0DJSCd46pru4tJyr5yKy3b7nvYsBgz5VdMVYE2dcunD55DVJmChEgqaTiQ+w73zKmqN/TsO23w9GBjPRucC8ozCRqGVJNZUEtBeZ1weAe4EhS3gdw27bCDFoblVriQIPpzUrkgE7f4LVIuHu6u/wBg3+Hz45UVeN1kWbqpJVBbldL+tHAiR9dyGh8t+GVMJtIZ0kI8xo1+yqhxxVK+qLBACS1dfp6lbbLvYttxTZK/TvvIfZxes0pKbeVQ4ZyjZVmTcAHQE7Ui8CoiGKPJA5JEtJYh9nDBtCuL1FuL13TNuA8UYmSC5BuGwOXye1djQPZlgddZ5U5xsg5HVNBUWyqCoq+0krvD2rsZ6pJNHiFHKRipJNyA0EFCt9vGsMhX9FhTqMYkquhIpXk/FGU0CVK7m0jEdvv4zvGLxtULmADuWj4WaEqkSLlRmat5INbSgZViIAe7SH5twhhRr3pCc4Euhf8A4WLBJdIfvHhiDelBXE/SajtUh2F6ZtK4viuxa8tXLRjVjR2vUase3QLZqvRd6pn0aHLjktI0JOiK6HWVBgwR/n71dmzapaYyvkAZuoL0IvSP+HGynebttvDWJbh97mwIn1FSVRw6iMPmEu2JuraqugzSHXVuuElRu2dXUWLZnbT88vXJS8bTDoYddK03zFF5GuN+07ytJK7b024HdWZfUwaTU5lZddw3CzUlqjPVC/cFxaWNVUELRC1KMf3EsnbBJ0Cf6N38FZKao6owp6Spupp59Ls3Z666rRnYvt5A5rASHcVoAPtYq62WWXxMXTkqPpMtIjXNyTVBddU7/PcfzYkcr6McDLFIZTpKel83uSeO2b0JBIfEG9IAE/aMsCftAS9Jr1so2piHp8eCDSlkJRiq5JV3eV6oi1vAAts68FUlO/V4wF8sPCMUTntNO6mfpSUgvl3leLom6DyKbPzPVSTQfizK/wDkg2Bb7OLLEvzVmvUrh+U9IGhq2uXSRKiHi7oR24DcbAzyxJ+l9RMWqzcBYu5YUS8XSBIukS27vewS8mqUhYlq4WawtQJOGu1VVOJXjRJLwiCpEkr7Hyliy5UcKUsXniL5KOo3xN+TTIj8pEduxJIkxSbMee0hsJXZ5d2/4cOvSxWtE1W0U3bXWmsTPamPlHmLEam1YJaiyoSo7u6IkvvFiZpkGIyIuln7WNsEiBxKiSiV/htTEt2OaAJmYitU69ktE7FT1Yvqmp2mk0EK5d8JIgPoatVolVBsp4iuNcvhtwEHCUQktrRIUq6WD7cmjUUCE7+UiSuv97Gg8zn1B1LRAxdcVxC1NJMLTil1WSRNmxmG4hG+4+nnIejGUY6iagOVcO2NE0JMs0vsCFiQkv5rAXKz5cdDpWGTD1v5/msNSVbuAlJv6P8AbBHGjVnSsG1Uk62VaPtW1jFQ5rrrq+8ekI+7dhvU1Y5ipqvqcRbT7thyj6ZGb0lbOm4dK8MV7s9uZ2na9YesKajqLZrKmLqTMEmySbe3pVMrvLaPi34mM94DVzBdVDDU3Ttbt1RNRK6oONXsAuYiMtv8kA3D48XdREdv5+kquv4dYyjH8/NUYJA6Z8euweE6VV+yi3qT4ROzqIySPE5T7Ng8RJy6cyse6abAKQbj3/s3kVgh8eB7GySzWPUWqOg6jY3iCvCMuKQ0g/ldew/hHlxeKdqNzUsO8qGWp6SiG4fxUpDuDebh71K/7UenbgeqpXWmyIB/P80zbrGiIRl+f5KakEnNqaLVyKl4mKQoIBf++eF6TayvrVk5jHCDJcFRSEnrNUtUvdErPjxBSVUQKq2iTB45E+QVFbh/meziUpWGh3TriQRc7L1SFjfdffy81gD72Mu46IakydLpaLUqn216mRiQiYKWoWGdvJBu4/hZ21dKqpctmguQpbvLjG/EM26iZukdUUvsiEbbcG3tGVRKylRjCPIGmmybcTVQXZXcYKRlbYuqfVtHbZgRN4ZaZdC2SftWxc31l+gkG3zKkO7HU7ZjCmBc0fE5I+dmPMimIl4pTzOVXpeYkDBIHaaoIA5u2gJcyp7yHaJjg/Zh00+ov0rP5+eInbpr/CMk7aquUhPaQkIyS6oGNvgAbMCXs/vcwoaPGm6co9jULN3ftc1U1ZtVwLnJVqkvYr7RXHizPqXqGEakENR1D0/NARpOpCNm0ieoB4UjB4kfxl7uLXXQUY61R/pk/r+QRp54/GTo1pYqrKSDcI+OZgHWqzbjpONnTtuus2c+AashAyleOmEDMKsYVxLaRuUiSZ3N7xvNBAysSKy6wSV97GmK5YVTJUCxjWOalTPJSPMHirRJr631Uv2qSS532nuuuLAfp91RiUwizrJtJs0TA9KUi6S4NVI/MN3LzcmCmn5B0iq8qC2xlFVdA5LUe0jVFM0J9ZqJB6XLxNV3d6FTuBIBBybcbOXb4cVutK8obM2sXVTt8xzpxk3Q9KUlTtUQ8c+IvQkO7uHDnVSHd0hu6LcVGN7Jjaj4BvmbRtQ1Lw7VIZEpKGcJM11Urd916/g5/Zw4Rz6oarVG9MQLeQJwkG+YdwxS7wbevYrafvDZgx198WoiKCBpoimm+WdL02/r76Z05SsLNQJr8QwkI+kjj1WrizaKQ6RJJWbCDeV2NIytUN2dNelGRnKsXVkBNISXfM2zi4tvKYpKlZ5cBqFzGGfqSNol+5d1YLqzQdtotWKtMP1qThUg95IkvZxbqgyZm6VnJDMuLm2LFibMwfoIRCSThe3/AKYZFYPlx8YKpASyxU3WmNMi1ISykW/XlEYeep6r5xuDoHQlY6XjhDmDVFV0YBzcvDli5RL0AmCiqeyxjEB2ceu2sEyADHcI+rhMyH2xxWY+twdDezpKqFSbuOIbuSkWrwmt/PpKqkR22clhiGPPmUC4mvWL/Kucnot2qAaseQa/PcZr7SSV39RGNuBmCdkpui0nfaFzmzJgodeSor05hRKIekbl5aMcIshArR2ri5LfcXUHu4EGTmesDAvFKkqFhQ76Wdd0/ezsy9dyJABdPEJKgHVymONHZtZTxtW0K8iqLqSBVmG5arWLXFB8OzlSKwrLi2brduMF0+yq2lZyWo9WmIhV8k60npO4MJBw1s2mY2CWwObFtW2REQur4xlGOlGCe7V7BeoFFqfy6ooW6pfWBJlxgOj5bxsSS6OkgLETWVX1aJDwuT8Kzp+TVBdVpEwzpISVDqJDXsPf+tDEbWEki/TbxU9NxFRyDe8zlnLrQKwLbLRAb0i6dx+4OHSxdoGUeEGXdVVRJx4JXiMJPSS5JBtvEiAvH5MCtCAK0hUHOR2bVZQ7hn+YFs2FUQcesG1GpM1RS8VwJCYD7J4FdXADLh0XUJGR6lm8Y91rmftd6Vns4s08rm7CSjoJRaoReODPVJySrkiPr3HvuxU3UW5ZpphMm5Yi43BrxxbvPvHfgxpRNFDs208xrKJralVTIY2Yat+PUaFqyiSTdcVQ0mtv1jvR3iJ34iZ+EZ0/VEpT3pkZLh2S5g2UXbm2XXS6VSQPeld4d2FMt6SBBZvmvS8qXC0u/SNeSlIZJBggdlwD/HNUyItoCAbsTNeP42s64lq7i3j5z64VBcvWAWq32DeFxleA38g9IeLnwJdCajMk1sgu5pR2qsNwbDsKScin4huI/wCfg2UrR9Y0aLhvDZkMYCpgS110CXcIOhblbZcN1hiW6wt3Ke6/ZgXwdEvKxmG9PRz4Wjh0WkKj1+gkgPx2/BdfguDlFmcyeDSTqrWbONbsjQSkrHHdWFbpIEZEYewJpXeHCdiJcyb3J2AwU1StOTysGzbDXLzh24GqKbRI0khMyuM9LSK8vNfim5hTzx/WEHQ0pVUrLpyAaqseqIa94nc3Eu6EwHq23cnLi6DlVVrVG9rXjZyKQgKpNqcdPDK/xCC5Hgc1Vx6841Rq+V4NFo4+oPV4EkFeIv8AsrXCt4bfDv2YYCSQl7JKcFvKrunDZKYlWqZldwxSi6Rq+1pJFyYD0rJxsZXqc3NvzT9CToxZig6J8qurdbpLjtvS229RFy24IslOSQvBc+tZyQWst1F2t2zy9/fiupyUa8qJEHskkg4V0hV4mB11V7D+y1+KI0tns4upz5VVHWqa6hH7B4swfgkKySpiqldsA+v+nlwZuzU6rWmqgkqhpI2K6bdna/ZcZpulUi5jQSAVdWzm5CDxYpMk6ptrIEiyeMyb8losG6pB082rZ4sW7LaGp57IrP6drt5ETyJCTNLjEIo17x/RK7wu8hFhK4cCWsdHNpYo3Zdy3rSJTpjLmp4VSDZaqUbakSrhXx3IBsO3r3+6OKDmXTNAZcovKwqEG30iVV4iGQQS4Fwurf8AoiMSsG63daXxYfUDSlYeiqph3G1sgu8NVX1sRES7q/aJXLmlpK77d1+IvOhlGxEhSa2aUC5nuLccHHKOZlqgyauCEb7x0i9+63BLGvHmWddHKLSQrqJg3881RkqyYTTSS0vqrQp7iVbL+QiJIQAfAI4ptdVHNxyxIy0CMOJq6pE5cIL8589pq33X7saAj1zeR8fJPJ6TffV+4Jsu30vYHut/ulgT5gQ9Hq1IjNyzZWMcNbyNyrw6pjcJJXaQeXqPePPixsQb5V5qpIyiSp/HgyeOmaUk+jyBU7ybLqlaf+lHr8g4tGWUYzqOtG6tRrSU3Bxom6fqL7RTAP1qqpWAN3PceKq+i6PaPFESm5dUr+9tZDt+NXFpy7iJeelVaRoGu5SP9D/vVE1yFsKlvlBctUvYAixmHC7TUt86fRSlHTpRPZ8fU0etNxNSQLFwewVGU8k2EUgMhAbdAg23W3YGNWKvI5ZY1c7xHS5xSlkFQ+IEBD37Cxbn0Y4kPSjSdcMRnF6dVVahpNXSYGR23aqStzi73x8g9eKnmZOZewMazjX9JPo+QjFbHCoxK5GN3JuVtBIeXxYa0xTdgsO5AeZc5Py1ISgqRUNU0evUDgzVXSQXFd063c1wCOqW7F2mFZKBixWAF3ixpXim7cAgI8vMW7b8WB3lXlpRrJ0pWpuWM484jVQeoEqhobd49V54tGb0zKtaVWC8dPS1RJMeMKwQ6BMcOmxadPQSEJwwHWhdOAsKy0qb9i5KYBu4Ik9wJc1oiYDvHdzF4unEjTKUwkKnAVPFIFzkmrIqpEPwYr8OuxmaNjZ6JWJyjcaTpRMLRbHaPdKjcVhcxc9m/YIY81amKxLCAkav2okAkRe1jOXPsqkhNb20RdpBylYJJnJcQstIvG28dz5s91fnO758DF8k/i5JNsyeOVeI2tbb0tUPFv8AZ8eL8o1kfU8gbPVJRVLS0ky70ri5sD1Zm54pNF0Cusd9okHy4vszm5LOItwijV2aJ7MeEzITOmody+eOGqqTgTdLpAKX609LVvt9gsbhnWT+dasfR6ZybcS+kILik1SAC85A4t22+HGUuxH61QzDcM28c5XvZHq8JoDpB5lT3h08nN7uNC5gDmk8rNSKnJVBjTl4OEiYpNV11QG3aWrvAuYb+bBzmoCJY1z4REV55OTEMjKRsnUj1OWBJLhWQtQ4gldUdwXkQGNvT5tuIil80GdR1iUVJ1C1B8krpKxabARlrA5lTJJUtvudWLO+po6ji1lqbn6sbJNdIgtu1z6SC4R5bNw2WnfbuwwnqIWaw6LaDcyUqs4VAmsfUzoXgqmAFu0nBCrcF3SqOICMBUZCe5LZgPPXwjGsJt9CqIkGqQvLT+FJdI7vaDFLrCNqqJZvkUKhqWQj5IdJBtLOF1RC0d5ClauCo/Fb4cOGWWr+gZZOcVOZeSxjrvOGuFuzPrFJBJXYlb4rvaxVaykcxa5L1rTNYSDGYSvSbpEkqqys6itPYkRbhuIy6MGU2t1eIdCx3LMjjpJ4zJyg6IHRgRC3JDr8BiO73MGDs41DTdJTkhVstWAwriPSuFNVg4ciul17UuS32+vAlqKOno6ckG04ZFKJLnxRKFdcqe6+7rwZuy1lzWtZVstJUrXLmn2cObdWUJs8NNV0FxWpCPIfKfPiqrgYxRQ6A1LZ6lShWEUnLU1XaUuiSWkqMMw1Urz8Y6/N7WISGy1hKvcPFl4eDuvudLyFFgheY+YyuP2twYn32XZuXyM2yrCZZ+kCsUJZ+q7FdLrsSA7ALzbvZwylYGHlx+rPHk8z1QuaEdukfUfLfduxUMjKTqACMeyJSElSrmWaqR0DKwrFNULUnKDVdIR5tmxe0fa+XFIUyVfRLdxIw0k4fLPUiauFW0wK9oHz2DYG/bzFi7t4SlUo5w2gYTTeGF+nIKrqkhu6RPVswiOXNVDbMNUYVBZWwknbJqGr7w2iB4MJsSakIy8KiLsC3R8SoKkXFMrYps5k3KxbPVpVK11bz/RWK7DLx4dLQKxEozf5myDHh+6ZxqkoDZdC/kAR0hA/dPEXXjWtqZJPgHlKsR4UElVVWdz1VU7rzFAFxA9/Tu/BhvBRNZPxThK8hynGJ33k5o10kkNw3CeqqRAFnse9iqjbg5tVrmsdyx7ndCPKczKnmbqbQcqGrqna6SLSO0dp6SSQAXVbu5sLZKTECzzDgJeoHjYY1uvcROWZvkiPcNmgBDdvxD5qU59FMwppsNPR8M3VVuSbMnXEjYG24lbubby7bfDiUyWpN/VlfR7NnR/0nRb3KumXFEgGlbzEr0W82L6sh1IpvYvoq9/NZEN3MpDykfTzvmdC0FJtv8RbR3YpkTN5Y1NKPgh3MZKk9S0JEUFUHyqqX7WzeGCHRkXJN4Fu2KXZw1oXerxV4kh9kwV34B2Ycjks8zMFrVrCk3cu3DVKUkptJDeAls0juLpHq6sBEJGIujpQlOQ4SFWKQhqJCoPUlIM8sthhcgyNJV6lb7pWYeTVEOfVThzG1DFQKbctfTQYJLkSp8giQEIAO3FLzBqiFazCKbulZKI4huCqCKGYIRxcOQESVoa4hvxy1oij2EC+kmdKx67M0kn792pLMpB4Stm9K5wR7g5d111mwt2PkdRErhLQOpOBmWcWL5/U1SJRkhrgDB3INUmYOtpFd3REB8w7iu9jGQ87qyWreunBuJVtJsY/ukF02qQ6vjuLSEzG/kuxoprVGXcXT7x5RsI5Tb38Kq2c8LH6t/OVoC1M/B1BjK9eLxQ1EsjB08zg7b1V0Gz/AIkFbi+18nLhgx6rSox7VRKgg9blcAq3jcaRbviLETEwNSA3UknTB5w58oigWkPvYeSi7lk3FZIEiTPmuO3ZhjHlw6Ym310BPpv5cENSAVJ3cnVh3Dft3+Hdi80lMZcRlP8A9tS1Zs5pJxc1KJVS4VVLzbbwITLzc2KUiPeCe26+/duEsa9pipckcyKYbRbDK+Q9dMm6Ksp6vgYkhJwQ29YiqY3iWBKoiAfQoCqBF1v2dpGH0ZaqqpiHit4KprxK74LPaBUSxVZmsaSgVm7bKPNFJBqkqDi0oyWjTSV5StEBMDE/FtPBMKiYFKSVVlMhasGPZKmKt1IEud42kF3DpJBbu8RYFc0LhlUDdF7ktS6CgK6vq8nSrPVDzAqRWbMVUxAfKrS8Sp9ZVfUNVSii1QzfrfSIxQcleXdH4SVET+LFfEt2JioJmmJdMThKG+j7jVM1RQkiXSs8ApGOy328Q4/3MHqpHHKyvsshoP0UNXDabN56zN0ycN46LdpID1Ba4tPfv5itvxDTlKZV11Nu5WOzfjIFu37pJBenGbFUQ8RcOQAftbsOMlqUop/DylYTpzjuUp90BpRsW8NsS7U0t3egkRiV5eXFmaUNkpLTjWS/NHmMm2VLVVQBJV3b5rtplut6cKXHQB8oq0RPpVEb5VwLdwpwHaqjGKKRmlrsHio6vugX72HMplVkyK6zlfOaeXcKjq+tCes3gKnZ1aq6CvyFi1J1V2ZEpQodvkW5npK6w+GgXQ6FhWlqtdW9X3dL3sWOSpvs4C3buZPKN4ozSCxUUKIfsVSVs3bt3X4gLBovuCO0voqqOtZyqCkst40XXqnM6oajkEktqAsgFqRl+3SkS6emzEfD0LPPWabxCoYVBHVtIV5ZJsWzymN+CpWU52SY5nFxsPQMm0IA+vu0EnTNUjE9gERoGBlYXMID72K7lvKZLFmEJupLQgzVv10HUik9Zh0WlbYavuWYPwfdjtL5qo0qtziCLJwm2YAgA6QX8NJcYJH7Qcns4jxsVHfoe8OHlVPUV6mlDayTyXam6MkpB3tVdB0GQ+KzDFEguvvuH28eVqM0TkzlpL0uxcymdbGPlli1XTFkqzcikHSO9dI7uk/DhNvlplRFyBNnkqKqjsbEid1HGvmQh4lbCSMC222+bmxM5b0RQ1TU6xnatzioNNRIVW/qKQVQFVJK8R3Ea6BgQ2lu3BYQbcftcN+yGTWQZxkCzbSzRVIEi9cnINVwPnISbkIbPbwqmUoyJSQ7lMraH/IscDUjH1kboOFj72qDAkttxEubrZ7Npe1ge8OskRA10hsK3duwcWuXuSJrIo+mqssEL7BIl5R6JCkXXsX5vLgPVIwp5nUUgzpeVGQiW7pVJk70iQFdK/YQiZEYe9g5lySiUExUFyY96A+0O3FB9VrFVKLZJHgXRl9oq/MgV8t3Pi7KMg5Npe9ilyUQEDUDd4q/SQauDMiUUS1bfLaGGlKW4VQQ6xJEZRk8G7uULuTkL97CjWGlXiliUITlbwjqlhZsDZRqi4bLEumqIKpERdBYcJtXhMXBpOWejeFyChjff0WjdefnxnczWtVFQ0lDVXHSKjM4uLauW52LoO1FxXE/CQ27MO2bBYBIwjWwkYcvKBYU/hUVCWa+r/a1VRLHJC83Iqxtyh9ST+0cE4ukaGJpNVoFhapq0wTZQCC5dlYRju/lR5sNXiQMxsas1xHpFf8A/wCpYlE46N/jK7aXErbLfWm3/ZYWWGBZuNFVtJ2+FKUD93F5PqoWIKuqKvFSHV4MU/EltPCMTIo0/UzWee0xG1G1aFqqspBVXSdbSsErN9t9uJ5wlGlvZ8ckmZ2iKqoKmPtcuIGXQktQQiUUyT6iX5w+bFjTutRfb0qVrDK+oUkPpIvQMGqxnmoSjN7H8bwrVEtxoD3W/S5T5rbcUBrT8Dc39aGhFOnCtlqrdVVKzpVuuvtL2MaIzYzIzrZ9n2i4SRjaTc0WydGwZykfrkrxYARaRiZCYd0RcoWYB7WuqndRqka1eQySJ/xpovIqoJLn4iFUrD2D4sN2SMwWVfiBLiC9CNPOFkW+X0JPI6/2yiBuS928SxbZ1w/qiLj3kTSqsVIJaqSsem3VFIQ6NATLlPdsERxVU2TORY2K09Q7a/bro1B3on5RBc/uFiyU7RdcVlwrCJRjyFUFVUpBDiu60h5O6SsPl6A9osed6d2K80Skcp1aEZ10mjUjlCmhZECrdoK7oSdO+hJVVK0249Rq2F7JYjqsqNaSeLORbPlJLj3fEO15TjmqqVxWCkkqlft8x+6GL1lPkVV8xUDx4k2pyqPV4mrKIOUHj5VBuH6XlG8ttlu72MQOcUzTEtLDJUpPMybpADPhmyQIENnOdqTVDb7Vx+bAmJjLSmVMh64mXJEJrtmNwdQxbUfw4Tlp5Fgjeg8ZuUzKwtSIQH8JY5Jc1UxBeSVIercZF8O3EHLcNtReM1XKZ7h7q7BLW9WubU4H0tH4lZFsbS6vVyA3fKOORas2W/1a2IuS689vzYYt5SwhRjn7ltbyj3o48pImrvkXJOSDwpXYI1oQVKJkjaNzZLU+7j2zns24WRkgJmm2YbRPedw2mPkuu5cI6p3bjHFavBSEag23LKmggQcmoraZ4eLCemJoGlvO3vQuu+DESjYqXenu8p4cPBWVbiaG7otutxQe9QNW6n2TyNZqAQAlxG9LbvHExCk2QkEVn/eopGBkOrpXeW7oxB0W6YBDoougcqKBsVJLkHyYuUerGkQrNWy6ZX7VSMRtxS6UFNpuao8w1nldR/G1tTgoyapkTRenHS5IB0jqm1K/b58QY0zKkOsqAyA771IuBPuvaE2Yh8+L9VkbCNZhwZcZ9b73UiUNdIb/ADAV+I9ONjo14UqhVVYqt+6IVBgX6Grt33FqiAWnt58GtO4mCAcYgar8ZRtMSLUX7+sKqiCBW1IkINBUOTff3qW7d5sWRm1o9qjwyVYPk1up2qzFiVntXFhq6cRT0XFjmQbEkPda8psSMv2SqXMdvL97HXHzyCJM2EkzlWekA/VI1uREB+XhcfRdmoxgr1S7JgUetoar5jpGqlIJOiXVLwchWc/UOFpJ02koviZHNGck5JIgQatlUl1wQSMd5iqqWyzlsEMMY9WBdRrdzLRUm2cW2OFUzBI/bIQSHbZaPJiNkHDNdYUY5ZLTDlIW4CXyc/y4rV4rqqFZWUbtXjWVYxhHfqqKMhFJU7vDaXi/m4H8w8qFJOxCqopyp4UHSSHw3pYIk9IgwhY1/Uyyqrd2KrWLVQVIXSBpW3mekJeXmuu34g4leKFuMlKZzOYxS/bpRa6rjxAY96IfNiAaFN2Jqhx7/MgngtotsUg8VOxBBJJB4Sp+G0+f5sPG7+uY2QR+mWVz4U+I1SupwRuMPCICFnh24lpSSjZ6evns3U3iatmq+UhNUeTmIbrztwtGwlJPXhAzzoJysrYkLZtHcCl4b7uTb5g3eLrwZIeYUCQlyqlztYwJT31WmF2zfV1eGkklxG/ruS1SC3D5F0jKLLNo46ej0XAXqkmLogHy2gJbvLyebFyWjQdEMC6ePpCJZd04FtVTVDit5XqpJGP4FfbwmpQcPGxqxyMJVnFXgbVovJJFaB8m7SG/2h2YkLoKomiViy/QeOI/g0Aj1dpg1XXYKoA6Pw3bbC8oXYtUaPaBgY0mcIwbLsd56rGXXSFr4/slRAMVOjUnMcjx8c2KMYtxuJyu45bOgBuHdi0FEIy4uHlP1IzFikOkS6TUUlTDd9ru3lhUWg5pm3tVJq787TUms9mDSvrBGQGxrJOSXXvs8K5kIHzePEeNUMG4p8Zl1HqkkkAf4Vus6jsX5sOp5gzF01Zwzl48FukYXCloa9/Vbdhi6hpVkm34hnICSpbRUbmJ+7tK/wCDHnSRIinQ1Llo1i3Sz+hkF1jssImq7Y0NnSfGe9yfDiH9aMKjjxRdBwzdkBmLkUnDlVXyFevsxJKSMClG7pLg1L9IuNBAgIPZNrzYhUUoqUUJmE3TyTduGqCr6OZIEZ+Dm8fnxawq31aqdiISoGLds1eMyUBKw9VurcRn5QIsExTsv1O8gU3n5umaBW3k54WcI1fOQ6BB93A1o31bMopov3lOIIpK2kSSSQ7PLers+bB+haSqpvTKMlF50102j7bEhhpRr3So/oiS4q8Bt8+KqsoCqmhmaE9WZR1DTFDlNtcvlWwt1wSdSTQH9lh7dwqsxAN5D14Ccgg5F1rLxRKJ8hfUiEvkHGpMyqIzxKjSRf1DmJUbF0APdD1cK6CoJbgPVBcjuEN1u7GXXyDncEccqJBy26oh97EaTWKk+MFboNrx8DoncgmB3CKSRebkEx2e1t59+JIYtZ4o3RBy8ZtUr7NxXpBy2FpebFdhWDxUkUXltzcb7vtzK8hsFUej38XxOLeRDdaSVlWKCerqi2FwCqSXn2K2W+1hhlTQqrNUZeBTUKtJJTaaqbvb3iHm2Bdzn8wYbU4wOpVGMUrGvk1m7PSubEkqOlcRXkkqJdRc2LPUsNN1HTKjBCSSF0DgztScEWqkdpBclyeKyzEdTbZmqujCPAmeNZGIuGy7y5qRj1EIcnht+fCq4nlD0imNJuWjssp+kMuIVxCKoSBOHBXCSjphFECtlu4UjS1R5txbsElo8bVG0axtOVagP5GqpOmTuR1dd0qIkJCTVcryEdUfeuHFGy/rSCa024h3tU6/DhYCRSgikh4RQScXAHtCGLzl+69bLMWFQSXcyD9WwSVDVSs/SpKtxGzaWOcOGJv5uO5aAhIGoqSRlM14Solmw0w8XjVRvS9Xrv3Lgt/MXejYPN4sTTpktVDNaHrKVlV0z0nTeHFK49pcxC4Q+a8uvcOHkxA5bunCJxcPGvpCPVAxUVXJVVJXoO60jMvNu5cVuYSqSRW0X8w8SRNXum17pIhO3kH7Do9rD/YPeS2MzQEzVlqkh5WWClgkKiaPXTg1UGwJRTpsYWiYEkFxqjeJFzYg1MwiOmmzmraaqd48euklV4AUj0k9uxVUuMHft5jSxZcxsuY0pqUFqiSaLgrnSHqZB4Y327uKVS5rt3j85c+Ky6a0MyWFtRcJLwck3+wkI3S1V0rdxi1uvMbLb7T/AH8XtYU7o7NSsIDlu0q1VXmG0ppunUM3RmW7ZJkPeoBYk6M7uokhs0juHlK+8D8uKk4ztGoFmK0TKRbFFV1cg2jZRJIkDSG7mAdUx3fpcIMV5J0xUioKs0nabcPrAzpuohIQsu0rby6fLZhutKRvCwfGRQxDOHcd05QlkHyCqu49t7XfzePF7QAAekfz9pVkOtFRvWUlUNWRsxUdPOXJJIHeROrlVQ2jeSRlv9obQwzqaUphkTp+/hGLXiBNVqkUW3eNy8qt+rpF7F2Eafnmz+Yh3L1mLMm6pkS66R8KveOxLSSGxIiu5t13gxYka5c0o1nmCtPMZB1JqmrcohaDM7S5hNIg2eXmwvHUWpElKOlAaFGjKhiZZaNeMoaS9bKqiIROukrq22aV7pAAELCIys6sOZ+pX1LwklA1ZNqyXpaIcfUsgY2npXWt2Ajqq7nB2pc3ISpYuzp0zGNkKtlggXzGKbg4V4RgNurZakIq3d7cW4xILxxmnPRw/bs4+iV3Kv0mk3SstPWq3WqlcKSRfySW32yVxt7FT4uuFUHtFI7g5AcsdyGvpeSWYVZPKpljJ44cr7bB+1cH0CPhHlHyiONDRdMv6Lj40H8OqTMCsVVT0hNfl1bVTEt27EN2eqEpxwwQkHtqBJKmLN8R2pCraQmrq3WD4caH/reKnqOLTWhKnQXUb3kg2kFSEHQeISAisxC61wuvwJW0tMbTURQBcRbZVaUWjfqLVudyXrBcbhDouK0byxasuaIp55USj+RD+CaVQB/LqqK3JKux3AHu23W+PCNdZWV/l8oxYVDTZJLPd+o2S1QXcGVoNxV6y/e9/CmbwI0NR8LktTiw+tp1cHs4ukV1xnbzf05ADEAjGQFuXgEjKJIe1hLzeaFTPqqdAqqiqZpMEy5Ekg5Lfcw4y3q2raDqJP1XMIOWrgdJVtxnj232+L2LsTEtFgLcYprGvNFlYCRCJqgVob9oD97EBRVXjlJPSGYP0YipB40Dg4RBy1t+ul1iIc5BzEXhH2MXsMYOjGMlU+/ApJeWpdet812eU0W2eNVFn4k/4kN6SpltBXypbiP+bi+ZvRbyUraQbRzB4MLBJBERagtRVSEG4cuwthGdxe9iyQvaRpv1IK0zQybGtm7NwDeXQS1RNwrzHcY3hv8AawI3lUTDhR4tfapcBaQhakR9Z23b7vFz34j27rokQxEV7shHSW5QJQckk4FF02bOVlRArUiG7f4uvqHnDCacGaDgkZKKFBRurvSIC2n8WHj5Kqo1ZR5KAkK0m3AbhPVub7RtVEC8vVhwjFrJN7G6I7P0aXTg2SGjNfRWuM3o2lgYqvV3bT1o1BdvoMxVVEyLqv2bbiK3y4HjvtEA6kEYs5FclFVbNPS0tnm5RD+biqTss1qNwzf1toyBG3V4NzF91pW7e9HoICEhMTD9/Fdoj0Q+YtUDD2KC4ZOrXWoZFclb5OnZjgtHTFgxjnyIuZbNh0t6tkzm+s7bkza6ajrXNJUUi1dVK3YSXmu6cfir9urEicLEVAROEhVVXdgklpOrt1pWjekW7aVxebEo3QYQzhRaOimiCbdK25JIUuovBz7vHiNfSLx+zHiFh00jMRER8HJyYpeNoNICjoT1Eo5vT8aDsfXcu5bcRu4JBJItntGPl82LQ3Z0yCtjCn2iSjf9Ip35cxc942dPSGKXruRIpE2+qtoHzfJtxYU3/wDHD1tUjV8NoClgGpN0h3LwxQQ7UEi3TrKmItBFLh9V3agI2iJ6QYEVRQyJulnKACgN32AhsHyjgh9o4kV63pQR9A6hNnq5/EmIYpEhPAk6UfpLCuSqpnaWOrWTB1q2U0e7/wAsVnK2JvuSVReRp7TS3DdjQPYmo5J/mg4l3yREkwYGemJWkvcqkCoj7p4Cko/jj9JcFcgJqq23eDGqv6noEUNX1Q/fpJrLA1atUBLpJVW37wjdgq8vuhbnULSCOcJrRFeJAFbUCEXFJNhk6gdujX0hLeDLS6PdxhjN6BmoE3U3D0IvGNVX6oFMkSRa6oKkJ6Vgjtv6sbjzPl3LXM7LOxmKYhOKtwEvYEb/AGbi+XGD82EGbN0o/b1gg1kuPkCVaJSJPCIzeK7rbi0tlnhutwNwuwYULeaWpfa9ztyFCdZ0s6WUcuFlVVFTvMi5yx5NULhDHN1xXnu8RY6RO1S8Ma6CWLXPZzrmvpmKb5fZV5QM4WQdIWyM+lLcMa6IeZwKogXjsu9jEdW1PVnRc9IM6gbSa74b7lIsFSQVCwR2kbVK8ua8gGzEt2au0MzaydO0DT+R7N9MunQNVZRJ48fOhSI96opHq2WBeR2e7gudo2jvobM+iTnZiBp5i9v9XKNn8yu/dbR5hAe6+b2sZWqImn9u5HNGCAtI0p9IOMugSaoxpcQQzb1dBJIOjkSG/pvLdh9UD36POCRZRUGKLhUzFXgHCvFJdA77QNLaPIF+IGWqqHcIrLeu62kFGo9079YnpeG3vSJXaHs4hadqGBi32tJesJxmqNxoO3pidnhtC77xYvFojJTJ0QUw8S4pq3MqbhY9wCXEXOUBSuDy8QXLZ9zDjjJWSJRnF0xFKikOq3UQSucEYGP6cFVQD5cN6qq9nPC3RaoroR4CCCTZfcaSXhAgtP3cV9j9GIGUZv4ttMpEkV56QKkd3jEeK3j5duGbDBR1IV1wT2oY1Q6eKyGi9p5CIUSv7hNAkjK/dcV+8/axW5JwYjeqz7vxCqQ4v2aEXUjeoikqgftnij1IDHSeqrkkFmwSFwWqGzx4H8gyWcJlZ8N+DmtyoPapaLYIuGseiyfofWCsVX2JcKZHbuLbt8xY03lzl8/p+DFsSNP2q3EblB4kqqv7+rbjMMWXGQreIbmCj5vqkq2Ebdviut3/ABXY1BkrmDT8vTDNo6ZxaD+P7gW3D6pWh1GRldjJ8YYvjS9ntlqWq4YyDd7Tcr61p/0t0dY3kbcPKQuLiH3QuwsMaH2xSTEk79wqOiG74MTHryNFMTFtGime3bpfdAiPFtoWhZSvXzb0MIpurErlaTptGKlyeFVUBS/1uOUsNP1DsQHUtxVO09I1N0tKLFE+ikpPK12mdAvpZj6B3JNZH1mkNm64OIPaXsjjM1YUVCOnz5hLNqQiI/ir0FF3RISQfyopEIXeWzBGzidvaE9DPLnLyo3UQqmgasq2fsnSoqAfVe1uS6T24zzKVVNyMw6jYt/lu5WBUz1E4Ncd4DykKrW+7l8mOgi1UmIhtIVg6YGQInR1CSIGWsa2p62oaVWZqxbRf6+7gpt6SomJc2gC6pn8HJ8eIjPGu4HNCqG60d6a5kI+MSJJVxG6CSVx23XCBE6LqHvbuUsO6Fhqtp95B1hVVPQr6D5HibFkgg9I/CkLe1Xw9Pl8mGfamVmK9qFjCUjW0RTFKA3BdmjIA6j1dYg390CQuFSHaPel49uGlI2RnuVOYObtQrm6SzAmbkqHOpI1awiBR2M7qmd+wNyQpB723F6oH19GUy1bVLUc8M4qVrps9VQJIt200tur4eYuccDgssJ5VFhGw1W1FKrKkZOnqBPCbpcvTaRkPtYI9C5dTdFx7sIuKaLoulwerk70hcattt1t2qG3pvK3ynfgO91NOFIQkWHs9I/inVvAyfEhElZiRWMi4owIv0tzAvwpYItCV6nGRBU1DUj6H8ypf6WzxsxBR1y9I8N0YoPAVM49CerDwggAbdUtAfvYueX0I5dVtFow8FAyThAjLRXVVEQtHnIkr9uMFSOED4iJbloLiInSkTgyjqVczJp2kJxH0zlZZr+mSn26WggzcpehBygfLpBdpIB4T/3cClurCURqPINZQiVEwHjaghmyAh5SSVvu5uW7fg4do9Wula5j46pnsRIqsgN03QdoINEmwKlZsMFRVVDYW4rS8mM+PqNqGtidM1ZKOYpq/atGkok2SVDwCAFjdsYtBodLSsmy46bUm20duzFBNqyqJOp6GrOcdzEUAcamoqquHN9kSqqogY83KBYie0EWXshmHNu5OnmzmZVXAl+PcKtlUlQCwLkuKS8pBal97BN7NEvSGWVOepGlJIUwhpd7OtpQJJd4r1813w2WDgBZxUpN5kV+6qpKh3LEnS53OV5FmzVfJXbDMW48xBbut97FgOUxn0i5pQOVV5pGbaq8eNDfSJuCsDPSEhFKg6LQeALcrD33KgkRmPlv6sGxd0tNwcPNrtpoWLhqarNDXSsY2FaaRpGJGHvc12M81BkTWr90IQ2W9NJKAdof2wLkqR+LervwfGkNUM3TcLCPH7aMcQ7VJDgUGrVJIjMrjMOHKy67xAHLiq8hTOUfZuSLxJnb26kHe0b+iolwgzVUvLjiUPnLhQLZi0wShwTD0ToNHygiNyXDRJEupb4TusxCOKXWaqC2SnnxLCGy0QEfNaOriTpOHWlllEpG2SapbbnqF2l5rlSsD2ebHPHhwjE1pnZQWZ856jc1ZXrqUkackIhwqkAki9vJc7esr+T2RxUod1FNZpi5fovFU2i4ODFDuiIBK7aRpEIfAWCz2jImBQmG8lEzFIr2dwqyiXSqrwfbH+LgPs2lgOJ8SqQ6CMh7ImI3Y6rQfBm+gY6Vh6nU4S3blnmxlxV0Eg3i3U1HK+grXSTV1UD502PzC1baV/s4fyFUVm6fOI2CeC8IB28bHVGur7wgqlu8tg4gcoJ6Ygco02wZQV4Tpk1S0nahINiXAz3aXLs83PheDqCj4jWlJ7KPOiVfEkqC4uZQXhJGZ3bUuOtt81mJlhMUCIxkrLG/TZ7JNwdLSa8o7S7on1OVAg1EwHxOpNILcUmpqgqprxjVKm42TdatmvGsJRAb/Lc6XSPw27sPHDphMUVOeijclKqbRp2DItnccuq6eFeRJDYDoNwXltE8ClaLipdZOKZ5S1jTyxpB9eKN4PSP2nUnw/ulgtodKqAUnIUrmXRFYRswlWcfTSbhcH7yPe1U1bLjv/5n3Bn4eQsaqWqOSqyi0X7WSipeYMTFu7QYKlFnbyJEWgV/uYyHKPK5iJRq/ZM3NXsWPcC0q9vHOUB8ySSS6vm3Y1Hl/WeYNY0FGpNYGlmyBqpEcTBOkmirHrMt6qXe9RBt5urFFT4VZ7SQgZmOhGKzytqcak4MDJUaZlFZBVXq7pnw1we7iMrJ3lxUdrD015WcK4kAA+AlJF5ENRD2lWPD/Ni7vKgqEeIZzEVJvmLcdXXF+yFey79k6stt8XRiqTWe+UhAij9GairGRZGavBoFFujQCwry57LREOUSxOmd8Kk61pmh9D5dZeQhp/RfOys2Mo7Ph1U4SqI52O7xKpIF8Jq3YRqxKHpxi3bQnaBFyXEfXVJBwk+X2foi0kissPyCe7rxYKkXolxRbGsEqbfU8o7vV0xo1wk4ELy2EW0AE+sxu2YZ0/WsU/p8nkytSsQxZMDf/wDEhqgraFt5JaRBdutMdK/FhOz5VENqEOb2e89UpOPVucbmXi5MeFdQjZd4QiFm8u9QSDSLw7j82ND9memcsobL9n6JHISs28sqlerLSUM6TNwZCN+kq3G8EvDdbjLlQZg1PnIsNFM6eokeIcWs1GUc1j1dl27XVtsv83w40flFQ+XcXRTdPMOrmcDWTW9IU3dWrvkrw+yM7FybgO3l6cVuO6pKp4NEVPVdXOd0NNcTRtPVM2g0VQ0k2/ByACAlymJqk4Hlt3aRbjwUGtUV9WEGmi/y9lVHqQpF9WfIIK2285pE6Hq6b7sAiRpLKCkGLiSb1m+cut5OnaVQ2oDfzgKpkV/iu8+KqVL5RVBGJglm1Limq4sL1hVqW0/KQElt+LFFG7M4qbrWhFKqIbNRvNFJREUzYkrsElTdIF7xJSdnvYy32oojM6SbN39RsF5BnFEYLu0EHSrdAz50tdUlQt9k8GAezxTbD+Hqe7SEvBukuThJxItniEgXI927rwKc3qQlRoF45lM6anniSK5Jo7lEl2qvL+1E7uboLDINBaVXKYqNylrbOZWiJL01a7azmWCTcEiGpH64sBJK3umqAXG4V8gpF4vPiBqVCj5t0jJU0UuxTcXqvE3aqXC+QUErbgH2jL2RwpkaMJS9Hz1bPwlYxPvWDCdKSV4MZW0iSSOOSEjcXbR725Lx4pUS6kqleOH79tbIOD1XREwSQSI/KIbQ90MfLp6tN+Hx7dXajqKoybqiPiqgmniEe7V0jJoAkr5Lebqt6C9nGiafybh6aEYGUfoDU0eKv8DJqoOfqR2lqtSt1XFgW3kVp+UQxmin6anymG/qlm0VdAVwiLcV/lMSA8apOgKna1bIVJMnSa8wyhG7CRFpHHeSQCKvFaGlYBWqilcPgwhpXR2ykmd9EgISHSuZDLeBfouJ5CNSXTaDfqL6SSpH4S0i/oHVgETiryja5cfTdaKFmrZ6pQbM1VXhAY3bLFSMBs6jPdg31BHIxMP6+0acXRADPaKqBkrb9lbcO73MZ9VerV44a1qT8YNRwGku0baqRiYbTFUrS+UB9jDRrSEjWZJTzxCj+B4xJsxQFX9LriW/zXrl8OKCsh9IagJm3ZpM26V4FKKmJIIdXMlvu3DtA8WKQaw7UUTbv3glaf1lB1d9/ZipkgbKYEGDlcmr0QSkVRS3kHjIw5L8fGts1NspuiKfSUQskKayR8S1D6ukqnbcVnPt2mA+2GLnksybOK3RhEqeSeOJhuqwSKSVSJJtcP2oiVu4Qutt3+HA6bsHlwo8GJbrbhMRH71mNX01REtF5WJPKQm2sY8jO/k3bZmgu8HYXdCvGqqkQn+3wlKREthXPjS00CUrR8zULxutDxzmPZt4d04YJNpJqqKq9hF3v2pH8VuKXmXGv8q6gcVNmH9IKujZVe3hEUgfMm1xXCAoXDYPz7OjElkXRfAMU6hZyq6HEf4Mu6BVJVLl1yEBvC/mtLfu5cRPaOkq8erM/X1HjEQsU/uGWSlgV4wOgtBISVS9m8d54ZU7JEOtY11/UpirKjh46nR9ZRUg2j3YgCCCCRpOErxus0g1bPZA/ewEpOlaVqx4obWr6sbR6X1ohRboIJJGBdS52FcJ9PPtwc4cYqsqHazZvFOHk2AAaRL6qu4bT6iC7AnzAg4HLKNeHS6xJLOxC/60IgJn0ltI+r58XtNnhqDcvjD7UokKbkrQDhRTjHlQO1Op2kk1SBXZ+qARxd8lo+KcV0hI0y5n13kQicjwTcBRePAHnSQIDILvJ14GAsD+i7WYVYKpOgV0ngqDpD02WDcR+LcduLVlY8rl/UKdPUHUCsMtIX66grqikIAFxkqO6/b024zVSwbT8XF0HBwKigImyj4lOV3KZaVZU8kzmWEzGKOnRrlHhE3OlFStuJVVUdxF4ufx34ElWN8nybpxcdD5gx6xmA3K8Ogh7+3Gk0Z7KNvOIzRqxSApMwbs20pDExVeHfcSpJAzVS37bCuEt1hiNuBT2gs0IbhVmFP0TSIk6StFVmz70T6LitED9mzDWjF2awrjoCpzLOioemmKyzWpikhVMCAkFRVbht3/AMXKwy9zFqrBJ+1ZqP0DZ7ErAFRuqN3g3ebFZyRjnlNUiIVQikxkHSprqk0QSEBAxuANloAXs46rSpZJd4tCEzXj2+gaqUuq65vKkPWry7dvtYZUzZDKRSVZELukUMWb1m6h0ZGJR0ikxvdCI6QJGJ/Zbyvu/lSIbLLAHHLAbxILFNS+whIrsLKLgg3TjWQWtwENVVQUtdyr1EqfOfs8g49pOWY9/uI+oT5sZi5ujUPEQro1oYKlphEk6eNXLGNWNJi8eODD7BNuRJD7X83A9cILC4JFUNJZUDsTHbizTKVQKtRMDaJNzKy5NxpXH75b8VVNUBdcMqdq1twkR8weUsF21ggGSR3t/Ndijx2TIuKe5iov6lYM1IuMa8Q6XduDQJr4CEtUevxXY1/m5KBV8qwWy6raPJZuIpOkGjodocvelr2hzeC/bjOPY3pSOTfuswZCLmpk40jZero8EiSIz6yvVG/2bMGbMqmWKku6qOkJt02kJQrBbsIQlwbBtHcldaN1nzHiwi7Bwe8sw4InVCXdSdAOqnUCSqCXk4FeJVZvWyskk6eDaAXCVqpkKV1tu+7bv8W2Gg6jkpun4mVcT0fxDdXhV0YlJ+5B4YGVmg6cXd7fbuPDeFp+uUGqcPV8a5QhQvK3g7VVVQSIrrQV0gLqDl6OXEXCusymWXPAEH9sTd7wvrAVzXVdX8hEQCIJF5b+vm58SpiLKEV8IRkS6lF5vReNosF2bpUtLiXcpbarymXepCBkfLceKnm48koai3DBlXjyIJw3/hRpIJA5VXAAttFVJIgAdxdfXggRMzPUfTbNhIzxOagBIxVTGx5pGZbNdVUi3bunDeQlqt0Zy5gxdTBxfFM01eCVVIw57iASsuDxh02Xhh0w0aoksWtyAmqLwQLRV3JKaW0vZwXMg3WYryp0aWoip5WIRdECr0mzDjBAOUzILSDFFrTMSra/cD67MRbtx0kGKA6SSXSe23qtxf8As0ZgjQ2YTY5WEcvmD1I25DHNRVeIK9CqW28+UgMfPhVUgjhPQts/RdjQ8OSFOzdUvX79e0l5TjNJD2dopB7JFbhvPU08fsVEUHMmxWOwFVGggJr+MSvEg39duLPUlQOR9DIzqh0uzdlcgKYk2XHb+lsETwwWSN+otpGSpCIHoJmRFf4tnw9IYtdaalEUupiOEzUm0pKnhp/0OTQQBR0hYuqR3Wq8tpK9eBdDw0rA1gmjWwVKgi4e2sBj1RXbkdpEIK6Q3gPTdycl+CG8gwpOn3pR9QKRTlwPElc9VERcWXHbeqQbvII4C8BmJVkgjPBNPnPpmI/SdM3qwA5SVS3bUkAIjV3WX2pXjfi+piJCMdSixMxLUhdUWaTONImz2npVtY8cJCKi7ofstqqRkbreQH5MFil6yp6eyvkJtKN/g+PSMVdPilTGwbj3GRGr7gYGq2cNVTzh5FVazpGNWaugMEyp/VBdW/vbiuvAtvtlixVUk5qOi3Uarl168ZmH1dSlOHEEjM9gKpKvBVuvHo8+KLfIHCRDgzBY5kiYOpJ85i0RSauFzVStIy7q/ZuPf8eLxkxSa9WV7GQQVYdIovS3SJPSbHb4EuW9U+gcUuSYP4R86YTMOrHrJEf1ZdI0jSD2f97BEyHpdbMuuWNOL1I+jRRSN01coKhe2VC3daaol4uW48VPkSN0wW95XJJdnS7OKZ5hviFuIC6XfIa6rwOUxNVIkjuPxYGGZyGWOUq0eUoaBM1XCSC9silx4JGV12kaRKmN/nwdIqBg0oJNFCrJVR23bggqv66eFqebcvgE5nFmQvUDhtTNK005TNUG7d9JOklVV7uciAEiMxAPFdi2qFgREhH6SWUpumRCRJnMZr5dtaZZ15fUBQ82qbNnMtma6qqBpFbpCk4HZzHZYFnPu5sVt1mHR9YRLiVi8wswxiWo2Lptm7dW7Su3aRjeA23btweMrsXCQ9fOsv0QJnSsYtDia6rZy8JKOVV1RvJLSVvArOk0vgvxUZSq4GnIP1lVDXLwmrtLh2UhTpqk6LpVBK9AfFbdqie+/diAjqVslV6VorKivKgWkqZlaoqFZuaTx40fPQSVELtp6CqApKjt5QPAjz2qOm56qChKXo9jC+rCPX/g7hnhHuG0rFSAx5S5MXyja54CeTm4mSlYqJbpAkKiSqEqDPVC60iVEnSWwbdoc+Knn9+c4phNzWVMR7ZqqIaEhHpCST6/9vaJ3eUgG3DEJAwpiIyQXnkA4ETJs5VJItUdPp9rCbdLiG6a23eF+3Ek+vONWR5SssAR3YZxpALNEAMisGzdzYgLulWk1rSyLfduO1PrxtGIhKDm8p6dpVJWm4iZVagqk5BImiTwyt3a7pqSWrzbAV8WMkU3HNpSaZs3ElHsU3CtpryDgkm4+0QCRh8BY1pC0W3oagI+m5apIpfVdetmDleGVXQQFW20EFzG5USt5dCw/Buwvq3IblCO1SUlS9bM4V8czPRDlN2lbrrqpOTILhI1bg2/ovuYrMbl4dJU7IVVQ2ZBEVpqy1sC3SJAL95A6VFLS5uYSHEenB5lpOlkWeYsqxRBILEmjhqJ2GQ/oLUjAebZZhjVj1nS7d02lMyJpdw4a3ulEm7ByCRmO8CQVIbFbCHdt5vcxQ0RS0q0taBuZ0bCN6gTOBflILOAN0/c8Uk51VTO7mSVVC7m6+vFTRamZD0+1iyT0XSrUW7yj6tVlUTGxVB2wNm4SP2biAx8wHhWi6Vc1lPNaeQlYqPUdF/GZR5wzVL2i/cw1zICq4rUGS2XTWByOnWtUS9NkzmTORQEl4533ogFgkZr823l24r0elFFTMpTcbXNJxQ6oESCkWzbXHcO8VwfJX+7dgxUDmBUlNw6lHenNDJF6+j0LW8O1TVSFdIAGy5cjELvc97AtWoh/Mzjqqq3BtDIvXRq/wAG1KrpCqV20bkFbPZEvcwtfcgU5KNPjicpKRjndcM3KLmEc5LunjBsDfiwfJRr0hHkMyK8SLbvHddirZiZ613SsoT9/AtlUXAWCpCVuL5uPjusG8OXy4IkoudWzTdFI5Bm4aGk1XcjNildpF9qqhoDus/Vc2H9V1rTMdTbiIpU01JpuQOFXvql4qzXs27xuHlK4dwl7OKs9ow2q0RMECKu7U9PVLTrWN+jE0SjQlTbpFUxiAq29e28x8t4+ziu0XnDR6S0gjW7CVfRMmFjqE1ReIKhzXCRkJpEJjddz/cxKVFLUkrGizYMxVqQH7snj9eklR4pI0hsIdJK894kVx2n5MPvpb2eEMqxgZSNmZeek1Q9aLtEkknDM0iErkFVUBDSK3l58MabAeUYql0UA5b1arKPDgUV0o3iD4JNyYEqKV2wCLbeXuY9HtUXTpui8eCzbmqCSrkkiLS81obzw8khh/WTj1S2cpMzV7gXZiSoh5rNmJakXVNx001c1RBLy8alfrtGzrhlVfBaVu0sFk/pXooy0nCdkZnQD6KqU31XTrhXiDkGUC6bcGHgFUxLbzc+BZE05kC4dOjngg2269gOlJJJFbb9uqBXhcO0NIOfyY2dBNuz7VkcnVVG1WjRfocM/rEagzBJV3YJD3qVpavsgNpebAZY0+2pWWeLUuCD5E0FUnkbJU0bMXiSW7aq3QLnHxWhheNQQFKX0l8CBig/C5O0BNyguYxF4vTurpGvANXi5pK+ASVEkj9+3FNrij0aPqp9Tbd+TxFoQaS67IkCIDG4LkugvLjTVO01Sr9FObp6b9XvAVS1W0lDKtkjv5/04mY7eYQ9jAzzYpCpOIkge0q5dPEn52SEak1XZEl5VUktUxst5j9vBbFSTu5fCEeVBFRhaO/Q8/OP4sUVanHcpIKNlambJpgvahruNUCv8OCQs1bCW4xEg5rjttxRKijIFCfbyLNySrg1QImxJGIeHaW3Diid3Id1raiK1SR4VFsruUSEBIhSIcLLMmyvWV2OiZsFVEzVAbdl1p7rMWJvF0TIs1DYRsyko3G5VUpZD7ton8OMuRTKS1uxU+Qo1yuo3WQmEk1nA3imLoNoeawhsLykYn8WIpKhqyVWWBtWSCBJc4rmFnukqraeLRNwNCvGaZ01UNZi+vHXFVdroWddpXX/AC4r/wBEDP0ldWsvaHiX5v6ebDenqYDGf0UudGZbV16aamo4E9edF8St99ugNvwEWP10wNlpg/WfJKGIK7tuw+QvZx36KHWQRdPgl5J2LVDiFdR4JWh7PWXlHCUlCHEPE2yr/VI0gVC0iLYfJ/u4+kWHTNTDupqiUqksR3qro4bvFZVVTuGyGn4VD3few80gAStMhI/ER4sWXjrLtKo0kcz42ecxDpdIFVYuRFAmY9RilaWr7OPoQUHZACvVJyLmeyZmIHNKXiHNGtEroGSfa5eqZjcIId0Ktl4ls1wssErObAHh5EKacKP/AFJCzLoCtSXLSVSEOrugLeJeYL8aIz2oPNeq6VFzA03UEZS5KguglKTMW2QeN0rhSX4BJJBUyss3WFjLLyGkmDhRm/0ElEthJKGI/iw2YjHcstUn2shFXZTMxpPTSbyZyvpMmIEGq2YwwoBZbbdcl3vz4fS0C0peSj5VgdIx43b020kgTxr1Aelrke7FDbxdK+sGrOoHiTNEN667ZwLkSDw2gWw/fxORcXk/LTjhFwasfGgkeg5Xf2rrn0CIgKoB754tiKHEiRuo3PVzTUTLUBPPIwirhA4v1kLx+RoAYDYdqo2c/n9zAnzUyvqfKWqPoxUyKRKGgk6Qcti1Ul0iG4DEgIgxLZV0vDpVA1qeoJ5BL6PvQftRmXRLtXSSR70iFISMMX7teVW8ryoompItsxc063YAkykItq/QYbre4S4i0NtnMkA3X4q0DpFMaMi5ln1MmYj3qLklPK4Afw4kGL0246LON/jo23OSCw/eMbMRZHb0fFjzh624Emy7YSUuvAriK33eTFgop1ItSBdwQLgUeP7RUVQ/1Q45WQc63cP4xVPoERXv+7hrxT8SvBnqj5TG7DxO9URNUxQLwleRfIOL5oWKkm9PSrpnxLKNduSC8FySSIgE/hwxcMnjJbhn7Ndspz2qBaWJRnPTbNqTNnWCqDdx9qgKq4iXtBbZjmaqCp5du3ZzNQuXjduRkgk5VKxL2b8USKSvBMWZ2qWEBF7OOpZDVRT+skI9Qjz45b6wqfoiwtwqIqC5vJJwG5JXVttx8lrUTV0pkkYmP9W61zpIjtSbGBAQeMSC4D9zFgjZdYlhB08coCZfaErcI+e23ETSdQzasWRqv2b5YFdoikerZ7gjiyR8pKunAoqsyFO/eRBpfMezAjhatSvaEYKFqDMGbpd03Cnwk3awWKqioaCCV/QSW0gVGzEPE5vzapOAVoNCVHntVl7bPdSJLF6p/NDMun3UkwoamHjwXqHekhHarhKwrjNIjS2cttwBiBTzhraNu9c0I7VvLvRfQiDnZZbdq3CfUX83BtOAw2pc+RS0knh5yIt2qZqxTxdQ24JGyXX0kh9gtVUzIS8f3cJ/nLeKuhlUltdYLASGQdDtSDaCXN+DDqja+lUGrptBtnhN3CvCg2e0y1VAgMi3a5qkaXTyHfiUTq+jPUajZqwj4h8Zd7cwdLpEAclw6CoB1X22n5yx9jBRlNSETXTCbTlLKbih9YKhrrqSipaW/mItqQD7YFhrUE9SS8WUVF02zYuEnAHxKC6CoWW7+9tv592G/wBMooodmj6kVJqqekqkrDJMQX8wqpICao+3iyVpOZXPIVmrFv2MbJNwAuCQpIxIj/VErqkBiGIkr2typcw6RlKfRjZ7QUhVVTME3J3JavXYRlZd7OI+HhsunjpON9awLNQ7wFVy9uAdnL3V39OvDpZwt6pUinDlJKLemCqrYdVICPziHvYbweWmWlVL8HMLQ0fqnaCAt5FVV0G37IWqBbsChDvEiSl3RXVfUXkmlDs3kW8QQmDLQXj20prtdn6XVMtl3Nbf8OIl1QeXsRTbWVi55fjAdWqpMqjakRBZ0IGN/V+5hGtqIyEQfMY2i4qQEkl9J4Lsn6C5buUhMe6Lp23exiQjKOyuYPieQkPKk4VAASbMZYi4M7d/fqiPtWiBeA92DxIAHcSWlrJRK1EUw4hRmGuYL4m5oGLgeDSImoX297YQ2fD5uTfhuzyih4ubThFa/ZpODK+5J+gq18W5VItnvnZ5sTTyBpUmfBoVrOIOlV1V12iaSQ6SQchlqkN9/RYZHt5B6vKU1KtaZRqFd5Ltiu0EHKDdlYSW7Yel1burw4lmx2koE2JcqkG7BGlCRgQctqh4hxxWghLAu3V3cuwi+/icqB0b9FqbXKheMWSVPVJjxBJL+AS1RVVD3VRxCxdJPHEL61peYfTjdulxDy427Zw1/wA0Zatvmwo4mTSJFskCSrd2kAOhbLmqkR+JUefALoo5gdCj3jN4/nhbSKPq9bY34ZdwHufa7wH3sKca5pkVmyrOKkEdW7QvFUBMPOkV/wAJ45mmCxSl/BpIEfKLZJVXV846pEdx+E7cOnlJU9GzHATdQiImkBmSbcyVSM7u6VFXSsK+3lu58Uq/Ym7xI3FPosxkklUzICAUHFw3mWwySMdW0PYL28N1srUXSKzmZfoajcA7gX7VsS6XKBIJGSRnb1iQ4bz0NTHCiC78WLMAM0iVVSVu5ttvPd7N3v46RHL3iFIpCvKsXbpIJWrNgIUNUxEjERtvMRPqK0/JghgSjpQz5alPUXCUSksTN1D1HHik14pIreZIR5B3Fffb7vnwaKB9OWMtFvuMzHq6B9YJaTrgBaqbB2hqm4Qs+Ex93Afgxp6Lj1IdCtkrnBbClGroUkgD9qlcd3juDk6sGzLt+aEGSKWS0q6dG1VBB8hLhwToD51UiuH5tmK6sdK8whjmYzpFKFcM6ezQkJ5Nu6A2orpMLVzu6hbiKoEO4r9wYB5RE9rXlGsXN/JsDkxoTNh+DqN9VMMsV4oY9I1VyXdddlpkOkr/AE8OAaoq5ZkVkkur5dAytxVRYniKMdEF1HuOAdJm6fsYhYwsPjRMkLPDsEvuYIDqbktNFg1raDfMwPVSTiHhPGqXlFL7VIfkwP0ZelTEUagp5eVEFbLhcG2Ij/dxMQrqjGVTaVM0fIM0Qs1XKEygqIn4gVcWmGzpw3CeVpQPZA7qVilrH9PuofjIxdwAcQkradhWdNqpb/dDHoeIcwzqLCpaeio+QNUFUhexa6STqwrgt70Q3CJDaVvMfkwWIuBp6oE2pwlVRBCrtXKZdPUhE9tlukRAfMQ3bg24oRSlasKzWoZxA0nORTFwCVzZdVe7lISSVAgO3l5reXlLCuvYdytSJF1oS0ozoumBOkzzAy3ZpSBoWpNk2aqpEHiEdUjArVQ2n/MwWstYFs1Jm5jaeVXIEAO5dqSC6B2XBuMh+EgIcDmPi6wfukawSWQSfAkGl/BLNyKu20CKxK/y8nRggZQy2YVQVGzeZhg2j3yIqpLoJoKthLfbbaNoXXj1jjBUjBmUzTd1yAwTXM6IeKyy0qzrN9D379Now4wfOGqAkAcvx4qb4JItGKlKhZvhcJaumWqqqPV3pAJB1c23ExmtGounjxb6YM0pBx36XFsLUiS5QDVBC8LPPiow+tFi6ucvJB0aAfWWx91ff0lzn5+XDQWs0tKolBQuYTUGGpJKtuJcAQAvwlq5KpHyHpbTPpHaAmNge/WxhgePIeqY2njeSB7bV0o7XQC+07htvS5dgq+fBepel68qhuTanqP9arN1QF4lfpAN+4/rRlsLcPiwQEeznnPKSguHlax7GDNvpDGu3S66qHt6Vonby3XfFhxS2uufHsm0M5cKZotZLMtTBN04+JF1SU0LcFwbpS0eAPEiS/aiC42c3g+LFPq6l6PqWYYvGsFxbg1zVN2TX1YSCu0tUbyLVHbjaVD5GRUdOPkajlahfLRj9UDEZ5+k3VA+9DugV5QBUduADF0vTE9mRVkbLUlJiUZKOGBS0bLm2J4AKlZqiCW/l6rvbw/w4Zd05BRS7zuOrNUK3hqSeN9ZUHkYLs+FQIS2l1WpJWkd227ELUUJNtXX0ehJKXXTSSvbqLqpFaqNo91y2K+Uca+p/sdZPlGsXMsE8+cB9Ybiq/AdK7dZsHf72B/nJknkPky4ZysJSsh66uVm1ZRzLul+GSSLfaN9hrldaGzb8OKWOD6wC1EpuX5gx2rLuYU45y7gS4pZm+KjGoLuiJK4V6gdERNUC3b9LS1T5tiQb8ZmoaMqWvZpSXdvF3LyYX4ZBZfcdg/aql7N3xYJvavXnfozTrZwAs05h1ITjpoJ3WuC4VAQIuvSSGz3zwtlbI0ZRcSijUzmXFwqlwaCEawS1Um/WYrn1EdxY0Nc35qYyEHbS86nnjtRQp+iGETGsTjmaqBNR0kFxMS1Q/zXJi9ZdpTEdD1FNyNWqxkfBJaqrlppJFxCv8XQttsVIz8Qcg4Gg1FkzPNbIaYqp3JNe69UzcoLMiP9krqikfs3iflxJ15M03l9S0LQa+XarF07H6QP2TlW4uLcbG4lfduBLd5dfGRrHBd98Vo26QgLcjVl72n6AcC+jcw5uIfDGNwcINFA71dXdypGRXkNvKJ37+XDWmspshMzazdZkMK10JJwJ2Rrt4FqR289p7w9nAOo2OpaqnkbCRuWUW7fVE69VtRUEeQiG91dbeFvi8uNrR9A5ewjGNpaKpZmohBJAkk7K7XCzxKhvO7mtIsZa83Rq2hmgUUa1ST07ll7PDKKNy+plOb+k7OQUenYg2sPiFTIrQts5+b5MZ0gqNqStJP1xDMF1YaFI2sW8WMEG7x1d364qq2ge7aONI9rLMCUzBraKyopRBp6wXIWbIxVuFO9K5df3B5fMQ4ywnVslQzUYQKEYvBjVVWqCrsTVMgFUt/NsxseGqh3C3i+/qIvkpJW0mdUxb5UR/oG/ZN+GkWzNsXUXrthu+NfDV9Fw7BP65wxWBtJKUZK2/ARYqCPaEqa1MF8uKaXEOlSPxHyeYz6oFeJjKMp9i6/UAzJK75sMydPnFRGhJX+Bq+BZtRjamhFZWPb7AdsXqST9qHlVDnHyli2o+jKyp299ITq8qslyMXKqCDwfdMrD9w8B+lM0wa+lSNqGmIiNc3faKtVbS967Es8Yr1K+TdxcJEcQZ9wo2SMVSPot3b8Lap8m3YGMUSNMEZAtWwFMPJKMYzbaITdIvmqRiSO1IjPw38/+/itUSlNUpW89VtMoqresJhkwIUrCSFvxRJOt3lEStt8Y4LLNkjSFByCKRoR7VlHKgz117RFW0rDG/ruL5sDqmMz8vssMqWlGOKgTkpIEDeOgYd/Y4VK4rlR2eHHI6V08Rccphnyx9n89C0bnLmKZlkjV1FlWytoEAW3e9bitKSLhumofDimmBntIvw4q89m++eMHTOOp5Ur1xXScu1TEbLRG3SDcfKXVimFKVbJN1AePBQEz+yTG0en+d14nR8PVb2E3dKocuDQ7UQH1Rgzak89YoIcoimoQj19PjwMK47SMFl8fojEotzLyjkOKPdoICB+ctxcvLb72O2MS0aprFtVJVUBuIei3GdO0GfpKuUx8DFL0f8AySMvxY2vDvDFHUVOLdSMhSO53V1pqTSsBZrzeaNapS8xHIJ+hkxVBNJG7lIh5i9rEwtIgzZOmyUaFzuy5VQbiHvbrhwO8oUw9M2tdzGhbuLb9qGL3IAi4tAliuAbfY341tfTt0rosMDERFKqR4nWpOFqUTIBcSYCBCI7jLBn7LOZU7QWZiCMUiKreYA2rjZcSFo6gqj5gt5erA1Zw3GotzL7QytK3HmTx5SUtx1i6BN70i0itMddIkh+99/C10QrGypkW3JohJbtzWrxZXN/L/jLV/V7p7IroCr9kdo7fiSIvYxl/Nx3AxceTNeKj5WYcST0GpLr3KtmmqW7ulRsK/pIC5+bbZi6J3takonQWFdMIvl1btLvVUlUj98S+PAtzYi2Cs9LPEGEg+WSE9ddsVqTU9UR70bS6SHdt5gwoslN1chAilp/5IquITCaGtqwDYrdjob8JidvRbhZGzqutvxrUqWnuxum+oyWkM1Z/wBCkbRrVA2DqYGYVYpJONxAlYkQqqkXgHEXWGeNMVHUEgasJxjM3Bm1cvX4r+8KSqt4DzFbftuwT4qZc5/0LF5TZEVgrGRcOJpDST1Bdq6XStElVVXQKkk43kdglpYFlbZQTeXlvruqoaPWFwaSQyCqW4wMdw2Kq8vu4zzZMOvk49u7qvInI6U1dTKyCzN4Ma+IQSA0GKkbpNyPoK0CvV9rzYRg68ZquJBYmCD5w4SARFLVQFDwbbtm/wAG/FWkE2hvuAk6pgzFwe9y5Vt2eIt19p3eAsWtGlIcIsXI1mmoiaVyRNnSukSvlIxs5BPkuwWWDIeklHtT2pizfuTfLM2bYW2qRq2qEQpJB4LjxIQtNar6QeS1QxiCKSBgq7+kHepXiQhbu8w7fBfh4jRrmNY3tZKIk1Dbguvc/akY9O0dXVPYIlyePEenFs5wlKMcSsYxjW4G/XFVvpKqqhyCQ3X3HguQx0qgZ8yCqiHCrEjeJaR8w9WGMhZp2GiuV/hxaq2a0fHPk2FKLPHOkNq7kgNAL/DpHvAg9v3cVV1y2JOSFTm58WivHsXNKqmEgMdwxcK6VAVSuETS9kujBsyTraoGsn9HWsAlKsAK0HHDiIoAPWVg7/fwIaT+qs3mq5SQFYgBUSS1VTDwiJ8+NH5MlVasMk0So5MYZITJs4FHcqX7UQ6vewi4mcAaU5jJPuHxLPEpRRZZ1G5JHvWcUJcm1gl+7i25Ux9V1rViLCIkYZj6UiuMnKgoql/JAkQqn7pCGKQT8FS1jZpERjaXhwR8j6mqRxWMZSLCQgWTW7VQQkfQqIju3EAAQ6qtvjxya3gLtSIktrdHTapSNpX3tEIwWX8eyM3DJSTVZ7lnDoFV3hgNoiKTgiMxHrK6/GdYeq6nkdNs/kqc07e9+oOlRSVMeX7Kz58ag7UvoaSNPoNalgJZwbMnBtV2sSTpulsIbiMDEkr+Xnuu9nGGVkmAv5R/PUSzVWbq73sgweldftu71UtxEQ7i6z6tuN05Q0pvl2ayFurX8KccMxFyg5EH8hLQkywXQWMzas5uPS1Y1IwAyuXJJe9LqG2wublxQHknmTUBxp5i5JVVIptLwSeu5hBQubfpCqhafxeDxYNNGwf5raJTqRrG1nGOJIVR9VtFzbJCrtIHRCaQ+wF4WFgV1rRbbNCtGsrmDmPUa6zdroAimaCBgHNZcCFgc3Lz7sTpxo2i2x+cpu1dS6XrJKl15WVf8G6Z0/RtcRUervSaOWbMQEOjcAh1jvIbgs6ixb6JrSoZahYN/PtmLZT0tzapd/cYgkdv2BIDZu8J2WYF7unKNpqpGcpByjGPeQv+Ev1WpAXSCpXXFePN7eCVTdWysmo6fozUDPKgKQkuKTpW2zou17A2+AcXXdmmdoYtNir7fUvg/InCVkTqgU0i0lo9T/NJD90cWKj8w5aJnUXDUVmfoV7hV0zABV0i6eYcQEbWErIvBh0n7NiLgdnFkPDj1biVVtDF0o6Eq9cEagpqLbyizBz9ZUaOm67azmES0hEx5brrunHOmqYhdEwFaeqrmsWCaMkQM8k8jY9lD1LVNehTlSGw/sDKMAdv3YbrCLiLlUhvvsK8Q5sZfqLMiYVlvUMNVrV3ZeLVdpwaAmqfJcQL3/KR4LFf5mTFRtk6SqqdhU2TUm7pW6U4lBf9krxBK/Dz+bA/qXLeHVTWc8YDYTBJ0gQxaCAFb4S+XYN/mxtG6yleKRj9FZCnCppmoSV4yyp6epWi3GalaP4ienrdKGFzL6ANnYEW49UhS5R8ZezgW19WNf1EsPoqfOVCZZrDeYtniq8WNo7x/QABCPSIEPm5cEig8zcx30kVLoVwVWKO2/Bto4XQJEkfNekKQ3mViSvzF04jZihYEphR/PSse2nlTMjQVdd6Rnd9qIJDfvu29WCs/KLWqcrNORFqQxpUG2YycfT0vVqgvkj0ItJs1QYpOUj8JAWqZe3b72LsigsLcYdKuWYtUr9LXvckkHg1bSM/ZI8Rb6RZsm6cIEwkRAuqLUfVaBCgflLX2fBjljmXU7BmnFP3iBKX3a4sFdLf4juID93AlylVNdh81NqEgaLtUouMwk4LhqwNcv2XdXfLi1MH1Xx8M4cxOckomWmRqo8ertDrK0EiK7zYp0hW806WvXm2niARZ3W+7h2zqFVLh3/54m0Q4bgZAQ0/caR+5v8AexnQacwL/wAfwFNHSaMULJdLKBqi4eOqgezsg4vItBU7SMv2ppD93FeoykvRW80nDxbmGbLFvEpCRFmHNy6plbdy4aVJNzEzOOJKpnq7x6rtVXXStNcQ2iXLi05V1DCU5NC2kaDhahayCoJEi7ZgqqJ3WhpEewOnpxvQbyB3ESy7hT2Cty0avLUHTTOl2WR0I8i+FDSeoVUkuDU+q7VIhtv6kj9wcVpxFwlaVEijUGQK+s0cGIjHzLdUFQ3XH9qJ3cvxYvLSgaZiYtL6XZZU1S8YqkFjJpNoOiLwjocDpD8eK9G0rEOieRWWTMKFdGlzNo1mqavu7b+rmHqxWencl7RTEiH8/wBVU64yspuOY2L5YwsG1O9UOJJqThIOi69Ury9rFZrKg0aro1RGBoynOIb2EaDmO0AILC+yXbjzfFdi3Ti+bUM1Wh6tCQeMXH8TkChmaAJbN4kgF3yW+/gM1dV+bVEVRxMXRkZIR6xWs0F1ddUjPq+q6RgXlwa1KO5TFAuQYOYSSIHkIgzWSVMdBdLXtPdsIVbsas7JNa5l1ARQKUbNM6dS7oHcBFtUgE91wKqqjYFonds3+XA5oGKysrSqyRzIla6XqKQdADqJbN1UEmvSIK6uuZj7RjsxquZpiboSlUoHLKcpuHh3l4N2TxJyx4o7OYlQFKwtgDtuu8uKX6iGlWdMtCbPsv5FKNazc8zFdaEVNVmo5qh+IIHy3WglYA2dFpeHETXUpWDVw1laajaTY8LZpOxi0lXDk7LSAnTgdg+a4T+5igzNHIrps0ks2ko+QNC1VtEyiq+kdlyukrqq6ohu50veDDNnSEDBunlPP5WqnQyAqpCp6mFclTJK0yEVUL7hO0gIh6cAhUuNaRJMHGGo7VKIxNPT016yq2m6cZug705B8/B8q5Vt+y2KkF3gK/7uFI9Wk2tYJ03S9Q00TGxXj1G0M3XBmaolvIXBCCvNaY2Yo0dTtE5dTjiNqDM2p5KHlVdVKPkolVAVzHbtSO0L+XoK7HFF05Q83XxTsdJKyAtFT4fhIkdJA9xAkXDr6vOXVce3lHBwkQakIQiYKs51SL9Jm6bUfWyCTF6IM5KIGGjY/VsMrNrUlb/exY+zPl3n/U8e8PK6IocI9Je5eUqKn0NU1S6QV0lTMRtwNMwoStqcmBla3YOVHEqqarXX3IKpAf6DVuMB8pDjT3ZsqitXUa8jaGyIqGNgUi4pd25rRw2apbt+gIMxIi28o4tJ8+VDvDlNehcTNK1xAv1mFWv8nqcRf3g6exLJm7VXO37LSFqgdxeZUeXEpSuX+ZsFSy1ZU5XlDs7hMEHJRCTlV4327b9crC28oHtx+/m5jc3KmWuZsXPCuAB4u2qYpN0Vl1gLi6SEw2ecvJghQ9FsIGP9SOKshp6PSAElUHLoFSQDzJFeQF7OB2ycN+UdKr0whzIIuqhrBqspPZlz1NM49leASCsSRaqu4tIdVUby2l14yvVWe0rmDMFD19KqjTYKmCQx8WkuQ7thCga6SQHb58bUr6nKbcN30O6Zs5qBcXkkkUi1QFIz3WFeredu7GQe0Rl9RlLtWM3RDBiu1cCHGuWUuL42av6o0gIgD493lw3pYT1KstY6UTKygcvctMo2dAUxPPKsmJBdKRKNm2CWlGAZCRGhpL2N9UfCat3kwLS9Ym4UMmbYbyuEUlSsSDwfN4sWvMmqpJTLamcnZgkpprFJcQhIIpAUtHB/zVdK5U2p3DdaR7gK3FDikGiDYW6TZ8QpbfrKG7Ci6YYlj0rYcONQbkpyLavnsk3RVSY2mqAHxbwhb83UQcg42BIruUnai7h9FSBSMck2QUi1yUFLSIRNJmW4+D6jG/n/AEQ4yRRSvC1XFklTsbJLCuGk0lh+qqeUt3Ly41Em1q2Lj0UX9Nx8CskThquMeO1iyO0tLVAh1bjIiBIA/wA7uwrZKBL3EAzxGaa1gwbVRS7qkmsIlINXom31V1TsSMxtut3GFlxezZfbjOo5b/QNNnR7pYvWEg3NclUCIkl7C36pAOrbu6gsxpYkKqJqnxS0Y84RI+HSXvQ2dFpGXLf5CwAa2qtabmHC0tD6TNIW6WvFyJEKqtpd0S/Ifs9J4aNOzGHKsoQQVdWjkW6gtjfpeBckr9vlITQvP3sVeZKYgrWdISxKNXpWqthb/VdxDcRJeW67aF44cT0toNSRYLXLODBJugRXK37rErgHzeXEm0pxzS8G3dvmCrN9NCfFNnKGkSWlaQ296r4i8Ps4Iwd6u1mqykpiqnxbEopg/F560dAzYEk3AzEBSVO2zx/i/dwZstgqnLul1J1q2lRqCsvT6rhmnFWgTVUSFd0Y8ngENwnfgTtX/oauEXOiguIEBaagGQF7VmNFK1VDy2VkZGpRVPw8LMOGgOnrSOONXXdgqNgJIbuKICHm1S5DvEcIwM3SlFay7kbVNlCrtROX1MZeRo1ChAwMe+BLSJzHpKqmSW29Iusy8vsYFfaAq2jM64NGiipWto2SN1e3J2wapC5su+y1Vb+XptHBuKIh0olNGScvHjVUN6muuuAh12iBb/Z8lvsZiVobK+sOPZ5OVDPELdUCeO3siDtmk3IuT1d19Vl5iG3DynIx9JaVgy1Gr3RMMFG0Kzp5CHfNlG4HcmQmgkqZfpSEFSsIuvAnrZBtGyyjOWoxJJu4XSFq7aKqvDXVMue5VXZ8BYLkGbajY9vTCBy74vsgXcmgKpfMNg+XAYqh+c9mITZ+rHuUd4KskFQX4wB3AKVlu7aPix7BzpPcr2mDM02kN0k6NXSUI1T3Ibki3cw/exbMsIemKgq5nBVVroN3paQri8SQFI/ErqjbpeIfv8mKy+fuVbmCrZJAW5GApkgOqlu5SK2/ExlzUUlTVZRb+OYvHNrgEFWiHOukZWkh7w7cZVz1i6Vq6rENOlX7O7LnMSqHQ1VVDNjFRYJJNWDHiHRM0A8KBaApAJ28g4B9QUQjAojpLRE4R8rJiCTxxy+zy+/grZ6S0axzEcQ6QR6rFJK1Biu/VVJidgiSSt5H3o2jynZeB4Fck8h37dQCh0h291wzy0h/cw3pXzAtS58TExRayiy8qeho1Tj3TNpxZa6rZodoiA8l20d2IXNIoSGdR82rDyrlRX6kqugeu30tu24yEA329Yn58eywzBDgk4R8zJNZKwW6a8prkQW+fFqqKScuqfcBFrXOHAGDVpqpIAqflIBV3Ycsv+lURICQpfxHqaSUZqrXk32XWlu29N+PCwWIRtAsPHrM0AZ7HJE0Zt0HGqH2CoJCJpeyFvN4fZw3FXoG32cY+uEmniFdSt7/AFhgSUPVAthixZqrELo1QMUx8G7dirpoHtBVZX2bufFweU02NvxjVm8IgLeI7UrPatxCyTUGBDazVQEwutJcVfuYaUToC1EVlbu26b8nVsfsEZZVDFT8tU88znIYVmqQNbhVSB4HNvE0rDEdthX4l69iX6GYzxKo6bjIpNIuIbvl3T9XZd1E3ts3dW4BxROxTSBVPMOH7tSpvQnEGHoSXi54kAT8iqAbzHm3Y0xmXVWXLeMXkoOpGVQSiQCgI8Zx3DGBkV+kAluu9noxe/rppd1ZgjyqqPeQ4mJl5RWXib9WR11p14AR0anOOkgP9KStzpIuY7dohuBU+e3CdOuKedR7qbSCISkDNLVetJcCOzxEWkkYeHdhejMzqwqCFmZV/DsdSHZqumDkWioqpd+KRq6RXGRaREVo+AOTEixrmUIkQf1Ik+HefFtkl2ev+lNIBMlb/Pdbb4MRpu1jFWYSakJKDqCoathIlu/hKnZqpuCMOEUAHxpWfpQXPnEub3cV9xUtVPKVdVs9eNF3TRgqK8M0jtJ4PVpEr+ivtHdiUqKr1ijRP6Q0uSbtwBumRMrVb9o3GRlvtt6A6sQPCyUHT8ownmckhTc2CpqqQDJVV0SpgI3iIJF4R3bcaJgRjtQZblj+SdSSss4WVYer1DV1+GFXVtv8RYLGQGbKOX841cnldH1DMLOrGb7VteNjPbalq3JXfD7eBrMRMVCSy0bTjOcFiG9L1ylpOr/MODnkZl/kvmNMRsI5fVcnObSVaO4lJzHK+K4kt4D7ZhhI+QzTLGGVrWzp30Sr6OYTbqWcrOjG1Ju7QBDhrw5ea2/zCWEYxCuwMgRgY4HAJfatH6qpkl4rVUBD3cXOTo1i4o9tHemTYQraKIFUFAagk3SsG3eN/J7w+1igNHcinItXyM1HKi0cKjqDGkJEkQ2laWr1bsFk0VO6LrstSVU7maBAPKpaoKLrCTj2r2LqNWNdKlc6F2uuuIh1WpAVgfNgWS1B0CxlHTgajr78sOk4kXTlB04FmRpbttio7tuz72CzUYS09DOmfDpromgYmSapMSL3S1b9vu4zN6aUbM4GehKjio6ap929S4/VfqpkxVSu4W7uis5j6bCtt6sUVxNZoxFX00o7kjVOe+WlZveFlvpQQkIdwmKWkJiNu760V9wcxEdxYcU8wgjpOQqqi42uHY6oAlGyiAiS4Ae7S1V1du4rLLcUtrA0ZFpuFqXptV9wTjimrkuM1VXBgNgpE3VENh+/grZiMHmYOXpHSjZjISwACQ8WTpDS377u/vArCLnxGhEXSI+ZWuSAILG9fT09UdVOJKq2bli8AbAaLgY6CXRtPCdF1CjS9RMahOKYyHBK3aDsLgL5h3ebETIMnjWSeM362u6SVNJVXiuJuMP2vX8eCNlTlNK5gqJuYmuaThVElbbZCWFB0JhuvFLn96zFFS5rR4xANS+gMQdR5oZZtZ2iZttSnrNuCurw5L7CHcO+z4sCOoZGNpB7G5QLyRuaom1TaOn8ewFJ0qk4E7rnOgdg2l0WmPl58GunWdajlJG09HVxT69WN2YJesB9Ou3cmG2/SuEt22/2iwIHVKfRNaozrSIqGQnZ1L1cL17LteHcAqkSRIMxK4Quut0iG7lt8xXViBsSSZpzpIhQSp+G7Ovr5NnT8bOPlLHHEKaortRDStMVSNK+3qPZYJ7vAeJ4Zmm4l4o2qFaF1oxuDVmk2ZuqgQatFREgH6wkSQF7F12zoxT6oyxqR/PI2yUe2vEPVwvZFJB+gklb9XIgEdVXbsttPb4MLZ20V9F2bGbY0MzTF6kZveLizklUiG0bjeGI7y5rS5T23Fj4wMx3Ip0vZTzLWi6GlMzFKky2zIYqzkePHtU1IEmLdXfarbYqNnNvHSLm5cUXtJVkjWVVIopQ6SCkYSqCrvj0l1VbTKxK0OTeRYsHZzQbSNZKTaWW7l9wiv1J6LIBZRytpXmuqA7C6g2Fbv24FuZUjGzNSSkw1cyC8g7eGZOV5IHIEd2/9EkYD4BIMMXNDEV9YGZKorKm3RI0gJfyjz4YsUn4qEZNlUEbdgkd2JBYgFH6xaI29QYZtwREiNIx0z834cACWlEub06Qvu6cadyVkwkcu3SlTovp5Zrw8dGJqyISQtlTIit4NwqPD8gaRJc27GYhMBHcYiN/N4cbG7Mryk6fyin5un4xpKVGd5zK79JdJBs3/RJX2GkuQ81vPvutLAlb6pQx9Crb6l6ZayCJSlG0+1lgSNV4Ug1VVDqIBHhVVejpPr6eTFTGU+iUfJGUwxp5i9Jw6Z6rXjI58qkY/V0klRI0ld3g5BxdqgngKJeNqoqGKeItEg9WyCUaK5obOWy0bL9ohfdbbfiv0zmw8i6DfUlDSsQUw4e2iMuek1XaGHk2aoHbuV2YDo3ZxVpaEC6gqqSqiQGSkW0empZb9SYINgIPMCQiBl5iw6pGUgYuaavKjpspqPSLv2QuuGJf/OgOzC1ZUrVtPySbyqo1BspK3uG67TSJqv4ySJIiC32MWXKbLCpq2lo9+0oGXnoNKRFq/JpqpJbrNpKgJGHPfycmGpEKq2LRmU7vKCeptdahqbQW4u9d/SK8SEq6ExuG7vVxvG0v0Vp81+Pyl8rckTmpQ4GHVjZL7Vw0VhruG37xFq4JXy8m8R5D6MGuu5+fyogoulqFh/T6Yj0pCzScu3X9w+hJIhHl5t2BJIKzyT5GXKYcx6M69P1pGtm6REQCN1yt5CZj03We/jO1L7YO5TXyl8pRdMc3vKPnKaoCSImERl6hNOHrUDIkGSSD0eXlQNDStM/GfViDrahKEpKl2/oqinIOInQE3QLuaaYNrm529wuq11QPeNoHZ1YtgU0wOqE55xFOWjF3aQoSDfvSsEtokGy3cNm2+zxYn6gns06QjmzgISI+j0gqA6UXexXv6Ll9DZ08yW63aWKqd/THUiDEpCgIOZtPwMKm5o5GmlxG1m6bJyLVB62O7YSSpj3o7y32bbbdvPiUo/Ndy9jyh5ZzHs42VSNq8XVnosSED26tgaTj3dUbsWjNIa2eNxc0ks245uOrIpuY5Dj0Nl210qQ6o7rbdIdgmWK7lrm7SRplFZjUku8knGq1VlHquqgLc/0RJAkWlu/VBtw1psrSQKt0jQTzKoNtR8s6Wi6npyeiTV+quYuSSL3NDVJVKz3sVFEgIh5hLxXW24LGf+XcDQqzM4vLKQpxZ6d6SozwSDBUA3fZaQqgW7ZcQ4ouXkNSczUDeErE5xBg4v7yGZ8W6v8AZ6g5uTDR3QoiS1LlpBZt5vUOjUSsw+iWTBA0m8whPcYvsDlJAwJULi8Ko+xiAYyK3Eep6gzdrF9ORgnZpMxVG/cQpCurvC4BSvG3p6sFluC89lrGUwg09bvz3i5kAXg1X2/ZcgbYQcWeUiLb58DiUytJCXGKqCeaxi0eWqqI963JvcQmKqpkJpW7d4fDhI+4WbpX2njEprmWKpKwTFnLxUhXQxogb1suuhehvLagQJJON91lp281m7AhzspWVi4+PknuVw04zcFe1XjWAtmqQcppLjoCrdy86pc227F+l6Fqmr6xKo5GvnkGlFJaUc2Gmni4Om6Q6ViS5/xi8B5RuAhwHc6pSlXFaLMKLiiYs2XdKkq1FmS57eZABEAt3dAn8uGdMOlR9hUUtFIe9NLf4urEIzQOXq0njVuQ+r+6FYUhVEvavLZzdOHsk149qTZdskRdOoF1p4qzUZKk5DiV4hi5Z64fWS7rS9kbtmGdOM2yhuURIQdGSJemiKZAqCGp4k0rcSVL0z9JZL1a1ciksYXJJkkJGurfyD5sQaUii8b8SzWTUTPqEtt+LFQsyswnkzbsJBUnH1UeCtvI1dttpiV/sdWM1F3bitRogm9WZfStMulGD9Zsg+SED0iQ+sDf5f52K0mzqMlO6lGwqdP1Mr/vYKtdTLZ/SaN6M8RRQA1VdrwwIaRh0kqA7xsL7Iy6ebA94qEJMTV9YEtds+q22n7dxGfwYLpzdwHUgSFRT4ppBwowm6mbkskrvSJC0xP31cLzEM/jnSYK6o3j+lb27w5t2FG7+FCSZvClZJpw5GQKiKqBIH4xK3x4/Cq9dAVGzCqe7VExO5JIbrvdwaZHiqmkyJBsKdi+qXs4iX7B8r6BOHWR/J1C4uH7uJRMnLpQlkFtW/d3bf8Acw1dSLFqp9ZNMS8ShW4+g6YY6FaQgjDl68zzjcrRlYjKymqjp9pxBfwlMOi0FQ+1VQSNUUki/kt+M4SD+o6vkFniUWlcG50RJNSQ3ns/Rfe8ONZVDXNEllHH/m6rzLWiE5qJSZzcI4Zm+fvHCW0iutOwTtEt4CXmLGZhqZNBRRFtFQ0gSStiSnqRLSV3F4LbPmw3YdIfTFZSp1lqJVBwuslca8a2t5SuYNdvy4Zi3YL7klhHzLt0h+4RYIsTW6rB4iYhT6Fl6pEo1XQJLyCSRfBhnV1axVVR/DODJ4+sAkF+KVFJDykKo3n4dpWYNF9zbFCE0Mdy7plhT0XJRrynKqjymNXukypziQO4CHQIFSJIxK+3el4MaMzOGYovIsaDqXKD0U1KungKqyDlrGiz1i6kkEhI0lSDqS0tuBV2apSmKTzOjZVvGnUMxw7g27QY4nmkYoERnpd0Z2CJFcB8gnif7USTBXMJrMMGBCnJRbdfVF0a6RGd14pXkVgj+qvK3Ar75IyhamgyjAm42C/Zj4PtS/DjqYhgax6awNl9QD5hK5Ig6+kTws1vSdJmKy6CgbtVLmH4MSEhIrMhUZupiTJa4xtUM0CH48Ug+SYE0qPxN2zRc2/yBY6FK/kRXIvYLbiWUdLbQVWVIT6SPHTVuiThMzW4YT2alvLgnrPsoaC5iJtzTzrjPRGxq6hpHpcawSVC/wAQiqNlw4dVdUdQ1G8TOZZoMySSCxs2ZcMl7WkGzd4sWqm6rZxbfWXcpLvLzJVJ3ual5CStK/38M56t6jdG8il5tLgztHQbHc3EP2V91g+ULcV5+rarRaVFTVtU3Bh1INwdNSNUFSs5dLDwVUSKwgEiDZyYUcNdVveAF7uJZ68TSnMv3SIt01vSwhUBAbAU0hSXL2iuxdhl1tSwd3gFM7rsU/LkKhBwTYQbCxDnTdh8w4KA+oUvtQj0v5SwQwFVPwNF0wnlK2ZS5jUZRsot9PAbNhADXHi4niVSVt2CJAN6XtcmGLrM2kpSuE6wpwEoMW6tqqrmWBmK5+YGopHbYW/YRkHOWLRk7RdAVbUj76XxsHKk4am1Js9YJLk6Eh6XSv8AFyDbv9jDwsuezm9fSDmBh6aio9v9XIZSG1TSceLXSXEDG/qs5ME0pBCaX1k82Kh4vMinqfp+oqMLMVeoxlUr2q5JLlc9tLnvIT0r9od7z2bAxW5KoK/9Vt+PjUJBw4SDSfcEg+VSDdYkQqkqYdJXbTE8WCDyjyxezQxRw9BOXiqvFNXMA6VV2EG9Lg1S+DEC4yxyuVzOkIp4CDZHV4dqIuNVw8V27NBLkKwuk8G5iDioenaLRQ1Fqgp6VkyvsVTSdLocCrf+lE9nmtxE1NI0r620YE9AW48OeolwxkfmHXVA/a+TFqeZWRsbVCLBem/WEaG1JQnnq9UQvHyiF39LRxZs0MvstKaaszZsHKEk7s1WhOknhiFlwKleRH71+K3D0yV7G+CDIv0UhvXMdM9/MBW4IWWOZEDTIqGz0EJJvql62QmWqS6QGlaACkr5+oTEw6MU11CNnjMop0iKjM3GrpltG/o+9i1UrlRkbVVNqU9UcWTaeVdXJPkiVuFId1lhqiBl79+AwfanrRz4ux0qWTnH6FcSFVPatmnhcPpC5KSXeIPO6uSEj0vHclvMbbbgM+fA/q6BWVklnnqpBi1eqmq1fO+ZU+YxJUyILi8Jdd+IWtMiofL+UUbOoeoYxi4vNm5fU46ZiqkH6USMlT+TEk8oV5EpxYQ08UqzmEkhSkF11V0kkjAS4cSuSv2Fbbt33hZhjp5SSrWrBOaLClUVkmzGZKTSSdAKDhLj4xVK4gARAdnVuHw4jZ5KlZeHRlYubkBeKuFUtOZ1UFVw8dwCSR+HFZcLysXxlBuKqpNjFpSJhrqMD5wMrDG8SVDl6t/R7LgpGNgZB5SSQCu+dgl9b7oWBWAWkYpA18xbr8eXldMr6t9QxbyNdRTyKUaIG446LkVUDdWdIgkQpXfyocmKTIVM5l5BxN3kks4/wnjVycfEZfvYKibWqqaot0jWtSTRLMgvaxKEoquk6SMOYl7RsS5eW7Af4MH7qxJmLNuqdwjq7EveMd+KnyRlMKmGKECqimDo1RWMuZN0SRDu8NvmwQs3nn0QFm2pytqjmpBITZPHzSoLUlQ6At11TAR+AufbbvrZUa2ScRLZxW0UuUmNgrrtTFuh5SJVK/w7uTF0r6iAytj0WKFW/SC9U1ZGLj1UnbUDMO6VsBIgCzduNK3wlgUdyk7tQTmGraeYrP2DmQZqA40lWLlUHLjzlrmQgd27bZiWmMtIGNi3iMpNzxLAkCrd82b/AFJW/wAQmXV4du/xYuVfU4wdUTEyq7CoZxu37pqKUuyHuuY9JANU3BBuvtHZ4QwpLQMPT+VritoGuXz5N0aSXCLv24pavMY3KpFYvt+ysEyDx4YNIElT6ZQWpqnUXkXXKC63Ed7GuwXECDd1aRB9338Eym82jZOH1QxFGJU9MWgqFr9Vskv7SoClePw4GsPBzxRabyqK8YsWMqKrwGwkq+JBIy+1JAErErvFtwUMv56m5diVPVQi+kNKxw3kijklwX/zSpWcnnxQ+pNqNzKz/mMxqdeU3M03FIIu91zZ0qlYqH6XYRapbC5vFgH+qbyUMZJ9p+Hiit+e7BEzOcMNH1UwjWcY+aOjJVIWSSThVK3YWqkkO3y7g8+KCOtderql+yv5vlwMxo2JtESFVOSl2DIlm3AMXxK/p3NpEHy4tGX9R0ZKOODXy6jCdNw2LiQiRebZaeIWYGHi1CfnAi5338MoFon7wDi9ZY1bTFQolT30Dj41wB3pE2NddXS8qRlhnmllFEkGLQ5+1XBF5AiSblrTyC7wEr9ByuGgqfgK8r7fKV2LE3nKwg6iawLqSeQ8a4SueQy8sqNtg2q9wkqSoD7VuzowpF0ui/kllmFNths2paiW0vLoGWzEO4SkqXdI02rVREzduAfpRbaGVXVSsMu6FU9LdZ4MLHJGKOfEeVF586eUyoK1OZaNqsjQACdNldAiEPEeqws96+/x4KmTdeU3LgTZhRKtKuDHSOPFkzQbqq9AarX7Xl6w22HjOMpRVPZii8qF+2fMVgLQSUlI5+xddIgCRmqYKlZut3HgudnHLyNoh16yhqnGQdPW+k6bLvNhNAMbC2Xd6B+I9u8cLWMBZFUO69SfV9RdZ1bKOjkQSh3SqR2NEn+gbxK/pEHheHm0huxR42eYU5ILUqwcsYpGz60pLyPekZGN5Wgqrf4ecbuu3D7tLZNxWYdRDKv6Vl2MgyYaqS7ZugTdezcrqkBJH715cocuBzlzRD/Lmqn3r5GXQbqpAqkLQpGwT3b1RVFUD2bef3xwYww0ZaS1KonDVNedp/Ozs7ZlVbT0JNm1iZh+b9qmTVJRrw+3SJIDHbstE7fNg05e/wBUymF/SilW8CxkE/8AnEfcgv59p7D+XEJmhlzT1ZQrVzVr9dcY9LVFDgwHQ8G62+3d4xAvgwNGPYroyrGKwUpVs/Tkg1ADSGUQScgvcAleIBaYAV360rfNjtNg4ntzwjSXOnEtMZDpL52Cwtysz4ET9M4tt0n2kcgcxJRaSZ14+j30xpJG0dpCgYnbaHkv5d1/ThRzko4azTiSipBDRdulXRJqCW81SuP72PmnV3Z6z4oFwsDZmlULNL9PHq3EQfyR2njqhe1dnLk84GFKbmYwEuaPkgJVIf8ANK8ntDjTFZrNXjK3vRLul/2wSrrNwY9eMvCvsQjPG3bizNEkySSBILuU+X93AJzzyyzHzNdNXMYjGPm4CBKii8tVLcJWW+ETSH4cAGgP6pnIL2x1aU5ESCPiaESCvwncJ/Lg9Uv2sez9XKKOrNlEOj3d6GkSR/MHvX4qHh+voyzBbzB9nUhq6rpq+mKmdIm5fJ/qgHmh2b1q5ZtYLMim6ohRZGq4jZSLZk5SSMwEVUF0gu2npJEB+37JC992eJV1NOm1C1zA1Q8aDpcN/wAXv94/qFdnz9GPo9CVAD9qMrTVYR8qxP8ASqKiQF/nQuDHVTQNK1lHizzDy9ZybfpJ8wSeJD7JWlZ8uM7dLW1cHCJ8dSb2GuK1UwsMFpHSvmzQORjyAr6FPM2Bl2MDCEco/Imtwq6Qaul3V24yER97EbIZiVDXNRSkrUD9KoE5iR4xWNcgNjZUztEUFQ3pEIW8ng34+hSOR2XvDijSFVVBCogexBpLcSkkflScCqAYqNWdnCp5lQln4UZXCIbxGXYHHyI+y8Su/wBkOMtV8JCWoCWqpuJ9Xaqk9mSjKfGJHNdnCSbNZ619UwjZ+QkkmkH2q4l1iXLd4b8F6sqhp+g6ZdTEi80m7TvXCxdfUfvFgRqRealBt27CJpWtoiPZADIUEHCU01Qb/srElVfdsH28C/N9tPZuUn9BI3M6mnj7itV00cgrGPFQDkS0DIjDqvxzO5eT251dYOaI5P0loKbiKjyiKWpB7KnMJ3mh2qUMwZFFXcUg4YNhvLQbpM1ySDZ82KEU84VfKP1bR4gzVNMR5bjuwXuz1ktmFllm41l6op5cWYNZBInaBCuImbVVIeTeHN4MAd8azCWWZvGa6SiRGJXDaWH9ZTEJ5EYiKtt7jZ6pblPLTxncAAlaXV04jXcoCpXoaRKB4RHDJRW5k8kW+5FuO8uUd937pYhIWq6bWWJCpWzlt6FfRalItB3oe0lyKj8OKKegnIsBTp11prSau8fWkaSibarqfGSZ8qumemrZglZSRtP/AE9gpjLCrFLW7zXXgpDm2CRbejpwDpJBaPaFIhbJRhFaMi03Jf50f0ReUsWfIIV5TM5iEYCqinCve8S/QXIKjql5QuxczbyxcwJko/Z/kgK11rIKStbiUq2q1llpuaeSCjog2rq7fh5MW6Dp9yhBqOXlotY+wRS8Rqn0j/TlxzB8M6cd6zSFO6y1MrdntYvg04CUe1OXcjaYgXDJ2XX4VutiOkUnkR6iUKnGAqzsA0hsdAkGr0eYi975cRKLJZWBJ5Zu4gwH2L+b5cEiSaoqw+sk20hSdaWmJjcR2Xe34sVd0k5KldEAtEx5R9vAcoL6oWHhmz+JcGFtwL6W4+bZjK/aWEEs0XDUBtFFo3D/AOSF34sbApdgbKn+JE0lyBwZCIn128uMedogHBZwyyK5CS4+luBW+LSDDjhjVcC8P4IG6/Bl+ZWxDx46UBnbrAIEIkVt28cXKUgZpq7TBdFUVFVbgTUC24PJ48QeWESbyYbsNEleIExK3nG0br8Hmk6PYVNJs2Dh49csYduqq6fpJaqVlqtlmqIkG/SC23mwTf63qtSRltivWpgnWkM4trOrO/Q0jo5VdwZflSTTC7baX7uGpM3K675gTzVkpB7HoIIEJXneRD7hbhwZKNUkqQrNw8jni6cZek+QduQtuaXKj5ukj2/u47mcr1lvQNWPWYoKVFLRrhq50rdIlXS5lu6C0hS2/tcIGro22/E9ulOSpCirRXiUlF5nNYS9dVnCOnDBK5Ll71VW34CEsQ+YGZcrlkTyj38U2nGrdUDcNnzNJdIQcCK/2uleA3mQgJH5uocaBrUI5+2hDjov6/IS0k/eEuW4jBCPFW3x2/gPGaO1nKemE7RsvNtgXTah6t1WnDpE31Ri0B+Ig3buUcVWV5qrdEfZkqKvA2hkgTUEpDy84+fwkCERHuFbkGIqkroB4Lz34smT50MNeRY5h08+mYVVWxVo0VPVL3Ut5j5Qt9rFRlHTN7JOHjBmLRFUjIEBO63C0G3knsszYRILk6drg3S4Yblbz28obzxqnBk3FLh3r6TJPIWYgKkqHLxnUdD0zHtbGa7kIuDYPHADbwug6Q1TvIudU+fGSfVzbjFGck/FCQ4g+6equl0tK3mEgXEOa0v6WYLrKccZMrLUBmpmDVVTuOHb8e2QSSJKOSsEkkEhcEQAqO2+0B5ua/FIqqo8k5uU48fpUzv1bB0gEBuLfb3qv4QxlacXAMsraiyjBVsaKp5k3RuZ0dIPgEzMiemgqry2bdcUvdDEfKLyTKN4NKkoZiKp6QOU9dd0XT9rqkGJR1OZfN0xeRaMm6eN96S68cgqQmG0Bs5DHdvv5sQqlUNn8aTYmblmmZXKqIQze8busSt2e6e3BrBPiXaKhzKjpVfdJTDcUzeNiSI9/fpEJ2e0Y7MPodrTE23UNxULlio0S2IILi23+ISVSLVKzzj7WOU3Sy7d8co2Smlj5F5AyJVIPGKoFf8AHhwLA6th3TCJfxUCSSHEE2UMiVX0ritEkt53XdQdHPh5mzQgqi1RTzyn5JQF2zkW6p3oKObb1QMbhIrC82K3JLgknyFb1W7fmw8eC5SUJF0CorBziuJCXz4YppOXTxNg3R1VFdgjfaHz4kAqRKep9ds6aItm6IpJ657VEte32rBK/wCDGkcsEpuTgiRgoGT4VLerYzLS9q0BGz4cZtgX7tvJtzBza6SOwRRSHb8fNjV8OqsTFH645u0gFW5W247N9whsxjeLnYNCJDuWq4eanqUk3M0h+u+kbuXbu+bFhoWogpupWk6g8NrwrxK5VQSJAkhLeJCO4/ZHEBv2gHoS93BMy2ombmo9pP0/mHGsZFJc9KOS1XK6VvP3ACV/wFjndI2brvZitPXug0x2u1XvPPNqj6oiXTNCRheMcNw9Vv1mFyquzeBIKpEdl/m97GeqbmzZSzGSrej16s4RXikh4jg0BV9nSsOy0dt3P09GLPnTVNWytQOZeTpI1yikgEn6sSugK6t2wkhdJbS29IiPlwLKgqpFJvHuWrycFZ6f8UaGqgKFodQmIpXF3vIP4cbESfqCksgyw2w1FaOms2lq5gfo9B0q1J0Y/ZPl11wbB59ISM0vKOlgBS+W9XoTAuVqYoxmi7Sva8NErocUAbrhJ7qn1Dz/ALuLvk6qwZtZStqlchT8fJs1WaVRVM80LjK0j0EtUdUhDqAdv3h0zr/ISZlneg8nqlJw8BApCNYSne27QMxJcQDYQ8oYOYYrOgoiXzVXmsBpFQNUZeQjWSajPU9OLpuvt5KPVZqpNtuwtJuhf8fw4JbX6N8G1BICFMEAASVEhD3UucPZxU8zGbVgzZsIuegVIFl9dQaPnjrX1d3dGLdJXbt5TIcV2hZGSqBQpVeHiPV5qmJ+r7xNIw6FbyGzpLaPJgS60LtXRi4ZRimdvqxafiIoscVDuExBI4whDmtSXEixpDISmKodU4XoljiagopRFUwYfkNVXV5bUtUQAQ2l5cZGE0UFkwjotJTV/SEQ/ePZ82D92aPRUjKVkZp3ELuKUcNzZuW6CWqkusNtg2n4PFcPtYz1sAKepGSKvrmdRlFADOacrD85DySVo9eHWAzbsklSSS4VIDIgE7+6MjuH9LYV2KTTtQSQqSEUvCM5Vw1+sKqoIAhpAFxGlqmNhDuG8Rxdu0HKUyzzBl1odzK082dKAfCOySFvzD0ski2e8Rl1FhvRUbAlIIvJKb4509v7tzDKr6p29IuEL/lxsRygYnFIgmaO3ZypieCjlKjL1bHxrgVfWJO+I4pACG21KxJIiuDkJL4sAPMhPJmjqulGDOHqdymyNLgxkF1UNIDG47L7HXPb9qBHgtS3rWmqYb0xRs6vQ7mQV/hEo+LFtxQ8wkJHpKgr9r4dnKXRgSyVGtidKPHtQrqund9z5y8Zd+qfOXMR7vjxU1VNL2U7PNVFUzTOUUcRSVEsxZvVQNUuPeLrkZftbrw5vBg6cLSvqNiarBsk60gvj0tVIUgs5+9SEzI+bk97AZcNXmVcxrQ1VQMa4tPa2SMnBJHz/apWdPUri3RdSs6gYk8YG+kFAV/jK6QJFZ5kgIg97bj15bF2k7AUVanSF/tVYnSVDEoQfRO7zcart+Xdh8za0ILFZ2vSSrZS2xq9JfuEj81478Vlw/fkQmTYUhsCy4NmH7N1OuoJ8wJ3EtWtpEblQVSG3w2gW7GIwzMdxLTlAhQRrt0/eVIr6xmoiSWS2akakApCHuCIY7omRcxtURMsg/j2ajJ0k6BVyBEAmB3bhASM7reW3EG5Fsm6JFm810+hXS0rvd58a57HtS1NVsqjRjOjacJq0SBIpcqXN2qlbcQaqoKgAcvMQ7sdBx6BbEVkH3YSIlraezOkYah2FRoT1Hii9a907knxsyvMegSutwApLMuoUpwpJw/oxAgsMCQqEL1b7fshMd+/p9vBJrXLxGCkeMl52IqJ4kZrpKPoFkJpHtuG/aP3sKoqtouLJH6Ex7Ni7HVVXSajYKXi5bD5uXFLspxLlQNKIgMx5kK1MzYqsBWOpqPfRT50leaZVMkSRBdaBDuSP4S24qObVWw8JQqjN/QzyXg3F4r6SSokkfLuXVXVAPaEOnForHMOBZPhipSVjRYmqYi5aUauqZAPJaPC+Dz4GOaVYTFM0PJOaPkmJC6+qvCTpl0kqIHcO7iNgbOq0ufDBqR7lMYcqHWTOYBwNdItqeVg6OYvTMCeyAqubQ3FaqSq6SR83V8ONiy1OUY/TKs5eoBqUXQg6dS4ulxSQNILQMEGqHDn1c93tFjNfYxLXqB4s8yuiJlif2EzJRLxfhldvdCQJEkHUW6328GLOGhqJOeUqHMp/UcUmqkDNJogk8JgOy65LS6rx5iOzd04CqXyFzKJWC3mu6VGlXkDDCUllpJVAxdOHlpKOYF0uwIDMb772fLZ4TxbnE3m0lxlSTlSR6VPqn9VGPARXQVu5Rv0ju3ebzYFLVrlLRtIotnVSSa8WrxAkLHhVSFvfy2mQn1W9XNiv0+zyQdMRRi83axpVq42RzZdciLVO4rl0g+rgPlFXEdUdBIp8RlqFQ2bEdm+q7TV/OwzQYPRNrw3Gs2YCCRXbiVVAD9rqtxBUl61fxqjNhKFITmrumXaXEigHMfC6XdAXSZbtlnJz4sUDSuV1TTUw2azyq6yV9ypRy7Frf4lf8Ht8g23bLMSVE1BFKvG+XqtTs6qbnZ/BfqZJswdBdpbXVurcHkt5S82DBMxCBKgg50I6qiwZ1MTAatZzzpIEkvWDZ13Qn4dW6zaXWJ2ebG6siG2ZLCMbsnco6j9UBEhGuEJUFzt8KpGSX+aPGG3FJLfTgqMaoqxqjiRBg1GSuG28rQuIBvtv9rbjaWWuSdK9leEQzBzQWXfVG6cA3QGFSF9bf4AJAfDvIcCua9MlTVmMdSXzioeYpKsouUFy6eMZPa8aFLG7eOi27tIyFUBAP1Qlb1XY6cNcu6Qk2Lyrl5klOHB1o6709pJEVn2RAe0hxV88c4KKrSUYfQ5aATn7S/IU+D1J5cPhE0hC20Ld3Vy9OCrAyMxXNFFT9aGbZwbPSuaeng7THcB64WkF/kLw4spo5pKuRi0M0LaknKKqVQnmXwOWakheqbZouaS5H76oq+7pe7gG9oin/8AgzZ20rUsk4ZL8aMsbW3g/GBavemPmL/dICNJUqrKOAeLVCxfN1VRFSPqB0vbZzl3qtni5vBio1ZMrcDLUNG5soNHgb1WUpMoJa9nURKpC3P2dW/nwxw7I5LyFDGr6ezGYqT09JRkRXUayskfWCooBUh6o2KidwpJKgkNtpAN1t1xdCzxu8jk2qzpsQpvUiVQVQMF0iAee1VK4D+LFoytytqZq1jY2nwy+UqRVwb/ANcivxjgUlbbBJVVmu1Cwd3dGPmxHZj0Mhl1Ms2auZDaqJp6qYP02T8ZBJtzFcSoW2F5bMD3Kmaf7QdyeWG4OtENMW1T2UVGz1az2s1frwrFkXfygjcaB27Ntw83i5LsHykZOqqgXc+uabdoQ0Oqq3SlqquQlphUUvsNABt0CvOzcXtYyU0XWYOkX7dzaslYW0iG7qtL4ca8SmWLyO9cJsJVdw7QbqpLoRbhJuxBVAdUUh5AHVutIgIreYzwgZNsOVML80+Zj3VAKQz+Wh3TNWYSZqPb24EyaglaBW32r3XgQ2DZjP8AMISVP1M+pKGeSSDVvYa5KOtRd4kaWw+93nvLoL3AwcprM2BgeMNqCErIJDpKtlX6SWkZjziKtt+BrXUszq0I+eeP2zMo+9VBNJJUlTVMiv3btvLtt278MhfbWdKmc7qo7hLVUcBPM10mZAZrikIlvMOa01cQEGSD+V9SMFnzunuAVseuUBFJm9HdZqgRbSFK0Bv5zxeY2kKqqYnj+OgUEmZq7ddcUu6O7cKp8/u4j5TKeqqVj1mFRxQJJuFQXa6DgHOh4xtSu0uYeYbyxMKlsGykraKmd6yPKo2m0GZzTEJFgk8bm4AFUFXQthK7xK9A+bGn2iVEwSk7ku0pORvfaThkpKyaHCirtLVjCVS78b7OorvDjKAxKKZECpqDZjRFMuppKJo+YdQnCSFKpALByUkwXBeMV1SMSBVUdIgIhsIN4gZifThS2TXMn95addbHKRUkI6SZ0C4kpl++kHEeh9cQZcUg4st/RCBEZ7BLl+HGTsv6vy6VzEfLNanc0qi9cavq0hcD6xO8SDiiV1b+r9VjTMnVtVTbcZujZWIg3jjafrl4kdvdFuSVSVNIB3W7iK3qDAbdZPNAkBq2tKbk6ofGqd8s5lkHLfyHsXEASt8YCGHTL7ACWpY8qZ/aQq8VEhWbhmmEGtHx/JZrs7gE/ABXb/gwCa4iKzVTdRVRqSckjeBKsuA7pUw3aXTZdZi3VtUdSIM1qepxGQZk3LukU0hssHpSVBUkjH5MUX0pT0RBlJVpFPEJA3nevlwBUUgsLpuKz2hS94seBznBTGmKUSTqUcOXThRyrdckCSBXDbpHpDt8dtvJd0YmqPe14xUJzSDOVXTvDVTaIGukRiW24Q2nitk3WakmCobTDVSLoID6h8uC5Q7prQVAFP5hspCapWoF7kqeaEr9c0v05WEIpANntFs224zzg5rm1bx1/qtHPcuqgiazf0u+rOJpIafdMkgKWjXcQYpLmS5CC7UlRIz+13jfttMsA+YfyVStXAPX7to+BufDoNIZIRVPwXfN8eLNVhxtQTQzFF09JRUSauk1QUdEqkl47TVK/wA3lxWEpSOSlhCRnijVFeVUn6qFvtWXeHq8m7DOjEmsZAKxj5ZpboqyZKZcyKCy0rWzzSdN1UjSbLskCSILObvRuu8o4I+ZFbHDMyM6SGqm4K6umgkgOhZ1j1hiFotvUiSY8GwbOWqp7HaaqTkFz8F2r4LsT1SM5vhS0oEUFrDAlFx0rQ8pArsw1ZqCPGZChnGocyoLp65YcYzdPFRdO1eKQESNVVA7BvHXMR1UiArtmIkB/II3cocuPyVTSnW/5VahSecJ9VuRJW7Z+1MbDLmLnx+p6yqniLk2hjOXQicc1LoNkEQptK4mH7tvHLNmrNsSLgbDU5lfh6MR1C0bUlbznqemo0Xzyw1dDjEm1wXjfuVIRuwzlp541cLNkDTJNIrdUQLESxcHrCtfaQcpCW/F9K2TTepJbu+NQ/pJfVLKSiavyry7beiNjIn0LpIA6XhG2qSurZvEVSXMCL2dpYBNTCFQyryYrmEnI9msq4dEm7MklUjSMh2CFu7bsxWclu1DUE8xWyyzGm5DSkBSasJCNanxDXmvJXS3qluDxefBjlaCCjHxyNbkrMxUkgaCcpIJNeFS23AKo2iqPvdZc3ViT+pgWx5dyzbQnTukTu4lTZyVY+jKSpZvLlO+LQ9LXjW02rxKq5GQpFww6ulq3bN3hLqxBZeqv2tI0760WfRrhu6dtzjXJCq/V1TGxW0LTu6bvJi8KUXTczTLOnqgmKHZwr1dV1E6irpdVWz7VVIwdbLfDyXjy4j6YmYpKOnFjpp87Yw79WOSnZeRbr8SCREIEkWlxG7SuDaWzeWGFNJqJIbHVIVU6mpV5AzygJTa6rhul3XBOgbaRmPNvSIwLDFSUm3WVsxJFVUw6kOaO4ElXz1DZaAqk3EbLv2oF7uCBKLwIxqIBTzwS3g11X5vNU+u4rd9m3bf4OXArrxKNq2Pas/pPKwL6PQNqDsXR8Oqdw/bpbT8t249nXhrnF3V8EYLP8pUFQ1A4E6jmJOQcN+6+tuCVIfGHkwQ8kaHzNrOpdLLNeSYuG5ADqSbODQSbCd32pB7HJikVdSErQs4UPLTEU+W5tePeA5Ag8V2DP2c8qO0BUCa1cZO1HHwYiegay8iNi5hzCaVit3vjhCQFmxNMjdEGprYiEbUNPUExh6olZWp5Vule4kki4nTP3Lbx8pDjiNdIqs+PX4km/KCGkQmQBziV9tmLJ6W7qdgGbtVWLYzrdKx8m09KSu/beAnbb4ujFNjWtASzwWElUjzUO8LhlHQiW3dyKjYXu9WDCAs0Y/SSlnGbRS+inGc1fNsvqbFz9G5d4mreCBR7IFwSDl70TIfixnlSvKncUSnXkoDZy1kFzjW7RiwEXqACey3mvSsuvvDnswa6pzPZ5VsW9PsHXpkE1byBR21cLhZu51yVLbikUvO8PU1RVaLmKkL2vEJOWWkTVqkBlchoHpHcQfpfLgepcA3UQw2YNLMtRS9DT1SKPGVGLxSZ79LVcc5jykKvTt6A68XChUnOckeWVYLLwMDGIG9QJi4VSVS8hat16RX8t4h58WJ1VDOLllJh1mvOSCzhDiOEkImO0lUg8Xe2W/CdnyjvPRCraBmo2qqQqqebQ9QMwVMmzxVJukYAOwbOTZu3YlTbpK1CGSjTiJZ9DksKpMnCqBKjbusO2/BByGYTEtmA3jaczEOjZZ2lpNXYAraqW0tIiH2erbgaPJSSkVuMfuVXaxjZqrq3EXvYKvZrr5vQ2ZcWtJuZL1U9VBu6TZOhQ337SO/nES5xuHaeKXNZos9i3+bmsKDyxV/OVX0W9nW6Z6E2oz2DfyXJWiP4cZxjcy42rYVnJDVSf0sbyOqlMyFLm5QXSPkSAUrgS33DfbjQWe1R08lly6OUph9VkHJjw/8CDqkCSvOreBbBHxDjL9E1zCR2V08xouRmUmPFKipFxq5jJRyTfQV4i4y4hUdpCYhtEBMtm7Bzpa0pYw6GpKLl4vNphWX0jm5JNtJceC+ou4QaMJG4hVBwJ64iY2be6237ee/DXtBUqwpgSmGuag8csqT1em13Sq6CpqnztV0rQ6hKzdioo53zq/AtnleVZUsOaRmeoqWqhZ1jxFxmPLfb5xvwWq+zList4FnD1qizqFao2frdk2QZIECDdU7gVHiktICPrHdiTYwPbpVxFp3KNyNr+tq3eFCPTQj2bduaq72SZOOIIw2mCC+rYZdXe3dFmM+5mUvK0pXUojJSqTrjXBvRUJ01ckV5cxE32Bv8g4tEHnJT1PxstAwkI+kIOdcb4CX0iSV2W6okkImBX8mlsw6zeyWp7LuFj5KLqdjxjgdV5CLr2rtb+S28RM7fYvwTUl2UVOm3oRunQJIl6FT0v2uGcWkaSaly2vqldqF1YcLKghztiK87NuFBsHyj4bMAiWlFluTyLdOYt4jKtdIVmhA4ASSBUbw8QnsPG24ela/pHLRlMQVTKST+pBB1JsoKLi1GaHpLqK1qV93h22n4sCPsm0ZQNcVA8jpEnzapo9qb9qoogk7jjb7QLVSNArLbh3X9eNAyFXv8tp/0uqRSoFJu69Ogr6nYKtgvt/SkRild79+FtbUiAa9KHxEzOAKk0Tewh5R5LIvgUSMIlVCUYMOFsO0g1UkmuqYXkXKXw4g2cu2nq2eRUzSo0/Ssr/BxuabSXSarmQ23KqgQ2Dt8A/jw3fTLxxPSD+oY3jH2kq4YCg1dSEcJmkWlakkKodXVy24pNPs2zV04WzLZzSSjgtVrFxDJdm6fJFdfaKWglzeI/cLAdHI4mSId3oc5xMGcHmRMU3FyUq8ZxS+gkpIEreJ27xHV6fvYa0TUtQ01NN3lPz0rGLGqAKlGqkKphd5OcvAPViPrRWNGrpYIaHeQ7MHRi3aPjNVwkH7UzIjuxY8mKYpytK5awVX1kjTEaqkqqUioYDaYjsEC6CLDh1VFsWsM/k3JA2gZmMj4tF0KTqOlzeL2ObbftTICtK70+NI/dxFI0QGX1FunNPxsrLxqqGqvIMn6Ug3S2dKBklpEF3NYqeLfScV6HMLNw9XZroZk6CBnErRUiku/j24hvMxC1Vx4re98o4G0xPLBMCi9knK6cfpEIvUjQXFvzH3RqkHsX7/AJMZyq9zukUdJKyki6AgPKrdluMbU6MTJTNQqkMe8BIoImCRLlfzgYmPeiWzlutxT8wYGlXUvJTFOzxrounhAzGJQQQVHm7gUDIVRAdo8lvmxdKuq2HZelSYSnnlMNZJJVuKbbVStM7SvVSMRI+rcHxYj1qDph+i+mKBrhdtVCv1chi5554beW7V27dv+/iTRgTUVPYeao2xF1T6ZKrVU+klkhVjkJmBSI2ul1BqiSSqRXHfd5OQ+ak0jQIJVVMM19Ji6aNVVWQoPWoq8WBjsIdJI9K+7kxJZmZX5lvGKM7DHLyCceViolKary87t9wXXj0848wYa5X5eSU9Ss5WdSrVP/AXerxpRzVzr7bjsvEgMvhwdSNTKQ7VEigKB+az+eeVQsjUEauxJI7gQVN4QEfKao8Rv3n7ngxH0H6hOqI9GpDkGzFVcBJdk4SQVQv5D1Vdge0RiA4vlSZ4Q68a+p6j6MbLwcg1Nqr6/bmq6SO7mS0l9IPFsAbcCtu1Wt23XWeAr8OijFVjrW1YNFvk7UzJ3TeazmrKTWQSUJAnDBwqKvUJrirqgI3X3CGI5ivR7yppaSjqwp5mm3VVXQVerpFeYc4kqdqp9P2XNjih2tW0hlZEzczU9SKUc6bqpFF+q2aDpmVtuuRK65Cl4BG27nswk+hI2n6uTePO0JUse+dJetG4yUkCSC6V3KNlzcxPdYFg8uEbrQOu6l9aKAqmxNf1bM1ZFv2skMYzlTcGl3BpRb5U+QVzVdKlZf1c4XbA8IdzUlH8lXEgtUMavFSSSptXTYlSVSFUDIT0CP8ARbfNznuwfqqp+gKao2emIaypZiQVMZRBs1QZ6rJUryVSE2fTYkR6XLbfjMbyUcqqOEY2SkEGbiwdBV1rhYHIBFaN/wAGGTEA2r6SZiaJD4unFPeEEdUQrMGRJi6V73jhS0C9n/exanWs3RJZJEnJB0p9WKI4kkRqROVlGcgm3SuuTIRK0+m28bMNqTXJVEWoUUSEEkxBIEhTs/R8nu2Yt2XpwjcnCz+YlWbhIAIxaL6AFu2EJao7rvIQbj2YpCLoJFqi7FFUU1RuG4bS+HE7RL82Ex9QbE+WVE0lUyjheAKR85aRj93Gc1YES02khX5Uj03ijcGs3U4kFrgBfSJLmPN5beot27Fe4MzUK9VRSzZ3ml+6OLhVTo458Tb1CxXjzsDiV4lVirfaXKIEPgL4cVL8sK1biDVnILuOpUlCC33bixeJl0IUiFOU0kVRINqd+3+NJDyDd5cMXDpsrCizasxFS65VRO9XV8A+Dbu+LDhRvGqx7h4r/GGukeiQGRLhuvtK20Onmw8qSnFoQY0EjtePQ1VWWl3rXlsuLkO4SuAhxZtVYJSLoB/KMU3LeYpcbx1dBzPMmyoeW1VUd2Jal6ScnmFEo1LPUuxTBVJ+ajmWZigqkkfJqhckCpeE8VF5HSsYInKIkgKpbCI7bjwSsl4SgaqVIKiysiKpUjSAlSe1klFEqBkRWikqQX4vaGZqqpPKGa0F2l8yKbdQcawpXLSKk5iQAG8Wm+hgfIOm5lytXTJWwPJvv8uMgV1R50bPNeMy3pGIlFUknnDSUyveAeyqSQW9Nm49uNE5jVRGt1kYekMkcnXNOu1VUEotNLiZSOcW864siVA7rFe9Su6L7cZLqyIRQeKNvoZOCmls4lN0vaXuqpXfKOGjXoKMvz/NZ7l2pKUeTByijxrQbQNIh7+l3SugF/QNhKgHs4pFROAdSl5M5BmpaALi9da6t/j5R+HFvaybMWQtnUXUQIhYOgLVBW8N3MW2/m82LdExGUFTt2Z1bMPY1Q27guGSYKtHBK8qV6tpJaXKVwkXWNg4MF7I1kKqyyd0yRVyAl8hH8WxiqLpKoRrBk10nT0mbUiXvLmtMV+U/wBUlfit9orKphlk+ZnLopMZh7eqSEe1XHiryu1SvHSAtwCYBaXkxTlIHKKCTZqQeaEp6wS3INmjN+poOAK64i0AEA6tmr7OLnm1k9KqxsPmhFoyU/DzrLiHUpHv3UqheO3euqkJgrs3CYbfFgYyEtcSRlNoKMkDSvLkNUVPNh8oqzXYprVAtJlYqVil5aQh4fIXmx0m9jUCJteRCBWbmqBFjmU0UGZHFzxWqjYbZAlROzzdGPDvRjo6FX3yDM1iOLklyRM9tqu8fjEL8dCdltxvLfDtLDdMDS2JLaYn4hHBa7NlA0rmJm9TtH1txJRsmqqBCwVFBVUwSIgC7puLBg6yERS8ihqVTat2Awrp+dToM3SX8VYkkrrr+8A2APtFiPfVAD1FMFbiWtsVVVMCu9naNmNRZrZC0fRGaqjbK3N2BaKJJWuo+bjVZN02Vv8AsldJquCpD5xvHrxUZXIX6VSSiTzO7KBs+DaqLl06ZqpH7Jpfh93FRNZTkSVzTswmgKmCKv2Tkfdws6BsTcgJYcHpPsZTANxctc7ssngkPK2frrl8IJYoVYZHVfRo6y5sXyPibKkJF7qojgR55ppwRIlMSkKr2WsiwKTKILhklDHa5SAB2ebb82CpHsNJ0mZTekmZaSpaQbUi5+TeeBTRKDwXCjB1D/pTJJyugRW/siIMEBNk5IivBmSn6IRLZ+/iiqHtdyOpvVIvS0RkhDRM16moxKo26qSSRzahBYxvIe/4VISVsv2n12FihlItqap+QkoamIyqo0A4V0UQkuLdilq26pCra4uvId3IN/Ni+Zc01PR1PqTcjGwejJMzSZOeHXcuEL7hP+LtV9IvKr7mG9P0VmdS6nBsnjaTYqpXkkrUysUk1Aw2aqTpBIwI+bl+HDCmGYpVU7pKisaehKqKNqpCj6zkGZoB9Wck1VSVtO2y4LVQHm/exaKsyspuLko/6G0xEPm+gZuHaUsgq6E7LtAkkl7OkhuEOvmxAptZiZdPHKuXqlUR7Jmqq9kmUyDZJfurvtQaoaqo7/OR+PEa4ottLMXFcxFPEKMfYq6QXVYJaADtMiC4T8P2oWFf178FxghpKcj4GmJ6Yb8RRgsRArl41SW0tfd4zVJULPLdiUzAoiNSixbMKenohZkqYIJKunC7VdK/9ER8nVt24p8W1gZuBeeq+DbEkuDpJNclUjVDrQSFIbLTt5sECvqKbQOXbd59D20eKqofpXTk0rw57jX7ofcLAzg9mSvYLtBQp4O5FRmSxEIHy37r8XbKej6Ym6ibwj+EVeSC15ocTUbxm32+Lh0iO7zXjijrM2ZMUWyDnn3mIkqkYn7XXghZL0uwnnyjB7wblxycMuzJzaHmIySAP9Lf5cKmpS0pu5tRKzIpKnnXB0B6tj2Mw3scJNnNXrrsivAt/wBdSVBX3LT844CMxSrmIeEi1OQbTD1cNdOPqAF25JWW3DZcape2fRylixZ8fTCJqAYeWpj1KjHjazfeqUknHCGBDYJAuqBjaXjvHotxUUWEkyYrSTqEmkpJkkkCWuqqKRAYfotIrwIw5N/P04ZDMEl0pnViFQuHBU26m6sl2eldqyEMgRlfu2L6SpAO4evx4jyi37NuzWFZCpXzQgFu0FAScNUgO5IhXAh5f1R9d+3FglmFeMo3+C5WqIxR6la4i5l0kqke60C71UVbR6xPl9jHRTLmmXzFsJxjpw4Q1dRyJpIdQkOq1XSSMdvWGLpFNRiCfVAwrOqIVu8fuZWTknaW9koyElWdm6zeIn7wnZgdk3ctURMgIbFbDQJINUT8ZJYIklXleRbGPeP5JtIQcru9VvjN4Nn8uYlZ7Iq34qbd7Gi8Ukko1L+MGaUfq3JCF/KJH0+0GBXSTCm2KSptevPW0e/YObXwFYz42L1UrDDpSMSA9nTZiezWoWeqvg6znqqpN4INUkG7aNBVjaAdGgqI6RXkRdO8uTELEq6RN+CZvIx9xACk5SeEW/2UhvDBAqZ/T1EUzEtgWio+onpG4VXm3AuXSVm0BIAakqAn0cwFvxBp0158YKgwNF1VSAqPBZ082dTbNVJmgq9ariqBbdW7jBvVEx9u/o8TWtIauY2lY9Gq4qldNIgSYCOku8QSvuAhIFyABDl3+K3dggMaQqqslCm1X8K5lmv1xJsS8iTUfAKTPSEDE7fBZuuPHOZTCm56iYOtqmh4WKmFQNqqvG2pOCVDaFyDdVIw6RuVAsGCSXkhG+hmEz/bDVTaP45oq3ScMWzVVs6Jvb9ql3u8do7xDrxfqFDKhCl3D9r9OCnjbmk3EV0CSJXw2qpFt8e/FZj2DaqmLg4FgMQ3aCCT1JJ+C5PjK69W5Utg8o27Q5NuLVCoZezcS4p4vXzZRuqF6osxVAbB5wX10ujpG7ESJeEVRagONVEmyVPDHuklTMl1UhSVIPCQhsxX02+vdYdpeK3FiqSnIqNkCRpepEJpuZ3gkmKoqpBYPNeIh8JliDJ7oIraqI2qjvuC4hwHmkadNCIiq/MOgjiJF6Dx4j4mx6Be6dpfdLDWj0qVlKhLgGdQNngD9XQIxeXe1YgOJSWeMHDMrIQHJWfaJCZYpsSuCUoLz1cTkUukTVuHzjuHBbRTbIUOWl0SRwjYibQkGr8YFV8LVVJwqmuwVVbqh4VeXaXt4uDWqH83JJ03MtoVVNoJ8GmpCN0m/JuAbxEwI7fHihs55+u1E2Tx4gJjZbqkJWfFgsUiTZrlTJVhKBIazV1pesEBQXXSC/aA8aQhbeX6A7/Hswppn9cBTGrDspEm7fKeKliKboo5ceRVVsx1VTQV3CdqVxAaW3mwXMhaemI6SdM4uoUJFnIJAqQzrB4lKCkG0xHdpAP3jxj+pMxJuUknUk/Rctkz7rUYxbNIwsO4CHSG0C8ZfewaOyXmXAwM0m2rmsJVsortjUpDumSSp8+0RsAi8V9mGTTR7jSMiFTnaeyUimPBhRsxVi6dxrv2LabVkiELi70RVXK3l5bcDPLWr62gJRnR8jDzz5ia9iXrKnODVQ8dvQewbt4X4Kmek9WbKtpJyu2j2MXHiCoqEQiLwD5BQIBSVMvHafv4rOXtYAuo6cm5JBaQcGkk7kI76vyXGGrdvLaVhEqR4vYqD7qiTSa1s/o9rVAooeqvWCToFTXdgkTUj5TAhAd4eO208W6k2sVT9UQ9WsG0UkzBubdcYh/xIJX279C0VQS3eAg82BDWGY0q8WcRr9mxXEz3EIlu3c4laJ9I9eJ6FrmSdMfUj15As7Er0NzpUlQPxE3XsAuW+63EmK4QdmXKiSoTNqK1NMRbZ/cfjxR6ky5h55qTOUjWz5v0JOUhVDClE1esEezh5tygTwEAPVSv70Og+Yvv4umqC6e08dAbyq0RfFZF3NpyyiWUa07GmXU2ootDA+gXR7/qStzf3kju+UxwIp7snZo0zqLUnUbWVFLcCCh8KqXuns+Ycb/UbokXINx4avIZFwRbB+HDRitrqXUw4qHGWH9JCvmwFY5y5XSV8tFTUSols1LVUwL/ADvKXxYM+WHb/wAxaO9AN3LxrJNfTzIygkXwqhafzFjUUpSSLoVElURVTPpILhwI687MmXVWkSz2mEmbo/8AC436sZe0IbD+DGiY4zexHKuDeYP5/ilRcPsDrZ0omUj/AFQTK+qBRCtKPXZrHzKNjF3+6f3sHOks1srqvTTWobM5ooR7+EXciZB/mlbVQx81ag7HEkwL0nSVZEPhTfJf+KlgczVEZ1Zfq/XYRzINg/wln9ZS+XcPvDhqNTw7X+qImy/P61Q5R1zG3UvtGTqeSTv4Zs+Hn7hW0/hPETOfRKqG/AVlTjZVPl0JRgCoe6RiXy4+SNCdrXNGgXafpi6pmGZBzN1VddD3klbg+XGjqL/qjswqQo1RTcY5v51GipIXe6rcH3cEFws+YypCFwfml/VVZ5B6wSH6S1RKdnbLGUR1qXcytPKdCkJKGKQf5o7kvkxWZ7I6ueH4ZWpKeqxv0pz8TpL/AOlSuS/7viKpHtW5EV4smjIu16XkDOzVcpaCR+yqkRB8VuDHGygPGabyn6qZyrU+UtUFx+JLCCrtJUpRqW4q1i4S9WSybmB2eIohJao8k5pmnfaUhRroHlv/ALLbfb/7PgML9m2h5ZZZKBrqPYrAVgMZ1qbN17yR2qgX+ax9HVpZy1H+EociH9Y03D+/hq6SompkSZySMe+E+dB83ErfdPCl6xUj/vCm7F+qWuZfP+D7K0hTSLh5OV/TUGmdlr5B6VopddwmIgd3hxNLOKShotamMuWCQt3dgSk6TXQdS1nltGxL73z41VNdlrJycccY1p71U45ro9XSD4dwfDioy3ZDDccDWelZuFJ61/GH7mLbXYKKgfz3Ui4mv15r6bIoRQHos/UKiMq1t45u4AmuwCATA9hFizKRbl0oieirzBuLpAMVWmWT+RdJgk22gYXePB6p/KWtp5YdVFXR1b7ccAq6kWl1MRmqa6SRi2IntXeGKplu5duKKtTkw/hWrNqiuSx+HnLGxYnJKmqeRWeVabb0otI5Vc9bakkHiLA2rXtHZNUXHt42goT12+SMwIQHQSLxkRWltwkK6dJRaGSKFsDVbovJGeGHTORAmLe7ahZcrYd3Nj55dogoSNz1qBIDJVFu4BIy8wjaWNQZ69qyrcwECh2/8BcDI8U19XOiG0BuEdw2l1Yw5W71WWqh8/cKGaiqlxmuW4ixrOCqKrCpcqakvfHalt8dbyBbFEvKjNgafUmGfoZCIvWbhFJbSFQ0rkiEefkHeRbcT9PZ5zcVHysNSrFWLau2bQnSZOrrzDnVHw3GZENvLgHQWipIt212pcXsji6IiignJSIh3Tdmkgr90fmEsaa42+mccInRlKKBoal8W4iSn2Ob80vcbVy5aegABqklddsG4gu+IviwUKQztqGs2jui6wbDINJ1qlFlyXIDq6uqlt7pUbh3YzdCKayguzRuBvdfu6MEDKl++9eRTD0N+JcSTrQBMbrxIhEbvdwDcrZT4NkYN6xRdNWPmWolqmnKvqCscwoM3T5L1VCRj9Bgmq4t1wSVEVSJU/0thDv8gYzpmw/BxWkl/CQrp8UrZpLkqHMXuf7uCFOSJs5O+UW0E2hmAoKFvEOoRH3d2BjVDyacNXAIQjQYklyX49NkN6txbe9Mb+oRtHGbsdN0P4vj3Y/1TWvqSKmFgu8q4JBgm5ZTiFPcK8jM3FackHauk6bJxKqh7fsu9DZuu8tvNutwKkyxofsw5HSNfSyNSS9DoT0GkroJJOX67Zuq48JcOkqfTylbh9WOtU7JG6WlKWN2laJyISrbOaT4+uqWiKpptkk4SGtJLXYyIt26X2SotVS3b+stwX3EXLjP9dVHRkjNerYZsh6vjCVSau7eGJ13pWKq2DefkvMtmNaZm0nnK/pT00lSVIsYGiNI0nCTJxwaSoaV27uryStsHcRXW24yU4pmnHUSLNvVMGksluMnJGkZeW3rxk6KrYxdzMdPhRDzZGPSKgJJJg3RJ4zmI9iskN4ik6VVVE/Ltw4hSlUo1SbXqdA1DI0EkFSNy69q00iC3Ee8ho1qiPq6bbPFjMEit/RfzcKDS7+4TSN5af2Sot7dfyDtI8OCNgtxIcRcDlTdZKYVa8N6+QtV5rkhIve7ofxYaxZw4s3ka/11ZBUdJrpmQ7/FpXDu5fF14kHVAAkJHKTa6CxobLVzVVv8BJGQkA4j2MjCRbZ8rJOWy7hEwKOSTaqrpK2eMkiGzZ7XsYMpn23R7MpKohIdyicwMvqwo9xHrVUi5EZJACQJ2ConZaNgleNl1lu0SLFFffYlbtxbqqnKnkWbVtKSqTmJMjVYC2/i6W3eKQnyecduKijoLySbN6sq2amQ3kCVx2eUdu7BwYLxJai2oupxM3rNB8iG4mypK3Kh5dLfdg60DkVWSj8nM3Dz0awEtVqqn9W9giLoH3sWDKDM9GixGFyVnXcNJjeTp+5pxgq6PlIrnX2ukXhuwemPaVzUNk4Rma29LlwsN7VVsQIJJK+fmvHyiQ4yt9vJN9mGlO7bROjqAZfKVHYsJJV16ljWcgu4SG7UJqVpWfteU8FDKcJjL9vK1lN1XKQCSVn5Y30MLvWYeMFddK3efNfgXq1LmNIGLqdzOqKSTBXiARWdCSQbvNut97BnyTyyqWvouQlKuSquSidD6hHJyeiC927aKvT5hxiadrDrPYaloLi471Uus6VnnM2qvpJLzqM3KzgRLp4SoMV6gVEHgXbLguV5bruYvaxER0JQbGHRZMJt9HrPe9dMkJF+7FU7tpWhaBl7pe3i712kES8lFnEJINi4pUEkRlgXBAw22qr6RGqXmxA07RWZdYPCCn8q5ok1Ugtdrun4tR6r7tVID+YMaSnm6HRIhSciANSth1o/k41FFdGpV28E1NLXU49sCTcyEf0q5WXe2IeXYOOoV/l0w9CxuHMn9bK0BczPLf1d797nw4ybcM1adqqeenTiDyK+rutQwVVQBXbxQkq6SSbjeVt4c1x+3hOQr7LekpRqwqOvLWMmG1BDQkG7xLbeFzddezlLxHu5cDuUL7ukJLzT7QKnzEHCPFCRi1oZffdqKyjohs6C2dfmwrGs3bMk2b6oFFS0jtTQBVRIxO4rblUNU7vetu5hxUqmqCVrSs/U9LzCknDpbiaNmq4pNW4cgmvaJ3cuLM3ZTDdQW0yEqTpJIAEl3G5mHhG/f8WPlXTOUjEniRNI4NQ7pFPlnCLVqndTbyMdfZK3KiQe53Q2ez82CBlp2iJLK2CdNIadgDB0rrqpulUy3224qFJU45nKyj2CDwY9w9VtJ/eKpEftAQ7tvLfjRmZnZpzDq+Vb/RKZXgYRKNEdCPZs0FlXQCICROdXVMS3FvL4sCUDWD5yZ0kvlzfaaAWn+ZBOvc1GOccfwda5uRqTUFQdcIiyYWoeAR1RLFYo6LpKkJZSpKGzf4OY0lRJbhUCDfz2ikIgGzw8uJmrcvc2cs38ZHVZJRtzglUtI6gQdq+S1qZBze0XLgWRM8NWzjU5ZgKDP1okw1GLVqk6eAZ2/VRVEQu98sNG6ap6IS+z/wBUFmMRk0KJElCRqDx5MUlmpICL1waumg6VLftv3KuhMCvG66zq5ujECxZs4t0Mq6p5tJyCQHw73ileIVuK7crxl/7uIztGykzlzmCVB0NR9ItG8a3SNVR6gq5dEqYXEkqqraFwj+q2Ddz4p9NZqLOo9YJ2XooicJACSDDuuF/alu5w8NhBuPDNuhfhOSqzxPlVlrKNZ1a4eSStzEdI3DxDXVcuCO8d9ypF8V+I+NlHkImsjFyr6OTMdBUU1z70Lbd27fhGqqnbsNZtDZmsVUySDbqjcr7+lvu8FuLLQzVwlTMk5zFmkHb5Ze5mRIGJi360lUjDZuG4C27/AHCwLU4G0xIyV7DZG7ERVSeE/JQQSWckNt4ESto4mIl0/ZkiDeeSZqHzELoxH2tmHL0KPcEXCvBtbjuJJJUtnlG0jxHupPL0Gu+Y0xP9IEcvb84ju97Gf6cXsNLZfNTjIINxJjVFX0zKSyMRVqqsrpH3r5sTpV0kH7LVXSAx9wcJZO5gs6Qr/j1TmoiLcK6SS8eqvdZfsJVJJdI/9aVt/XivSVaU9xCIL0wxqBNkrqi5JB0hqj4SSBWzb5bcaK7JUTklV006Wq+oGNKTMh/xdGshVbKpI9Y6qokNtwePxX+HGoFrKYjFJXTHCRkjnmDQHack3DGp4zNqBKO4UBFQGhsyULmAdK4iLm5r7/JioR+aObkRotqjzfoBym0VNJ02B/xOuA9JavV5QHpxf3+XMRSr136adqaV9CR3JC5VasErg8qpIb8UFvQmREo3UJ43gxcheThyNOJaqpn4iC2267YVg4CaIvVcypABhI1HzGaXBN28k/7QJqyDi5II2EpwUErw5xFUeTm68V2oGEJmDT8lFSQR9RvGli7CPkJ5KMeulVbrzQLkOzrHDevmuREwx/giiZV8nwoaWpFuFVeI5biVt+Pf48VyYyry1rSkXEbH0a8bzke1Nwk7SZiuSrcOnZvu5vFhhTy518L2E2yX7NdR1ZGOqvOm1ZGP9KppIRqkwrGpavhM1RvVHcI3DdguVjl12qoGnWbOlH8JS8CyDQ9Vov2pA1SuIrhXNK8tnUVx4zPk7ntUmUL5rFOIr15TLXiElYCQtFA7xtK3aVh83i5jxryDzByyzPoeNWSypQpr1wKyUSg2AXOukkWkrak3EQDf4xLzDYWB6gsrU4pdrMYihLA5jQTVgjI1PU1XNl0g0rdKGkGZLJJWkuC7gh+Ubd2GMkwoM3CwfngiGjGVDiDXetUHhdV4pC1EUkuXeIGW2/BgfU5lNT9OvHP5kWz5NuqkVo0+gThyrfbpEIIDZzdW72cAKMmqbdS8hUzfKOiGMzIK2smLZ09fP1BPar9kfMPhEPhx5ggMdKJIT3KkSi/ruQcA3m2asS0VBBqMQ4JVwYWeAyE7bPJtx3ULWBpom9P05WDmILQ19sMSB6pc9q+kJ/63HbGoJioKpcLUrSVMKM2o90nHga+gBjbeRmr3Q83Nv3YnIupWdA1gzm554JN0g4j1aqTxIysG7uiNXSu5uU7N/XyYLEeg4qlwpoQMYN4hJLI1MdSvo8z1TUaEOgRjyHdq2GWDvlr2q6zpGqGUtUCryZp8V/8AiUmbUjXvG3oHYru+XAoj31VZzVlIOYGCkHTx2qbpUuF5Er9hlYO+y7Gwsnco1soUIU5Ch6Vq6UlRVdJeumQR8k1VFICsQJVUxVEPDYl7eKax0ZCLqrx6Id5StdP8tVZ6HrZxRkk8fTStsjHz8bweg3NIi7ruLFbN49Rc2/xM82KyeSzqNWZxs1AikPCpJrtVUCVbh+tK0Q9jmDzbcRVT0lnhVz2DcZlorTMIgQOl0BflwYmH62wiFJXeNnNidzig5hWmWLk2bGGRSS4BuIuFXjokuizVEfF07MUUzhGSrwbiIoVzlaU3STpm5qGKmppuySVFVshApCkreG+43C43+1YXzYCGYNRUJK1InVsNmtIREg4VNI2kywJ9wqRFzJCkgSVnhESwX5KnJh1Ss0/qBgb5SCHh0F51Jn6usPbaC7gS0hA/BgOUCFAVHWTOk60y4ctlEiVOSkk54SiWLTQLvyHSLaBmBh3tnIPVhw1q9KianVqyQzBy3b0Pl8DT1bQ5quvWks1axTh4FpKmlqhcFxd6WkZ3l8mKfCSYybMVrm2ofMmirdb7WO01LqXCiUHDZpH8Yb3TbNxQVXPb9r47R6enfbhdqkDVFNEd1nUXMWE9zfYdwiK2Vjo3acdW1XPL3LuYzBklGbAxbNW6RqrvVxPQS8l3iLpHB1Yx1SUbSKMVDRUHNEy5JKQDQV0rOSy0rx5rLj/m5xY1RUMSmKMNIrsbbNrY9K4w5FSEP0u7mwfKTqCbqqh41+/nXyievwHFyEo1ZpIK9aHjMuUgErevCI5BqV1yad3FtSKbWbEuGVomBITLvVEH43+0ImkJ/DgZ5nK1DEunATMaqg1vbqpEgKRJX6VtokA/z8EarYlyxnOGma/9WN0kgFW5+kJlzXlduC3weK3ArqCoVuIatm83KuY241UtUQVEjC7ekr8Q4La1akkLWqG4erBIcYkjNWgeqLZJxoEN+7mASw8TrdykiJHPSq7xwJpK8WqqWkHkNXq81g24dSU2jJCpKv2Yvr/0bl/ymfsCO6/72GLOOYd27Bmukm4DeookKpCPUODicHL1CoUbZ58hJedTIunBOZE1ycdZLiVx+0R4vmT4RspMOo6RopSSYukDE3+kX1M0u9C3ouIxEeXlLFFG9BPgxRJAUju0xG20/wCgji7ZcVacW+4B+5XctzSNJmmpKOkkkFTLoBK6/cXLZ48LihhtWoqRM2CWkG+W0bKRP0elI1zHtXaSS7psgDMUistsHYN4b7d3x4GOZUzKwNTMY2gakilVErEl492wOwA8WqlaFoj5b7wwRJBq/SYvoFCrYhsSrIAdNEl1XJiCoDtHVVSO49xWkF+/FNqSg56BYo1aymBkIeMSPjW3/F6TMADmBLbeVnVgxh9vlFYdxotxEnUSwknQlJG875wkFyTa8QSPr3GRGe/2cUnMqOoxdqs5neGkJDYOmu/PaHQdtwh8nVh9WD2HbwKK0zJScYzVQA1dAD233EHJd81uAVLxz59orQU08RYtR5lECKwOXdu2leJYMbLpGSqbpjdJSLdBZmyTbP2yqChlqoIErqkk0P7ICI+e3BVyeSgIhtKVVVblBszboKtWa64cSKDvbarwu3Vsvutu8uBUmWkzTZgaq4gPMrbz9ZbP52CVQLmfb0dMMptQE6Wmmrpm1UXsVFrId0V6SW4zK2260NoFdhNUlmuyWuIer2/KVPzOkp6eqx88YVqUqnq6QqtmHBpEAbbxQDkxQZOGqeLNRYAhnLhxYSCjtqkqftDeOLpIRcCwarA6qRnKqWnoEXGJb/fGzp+5hmpTj9Vuib+SSFrzGsg6SV2c3Ldv5sMmqjq6zHU81XjLR62ew6JvKh1HjXSuFdBBAUldL9Fpfe58WCsJGSi/4ubxDiLzFVtwqqQn4t/PzdAYrYxdNumqYRKJPhMDtcikht6bSIxEOrEWpS8ayak/ezaTUjGwR4gSVv8AZtwSL7vKKtCjal2hJi4dNko0URWJV44ca71cULRXO3mKzfs6BLxHbbhimqaQlqBaIFsIi6MKPEDbotT4ZdDVSBe5cftfZ2jhquk2eIkkuFyZ4RVLpOuSdW4oWhp2IsKvTT+ON59VtTu5iLaJYQR7r9UI2c2FJiJZsS2OVFRPpIN2GaNguL7/AGBtw0bjlaVkasSB8s1b57JGY2R3q1jSFMQRRVT6BuHi0t3okrymQqhtt8uy3FtzeZSsoZxLbOJCacu3WqhBIpegUDPwcx2+Ufe5sBXs6ZhZqJw4uYjKajPRTd+g4lAshVVbP24qjdb7BYNeZyrTMpnBoUdMijeqKrxtKSe5JK264RVuI9w83Lil0hyCEUlyo1UlQmsMt9GGr9V22Slmiv0fQaK3IaUeRkREYGP1i09WzcPNz4mlkGEImRvwSYs1W5pMCFfgSVs296V3D848ob/Yxaaay+SQpd2zeQ4SC0kJpcNFvNOOXAw2kukA2ENw+D3BxXH7CXpo0W83SyguAQFU2zFhr777jIlbbAHoDYO3BVGRCIr45qlFQr55PSUaMlF1CLQmRd6JTLglVQv2XGHTzeLFRnMy0aUo9xU78IpeQk0lQSi5JwqgZGB/boCerq9O6xLrw3FWNi26k9WBkmxaFa6UK3hxAy2CfWBezdip1xnxRhuhh56gxmia2Kt0C0tIUugEtVK/SPxAOHEoiqREzQXnK6qSqE0wqGY126SuqKQpAICfLds5/ewb+yDVNbNcz42Fp6XfJ08SpuJhsRFwopWENxD0FyYCzWLkq+qgmeXlEvNRxeaUam4N4qkHNzWjtwVMucrZ6jarhXlc6sQpJIareNbVKEVKEdw2iSRjq7vDtPCF8tSZYjogtxVJMmvIPJtqwk/VYWJF9TMj4jlvHwDyfzcSAN9M2btUF3KbUjVVbICJKr2+U+ccTTCTetaSEHVM+nR4W0xeyHEqlaPVeNyuBetLvEpyNm/WtSptQK4RbROrae7Z3qF/Vbz9OC5C0YkRbkrZEjAg7quFQK/SOLdNpKhny6JiYKqKKoJCkl4+9IcBuBpuiYkpaBa1Ugu4rVA2pKSipcYgF1wWq70jEhtK2+0tmLm+TlK7YPZ2ll6ltZPyZLoC8MCMdLcqQ6o7d5dPuYCScDlpJSExHFPU88kNW9IZTc8Z2gQmNpiIGN/i34ofcLS7H5Suab6dMlVa4yCf0C0Rl3kkxFN6uTBra6MT1R6SMBIAGwrtxj14lsvxOqKfmMqJlaMfNQambUnNj4Lw5AEkrT9i67HM1l9U7p1HytVzbUYVVBuwayAoNRcIJJJbAS22HZbbcJiGLRl+NKw0asdP2vk5AjVSFy1G8jPn+yET2WjePmxKhLtVa4JiGtYzkI04SSdQ661yzJU0CLSNK4xO09piJ4v+SFE0/mLX7GmKoqMYRi4AjJYhItXl7oegCLxFtxQKoVWdVVLLPGzZoo4fq6qCG1ITutO2/FmphaucvJRrUdO1GUMo4sSGSZPx4f8AkiVSIgPl3h5cQewESReEzDQvp2VJMMtMswo6iDSiIto1Ox29VJXSu/S27j82MpUDlA8jFKmymQcul4WYI5R5Pwyp66tqSoikYGlYaVqu8bry8JYIE/2iZioU2rD05cSrxFkklxT1pJtV4t9tK7SXMgFUS/oGImlaNbPKwRqc42aZik44gWTJBJVulcOzeF22+7lAvJj47WiBCAoFqjIQLN3IN0rTVN01mApCPwfVUnDmYMo2QiRSaiZh9YVu1b+otpJFdaG3FNzOexrquHSNW1s8cxuqr3EMklw6AbbDENXutlu0wE8aVdZaA/zYGeZsJqGJwSqqSjnvWurpeJVfeJXclgkPmDFCzeysjaoWWrCpqwbM00m+q61V2YmzAStsSQ3HaR7vtR5rcEsVw7SU3G1ZMoWsIhleVcq1hIVQzSE9JWSatUiQSS5wLVGwyDluvIOffjNeaWb83m7wpzLNig3aEfBqpsEklxSMeQiD7uCZmX9FZeg6boaqKzXpxaHSSSSUE2rlJ13WxVdqkrsvERK6/rxnMlUUlCRFYiTAjACIbbvNb0YJqXRj2S8w1Dek9W1bRPVVE+ci6fLhZOzbZbbhEkr1B74vdP8Am4cER2iFm0PFgZEK6ZXZjSuWFXxtZQgJquI8t6BHYK4H0ltLbjWrjMPNGv4trVVeLU/R8PIAqSQ8K8F6J28v2G8feLGSso62hcvqmGpJGHlXbpv/ABNRk/QQ0CMSvuFVBW/5caXQr7J7NKlmZtqklGVUuHSQum8jI8XKKjfakCRHpJHuIto8vhwtrtm2SiIjmiSQpOqHKsoxh6hm4xeP0jcG2kFfNdbfwuy+7VDf1dJ4q7eqH7CuHTaZgWabd2arWGctI1DjENUrQcAqFvm3AezEtmtSjA49jU7iSfKOJCSNkrHu4n61YG3buVLpIt3XimopUrNvmcbJSTGnGKRaRO3cM64hAOXoKy6zyjgNgRVpEq/V2XmWLCon0VN5iycVKCrqqquW5Pkl7rtwqlbq+3d7uBWokiydKIt36DkQOwV0L7FbOsb9+L1ngq/GaiWarZNeNj2qrNhKJbkpFID2FsEd+7eO47y3likwrJ/JSDeNjmBOXCqukkmnuMvJh5tFQWsexhUeZUo4Up1OUFpSMK1VcunqaTdNdtz8pGkRK7vhxM5nSKdT1CzcQMxUFculRtZu0GCAqoJDuMbtVIDPaJ8nLiTyuWlchsr+ArGVqN2qL5UHVItkrzZ96W5BVJUTsILS5yDfy44hJv0zEjOvKBgl4tyqqbcY5BcEnSrey5JUgVIT6tmlbv5zwmuDsotjqVVOMTJ1U+Uy8iq3at5hVszGQVQS1VydNWwOgttvXsXHdf1Wc+LTl3RTymZkX8IZSr7SNk6QdujIUju+1QXbkVnKO4SE+fmwpSGXFd0m/eQUVK67OcYKtl0U3FyoKmqkR91xWwtp79xe1diAqyqYTLSqHDaWmHiSjhkbcV0FxfKpd7+lsXIz33Db3Xs7cC9rpIERITkMlBuoOrcvImUm0pKDF5IN1Un6710kgk2MDFWwlTEgcKnbyge23ETSIRrprJTeX2brlCrHCvGK060JBBvIq2leIiC+kY+5f5cXCsswKqp+lU4oTl1XUqqCre6xsqSRKikKRGkqrwqRkYl3uHVSZRxuZFCulqyqQmMxFJfWpJywQcvWIBaRIard0IcvjD4cNbe0RqtwgWWcwpFzKVQ6mHOXo0YLsu6jU25JJH4yG8R+QRDGkuyHm5UzySZ0HCZYwKqKTUEn8yyjhSdIB+tXs3K7/MJ9WMgzT3VkFGbWbkJVi3O1qu7DSMg9nVVAB9kyxJUvXVVUfxgU5Nrs0ZAASeICIqpL2clyRiQH5Lgw1dppoMsJjFapf5ULQ+YMlLZxkr6lfOknSTlrNpPbVUleexwqRmkVoifXaVluBRnlAwLytlK5av6gbC7Xu0JRgQiuHNdq22GPTbu8+Dt2bM36UqOk3baWQbr1o0BZUYyHjEo9w5QEdyiBAoKR2hzjbfzYg1p7L1/KSkkwpuNkIUEDkVV5uLSbP+I3F3Tpvake3x7+fnwmzXaV2JIkO1VFoqRAEaklcjDj0pQ4ZVV6g7iSc6oCXepJK2i3C/w6QhYGM9lKcYoo8VRSEnBGdqSQJAPsiGwB8o2hjQyczloDGYrBws2nKbapGk6iycG2avHBCXDiSRoWavKWxW8QDwYznJPQfyDh+hGto1NXeLZjq6SXLy3kR27es8OaYc0dSrIoJvMTyMa1UcnYkpZcOIaHcfTNqoLydUu6myaVtvtePHdSP37NmoDXXuMbbuF1QLyYj6Dln6EOozSZyDlPVvJQQuSQ927DPCmhTEYblFhwSfEXdqukbxLBrwysiTlEBsSuEe6DFopprUBSTdFrpMye3gK7vSSSLq3ErsH3sV2JVWVlm6SDnQWAwVFe0i0jAufYPTgnVFXkxxYuagriZqd0iqapa7AlY10dmyy8Uj5PEGM+6MykS0Q6NIpFxSEw9i/XEbX8LK8Q14p1Hi6tepWdGhyeIgsLb5MDEpECWEGYLqEZaXdpdfgxLVdXU3WjpFy/Ns1FuIAEegkXCpGHhSMisxV3CsqkoJtXIkR7jtEh/Fi5tgOdCOkrE3lH7AiZumD4RA+9TXQMQKzpLHpIWxj61avGySJntQ1+9S8tuKqigYqXmikJc5F1X7urEgmk5f6aPEoJjv0iXK0B6rLsWE0PKvNESePJx4/RTZvH6rxFIrkhXO63zbxw6o1g5kanj2kYEVxGreIySqCCBWbrSJx3VvteLDWLl4pmz9Wv6VbPlldgri6VSK+7yYfU7BwSFQIxuYMG5ims04BJq7cyPq9BiBFzmSqCt44+g0pOkEVr3NKn6TeZJfSGn6forLWp2aWuzd8LAuXk7YFqqTVdJVIAG4t5iN23GFpzNDMLXWBxKoetNW5eSEWvFaocmkukImHxYNU7JZeV1l66oyoJeIqOSp9qEdSq8ak6F6zapK3aQ2BpK3gBd6Ybr7sZzcU5SVPzAo1QwnE0wvAmxXNlxPp50unrGz3hw4pm2z3Dq8KyrxOht2qwQ+Y2Zz+cUqF0i8qFZITcKkkzSV3/AK1XuC+KzBAW7RNeV5HiCFMUgk1ZECRiu3a8UR7f1pCfwYBbxKj3Qpg2RbNh/WEurf73Nibh3tJQIsVpJpESrUBNI0EnSQqkPmLQIw5vlxe9Q072rL1eFRYq3R0yRI+k8rNoqA6oGjY9RKw7iEhVPq22F8vm6sG+oKN+i+VEXK0W8Zr1FHvTMxj2HA8YB22N9Jwukq490FbsZchxynfvG4C0kWahrh3bRwzXIeXcleSW7y4NdVBN5qySOXdR+hMawBwkldMgqhMum4CVgGkewFbBD7Lm82A3KRtotIpgw+R8ypdaZsZhPGrqkq0plig6sSvFzF6DpK3kLfb8wYp/r6b4OxqiIkH2RCe2zr24iZZnDtXiiTWoXKgpbSJZuYlfhNYmzduKMJPGJKj9a1DIbj8OzHhpm+UUY64SdOJmSVtN5GoK+ZRrjzWbWS+wjULg6kwPbiFcN5KNTFzxIkJ9TZ0BfcLHLWScrrCiu/IRPmIlbrfjwUNMgc/UrpF+uJJqotE088cqHv1CamqA+zYJYh6geM/WCyIolcYhqqEgTY77d/dYmImGcuo1G6tmNoCf1ZQgV0gPw2XWF19OK/WUW8ZrIvFblWtoN0ldDQ5fFt3lux9FsZRVmbpSbN5aQnhxLyizpnoqrKqphvEdXlxDtRv5lh3+fC2kiu6TRJZAbN2ovuEfvY8TAzkvpOGaKGXMs2kYsjZM0GwgdhikgY/EVxX4tgqtlS/jKol7VuKrSrdFCLT0piPeD0cMgCQj7oFicFXvNFJYdm89t2Er7XakmrRdkKvGX8o2hKiYv16qCFRSVDiNRBdygql1JKpBzifXi2TFCwjiJfVPQtVVDIC3dKvHum4bpNRC64/qrdcjBLy28mKrl3QsPXiLpF/XLOKfANrVlwpKrvD8A7hD57/LghRMoETRrdtS7lzThRip+tpdBuAqug5d1mkaQ+YruTmwZSNOgl9cbRqgwua9MQNVSFcsKnj49jN3s+BjWrhCOQdnz66WlpKiYXXiYX4h6wqaBXlCcyVJQaCioGkTKnYvgWrpkf6UC0i1RVMC8NvR4BOGqFQ0eKMTmLxydwKqu2joF7jtKzkQV5QLlvHn34H9ecM/p9GNf1zHxhQ438Iu1B4bpU+dUR1xMNojfZaGGGvaliH7FUI2cFg6pWaXY/4K0j5ICVa3bvDqhZdyaWLxmhxNPqJ0w6WQlUVUknQO5AyVdIKnuML7rw6dpgPs4h5qecx1KxcrR/qWMmEg0l111V1TkQDcFggOzeJc34cRc86Obp1ObmW0uNSKqgWhoOCa8OXOfej4+SzZ1YoqWyytKvoyHNUDdcVhrFd5eXBCyTGSZVkpU8WbMkafZKyT/iVVRSJIAIbCIEi8XKXNZgVpvQ1N57sWzK2qGdOV1HyT+KVfNyPSVQSdLoX3+LSEjMdvLZhU2xqTl3ak4VrCTc9LTdNVIPqlle/V017XSCXjEVVb7b7b/CB9GIWqkKkdVV61a1bCoMXCQOFfUk3qqikYiIDaqRbg7q8b8XythomOq5Gbo9+qu6eqmbeNlJlJdg1MytO1UCScNyC64L8V1OnjquqI9syptiUWqALzLly6ZE31TuEzS7oTVIBK4BvIy68OWhSEk6lJSp3QuHjONcyEPeH2BJPEo7VtKy67ui2+b2jw6mGtTqrU+bONS/gdqAqx7vVVcKpXkWqO1ID3ly6t/mwMa1qiSpqYWYDScrDt2ndIJjazcJAJ9QtxSALrrvxniejZ6sKlaqJU5D1Y2Wu9ZBJSTo+QQHZqqiQKjs2W7/B1Y+5RqMlMVdGnLx7evIFg+XYux/hRdVAEkkHvKaQiGzw/Fitxos1SU4xgW/YBFq7f9Fd9zFgydnqkQzAmGEjFVDNC4ZpDJIOfqaQB0KvO6HVSC7r0sVeYlFhnJLgI0UG5uDAUE1diQeC7rwK+xDUmVG/MIK9UPTUk6mBfxs9PU4z3pKyjZfSBA/AStyVg3+fC2a1bsKtkFGEo2bT0kC4N+LQfmu3PS2maAq2gd3XbzGV2KvA1RUItWsOlK/VXboD4Jd1qoapeJI9mLBUUI/iBcMKfm0IiaS1TmYIlUl0NXo0hO5IL7uUj68RaFRqZp1MOIo04+nlX8qgSVl3AvHCtwKgJWEP2W27m5xMzvxPRv9obV5AjGxiqcgVreQck1J0QBuEFUtwW389vgvwO3TBzUCjWBKNiHMoAcUbZyqklqgAc1wLj3oWn3Vl4+MsSy0zPRcOnGpSqsDGneK4tpRJUFQPbYQpWqn75kfjwWIoJVePbrNXizl1WzxzIKltaRry0SDdeKpGPdD5RAufotxKU/M1IzqJR/Iz01BpuFTF0rxAL+a4b1bPu4i6flpKIqAXJVsmhHg47hByCokQHbuEQVIA2kIgXg6sIzTOHf1AtUj+VXkHhiB2kKSqo7+UVQItobee3E4ryJUw3c1k3ROJm5544Sbmk31duqHtARX3eG6zAtfQxtdQHG0kthDzb+u7wYlpCozexKbAYqVj2txmTtskK+v8Ad3e/ivuF2AorNmFQyGmA/YO2uhcHuKkGBSFHsS5lVagdSsQ4UeRyxaYeJC7FooHNWp12a0adSPnLVVXVVYr32Efi2Fy4o9XLraPDXiqnbeJDd+McIUr9Ey9KYSrkRd3bRI9l/m2/jxZiHSwWCta+EI7lWDy5Nyc3TzOzZarFlye3oEfz3+fFukHVJVbSLiYi36SU03SsKPVaqqsHW/Zd3ohz+INvNgUw8vKwMgi8p94TN4Bd0SH9N+CxSeYeYWozRgYSPipI3B+snLtrwLJ0G2zV0iSs385ex4cKWnZEjqwdCF7Oo8yokVo15RtIyCKTUCQJzBsHiqSV4ldvEjDw8pYOXZ/rynoaeUZ1pk+khJcOHCvoai7dILyvNWxAT6hG4ALAfrTOZzWj5w2lKYbJSDJcxeLtHrpK0w2mCpKjvH2T+LFyyXzunqXmE6SNaKQp2VVBJVAlVS4X9qlpbwLzbufDjBuCzxq3doSl5gZ4UavzOSQZ2HwYrvX7Zvut3j3BJJFZbyYGNF0q/jpL1xE1y5eR7IwVAWjoZNB4r+oVEBGzYRbiDE92gqZhISe9ZMptc0WrcDVGbDiUkEj5NJe7f4twCe/FRytVhwKQnYn64skkALu41dqNoGewy3CqHvniDQaFaRa0nUE48XeF6hYS4i4I+IbSCAOUiPmC0THZ4cdR8ywVUbo1HFUmRBYbpMY3QMfIWlpX82PVYSzB5x7Cs9Anp2m5bTKSpl5FRSVvD3sSVJuqzmZJNmhmEKqdgfxt0BEW3ltVKwPawGQ603EuyVgG8o1m8pqVikE4++5tFncJJX85C6VSs69wnf7WL9QOabaRTFm4cpEoAbrVQVt94CIMB+pYtyyqSQc/Tx9BlpGrwxU4u8AAtITAS2827kGwsD1vPOacdKHFnCvk0vslY9uaCqoX/ZEkdoe7040dorXKLwrNVrA1BLcSMsCqnPz4mBX2p7xxmeic3Qeoii6BVssltVQXAxIT9/Bgg6oRdNRMD1U+YMbqmfaqBkKzzjZNK9KWF4cNVmqJXbMM2coi4TvE8POLDx4KywVcjUa4gUVRK3FfkKSDTJZALfGI4uGrdswmR2lstxQVIJKwXyQXqbKij6tTJGpabj5Lo1V246o+wXOHx4BtUdkGmDJQ6fm5WKIOS4eJS/D9/GzniSKpX2CJYjXEQiuNhAI4811mk9QUVaRNO7l89JnIfN6k++jl0JluPp28Evu/0SojiCZ5gV5Qj9PjEZWIejyl3rNX3Sx9CnlLokRAe0vFbivy1DM37VRg/ZoPmavOguNyRe6ezGloeObrQBlO6hQbtvpnUCaB7eWZ0Cmm2mZlOeah/YtlktVUP8+FqvxFg+Uf266BqNNNtW9JOWf7doYPkveE7VQ+bAXq7su0M/RWNKKVinHOKjDaHw7gwHJrs1VbFkorTVSIPEw3WrgSB/iHDT/Fdjr/AITTxL2dKBctTg+rJfS+jcxst6qUTOiMyGOs4+yacYOqXl0FbT93di+FMyTX08MvoKrDzCVyRfDj4wTLXNCjAL1/EvPQz/WW6rcveHbi3Ub2o8xqUQRYsKqlGzVLlbE4JVAfYSPaODKakt9y+CPR8X/bBBHTVLPKvpWlMZHZMt2p1HNiTpFc9JsggSqpGO7cID97AtzH7fE/KRT+KoWmxgeIsBi+Wc3KpBcNxWjsxjirs7H8y8Ix9JKLW26hd6Xz4pDibmpS23aPmx+R6Dht4hwdrdy60/VtS7NGWuc/KzqvilKzrJ3JE4ICVEdoKiPIPgt9zAznM0pKYXUBinoJmNtqPVivNackpRTlXX6O7C7BXpvs/V4/btXiVM6TVxyKrqiOy6263n+XDsmbZawk5H6lQJP1G1CNwrKvBE1TJAd99pbsUV+2WXlFktxFduxtZjkLE0uik8qpFKXFuLhddJBu8HVV26Q/ZDt5sZBWXH0S7pwkiKd6pFb4d2HNlurVaTmLHKl1fTE0IzSLWnxbopvF/wC/u57bcP0dZJnIM0nKlrgQFUbuYLrrfjw6IVnUeoaQXCkIGXxW/ixx6GrxJN1rhaSpAOGZPkW5CNt6VDxzb0p+ghT/AFRlddiw0W2P12zkUrtRI9UiEiEsMmsYr+RMtUeXSwRqLpVgg1Yv0JtB2+cOgQONQvFUEttxXGNnlwLW1cGy6EZTMERJd4q8fyibZ0surYJElcVwJBd+9div1NJLPH3DeslV2rewUk9W4EPLgj0LFxstXZMDWXkG7hm1ASTHSKxUrjHyc2B1VURGxco6RjphN4IOlUtIQK9IALqLkP3Swoo3BJ0mseURR1WwTTQkXMolPFooGGCeqqPjlZJWPFU/4ymHeiH7ILhvLyieKqJe1iy0kwpOReCjVVSKxDe8BVLgiX7ojETIbOoRuLp5ebBrnpFBt7l9DWozZZeI0DkqigUkJ2yKj2oGq8iSRbhSJqqqRAVtu3cWMv1d6qoiUfQk4szSkmSuk6YkkS6qBlu/REIdWDoObnZ/HJtpSeXNa8DKJK6DNkyiXTGRdGCv2or2qmd47dyoh7PJgEylJGWsbeEbR5JWEq5FXff7RqljC07Y07/byFMHJHtVXdTdPISFkIs2eKOx5RZmgYn4RHVvxJfRCrZRFQ4GhaqeLGhcqTlkYpJH4uXl9rw4UTgUXQjtkHiyR96SSoKgPg2pCWFVmUIyXcNkqQWJx1qKrilpH0fpR6vLhhi+2JaZfn+SrFpzmTKn4hy1ZuFp6CYpp90HFi/ZiklcXKQ7jAvB8W7EWjTLwZFMEGyFrh0ZIKi6SsCweYuY/eE7MdSFLvIzUJVEVCtv1CVtBK33hECxExpBMtXjPgVZWQNI0kE2yCRHy81x9Nvh34ZUxC7qBVOyHSSh6uetnThTSm0nihkbgtBrtvPn7099uKusTZIe9MiLHlFVhGwgLZ0l48I8UiqQomircZWW8uGgghpJ4zjjdWmLkWyIFdqlftuLm2Y0jldSSFJsfStMSK0yN1wiKtqQ7eXlu6unGe2UCiZoqrmk2TOwiWIiIEvasHG6MkazyNy0pKNYTuTgvZpVLv5TjlfrQl1piYiYfDjN8SOSp8qUU7teJMlm5clUXbrV+wVTYjzJam74r/5uClk76J9hSsvLrZsHHxCWrdEsVmeq52Dfa2V5vDvu9ksRVX51wki5BWCodsigkFyRu3RdVpDq7SvEbvFhq+kqtiItrJPaSpAY1X7BdJBq+u5SPaBX9IlaNvLjB00qcpJ9WOdZaiSFVZNKEVrFSOa0VLs01UtUhfIAk44gv0pAkkIANtu2wsMRy+hDj2sou7kOHNI1QFaUapikZeITEbC2jidql1JOnxP4J4gg3VHuvqojaFvUluAC9jCqSFPrrMQnafj5V0G9cRQEbQ9pL8WzDoKwoykluWrfGyVCMKZT9EJULFR06K9/HprrpXf523S5LrLSxClVVKumYmJtFxC8FUGjwytC3Zu3YWLhknSgQ1HxCrULzQFyBiYpbfAX3bjxGyFUWfVo6lYBm+B1pGJJLkFniD9Fb5i8luBItO7ftK0ZpcoyCGNUkX8FTSTcOZy5khFUdvNbznhs4r7JlFQQQWSUE1Q4gV+9EQ67SAvBilPqjfSUq4YVgVGsWiQaolpat1xcobi3dO35cSkbSVNy77+DqWj1xd3qpDwBq2/Gly4JOlaYHt5fJXmHSItKIEYVJ1fDuiinbZf0N7OFSXkUkEkgHnEdJUT6uq7E3E1HWEW4Yw8HUNrq40uGQqNVe8LupI1bA2cnLigPqd9LUkwZ0o00Q7ohThmfen4eW/F5ylh6KYLTA1ZGy7J4qgaTMS12zNPV/SkbISVvHw22ebAOBN/oSV7ongE3RkmhU/HSbt05mafFm7M7icrtVVyS6TuV0iSPf13e3iQZ036FwfO0qlfvEEleWNQjtIercGhdbd4SwwqSLc5ZEmtAuYqSRVSNJ07TntcnR8wDwp2nbsK8rCxXyzaqSL1OMBByxVX2tGjpASIDt2LkqlZb7IX/AH8XNUFQXqiVHWWlcJikswpnRc+ulJNELG4JyDBnqiAdPeiRgPNu6cVl1DVPFyRepkZBBqqqAmu5YMyJA/CKpiIXc3hxdojNym/oSs/XWB9VCrxVKOiU5EROMaWEIES5pCCpeUehXylgbyFb1SaKYOpWXdqNyuatmhsBFK4iEr10hFUyHaXIXgwW3RvtboqoqkTUxJUbWY60w6RX9X8Of1lVk1S1T8Owvx4HZHwrUjlFkFXBq3iJbiENvNYXLh1V09VUi+URqFxINiAdyaYpbjMrjIiAcQaY6S1gvHKjUDvLUISK/ruI7d2JZWiJL7MpaUopV6zBYQbNmYjdzCly4kQreTkybtl3MDIN0ldUUFxDaXXbiMtjSW3GrcfJaqkOId1WVJU0Os8eOxIP0SFi5fDibVALuwZEpdbdFWJjlxVmbk+6kGL+nWyaKRhrrElGsx0h+wAitEy3B+9gs9l+vmOT0g5p700vH1hNTR3MUI10XECA81qqV9w+UhEx5uXFLiqEy4riJjXlY041o4kkDeFKesV1XUi33FqqoCrYl8Q49lxVFG0nJFSVAuRdvJWUboA5VYN3wCfLsSPXV94A57N1mGW0IjyoAsM3fzLX1TZh5oSbciHLX1Q2vMTcySCq4sbuVIesyLxBsHA4npeuAbvnjCgJeVjTSBwCqrpwkKQWDqkRG6JIN1xAJAJ9NuBhmHUGazNBSLlsnqkbJxDzVB6xYDHqvDDkNfcYKj4rEh8uIqHhsznlNvJtV48ZxoEDomi6roVUNUh8uqY8u4dnJswFiDuHamSkAjGCnKizpq2mm7qNmYGMkFmrfZc1NUlT3dWrpBy+ATwPqhrQ8y2ybal6zqNV0rtexMXT666QpW3GSVne2huv1TvwvJM6tjnUgjHVq+YySqqWgshHGLceYTu+qpDcNxFy7sQ0PA5vsIkTka5k1BNdwLpo2fukFVR5hV0galzeP7uGtP0Q3avz+xVnvRI7LdPZQKPuPYLVPPV1H3gTQeFbNxAlSsIEHo3cghfzW9OCLm5RoPFmLyezECjosyMV413HPbS940CAy8whYR8mMeRb846oG8rUAFxTd5ruE5LitVW26y4bt5e+PmxvGXAcwKTj85KNqKMpakEYsbvXcM3U4Ow9xivcZpH4divRzYCrWo1AmWpSzYatqCtHZRyUKstVtL5uJMUw3KuY9k/YtdLr52pBuAea4bcTFZVgs6h1DYBRkh9aBq6TLiuHdbCIUh4gh3ct5AHg5cPHme9fP46SaZcP4+onkfc3F7MpRZMFLD+11bxVMSu2DpDz8o4Z0/n5nQq6Z/TmgYRjEkfCulY2E4zijEd5JKt0Dss5ue7dizJxdCfMrXBgfe/P7lX7YqGuZjSTylakk/rANknS5OFQ8STNUu93gXP0fBitPHmcEM4p+ocxqYZs6bdPNBcpluu2SXNW4hEkkh2bBuC4MX2pM80UkXVSRM9SbxFItKLZCzeM3S95/pdUkjMeblEjvDlsxWa6zQCtE/oBmC8odm3bpWpOXYP/AKqd13dWXGCvtmIFggJByqt1UJ1QtLMJp4dQV8hHwMkqYRz5BIVeO3biJqCuqCW3m9jmuxpvsiU9l3DMampV7EQNSk6SSfnLFYqkuG4ASQ8BWj4+csZoYZlzEXCRNPZX1tLviVV0lWzlg3ckJXbLO6IwHxcwebBtyjgITLelJaocwKveTLhFqZN4JM3jZKPcH3u7alcRGNtqQEOB6kjp8F8Mc0SBFKAzZoRSsao9HoSVp02V4im+VeE9bAklqmrpK3biHwdABbgfzmZOVDx5IP6cjaqmlgb3m5drigAgfOfLf4efmvw1iYuEqaQFaUpual6ilY4JbSJJqTXSBUhuIQFU7rxLbz4ptQtXLqUTAqAnIEt6SC+uY8YaQlYX2qWkf7IA93FLFSW1fSaEFB5p1RFDHxMx9CYqTeOC4UEJR/x3Apc2uLVud93VuxXKBpKnsxapqZtBVC8fO2sTeum0BvAhwgK3K3JGgqBiHmtPqxe06rzLpWPRhIgEIEm5G3VVdtUHypGAbxS1R2CIWc3tYqE9Qzypk5KSpdghJSEUfFLu2zcRVldo3t9VraB+cdL38NKepwhrVRN91QlRVR9JZYlmEqS8O0AOAbcKkgLU9IRMLAEbyG3m6ubDFuuALJn6UUF7Tv01CK0vKVm/FlreUnpjLClFpum2tKqSq7tqQtGpErJ6Rb1V1TuVAwPbpFbss6LMVBqlwqIpEdxBtuttwquAdDkls7I/OmiIotPM6IFKH9V01lPTUa41bgdOUuLJLaVwiNg37iGy67l6um+0WozTd09U1OU/R9Qo6vDzEg7XVj7leb7KxIAtEi3WEG8MCbL2RrKMRdPKaodtLoq9wusuwFXSvt/S8yXTy/Fg1qVPQqtAM6fqP0wMDVoqgQuyBVcbTtIDSPhlQDdbylt2ER7sK8RhtUK6LWkRSE5JZb0u4TaKyUC8K0zSVaKgqXVzWFs2beez7mAnXlTLVXOE/hmCEU1ZCZigkqdi5naNx3lYA2XdfV7mLdJTzApriRNByskqAg5bJcTrgJ+HSE7fat8mK7W02s8Tbv0mBM3WuBkSTMhVs/a3qlYO3YNnVuxfTOECUuUwIf8Art+TgvWLN4gil3GkkA7T8Qie8x5sOGsazVEnMdJPiWkBArSNIhMLbbrrd+/EwpUrl+nIM3UI2kuKvENJg1QdCHiuBC/bt6xwmtQdbRCKbaUptdiR725PjFsRB0WiZD8viweT+nSvUdMIOyIknHsmzyY4OZeLsxNWwtJLXK+7l5h+9jSLrLmFomqfTDwNOQLCYaJN3kc7ftXiuqkQ26+rxNgENxlpWFuHGfIVnUMDVjOEVRXYuHqqSRpqJJKiqkZeE+6MfaxpAmbaLqKSYKv1X3DkbgvVZLoC2Az2DvtC0du4T6TwndkCYXBw9ICSZ1ZEz1JUvHrHnGzjBMDQIiQBJBz7ImImBWdW7EHH1DUkMxfBMv4qs2b1LVSdtHCSrpCz+f02EePSX0blIt1PRNSPCForYgo7jWb4bzItpqmJH8uK3CvQlGbc3TOPlVm5Kkq5FJUdDl/RJEkHvCGLmox0pUU4q8J5qsGUetJRcIgle30lRepElcldaYklpX2+xbgK1Vmuzl+KVZUfFJcWBgko2YXESVxdIW7ht8PIIYtVZVlSsW3J5UFBwsgoI7RZOHiG+7yEW328UNOoIGsHCjOBoNsxeKjYKvrFcgS9m8rP6HgwB07VGmLVuUO6suHSNIh0guFK7ns8/VglUJE5t17GGjGRqFXQcQZOV4t86HSTOzm0gVFXd0W82Be4agyUUbEskRBsK3cOCJkzPSNLyyk8dQs42D2ISOu6dJEukXPpC3IVTVD4MB4LS1gTY7yg5hem0pQXjJZePYuFTFdNtpXoB+yvLePtGXLhm3SyrdK9+/qHjA5FeFSK4PFbdzYmawqiEbVJJPKSBJnBuCNVAZJqDk1fGIkqJGHNy34aKZkPImURmGlK0Y2cBYqJIRwpfLdsut5cXMaRSEmgOKvFLjlRSbUmEdJVDrOCA0kFXDdJITLnuvS+Xy4i6uawjoifukV1+HSsSXVdJaqBn5EixHlJVzJOvpOYOVeIAFSTsFs1HwCIpFfbZ7J4h5SZMhUtlV1Vj/jTYVV7VQt57j3/AB/7twumIqQ0w5qYyDBto8ezWJduFiRa6qQq9Vm268+Ut3JyYZp90NgHtDw4RUICUIwDTG7aPNsx0PMR+PCo9a17QwCKrMxJLOnCiOtciBbRHElQdaSWX9QtqjiWEU+cNeVGSa8SkXu7cfr+MbLlxLh2SY+yOGttKt0VNVw9crW7dPaN/wAOG7TgQiIrJV1I7mETpLamVfbapyefIwlfQENTyqt/Cu0FVRZJn0X7isG4i8o4Oua0KhV9FemVi1IZi3bgLz12m5SIkA6zSO6wrguHdjKXZIyToeo4VbMSr26Ey/aujasIV6gQtS7q7VV2b/L0YLMrKIwiKbNhKwzRN06apKjEvEGbNdXXEdAEAL3bitLddj466IiUtSQEx2vZcqhW9KTzel1kafZychHuH+kS75dBUlW+4j0tURsFUzEurk5tuFqkVgZZEY2taVbC+AjccMXBk9VSBK4LUkrj6esC5sXdvUtQSrKShTTmoaP4qxv3qFqqQ3dR3AaB+W64MVGvq1oBgwbkeacQ1lDQSBJk0dN1ejfqlpDzBs2lzlynuxdTNCvhGaBlaS2UsRSvHxdKxj5RxtjoZcDIbwPeqvpaFnTtMOjAPnKlRqO1Z7GpC8VL7QXBWiHhAeUBxo6vEkZ6JeIrypL0+41TS9WtQcqtT296WkQnafhDGV1CbJPlAYOVV29x6CiqGkRh07d2DH5KTaLmS7WvxqZieWiNRybfXbqyzaNPgwVsPeleZWcnjxupCvsi38E3OokzZm4cikrEVA+FF0gtusHQcH8JcuPm4x+kc84ReILIC4bkKSBIEk2VIzLpELTMt3m+HBpylyHmot8jU+YMDVjR4k4SKNbNFUGyro7buY1QV/0Xx4X5gtaiVj7GdzLZkxS8O6iW8OcUguzSA+FBQrVUg6O9SVstx1TeVtPJOPpDFtnhOEgNqSchqudILRtBIlS1QEfEHj+EdVzNVxWbpjFQNeS8Co3SVI0GjhJAhPrFVdUS5bf1pfLiQhZE6IiUEqgqh1KuAVSQN2vKEkd4+VLaqRH1FcOzEmn2OYVQTDsIyVvmsoBKYRmBq2VihSK0SjzSQJW7pVNUlb/dtwJWKThGfn5qpaqmpKPp+90q0llbdVuqBWAKSrVIjs8Qqli3tMw6fmfTNNnIVBOX6Img0VaiSRmdo6WqqHlLyiBYh5CnX9XVOzlaWi6ljJpiQCq6kEEFA0gAUtISC8Cu5rhHx33BsxBwh3NCpNZoaSJZ8qDPhzUZD9I2yDMWSoKg0Qf6SS6W69vqggSvvEqOJymZmiZSYTeP6Pk4Vu4SV0nYv36otkuhIS/S3H5PixfKVp2EmWcydahDHxZ6qTnhWq72wOQfsNICv8VvLjlFWmNFaEhnkvqAIG1FoCTFdc7+oVRsAr7fEFlllmPUz5ASsdaWS8xsvKkpWSGYlAHgZUtdu5F1rnu6FdomBfyoDi9dnhhStRyidPTNW1jHzyTgFafbRJgu1XPrHSMbAPm3GYhuw4zcyxOI4oJueSpxrvepMVNdcFT5u/ICLvT73cACGzDzsqZc0hVryUrKr/4SThEgJrCMn5IPF1dve7Le6DxCXPgp/vKUtC3tB5bO5Cj2cLLKTKDv0JCl6VHKTMT29SukNhe7gWStO1lD5kQ0DU9OArHqoOAYSiD8O/dglclalbeHX4z6sO2sylXkMxaQ03WcCg0/i6xP0FUkBDlE+IEzMua+649mK+qwqF1GkElXlUThR7wxVXZNwYjeFxWbEhM9hdFuFzr9Lp0yJDsNVAY6iiqepnNW6GYTOnl8u6TXlFRNu1XaOlSVeJJGWruBXyXWq2mXg34i6dzcgaqqSUpio6SfRqzJwfqsXLVKPS5xHSVI1d5Xl/NxLTjWBXqZrVtP1s+fR7szbklIONIGbsBuvJUy1du68hu+PFRrCl4GqlPpO6ptJyzNUFVXY+sVUlw279dlpJBZ5gv8d2L2nWnSiaIiQjoVfzrYQNUTgh64pqPlEb2vDTc2qk1EN32Stw3qhtwC6oopzTjdFYawpqVWVV0tCLf8SY+crB/Fg1ZmUGE84R9aZx6kO3SA2DYmoubT6ALSK8/aPfjOrrj0lCBBa4QIxLwlhiUQ0qIrpBVylaboBuDfh4o6BwImCNpeK67DUR196oERe0QhhSxmKdiQWl7d2B15SECqHrRnqsHj5M3AATRodqq4eEdpbixuyRhKXQYxrZzENYNvJJJJQKXqQPryQAIhpf4QB7w+1MTvxhekZd5TlTRtQxizNJ5FOAft+LC5IlUjuAC+HG4PprA19Q0bmXSTM01lV/4ZSaJKqumrvmP9L3Q7NnTvvHcOFtzkYTFfWygQqrlIs1VGrBhX7MpBwqC6Xq949SXVD9QSSpWWl17xOzk6L6+6qWs8vpqyJo/jo96e9ig/EXF6obxIVdU7jDd4+flx06p6oagJ4lSlPuXkXxHGNXMekP1W39kra4AtvhLo3Y9lXUb8nTijI6YZuqk4o1Um0+kuulYAlekJbdIg67sUU6ILurPNZVL6+qRR+hxwtwHuE3whqpB4NgiHi3WYvGWmbGabKVhKVyzXatZNwQRzYUWaQk6JUhEbzMfnvwj2iIap4irB+lr+KQWVBI2UbEN1RZIN7f0RmIhz3XiPXiu5TV2nlxV6VZCs6Qeskj9DBRBBBcRV/apK8w2EQnYYn5ww4ypChiW55WtY5g3YNswaZik5hugl64QXNvc1cGW8LlVe9K0btmzdiq1quEQ/TlaVq2cj20kWukmrIoLtyb7dpCqCobebmv3hdieha5pDNpup67dUxIVMBJartCJeMSSblaBKik6IbyA/AZDhKp4aOhHq2Xsk5fOVmirg2rl2kurriraRr7LPshIRtuIO6wjfJynIl9pyEojzKFpupaYYCjAyj+QqfSS13UtEJC8EbP1qqTUfZ5/5t4nVaKlJEkWz+SQQBuQJRKS6Vjwz2iBaolYW6228fZxneDqWYjSGnhbLzSJqq67Fo/S0lwEi1dpkXh5SxfmtUU8ksLlrAsY900bmqItJtBdJVW3+KkNxWXht5LMVE+R6h2q7KBVuokm0M6eAkE4gjGSiTMlOHHQK8C5tu8ujkK20N+IOuIb85BMaDhJUZNZ1qhqPoZW1mABdYku3+18O4CAfJiUr5hmFEQd9QSpEpJP+KaqtnopGKVhXpd6I3ju3ifkxXcsafNhrVzVGZacVTcKqqqulcqg4S32ju0ivuv2CFwH1YNt5HuFed2IM5nZI1nlQixf1C2SKPkLxSdoHcN4dBDzgXlxT4F+zjZpm8kYf1q1buAVVjyVNLXSDnSuDeF/kwcK8qCks2FpBZfNqPpyn2WrwTYWSpOnl5fp0gLm2jyhYN2M/2mIlduIPDjTDKPapcQ91bCyUpmjq8j6gnsn6jlaFlnZ6StMpzKT7iUrQ6FUh7oriG9UiDcWLHN0DKtkYmNzGox02h1QCOZu/XYkKCu5Uj1W6+kG+7nSL2reSCoaIofKicphakGaDyuEonVnUBniSjh4gLRvJwlpHcJ3WiXOHu4fVRnW/o+DpuHlMuEHzqSVdOldBukLdC9UktUFW5fa7enmAg5S2YztThmuxa3IlqYj7KobjLmKpetmLMZ6cnmarhIzhl7XNxmBaX8Xu1erlt8G3FRzcg2ENCqNkkaDJ4H8aHgCipRC4xINBLXvV5t9wbcEhTMVtXlYMYdnBPIpZwYCz1X66SQmY3BzkW4i3XkF9xnftwB80KgbP5CQjZnL0oqpm78+KfKuB4jYRXpKikIpKl+1tvLxFhlb80/Wr47FUNYbkyAdUVLdlpYrUSq7a1ORRx65K7XSJJcNcHi9rD2dkQQb8MMom0dHuHULHNPqs3Tjjy1UnBjpESqpkJeydtmNCGhgpChWtb4xRGpukq2qhwS1Gwkg+WaWESjS0jSPo5C+7ifRbyqEeiFRnmC1ktW0y0CJLS8t9u7zXW4i8s0KcOSWh5lbhiVS+oKi6VQPiPDcJCAdRb8EOLpVGeRRRh5KrlXhoGqSHrtqIKmFomAkqW8vLbjNudALRyhuQZlBcpOCeOGznTVO8XLlC3V948NUdFVuosIcnIPi+DE5XyGZDAW8DUyM8zj24/UGktq2Al0W37OnmxVU70ughU8PNgwR0IEnNakI9rxr5uwXWJmiqv3qlhKmkl1q2hhapODFZRhESTV81ArBXFhoGXt4aw89GxchrTLD1gjaYk211ULjLk3gP7uPOGTt1EuJhIEhRaKpJHc8G8jVEiG3rMdu/w4nAlaDqasXUxEOBeRbk2awDbqIXCXxY5UdSSrpq8XMV1miuqkSiWrafNyHsPC0a9YIE4bS8Iu8vGwVBeEloHfz8u/q6cWKJpNhPTSMJSDBzUsg4I9JixXX11QALjtvQ8A4lqAl4oGOpWZ1mDStbU/8ARutaJhaadJDcM7TcSggqR/t0FUiv/wA0aWKc4ayUXAqIwNT+t1thndItWaRHuG3QcCkqZbem7BppWmc18o3UotQ1MRjyPmGoXFIG34prpK9JOEh0i8YkkQFjPmas9mdL1M6mK0CZaSTgQJIU0m6SVnSdjdJJLk+bBdLrKMhSWpIQ2iuqbSr+eWsgounElh5myk81Z6oc2690HhwxqZ/mO8Tas1KYYx/CXiTmNcCvr3eJUlVRO23px+N3gOaccOUpsYoUtJJWPcqqiqvs3qpeMf6Djl5UcbGxYs2s27XJVKxVCPXdNg9siV5y8ttmDAxLAuiCXaY7lcKHyTzrf1ExRcPyj2rgAVKQQFB8kltuASJuqQAW39KY4IsVmrH0W0fQNYRNNVBP3E3SmJWnVU9BLkMbWX2t9x3K6pCVvLga5AVlKwVQIoy1DOawiXBGkTZyBJaBnyK8UkOqHulgi1+Tz18NSQMC0p5u9YGySGQdJVGwXO0huFd0RGl73L5cD1TsD7WKMo2Bd2oc5rVvT1VzUajG0ZQ4N49LvXdIMHUak8vtuA+KuO4Lfn6sUEmbs1iNkwFJuZ90muqCpCHnK3fiWGIfwMsswePG2o3V73hiFdIfZINh4kloYHo3whvlbC+sFpJNrfBuMyHxdA48ToDtTMGtMVW6kZm/FqrHQ66CwJWK/WEl7/KIgP72K/oP0CHVRK4C33JHi6yUJVMCojxqrxmSw6rfiWoiRB0EBfu4rziOlSW1lQTVI+orv3sEsPoGpY1SUxRro4uWbzcjTa8gxSO4l1WpkHJ7Q8vNzjjmtGsC6cKP6fhPVgme1ogZKgQeIi1SsLyYnIF7mEk3b021mLWsgAMG6Alqgd/KAiezq8tt2FK0y0noOPbvGCzxUjSFVe5URtv8gfvlj5nwd1KQtzHShyiktdYYEPuY84VBJMgXWEdvL1YeDGz27X1S967HKgrMnDd+Wlc3ID01ev5cXyElWQmCsFDlNoCPCxRJsVS3rptyK72t2zBcgZRsz1gewLaSRVGzvwVSNLziQEPzgWG9BP6hqOHGRYUskmjfyqJIfJeO/F8gaclZt8LCRYQMMJXnxb1BUUhsDxJXfdxnqqrk7AhTlhiDSs0tUE1I5awsVTNJOXNOpGbX6QR6pruI6+5U2qqSolyGV11hB4MU1wlPMFmq0zPSHAg6NLXiDas7rg6i1zNIht/SgNt+/B+GWy0m6dWYVADxo1bqgIaDB0gzdco3jq7ALq3aWK3UFEQ4oouaUW4pmffmkvxouuXoJuWlby8nhw1Yf07UmcGZFJVdOZjZt5wDWKkCJ2w0kidqtZC6z7JUEm5EHOI7tKzA7raSoBg+4NvUMqLrV72PF0LNIT2jsK7x9Nl/Pi4MZmECSfRv8NMZBVIAbi7ecYkW7eIpblcUusJeKFwMPLRqDFmaWquSbdUUlVQO4FbD+yK/nt+DF+ZNUE1BOI9+EvHtYd/UL6KjVbCSUbCKWvstDVVNIjMfN7fRjxVG2iIFNm4WlajiZUFe7XfilwLsbRPSXBLfst8m7Eesq8iafRB0whZODeqgLcuPVbAqfhEtVID2D1gR7sOJaIbPKdbnR7ZUmd5rvY9dUiVYuB2mQlcIKidvRdiTpaVZTCOaqWRI3Fbqjv26h3YKWRNNTcy8nKhhIf1upCMDPgRIklV7xLYkr0Ft2EPXZgUkujd5vZPExRdQLU/VEbMN1krW7gCVFVrrgQdYkl1j/QMLRHUnDm3QpZmwlVYEXiSy8em6cG3Qdu127wL7rtJcjHwcnKe6/diWg4is12KjCXYNl+EV3SDSONdWzxj39nPpDdYIYkq8m5ilKgeeto2PeQdSia7NdiCot1Uj3bUtyoaR3DaSXRsxHuHkDS7FOSqCKfNmMqBpK+qQJBU0gVuvIQSHbf4jG4792DhSUk1nmqyBDN/RWoXiKRAbp6SCq6RGqA7C0hsC3+dvwjai1hVn8WjOISDR0bX+IcSkuf6oiDSAC5hOzyWYbyyECgz9cMJXVayBGuyQXmXQuld3OQncls237+fx4UmnXCrcY3WlYye1QJJ22flxWly2iN14F1XclmPirmSRUl4FnCvJhWBVbSCqSSTBCSuVB5vtNUbLTARD3Nlu7dgfkqZqEZLDcrzdIYN0bVaMpRbVtW6LyQfaqopO5dVVUHSXN3t+xIg2+H48BOYQW9YLGbPgxVK8UxssH2cRfFMKMtKcMXDxq4TWZArrJECokhz7MFyDnn+YNRR6KSM+6cPnBlLLoIJJKujVPYFwJaWy3mK3m8t+BHBqvG7oQiweKrKnb3V9/sbMFaSqA6Xy/RCBrYWbhVLvRkH7glyv/wCapAJaSu7f3o4rEVa/sTWSlDgYeaoaefyraBSMzblwC6r0XB26VxbUv9LcHv24rNMykJR/FRVW0YhPOHCukkou9MnQKhdtFBvadvmsxzH0lNyjNOp3VYJS6hr6W4TVVELd5KjpcvN9rd908T1OxrZ0+mJ5+8j5N0kl9XuVSQ70CHcl9kqGzbbeQezaODBiCWKhqcNOOFji34pPlXQK+rXqSqRWHyJCR71SDb7m7Fih2YJTyjCumy4kyS3WpAKogFwgkRfoi2/pcc/w2qosC7Z4qskkkkkKREJJBts3KkreVnVtw1GOOZTGelJUUGLQ9hKGlcR3XWWh/TwYlFekm9STLZB0szpr11CtVXFmku/1Ukj9oBK/48Mxq2e3Iun7OQagFhJub7FQv5OnHXGP5xq4YeqogkTM1RXV/jCW+2+7Vv8AvYq75u2jXHBv3JJqB9qQ2EI7PJdf9zFBCmTZaVD186h3SnElTaDbV3hwTgiSS907j+PDvLiLfyLWz0N4pygZ2ICS6GuPu4rj6cWdEozQR4luZhbrswSP4+jDWm5thFzCjl44FoIDZaIkqJn5S6MXEwRMQUW3RB+SOUfSSy5KeueOh24FbqerXC6ReW5ISD7uCNFtX8NErMBqEpNHgjcC9bd+bEzMRARSAiO4bd42chn7Yjmlc8F0oMY2ORVtDulVxkVb1fduKz/NaWFqsZz0bA305VpKtZNAHpoCg1XFLbbYXEK8Ru5ub3MLWKZoDhjuRNW+UfZTV88Wiy4OUqp5NLOCsKPcsBFwkHjsDk+PqxNZf1LCUbWTFy6CTj3DseHMkAbqhYdu4iV7rZ7GBTHxr9wxUklX4uUwHS0ycLiaB7d5DcW3d0njTXZzyYCl5xrVsya+sbUHH11u1chftIASVuJVLm33AJ4Zk2IDqSiU+VSWbjWBqiQReISs8q4NIF0olJqDNJtfyOFdVWy0rR71K0BtwG26FfpFwDhsu21UgBxck1EVwu2d6kVnJtu3c2HGZGZOd1X1NJNnnoIaZSkTSaoRsMgqkVpWgGqqOrut33l48OIVWYbt02EzGzSbxwWq1cyCrXhxPdtLSEjMfLftxWw1AFInZlpTWsgy6QfItmrBnCiAWKparpVXk8Qd18F2K7A1LGxqihtcvY+XIC2quXDq4T22GBJEluxLTEXxCjrimy8g60tqg6pJCG0tvLZ1Dbf7mKu1cRTctZKEfMXAb0l20pofDeJffwK6OtM2C06kVHD2Ym48fXbBigm4suaLpKkAh5S5/nLm6cVGYhtLUbQ0OKDc1bG4oPTLV8d24jMvu4eIuph0mmtLSsgKZpWJLqOki0jt2Hqhbf7+Ki4dVCuoK2sxeNzv1dQ7lbw937lwYJbSx8YElBpxZmoTlXiWzgC+3G7b8uLBH5lzFEWrTIarEC3uWxiWzxEH7uKam6fpEVz/AEB57hBX7wDhNRBZUhNWYZ2q9OrzfHhlTPlTlIUI62Lq09ReZ0JUbNN/ESSC7dXqSLrxeGs8DgbxPGBZikJiNdevqIlSjJBLvfqji0SP+nTiTo7tZ1lTS/pjq9ifRKelPmWTtQcD7Q8h/DjcW+pGqHsy1JA+wTRalu9OZs68LetAV5TwA6M7QmXVcppox09wMge3gX46Cvu9B/Hi/DMrIW82GxCQbhQqIGvcXPj3Fenx4pKM8f6UyxKIzIEPPux7KFfZqwKK6o78M1Eg9rDP1kGOuNAx2niomBNSkvOG6Jju24hXkQjrKGLNBVNULDEg+YfBiWJ7dsI8IqOPPgYqMTVouqhyVK7iNILfFgb1JlBSsuShv6bYqqH+kFLSP4gtwdHBBdsxGum4K8wDgXqZNFJpW589yydR+QFe1JphCU6qum4vAXChaaQn7WDZlz2eIahVk3OcE3TSChOkleEVElzFJIiK3pDftHlLEY2zpqiAJuzpyVjUkUivARapEYn792IeYzJrOo3XEzc2TkrbdwiOOGPv3iv0EQiJd3ctuHVqfWI6kfawzfypg0ZhKmpAfrBN0kk2jZVISIB3ltELMAKuM3X8y+E2qr5MTEBG14v/AObitzz9yqJXuS3kB8+K7JLgLhPeJF4SxRb7LTUfpDVivP1ZOq2SFUSpsVFl5JyuIJXlrrqkOMuAqa7xRXluIytwfKkfgcFJIoNvrHCnaIh5cZ/aWflHG54cYFplwhSa5FMxV5pZX6mo2VASTVMC5buXF5i34IwMlGquSGxfalpCQX7uu7yDikU+Ag1TtMR23bsOFHRquFjvTG4jPEKlvNcJX0xQFWuCFF0i4cvEhXUsVVG4dt48uL5TaTtNWmWc62ZrtHDaSeMk0EEktJ13F5FYO/ukgs85YG8IokhDPn7WoCQcpJWpNBAbiu58WTKaEkp15Kic85FKEh3DpBFBe3vXVqW8ugfH7I4Bea0uFiW38Ea07qEUVqqolP8AOsdPz1TrxDF7Gx4IPWyCCGg1NAehLZsLVHxYztUVNeqEB4AV3KO8uJv6A6SDmDF8cRFSBVEslMvEuIAgIlV34CHINtqpl4LcQ81LnU8atULIBQasvtVySK1dW67k5LvMPgx9tuBtFukOlDVZSQ9T9NvPgi5PZLVZnXPKU9Sa0agokGqus9dAkKSXit5j9wMDpY+KWJYrdQzvIh6jxccvMucwa0lkWdEQr5dwHem7G5BJqHNqqr8iQ7S3kQ8uGb8hAolFDN7lrSSS/rchUp9IJmdlOFRAKmkhIeFC/kYDaXDpEFw84mQ+DlwGXtasBFw5XWJd07XNV4RPHSipK9G67vf86PUeC0xk6tpPLqWoOUzKga3RlbOK1FZRdVIAS72xVwNgDYRB3XhxSwKPSZogVFUigSRGJroLuhJVIuT7Xk6vaxigcabdInSkSaxdPah+tVCyTxZ4ymJ5nxBXoNmzXQ2fyvVzeDEbGrQka+Wm3NONHzg96qcoqao3eL6uQ/MGCIpI0pEzJMJiEhhhHY3a67U0l0j2kYiRkV4gVwAXy4bTD/LpxOCwjathRjbeIQHhzExP9UZGkIH8uGzTsvVDpQzjRDvJRM1nIdQpuGDqEgfrtgGKCRatgBaAb7r/AGufzYHLx+zKS4lcBbKJHaRC6IlS3228tn3eXFu9bu6g9aRqswgxbrK6SUa0QucLgI9SSRCkGzbd8pYqL7L5ylGuJJrKtn3C/bpoFuS9oTwzYaaZ26UMRGSi5heNdSShxDYkmvQKnP7ZYdUvAs5ucasH7wkG6p97oKpCrZ126pCF3tGOK+SVpbDLHKaR3WDavf0qbsFRUBLvr6q5LdnLs55QxhPp2oKalXCopELmUVbkqIW9QntArr+XpHqxaJhLsrS1ROn6ldtG77ZekQguhcHJpCqkYCIj0hstHlxhrsvQmYmYdTlHRMlxzfS+ui2YA8XagHIY8RaF15CPPu382NR/1uVUuFpBzG0PKJ3loNymEmSSSVhiPEFYQ33hdts+LHN7jTOtPkLpZhJswLRasyKIjuhOzo8UUfL5vRTbjQuU4RNg2uG0fCl+7gUT8dkvSSMpFR08vJ+kFTQ49Z4kJICY/a3XCCpbfFd8+K/I5QsBhvRN/nVpNAUdIXiAuCImxl3W7msK4uUbt3JiDSo2j+OIXWYmu41//VMSu8SVDxCRW7/LbhW5llpimdOxD9IRKJkInKKUWbxTWNdSqxAqZEoqkhcZcmkICrq8vVvLy4gJeEYUA6TB6sTFZkreKD0lWw7h6kLby2ly4ttVK0lAitbVrmQZn9aSFCGMVQMB/SpGQcOJGZbriwNJKsopeNb/ANoMa54cTI1dcy1QPxFpWBg6jafdx5o+JRfdEdqIdK5g08qweHVR0/Lpm1sSSaM1WaBK7eWwLwt+bmxytKHVThZ5FuUiTSS0iTU4pVLS8JCd22+2y7FLi6hh0GabyJoynkFAHfprkXL0iOJgpmoVU9Z1FSbMkh0i4Zwqgd9vtdVv3MFO0gz0jH+SpF0gT5NKyST/AINYquORUeFSEBDl5QtP/dxNJzzyNi020MwTQcO70tRCUFAy28pDdf8AFswOJ+BzNnmt8U8TSYnYQ8S9K5fxdXLiLjcjan1Fnbpdo2WDdcnHKrpct24rbALHzqdOQdLrisF8p6RRfkJmVas+Fq0IZs1VALl3bPXLl2mJcl3TuxdYTLaWriESVjIZ7Lx6A2eh20Sb6Ajuv7oCIPu+9gIr0vm5HRbhm5zEsi7f0Tg7B6bCVDkLby4rX5vMzn4ksD3X1T70uMK72yH+nRijGga5noqRPnyCrq9oilZB0KzWn3L1rcaqtrpJtpBzdWkHu3YfxURl8HEPIenbmrcAF0o2bpSopH0XBr/cxRo1OrafZpghKTy5W3E5bSJKtwD2SQIQ+PFvp+Iq2oU1AObaPlnFhq8TIui8ofZJbrduDMvKw7RzSqZT/RqTfVPSEbSzWrHycG0h3S6osCKkASVXNIyExtBe7mEue3FhjcyKVSpX1ohFSqsOqkYKik3apXAqI7R7/wCXdiuuKIzXQUFb1q2TTBU0A0plUd4c+0yvDlxyKiIx5Np7MKDVUaHvTXm7i5t1o3dOLiGneHQUlASIOVU2UlISSdKP46HfId6e4nVqBB0WpW3h7Xy4gyQMiLQ70rg8WH0lUlPt3gtmEiquWrpCQldd04cOHXCkQPEbXAF1GO3wYuyGw1GSjmkWkVXVGp3Jom2K668BIrffw6pPMOm6cqKUSrvKeLrBvwek1J7Irs0kCA+bugvMscuphZVQT1ki6SwyTqVQnCIR1QRQOHCukCvGJJEgd3OSv6IRLqIhwRTkMukBkolIwiSszV/A1BAPKkXyHpdizNdXhV0qqdNrr7hFLScKmStpldaAjizZPUD60qNaVlHMfS5NEm6vDMobjFeHBUhVPVuvSO4SHlEC+TDWusy6vYRriSZs8t0m7gDSfqtqlau37xxcSp3E3XFU7z3W7gvw3oWtHeZDInLyqoiBnVSSASkJF0KBAkrd3pWlYO7xdRkR9OLKnPJqUV8ayu8tMMMistamTWdz9JZqvk7/AKqu89LBA1w8SVyo7d3hwhOM/o1LJxTOnqzON4cGovpSpRuSDmSEiSLV6R5DxQX1IV5DOOPpzOmn3zp6lqkmxqB0QGqRW3g6LeatnViQY0vmuzi3UlWlScVwViSoq1kRPRV6DFW2wOrmwuGMIrwAW6Sq85V4Q00U06NRjq7GUa0dP3JaoiXMlcqB/H4MJzVVZuuibyuXIVi0ePXGl6vlGCpBYYjZaRkd/VtsHYeOZqLq2eQbtqcrl88bx5cVUEeu/wBXg0g8S7dVU0uq8iHov6cW5HOQ8q2a1Q0hlvAJMTS2u2ksq5XQVMbTVVXVSSBW+23pPZzYNEijpVZaEpkkzCAk06WrfJReTn6oS0lXb1+1XXXM9x3XpCYJHzblSwW65TrOBm3lP5XuqYgWLMOGU1zJe5xZdpEJJEkFu4dvhxlKme09mxSTt1VPqqDc1DKvBcrz7nhSeOmlgiDclbeQbOkvw26ky9rvMp1lVMSFXrM4FQ2QSkWygItUn6AW71VUDSETSIv0odPXgZ1gQKTq+ER9MhSaNG1m6a2Vy5Qk2fe3q8KDZXfbZpaSSt4+UOXou58KUvlpNPhJ42hxBFkH1Mmxr8ZefOKWrb0CN5DvwPaezDzrnqAWfw1QU9IAaCSqCsg1SZpLmVt9qSrrS0ivPvTDd4MLU3nDnu1es4dWSpWSfaoLmixmYtskOr+qLvTu279uLhJprGTu0V9IXeRXaoqaW/iE82HhVS0ibFEoOTsDnO7S1fnwGe0xRVJQNIs6temHGK2NYltCU4kkBK7CNJ8raO6zkuu68GyQzIqFJw1hKqpKr3Mw95SbcHINVQu5rkhHb07gE8UnNGGmm1LqJVfU76Ei24G40ZKEakS7gBLSBLVtvILtlgke48XlUsORdbUYlzIU5QQLaCeta4i56SoNdkKS8s7bLrviFITH7VBJAQ0jMOUjs8uC5nCrmLLLRtQ/SReqm7VXVjRaRZsQVbq28zU0LHXIPMrZZihZTUNXNT03KSQwzueiTSMW7mSqVBKRSV/Vd7cBoWXbbR58fk9RtSUqWs8qCqmbNppFpqumu5v+q1fsgIt227pwvdIp6uZEgAmWnlVsjGuf0i3fesYpjApuEjNqqhCcI6FKzpFv3XhG81RtxU/zeV48bkatPTlRt3A6QqO37UjSPaRkC5iR+Lbfhm3XoCXTboqnX8gRgYs05CUYSZJO9xWJNQus6t3dW+HCY0gi1Yt3jg5enFHAmK7Yn7pABDlAlVQKzVLo8VwYsLK5lEZKWiMjcyJ6aTbep5KDjy4cnRS8o6VXcpX26TVVLeJWXcobcECn3vZto+LKnIap0nismRgvHuX4yobrtiQukhuIzIR/RectuBezfyVJIx8rFza8eSo8Q1TmZwy1257dW0Cv5doEY8hHgNZyJZp1QpLVI6rljIQ6r/8AiSEzxKrY9u6w9/w+HFzVN1gt2lVOrWdcZIQ+Za0XSCsJmDR8lAOlRjpSoUGZs1G9twMAJuuQc5JWXfF0YyFWDeWy8qd5RVbNuElmith2/ZEG2whLwkJeXF/y7r9+1y7nHhwkDQrhvEmcTMCqqo6mHobe6QdEqqZcv1pKzSMfLgWQ7JgLNNVzHIJrKjerqEKpF7RYsq2ga9am9h61qES0ol5XZjU/Qco3mCipVeQSVPSdspFIe6MLSHSVQVA+bGl5WiKqdtF/TG0bJIktYqIqOGSSo/qhIQtACG4b0hGz28AbJ7Jd1VaIVNL0+T6ADVSQYp66ZvldK4BS0hLZuHvRErcExrM5hU/DxtErv5ODfGd4NnKqRaQXbAFV1pGYgFmELrQEjrg6Of2W5UuaoGpHjNxCSiApLIjahoM2rk0jv2gRBaYYr77WpeBbowL9JTabp0m7i2omO/ntNdXV5eoNuLlJX+vhc1lTEq+eJGY+u03DdBB8AdOxIuvqAy5t+HKTBo1l01qCo31e/NDjzMJZVyQhf1JJIDtAx6x6sSYEu8oyOKFi1ePyURW+j1POU2gmkqTmn2oirf1mSSV4e6eK7PTi0laZBGJiZ6v1YOU/aPfi0ZsVRXMzJI09VZyTYQV1RFcySQV223iBiIe/ihrRblASc8GuLXoXUQIRL3uXFiMphHcSsFGq2yQub4NVwlYbVOYVIQv1RstLku/ldlmDo1qSp6qpl4eYLBeo1GUiJqiyqpJJnYVhJJEzblYrdaX+8WAHQzAJGrYxgLaNck4X0tGUdGg1K79aqBCYj72Ncw1H1TKU+bbLVsUGOqaU2wgn/AoM1kgGwSVNmKpn47jL3rsUmcELc3RaimVRVKDKneJf085hY9EAVXSi+FSNfS6xHnBKwrbR5cVuNkqbBRRnEwMu2j1e9SSVekJq3j4AusH38SFLoOZFq3ZqxoyrFU1bRmzdOW95c6okDPeXmvxS80pSNy54FtFxTlAnv2qDmUuZEHRbfpGHitNLBFMWnQkjg6ktPVfDwNQM0ZlsQsXAaQpyhGrbZ07yG+/w2YZy2ZuUqqZHF0qUfLKjuJ6w0hLdzkh3oGPudGGrz1Izpt0dUQ9FtLy+3Vb3GgZ+Y7Qu3YHv0+gZlIoGoG1Pi+SVu4lMyVBdLaN1x7Ei8uD2gMwkvN5UtSh6iXB1OOnKRoaau8OES0g5fB0YmcvVay9dN42l3KA8U4tIXJDoD4zIfCI7sRE2HGOlJWLYKIRap6SCopbSsC3m8Rc1uJwmurTMbVr9GlVWLd+bX1emha6I7brjFK0zG3z4VkMiitdmjkCjNmJQeQ8CjwEtU7xSeaoJGq5QuEVwMhLXtAbAH+m/A9TeZRJRN8c2jHzjiLfrZuCVLZvtIEhAOb278TVQZ0oqpx8VRFSR7GHbs0moNHMIV3dDvK3vTPm5r8QLisPWlRWOJKil9ILUpB3TgIKkAeTb+I8fWpQ1rORRCqhKkqjh3D9V+TFZIAtQbfZWe5vt5ebw4ochQFPSTqyEr+MQ7oCJCSdXBfu23bvh6bsPFIuel5An8tW0NGN9LVSbMjeCBeAhvBXrLxYgZBg8dN0QSBBySSp3CuTpduKvlK0cWDq0kSKGTW1Q9b0rCU/IN2ENVrOeIkvrXCJKpcM4HnHeO8PBb8uK2JbRAcW6oqcgYsSN7U7xV1aZ2tou21wHQWqqO3l3DceKXqigSiqqxCJj1FgdwdWlPqR+TUiSco8BBqpY5EVA+bFdRBtaoa5q6h8gj48ekpEH7wjstEOXzY072X3OTdcxzqisysvKRSUj2ocK/F8DaReHcW3vVbTP2beXDBsMhv0rM3OszXJd1SXZ+gs7ZWjXoZa50uXMQ17mRjU0BVNsNl1iBOtiRdO23xYM02vD09Hx07LKps5h0zbj3p6ZnbpCZq9xpKlaO+3m5OrEKwyj7MzNb0MKMhHElKPXGkpGqS6oq7PYu2+YvxYslJQVTQJM4KFhZSMapDcTBtDNXKSAEdoiK4ElZs3cvUe8sCO4k8URS4CDemFNwIyjMptqwmZdu7SVVSi0WqSrJqrzAlpXDZdd5vcxC1xAv2eo5mKSSNZwFpCOrH8Hs6rLr7ei1IsX1rBfRSr25Ry1Js6fcJOB9Wx83wj8XfMZCIW6vMXn5N2KjWOYNA1HNkwaVDKRjlolpGUx3BX3+Ey3jcXN82CBpoDq3KvB2Z6dqCjN/lXRc96tqGm1frveoCUM3VbkZlvElzEXCpf5ocBnNZgsyq54/wDUIx7d79YSETIgID3eEbPZswaswKjinUknDjmFEPhAlW67Z8wdK2h4xsJUPiDAbzHiIprHs5iBqGBXYmWgLZi/Erj8qQCIXYakE21WJalD0TKGynI8yfrxSfEBcugrpKjftO1Xo+LH0eyzm8jXcW1oyNmZTMArFrnLwDfGkB8wEvb5rbbsfMFoIW7ldx9VuC5ldnzWWTqr5xRRs1V5gkeIvagICYXbdo9Xu4A2nJXPM5wLfj2laYbt0YeOphKNYt7+FYlagl4d3D7CH2xLCkGhSSEeMwkix0YxXSa8CQpJWF0EPhxQ4SuKPzCPVlKeqgZgm5K/8UvWw9P7UxEb+UfhxdKZqCkmEe6bfXBEzPv1CVsE7uQ7y2F8mK2yEjlpVJCYBHUqjVkpDzc8+YKtpN4oCt4WpNVXAq6W0x1eQbNvTiFQpeW9T+ipKVhHKUgCDjUQcpKmqqjcBaSWkvw7jffzW+G3bharIupxcJysM8j0maWq4EXzpd8kgdpfokhGzZq2XmQYr9fVvmRTiguWeWLModV4Crde40nSuy09qoklu8nRheG4iJX8oiKp6tbrSkkpFL5dLu+KOxeNYxzVyKu+41dA1Ts2ao28nJ7tdeVBT1NR7hs8WeM4tJVJuuovJGxVFW68dJqBK3lut6fbxdGL+YrIfsV6aJVXvZT1XwxXn+1SXG/eP2oeH3MOK2i38DCvp5cxkGrdrq6UkI6q52kWrxSqtiQ3l4C9jB1GwR+FSIkFamzzNkLptS9Tw8mmA9765aulVVQC7uhvJUOrqtwN6PzXraEq51VMJPJU++lfq7pRk1SFuKVw/ogGwBC3mHfj1WV9TdQKEbbLGKj1FUj79N+d959XdCKR/BiokW76uiQpny3Fhm5HAYqppfQyj6oeZuJxbCnZhKXcOFbZRyg4JBJnsC+29VU1S3eAbuuzE3X9PwVJMxo99WSDVN0rxSWg44Z0Rj+lLbtEPKrit9mjN9wFA+mmHmSMzFQ4JCkEomOqg6Vt2iHdAZkXRuO7x4e1TUFUzqkTU8XTyU9KR5mKScouUeuxb2XXiVpavVv3YTOA2GjmJSazZ90RTUmtPxfpD1STli5CxKRknqXGJIAf2RiSqpAF149PxcxSk8q2eQcwwjJjiXkUzcKk7bP7kle6tIlUkjG8SI/si2D4itDAvay+YszMKRsy57xVA15QheAzBADAiP6m6a3qjZdu5Cu9vEDMJRsNEpysbMJNXTdWxvdUqUedh96apCkIgd/LbZZZ1dGPjAQVpDNRcsNPQiMgeYz+PcsXrU11YKLb8Dc7SIrD+rkRmPNz2h5DxnecmYSRfKLRNPNodE9ooIOFVwH3j93GlIVk5zL9YPwrZBnxbXvWyDBddBcw8S6S6QAR7RO4+vl3YzLUEM8h5h5FLsybKMnBpGguGkY+Utxffw3DbqVHMkWrpYivHo24W2e0IDceGre8tllvlHdh83fv2SayLVy5QF2lpLikraK4eEvLeAl7uKl9RAo6GygqWHRZzsvPU5OpWIDwjMZBKQ/aheqlpF5caKpmEDLqDT+h8VFFwiBirLLs7VXl6vdJKpNyJUyHwq3AXRbiG7LFGRk3TKNS0rQsdOzTJ04ayyrxWxdAiITbrtdxaRBZzEF93KWDFUtZZjQCq3prWn37Qm5fV01JRvw75LdcA7RvLl5ki5cJLk+coqbe+CqTqn6jk6dlJuVoQJdFY9jGEYKoKoH3QgRIGQ3jdvMOe/xdAtnKjm8u6RRm1WzyPahxDVkK8MgK7OQSuELhMiMB3f05MF7MBKjaZhWckwRnkHwOASYO5INduz4i2/uvsrbLvfwIakqObnmq0U6imblb1ar629YEq2cer7xK7VO0+cUv0Xv4jQ7lcSzvMTklUr5SYnHi7l84LvVVTuuDDUbC9/DqWlIp++1oOnkoVraAAgL03IFbtvuPnx1Exr+elGcJHNtd49VBu1QvAdUzK0B3+fD7YhlqHJ+u+0FTcLAQc/D1GdLvXSSrOWQ1VXjZvb+isEjVS2l3VmDJWsG5i3H0mXrGVqgrTJJ2UbqgkGgYjtuEFSHddZvHfgQZW0bPZb02LnMisCKDZFqoQEe6uVbKqkInerbYldfy37j28+Ci0Xc1KzeVDSE9LxUUJAqzRfrq8UkZJWnpXq2cpiW232xwjqXWndC+ttEGMxVUo2jWyBRdVNZ6FjySXVVuGEXVS5y5ldcdIrCHafXi3KUrAnVL7gJiIk5aaZhJOkJJgIJOgK0ktxpEB8v8qOJGEdPUHaz+oqZngXbmHDro8QIKogJWkSukW7lvv853bcdojBCSj+qOJcru2prs49URkDAObXFewQS2+MyDzYhkCamRFNVOu8kJqrIVFanZB2vLU6ZqNW0e4SV4beRAAHagYWn1bsUWlWuajrWhHDyPkxVS4N00QVHiI5UwIgVVV0lby8xXAXl58XCroamF5ZNtXJzj7iHgHcuzEW5N1SEQEiMiABv6rOQejEDXVTZdEonR9Fs5xclXANVV2k2bY44No2pFaW3weHwYvptKhrWcc0qVBk6eIq1zTz6Sh1TSkW3qlCPcau3YOkP1jqvvttPFDp2l56sphnT1NMFX0g9VBukI+MjtC4ugfNg0ZuZBNo5YpLKyefVY4SvVmWRLpPH6Cp7t3D8/nw+7PFW5dZZVEjJPczZyn30k1Vi5hs5iNJJrfyHrjdeIlutIB+XGiJwhHShC95ECPpeKiI2n8q4Z5GNqmox0bqW1RX4V47NdIdqqvJbbbv7oj6SuxIVdF0M4GQDLqsKjjZhWOVfmglIg5jkjC6y4ri2pHb5hAcSVWQbb6XN3NPv4x3FO0kl2ZMWbNd4uluLXIUkrzSK0yC0r+fEDMIPKfnGtKy1bREDTrj64LRQW8erYYfapFcLfcqO8T0j59hYzLTua7LmTCOkUPauzazOhqRgqha1bFTkkyI0pQle/Hn+rqpIOBFU/ats5MAWqqola0qN9VU3wxSEkrqr8MgKCRHZbeIgNoYMj6LWhFJ6K+hTmeTqBwq3au4+WZyArnfdqizSEjBXmLYe27qwCXCBsnSzNcCFZuqaRCoNpiYFvAhxqGYoElSZhhKvJPiX5nw4X2kglcQ/dxPQMiYsbCqQlBu5XO0h8uHzhIyRI0gE1Oi7FHITQkCB45SQJUt2graA4c9I1bUEMLvVHZCr2srKCXdNBcoq7wUTVHb8eLsxzGc6bWNnoSBKPbpAlpJtxZjt/Sq6Q7y90sDiDQeMGxa6KBeEkzAtUPcw+bv1hfJ/wQuagFfaolddhS6wGxPGnDLUiZUGU9WsHkh6pm4+MZuDSNJkMvcCrdUbkg8fV1hZihuIFaNWU9bPGpCG1UULhMT8PTgnI1RRk3BsznmEYlJNUlQdWtRJe8DGzb3V+zpvI8CuYdNnUgotHMUmiN14oCO37xYHbdd2kvEIguk0HL0iBqGqnzmqPT7WHSjoGsa3Nq8EljMz2pCJJb9ne853ebEazcXuE+PRJy3Aw1U0tpkAfFizRK9Gio8fvIF36lVdAkkImC66RgBW3DcB77vKPPZi0sIqIkElC+tGy8t61qFsrJ3/xgU1dIi973cEyrp7s8uolGSyqjaupqrG+kbdAhLSJXrEVwXI/EIWgJ8uBu1SjZGWUbR0UoreqBtdZU0gsDnEhuI923kP4sECLoMKYlHjySoOsZBaPam4ViUIS4OXZvPVNIL7bDNLH3DcKk7tkiF6cuc685Kdb0YrUNYoJgkqqcTUTW51q3bxF1tVNLdcAldgAV9QSWXs04y+qyqafTdAN4pqM19UTv5FVbb0i5r9/Ti7ZhZ2valmnDaWlZCNnAQSSMpaI4N0hYlaI6rdfwbbrBu8GBjMykrIgssgrHyQg4NVUkdVW4z5lTIyIPmwxYF0C9OKQvkKozplFtXijZrUKQ6RGIrpkuSReztvxb2TSCdR9knmDFRahHqi71Xouh28oiCXL7o4r1QP0XjdiweMKfQWb3/W2jxK9UNvNYVnTix0rKV49UbsKaBeXRcWGEahIkuBaR+EFSMN3s4ZHLAZJYMZKUy/OllaqZOqr7R9QNW5vUknBR/FC6VC63VSVMui67d034MPaHlo1rHt8ppyiUGbxuqbiMrioRtfyrXVu1VTbpFq33c2qXnwGnFQV3TUs4f1blRHqtwcAMok+pwB1eqwlzSvDb1c+LvOVHTbqPg1oSHQkKZMbTpt6YcYxcH9qKSoJDYO3YQXefeWAqh2MT/BMqMZmUUG5KEOGWFH1rGPLw1bmLzVD2PIWHTGJeOo9ZZnKrqtWhgS6SYltMytDyfFiwiwhIypFmyoO6eUbqmYpGKq66FvKFoCJ3e1bjh3KUerBqRWtOcQHet7pQRbpGZ77kjEujzj7+Povy5UeTcFS3T14ktojKr2gVoCRltx0jxji7SmLrBvK5UtoYeF6tEtiKTkbOW648Wah8tzzInEaepxEWjxxeYcSltKzcfJcZ7PJiwnBAZEKDiUlHtYF5DIx9Q2SS6m9UhSa6Q2fyvXeH38eq7ME6hRTjQh4ximkreK6DJJBcgHkAiSHfzYJFWZNsMsm6jOUqSBfSDgrHCBN3hEh4LbNh3hu8eBmtExr8hcpMEkB5LUNUbvjI8UBUtH2m5GZBgq+m/f9Mkr8eHl6yqNir8SLzYfKQbPT7oCu6d12GKlPGup9f1yR8KdgniwXWjVRCQJzT09N046Exfk5Y27myTrZ7ontwX4MKkm45vNRLBfh3A3JXXDgcUXHwMS/FQKp4ZZUtrZ6zuL2hVD93BzRiJLh01o6sFVUTG8diogPk/pbhXdn2gJMLewRirlStX5zUCi3NU4iDazA/V3LkDQ4wOW0VUkrDLbykYnh9mJQ1ePXUfNq0xJkm7SBWRXkm6qA3lt2rgQ3+8HVzHhbK9BGJj3zara5Zk3nWp6DZtKKkd99ti9gkFvlIcLRsdVsDOOISl5KqtRkOuKTF0qOgd496TUC73m6Qx8pnZihqkdSo405WFMrKLU4/Z1CoZmOgxSVIL9vjFUN/L49uGL7NCsCapsIaj1WyjsdIkoSRNA9X9UqkkgleW3w+9icnIuqqjmvpPNnRws3pA3GUFI1VVVesVdUkjAvKeKzMSlJJS0gwSOeQ0nWlpoLpWqmBW777rN9w7TLDASQha0zqCUNgzTYTNKyrOedq6qq7l/q6oBaICV5eX8OPR7qiQi30bWHrVNwl3rBNoqBJJK7tXVIBLado+ziyVwEkkKMJUbOr0BVSBJqhJPS1QsusErystLlu8fitsxVWqEDL0S+OLoxcZRJxpN3KQOFUlwDadpXWXX27QuxaOsVBqMtSrcLETc46FnDRTyQdW36DZI1T+TBEyzy5knU06+k1N1Cg10jbpO0IYXgtXH7VIyH9/A7RiJtJYbWblBwG/wkJ+zz40RkTM1PVbpaHq2p6jGWZJasTqMCXJcwHYPFWkqBe4Wzx4XCWpOH9skJ6opCsKGtqGo4eSXjXCoJesotdJcBvPYRaS94eyYYi0athIhj9IRN45Ym90BTeqk2IlQ3bhAh1ffuxeJyqqzq2QlGdZP5VVQHXdNuNSJJc0i5CI0kNw+Igv5PDin1FLxqqjiBi6GGMdA4AXX8LpErYHLaQc/N04ZikpTUhVk9RMlVDdFlPPGLx2kDpJBo3VV4W8PshsEeq4dgfdxUfXMV9Io1GqHjFsThU3DhyklcuXwFqh7Vl+LNKIG6RWODeKim4Q0FSbShuT4sCEjO4xFXkLeP7Xy4oMtT8wwapyq60Q8JVwkkgguqqLpUyO0OdDfv8+JiOtRV2zQX9UR7M4F4TmPO9VWUQVPVK/aCSpapGY/yoJYG6aoKpkYmOml4iwWm83MSlNkwreb+g75L6vbquEHS7e3f3RrjeJh0klZ5sCt0LZq+/gh+q5RS3pLkloK/D0F7+KnxTCm2xTqDlJuLdIvIF5IM1rr0l2hEJkYeH2MFyWf1VMxMS5rnNqnJOLcJcU1QJJJJ/vEufuBV57huvIL+rA5p2UZyU81WqiSfPEQVsElF0C0r+dUidd103WnsLxBgsPEoqEYpxrCtkHLcJIBViyjY0nRJHtN0zFIiNuXsc3ixQCm+h+Rs4lustHLNnLhxsNBdmkVvvW2H8vKeFoOSmG74ngNvVjhUf4yxFLeHnECHby9eGLVg8pVwm/SYVHEJu3XBJL8AKRrt/wBeRW2W+XdhRGo/Vrz1bTj9mTxVLiDfPl+6vFK6wdxABf0twTFLiJOqoFZB9ov5XXdGIArqRxiOqfUd6pHdu5rx9/FZdB9H5hN5PAxeJpczYhcICuHs2j5sTFRVgFHuh49++KacIWOBd/Vg0rOQrx3j/MxWYd00l3AvIur43UMryYC8FJWzq33D7OLYqMl6Yi0Wca3lVYdWKRe3m14tqqN3VeJAW/YWIF5A6rdRy6mGapXXKpEvcqPtXjiwVUrU8Qi3RlGCqDdIdJAnKRkVgEV4iR7LfZxV1ldXmBtyctwD14iSLbLSqXOeiNauFGxLERGG0Utokfshhal6XWf/AFt45Fs3CwtHmBU/cxzPQIK3OWqJahlyiWIuFcOYlwXokXb5mn5b8FYSJrSojEHdSK0WwiifN0VQFNE1Q1yStFUg67bxsu9rZi05mqSWTKjWSQjVXMa7bpEgTl0lxSHlVECL/Shb0YokeuCrVN41NVQeldQebBopmqoSo6RcfT94+Fa/h268eCSpoH0dwBDt3c9nP4+hSxod1phWCRtdkhW1zSpWoHBNl4dzGkq3MAKPYJLkqfm79L8Xv8+C5Q/aCYP6XToaZlaqbd1pMpTg0kCQ6bFbC3pCBDuvIy8JYGclCQ4t1JiOq1ygokYWjekkZAe7lBIcF7IXNWm6cjXUJVbaalWKSvEa6CqTlvYdogaqXRsG3YZdfJhq4ImMopG3myQ9zSpxzllUzFnUcrLzUa6Ixaqx828EEuk9yo2clvL+7hwnMnEUym/Scy8C1dmZpOVJRVyap+G21I7C2/Hdf0Yu2ej9m6Fu8yFlZq5ofeoR6qot2pmPUke8CPmuHw224oMO/lZKDUp7MONfIODvSQlB1Xlpmd1hX8nN4+rAzJzaRRDB3aqrLVlNuhH+HhX4gO9FC9IRv5xwpAwdQ1BKepGsVruuFBVBNdAxOyy64dK6/wBrqwzqSkm1PyhQ7yVElA2KkQ3Wn/miLFwpORphJq3eVA8kJBNqADrx7oiNIL7rVRtI7RP+g4o3kmZEIDIU1ZwM8Kws5RnHoC9SMG5CqkNqpjdpKkG+6zdbu6McjG8QsTl4cGu4tsEWTpVJVX+VK397kxJSVT0BV8fwdNVULFwr36BOVWpN1VfCq1Erw8hbsUWYSqpVb+Fgp5dFqkDdLTQMuki23+fpHDBtjT6UnccmSlJSIRAVLgeM+90u7fiW+y7rSHDMWcaVoLysmoXL3vCq3eyV2I1FV5FuE3PqoUEzELlbkri6uXcfkw6cVlDiRIlGkKiqRnb3St3guExE/hxfAkNMFICMagsmsLlUhSC+0kgSt94LtuIOtaVh6vbEsQNmzrStFyn1+cvHiPKsqwB8IJU8S6NmwmJKpKiHwlZ7OGNTVRmK1cDc2lYpM0tIE1SSv5f5JI8Xg0YahJSFxo9JIUzsLNUk84CYbCPp50lg5FR8Ql1Ys1G51V5R1icFU7gW/o9H8UdejWQ90Sut923H5VMvOO2KbefdPHbdLdpuT1LT8Q7tuBypbcVl1vTjX22+1INRc1CkVTTCBaVrmk+1izV7muKbURv/AMLjbSH3kj+9f7uDBS+YdGVfaFK1O2fKGN2gJaTj4D34+drd+5bfk0iK3wly4dIy53ioQkKgem4TH+6ONENdaqof9svooImyX0sTmTu0S5g6cPkZndz4wlTPaGzJg0023pqH0y7cNuhJd/8APz/Ngx0n2oqVkURbVXGuYV0H6RDv2pfjD5sWlQuRzGtQ+yvi0gUpd14543bz4ocDV8PUrUnNPzzOTTSG5XhlbjH2h5w9/EkMoeBPZJeVm4jCajrdiFGRAt4HhTj9XnPEV5ZnYvTK49G0fFZh0m6NdYvsi2dI4j2fEpNRsAtP9zHhB+uoXC2j7R44dFbQSUhNKgKiIDt2hdaPXiBfOEeOT5bRPHpBhLk40V1rlBK3mxGqRblJawlriv8AFj62ALxEkqwqc4yKWJBdUlFe6HAc9Bf2dmC9UCDdCNWN0aBDb1bsBv0l/Z2Y01kEMkoJbXFrV+j98eJifIIY6H7TbhlEiqlGCCpbvDhyKtpX34qMdRKQkn3KmRaw4nqHSck8UWSMk0wSsXJMt5N/DbisC6NT0aIbrz8ODJTVFy7OjnLlCli4lw2P6/rqpEr5RHaG38WF1a6NO30HzI6mHNLSq6xVbJs38qusg240jBJMjtSELdxFhWFrCnknSzl+cV9lcVrM0tfbbZst8uGEo1fK03GGwZi5U71Ve60h8PLijE1d/lUV0StAt2y0RxKnYExIiVVSWpSEtKeiYkFn/oYNmwq2dw2C0RwccjaxzcnU/oSxcyMhR/FN/pAMe3aqvCjxIRNJJVUbztC+wOQfewDYOXfwks3mIs0k3TU70iVSSVC/2DEgxtfKxKEi8oYOoazckh9JUnf1alXTpd6uYDpCqqgC/DpD07QH8GKLs71djpjJWUmotau0lDdm9emxc1LGz1OPBVccLc1V+tWlsC1UTC+2wbhtAj8vKDqklIR5UEb9FaSiKdZtwVAGUg6Vcv11d28kG6uzm2XbMRjqorCEpd+rIItTtBoRqqAlb5Qt3YiPpeg/fKSsksg0fAKos3q96pKdQ7rit5vCWMzRhAdskxdL2k9UVmGGisKMQu4SXPiEiM9t9xaSti+zm8vKG/DOWeoqyD6oZZEXKj1K1qh6ruSG/wDancACHx+bEXIIcZrSU2t6wdK/pCauh3j8IfdxV2LN+k+TOGjV1XSSu3SJcjE/CNhbMN6fAEG6p1zH0M9EvWPHM3BlqmTYVSuO7f0l/TqxWp2lIUpYmlKvHi6YdLtroK/Di6I1Q8jmLp4dGPl3ADoEureqkkd+9XdyF7xYgKsrX0P45n6XsIo5eKhdxq4ClqgPh0rQPBDRVEtqiUY6VWpCBYNYtN+lJXOL7VWyo2l7Q+P+divuCMS7oy+G7DpaS1xHuRSHwjyYTF0AEVqIl72GIyQyIuTsNVs1U7RlQjeq3ciTcxcDAa5OtItu7SHYlcI41CWVecUS3UW+is9qaFy7uQMSVVC63cR7Q9jGc8iMzs6KRm0UMmGerIiRrnwUIg8dWcthKklfpeW6zGxKZyz7SdaSIuM66saxUa4EH/quPeNU3Qn4rFVRs6sZHiUHJSkKcWyqFlCsaZrZ+smHobLrkZ6tpWkImfMfxYsikbPMB4BrUj5y+MGlzRQxbCSRcgCOqWqPlC4sXutKZyWjGjgHvprIZE7wSW9YoSQqmHIJi3v5ubApqIaVp+STcUg5l3LcLDJyogTQ0O96Luch8Vo2+bGOETPSnuD4u6kjmc/mzlBiZ5FqzWZXvD9WuiESVPbaWlcAFs5bb8Q4v1peZRmEGcou8biBOHJTYkleFthklz2cvMPvYcVAMbUDqQqGoqy9BSzgDVboOXiCRL7S+1VFVILrve8WKpSVWxjB4QKuUEmuqAabLirldw8ypiXV5erDphgsGOyFLyIQLUromu/cFYuEeXe9wXGrlafN4vwYTkF36Szd+roJFYA3cKqrv8XViQqao6bPRf0/A1ChpDc6J9Yvd5hLdf1b7B9jFXlKoYVM5WZxtHvmaKSQgCnrEhvMPEKuz4bcVjR1O4hX3PBdTFRyrX6yg5SSWvSt7ohErOnmH+hYrqz9apn19Rv40RbmIiK4kmRF7647cSJu5t0omlKN41RqkIACbl0gSWkBcnKWIdqvTj50sLVs+c6CuqTaH9BnpH47u6wZTtZXKoGUuZXQ2tMB6E+FoBGXTBIBJUkj0r9pFYW4PF0YuuWifrGSbJIBG0xAN7zXXHVJWy7kS5gv8opYHP01bJegmDWKcpIhYK6UhMroXGHi73x+bEc8zDqfVatmrOBX73VAU5ZUrvCO9UfmwK5RP1WEPtKzrLTSu1b1fmqMk4bUnT0FORbdW1B2s1IrtvOW4d3vY5YZg5zzKibaoo+JZs7LiEWC9l/QN1xeXcOIBOqGboSCSWbR5HvtQbiuHskJ3YgSBs9cXmC5bdpJNRsDBrFsEWsrLEVS7WlOUkSnEMiQia7Cjl3ThADVJyS6qQneO0hMt+y3oHCZRca4cCEojQSC2lsUQZGRaQe9YHsnipxbCbeLJrNWGuikX+EjaHvbsW5NkZt0wXWp5tb+iSSK/wB47r8WFQG0MQJQ69JUeWb6TdNFJtHuVA33NkLbt2znLYWGLgFlVCMgElDC+4t2/FgkItyqso5NZtp2WfVlRs+E8QbhJFqRJWL89nOJYLGm0xQxPko9RCVaok55U0h3aRheWCxS/Z4YVZFsZ6Wkpp8zfAk6SJpEjagB23kZGVh7NoEN2/xYE6i6IJrNuGuRPpILrsHCj8znNaEpCL5exDGn2nevXJEqQtUrrkjPS0lbbxHvbyt2bt26upaJoeyUhdluUDO5ctqqUkofLfL2MbWWJRwk3XXdKgkQpapKmIh3u0jLaFhXbcFnLHIrP2JT9EM5y4pRCmxEF1VB9DX0uHKw279io7tu2+7pwJqfzUqc6ifLVGwcyBGurpIJzbzh7FQuVG7VVC2zSG1U7O68OCdWGeNVQjxOEYI0mu3BmF5PVwSbtVbfsBJIRA+nYF3t7hwPMp5T+pXmBwHKUg4pfOWl3RM39PRqrU1QSVezssk5dE0A/wBQkKQ+KzcQYg08uZtqs8cylVU4gm4vXOPShkF0ktvKSppb+rdz4Tp3P2oZmZRYTsRSpNzsXSkm0Qeg8SC28xvdJK3Ae37Lou8+GrrPB+weKNpmEYuxdpKrsENK0tglpGS5uhS3AQ3ju5w82LhytqqLNVbqaiIp1INXlKXJLN7DSUaaSQEqdvKSSHdefeWLU1oin6acRM3OUrK1m8cOEieJrClakelyoKt1SVDf47Q5tvVgdxuaTZq8J5IuXKbhVUOHXaOmCAjefReRbR5TIjLlwYqNVqSrVE0UvWE0JoHruy0rEErebimQ6V38kBc3NzY+P9kC+ih5S8bT2XOZrhmwoNJCq5Z+qbOUknTxeGZslefQJJBDkE96pFYPixqxKpqPNBaNgZcKo9LRIClm0WzcSaF/tGuSQF+y+1wBpd/C0TPuqGgZ6FXcTYcBoNmfrBry7+KFwke/qC4+gwO3F5yPCn4nLNxS1ORcl+QKgdrv5j1G1SZlzXjbaIB0BYldv2hsx8xMDKRblW6MRkrqpJZdgsQPMvZdsKW8iTp8WzcjtutHdze9hZaXp5nH2Rbyo4VNIjXNBS9C4A3CFri4Av8A9zFtp1eKpOFUYM5faZ6o6UWSSpGW3btsuGzwcg3ebFCqiDhHjiecs5tUSsVFCS4IlUlTsEu9VBIgPl/cwfladaHFzXFUWoKfqRWWKpG9Z1jHjbxQpJ8EQDaV36ov6fHgf5qROW9WxJTFUZxzk5VSTUOAbE6jnIL7hK0EtKwC3eU9hjdgwUi3lUlmZt3TyQKMMA3NyQQVOzqELbOa23AhzponjH0hU6VMVZT8g6C9KWi5EiS4q1IQJXVdFf4LUhHFeMhPSr96HPZqpOYqmopCHVpOk5V0YAuuylnjUQfKirtSGwhNIrL+UFeXl6saNqWhZX1DJRGYFEZatnosxQhOEi1booLt9xvS0j27QsEfKOMzvE6yoGl2L+NzTrGOeSrW1mnJRKDNw5vO4ySVFcnADePNbgsdnGlRQjZTNPNJarl5hLuGbmbLiY47rbFQvFU1THbttIvDil8oScUz+imVP05RMXIXv2ZVK4ZIN0CYu4YkEEDM9mlYkKW7m2nuMt+LJKJZxt3SP0fysFzExgGk3bLyLdiSSXlK4vDy3ieKS8o2Em64WOeh55oi4dXPJBNBuQyKo7gV0klUuHEw0vshHl3jh1IU0/8ApQo5pVzK01FnfpKRL9/q3227hca/h8A/DiAtgW5SIu6p4Qqp/Tcw5qZhHxDqTLh+GKZSXBqkQbwQapF3twCW28ebFfdU4tRFCR8rl9KzzJu3eKik7hY42Kqd+1U1dUi0hH+Sv2bcPG8lUMTMKcKDuquHDVeRadQNUnSQAd16tiGzbt2B1eOzArqytcvcwUdV/FKU4s7X1X8fCEK4LmF2kd2lYf2pbdWzbdzc0mhFraOlSFonSUfmZV7+bqSUihm4yej0gbtUpJNkkS66QANly5jxAEPKfLyniRyPgKPq6tWcdWlZN6fbgqBpEs3vScld9lcYkkP+d24Gjdu0QREBNJP2bcT0fFxTyL0WqsqrPKugBBsg1EkCSt3bue6/ptwI+WaS1jdNlMZQaVtyRqXL6o2alJUXmvJoLQSGlw0E5FS0A2kVwNrbd3OOzcI4gXFK0wyWbzBZo1eUo0sbgvaKuwz5dXhRs908ASgaDrxCPa1ICxU9FtHBqunzJqqT8gLnSLS327eUzHmxomRzegalVfG9Rq6Th3q+glZBkhwbci5RLbfaBXbxLAZ+wkrlMVOUB1KqzFPrMHTpaenpVBq3IOKdu5Eo9UTVLYQkqIgqPLyBipp1blFRrhOmEKM9cN24mXEtnGvqmRXXau4DLcW0NmP2pTy3kZoZimM65Jk6BcyVQEDG1K0ebiErT2CXKF24NmLG1nMrnSPEr15Kyrpud5akTxJBaNoEqKSSXi5R5sSEBAIipiRfpRQyrjMumJlFZFg2qOKgQV4PQQSAWSF/IRDbeF9pdWKBMK0eKayNPnK2gXcLquEFUld3k8t37uC1VGYhxEkMwlSUVIIne11E4t/H3bdh96RB5rcCWSlIqWWZv1aYX4o3gE8JsqVroOYxtt2Fu5h+DBWAtRiO5FsC6BSIdKgdI7e9DafV04O2SyU26gXNT1G5npWJjXQMGbb6QC2bsXFlwLkJqiZWCWwR8WBQskjUckjCUrTCrR44V0kmwujXJU/fuwYaXi4FKmvo9nDr+tjfg6YPrRctxbglaCBLtyJUB3kXg2c2BiKCKrnZtK1M816SYSEktUcIxk02iXdNI16F1hq291eSRmXlHVxC1Bm/CVrKepIunqhYtWqvEaEfFgq6ILf0t91g83KHgw4Msq4uF0VVmLZYN7NyIP3KRK3F9qKRD9ywvNjmlawpiBcJ1C/eRSDzVsJSNhlUDI7eRXVSVC32Dv3Y+iURSbKa7qr7eZy6KFUYPQnl2p2KrpKQjdAAMCEbgIxG8v6W4H0tCZYupJF5TlQlGcPt1Hcddae4v0SVlxAXMJc2DHmBnjCMqZTZ0+EfJ84kkvHJCCAFzgkKqA32eLGc5KXeS6wrLggmIcukgA2+0XXgrB8ooikpBMpRVkqCUiqgg4FhFguvNJDpOhQYB3/g3BvMvLjTeRNMwtNUa3gswaNY+v8AiTeJJOWSQukGt9pmW7VVLl22Dbs9vAAyWlm2X9YxNU1VRS72PcKhwbslSbaCu61UFTIQMebbd72NGOKyp5039WsKzg13h6qBk+lCXSILivJIjK8xLwEYgQYoLVuUbgRCOQ3tU9MUhkmrNJs5mno/jneq4FBdJJVUgAR6ecP9/AjzmprKKBFFs1YU/H8b+lTZmOgd1wEStwgly24tQ1rmRDE4WeTFHKxIWJIOY0CSVID57h0i9m2/r5sVWrqSla5UTqr86clHi3HSBtIMxsSS2/sivHl5iLEgyA3JUAP7hSNPv8q+BGNp1FN5w+kr3sogqzVcbdVJK8iV0ubkMj82OlJZhcszlKGF5w7cNJdBuBap27A70fKXKF+GbfLmp4uJYxstPQq6KRGAkhT57W9n2oKtWu8r/wBbvsvuC7DOSpl5DTTWNCrUnLV26A3T5MVWySAEW8lR2mFvsePF4sNHqaJTz3f0gqi1jExTUlLm1PRBDeApJPFVXWwOUxAdl3LvEcUFZq0X3roiXtYPktJU26nqqeZiv4iqkVRVOnCQfqpIIGZFsKwRutEuW/2BLopearWh128BUNHMY6NUkGAHIsW0jr2K3FuET3pcvUWAiEh1LSUlVLsooHrlc4I0m2mndaI24NnZiykh8xKxGQq8zbQrTvdTjDZargQuEQXIbdpc24T3YDU0u444gXHaBbbfB4sGnIbMyqcnBRfnFLz0BOKgJMmU8u0caobRG1JUfFykkV2GJerWeqhORQWwZKUh5ZwyF/MUU2Yxom3uGeEVyPcNiqtxdHSR49KREJGN74qtaZj+LQSapILzIqBwm68xtEref2PY5sRUJmXlXmuutTzDK2rzmAQ9LheLesUCJJx+qucbN1pWmWzxWdSdUS0PEegoqnsmYbWj0AQVUcwiSBJAYXdCtjiwuey7AjbDQSJ9A4OnpERVUkUMjqEqBstOVuMjOKmqQNPTCJaTi8LgMRJncf2QlcJ+yW6zFhHOuklWbo3KzlqxcIWpaKWguht5tIx8RD7vJh3BPVpiBjWnppinHMlHsCfE0JgKCQmlsLSJUiEBHd4Sx21qpGrXiNNwNDtIqWkEjdcS+AtJmkNvOTdUgMi6LDLYO+3FrZDyKbgn7yBuaFUQk8m6CRq1mvDrMG6qTEWTy4rC2KqkkRd7y7bB5AOzANdDSTqn1HMoaCSxmFi7R0aq4hdsuQVtM0saUnoObXkJRsZy6BOHGk1TjWqRMlWiRWmdx3WFyl0gXWO3GWcwmE8VUPmdQIxECs0S2oapFqgd1nJdutLy4YMFmiq4wT/KnLtXMubWgWcwLFQA1QJVA1UrLrbjIPsrfEW3GsqV7IuVzIUWlUQlXOXjpJJqSpNeJZ6v69AmpcpbvtbsYSRFZmQgTwV/AoIlfjZ3Y9SmHlPunLqt3cayJVJVRJSUVXIhArSEUElRIL/CqBcuAqoSHVJWYkcdCNtUxsdlGqmnl3DqQkO3SVcLEyjVbN47SJW3o5ivO3y4pU9PM3LxGVVqN5IOtySrt6lckR81gAl7uC7XdRSTGPFGMip6owDYCC/CtknJ+EtyW3yltwOI+IqFBTj5GlY12m4V+sR6ptVyVO3eqkqapcPaG7SuEcLXx1aVKlLRIlJ0dM1bDPBB40rN9FK2G8SbRZkgKVx7UtUS8u0DvxLVZA0lG0+cvMz0q21X+q1ZKIXGrdusIG+z2LbR6cRMnmE7Xk4uLZVeDk3ZGDiCXAtIW9nKJhcF3NYRnZiIFrQCFVNY1q5QiJBVvaSiqQEZKmGwtcy32GVton7nWJjb4xyoyVRNHOe1Vm3LqIcErT8PVDwjI71ReJNlSMPFtG/m5urEHOerX4y0Je24zgjVatnr0nLows36ogvfvuxTakf5uxswNMTMC+mnDh5qpOW0oqlqgfJaIEIB1brPdw8cZm03A0Cmzrx+XGJPFWryEJUHj8btt9wbrQ5rS89mDGidMeyX0ocyzK4YRSVUOGEibxmzBU7tBmZKpeAdJUhPw9eC7ldRFOVLErRstDsUo1ovrqz7mMfpukgsu0rgIWpcv6Ux5sVqalMpZuJmJsZ58xqhuqHqvSblpLgO4S2JJWeHcRcmCTl1248xKYhhputIuHrJiCYIJetExSXTDzEA7/eC7H2pbLoUsDx5BWqG8pGSlGsW0XLlMsI1q3AU0niH1a8LNJdmkJAAh57ubmwPo945YRo0q4jSiI/SSQbpoOi/RFcdwhcFvLzWni75fU7kTUFJOqzi/TCCiqqqEihTbpdVLiLBLSEEhSvLlLekXTux+SuX1J1DLJysY8dqJgkekksqYqtgC7aYGRGfMPhwpdpiDUpU74bF+hSLzNH6yghGii0v4UvQ8ExEBMrObVC7fykA4A1QReXsC3nJisKVJ8s4dKpfUkikAV0toKpCkgkFpnYXP182DNSqUO1U4n1auu6RSC1JBdJVrqmVxGqkkRGfL0huDFPzFpKtagWdSstVQwkk4QcKs+EFBBJfwBv22Bt3EOrdfzYLYyBGS+9rOKz2pKPHVHoo5aSTFWJVSBq/iRMkn6SplcZikFrgxP3gHAtqaLqGEkkW1RsF0FtLuklVbiFLoG094e9jQD7J6sFaZbxTJ4LmSScKv2syQoLtV0g2mkIgOxXcJHaKvtYz7Vj+qnU84Cr5JdzKMj4VXVVEtKwuQLNgbiLaOzB+BAY6VUM0x9jbjoS24TQv/Lu+XHXMW87fN4cUqavuU9VZkU5OqBl4weSrpwl9YjUmqrkF0g6iSS37fFtxq3Maja1kadj5JL1QKL1INqsiRHGd0N6Gu47oxG3qtPAUy6yRo+TW/LF9pen2M5cCXDRaTrVK7pEjEDPaXSHNbjSWYS0j6a1j5F5UcD6BOOCLZSy70B17R3kuBDcBEZF4g5Nw4T3OJfJX1o+1VMqRrPN6dg4Gpp5MYNVqB6bJxr3WCKvLpdVpbSuDd08+BrVCTan4H1rTJyEGi3SDSkJlgSpkBBbzNyIAAu6EBs5rMFxCQeUmuLQGDZrH6qTAnZSKTw1Tv8pEfISReCy/FDrSq42q4l5TEzTbEkUhPVUQjknJxzgQK00hSVIDE7ubxmG7FNHviYohz2FldR0s/InLgBIjO+4QtPBGyDf0/E5kRryp0YxdqF+2QeLoWq7bDEkhIwV8G3ELWmW7+jUVJJvMJSEXrggC4pKoGJnuESEx5rfCZYtGTGZsxSskzjYvLWmKqkCcGbUncXqvR8gkBD4S5rrcPXCmKGWwq9oZ5JVIjNxYyTZJJuaQrpRL0SVbkBbV1ecyvK663A3Y0q5bmlQj95EajpfimfEkLY77CHVSLfaR827z+HeUc781OHQVpt1KjEKE1uSUZESq7UzC3SdJcgb+Ut23cGB5QbiFGHZsJ6sF414lfoJMTBduR33aBE6JUz6eoT3YzbtMIFpV1K6WVqVjhYx9CB6XEtWcDKyD1JwgMg2kx2qjyAreBF5btvsFiuT1ZLUqosFV1yzVWhy+tRtOutDjLyGznV5rhHkDFsiafWqKJE1X7ReScKmY07INWqqWqHV3v2R7rgJJWz28V2uqFZy9QQ7ab4ZfjVQcTy8WDjX0rS3iVukFt15j5eXEwanE14DiS8zzaeQj51Gs6eXjHjdA7UCesxVs8BJHbeW4f0t9nJgc1krD0emTCudrF8BuAKNBK1rq8+qIDpHeAl+i68WKuKcp6DJSKZuXy7FXSXQQkGCTwVTMrUu9AdVIdvNtDAbzzlszmrFNnLAMfT70rUko2eB4wVAPCP2obrufB1vYmvpEChZ6DyWXUIKXqRBi+AQXbriLpJVVXrSK8dJIg5uYbvJis0TKUnJVcK2YsVU9RtXCWkgnFugF6qrcNnPdfs6cVdPvSEBDdz2278FzIHNWj8r1pZGrKNZyreVBIwc8LrukDDk0kjIUusj3EPtYdOaG/RqQaPlPOpKrKAjY3KimZCP9SFwuvMuEk35bi7okEhv2gJWFbyeLEhUFK1yhQKkjL1ClFPHpG4ccXwsgTowEbEtI0N47enVMbryvw+nGELLTMtUMzT1cNFzsBr6yJJs1QPaV6TUy1QVEuQgIgLx4by0PFxjHiX74XsSi49YpIqiqgveCVxXcQOld9ry3bzxnDKBotoZjoQzRKqWExw1WxrFKn2gqi1kICDASXVG6zirNgKlbaY2bTv8AbwB86F3jqrOMc03JRCbpILRkG6CRKmHPaaXOPvEfnxpasJZ+uMtXNEM0nMpJxwN+GctXTbV1T6iVtC4O6sstDGWa8b5oxDVvA1zD8Gi3Vvbl6uQSFUrbdqqQ78aG3kR6zQz+hU10uDVqoat2n1YralPfXG8lGMLmpl3t1pfKZYsDgTMdiwpe0GK7oOYt6S0Wsg+IisXQEOXD6nlqigSjLUr1AwMbJOEzXtZxqW4+6IfhsEt3Nhw+eRUcsmjEs2zxEB3KLpFvO7l5rfhx1SdayVKqOGDUxJu4StVaE4VSQM7OfulRO7CdXJSQOkVlQXXbmIGK+lbaHh3/AHsKiEzd9Kfy0qPfVLJSibds/fruU2QAkkmQ7Ug8A7cI7+cwVt8wYZlrJKD9ZIR8OOVnhn9q8+fFkcEGREnCY/WE3IrCJJHeBXbPe+HFwi6yfoEszkX8eLNZI9UWjIB1T8Jd0J+H+hYrcS/4VEmbxEV2bgtVUUjtV9oTtwzdWEsTlV48VIy/SkJHjxatKk0PMpZOpXjNR1wblJPiCsMeFDvQ8RbbMFaJBGsolaWpWGpynJZulriUbMmk6Vs3Fc1cGQW7b+6DAvoVqH0sYrJQI1Hu3RpHpAuHhIg5MHZ1UdBuGoxXqQYqQ2K2sWCDnkAS0hJwV6Vm7dYPLgSpxhtRW/chE3rTOCSkBo9Wg6amZJ6YLgS8CzF0qFpX7jEfmwP1ItFxJPJJelqljCAlStQSFUUlQ9gUrBAyEerBYrpxk7QK7WSdLFVU/wAGqXq1R4qu1Ey5BVNJdJVIvKJl7OAajVDNm+9ZR0OpHrARqtyYv1xBLwfa3ffw8o5OBIRiszVxadiRJ6jKIqlov6hk2xcuqorqhZ9/D6NePKVWZ1JRtci1lEle6W1UkDS83Nf8mHkpnM5qGJRjZanIhRZuO53waS6qvLzGrcXT04rpTcI6tN1AtmxXWmSAK8nit1bP6cuLxEuYUMRN8pK+Uvm/XM9U0a2q2vF0I8C0njtHSXVVS6rrufBWzHHJxgxcI01N1RDSConofUy4B4qlz6RguQWl5Q+HkwHouLob1Y1noGco6QdNyPjImdbqs1Vwu2BzEHwGPtYs0S1ezqLiSpnL2IQp+wAVJRB1IIIK3b9JVUiMBHrtITt5bsAVLASmOn6Ka0LhcyrlRVhN1k44mqJ5STdHYZLuyElSsHqLnwtGwMJUqjxtLSrZm6j2apt1VySIHSoXECV23m5brywrVtEZcRjskirsXT1wqapjDMF+HSA/DxWkfu4q8bHItZYVkgXkI1IgvTcpAJK/ARdePg4CW0kwLwpKWpw44kwcMGZaqWuloOgXvD/NEWJqkX8dFpuNWYSZ37iFzHKrmlt/RFbf5dvvYrMpCPNRR41+qIqlcAiqZWh4d+IlNq/U9AmLxcenpHBOAg6EZIEigW1EVSNgagWUfjWaitliRKJpL3D4O6PeI824QsG3D2WjuKkFGFORvrpFoIXKqNSbf6UdJI7vfxSWdLs3rEnLypFxdfqlG42c3626zxc2JJQWEMJfRVzK3XgAiquCSXTfcKRECvg8BBj2W0PMpTdPlUPUQvGRJsHTZBs651U0iVEx9q8sQok5SITVWLm6TxMTRStQyRP6gfpcRbZt6sR7xmiybkGt8OCRINqrcmrVA0lJPCTlUKqaNlGityWgZK/MHJglRdRzypWP6h0hD9IKqqt2IbLrKPhY9OU+mEeuLobtNoIqiP8AnerF3/N8t+ilRL2krcZ6vr6bNyiLanlHSOg1MRV4y9zzeUqomwevxVY3WqqIOno7P2qBlpK+zt9rDjOSezXL1e5SoykXMfw6S6Sgwzpf6uQ3Xnf9l07A8OPZc5boyUK8YM2bxzUl4EkoLVVVmzD/ADRdXmD3ujFqqTLLMiMUj0a+oBjFMW6WrxaD8EEnX7U7HRGZBeXLaeJUb48u1Lq4RA9W5BtvLvEHjVaLZwMg1BI+NSc66BKntGxIe9MNhFt9jbtw6qaLbKxa0VS8UMHMG11VXcozJLZuG9LVHffbzhvG3FslH6zVZxFOEXK7V6qYK8SQrtyO8vsldUbB9o8VWQYOSiXjxJ5Kk3Ag4xjxTAUCS3X8ipH1ebrw4F1LyFRtQS1SfRuJnn6NIy75ukqycJPXq5JM2/KlpJGuKoFfcXg70NuOYVWlW8S3qGt5jVdWJGyi49IS1w5T1bC2e8d+I9NKEZLCEsbko1WxVds2VHveXp19/umJ+5iQmqfo8qTGVHMKSdcOrYyjV44hNID3B+lILfOBli6RRkvC0JnFQdeTMJNzAv4N5LqtTEB4aSO4kLOkSC37mIWPSCRfIs1X6DHVVs11zIUkvPcFxhhuNmmJk2HU9rEpS8yjDSxLL0xHzSaqRpcM+C4BvDmGzqD2C9k8KpTJOIwBFqnXh05MJv6tqEZdqFl83Tqqrl0PsrgVgF07gHFZRVpuoHkg5dSs4hFyckqqEgq3VI0DM7tyoXBdtG/8OHUhUZ/RePBWpHIrKmaHqRsaS7pBIN16paWz2fB5MR85A0S1p1GEjm0qrxaST/QLS7p2dw+wey7lCwr/AGMGN7EsdKRpjIBCOOIbReYTlSPjUrkk1yO90F47i22GQeGwTs3WlbiJePXgy0XJS1Ti5b2GrpNnSpPRVtEgVuPYBGdvhOweXHpCJOlXiLaOfoE60klVUl4sBJI+gd93iHDFxBv2seMq4mBj1uKMwVUFXVI92wVUrrL/AHeXFoko7FAvkFkCIzcoPCcd7qIKmV1/WWGqZGOzRK7zBdgxRdQSU5T6jl1miqTpukeu0kmdrUg6O/BLmtwKXisUvJODQ1STMrxtcXBiDoolgpIhZYxdPS8fJetoonhJKhpLjwtu8Sv1RVJI/CNwmPMeEczAkqDnlG31l9EuLHQLx8WQs0rLisFXxeYFS9rEDTc9TFPisjM5bxFRulfsF3Mo4HS91urZgrVg6lWEL9GJag0mcg9SNwcQyJddKzbYqqrr2chXBpB0b8REoEvPqh036qfxLhy8nlWPEJXM1CdXN7xEdpXl3Rbbebb5MNVuPfs3D+UeOZfVSM0mSSSrxUTAyELrC9rcN2I1ZeSpJu3jZFsWi72LoEApAglygJ2XH7xXY8oRzkeLOnISIcrceCSqTaZJI0toiBpJKqjffzGVm33sGCliUoeZf1A+GkmC1PC+NUwSaSwkkFh8iVqtp3ctnNjkmslQtYPPqcQ+TaOuDeJR7hJyuaobT7g7jDfd0Yja2EIGaZwMzJabpp3Sq6YpJEIK+Em5WHstv334cMZFzGk4WplgkzWjy/VGvpAdu/6wqR+9ZZ58Wcq8IzXVWJP1xGp38Okk3lVbEm3EBcrbt3JW34eRZsFY3gF4Fm5UCwBImduh8AlfiHWkZKekCfzfDOlDALl1AVS0gv6NLZ8d2KPVdaTDNutDoIqi11bxQt1UhPxb+fFYa0ZGAa1IV5M0q9TFt9HoFm4ALictCdXl5bTKwPgxRaZjUX0gWuiq5ZgVob7Rvw3ixRlnSy03JaCYdKgnuxaWNP0+Q/wY+X1A5uGc3YuMsKcIqTDeaQkpdtHR0cRGzZppkf6vEpBzL+n5ZvMQxpC6SPbqgBD71+z48Q7dB41uAn6qg9OokN3xBhw1eOWbhNykigoSW8BXSFUC8pCew8JD37k45IIzV1DI1NRrd5JRVOUxUkgrxCTmNNJzHPG4D+lIFzBIryu5hs37A6azkjmNUGWmYDWHqWqoZKlUnRg/bCgq5S/1REZ+9di0U+9y9m49ucaCEnPO2vELtIuJXZnHKh1gKVurb4iMg8Y4hamy5Bu8Ke9cThN3R7nLmJVvI+sdUEsNWj6GopA+MCklO0e4ql1VicxS8G+p2nZUBBqorCJJA5cbStK4SO32z3dIDvwtlgvXzWmHTypTcruDSMUkvVYih1WK6qXPzeIcW6laobPadcMGsPISrNklYq5EElwQOy3dqtVQu81g4YqeqgFi/hKSjBUVs1ZAQiVXCR3eHgx0ivt8J+csUNu+jKIdqtJoj7WSA9TS8rMzCxzPCazQjS+qJCkJeb/ew3ayj9hp6TxXTS/REVoF7VmLZmowqFnMOjqCEiEnTg7knKAWqqh49hWfJihpqrDbcAl4sRLQmDUDGKJFQRDarRJ+NJQYvgag6dC7mWqRJB4iFW0wHzErgcyHEwKijN5Q0UzUBUASJirckR8x96C5AezwHg/RMzRMzl66bTOVy8fLMhtJyKRkkQHtEi4jut3hAMBWQgY1qm8YMqeZq6oHaS4pEaV581yWz3Rtw5pNYpDWDAlSZqsgi1h4ymHLRwXUJmlb4PtRLpxVlUkanJZ+7qmOZWH9g5VMlfdsStxefoUsdoHGx6oh4gHELMUA8IVNCHQET5SQSIjH4FfwYcNNpU66qoUEmksQRlXs1d+0gVNK7zb7cfj1tU7dX0IrzjhcumxzqfixGy1PysarauyckNv2hNzHEUQGG4S9HxYvyTw5lRmAln6z5VX08eqqSnmwzx7HsWbVURSX6JmOOhIPMJY4x7HlFKiYfk2+i0vFhwjJuEv7F3oL0ebDLHsFU1W9SlJkoryn42oXsc8TkGD1Zk5D07FkFCEx97BPpvtEV9FkASKzaea8trwe99Hsqjv+K7AXFcw9Fn5Lhx70K+kf7KV4Fh4xfpaatuX1qrLWv6f7QlASgpoyyzmDdH0rpaqQ/wCdD9zBEYyjOUb8ZFyTZ83/AF7ZUFQ+TGBQllfy9+N+JqDqZ/DOhfQsu5j3AcpJKkOGjXm+t9Q5EvaUYmrytmRVaTXhhYtNEDu3LlzYYtsyp0nFy6SSP+JJLUL72KeSWm4uI4/zai+ribY6zg9JvYRHyqJsxER+XHKSpGAHatADrpK0pTFQyzjW/KsI3X3KICn+9hVSNkiK9WSVu5toDiMCn5p8IpLVGuin4U0iH93DxGjmf5BB5Lv1/etwreJkS0l9FMGhPup99HYp9alLP13KZleSZGI4VXy3phdqokg2FMjG4V77rcKo0a09CK3AmiKloWaiWp7xbsNaoi52JRdGwfprxodQtQbGXtCF1nxYGF4zOLTyvJsAGRCqQ1H0CiQEtcSR2Xct2OlFUefDf0Jn6G6ffdPLhuph3GZJMRQU3AqxSkwzCVJUWJLiKumW+y7GvpxPs+UtTLoIyLZk4VZq6AtiXNVdW3YIq3FuLxebGKWzlNBZNZRsKyYHcaZFtIPDjWylUUHN5SqLNaQUQccCaTVsLXX0lTG0bb/kxleJ2CzKcsJRl6Y4/aT6zODFwdKqXpYU3Gx7EOActm7dDjHWs1NcBMuQbDuv34B75VF1KOlhNIUycGXdjs93BoeMJubRjaepdFVKQVS4NUXLcElxvH7LfbeXNuwL57LerafbovHTPXbuAMhJM+UAK3d4MNreQxiRaktqZSUrlvQcpVswxMoR48jTdAkroKggqr5UrrjMuXkAtuNsLZm5KZVRcTSp5ooJuoB0kzdRzmi2cgLMVbdXSK1BUOkjIfDykePniT94u2RZk6XJqkZkkioR6QXc9o4K2WfZrzszQi056jqHfOYlUrUnqm1JXdutv57cQutI09F2pciI/n41Kmc5GhW1ZxrG9ob0un+XtYUmnTrRE7mSMS6VNikl3qu5wCQXGN19xD72M95iURGUC/arZYB6+kLDdSS71fhkme/YIjpJHbuHdjSdRwTahqMb0DWlW0dJTEIhoSMkpCJLuuHBAbA0nFm6wvGXRyXYyfUNDUecpbQwPpeJbpAkclIPNLXP9kldfbZ8+M7a3cMJQ2/nwo5zaopnOOCR9a1PpoSDfcg2ZIEuKoGVpmR6/Nb5ebFwlJaj5KaZwiCzlCLSa3JKC/VVVEDH7K0ySC4LhHnILB5sVRrHZQGTj0VBXjSNTaq7kE4tVVwRidttwFpcu7cfujhtOU/l9KPLKfB9HsVX+q1l5BdVoKrS37L7KwC827DUWMDLbFUZmncrtBs6egRfJKtpFdE71WvDWiAq2DfqpKly7rT5rvFuwOpjMNySKgVBTzO5IrY4iapKkkHWly324rcnGIs98dVTFyz1REm3GERlb/u8227HclF1m4guOawjZKNajqnoOuJuv8txfdwYxTQxkRKhx9VMnVwiBWiPNhZqSK+xINQvCIXYj+Ye9AvLdiRg/WoyLMIZFVd0quAt0Eg1dVW7YApWkBldg0gVAkj/ANkWGruVr94FGVevSbJJkZzcsyaoKvEm4btJK/eJGdo7CHmuO7H0joyJoSjKJdpVG/qOrWkk4431pOocU6X5bAuSG+0eUb/uYCmVtAP5aJiMvq5p4l6pYRaTyTixrl0gTPdcBmzSQFJvcY9BlvHDif7OebUo7WJnDwLZskuRNU1JhUlSSLlEtIREyEy5iHpxzW91zrr/AEJsww0Y6iiibmBmHlNVVJLQLCVcwyn5LhRaQhgd4buZUAs+MPaxkTOSiAeR6OrMQrRZUj7986AV3PzFYO7ZZsLBCqbL3OihHyM1V9VQipNwtSRkKgVJ0SV+23dcQ7ekcCapnDGonF76lnMhUXdKtWiDVVUXQbhO0bd48u4sB0ODmeJI/BtppjQSBzqBOLknEbIv2mo1MAIRM/ixICgbdEXjCoUCIDsEUwVFUfNy2W+/i1rq0fGuETeQqDR1f9gugN1/WWlcrZu6dvvY/PpvRKThNYodmmsfKouwGwvLpBjTu1LvK2SCFge8oWLfzALEt6+X1Ds1SLSS+YyvP4MXJ5PSUuN5TyRrANiSqToytw4lpWgJ7h1m+Xrxi8t1e7uFKzy2CJh4ucsN+IgSL+CaGc8QA7Uk3qu75bzx4XSLc2vkY8yHNUR0wwb6xSpPk79wqXjv9nkwziYqoXVr+NptyqjykKTe74rNmLVKK1O8UskaEREUle6RdoOC39YiR7LscUnD1i9W4ul8plZUQ3iMfDOHIJe8F3z4I7SGkV7TzEn8W4fgJNnmWUfaRgSqrk7QLykNwhi1IvwhGaIP6ehULxO9RBkkI2bdvekN+GLNhmRFuG7l/R76nHSoHak7hjSBUPatE8dPmtXruFnki8FQVUtDT9XHZZ4brsC9NSJxiKui0pRrVqNOLcYUI2J0f6VVJBmApH4Su/dxytVUlc4fvEaXbEkQD39hK7/CSV1/L48V1FJzF6iL0I9BqqVxinEnu+PYGPNZk2aiJ0+bNBNoqaqSiYigImXORiBYJ7chVPYIkRsNMT0WtJJSu5udhNo9gqRf60kg+fHIxFHizEJGs11XRpGYi2YAQCfgK8ub2Lg9vFPRqt/NySkrLzDY3DhW5dUdqq5+YgHfjp8k/VTJFqa6XXqEkf3jwGTFZ+lJWyY5RUwo4o9qKyz948V8IpN7Q94jt+XEPNTMa/RFnBtmzZEP0pblS9ovD5cV901km6nEurVxvvuI/wCdhH1kikSn1BDW8u7BLTAhqVBOqQRYAqJG1WQJa20S27ceTnJugauRzCi5iQppZqglwuhpPjSMw71IUjIUlQLaXl8JYgXjwHBEs6NdPZs0lSG3Fsyfi6OVRcM4/KOoK5q1FwL1r6Y+RBIgRC20dI0lb93OVmLsXBEV5sVrCGovMGqoVjKztd0O+krW5g/aICgaR7byJIBVAF+ULhAeQMXKrsgMuqgp4n9TStS1Cs3Ss2y6q6QgfUQaoh73s4AUNnF2iqxrxShMwoJeIpgz4V60QRQkjZondYkqIbT8F220x8ezBHqOoI+kxas2OcsUUg4EOHXdqjGiLdIxvQ1Qc6qvhAS2YRE2bD21XFIxhJOJaiKGmYFFFvUNQrqJJA14ZR1/FQDbakSvg29eKDU2SyMc3WnpZm2XJVIEm4qGqq9Xsu3lYvZdZt6ubExmH2nKwhSWZvKVp+ZWVdf8ZRAriqKQBzK6SpHt3DuPkxU2+eByTkWzV4+iCNwbq1iwJ4q6SPkuQ4y/dddtu93kIkfZUwE+dU2MoaSmAWaVFTDaPjdJVAF3KpEvutFURICvP2bBxZHNYNoGkmdHxMkrUHoaEkzL1lFgqwQame/QVNW8FdxfaiPTyYkKiZLV5TozcDVrZ4TVDehIQwWKq7SNK0xIEh2jtvL5cQOT+XzyOnk4Vm2GMmDcALWZQSQeNWp7r0uFMSvLx2eQBIefHwomOtWjoRVgn3Z39EmxhIvIqenXUg60gEkkE45dwA7nRCC5Bb03CBBcPjuwYNec9HoRcQVPx9OxrFnxHquLXSJrqjt0rgFIA9rvQ9jENRdUQdPv6lKBrWZk5onRRz30TJqpgkskG/hWobR/zX87EK6zNoCkyRT1hct5h1w6TaUQdCg83b+cVUgsO7mxBs+RDkHp6VIVdXk3T48TLZqJxBGkarNAmrdUis59oIFpF7R4GrXMipzqhrUByv0sTZFcIuYtIEmt/nBXfu8vRi3RMRl1Vsw6cwjmFipZXiDMkmXEqkZFv3KpCFu7wD82E6mpqqqaJFmu/o6TiQsJVtIRZJA1S6dLStA7ubcHx3YIEiNfIxJSjztGOZdmijDQjZKSbuu6acKZWuPGqN1nIPj97FFlJSvK/eODVmFaeb6Rrn6vX0hLfdcImSvf+bzbTxYoh6zSbpxs82j49S43C/BMNiCVm9XSStDYG7dyX4H83nhEK1SnTOXjZKTcXgDWScvEi4lU7RsFJK7b3vKZhbYAmWCCfKEl4GB5RVPrjLKSBJ5MVLVpSEglpIMhdyLp46JIrrFbNAeH39QkNuNQm0p+sskIR6fpFo5YIHqOy4qQ3Bdelrq3Kq+z48UGFXSeIPo7M2YqCo1nciMiqy17WDNK/v8A+LmVhbdgCW3whgjP8/WjODlIqMVBNFkgQxzkyDhWqWkXNaInaA3D1XYEF0TKREvj8zEREUMBaue7kmqK4x7QDcGgKG1WznNXdeHVhjOVlQz1FFm/m4rhVWpnbxBl3RGN4pWFzcvn58VlnXMrV9SM2fBoPnSpHpING7pXSO27VHSQG8SC4vx4eVJJSr90jxVYUvS5KtzEOJjgScXgAlyuCGzw4IF3TBRiomi4yg8sKzj6jy8p+IlZZ3w7UNSpXSDx0KpDfckqPDuB28pHz+cMESvaI7PlCG4zBf0PGzOqq0QkWyjIEmqR7REh6A5rjEbtW3ddgK12HaAFZZgrBTUvS7gQJU0EktVykf6VLbaF22wt1vN1YWWylf1bS8HUk3T00rLyD9Vgwj/pGle2j0hHVVsVQJVwQGRkel4TvtwI50mQkLiJbhPUoXMuq6DzZlk4GgaQpqlY9JrYrLSgJM1bBcEQWglsSG4ugCVt27hw8obJRsjMN3spUHr2JFC8XdLvQVcav8g4EVVfPYOBhXlKPKGqEoKRfsSIxNcEBdCqugJHsBezkMgtLlHBy7Pme9QxIRVHVBMUwxpyMWVcqykotdIpdVqHe3FzWCIhyX4hVZvR0CnwjBidMjcvRvoCPZTVW0lBlcLhXiX1PpNHXdK3JCqkkPMKQcw3XXDy4ZV0NWw0Mj+b6mI1y3t2thDg0r+a7lIz5uUMcyfaTyjKRThzqRnIN32xVyMdwlp6t3emI7B3Du8mJ7jWdexripaLfOZtikqYiWgSTUree0lRSC393A7ZC1qdSjFt8N2lDl5WWZyqkGzcZaLvFjQBV4kmTBtwu79ENxGfi50sOm71Fm8fPHT+QZvjQC9sU2TY9ltiWgkrYGzw3HuDEg6lPpGj9G60Z+pVDVVEWkRMrqmdiW8dVJIQATO3b97A1b0HlLLCnGlGyq5C6Nwk5YzZLgqe0TVIT6um6zBIuA6UIr4TZRUStmNnNUD54cujqt0lz0kHrUhSXC60Lby5bMVeYqPNdVqLZu8FmikQaUfFgRGau39UPm+TFwriOpinGpPBioy00jHiXaquqPsjoEHh68DGcrSkhjU2FM0Sk2eBsXkFVxVBU7+cRt2fHhg/kC3EVKjYqTKUVN5H5kQmVddet6gphd44u4XiRP6wxM7hMkh6y3W4Nrd76Zlq/q2LrCQdxYOgawSDuW4FU1VSuVIr0Er9p3aQXW6vNbjKDKWc+mQavLB1klQNC1Adyt2wcbep6mVqzpqGzHzJcS8dwqBsRaKSbVRVARLaJkaG3YREYkYn5cInQGXSj7mOUOZzIOJupJ7PNyqaShZyQSdGeunHM+ISMeS4gHvS5dvThRxWGakWKjxWNVJqCqqpl6tSsI7Okejq5zL8GL5V0llu8g1gQ0HxNyMRlnbMxaiqAfoiaiSXPaXPZsxTVq6CIeKNlX8mq1Vagauu3QEN36pW5LuvkLkwQQzHSKAFzvEh/U0zmi9eLOVYFBJNXvdNBklaQfyQbOm7ZikwNPfSF04cyk9HwzVuqAvV3qoJElzEdqHOryltEcHB86YEN7WsK6bC73uk/WOqkQGBbRsErOrAxk6acyj5w5dIzQo2KroO3bW5VUA6i2jt2lu/exeVM4AyijKWuaEoiS0RR7p5TmXcS/nKtp+XgW7XQiZJWO0gIAIgAS4gkjuHl5OQQ58Jw+aXpqOU+j1KP2MreqHBKMm4joXXbtJW0wEPeuxl6i6aWrSqmdPC80k1TtVclaWglzGe8gC33xxq2l8pY2hYVxSstmdJyHrpvczaJmkhs/Wod6qHl2YWn2WsVZUtNNDEi1K4SjCoY5m6RmaqkFd9+uhE/YHfduFIR27cB+ukuMku4lalqF8kQGh6ptVbkAEXMOqIfIWGs5k85pyJWCEzactlAQ7pAfqZq8uzYN5ly+LEHG05QdPx7c55+uzeNwBVVB7qiqZl+lSvILBMLsWRcDWhGsuO5SDhKeSj27lwwlY9NUlV0hJqIr6p3Xlr+3034iZSennWmbpZLUdnzOSSElT3c387E0tQLZ+xcVI9pgrVbNUkDdLpAkSRLhqkkRGF4GFl+zFVptr6hWfSrOYXZrMmrt01fxcsTkkNINl7W0jAdw3kR2YYMP5Q7VQ6wLpRknhKuacdOG0swl/pA0sH+DXqXcXjcFyVpX8w9dmKFmBF+iIqBZglGto9O29LhFyVAgvLdv8Asi28uHdWZgPKgkFHc65jKnUVD+OqMNBcNxFzbd27zYqLx0i7eLOUGaTNNUvsUrit+PAr7ubqWioaIqXmUDKRegmTziSIjPddiLTVMd6SyiRAd42lbv8AFd0YlJ50skoIKmromPKOFKPoup8wZYafo6BkJl8r+haIahCF/MRcoj5i2YNp5YtyJKLmIA4UUX8uc6KeTpxM8xasSXlI9+HBpfRBB860hG7VJ1qpX8x7VbujGvOAymzNp+FctUnLyLNreRMZFBIUiVDmXSuFW/lG0BLAiaZeRbSBpL86GXaE2MFDa5NEyFBJIw+1FVe8gPaN+7bz2eb89eylDRsi3yw7PNZoMXppGSf0lujlB5tg7gP2cAdDTxyBLiE0YJSn6Ni2LoEK+Qcqt0tBLhEPrulZaCRqgW8LPKJkPVitQIg1jHCKVVR5er0h10XL80l1QVMr7kAEfCluExt34HLVeYr6QGNXy7lU05ixBVtINeJSvS3AIkCogA+XEpCodnahimI6QjYhms12P2RSyTklTDwoXKncPhvH3cQaLVtX0hgCUUnKbm1nSy6yqApf4c2nkl29nQFpqkfJ4w9/AXzgzVgXUGVHis2miMAJdckhtI7+ZJe4jAg8No4s0vUeSrF39Msv8nWwINB72QfloJRyp3Clq9xw9pXde/2sDPNxeFq8mr+lZSkS3mRsY0B1QOzmEtBIzH4ujDemw/UqnB76plDUpK1vUCNPQyaHodOC23GI3eUR/Sl5R343h2WqKpygY5CIzHyyVjKrSdGuxlHMWSpq37vtQIj90hHGIaWquMpKDUaTeXDGUUekKrV2u6dIWmJbSIQOwrfdxv3KPtBxucOW7ViMg+p2aZGDN+m2YLqsyPdaIq2l0Bdzju6sCuuOSLGOkfpf1+tfKjbAE4zIrKmGDpqtUzN5JKEdn6Wy8zGwbTLeJ+xZZieGi6JkUWsIwcsYFS3VYer5Y0El+a0SFIh2j4SGwrsVmtJ6gIdNSSkXgyQtxVaru3Igukke0TI7ivCwd27lxWaDgZ5+m6noFyzjUXC4OGrZICSbvgDnPXASSO7l2e/gNh0Zahkrib06SiiPM0vnMzqNn9HXMQ7cJLmkbnYNjfrG0ldxc2234MDitqahGtVa1b+qifb1TQdrqpETfVuDckqVlm7aAYINRZpZ/vH68bBUILaOBt6UlHbJYXw2bhFXV7q0tvKN+M1KD6mqIkZRy5ik4xUHT9BR+kL9U1R/Sk4tv6ucCwTUiwHqpKilzeaKtStS0Ik6kH8FJA2aQ6QCb5dd05IW/Lb3o6Rhf+y93GQ8zKof1LWDxy3kmxN297VByxS0tVK7qsEbx9rGpquavKykGbCl6wSjxNubpJyNyQKmf6IuFXEFSsHmEMZSqWlji6imI11MRusycHuJ19v5h5vmwbSl0N5ikWooKOajCFDuEZYpInzcQGLFBJLQG/n1S5/vYN3ZgoCu5VeUnYuj6Rm6fdoKtXnoqFK5K5K3YKqV6rct13mtwCm6AEsiC+romYbk9x83SPixpnJzIQ0Ksi6vjazXgWL3hxp9/PwKqCr5x1JCIKkFw2cxFu8OIVDuhSxiG5aUmvUU3lw1Vp1qLZqvYrLQMegUMggraN6uwAVIR8xXFgfvpt9CNVpWlUHcbxqXCkSb9VC4d3JpdIeJU/BjjNv05zw9WJU+8kifO1rEl3LNVwkS4dNoGRBuG8NtvN1Yp1PvZ7143+m1cShcIKqRpyEc1eJR3NuQ3fLheLnMpNtaEZ8tGFOSMM5ZztIaEo6cG8avXbk0DXtSt3LncavVy+EcVyrJTK9KnRBmCCChpGCTJ2KHcODLYIq3F5S5T9w8FCTe1LSeXDiuIquZ+ei1mAqIEOkIquC2haVpcON23q3YynJU+jVBIsKvYPEHVSq/ZvUHTkVzM+cVbUgNUvxBgsxE4jFVMn0kRqLqiUr8Y1mzo1+TxGTem3byT5ACGJMz3k1VSHZcHOe3kwDMyHFcpVWsjmCAlLJJA319JIdUB5CuARE/b5sWuqIGs4lxIMKDbKxsCirwp+r34JE5s23L2EJ3XXc2BbIMvSk8JF53ri+1W1UVbfeDBoQjFfCI0oi9Wu2bcKC427sNU0AQGwbvew4ELk9h7sV6V5GPJ+eipusEX83mKlQ8w0ZpRzByyg2uk6DSID1byBK6wQ3EN5GflxrZ5LRT+iZ2mEqpq6eYMGDVJim9esJfVd3luSdN1VVUlS0v0qtgiY8uPndGLuY583eJAkuTdUFRTXSFVIrCutIT2mPlLGrKBzNis7KFeZbzFMtIyoIL+G4ZlANUmzCVVSEdXXa/ZGqIDdbyF94GtbmGlfOcSJLVRQrl+3YmvTE9FM6cIxJi9YDwoAruP603K+7dddZhvUSFJUlxDCn68GMfTCCqrf1WqkQRxmVqoqr90qfLy7vHhjU0o/nmLVzT8alGVQ1ZJAgrMxySWqqf/NVf0RWkFgmdngxEwq9QkjJMIug4r6RNGoOKjY1Equgq5PVFLVSV1UgtPbt+YsD0jRd5FOkgrOfSFrJOGczNqvlDX1zXF6S4Ln+tuu39WNadnanKOh8tY/NxWgHac4k8NgzesEDkCNwlaQutIyEEh5w5hxk+Poqp6lzA+hsTDptpqQfm3QjRdbAPdtFUyK72r8alyjmPRlRkhKUx9P2cZUT2RNwkjGvFVRVARt0iVtIG5Ee24fewZVxjuQuJTUxVbxvXddj6EKEfNvXCqXFNJJ08XdbD3K6QF0AIFpavlxItaBo5BXg6fj1o2XSPYyQiTFJ8XhKx5v8A87744H9LUbWUnOuKmqCsqzhfQ0I13T93La4JbrCAlSEgMi5bCMcN3y4MJIpI3MUgjq7Ukmqq+gYeJLVELr7dolYXgHkwlJjVESRktGlXaqEKwnqxg6HCiippQ/r7eUJkLYUHCXXYkuQJcw/0G/F2CbWpeo0TkwXqKURJVkqpGqioTkLNiq64F3pWaWxUL+fceArMT2YNUKU3POqvbRijgwatU0KcXZgxsPYaR6ul1Xc482/E7VElnNKUy1bBPKyBO0jYOIuGgeDNLm3rlq37w8lhe7go2iHTJR38qt85VEJDRMgC6MQg64ozblxRoEJge9JWxcQMg8PINvLZgN9pZhDy0DB1Icw2YrN2YJNWzlvc4fARXHaukqqkY33F082JCHSzCoiSFGUgYGPWBqDW6SFuKqSR7touF+bcXhPkxQc7o2sKaZ6NR2pNXDj+DSFJddvIhu79JdUiBLZb3QbN+DKFgR5lW4SGcLIrQ0gnJN3LlBZuJ6S7Z0SCqR27FRIN4FjX3Z3yiylq0o+earU4rLN2aPHxqiRzUcKSqQleqLgR4de+4bBMrTxilNx0F0Y0N2Uc0Juhns9FUTSyEhUswkloL8aKSpJBdegkgQkCqvUI8+w+fBFSJQ0oc9YaFqfM+ondAunyUpXElJQUqrxDpJsqguq1SItySSR6uwvaHrwLk4n6OKSFR0pWdUPE9JIUmjmLSV0klVRICucCIGF/SCo2+bC0/mF2hc20PVqUeLNRAL0l0IwXIJeclW69wezYXNy4o89VlTUdDSVP5mRswNnDm/fesS0HxHvGxBwKR3DdbpEZW3YTNMatBSRLUgCBqDdGjMqLetq5XaVAq6VSV45V0hxiQFsAFW7okjHaPN0AFmA/mku2cEzWVrwpWQZXsBaC3VLQbjuA9dXn3laHMfmwfJycjSKHm5uVk6ei5BlpKyj5A0nG+7SVEUu92XDuA/kxluqGbOLlCbITaEu8MzVdSTZUyByZ+2Ind4+bmxoLePMSpqXeRQqiWqmQHdaeKxJRwU+snJNX6gkB9RbiDFpIjIbBPFfnFWyTputYqq4bhtEtwfDh5Snqgl7vfU61Ji5Tbu1bVCVG4SINIvkxOvCWkUUXLNs8NNugCRkSREAmHm8Pw4rFOzcVJKED+7iVR3CPl8N/3duDBl+lnGzo15WWXlVTLGPZPeHFFqu8TSVVsG7kHhx2l124XVIEB607YfEh0oZdN5mJD4sda6PJelhvLDVKsg49aQhk8P6wuK4Hq7915D5sct3SPBkiLwbT5kExV3fLj7kEqetDJWIWExAt0Z1u8SSFXaCjR+kRj5CECvD4MV2YmUX7oUnjNRRTkVUJIy1z8277uGo+kUO+4M0FEvD0+yWLQzYTFXxrySVcs128UkBLk5dJCW8rQAb96pbei7z48I5OMiV4uZquVO1K8SYrMW2XUU0RkGqX2DAXI8uwhvQXsLcXTfigVbSUlo+tZEHwxqSoAq7Taqr6XkLl+ErcJrM2bB4mC7N4kIAF6BON1/iHbsH4vaxNxf0SQ1libS7Z4l9gu2nmqVvumhefumOItFlOzFWODmtRXX5oI10j61oSs4yeYk1AlXMpT67NBqqf+DqmYkCSvmI7PPigTVM1Y1TTWf0s0SRbgZi5TbiKSoc113IeDflTI5aJR8lD1RMSqa00kqZuVHr9jwqo8h3JEqDjxWklgbVclIxE9IMGVQx84P6KSX4wSMOjnVvu9sPZwyYfk5CSz1TTCAqPy2i4desG7OtKqfUUxVSV1ZZs3PuDs2CWkJbSLDSrnLZGpHzCLrltMsdW4XYt7kl/jSEz+DCcXX2ZdPvL4SYaRV/dbuQg6guVu24n6omc1KsjU3k63yycotG4EJJOIRBWwN20AVEzIvDbfgnACxcljH8/w+9CaYqARlIdV83eSLCNXWSMNXQ+rIKh/JJCNvtDgwULn+zpen5CNhm1QxqhgZtxj6oXFBA+sxQtEDL38AqHj5qo5JrGpBSMeRlpajt6g2S9olTVt+bGk4PLfs2N8tZ4Z2SVXqRuhewfKEuTVVW39ELUSDS9oywPVUrZb9SJo3S/RLoqXqfNyk0ahf15Bi4ATX4Zy1XVVsAftTV3mHVtLFJcU5VVNJvH0sFPyEekBri5ZIIJaSu3qNITs8qXu4q1F5k5kZfxLhhTShJxsgqSpNNfVQvK0biQMrLto2EYX+HEVGpT0yprLyrFso3EEg9YLncIeXy4XjTE0RahinguyHUkJR1UaqKjko2NIgVvNdC5I9/lu/BiKRVmFfQSwM0Ei6rS5sS0hJP1WaYGigq4bnw4kkhygHLaQdOIdSRfiQq8AWoHUIEJfFhg2PTyoF+IFuVupN5mLDOheMoqV4FUTSdCLDXbrpH0kkY2Kjt5Tw6WoObqCQI6PW4ZiVmqMoIttAz6bbiO3FQ9FRySCyLlKLJ2oC6SoqaQkqSvSBCqJX7uncBYMNcSmcHqknk3MR05FskAdAmIMC4ULeUkLb29vLbYOIug6BaRFTYcE9KD9QQ1Z05KOIeoGaqDxoViqRCF44h3CTkky10TSEPEGHS1TLEpeNu/luxytLvHCYhtSFUtxEGCBlzCoORV/wAoHFWwCbjQYCUa679IlQuAz5do4KsfVEwq+aovI1BMXCoARWWgIdfOQh8eK5RlVtqYpxnCsGxOUW+8lAf2gRkV3KI2gPlxY29fG6UG5hp3nvV17hHzct+MncRzqgjyVoaOLTAhmIvOF43LJRSYpWSqCpVga8UT6mQSHhUrbySVDXLV8+Iee7QOWNfQ0awYMRFxFCThch4oUFQPqJqA2JW7byEsUUqjN5KJxrBglIPlVQ0CbKqkqR3bLR0r8EYcw6h4OQpWucimdRyzhLQNy9fggrZaJCCpJDeZbbrSV6cSo8oP0MflIGuaI9cpJGJzEiibvKeOj6elYtVVJVVi2qN0QiqF3ejzGBWdXkxF+vIeJqxx6pbKsW5pGYMSl3QpCd28klQQSv2W7TuDZiht66gY6Na088hJBiUeqrco0ebUtUhv0hC2wbB8ZXYTeQ0O/nJA6Kh/pCzcAYJJvnoLuhPxEKSt+zzXeDdh2IglpDBc1JKRTeWTcxKzFyjFKq8LqOBJIb9wEI3Wc936IfYvxDkDkxTeA2j3KJ7FV0GBq6Sp+MjEebwgeJK6SZsXCz9tICzSbmkQtvtUgPbuEyVDS6en2g2hiDnikoMWsUvDtmKmg3cXWAqqqBhcBXc4Xh0348Q95Sa3aUtPDJQzxaNfM2dyR2Fp7TE/ZAtmI9GZeNXCblA0FCbmCoCugCo+8JiQYsFFlPVVNIwLNy2Fw4EzHXIt3sjdeZeQN+C9AlMUpErBDVDOSpGJ8bHxArpKoHbvuZuEOYPEKon7OF+oC0imRODHUSEdXQxt1GdVKzcKq8mL3irZCL4NJqfWFqQ2W2eHZiFUjuMRTeP7XjPSSSG1xrgAAWwFSPf07B5MGqos+4SBh4d5lszEZ4BNKXfTcGzFUgDkMbyIzVD278Umos3DdVtPfm7ctmY1AAN3UhoN0kl/2toWpJXmI9Beffg5gijqFLXNe1Q76NCGRbxqXAyCjdI+4aLt1dK/dekW4wIbhv2Dv5DxAunSz1mm5kniqrXirLXa4qkPLeZEBX2jzfZWFiyT1QrOKVbyrCejEqohbBkUHKVqUme6xUEvsgIAERMbB3+1inkyh39Nt6wXcpPHiTix1FtlRQfiFnTzdfIQgV1h8mCh1oWUFIQdQRUNJJrMGBM0brDXJW4Uva7r7wEHkPELXEt63niWV4bugsuQZt0BL/RCN4+5h8og5eSXrKlEfUYuAvSZKGbMh8Y3KlZ79+K7IJOYl4o2kWffc3Nd8wFj4WjSiWF1GvWzN0LleNSkBts01TIbfNcGLczrr1y6U+kD9zqSCt6pCCSVypW8yoWnbZ0jsxR9dsWxJtpf508FSn56BgXSbal6kYwKchGpK8cQCq9au+U0heAN6W8RK0A5D5sRHcpv7FzKNZ6kmqjmGnmYpm4D+C3fFK7N1hq3pElu8A3Yj6uqWhpFi1BnGxjx47K5chYIM+FsEr0thb+kgIcQMXTRmKgJer20kbg7Pqaq+qZXWGkOrpdVwEY4h2qTb1gP0glXj4QLvUnLBAVVdlvMkqR7fN+LBmkRS8dZQUtGoMHsgX0cBiqmYhd6wIBNI/5IxsOzlAunyYWeU0/hJJxNq1bGLyAKpaXCKkThcz8wDss93mw1Thjm431bTmlrN+9eOVDJncl0DaZWdPN8oYjXEsi/UWYSJik+b3gEkJiSCoB0q2DefkVx4SmrIwTF8zldMpIoRdBrd3q5DdefnV68N3Ey5IrEjJsjsHQSItLYIjdaZc2JZjUFTshUNg5Qci3A9dNBfXEQ8yR/iDFfk5J+/bpotX3DCluHbqgPjs8GIooS0KDmhbL6huHmkVvKICN2K1B8YhPJqxzZRdYLztFW27H7NpPkFi4pygoR+E9+JGno5w5RF4LBNzZ+mQfEgrg0eyb1IUe1ciKvabo10xMmxJrHzJ81uCJQeV/rRu3nqwB42h3oGaHDWkquYFbaW7YN/v4HKKRuERRPVVI9tpFcf8/BEpXMGuaFfI03VtSVDHwrSw1YtdfS2eJJJUSSt6uTCFsZmnT5FHSrFJOoFg1Ys4bJxBVNqqerxLhJdwqHR34JJfMBe3in+t62lKgTZskZCmmrgOHHuhIB9okhA8E5xmhlvUbh4/a1arrKtQESXi25GQc1+9VI/lxQaopKYJRR+lULlVue8xEiJuXugKoB7OGY6NyRkU1aqdoiYShVNCBlajHVB7xKU8VyqQc4aFond79+LhB/m6SeIs2qLNKYVDhybVEyPiNnRsQIDVPoKz38A9rBtjUJy9eNlBV/iqqDNUrg5TEi6ywTmtZUHEQq0VCVPUMe3AfqeuYCK5h0FpCNg/FyBfgEhLPRgmORFI5iRdPVvIEs6qFCDdNyALk5Jwr5bNIx7qzm2gPv4CtYUvG0zLOI1CeVkFG6ulqoAJAqflLVv96wcWbMSWp6qG4v0p6IkJQBsVdyDxJir1X2jdYftXlgWovGHECHEtiEDC7TMS+DBWUakw57SM1L5g5irw6dJV489b0qA7o2SaoLmXgtI0r/AJxxS31OSriQWcszZpt7j0BF0qNodF22z5MXJFcHrFiEWw4ZNulYfPqr+cryL5Mc6Swl34Wl5saejphaFZ6pqSdJUv1dULcf4mS4/snQF98RwnpTxD/EFEC8RJXfcLF2JACK/bj2kFu/DDLS8iQ3eM8xSIuDkoYR6RUZq4GNVUVXbp0pJSwsly61E7Bu+UcaQJLbhuQ2+HF46FXFY8dNVm6hJKAIkHNaWEdJTwY1q+jWDwS4yEYuf5VqkX4cUOrqcomNbk8+gjxVTq4TVQ+a0gxblCShFAMgMOYMfmLFPFTBqCEJFSUepd3ou3Qq/hHECSXo/uiX5cQcpiFRkk8ex+ltx+YGUl7Hsex7Hl5dbPDj85eX04/Mex5eRCpuqIVi/UeSTdyupzBoJJCPvYsnpzFYuXGi2bXD4RHDhjCRSEgssTNBdEhtEXZBeHu9eLCxpKL9CImkjHoj1EQCOMdV1NGeMjFapht8NIkotnJPH438GSA+bCiIvFVh3jd0249JP4eI9KjZUxtAdunuH5MOcr6UWzQrdrSDCViIhw9EtBWUMrCO3x7vw4BwDpbJ2MRRPNFTNOuwayjUPU6Uut0si1SE/wDREJ/NgdV9JOXj9NsBr8Lql3JbRHy2/vY0tTGRlNsKLm5KfrKlpCYZJKqkg0mUh4ZuIKjeFioqmuPNYQYyXLPHi/pbu3TldfeYCSn9P6XYutINuPk43yqqudIWopBxo3bESw3U9jdjxX3dWE8PxFJF21D0LLiHpt3kI7sawnacrFnS7JanVmiqYN/riiEokvckkN2kkkHVjKLNq4duRbNUSUWM9oj1Fg2ernlK07HU44YqOyVVE3RIqintEuX2cJr03g6TWr5Kc2soi4n7tJGGcMXLYGJRcglqqleS5gr1EWkV/OPVaGIUc0PVpOjQRY6O9L7C1UvLvIsSVUSh8OoYs0EGbQwtIhCzf07OfAfku6LRSeXCZkrwwiQilu8+Lbe3NoTJCVZdoSdVA/eSj4ZJdgLZNwFyQj4P6XY0p2YqEzqeU0tVtJZlIU5TVxquGzR7rvF9K4SHgwFU7fc82MsjZqbLvext3s6VO7yNyqE38lDvCqJwbpJsAxy+ntttJcRVO7mvDp6bcV3gybpccrcpW8Zuoo+mrfWlDJrT1HLyqwIJC3lpuOSjAV/WqqrmKWqPLYVqXR7eAPmRmXCFGuqPpxsvJt1VeIPXqFqzaoH4khSLvR98vPceI+vs35iZQYxUtCOWceF+goxdCIklcQ7kv3h5MUP6Got5hZG8kmYJAQlqpEJBfduJvafulhZRUzFKM3EY+6R6RS0Gu2kVmfDnCi8buuIElX6REavLzAkOLtUFK1JN3IzM9SqSLsUrEL0iV7q7frq7+rzYoNSNYFmtxMTDvI9YEtW1yZFqn5O6LxdZjhrxnFuk5uUWl2zxoltJo4VFW/27dmHOaxGSWdqrNFxv0XdOGzWsO+egCBNkF9DXA9oWqgNnvYqdawkkqopwcU5XcHY1SQbOjXt90Lry9r4ceUlERkkWy8xV7mNSSBVJDckrZ1lzco+7hNSt4SORWBJaTVUO8Utd1qkl4PY97fiYFJfVRXkTKxC2jJRq7YvCqlbjzdXcPi6cJyU9JS7jiZR4u8IA2XHyhiboZkwqCSKFskhmnQAEJwxpCHG6o265KnYCVt27FhBzL41vW4uxjlzWcBRhVzF0TXhLPSNURSkmbFKW27hO+1xpeA7y33243dFv5J1SbN3IxSsY+NgBrtBIl1UDt5b9pnb4sY+oLOapKQyyZ0HVVB1ZMv0hS4yQGZNAidGewknQCO263deXhxZh7bKKTpiEJlxU69jUG5Irv0rB/a3Hdf7RFjltxzKuoIvz9ac5DpjtTvOKi6hl45as5aLY0/FwiXDpOZJ4aTx8G4rCvuJW7aIBfjI1WV1QyqMkB0M8cuHCoEJKTKpNx281odXtH7o4MGemeErmo1RbKtpdBRvql6mt+qpGBfpSH7Ut3lEbOrGcpanEXrpU3j4uIAb3SDJhqikr7QXW9XMWDbM02OpxTfzwFVR4uE8oS17ZsnefMqZH972cPIlVGGdN1o2YJIvEQc3j5N+JBal2zBmPH1DoCAXafBXEQH4rPxYbtYuBJThmtZpIKHv1VWR/DjUjUtGOlL8swV+j3XFJ6ysq5SvG+4ht/Dicj3UU8uCSqqoUhD7IWzXXG/3yHFNiYOei2o8A/infEfpE7BP4T3/Bh88+kjDe9lWNvNtVHS+7irPaVmWa5qir6GSRdMFUallVFRMUkF3BIaDjb3qtitiuzk2D72KnNVlFFptommHiCIDYIu3QqmfwCNmJB46YOlicvH8Uq4Atqqqol8t1/wB3FHfNY104veTaAjy2tmZDaGPoiOOpWKeTqUEGogkiuk8M79PiiSSv8ReD3sOHy9avEUzBykSJ/aiJ90PvGWKrwECkSZpL64gIFcogKV3+t/DiYZnK6Khs2HDNz5VxtStD2toY8Q9GxfJp0i1AhRbcGxQUPl4QgIj+BUsWpnEyqSIm9h+GT5LiSuuxBwboGr69ws5XIwA9QpQr7Pc3h8eL5Bv4oU1A9cSC+rv4ZJdVc/Z3l+PEDnyqAxXLVlNumovGRvkG4j9omgkNtn+dE/kw4jX6yrXRXeMyLfequBkRH8WJxNJg4R+tIiN/6Rc93seT48eTpeHcIuDKVQTFvzjxQfdPfiovaVii1mrN+3ICkmIif6QUiHCP0abOhIAnoq23qVtMcKaVGEjojMLlfyDYFnxYjyYUZxV5OdVMPFqjv9wfx4vFhUkSRkKSMG5Is5Jm5eHyCkVwD7RcmFKHzTc5ZLOmaVPPlSB0k6F+g6VLVMOQFRDSvHcXKY45cJQjd0iDVyxSEjuC5AdntWXfPvxVaiqqql0HTRhTFqbVUw9YR7O4fZu3B+P2cfHKZp3SSsafdAtK+idE5zN1aTjXVCwqs4ckGqk1BUGgIJB9ragA6v2tw3ECplhhUbutXMgxN3l2u2WVS+zcy/f7biBUEEt1t225UR5cYgy1y+7StPx7eqqViqhjIt66SFxa4cJmv4FVUG5cUaVpFuAcajy7zdzxhKnZStfTdS1xxAGzboNqaeRUWwV273SptUtXqHkL2sJnaQWuaUUSOjUAohOizLSYJnJTaqqYB/xSL9uSFnspNSPZ7eIWsAmJKPbvJGKhiUSALV2L/Vb7z5CvEt3v9eKatm1mE/WkLofV4h+4VJNNURQSSutuFdxaBjZ0pXYEbzOeSpyQfNlYFds64o+FbR6CSvC2XDcX2vNuLnLl9nEWgmWlWxgiRWlPgyfC5Scjc6vF7qyLcmTHfddpW2BiLpGZZ0DWDWp0p5mk4VdJMHgzIOlXt/lO0ASHvd/iS3+HAjqqZc1LGujhJucX9Yfayk7HWpKq7htSsSIzGzxCIY7ylrzLLLyFKNkgjCqgl1SXeuW7x2AgVpJJJKt1wBIdt24C3lvtwW5RnlSFfRLlWycsaLgV5iWq2eeLz0jMLg4au0YtJVATvu0khSSFUi8xgNoYnqmr5aedSVPMHi8ei3XuJy56VUtpJCKQ7BIvFdymO3ATpQa5rxZSuZGpFXaMeqAKuYmXBtqt+hBVXjgb7+U7d/s9SdUTc81/gGUioqPTVFJdJRo6SFWwwLbqmqW7eO47jwrzSAV8yO13IhPKakhdNTe0xByCP2Tp2UckqAnYO649LdZcV24CPArq5g2lHBetKbhXm4GqCUaTUlRstvIeHE/L8HTbint80jpBrEkqwiIwUhFJfXjlXx3pFdeNlyRXhb9qlfiluq0h5eWW4+quBat3oKl6wSXbKoB4khSH71u/BzYT5VGJiiJJU5lQ/hXmqwdMXlqRF9d1djcx7ohPuu9t5lTIB5+nDWgUcuqcnHV0lTUg8S1XjBeQmYsUGezYkS5qq6pDdvsbiF99mKDUVZTCThZmygVZVq+EDZcSkvrqmZjYNoF3pe7fiBy/hkV64Tq3MEIyDp+PeXSSUoR2KqgO9AUBElTLy2lbi3FjQpiS2DF0vA1gktOsKhqmvHEnYkSUTCB6rFwF19zp0Ih8Jjgb1/kgdGIqs/RJR8k7bCkTNom8QUBILOckBXC0htHersLBNia5phvTac6rx0fTb1rpMFOHatu6O6+0HFwBs5OXYXVivxqVGN275y1rNKTUO+5PSBARSMeggSSDePVu5bsLBL2V9GfMSH6NGwjzWRVzFQYvnp6pIIC1Qust3EID7Q+Ddy9eJAsvEWYuGEDWbwW7j6xp8KkqYuDLfaqdu2+6wRAsXpvGouIl0DWoYx8i3VMRFsaSSpGG0LVXCogaQcv4MB+rJTN2EJZ/T82zcqJd0qk54ci8iQjpCCtgdQXB8mDmMraSrIiParBTaX0XdKTeb1Us6hh2qVjcSVJshq3iIEqO5LZartEbxMunqiInNKgZFnKP20qxbPuFbtyujnmkCW4TSF0BiraqqV5iN2wvbwFWdROXSM1UmZTwG2q4acLczIXBb1bxZgFqQJdR8vKkPVul5ii4dCk2tSIeso+SegFkaTJdVICt5SVV3jfzeHw3Ysfo2pSxV9NE9JLmTqtGbeLIvGcY+I1Q4Ah1WMcz6dUWob7vMZ+7ib/N9HsnHGT2YMCkzdmkYqRek5AzMd1iQKjcIFtPltwK+MNJT0IvEVUHHKQ+E8OR9N3J14GfEy04rS0wiI9mtYU9T+V9O0smshSszLjICkDpyQNXOvpDaRJCYmYXFeVo+H2cOkc5GFOVI6iqaYL+r26F1xRzriCt6B5QSHdzWYpWS09DvWYwTOjGfq9rZxTkpsGK66thGZENwmfLsK+wNviwV2MpAMqMlKpa5OuVYdJ1waoq3uVR3hu+1K8bd1/tc+FeHZHE0sqTIi1If1R2h20sj6nKmy/hJgqAJKXjpKlcIXDuPbbykNheLFZh6tCo03SLWHXeOGTcGuvHoKkYmHi5gAfYMcFKqq+iomDcP8qsumLmU0gESJhvEzusIRVITO20togOM+03M1zJOlp55Xk4TpIzF02QtZpIdP2QW/D97GntpT1ikVdo3KekIF/ItVAfxqAp6Vg67c0DE+W4dW4LdvRb7QYg6sjct4ZaPbC5XXdGN70YhUtIfL9Yu3Ylpio6tm2Nj+emlWp7RXcuCSO8PKZfgxQU2rlk6RlYZzxL5urr6BIapBZuuLmAxxC4NFOSYWh+emSm6QohWblm7qXZyrSlSMzXkNLSIW4XDtIhITL2BL2cHOezdnmVO+p2FDasK0EAeu5Bk4+uN+VvcJlZdt5vlEMBvKupMwZCt42HgswZWGdPfq6DlM1VAHqs0g6bvcxpmFa501HVLuDrNtA1a9b3F6H6ccqLVmY8ly6ViXTdYYF4bhwhqHBEtaPuAkWOolUKfrqj2rNi8awlOJaRqpLk2QdNl1QtKzujSLVL2D58Q7qpXNePFkXtMS6aaRBqtifumbdLSLkBJVDYNm37UfFhxVmYzajZIloQ33EHqt3SYggu3QcAW8Ru+1vtLn2D0FiamszW09GwdQ8MTHVMwVd6TBJdI+U9W/pPm2hZ4T22YKYcnqEUpJsdslR6mlGzCQEIOKmI36uF5O1wIdm7lAbz2efdgU1FVUq6buI298m3ekCrjXuHXs3B7vKXt4NiNZQjWSTOUfqvivvJyuyavEkAErrjvIdvsYGbqRRzLGQ4NGjqcTjEifk5fKk2cPtxbB5ryPwBglx90xiirew0LuaSrNK1fUNJPheQL9VDvUlVUBIhSdaRXAKohzj5caYpir/z9U28bM8r12j6CLjzXi0gVQ2d7oJEqCpJGZjsSAN3JdgQ5GrZR+l6fozWp9Nw2M7W7pZ08FLVIdqRA1ErPFdjQq8tVsG0nKNhKEbRdOx6oMOBh1RHVtG419crHDjp33Dd4cAGirmY9MI6lXprK+Br8k3LqVk4NEDuV9aJEKrU7R7oeWz3/hxCrZb0BRCbg39VLvCad6gk2dKuUl791it4q2FuHlPDHOSo5uWZxbBhJIDFuLyeKJOjSdCdo7C5j6befFLJWNFu3jXkUg82d0mkgOrf4tW2/p8eDWmnSHSSSSED1K7Rc9TEDJIuW7Zmz1StSXF6HCiduy7VEdobt1483x1OoJZFBRQJxsrS6LhhoC2jXQasily26QbEhO7qtAt+I1GbAXAxUWcgXdXKiSQEkJ+1uv2eTEg+iWc9Ft4qZZvkmcfeqg+j40FV0ry3gqJkkZjfiomC7qYUzgi7Ii0oSS0uzFZZyLlde4thL7VS9rEIpUTkt6DPb4rSLBJLJqFU1kUZhyLg7CBNVrpjvIdxkKvdcw7jxTE0kmaGw7Uw8WIdk1yp4LrtVqaLSqyo/WdKd+Zl1bsay7MTaqKhYJucrl6ppBWPVVSdPIsWEgkqqYiViqRiDgx8BHeA4yk8fk/ccgj6BwR8mc8qtyelhf0+jFOU7jA0nzICMQO2+1UCFUOXx2YKcAiHurPP6yIdy3MxlszmFOOIjMObQniNU0mbsYY49dLzkSXJ8A4oM1UuetNN3jmiwlXiKQh3r2LdLpKh1AkJ7zV8GzBwoLNDL+v6Pj51GqI9F8qgSrpo2MnegfiVtuILrS58KfTI3ZItmE6zURkEjJmJMHSCpWeAnGw/gwvbE5zMkMDvKIoK07WWc0o6i3iUPKsUeH0nSY0azE1T0t9xOHWqHtWWeXF+o7ICNmFn7uRqFWPRekCqrSLhko9K8A3FeNyV93WNuHTadkikSJRFVIWippLuTiREbOu07UhP3cXupJxtTVFCcN6IqPRlSv01wVQXX8diSW/qHrwdSNjUev2iqKlwmvVcyFdb0HQ9AyCcrGSK8hIOmpgMgKqSqohbbuvEt27Gfs3CcsItxCcNNNmrdIHiD1B0DEEFTEh0tUx0vbHafJgqVZLOWCynAOUlVnAmFzszFIT8XLf8V2M65rZpZi044btl2ehq70HKD0F26ocp2CA7L/MeDsoQ2iqGiMi1IVUm2pWRklPp5MTTNFXZxLJAVyE7uoVSDb7+Nz0VmX2Ym9MsaVg67dxcoqQuAUXiXSHfWblbW6SSXze9jAOrJTcgSzx/quHSoDqFzbi5tmN2ZO9nSboiYa1TWkwlV0gDdJhE3Krk3YtyttMCVQINUOgbhwrrhbxw1phip1yzg38K6YsM1psimnHCg5f0sqZGH/RhVBUz9rDlPLUImMbv32aAuY9oYGKYxwuVUj69fhyEPl6cWXO5GuodKGbN8woqCdCQAkLlurILq3Xc99qQ8vNgQDG1eyl5hHMCrHIFIJGqzXi0F19BU92qq6ASBK4g6LQ58AFDmFXU5TCQkiFDU+irJNUacq2xu4VNJJ6MauxVS2/or9mleI9HsHj9zBrStq+TGnqVp+YXcRi7pJ1KcOlHt5AwLfYkqveYDZzCeKlTdEVbCN283CP5N1wpaoLoTYkDzaWwUHCHs9F/mxN0rX08rDVUtXVBzSCMeqbdUU45BsavturUg8Q91zYvYd0RVLrWqSDU5DVJL0uLN1VQwa02kq4VXVahxDxvfsERSV+12lu6sZbdM1mEo4YOrhUScaSt3Nze1jZFXVGi1Rb6AFEQqqSRNY2SaoPLrguACK2+4Osb78BnMrKyVq2WTmKKRinKIJBtbETYy8ZaRiIBvu5TwyYxk3qUSLWtAZKZAdn1lTxVCnNymY82yVb6vqA1RFmZ7g0uHK+4eor8GeTzBq67g4TKyXEmrXuieujA7j8ZmN47efmLGCaCqvMTs7SiNUt38Q2J2XCuo1J01XerpfCrpbvZxojL3tqyFZzTajxhCZFKXqyMw6eoIEg3BIjVMdJIekOXnwC9Subl8IMZ95TbprNqrOKhlmC6rrV4rhmjo0jSVv5BVMbDt29IniPpplLVHVLeanaeUdsDVsJorImmXtqqmhtH378XeoqtVQZtZiLqdzJM6qQK0XOkkku3K4egQ0i98S8eIaIpGaran4n1dKxsffc34JT0MxJLwK3q/WPZ5rrN4lhbSSE9OpGumENalK1n6py8pg4rLUGzWHn2arp02Xcd+zMyK8UOIJIEhK/ZfzWYz3L1y/Spv1kwqSKjXkeBpXVDDKoK6R85IK3d7vLluLBQrSLqRllypJPZ4ZxrTjpw3lC19J7feQmOqFpmQbRus5OTA1gY2m6jpGLf0+5kGKyrhw3FzJP+4vuusVIy3j4NgnhqD8tbqFFoA2KkVNR+VL5Nq5+l9Ou5JwQNTXi5lIgXcdZ8KCQmF/tkG7mxDVFk3T0DCtZg6kcsdVLvY8kgcuBO7mEQIbxIPx4vziTiqIU9d1WtGXNGSXq4mwIL6TsDuC1Ladw+fwHzYEdQZ05qTbora5leFSI9DQMWZiB7rS0uf3rsHt4z95fIqovGbZJuKyUrqkapjoaRCqPtdHzYTTHr+9hxLSkrOPFJKZfk8dHsIrAwm3SuHYYkoZAFvMZH5cQJQVmoenISqpJOHezbxjJPV0m7BBJgCoKmW3cRqjZvtxuunMqYqg8n9VrpMZSKYKxyruUjgYtnKqqtqo692qBdAGR2cnNjGdD5D5l1vICwZ02+jG/6WQkmrhJqgfTedpYJULU1TUSKmVeYDP1qTeZN+6URqAFDJ2AWpfa7LRtHnK0vdPC6swB0IqQjM0TaigWGWkSiDw49dSQYPQXFBVIl3SvDlpJCJkV+8ku9AOTAFRpxzUdO1BUM3FVGvCxSSQJIRatxLgW3cqA6SopWBfs2hZ7WCFVFFmUlIVhUrBi2RdSgLumzSSSVexwAW8CIB0rjDkEObZiiVpE02lTKIJSs45bgk74Jio80BQ8aqpK233Gl9kHWR2W8h024Ra5la5NCSFkn8M+bysG/cs3TcrkHKCukqkftByY3DljNQ2buT6lRqlUtQ1bTX8cFygkkhqql9qkQJECtojdbzeXGHoGGkqhkm8PDNhXdOC7pO8Ru2+I/L4iwYsm2dWyLVOm6SWq6QdcRxXAtJQWbJs7S3XklaqDguUuQeXB1SIEJSQ4jzij0+pCbreYeSTd4ozkmiSSDoZtdVJkSoAV7oUkrQAto7eTbcY7sVmBoueg5laNcVVRU1T8g6Nq6JzKNUHiFhl36SCpDYYl0GFtntYK7ql5arJYVvTRSsDU0YwbqumxP7Uly5SIdIhSO7rEyHZ04rsDmtO0RBPsuzipBi2j1XGqq9NmWl7KVpErvu+LnwnaKHrdqv1n6pUB5VFQtXBHxLl2m0eOG6TZpTNzO+3SNVAku6P2hu2e1icYOoqWKPbTs2u0jURA3iiSTpBx1Dbcklq9X6USsDr68XT89cJFxUbJMGFOQzNwWk6Wl44UrjH9Vw42cu7cXu4UetZWs4nWpeJpOPZy64a8g0SZpuHiRbdURcMyS33YkRAepTHRyqj5wxFPC3g3LqeYqwM26SFVOHSeE9FVIhMCG8l9IuUi2Df4h58AvOL6bVNw9H0fD1HL060VN+k5J0rJuHl48ypByW/qiATHffjQT1nRlKii5CpnM9MNb27AY8UCJqrcXMg1FJv1famJH8OKWxi/pM8TqRnVtWM3gK3Aq7NIknKoCO3VVIdK/2vKHgwVSV2VoUSb0LI+gsPRydOLRlnXUxlpW8PW0WBKrRi96ra8R4puW1VK60rLwuH3sETPiBy+Zvln7ebVj60WI1ZmETSJdvxBHdtVuLS2Fyld7mKHlbSDOua6i6VdP9IXq9ojq6Ruj/UJKnsBU9wgRbLyC7DnBwSGSDjgth01NQNZtlq7pir4utXA/WvRRhLqqvGyV5FYCSvekIX77UivEQ5efFYmqtmKfouoHJ0AkzeO5E9VSSJJsbpkrpJN9IQGwyFXnHb4vFYmxl6PgaghqNpKlXMKtHqqt0mzSOMnjpVUbe9dblTvC28bBts24quYVP5p0/VzNmym14NjOpArHCqkb5gkYBaqVyuqYK3JXnsHmwkYyjd0ImJx1qk5mV5VUvSshA5g1O+bTlzd0zaXb1W9hCbddJK0AHakr3obbPNgFqawjstuwbM0Jap63p0n8zJRQqQiukSS8M3jXTzp4gSNUlXA+zs8uA2oGNEz3EIQqLJ45AS4pmSVn6rddiJmv4Rb6ySK6RN91qoW3YsThw2a/brCPtYqs5MovLkWbx2qR9KYjZhnShrlFBuKFTcGksm5a3aiRXbd1uLzS9Wv/AECoDV45j3yomJcMZpaoebx4jqXBsg1sSBJVQ96pcpj7QmWLZTUQjLzScU9WJtxF4pKJpDz27bryHbj7WvhqCKMoaYh1SS0ayOpm6MOrrqptdwJpICrbfzlaHsjhlJU76aeccM8YIIKGOrtIC2e0H3cFIoOkstqZdPHEwzdzkh3SCyCrB4CBiHKqgCqu27rwGXklMPVHiy8uha9VBVdARtSv6OTkwtYm/KGOlGPui1yrtR6AiWkYkNvhMsOIuoHLNNYGsku2JWwu4MkuXk29eI/YSgrIP0h27ktqoYtMHQFcVGixcwlNiTWQM0m7lcgQbrmHMIqq2h8+CCARFDg6RkuIkaklKmYg1nlUJaQVBuLlV0SFpmdveqnydO7BEkIPM6nHElJVNNvF026Bt3qiThBy1XALhEC0l947sDSRhI1u84aUVko94kPfiICuOr4d/wDO97FtpZwtVsMnCVHGk7j4pUBJ62QSScJAe0CVVu3/AAly4Gd95MRIlW6odwP0bjYepVqqYyyWq4FNyKCrAt5WEkJ2qht8d2Bw8JFrdwrwxE+XSK3BIzSoNnT7haSpKpCnIkBNUyVI9VAruUiMRA7rv5uBVxp86qIlf4guHDikiYSaWcuDhSiS5JVa0bX6pEfNzYREwNbvbrT6rd2L3F1rlc3iU2EjkszdOtK1V6NQPEjv8QhdZinDwYiWqzVtPq1eXBo+FKo+0velNmSN6T8iWvsFLStPBfo7Odm7hlKTzKp5WZbglpJPWTNAX6Fm1K1W3lG7ru5enAibvWyS2igz1CPlEgu/Fi+0OyYDJC8q+gXMmxvu0E1zbXH5rBI/h8OAqwG3B7QUwt+YJdmSskHBzdVREg2piBnJlFkHEWiroAgHi0iuv90sQlkVHRzWSXRcvnQOLHUeKRCCQXcpF0Fgj1lmW/pxi+oaEhEih5FBIkkpB5KL8Lt50hcaW4vMBBge0qbwVHjZjULaKUcNSDVcq2gQXXGN1pYUD0biWlIjJRkhUZyjFONaxqDFukqaqSosh1fZJXnPDAmDxXT/AIUXEvKOHjymUQjRl+Ja2mWlam878fOSV1/y4hBcOWqwgBqkiZgO3dbgtsRL1SBc9pFXKWkmctJEE8bNRvDq8Q6Fch7/AKQFXaQJJXlzK2gV/Nibr7M6hn9PrUrRuV1OR6jjunUgo3NVwPlS3WB8GK/SNJHIx5SVPuR4xI+6kOKVbKtVR67UiI/l68U18k/FwockapLGqdyil3en4t+/AhDNyUkY0IiKb6TYVPsRLy2BiNUZtlVr1UStA7tNcNheUrOnEgXLstuxHul3g7yARsDpwUxJUPwRzy0r+k5hk4iHDSNhFmtlqJqiKSo+Ib8Wh88ofRseFEEV14kJCRfJjPMJlfVVYsk5Jgi09DNXlVJ0P3A3/Jg5R1K2U81iHCaTJ4kIJEowG0B/0t2M5c6alpnZtuenup1QvvvtRIUccnpnJpCpI0I2ea8YA6qrRClT1SPyqqrmF/sh7uImopmHZvHgP4qKeKKvDdCg2i1xXagBcyptxvBIrui3fgY03RfCyyIPEJ6QcJHq60fEiuqPg7oTEf6e5i1VA1cy5S0k3y3Xcpt0tJ0ovHaAJAfXoAXdfGQeCzEqZ+mDagammKUlBzVTUq9jUwFsuk+j36qAsYRu6E129/2qqrgi/CY3Hff0sUXlH1Q+IBy6Fm6ZGqCrQePeE68ZDpEkdwWFfv8AuldcBoV41FrNxa0QTO8LnKEoqqAq2EVlypCld5b78DuspJykm1nvVsGzUd96kmkkqJWWWgdp7zv3cgWfcw6YdE9CXkJAk1oahlRcIxtZsY/1hvdJ8A6HhUuaw9XervEdt/vlhm6e0lMzjWnmukTFKxuhIEqaSQBbyqquCvAfAOGtOtYeuqgcBMysHTThItJ0xL6sTpXxCLgRSSLygdnhDFmzAcLOhRpJ/StPRijSxrxMezBVwNnURB1HbzWYuqRFprtV6mInXNIqux9JRT9ETJySW/Zbu2XeLBWp2vpuj6RTpWEr9sg4NUxBdoBrylhXd0SSpWW+yGA2VJTDAb2fej4kytLEhB0vKy6Tp5U0k+iIVpYkbkmpuSJUztBIUhK8y3co3bMJGCIyk04nL4jHtW1YFMtKqpqPlK/Vq142GKIFTGZHQF8ZlyJCqNiqvlE8RtcSkrVsDC1mzRcx4qrqsnTls4SJkDhK3faqP1fYqPhDdz4iRi5UHEw2SinarUNVVKQlo4ELgAd+47jSI9K0B27zxyzSB01aov2FQznFkeq0bJG2SQ7ofrFxjYfy+3h8wToDqKSQuiMtKUninoOkWraWf2zzh0CrJyvCapvmhBbakrtSMQO3cGrzhy9cazqqVSqBnR6T9jJvnqqSSDLgwSAXB8wkB7D6fD7XRiLrCWbIMW6L+bfC3ZGqzZtnIruVSAC70g3CAJbvB93EHE1Kwl3gxrCKqhd40vVaoIBvEwErLbLjDDERIxkgSKBK7SCtGRFWCjM0Y6Zo7OPbLmZFZynpWWgF/QXj8WK/UkpGzMws5hopCMYhYDVsh0h5/GWJSHg/XzV0wemo8qgGvGKtOIuVSS5r9+/VAOcSt2Divkk20RWSWV/zqGAqmQaTTOjES1Cm/CuehsXPbt3XYsE9Qs9RDUnNVgzinCSSTpJi5cAThVI+QrQ5B2l9rbd0XYgxNzaQA8ELPCduCFFyTbMGh3VGTbz1hUWuHALyDwBNVvbvQQVVHYXlNUQLw378UNFrVr8o6VEqZp0ZKFxiGkz3N9WGSFUUC5RMxNUiAPFuDbiQr6XomUkkYeZAV2KoGTCUTXXGxwe7Q1wHvbL99/LvxBsaGpVrpxTqkqjXdN3HFOkFxVICAOnZdzct2FKmo2bretHjl7KlCrSt782irBXSQAkhIBG/nvARsDDMRDkSk58y5ThgZRbqmGVMVKhJN3hgLkUAXKw+nVNLlK0fa6C6MJxNLzG2Nrd+2YqWg4SbS7AWKqqXiErRBX4/Zw3fU5PSKdO0xTUkxQfMgMOLUFVA1VTK7mtEAHb1n48IzT+Sp9m6YKzysu4dtzavGjl5roC45r0Fesbx5fmtLExH2lXJTVZPWzJ0jDwzCBKNSO5uSDjvRPzKgrq7/bH2cdMaFRViRmJmj3yjHV0lXcRKaqomfIZDpKgfh24rdQL6tG0us/NX1slxCRDw5CkTe/ZaXWWK2Lp4SPB8Yukjb9lq7PhwO6WpMGNqrtaN4FKSWFqD5JZIre93W+1twnF1g/SJNKRbCu1MvtE0iEsPJiDbPSUWJYhUAObowhRDxb8q8cS1yKW8fFgnEgNjVqXhkD+lWtMmy4JuUD2nylZgjZby60pIJs5mefPlESPhY9yaXDrmA3AJOlbtL2erlExxX8uaeYVbVzOEl1hFuqKp6ZL6RrmA3AkJbrCP2cEpNBzAwqdJBCR7NukrcTlMbnRH+1V2mfuBhSwMiR1W+IjEkO5qOh2soRjStRx7iw3RpJXIKpBzXiKo/Ni1ZU04wzBnCbEi+eWNTVAV5YGaqpkQ7xJVXvfZE9vyYUlFY1vcDpzILiqIfWRbqr2H4N+/4hxzAy4QxD6hrCTiETVtVJDuNn8ltC7DJzW1FJWHYuyV0qBenKIFrT1Ws0I9xHq/YPRAlV0v2q/2R+4d+KvKNaSqB83bUxMRsl61PVSiUHCS6qVnON1xbrbiw+qKoKhnqd4CratkJWNMzABXXMTs81hWHf4t2IeBgaDZzTOoShF0HDRUCS9X2Xctv6Ir7fN84YEpmoaiRT7urSqHmkwoZVmMarTy7N0kqdqaaGgqh/Kj1+9bgXowLDT3s93lLBmzOi41XjJ6OhCZotB+tcEkat3gv6ALzYDqNYwhKJ67N2N/7LBzRVX6JeHq36RWz81VAN2bdzInNJODACV4ZUiAflLEhG0fTyBD6mq2pkrOQRefgtw1pevqPZKFc8k11D5BJvs/2uLk3qqEdfZAuI+IkLcaBhyQ60jcbiRRSbWLeICNlTyqvmctwL8OJRFJ4I968FXzaWGpS7Ah2OS+Mxx5N+jz8SqXsndhgJDFBxJPtIy5rMN1htwomq2V36yokeFrU/12LRJRUWQgXMY4TJIB5ViHEoTUFehIsNVI4/0QCOLQUVFuG+rsVtVHzBdiDkqLpWU/jlNsyLxClb9zE5LMKhSTvhjZ6n/Sb7fkxWXC+a6Slg09Bqj+tF0Vv7+L4qlVCYyNaOHShw8sLNP0fo10DLFPqTKaoqdZ+mRPh3LUOYkFbj+HBZ9L3NYRvOEp8vLrkOI+UqXNdmj3VEx5eIk1df5bsfIS3Lyz+SR3Y/CH0ji3VQ9qCZW9DmVpdFmSQ2ekmzEkPi8WKwQ9BBj4VIJbF6SbY9jskrccYBNsmtymj23IEJVwesgp1EIhuHEo4JsYia6wijzXFhbSN06FshFFqGQXkglrnZ5eXFVrBg8ZPLHjkdE+REmtpWebdjBjSdYPctUVTDlUk8dQ7UC0pJK491uldj9Tpaf9EepUBQjpFgkkCqrskNMbC5CHx4rMXDhNS6EW2ctkBXPS1lxtt+PG4kK0l6EoSN1mcCu1VSbs9Za5VmzbjzLr8Pq2W7NvmwvvVWVpJtqmHMIvkpvaKTr7Tj7+kRWbYPLarHOWBZms1mnq9VVVu2aFtVIEh71XeQjb7PNge5oFROtH/RSqpOaKwydcXDAxFI+gRsXV1erdtwf5/LuHZ0fGtsrI5nLqLPyQKdmHDqPtcN0hJxpC4tb2kRfa+UBtxlKYZLM36iK6yRbj3JrguPN4g58OLYQvmTmGKS1shCKaapq7N2OejHtgjj2/DlK1c8t5en2D4kJRiOuYkKTsiIlUj8o8mLRPeukp9N+vJPpVG0QbO07x2F7PtcuBfElFpPRKWRVUb28qZW78F6QZvGdPsQavOGZOCC5IlbbbuVXmworxFp4S7yaUxSaj3V+zqpnw8P8AW1XiX2qynIHunz+1hrPPKZkWJNplzG8UsqHetGCGveIW7iu2eI/OWHy0lHM2owqr5AlnA2EQpCWqHmsHV/3cDeakY0C4CLBXRSG0NUR5795Dy2DiyhDsxFDVJTLUmMsTMZRYI1EhRSOwLiuIrerlHB9yI7Rkbl1SreimdOer3Crw3S82pI2pAZDzEkaR7rB5eT3sZ4UdOXRCa7lVQrbbiO7B47POQ9K5hyLU6vm5CPUWbqumcW5YKtAmAC7ak83BbsK4rPGOJXHIGnxKp2r1Jm5vZIz1Nl5S2YH8KoVbNVhEgqJJO4tVVyaoGW3VanpCkXlDz4GFSU5T1L3P6UqEZtqKR8RGqoICugYdZaSpj7xW4K9SyVC5b+lNzlTUMDQ8HJpA3X4J+4kFVVQ+1FdceT2Qu2H5rMDKaeZYzbfg4FFjUswqqZtWzaGV0LP9Fs2DdyFhFRNZ+EiLQmNS7HTHUh6jKM3ri/vXimly64DYfRtMhM7cTjqo6JYIs1l2zxWcbkAG04O5JLqvVvKxXb0WWYWZxdZtVvXEXFUm2F9YIuRYaVvSY70hs8+OqgYSUbHqLFJOZVqd7dUYhJW0fGd2rv8Af2YZ9WYItKXZ7qg5iuaYNuISSKRPA7pVMWqRKqh07gETC32/jwOZSWYLulvVbAUmp8oqJDdi6J0QsqoTmWoOoUo9LlXTai2Ig8xHs+9il1Ayio2QFGJkieNzC7ktNI7vsiwY02AbFWRGaaogiXP6MbR7IFXZNFEeoyoGioiqWp7Z2bfpEq6MjLSSQScILld4yAR+LGTaEi6SmpwWdb1mvTkbpXcWhHE+O+4dukBD5sbjyd7P3YykotvMIZjtqkVbukjVUnZNqxuS/wCqlvES893LhJxC8yFPi2/Lo9mSNomyIltSJawk9Swg4NioiSVi68SlwwWeES5g90sAvNWbyxi1lqKJnTFKw5oaXFsBdca8P+QbiNw+ZUiwbEKdpBjQfop9mEbE0kbO0uCMWiSDfmvA0uQfNgC1rQnZgmeIbMm7QEY9gBKyETIoLoG45QQuMe9V6ytxzCmIJatqaR1oItatpuLqDWhodKTTAANJN6IkkkfitSIfNzXc+K7mhmDmXVDVwjEgxiosyS0o2GYCPsXFbeFvlPE9NDG04xUZ05U7RCJS28M21Um49W8lbQMvYwCaqrOp5ScJ8u/j3fob3ikoTUCJIPCN9x241dqpM12UfnKmpfgEZKBnHVSIOuAm3jpUrvsF3BFb5iH8RYRRJzbwyDnSJUb9pW8/Td0YeRsoizkPWUlR4yqip3kTlUxS+EN/z45YmtLvv4Li4hITLl0ktJL2iV2fGeNZqDlS0SVmhUocLQJ+JKWbyTSD+h/HhaeZRUu10fXD7hw3kkKQWX+1hOBBZ44sVNskmH2SCTVJIVbusTDYfu4mniTa3ho7QXUDk+sFb/MxUavFVFSl2bBrx8MHfN956t1/xYq8hM8VrJP2aCrjkuSG35gxfqkam1iRWdAIikHejxHdEf72Kuxpep6jRTWhqVtapc7kQ0kvfVMsRwLvr6m1Nv3IukeAjSLhwttQb6pe0V9v3sWsqPlZtMVibLpCB7RfK/uCWHlFx0JCN1FpHvVjVO4isE9pENl1xBbt8WJZxV8awUFZkjCoWb7kFVSVH38R3lpXwtChY3L6Yi9RyrJQa6apW2i8VLf7Wli1DFzbVOxKV0kzC8xSkSG75bMRqM9RjodjZdUbr1SbKkQiZ85Whvx1/axqI6UUk8cGRldxBF8Q2/jxZGaqlBdOGppPETcGJIgVtqroSt81oFzY6dJPLVkUH6rxil/F0LbQ+G4gDEtJQb9gii8VYJR6hgBCKjJUrkvF7PuY8T2SZiii3kkEk1RuS0mofdDESYUsxU8hftVu/wBdMT2Wk32D7O3HIpARFfMEPP0YvxU/VrxMnKrkVU/Eq3FL+nx4i31GzzNFNy9jSfXq26TY0lff/oGIEM19kqKoIMiJ43kiV4fvRuSu3+YMW5PNWHp+lVGFEM5CkZBVW567aVGqXHJeBdABsuu8HRs8eK/Uz+ViLji6PV4UNpOXJAgkW3fbeI34p1Co1ZXNTI0fTkVCk8m1TQSTdtUiSSMx3kBK/ZbB6d2JY0omMnFY26e1a8yKnqhrysY1s1zYnpKDVjRQ4Jd+bNBmfgV4JcVVTtAfj6QwdaxjmcWoiiM3wKiSX1IhqiZSVVcXbx3CR2+ye7kwI6YyPq2gYyOfwzOM4qHiUtfgI3VetnY+EftTO8i70NLkxFllzms6eSEqrGpPpJZuqJLyySqBoW3b3QmJX2hcXMR9O3GceFp45ASYESY14NYMI1GKi8wnLZw4cGRKuZuRX0A1Sv3W2APJtI/dxW2MCi/gyjX+YTnukkrXZOnTkElR3GQ8obt3Ni5SGWVVU4JSTB/T8a4NqAtV2UJpP0iPntIC2dW7dd5sCt9kywVUdIyM3Url4aV1pLilr37juEEvveLDJhgY6yVLrqIVFZpUfl0oszm8wo9Jq4MOKdx9OIOzXAehUXRWJEF/6JL4+QCblLTkPnLLuKwCY+kbVkqSMa0j2qEafDmJb3VhIaW/nBLd7WMtM8h139aN4GLZx6qjq/hY1oqqq6K39Lqq6V4+a+zwY0llD2T80Mr5NaejqjSkqi4XScMlbXKSWrdeZr23AVhFyXGV+KKsGmh0lqX0Sh7KJNfrxlKsRy7cVG5JgyBIijWjICaodQAP2Wz3ywrHtaJOlXS0QzfPnThU+4XAF3W8x70RVLS6RHwcm3biRXpHMSDpySkfTFQLFAwIweyS6TMGoGO8TMt/PdaZhdijOmlRxgqPjeRUNOPkuMGSbSir5Xp71BBIUucOo1eq67AbE5axXtBjoJc5oOod84Yxs3RkbT6gN7S4ZBqm9VC3ZtAhs5uUTwLZyjctHjf1lMs30epbpM3LEx1ULj5lVVe9tu8BjaA+bFwi6DZ19KOFY2oXn0gVVVVXd+reMAg5SVXI1bwIrber38D2WovL6npCUOWikJOWZOP436puXOzkKxURs5g5bffw1aECGarEuRUioMj8voSWbtobMKQXnHu5gm7XSZqvHB3WFcZFYP7UzEMW91klk7S7gjqh561RVboqkhDun7kmzgyG/VVBDh7txD9qN3lxbqTl6MiaVdIsMqGz6QegDV5HtIm10vcXMSSW8+krSV8eBsp2iSgRcfR/KZsxTilVbSkJlJoqIGVvdJAIKpdPKZY+OC6e1XiQIwhnhSbyAh8oMvYWr49msbdvIuya66oAdvdFxXGWJbt9vJ4cM6+qelW7pqza5aqsb9tsMq1Fm67oUte9JAbNvMNn3sJ5J5i5TP8ALN9RtPuSbV3VBt0pZN88cORV2EVyQJFuALSHdb5zLE8pnBFepn0lVlZLzykUSrBnxrckGCCqSF6vdWlqqgNvXziPsYAMTlBQw3aRQtlMyJUolEKfy7faZuDQK1qKWqkKt21W3VMfaKzaGLlVFSoxcGK0dQa8g+aJNFQj1GaqSu+2+2wbzK0i8Id1hOkalhF27N5T9YIWurwai5JJLVV3X6VhXnycx/zMTAyMaKyKJItklEnhjptl/t1Q57tt5+0WC221ElXXGWh1RGs65eRzSoJRqrwrOPUSZ8KkFxCYKiqhsDbsE9/gw0nXFcwNNyklOVlS9JpmkcQwWVdaoDpEXdIIAgSWkQchAF/JZbip1m9jZSu3lPUVlNOSE+3vVcTdIWyDpIyAr0iSDfaRW7yVE+fmx59k5mFmlTalSZsttCp9UGqCjmLdMXSGqYlaqkqSTcuqy224913XiJU/QU3y0q8XB2IBNn/GkTlUxXWV71dciMlSPzEeHiZgSggqdo3c3gDE/VWTeZdAwalQ1VTCsVGpKgkRqKpERGRWhbaRX7vDiqNy1SGwxG/qLETAT1itRTOjBabpyvoplQUW4cZ+U8T9IEkiZP6HSdukBC6zvVR72zpL93BJgatp5CWjeMz3qqSdN73SCYxKBN1d+8iEEC3bS2lcY3bMZuy/yNqGrG6MxLGvFR5q7kyi3hKqhzbSBDSDZ1EeNho5dpaycJExqDqDVYAz0SkVVSS/YKhaImG4t1t/Pha62AORSurJpnSkZjMaiXFPvnlPzDF0m3vVGPbNe9FXmPuj5OW63AnhpeBqNnJTDXLooGSVcfXScsDuVuC7crd3pc24/ZxC5xZPZehIfSmoK2VTTimAELGEbpIJMwvIbCsuM95FusHmwM6Zr7LcHAv5IJBm8/i6Q6q5a4CY7ek+Tq24c0LGVqBIql2elXKUgZ5BwjKyjOIkG7gDNJBVuKQIcpct1h81vP7uBTMMtdNQ6cOcXbglxT9NVqKSTW7zJKkFvm29GDhIVhD/AJUT9ZSfD8jUl1TVNDy8UryDgJ19Vq0lIKRTKSeKsWpmXeOlS1TLy8mzFtewQFKSa2Z8DKMVGRNQzcGsS0HNyEasqGkZMnRoEQeEiAt2NH5TZwz1aRMvS1RU+xkk1WwoelRsKrThkute8RJINvP9luK7cWBNljks8zDp2QqcZh0miyV0EmkbFnIPHSu28dICEEtpjzHgjll9m1TFFOKKFYoymFg1zGfJBA0gvItUUDItK4x5R5rcIagWi0GmVc81GPMpqm6QyrqFvooQKvej3pNpRdXeO3lBIrPhHFbqBKiRnnFPQlJSEe6B0APGnrFVXXsDlEbfMXPbhnS7+sNZOvEjpVizghVbvJIgbs+cB5tK6/2sUtiNz4VWr2PVkHapuAeu0B4xe7rJU+9O63lI/dwXTU2n0pE66EleH0XldDSH1VGvWLxX9AlHNbLLPFxW/wB74cC2oFaVXaqLQ0U5SUdOPt3bhIlem/aHJzexiwTERU8QSM8lULNsJ2WimlcRmHOVpiWKeUTKtZYlmTYXiaS4K66qAi3I+awr9nN04k4w7hqJMra40aJHZrpxhO5ksXKr+QJ1DqpP2raPYKvDXMS6rNiQbucvF8OvZ1lTk82Uh0kZ5tV5udiklKccYpatxEkGqaVvSO3lxkyj+0hVUJmHGz1c2vI+HFwzVaRaQNCSSLbtJIhvEDt2kVluCtRJ5e5xzU1N0lJT0ei1dN3S7LiiikGYH3SRaTdUhOzduDxbubAT4kOtfK4HXTkQqxTmXlDcVx8tVsm2an9Y4Ry80G4gFxbRDk5fL4sDd1WWXcMSzAKmhnUaA6DWNQJByqV/iVceHcW09uL1XDXg3BQ9R1CghGm1tEnKSuq+O+0AJW0jDZcPIXXgV1tTUbGw7h5EVg+Vb6Rggx4jjkBPmtFJxbZvHmtH2cfWBzdJoAiytadKUbSQxrp+hTySqiqQGCrl0SVt/gHVILsQ8Fl5U7pnMSuXzNzHqR4mg6Jy6BVJyB291vK/VHbzCQF4ht3VukZeSjoluasOrBujDmj1UhuA9pkQpCOFqgfzcCi1/ibFuZBwqUgkkqZWAJXKobtpgXKfNv8ADhq5SCDcSUKardJ3s9SrNQS9VXLRs8HCkdhqoCySbEfhusETMfauxWJN+DcCSPcofKPkxaa+qOnpmYRfU+2kEmrdmCCpPlbjIwIt4j0DZbtwPHioyLsSaoldbb7WAGms0uklq3XcpjSOpNBvLeB4sNHwcJOTHB1RU4wrPSv4kmqq928dtoeW4rvLivGLlqtYr72Db2YaoybpWryf5sNlSK25qoo3QVaoGNpap6u8CG3mAcGHjEZCstzalpGjssgoTLdN9l0yp9KffMAMZL6RyiDp1fuElUtINLm8WHUDEZnerXHB02m5fLX6qCtRiTPVPaCqSqpEe20rxt3XeDFkS7QNPV2jLK0lUE1LtyHVBBzEmnxKQbT0NK01eYSPYWKzR+cyEnV7hnRVWVDAqx4gcjFjT+urpbbNpJXhcdo7jLn8OFwtCZdqoydgrhDyMhAxA09HVsu1rQ2pa5SDD+DjccvdKqiO0fAHtWYo+cMlVTWqIGEYVJJvnTpgbyW4J+JJLhy6CV/dJdW3SSLz4JaCUvmEm7Um8yopJJ0VysWokggvZ0aomkJ4q05lNUEQmo2pX0zckKukIlGxyTkkj9pwuKVn/s93hxcIluBVT1a0JZCtzVeOkW8bxPdWEgg4QcqsdLnKwyJUy3c3kwHa4km1bx7cBrZsgRqne2km7Uj/AGRiTcSNIfGOD5XfrLLdF59MmaD5U0krncg8Bdu2tEiVPgA0jMv87z4ynVFUTFfPvULJsvUdip8AoLdXVEDt+yQAiAOTzYMYKQqMQEtKeI5I5gqx6cw1RYizVEy1yeAlb8e/FzyXzhWhKjh2aVFetZpIUYuJTaTJR7MXG0eKXS3Aqv06vJb03YpeXmXPrmQThJKnKgcyEquCDNlFukkFVP1uqkYmdo2+DpxsmW7NmXuXVCQ0wz4mlqhSftyGSp5u6fSImf6IFdx8l36JL3cQedD1e5W7FYqoYSUbPN411Np3GzPgvXbDV11TuvtXArw5dnh2cuK3bULqUeRtPs4N8xN5sjXL/SN4AWqq3K6V7fwBvsvxb6tbsF4JdpTCDqNTjVf4xOupFVd24IP1R3Cr7t92KpE0LKtSGSqCSjxFUTb6kfxCpkHsgIqgO7CMWhApK8CmCv7Beh5RiTZ3BKR8oqmI+q5Fygparfb3RGltsLr27fFgcZg/TyLqpSHk20bHwoaSqUbH6SqXh1SE0O9uEfGO/dixVFQ0VS8Eg+qhZ9U7h1s9WxKIkqkfSa+qRBaG3eqPXgMzlQPArqWpWOW+jTVVIHqC6kWreJgI2Gqrrjt3FuEbOnB+8tQqgB7hK7VY8Rqvh2ck2ilFtUzSFWLErQDrXsSK8jDoK60+osBeos5oqLarRVJP4qPdRoqpATR6uIifRbe10lRHw46Tytfuod1KymZVWVYi3VM35ISyopeK4h0ldtnOQ34qsxlBQzKBfSqVcsWLw7BSFRuYskm58m4xI1T5uX5cN2wCOlVF7SE+rN1RMLORbLyUk7VNdXTSMjMz5ytD2sXPLWpIHL6pvXdUI1KhJRioGzQi3XDXHu1Ul1bhVAS5Dt8+Pyi6vOGYvqbgY0XjhIVXCskhLFH67cfGO0z+O/EnQ+UuYFetxlzinbGilXipquUHAINScJbS0icKiBq7Orz4g9EB1K0da1LF5v0rX0O4m4vMVBPSSAVYddqHFNlT59AXBfZCZW3XF1li1ystlxKZYeiWbR0fxcIkC8iu5YELzm22kFu07uUS8WM00U9yvyemXnoS9br1A4QcRbr1w1SXZiBEBAKQNVfrBEVv6Xp5cWCjXVdzcSpU5UxSdQ0w6lLnhJRJuXgqjaWkkTgRst8nKfThVi3DUO1XQ0r9qjN55U8hHtqVZ1ZCRgKizVh+DVZoPlTtECJLVK/fYW+7mL2cQ9YU5U8XS7o65y0bcUkqfBOY1InKpGXIaukQJW7eYgL2METNJrUktMSlT/m3cukXHDnAlKNQckLfaRpWJDqt+rdtt8ZdY5i55GLYyTY1l4iSbpKumvrt64Fq1V6yS1RS3cvURl58WtkHIKks8vH8q9cfwo5XVINlqhFt8oj0Y5FcCHpxcKinoF/xElKValMykqJi60KfSIfJaqrb8QYoInpEP2Yjdy4PMFRJPxEtx4t+W2ZUvlrNeioIaEp+QepgGgUtGC70DErr0ruQ/Pin3B12jjoTxR0fEoLdmXeduY9Sw1N1JI0TNOSkBcN2qrKbb3unAfamhHHpJGlql9qWqY+IsD7LBizqDM6Qm6BhGMf6lI3CEJKCJMxVERA9ddW6zcRbQu8Q2Yk+zVWNMVjFN8u4ymWcZPlHO0peSi4dIlyjR0h0kjO4zIzK60NnOVmGs9DRTKLlKYdTd8pJOD4Mk3/qxcT677xvNUwuHkIMJ3egH8sdKuaHSSpAS01LTlVOalqqPmE1uHeSicT9bSk24KpKmgK4CJpDyiA237LfNiHzar6jMyCTZw2VkoxqQSBAFVHWkqJmV1nChdq9e7n3Bgp03CNhfN6km5uoGzMGuk6X4cVQXBJL7BVdXYZFu5bbrT9jA+r7NCiaVfvm1NZULmpJKm6QlqkFJX1gF20tI0i7oAHYIqjbg2mMHi0L6QwQxqKgZiko9FzUD+MbPFdKyL4jVdWGN15CA2APtn1cuLPkFGZcTFft22ZVXu6WjEUCVCRaONAknA8o327Lt+KvPVlA1CzUtoCIjZJwHerx56Te79aKFuwvfs3cuK6mqYl4SwWeCoX0noLMVohTEtJdnxzK1qu3dcK6czMm4XMlis3qpKjq3c9tpCHi3YHE2lmpU8xIOK5ZvHyipWyzRsqKBaWlaA23WJDuHnDzc+/Gbcg8xpbLSvmsrDQ7aQeSCHqlumuRCAqqmIiVwb7h3Y2RmfD13Cz8FFTU4rLR6jM1LHNiugr47lz70hVsHvT8VvThPXCYc2lfWBAHlTSiaSiHxSVW02hIJtW9zCPm2bBcUAG1KwTSJdVXYPKSXnK0t+IfLSkqMpriKhlpJ4+g2SXAIJiySjXHrBUdXunTUtUNIB6vGGLnS1HVbKVZKR1V5NOwfAqbVCpGjz7DpSMUldhj1BbcfVuPFBrSXpaMhZZoNXpVHIKugQJi0qJu2dIHqjfrqja4V5d+rad9/ivxFoXeVW6D0SXbETlKm9cZf1gTROMv3OZFWSf7y36vEJF1lzcmKvVklCHUzXVpIZz1YRqv10vqLcjDn79JIbx2j0DvvHkxeWuXGUEdBprDVTmp0w0nSoyUo1Ju6uSETG5UgMLPDft34pUhlrllUcOswbUZHkMekJqzNN1G1X0BV5UlbLgVLm2+TFrAgbsyUyJCvtBVaznqoJsgzpdXV0n5SEa1SF0RmkN6S6oEQGQ+UyDA3i34Rsk3frthXFoqCumVthGG4BK8bLduHFXU59FakkqeByu5TZLmkkuq1Jsa4dB6R7w224ZxcvKwzgnkM/XZujSNvqIKmJkkY2mJeUww9Qa1tRsA/wA9KKn67fvF4aQQ+sM3LKYF0/VMLRMTZt7S0hENlo3jbsHErK5WwHoq2PpytDfSbxKEarsykm7oW+taNtmkV9yu8j1d95ANuM/QOVFMSj6NbU5nfTi8w7cJJIIFHP0lUlfKWgXl3YKcPl5n9T9HykUwlYqeb/SFuaSijh+qrq7h1UOW8TIhv6+S/Ct9oB2lFWtEaoGaGXz+oZp85Sm5BzPNUlXTxpJNTQHSBK7uO6s2gIiAlbdgJ3XEOwrefGnq4e5nKvoxZ67KnJhqqbdcYYFVRZtEhuVu1T0thCJbT/RdJ4z/AFdE0lDSAsKSqpzUKIfauSjuDD3R1SM/lwdSOFlalF3chnUyqJLKGTRcVBL7RTk93H7D1BHCt37BJsoQgKWglzYlamXDhSZ3lrH0j4MRdLxtzgnJthVb8txBynh+BgbGtAtyz9KshOgtv0Ve9HpEvmwTss6fCOhSrlKEk6jK6xKLbNX4gXTeS6SVgWc1on1e5geoMuKUEFzEUSK0y0rrfhxNRdaow0GnFIU9BuUT/j/Fs9Xid3UW0w28lhjhVgUh6BTwveUhmBX6NVPk0n9BxUU8ZCaRE2JVJ0Vn6+whvICHmIL/ABkVuBqLNgKiiwgWoXMWvdd82HjhJmTjjl9rcd2gJ7fnuwio4BW7Q4ZJufKQ3kXz4La0YaEvdiaTFANEuYSt2iht+bF4pd+cNEpvEJiPJTV3xbl0WgrYXMSFth8vjv8AixTWosEE/rTxdQvEKo/u4crO1l1Ly4YkgEA2iIjYPlDZ72IvSIYrzAiBK3P4ZzKVBJP1X8XNNwsVV9Tri2SO8btJIFRE9u3kDD6YVzBkYlMIOXVppi1SA0odAXCQLqpbdUrBsvLm3dWKbHx0PKSyLN1KpRAuOV65IrEDEbrysEjt9nFmzMyyWy8hWfrJyzTfaoXKpC4InIHcQGKSqA/FfiAaSHoRbhCY6kLpypqnWR4aUnpVyiRXaTl0RCXu3Yh/WO3ezSVwXS7UWekRGtYdhXYi3bteFHViWpqk3/VERpEZj7eBotUcw9dKSTqUSF0apGRJNxSLf7A2W+XDtnDTtWYf3blNR8bUkbEs3LWShij5reTbjWrkB/lUDu0i9ob8Xuv8vsq6Oy4iXLCeQqCqHZarxWNVEUmoEXIqluvLmsIbeULhwPXFUSvqlQF6kULiDvBoozFW0/Fcf2RexirLLuVdl46Z7gtxXluOHuivmY00KkijYr7bvyHm2ni7Zd1UcC64CGBJNN6rzPXC6SReUiSVHbgcs/RoKEZxzZzssHU6fNgi5f1RLwka6pWUiHy8RKmCunHt2qpaogW/SVSK/b5htxCoZI2o7kVQviDvdVxzAavoiUjxrSBpXTdHbdFvyVtATG7vQVIg5sD9UWbV0oAOddPdbpqkPs8+/EvUVKhHR8fUFNT0fIM3o96kRJC8Y82xVIFSMto33Yaz1P1O6j40JGHdk1atTVaqCBEOlqkV+zZzlheIiMZEnhEXKoZZ0A8jlIfa24TZqyTxRNFkzFySpGCWnfusw3WZ2qWWKJKBzDduwo1VNg6RVVZqO00i+wLcBYIAAFAuEZKUZt1pFBNWMcmBKiBaqjwmwkfhC27kxdaky5ioKnY+bnpKqkhkhM2avq0l2To/2S5kliiN5ThU9FnFKoKb7SFUhIT8uLc2reeqimSpipmdWT0bT7fiGHDSKqoQ6V3eq6R3BaW0em3HxzEuVXsTVD9TtrrxNcf87hrJNdBMg3EPiIsTUlIw5rXxrZ4k3D9IvuNX2rNuIdYodV8icisuLEz+scNbq+6J4m1PEtS8/GKu2WbKqmcYjKpsC4dX7JVEkhXIPEO7fgsNfRPKNBVa1IVpfoXbMLh9oTvwNqMrTLujOIYNZSoARdFda/a7RPyhgmhPM1RF4Ky9tmzVaq2+7jL3s3yfll6fCnlvEcqMldsloSspusTYozz4pD0NzNgu0ntBcFekUklSFJUfGkXRghV1XWaz94zjczWcm2RaqggqhoJJgvv37UlRBW+3q2YEMLLLTce6h2AMyZpEC667lkH1MPHqmN4D7J40FVHorWtMqW0D6JTLiuHEaYJDJNJYSfR7Ux5ySt2W7N993kxXQvkZRIUFcGxA5SQrratApSsnUU9iqahXTcgXCPQSNIUAV3aSopKiB828VQ8eyzZirrRMlUcOsbJgkq8imB2LlFqquHTTl0hI97e0CIrkrTsHmwtLfS1kTdg4MXzeKdaCUggkqq3VALSNLXDnSC260eXVPFLqZU5Jm+kjzF9aqPVwSIRkRV0tpDpCgZbUrC5RHoDkw+BwZJbkKpuG7BnHjKupWcJwa9jAhdEuleBiR3X9NhFv6j6ec8TzytAas3DZ1AixmNliiF9ivjJW8ivL2RH8GIVN/JOE1GwP6ffCC/EFxzO26zbbzFus8mLF68ipt0s5ZuXKqgXqinwo6tgbjEh8oeE/3MWVhSa1DJTpIg7uUGVczyuwza+1w4YnqPrebVeKQ/0Sj6lKTHSSQLVSVSPxJKpEJgX8zDNGrab1kzVRIhAr1RFIB2e1uwbKJr/I5WLUOnssXMhVQJaXCLvEldIf1qWqgqF3sJe7hGJCOrJTd/bGUkHVntSU+sswrSlZBJRu8AkCQfgzdJKgd2kqSQ974e9uMdlhDbjmYXOZnCcoP2yTHSA9BV+kLhXlvNLS0ry5tqodHjxZHjenp4aozCav0hkGSt8jGyjXvVQVO28SARC4P5JK3mAsV90ygYiFGs4t+kmo9NwwcQ0aZ6oBpbHSo84DfaQeLZ4sNWHxd5UqcEg5lQZIqqVtbTJocKqV5qErzeyR8/Py32YTeQaIw603HNiSlErBYLoKpMbjv+1DSIryG0ugbbOa/ZiU4VgwnEWa9Qi5YpAapigzFK+4LrCIyIPePYOOU4sJcnT9Wp2tOLJL2JRrl7aqhYfLc4Efa2Hhw0UB0peTcy1KaywzDzXas3jOZrOTVltW1CPfRqTlV4B9IqmqJmV/6K7FbqR4CEw6NJaSZuj3OkHbIW2k46wtAtg4I0k1qoWrN5OVnLyrN2N3rD1i4s6v0qS6oH7wYH8pTkUrNOGcNUPEtQ3CqW4i8f8AS3FFXUjHUiaNjKKIqLTnH5JkCrlJQT/WoCWFot/G+smfr5G2PBUCX4ZqJEQeztwspSDm7uniBCHkLCyNGvDIeIlWyAnsNQr7R9vbhZ1ljvJnluq+ZuKnVWaTfNenGxTVFtBbqmyTIEF2aSTcRNImpjfbfu2EQFgdpx1bN5R5MVHPR8ULhJV0lILsm7kHxjuAUhtsSI+jltswVBzGrmn6bb0ZQ1cyEYz4dVrIiu64kFT8A38iVngxRSjaheRrz1a5SZtWTXj3jF3qlq27bEhBIry3Ya01cLoiIpQ/RkBSJR6dSzS8hJVO8Zlo8osREFSJwW1VwRAQ6Qnv2jsvOyyzES+pxhUL505g6Yl4NYP44mSpObVesrT5Lj8+HEW6in7qUWayT4Y9kJqsF49glqvLlREx0jEdwiry7uU/bwjHhPPHCkrFsJd1JA8BIBTZqpBpbrzVIBEEivEfj59uDIkhRipzMqpW88LVm/hI6FcN26Rmog1uVXC3xXe1geviAUSNgtxJeEgMcXCspuVqAiRBtGLiB2A5QagkqVnmuv8AjxVXD1Zh9u2ts8WAudMR0Cqm6mXL1YY0QFBRU7d2LPE5bx6DoXz6r2yXpAQK1sJ34rVSSjORTvBERUAvBiYpZCSGPTcrvFFU+hBQeXF9RiYNSaKKhTCJuRIZK3KMopBQVkKkSIkiA9yRj1YMVZVbD1A4ROHmKafDINw0pJNc0nSBiFpCuJiO4Su5wILLN2AOQ9dhf082CxS8XFUrTrgMywj1RMwVi4Z2SSCqqphvMnRiRpD5d13hwupJCXoJHV0SFRrNdtS8wLat6meKNehdJu1eJF5CXaq7B/pZi7KTMI4Yt1qIo+BXTA7lXbtwUmqau3eP6rArdP5ri1EYyEoEmhncKXHgRD5d/P7WJoUKhYJs5j6HxQpuBAjXZJAOls8QF4/HbhgYZoxSgCyjkrgiu2l3ynrRz6sEAvLhEtUL/MJq3h7vw4jXku8VecGBvnzUCsQUFVIdXwbTVE/dx1Eunkk1Uc1G8bIKb0kE9BV4qls+16QS9oVSPy4WjY6NkmLgJmbk495qmkOlHa9yXiuBXmPd8fViDWjSpOjPUqzUFRs6GUbz1ZUxJyCLi9ulH8L9VKwyECXEy73lLbtDAVmp6j5aYcLMASjG52CKGgSXvW8ge5gqZnVWzcC4pVm8k9NuX2DJwJJF5SE8QcbQtHyVIrTEpmdCtpYLzCGdxy5H/pbSC7DVipaa3IbIdLYqin6kFNMFZ5mTfzJN1SH47sRLp68i1E1mFVQK6KpGICKpJGNniG3ZhipEouCsGhnIqK8nDK3b/Ztw1fUlPME0VpajHiCbu8mqi7M0tX2du/D4erR2pO5nzV+h5yVcCmiNQ04qRjf3rpUQH3rcLTFWzcIjxj2BbOW//OWj+4f3/kxQW6UCzRsmYSVTs5iTANvumOFBSy0dEJhUj5oXhcxw7feAsVy7or7qVqa55MdoHE/Ev/NxOMc8KbXIQcRqo+a8SxR06Xpt0P1OvIUvKuJpffw4HK8VyG6bp9dPxC4/m4lI18Rgh65piUt0niCV/wCtVAcWAXrNcfq7kfiwEW+SjNVMtCeZpF5Tu/FjxZLVCl/EJiPVHyqkli8XSXyCNyiRnycuG6jfb04DKeWOZzMu4kiSH9m9PEs3pXNdqVitVFd4VSuxf1ku6qcpEZRnhislZ7OK+1a143U+uP0lB6rduJJN5NpF39xDiWfNRy01l5Q4xoTk4587RS3ELa0iD3SIcU1bM7Ld+JM5aNXt6hdsAL8RYI3EHaKwnap7HLhq8SRej9cZoOh/aJXffxa06vEKD1TnlA8BNzE66Cl28WSX4Vdnw4ocqjCJqD6mfvVx6+Jaglb8JljQrijaPkStXpiPuPqFK37mIeQyoo1f0KClGqNFPRsuTVLaeDBcFVkKWWVBkp9QgZMRSv1VCMVTEPZDkxAvknMo6vJyWiG8rkt3z3YmnSqKDUmxTblATv1RSBXb8fPih3v2rpQFVrm5ntQI7S97GHpaZqW1NyfKO5WAKk0pRmjKAJsWioavDNUklySAt++3n82NWPcucvayypL82caDZ9IIAu2cu36q2rtu0i1SsSIj27tuMmUlDR9Rz4w8hUzSEZkG5ZyJFd5Rs5yxtagmkPT8ZGwTVGZdsW9iVyzNVMlPeK38OMh5RamnoTZxtkhId3dJbfgamqa1hzr2ofpIOL+nKDKOgEaHzky7lZOuXDXjmrly4+qtklStSBDh1RvSs3EV/P04EecdJUAwNOay1qdOQjQMEnjQSIhYqmJEIAqYhq/ZFcQjt24v2a9ZOO09mBG0fStPwMQUV9WQTevAbOn1pW28Urs8Ng3fFijZrK0nFU5G0tS1Trq8K4NV1CEjqC1cW2mXGWjr3W+xhlZ88MGzqZC8Woh5R/D8+lI7gLcnBb2ihUPoDdsIsc48JXcmPEG3GjSJEmg6OjiT4l88bLrKjcKYiJGPu4mpq9kBIyLy0Vb+8tMrR9kxxE5Z1G3H0JRcYxbR7xFIyJ2N6qrkzLaReC3E5NszgFf7bEFVCVS1QUVSO0rxu5fNjN1WDnXCFxOWo5EhVRqqpTZabCMcxTxFwldqikKpj5fJimERqkRmdxH7uHEpKHIuiMw00wK1JOwdvwY9EFGjIN/W3E8Dd3/DW6tnlv24fiGWPQlBFIkRctcgs08xEUZylKfFy1BxYCixCYkqFu0kguLd5ht592DtUP534OJcLZlLwcii0iwcMIZ68EgLcSXdIJEq32+Dae3ltxRezj2gIfLdy6pUYiKjE5h5Y1qhcAF7FJH1ErpERcv9NuCrWjXL1lSLqYQrmk6gJ6/4dqTlB02e6VglxCRKurDS739LzdGM5Xu1JVeU+Gnl0/em9Nli1IUHaRarSTwnKTAmzpuRmCukKqRbbrCO7Zy27MTDqWkmYunk3Dio4cWcLHoPT1S3iXw2YhqhjanelxjCL4tYBNcSi3TVsCR+4Q7cQditRow/HUDPNpIC0nkkvKCKRhcRbABK7lt8XJg8GZh0kgyLUplrLQ88RM134w0pr3iKiqBJCFuwLrh3X3dV+GbyqJ6ItZwlYaqit6TpsKpLoJB0ABASpmNmJCpKXfjINVaBoGcUbpJWLrvn6pGqftK6QAPuY8nBzcQ4YuZk2bZq3sVXHivlLmM8fYCHKvubNQ7xL1Q4RkmEwxY8W3ACQUQdKkFnMdzgR3HaXJ4sQM8wpVJT12Lx4SzhvtTdoDY6VutJUdo917hcuL44qpaDUcIxNGRk1qhYPEwIPNh9QkaQ2YD9VLuXUgKzqEQiiDboIGr+Mis+XF7GtVEpem8v5KrZ9vTNNTcG5eOBI7nMikxQG39q60gu8u7E1TsGjR+ZMezfyiUgUauDhRWmXBPlSVHcIpKtyHffbuA/ewOhLBhy+7U2b+WlPN6ZomUiIhFuex2hCMyeWXcuqaV5+9j7VC9Hs/T/AEUmyGS+mFETsvm/AfRVXL7M6hAY8O4SfzTBBAhSv2gKri6+0fLePViKzC7LdT1QvJSUvnlIJRIXqlxbXcgAea4UveswAckZTMrP6fg3NTZxEnDNWyqrVMX6C8o8cXDeascRriAjaVhaQ41jVuU4lT0ko2rOvJd6kFxNineFSLxd0kkKQ/BjlFxpwtj+j8/OTgTlzLHkh2feAgVJiEbJPmrcDNWWVG5JXdb3QuLb/aC4MUKuqPm2rFmlCUxOKCF+k7VQJUVz290ItxsDq3EWLI8pKSkqqUZuOOiuFvG1d+SrhINxbicK+XpHFIrxc6cnVGzyskFRtB0gKu62/nBWxIgBXb04b25x510YuSVlS2IDqVTmqefoIqORBVAthElKGDMlfHaJkJn8BYp6Lp+1UvSMUt1u7HROjeXLPXhK3l09OHDdJmqsmwHVBRbqK1Uy+AtmNk1IA1JNp5V4njzn1lyv5hH9L5cXKB1uHEGrMBJXeYiF2PRdLtmq2sHN4brvlxYFHSMM19ZPEZJVNL7UmzXaIeO67FLhK8RVZqCoGwt7HsO5XTvtBQUhEL/fHEDH8A8cKFAwgpOlRtHi3ROTHziICIdPXizLS2Vc8sIVAFRoCd5JKIGF+r0DpbvlDFsaw2VbNNuFIev3ImNi5PRQQuVPwiBCdmKxHoCSkoWPg4RDTZ1DU7nij3kkkh3vwgWLAzi6P/ShxNg3d63P3+ccTTGSYRYqA3WtENiqQ9J45RZhKOFFrCVLYdw2CZe/j4OlRIlHxrOm45mJykazK++3V8B+Xow4cTNKsyJFuzSFP9k1Ld72OZBrTYvhYP366j4zvFsJruVf9FuD4sLIxDZDUA4pUi2A3VkFUrT9kf3sW5qqik06miiTURa8SqSvS2amKvvEezEpFuEbieOjciXIIkqBfFhqzVWZKfWrV00kto8O3SSH2iSIjw+KU4hMeHbaRGF2qkls+I+n3MeIprwininBum9irkrevlH4b8RqNCg4eKPGpviEzvuJULB9nox1ws8qQ/wqSY2/4M3/ABYrdRVadJN7Cknkg+sO1kW4yPzCBCYDiAewvKaqCknL+LWYPJhsLPn03a4jv8xbQwJMv389TlUktQjaBmXMfqulRJIuHsHnJVVUh7oNu4js3cxYrla19MV8sm2fs9MgcXpIJGqW8+m33vbwX8soLs/5Wx7eV7Q1AVjKVAqZWQyn1NqIFyHzJKn8weLEndDcT1SRLMgKQol0n2i5ujU2NVVf6yqUpt+CTwqeVdMWt4W39/bY4VDaPdHYN2NRTlYU+EGxYPKYVXWVAHTCAZPHTl0uBiPeulTQvDn6zH3sCelZNFpANQyoykq6LYxrlw64+NeM5fU2iQiJpEqKQj0JBuLw4vslLz1SAorRdITUe0dx38Iv1YtdmblX7W9Vd+kgl4eXfz7Sxnjjqyhii3NZCRocZkVozZx4nMw8LHk4I3Tde51feA/ZJCkJXleVtw9fP14EZVktIuEVlQdxRGkBcMoao97t3EPdHZ5duCxUjWei2rpnVElFJM2iQKjIMWBvDFI+9+1BLSMtxDaV3kG8QwJSrJmSzxow4ko+NEBdJKMF0jVcHyKpFaI7w3WHd5MG0xTBUuTVHqLN+pmVXC/qONgWaKTi1w5bQySTx4Fu8CS1SMBIbvD+DFvg47MFrS6edLKek0I2o3RpCjACgLdsdwjYqlrierbutEBO3AmzSOmHjhaofWUgSj113DQSIkkjt+170d+HeQeY1TUvPlSrCuJWn4Od+rv1WRoJHZbs71W7S93fg16mDFrMEVa2+coLTNHJ5g1dNrRdNRaiUtGxYaQjFk7eKu9pd+/Mvq+0wIh4grbw5eQLRMK1tCLM2ElGuYyoJDVFUhZ64rq+DXt0rjPpvK3rPDNhlybSMWd0HVq9QR80uSTWZYaWqql/hBEKSpK84KjcQ844RlIuHZvGswEkTFvD90SQuldW/rHwcl1mzGfxiSulParEowzmSUbvKgoOrCFklaqo0FBmhZuK0rCE7dqV57vNbgJ1NJ1tT84WuwZs55xIgMWg0mUkFV2iviQSuvJXlA9UeblwaK+zOjVaZRZ0awmkm/dGk59aLuS5LbCQu3pcvPpb+TA/mKwqoma2hPM4+PVJIQXFdJsCQBuMCQO49xkVlp+c8EicNqG8ap7hBhKSDjLqo40W0k9QNURekAmKofZXEAkHx8x+1gdzkktSoqfSM15l017pWLdtWsegSX6IhFK4+a0unFkcOqYpp9MSqtKuaTUcLhw71RU32qfMe5JWzefTZZvwHMwHkjL1RrOZtKXbqlroE0QVStA7S0hFwN/3sNGmpbtqjKG1Xun836PYR6x1BQcROKSrgDXTUagk3agAfZJDdxB+1qiHlw+p3tEzZ1Ep62pU3lPvT0PUTaeetGt9oiG5UlQAht+bH7Q+VEHVKDP6IQNQVKzj3QPH68TTT8lSAf8ABSdXWfC3H2sFPKCLr6mqqqyeg8poOFbvVQXZjPgq8esbubhRO47jO0j2eDltxW7kBLSrxkaulaZGyVIRbhzGv5H1DOg3cExXq1rcrekJKgJW2H3oluDmuHxYHc9TUVSVrlem5BVi0LjSQGUalpWJEJkLXos23lu34MjrN86/cOH/AAdwxggkvoJIaSSvl0rlVfa5PYxSakGKdOhm6oYa8Sq6BrwwgKSqRgBbSVuI7SMfAXuYBYd7y8U+ZDHKOoKtnpSN9WBHpJuxdpNZIqrlGb11aG+4jdWBbu6UgIx5rRxH5kZ55oxE+s2Z1b6vYGzaKtyi3gqiQaVoXK7lbtpFvK/d5sPm/ph/zlU/nLAs4xmMU6AlYZ7xirVSzaAiqCRbubq5xxUEYFzVtRllpRbyFj4du1VdTzldmXBkrqqqjcqqN9w6ooJdfLuwzxYB4pEvjD+Vypm8ztzLmYNxCPa8l3MfIJAkqJK26ggd1t3Pbdj8yqhqTm6vaMK0GXKIAFVV04sBFUkgC7mMtgea3E5mlUCzyj6ZpWWqGP4yCiQFJi0iyvVuVLcquYiCWwuVIlQKwLt/LFUVllU8iKb+WqCMoqJdJJGEpNuibJLgZbdDqV8W3w4EJuI6VoWHBNqW1adg8wWdRu4uOy/obMEWcOy4Nq5FB081UkitAtg2FZy+6Hhw4nHrNhrU9Ubko1wrfrocRwypJW2gKo85+zf7uB1CykVFs1qYpLNmlSTai4Pi1+KSJfcStyq+0LrNu5Ig6efFQnEqedSnq1daXk9wEq9bPxFvzco90N/tWe1hW2EDS9ymkWlQucR1VHSTNgMx9KI1x9YSSV1UGqXgASMrDL2d+GsfOUfFotZJ/wCtY98BcsS617ek91wmHsni6C4y3VapwUzKy8e1ZDt9ZOgLXO8r9zcdU/YLFfmMt0VVlKhhp6nHkKqYKpcDxWuIANv6VLZeYl8+HdM+0QxcFKKlhxopNEueFoCURTft3kuqJ32tl2ACavLy2YqM1Mw7ipOMVYKE3S7pdNUCvI9w8oF7Pw4j5acZupK+ENVmmqWlcortSArfBvtxNrURTzenXE8hmDGuVEkrwj0EjJwaonbbb0D1avh82PtW41pEU5ttMTQydJcRLV4/aunlHsJUVmSQcY74jS0kjO3cQW8xkONEZHZx1JJ0+1o2r8vqPl4WKAGYyk7KJMVWxEPdXE4Irx5eQOrbjNdBv2yEwTN/WDymmroLVXqCSqoD1Dqilvt9wsGeDdUHES8pMUNU0rPFCCKpLyUIwVQQ3W6oqqq6tt/gwqqRlhE0Y60EIEiuUNmpSrOQqGBWox5pKt9IWzw3KBJCRFpcpAfSQb9ulge1RUdeUXGt5V/KtmyYK91xz1q5V37rBStE7ebo24no3PM55F0srKxFzdJIXTZRg3bEvf1pDrkB/wA7AXrx+8l5oXK7xdVHVMQ4tICboHbaZWhzl5D+bF1E0MdQpC+JCUZKeRzdnnk0o/KeQeKKod0++yBLaV5lel3u3pHFBdVL30gjLTz6VUVXMDXTMdBdv7NuwsVd4lpIo2s3KA7xIlCuBU/LYI45j2rl86FswAiUPZby4tdJNaOjgElNUzFBUE8zhxlWLEXCoXOXrpJBBAOsiVVIR2/N04P0DFtqLjo2OjpWnkGrgdW5y6QJ5JnfddvEQ0tqVgX8/XjNTxm5YOFGTxHSWS2kNwlb7wYkKXZyr2ab/R/jEHKP1g12iRkbZIedfZvtAd2AnWsHUc6GaOpaZqbImYduBB/FVQlMKhxXFoWqpJB47QVVvv8ADeO/AzcUzmdQ0wij9BlajbunQJaklDG2NX4Fb7v3caIi61pt1Bs6elMxX0hJR4pNylGjdUjXA9wFq2mFpHdz+fFPmoRm/TfOarzIkyTbj3Ci8M/FIQAisHVts+7j7TVJAMCWcfb1SVPRdU2yfa0zQwtiMNqST9VK1xfsu6wS6bbx9vbZgd5kSMl9IloR6tHkjCfUgGPakgkh40rT33Cdw7i6DxcIl/R8bUCnqtyT7VQNJqSjc+FQM/0okDoVbuYff9nCJS8JKIzsPVrBnUbw2Tgo52m9eEqL2wrAG9Ub9+64gL5sW1Iou2uC0UiQp9CqJDZ6Mdek0/CGG7pm5YPFmD0NJw3VNJUfCfXiPdOmiVwLrXeUriwIDEy6FpicERmm8kqfFECrkVPZ6caz7HlA5cM+KzClKwF9MR/D6DRok8EWZmO4VxAR4jmHaJW7MZAeCFwrNjRIesRwaOzLkatnNNvHhTyEbHwSqTp4sm/BJ4KW4u6St3cvMRCA4OcbEmll6ktRLbDt1kUwU4l/CUqMo4vSNyygyHefiS3Wee48VlRxk4wjVPUdN+sxaPFUlRhmCS6qDjr2pXGGzDfMqmJurGalU000j4aJZfWFXMfFgq4sb7gFV0ez2x5MBVHLyVDMFqjQddpPpY0AdAmhMtWbhdW23SJW7YruHaJWFb8QAhyobTuRkHNzLeUqtSgIQ/Uso33Ok14sl3XKO3VMuby9OGc92k6NVpUYei6hTjpZJ1wZyCpN0idBYrdek3V8Qhz2nt9rD2vK/bQiaiVX5QFSc7HoCbOQUlNdUwuHcuIb3AluHnP3cB5Fg5cST5aJfoLoyq6rpVBk1NmeqruJUdIRPq5b8Wt9EoKGncQoT5tVHK1HF8f9Cl49gDy71kv3HFKn+qQtH4t2BOi4NIhMFlRs6ksFGvct3DionAtqthpF89IyQbOXquqgldstVVt1SHl+9ipVplzVVFsWb+bbCLeQG5JQLSD4g2YZiIBpXpI0dnvLdtXT1qtTmZSbOFSXSOoIB7LcI4dAPMdlukYl5iLGqvRHDREHIM8o0nMqzdKq6SUfLNdBq4/SgXD7yL7uPmxH1GjxMatKRqS7WN5U0ABsqXVvVAbz3dRXbfDjcuXuYzOo6eb1gypKnoOSMuDVjVGCvFLpWbCSJJIbx6gHeZYU3JggIXSRLRZqWqKIqSoHyLmr40WIpBxhsXcylrr6VxAkPEEqfvbQxIRLB+8TkGFPzzSKTZJJN2qTtdqmAeDcZWOLdwhbimVOs7lpZRGk5p4xkHAkKpMaXNJIHFv2S4qpavIP6K0PEWLHC530rl0snHpN/pKpG2NXibSCdLpXl+nI7iAC6bQEsDsYe8pmJwVpmctWCMOjK1LLuo14ysSF2s3BTjlTHeapMkisAukiv9rA0jePp+oiWe8MWkV/EkvdqtP1QnaIAXVbpX2CZYMdW5iwS8PF1BKUnByDd6rxxO5lAGOuADuFIRvM7OXeI4FWY03lcNNt6pdNqeFmKRuuJj36BOkDFXYkLNVLeNm347xx9ABMtCqkcdaqaeYNGCsmfq14KId0vqES4EABdcqICXxWX4FMxltWGZc9rMK5ipVjaarVVy6BJUQ27dIME6skFuHJzA1UUKpJJA3721U9/OBCqr+D4MVd88koZxExrysHL5biLCFszFIFb9ttwW2D4+99zDpoTAdSHKCFdcZVTFBptwfyrFXVK0rTEhQPmsPdze5i6dn/ADuzEpKuGKMOiM1xqSUaLJRnr6QGQ7kErhDVsHnLxnfiPzvqGEXWKm6aYRCYsi4qRUETSVFW63S70u9L3CPFx7GeshUtRP4mUeFLKxarUIli1S11Ui3aorqjYFpjbbzldsxXV/ByIxX0e6tTVv8AROmI1FjHU5IRr9awV0GjLWauURC4lVVW6QpcpW91diMoDLpHMgZh+6NjHxqyqqCTBPhSdKOOXSHaNhWFzbsZ8kp7M5GFlXLDLFzCDKqmg1m5BVVeUSO3kFC4rLv5IcWvKyqqGQawbB4zduZBuIpVK7mHUskrq38rUUrQD/c5cL2acQ1ErSnCAJbOFnMRddOsvcuqDppi8vapNWNwu3CoWiSqS66St4brua20A9/Ayk2EvV8o1il6NgaVhWqurNoL1KJJLnfvNIdW8Ng+EsaSd5gZTk5kofLCEfyvpZXi9IpMdViV13OqkuJjs8x8+KgpmDAnKFG0NKwq5Pf4xEr/AFVVBW64yB16uSDnG09/jxeLvQWkV8ASHcgaWVDBhVXr1WRdsaXN6CSormLMVW/QSBKoDelZ1YEdQMAiJZ5GqtrSbr2pEKuqFnQV3WJBbuwWK4zNqGnPW0OrlcMYQXjxpGuuKSpbRMTMR/cwEVHRqrKOV1iJQzvIi3XYOET518IgUgRWlz4nqJoiqsxpwabo2H9YSRpGqKGuklsDnO5UhDFV4i7Z1YmKZdU81lkVqrZybmPATuSj3QIK32+IxKz4cQgoSR5n8ilKdzMi6fQp6s6T+pJPO/bhOOiVu+1Q4LZzh1GOC7PUDk1mNUnCzb+oKzlGSvCoIRYukBELeQl3C6rfaQ27TSAj6sdUXmBQ+Z/oa+lq/p+EnFY4G8MKFXvEH5Kqpb+KG0UgJL2dx8heKLWpSk0G60E6rCPVlIxqbxBlCVAq+3pDcBCJtf1vPvH2hwiqDe6enHTiKva17lHUgwRZ0nUD+slmLlnDyIMBIpRVCRVNLk1SMlwVHSVGwUMRtUVPTbObUgpRsrBu3ccAM49pquUF0lUvtXQJCkJ3AVwCG8T6urFIjKwp6KbrNKxykqySiZX+MIKyxtElVRV1RK1K2+0t248R+Y2ZDMhg5JxSq5KN431WAqmaDdIBAtIQJJW/YBD17uctxYm3SkTnTirSJVutKQgYSDazDNyuxUP6vwzlkukbw7iK5IVf0QBbeW7fZ4sFjsb0/lXW9QylMVtl8rUEoaBOmapSYoAKI2jpaRGF5XFdtuxmuQnpKbcN3Mo8VXUbt0mqV3SkkNoDghZJylYRNReu8uWCDuoI+9XTdmgLfh+vcqqO47rberDZxuQxQe9abzSymyRy8WazbDKB2+TeiZNVG1UmszFwl0d1vLdbtvHFqUzKbhl0iL1vUMUarc4tw7aGw7puIkQIXqiq4MrPfxmqm87cwhXb0wm2oMZL01Yk6aw7mJ0lWztW0CMLPq+kW0T1Tv6vPgzSyLxlNSDOpW1RznESgP8AQp2EdC1QcaRXpCqAkkfNbt8Ow92FFUw6BatSsaAOdVVCv80aIum6jh64KjXD/SixJJIXip97zKmlfbzFtAgw8q/MGJrRu1eUJX6sU4SVNq9QdxaSgjfu1Uu6QO4d27bdswSZuUqAY6EfTtG1LJURDum7r1hJOl4hYHBWWd0auqelaXKQhze3isLa09S0s5gZup5yQb6vFKJgzEElTVtbpCLq7S2bQICI7Onbj5jtlFXAYyQudVfmhBQ/q6rJWadweqk6Z1J9H11RSsO4B0lSBL7111u7DWn88W1GzRcdXlR1HDuNVUEiiRj/AKwYWjcQqltHw2kG3F3qaWzF9TjMU/Grwr5orxS66bdJAUAAfrAkN1ipcu0QHl2BuwCZLM2JqiURCqgfSqh6qryUcoCuQnaX2DO5JIOnnu9nBVMPWNwqBFBMq2dU24cPpIkWzqSkCcd+2meJETFUS1SG0ecfPZiz5B5VQlXrSFZ1ubb6KwSCpOGxPyQXcqjbYI6QkrbvG87BHzYgWuV8DIvm7OLzRpxcpNJwq1uVXHg7AuAHRGkIAqfLtu34OVIjNqxsDlq/qSMOSRS+prxaTXVbNEgEQ1UlWZAru6tX2sEvHAYiownqUPB0Cwqh03Z0+zpeILSVPhEGYoK6oBcklxTq49xY5YMK7q0n3rGqqTaVAq1VYIR8kIE/a6StwgKqttipEO8hGywj24kvobVLJw6m6yeSrNi0eJJISS7pB41XMB3h9VETBey2y4RutxX8xJuNpB4U9SsbLy7yJe6qvrKOcJJEd91xDcJpJc3XfgZoZFDcpShtVOrTMuYepuIqspVyUlH3xa8SgboWqRpXDZeDyy0rd+zyhgPER6ew7fMWL9V1ZZVv4mQZ0xQCgykgYL+tnLxW9qd1yqQpGqrf7RHgdrCiunpL3W/Dhk2MEMRKJeTaKT3S5kQ+1JPnP48SUW/B4mRtdAU0topjz4gZaMBn9ZQ3J9QkF2HFOxrcW4yLrmv2jhi401izJRpnCzVd6bmXEDPNZJtuUbq32qIaqRH0bbhv+LB5KuaSGBbuatRp+TkDsVFAWr9J4xPStt3qlqgN3LdZjM5axKEd9o7LRs3YslM1lPU/NN3iBrvCSFVBuOraaRn1JbSsL2cKnaYXU1km1eJ024WvpzgRTSVVAiaA6E1wPkMtUiAOXpEebFe4PgO5QfqriY3GKZ7B8m8cXycauJueRcqrMYpN3ZriUjrqpbrjVVvtMy3Ee7FeqiZcqyjyEXWZvkWi9iEikyFK4AP9l4/MJYOacLYKDdbHeq4skF2sbZzqdRDiX1oqURj20XFRUe4SAElV+KNLij8ZapWB9zb04jFu4Ej1kiENxaSolhQW4G3ReEFqLgjHULk2f7w4ux26lWJatK5cA5ZSAraJEo3I7VEFUlQvDwluAx+9gtx9a1DWdAOKfrCsnPAypg1bsUHrNtoGG0DVSMfsr7OtLlP2xGT962KIaw6AM3JX8RxKeuKoGW3StPZb1bQ6ubFuYyKwQv0YZepYb1gkCTpaQBVJ0zMOdUS6BL2fdxBzUIokVWnmX3ojZqPh5urWkHHybfiBfSyGyzxWtSVM0i6Cx6pMtqbpyWbgwzno+TTNK5deNFwQJHZcI2qhvu3fzcVSejnjV8s24ldyQHZrircJ+yXXiB6uTbhk1gRDuWeqSEC2q/MVYmElkzQrmBeMw71J2MCkvv8AASR2/uYYSTNtUMo6lfpnToqOFRDcz4EC223WANgYr0Wwm6hdN6ehGDx84cH3TRLcRH5RxzNU/UNLyi0VNxruPfN/tUFw3DizL1bvqVGf7KdyEAswbuD+k1NOSbl9kg6AjL2dth+6WJqi8vqmqFm+qc4pMoKHS1XipPUmxKB4ECPnV8oAXs4Y0nSlU1QX1FmuKYbQUJqZAR+C4BsH3tuDA8cLUVFx9PVVTDtin9kq+GeVtdWndypESQDaXLYXRgWrqSa7MdyYUNMLuotqrMvUeWnq9H83VNzjNwqkaDopt1r2hbb3RAKQb+u9LEMjOTcCBMIGoXwtTS3i0VVQEg5jHDFwuDWUUBJszIUnGqApK6qRB4brr7fn3Yt3513jMlnLikqV71A0mCZRYJChstuAkrTPp+1uwKQ+lOJQDUh3NWSkopIqtlRFU+XXVVt98yx0zerRKmtFuXLZQ+oVf52Onj9y/eLOVVkOIVK9UhsHf7IYakg5uv4nk6RwRItpIBG7LeegX7d56ry6fScg3juIeO16lSQNJwF17oe4E9Kwd6V5W+IMDaYnqhly0ZuYfPtI9mq6NcL/AC9HvYeIRbYcv1JhWEJcjeA3J3xFooHbcFyXXdcW7biuEldbzeTfgaI4EWKNa0Cmkm6apWg61STvDVFMrSs9rBpp/LKk4Z01nWHHEpZqpCurcKV4+zutwM6UhqPlHhPaznU2zduf8SuMVVfAREA8vs4Mq+YlEJsR4efjxRSEAt1B2h7PPhbeXagAFqll7SLt7bUydfiupzLWoKllI2dh5QhfmRoJJCqk7Fe3mEmt14Yn5iBqaktFhUbMmro0NXu7bS6dohdZiuRU7TNXIrPKdnXdrcrVbdtvuqjhdaJeCXEsKkcgp1Cpbu+DGeeJ0sBp6goxTcIj2rSOUTozb6JjaakqVg4045uTqdj5RJB+1cClcrrs1XQmrvuHaBeMd2zFHreNbKyUtMBKoPk4/wDiqqdPAxXfHaNiooEQ2XGRbvJvtu21fL+DzX9dfSel20qRRpXKqIOibWpXWnuDkHzcmLlNZl5lz0aNEy1MKzka9cG6dChUaSrhfqC10lvtC0ua7Damb1JI+JAW5KQ8zN09/CTCYEm5uDaqive2ucGkVjjS3JBv26omNtt5gHJiJmlYd/Hi2dMyKQSAHDqQaMNVveYXBqm3Fc1Vb9pkJ9XJznjmUOqmES+laZh3LMXCSQunL2q0FwSSSuuSFJ0kJnfcN+wuXzYpYv65SJPijeMUwEADSdJICrvuC6wRA+YebDVoUGSi55/STOUj42Wh4z1s3SvVSEV9xmOqlqq6Q97uEQINnSeOZAJJdRrT03TErCs+FNVJsuqfcbrvcEujxYvXBVDWjh8zCm9eYcK3vZBk3cLuEju5tIFRb/Clivz1LrUa+btvpsg5cJOg4htpIaqF4XGdpkW2znuO+/F85jEFUIwORKJ+jNPCneSLkvH3+Hzig6bCHbySTxJVZwqaRNBVLVQs6ivGy0sVeWl0RknTB+bkYe6zu9K/l2Kj963kwxUjakSKxJZVdNLYCouhICDo6sKH7e+0MieTVipad0xWkFqSiIHJCGkssm0vHzdRrqxzyQJfXVQb6ukrdpJDagR7e9Lb4evFHnMlqwpemX1QhJTjFFJ/wYqizXHVSIy5lTt1d4jZpWh5tw4rOX8c8nHRQNWv6gbR7QSkmZMVUFSSd7d4pK8+zpDeVuFFpQ6fbyE2wbTDGLbulWbh8m/XSbqqnuS1RBUtIiDp/ewcwLsdJakC9oLUKY1AkiqxZ8As8fEyQV+qSTgtzi4rLCArPD59mBzUszWSUgL+oFmK+qkGqog1IRS8tx27ubxcuL4ibBwo1WcVDIPlJBA3qQ36Rq+8YleO3rHoxEyEizVcIyUG2QF83VVSXbECqoWcoEQh3R9Q2+xt5sMKPNa0voZ/Kd9UkY2Nnm4RdVRbNVms4EwtkkAK1UA5hI9iomH7vnxHlRs0qsSwmiRKnfuK3fhTj6qgaV9QunKqsWqre3QVvEmat1143jfyeezceI1vUMwlbbJK+yW4S+PA1WL5H2BIujFsR7VPhpCeAr1dL2b7sE7K2moSZL1PI0MSsg0E3RSSE8bEEkg6lbxVAPgxUaPzVZ0z6VFpmjIOecWGCSzs1RJL/NXEkfwYsEL2hZtus+YVQ246mZ9gbB+yaOktUGpdN5iRhZbdbgQQq5ahFEOE0I6VJZgS9WzzFSj3SJSrWHI+CGXSIXTVLaPdPEiQAx3jtIRu2bMUVjSuYvqH181pXjIduqaDpQiVJK8Ld69ivLeQ7sIQ+Yc1SSb6KoYaKGNcKuP+MI3vV0lf1uqJX8t1t1g23BhJi/lZNqTZWHQcyRq3pKMmCXCpJAXe7ldm4Onbb8mG4sEG1LCdDmXLOXBqtJLS9GPklnqoBaxFVAEA6wHVSV8uOngsxlHTmOZvkGKrM1zaS/f8londZpcvitv5NuFkatczbgXiryNEWSXBNS1eDSJJIu6SSst3AHUZ39WJ6onhxZeuJmKVXRO9Vddk9VXakqY/6r+m7FxE4G4VUIie1B8QR1FLNK3xCOOrdX0kA2/FixLTcU6ccSEuNxnuRJK1L4bcdqK0y5t1TZFd4StwuKoIS2pmLMx3IeS0Sa92kiJFhvHza0IPAPESJMOXpIcTcwCrCX7h40GOV/SWGuA+0PPivpyTNKdJy6bNnyInbaNyQH5hvw4awzWvTqQLvuctCs8TJtpRHWagqIgVpCptwTizfkpmDUgavRdPhtAUibL2pEAdKqXJy27ht97FGg5GhpvURvdx6wfo1d13wDghZaVrSWXUo4kAjIqcWVABSUkkFbmv8lyhhQT2U5GJCmuR1hqUpJhF0fQ1QDoxbMVSBDiFUhVVSNLx85b/AHbsKU21bDLJsKcp6qEpAyBJJBIDvVO/ZbYO/Fwkqjo+ZIXMDMIIEqVgx8g6O8f5JXSILfKdvv4q8xVoN3S0CrFVC1UCw7W2krbs5rdLeODGnRMUodYcAoxV4Y09PPWahi2Ztlo/iDkRczLJs4FJLduQVIT2bunFJZz1PTzOWZwlTpJOJA9IxSVMXhbdmh40rucR+XDEq0hH7Pg0JtdR8F4g5eh0HzgQ6XL5QMcQqhP1UXSzNnTkqoCViqCTW1Wzxj5h24takG5QIR0xULVVFStGi3N+aCqbuzSIdqvJdYQHyFitqKmX+AObR3Fald9zChG5IeGdapaRfZKnyn7OPCRiW7m8uLBNoC7UUVFyOklOQdR5aU4onKr1g89dNFQVaiUcqkglsK+4gITuHbZZjqaqWhnjhS9yg7uECScpk6Id1vV+G3ET6fV8uTdhUCP1MDtVXQSEnCQeXoP3sOFqFhxj/wCBqkVITLVQJ9DWpGl7YJX4cNjbzHSRCk7/AFwC1Kaby1MBTacPFtiauuK4j1g5dAJ6XWlaaQ+SzfhnFiwSllJWblY9dFv9g0FVDvz6Li1fu4g/UdWtS/gmvEEB6UkCVt+6VmPE4zZauRbIVDGu1Oa1fSt+JUcXALXKSEIi5hTeqqggVZBwkckmuibdJqvpq7z5bxDou6r8UinlmzZ84FVNJ20MrBJe4S9vqwT/AEVRWUWqizm4qlXiqphcIt+X/OhswtG1/DzLxaNXy9jydN9iqYkkJ/Crz4ZsaNqBc1blWVo6gJJHWGVcxDjwpEaol8uIWSFGIa8ZE1yTxQD2oE1XQP4sFIn9K/8A3MdQvC20iP5CwmpX2XrAhbPaSk2yn6pdrdgx9yW5sRVTQw2khLGZl1m3U+oSsgNnicfvYsCObVcpD3r9Iv5VIMEBSbyocD/CNJPGw+JSNP8ABjlMckFSvazDNAvNcP3xwCTRcqvElUWuddVJF9YbNl/cxNNc7tUvrkCXuhixJjlvbYlPRCvtGOFhjaGV5ZWM91UcfAEu8paVGt814FxaZMHKBXe7h8nXVPSWxI0ki8x24cDS9Krp/VXKRF12qgQY8VGwIj/FkC9oMWjNRIgSa0yzSG8tIh8pXYT9csz5cKfRSNH7ABH2cIqUvbvBYcFDmqslFyCSyqIolFCQnsuFLm+DFPnoRsk3UcpASWkR3rkB3EfgxMOJ43pJsyeLizSLcQq3W+C0MVV4q2N04RcOSJE1dg6VxFuwutjZG+MV6pIRbKSRj1VlXTFFmiKr4F/qo27tXw78biygbStJUUjK1Uu9fyTBq4lnyjpUVySsEitu5RHaOM49mWjYqYrJ1LTKKDxnGoCSTZRASHVPxCfUONO5kw9Uv4f1JG+uY+mziVXM+/hWqC8iukQ/xYknBpWJWjdcN12OdeUu9MXy6N2lvAREdxbV0Tgm2uWe1OXAtRFtFY2yPrt1TecUfV730zK3oBdVd0TDSJ0QFcXMrt5rebF/zGy8zOzkrF0tS8k7qiPbtQLjpYWCRNeYtASSVV2jdygfj2YL+Q8P2QHxtIWk4qXnJqQsImUo8tedXdJCOkkZbburcQbixmntAM5mmc0JWEKiJCivyECvojTdGuS9+4V1Su3EQ28uGLNV124lgy3lkI8w/wB+lI3GspjtNUk/b9mmXjXyLau6whqYRMtyrm4jH3Np4sjfJns7sHKLCdzpnHaqpbTj2TCz/wBzCMfgxnotYivVuu/aYUbpOXDhNJrtWP7K3bhsVO+W576OCCzGg/Rrc+X2TGSqc6iFMZ6xq8sdvqZCPVVZvCMB2JEuCBABbeYCHdgP5tZlNcyEUX4sZ71k3VNIXc7Ket7kh5AvVts3e5iNpDL7NB01KNUhWLJ03ETSJSRQElebd9r93A2noF+qRMxZq+sElbTQK0T9mznwmp6Yesay2o59zsk1qQUVXCzZxMKCVt6TZsIElf7hWBitiRiOwMJqeg0lCDR0yAuXltxcaByxqHMGTYxcMbYhdEZLlqiRM24W3rqiG8Et3NjRFiLQyIknESdOAqQyNQWeZrUwkjSYVErx4fwWTcFxdc2wkj2mPlLGz83KAryragReBTAuWNuk1bMWCTYELRGxJXlBXyWGVu8MVagezK4ytSeS/oqGDmU3Y3NSkoTSB1ZtsQdGQuLTAy3NxK60MPH3aOmoZrEhlx6tjHUelYUhNJFrid+0EDV1VbLiLaRbvAOMXWVxXCrB636op00wNOxF1UaqqUqqjWKz9qwikhad0q5j1WpEgfQKpBcAXWltIx5cDl1mHx6a0a6m5BCQdgFq6DxIe96xLStsHb0iWLtUmYeaNczS09MPEJN4reGg7u0rDHYSSR28l2zYOIVNWHSTTeFGs1Za4w0miDdW4yLYQl4vn3Hh2w4Ue33JeQ6uzVLjYapKjJ0/VeCuoyC8my6rhdWzxbx0rfaw4p2GWdJuDkoFBB4qqANV3ekLdILt5CPIfs2D72LY6iGDcmrmo6SXF07ELBXYCkqqHLdzb7+bDEhoZ+6FFWsCeOjK1BDgzJXZ0XbsGC7mqghylX64iZgGahup6OjXAEBKpti0hVDx2pcns4GLhrwumsOuome7XJK0FfZI9xYJkx6qCeTfxMlHrpglqrqqIaqqAeBIf5mB7MOJWRdLLKorkiCpmA2FYOL2sVEkzJUyK/HSd914Ybjtt1dvtYtadHh6UUzKqYQ1lfsmiCpLqqn0CIgO4sfXMRHcpCJEm9PSc/EyCLql30gxkeVBVk4JJfd0iYY+pfYpy6mKLRk6knKVzAaSE2wb8a7qGTQX4lUee1AC1ebqV3W4p3Zby7oTLTLKGrjMNzL0s+0LF+JYeoyVPdt1UhF04KzxHZ4RxY8985GzqEifzPZurpiXdOo9sJFaA8qtxjeBXeI8c7vl4OucKiYH5ScsU0RkSie1vfPZhqQko8aPI2PbpKpNkhESQMx36pBvuK34MYpqhKgG7z6qb5O8+9VQSut28oiZCf3fZwZsyM5Mx5KmXUVPIyDuNd96TlB0g2SJXxqi3S7338Z7cPJUhFFgYtm53kY2WlYfRdhhw7RutD2iprXB0gKuVA0HQ081cOZesHMeikO0X0daB/ARfPghJ5c5dRzVNZnmFHisrtS41lwyS/skkS/3BwC4+UmGcoPqlylFCCW0k+9t9m+4wL4cSi03UKr5u5XrAZhRUjsucGqqJ2/pQPGnJ0Yxyx/ql4tFukjZA0vTypKPKmrmDj2ID3RIOAVVV8YiO3FyiSyBK5FqE9UZGV/DaulcHXpCBfeMbsAWNrWm2qyjB08VVWs2EIgklfzWl5ebrHF4RzYlWrNqdPUrTVzcbwJywNUFbNwbbrPe3YhTOtBuGP0l5xtwtpf8UYvpNlLT7h0iwyBl+MSSSMroNqREHj1dUjC0OrnxW31S5Ud8zSyxkEnCvekSr0EtDwAPNgavM8c75ISRayUDEEqJpH6thkhOzw3YHNUVDWdZPEwlKweSayQ3d6uKCQeXlswfV3KelqPzMFQxb4ail87FF6cl6YiEUX6DBe79KSgpJfDYW/38MRnoR04E7HypKhd3DhxpD8BfgwJ4OgZWU9PrGWm0F3F9tqrwitDxW2/ixdGOXiKSguSqQiUv6QVsLyXauEDu9MhHSrAtWgCJLAzFmtpaqC7lqSp8uy4guPEaxzB4hFQF9eQcH4Ukkkh+Mi+5hGSZG1uYNZtsktsHQ0khH5OT8WIl1Eyr1wTlVEXyhiAEuJkXV58eEZb16StEfUd2sDp+7ET/AEA6RBZ13bfmxJJ1RAis3RdM3KqLRIAC4jv+Ln+fFRZ01KgX1p4KCYdKatvxWYbvqZWuUNV+xIVb7Ekht+bE4615FAc0IHW2/VfHaly+9hnPZmxTVuo5ZIpSq1vM2cCNvnIjtwL29IG6T4lJ+zFQxPcvdtxXagZrMB4N+8eO0zO000hMki+b7mJEwKiJKtyEaz7x+rUkeLznFogC6v8ArbbLsW+jcvWdQsvpHVsxUDOLbqheTSCXfL6Vtyqvgt9o/dw+oxxlZR8LJPMw6NXkJozD1MgVopICIkR643eztJIvm26to/P+nK0cJ0ZREOi51uHVJkTfiTXMLdoNW5NUkhDd+lLYG/A1bVuM+kRTBhtUzJpl2c5GVGGyja1m5mm6puhdu3hCqqkHMSTVJURt91XmwR60iPR6J50rmG8c1ZIIkGk2KRJ23BUguAC2jZ8HVi/UuOWVPScrNNZjLiEmgSVCUdxNL8Mr50hNJXeXv4G8xVSMzLSDPLyvEpeLVcavq0WWhYCXRsIvMW4L8ITdKoPNCSs2aUzRnKhYSX0VpmklRRtuJzrqvisEdiWgqNiQhcqIWlfswtLSITcxHtqjoxBCLRAFWCAvTQJVUA51SO2zm32cvu4URVeMuKCEp54+WaACSrklys3B+ttEw+PEDOZqqQUcsDpaDihcXg6UQXSbHq7b+9tEz3+PBrTE1STqpuaFG0Y8UTN/AsWyz1LgySSe3Egl+tS1Rs5+ey3l5sCdvGwmUK8HWSDan56SinVziLkhNyzchZb9kqNpeLn57MTMXPSte1cNH0lCKyDPiNVeZaNXkguKXi0m43n7PV4sWKTojI5KpiYOa2i4WSim/wBafykCarV0rt+1a3ECRbrbPLvwwwLGn7I18bEj1Iox89kLUbVSrac9FHNfWfcLwCEy/SdM9USvHQVIW577v0Vg3BZhZvA5Y1GpGx1NRsKImrePq+DSV1bP0RFaO3aRHfs24WaUhmjV8anTGVYL1ZEmk3VaqJMkIqnEP1ukkFyV9227q33eaNXy8zFoGt3Dr0LRVOPIXuF+GbpEbozS3jYBJJaVnhuOw+TCc4lqEtKvA4aEjVUpSTqpn0U8il5Bw7VBVvw02DNmuYXXXcORclw7QMT+/hm8qBshCt3MTFNk2rIjS4aEZ64oKjbeRErbfeFu6/DhrGUlTiZVCwq1yk+k0jVKAgo14qzQAz71U+90ki5tgjhSUlqYkaDceoZKaSjUduqhFumxJJABXlv+r3Xc5X32DiQlqEQFRIeZRreUCZaprSzDgWPeuAj5AklydB7l2lbb48Z9rypfX1RsWyUauLFvYem0apM9VK7mEUtvsEVx4dTWZdQuosptBzHjJB3ROSfgqVllu1AxI7tvV58O8tJSv6VRlK4pAGlRpqsjayyiaqqGgkfMlqgSSvg2jtuuHmw7ACAZqgdy2PStdUYrSrdt+aB9TFPwTVJKGQQnlXPFKndfbw5cOkr1GR3GXLbihxdRo1AjKG8ipCIWVVVQFNzbcTQ7e91wHmPl5L8N6Tpdaco6HZ0rkpS1OOlSBKZkIarUlXRN7x3cLq3+6Z9PNjmsnU9TUK4WdU3Mu28wr9YSTb2utL9EREe+28Cv0rfewiNvtYjzIoIglma9T05pxQTy6DdVIEm6DayQb2GZDoEkr8W4S2YWmqo4NOQm5asGKCzdIwXFdkDm3S6+UlUunyeCzkxR42qJil36bmegazGPA1RYJtjSFKy62xXaO624rkjIPLjqvlYScZpo1bULOIjZLe3QUvXVNK4rDuVdJWbt2zZglprVE1URKrZyy1eTdJlVTGnkGMelpNfXLlr6tcLmqNwWct47SK4gv34tGX+WGdlMFMHlDl6rIQt9pyDupSFB4JhvVVIHQJao2WmSXhMSK3FGnZB5TtJvqQolzr0K7s9aC9Vb7z1RJK1dv3tu0tpEQDfy4oVK5iQNFyS3G0kxqpnwxtUmz2WVUSBIjutAVRIeceazx4attkTUBVUoaiUMSprrKLKmGoap3ldqhfd4twHh9JTjyUbs0XSLO5kloAqkgCREHms58X+rEqMrPLmDqGhcq5ympp3ImbxyuBkwdJCRAaTNfkVHlvGwbd478DF8i8i5hxCP2JJuGn2tyokI9XMBFik2iWmpqwXRTli1WkXSbRvZcqdg3bR94unGm8n6aqylZ5xT2Ysb9JYhpFhoNhX4wI68hVEkkle6Lz/KeKHlXkuFSw6NQJOJ5eU1UnUWMS1QVQVttuBVU1wNJUStvt5LgxZcxM1azqioFmzqSppBw1SKJ/hJ+aroe93bujdbeI+C7Ct+T5ZQKFXU8oolVpmJlXUabyNaoxCSyQKpEkTcmw6vR3WgPR4T57NuBHVirMoO+JklXnCDw6UeukkNoc228tg33bR/EeImpMoqAeNxkqjzUpxjMB3vDQDd0+SXDzKmQgBXD4bPNjwyTOLbiaT8ZVGzul1YsG2kfxF8WGlJb2j5lnXK4mi2qiqevp5ZFmrCR7NN2d7ckGaSB3l06p2mfs34jXTUGAkirqi4BX7UjERs8o/ixeJ6XgXTWNcs5hd5IN96qBR2wVQPZpKgrvIfYxR6oXWF0z1QFIQahZpqmQ7jLxkXy4+1DAjtTK31xVBRJcRck5jXHEoAhqCJiOogCoDd4RMbMGrLql6YzXa1X9HKVfcVBMG6rNs0stcpEQpGCopDvK65W4ruXFmoHJ5nW9Kovyy+pyGlkhbpaDt44X1wMhDiiACvblcV1qp7ugRxNzFF9qempwoKLm5d0myDVVTScXMhAOSwXQltECHbhG7UNEUJRJMnKnlQ5p3LDM6mJLjImjFWOqOlxL5kKpJHzXjqjeHMPJvwjWVMtohipJcZKkjsFXUMFTv69qpePBKi6tzyayDGYzLlYheHMDBK4WZKlutMbfd6rQxS8yM0pJg+cLHmEg+TcX6TYUm6RoGfOJaRK+Hy4LYnOKSP99COrGpsiZguiJC4QBwkREOqIctpYa0zWU7Sb9J9CPE+6L7B2gk5alst3JKiQl8OHVUVXN1L+mcq8QqYFoEJCvbybQG7bivpqrMHQrEFqyR3pCqkJb/ZPbi4hKWpPKQhNoQWgadrTs/12ojJZqsHbOQQZgLouFJJBzzEfCiy0rC5bNXV82LxAHlBTRQc7lDTmnIVLHPWrpGfkV10FW6u02tzdfYv5RArdXbbbjJQJLPFxMTbcQ6ccpWpby6vBbjUFGVbFZSxrjL71IzlxaBqynHJGkkq4DddbaqB6V1oFt6PbwA+GVh0AShUtDFNUaGr9eY9a0NSqEem3FJAiTdasaLfdYAk4VI3G+7bZ0YdTz+qpR46gagkiQjTV4d+5FJKxJK3fpJHsMv5+OpKo39aNy0HkdFIt25/VGP1wBALi3Ea42DZut+XFbkKlh38S3YNmEfwqV6RK6RCq+cbd4iFwWeXyY803OJJWSq7On4d1JR8Iwf65OHANQK8R9jyB7I+5hSvg+j0S8Cn4F8zaqrpBx0kqCDzSstNLQu1QSM92738WJrVFPRaybkVoiTTbtbChLHBWmRD391vMO6wgOy/EdVWXjatG6lc05CFw7olVXTv1iCAAr0mugrqm3v3bjVEC8IYMqXpeFetrAgWrcga+eTR3WhtMuncWIhwTkVB17rg8WLSUasg3F4azVQTVNv3bhIjvHyAV/vW2liAmGSIpk5Ja0vD4sWMkMoJhXMEY5oknVPwkxUzgW0Mw11DVBC0iARvPaA78G/IrK2pvzjuoSdqY6aGHKx+Nr9ykQGNxAS7AxAOnmVHp24z79I6jCDWphCYdep3boHSrHVLh1VQG0DIfFjUXZ+7Medy7FSrXbCKiIJL6+qwqIV9JWz9LwobFdhbL9mJ1fQ0EiSdsluhjL5TnSDepnEizlWj1IG6SK7oXyBgPJYkapAG3d0l48Zez0yjqSgakUzNp+jFalbuNJ0gmoALpNtK20hHV7rZbygXLj01nQwy1cOo2C/Nu2EABgNQ0vEhFSLXmuS0u9C3d7GJaDiXmfVGvqhzSruqkKdbujSp2501QVmC6Fd4CkPNyCGFQNw1cqhsJMcv5mVzIqZGnq5fVBUsw6s+rLQbVBqzZH+iXdGOraN3vW4JUXlZStM1k3OOh49ijvZqxsg/dKiQcoKoA4us6eUurpxTqOynoOnZp1I0r2i3jZyyZm304nV4pqkHPxS6SulbsLcqkPL5RxXMw05WvcvnlWnmCNdvIo3HphyLvGaTXVG8T+phqnckG3k2HgYhmUhJWyVkqh7T0TWT6m6cpino+WihAlUEycPFbOslSSS2F/nS9zAdqiuQjngrVvUkQPrMD0l2zD1mwHwCuCtyoFf07rcIvJTNB/ScOs1yog4p1HkHCyEaQJc915ElbZdt6eXzYH1eyME/peoKYf1m2mphu8SXarrqoJb9pKkSpkWqXT4+TDWlaKfQSrIhQ1qA2bCollmE3FS6eqDgV2zMkEC3cugYiAeyOzH0G7OnaTrvMjLSTcjSDYHVNLt2a7hlpNmItVRIQ7orjuC3px84YKZYRc0xknUahKtW64Kqsl1bUl/EBEGNGZJ5wwlW1U8pCo0ZekfRUi+lFjRy/q9mkru0tdJuImrb0FuPF1wpphKO1QbIFpunxh6qqCWF6i+UUZRxr6rlBd9qpDzEJHyCN92zx4qdLq0fEVU4YPFpVCDcL3t3LY0gVXMAuV5y5R3FaBY5peBiol5LPKmqSrGNOyTDQVXQje9c2EJGlcdwW3buQcU2e+iT6aTeUJXjxKmdVVwkoq6aqCNoCJ6o857tLw2meEzVK0iidd2InydcQ9M1DKJ0txVSx7sVUDQfsUvVyoFu2IKqkN3TdYPXswBKqnJLjiZ/QOBjCcEeqmxVQZ6R9HegheA+W/kw+RbmzkHTBnJMyG4AVXdxaRByDeZCBD8W7DyYVrCOZrcLVseg4aEGk5XA7VfAG8vL4MNKZgWvVigSclvWdcxsxq2npQmE3Nu+FSQSbgghIiqkQAFu4krdUtvMWKkK+omICdwhy+U8X3M2lwYIw79J5ESHrNVwbh6xE9c1bt924tUeq4AHrwORsEtodWGRivCSeXKXapcp7ri3Y1Nlj2VM34iHiczRqqMiI1wCUiqJCqukbX7UNey0DAtu28sChujk6/gUXNJQ67aQhdJ1KOakmwSF4HUDVBIbzLm5bi28uNq5HVYzzFy1kofLLLWo6TeNWB8HNyCv1V4ZHb3TxwJGY+XS5NuFlc47gHSCJHRqV7pPNXK9CGkI54/fU+3jw4c5ZeNGPiXDgwK5VITu+f5sZfruWl6QQlqso2rRqOP4pUnCElGmKAgJ7FdUUrFRv3W89mINpOZyw8rZUlXp1cnFOjbqkyjm8mLFwkG9JBqZWBYF24AH2sHv6DUVVGWut9HjnlqgaqqmTsyFc3p+FIC377dxauFpMBTYirQ5iVJ7N+fGXSFKyj+r65pin60VdKpNXf1wUuEPq70SC6+7p6cUeQXpWiK6KV+nMrKlIFquJ9dInLN4Co3GWvbeY8o8g78ReUuRVOMGMxWGZcbPMW8eSTUWi8Mh395cwqvVdID2jYQ/Nia7QdVZR1DJUnD016JmQeNxWKROddi0JW6wQ59jge6Lk2F0YYDlZvZKj2iQx7SNeVJN1J6r1myVOuEknTIml2k+S5gVMush5fLgOird14PZZH5QTc9KNmdWPGLlkQD6p1RSfkdveiQmO0r+QPD1DgQZjU+5pl03ZoUNLwbUyM27mUO5V4AewIh8HiwY3gDu1Rd0KD4g91mFBVuG/qxHaT7RFyLYiRutNSzZf4fvYVRVt68fTaUZqw0zT9QVbNN6cpiIcyEi9LSQbNguMjxpyrMlqGoiMpkF6KrCDkJCOBB07jyBdB04sS1e/wCK2b7v0Q+HFV7LM4zSjpY4HLKKlaqjVUnQTL1V4uaTRUdI0EkG6BmHOV5Xpc44u9Z0Dna4cuVAyGXRj3LUDJohIqpJNkjLfYbhC5Ijt33ERDswvqZk5lYFFXNnzITItsw6Lpdbgaki2sM3dOHSDF6kqTpL/OghZ+iuERV+HA7qSvH1Wt75aNaKuzO8npXkr7Nxly8v83Bear5uOoFMKehRp+Hbv9JJsrru9JUEiVNW5IbASsuLvR8ZXc1o8qalYfg3Eqq8VFwiGkaiEdwyBGA7OcivK4d/Li9vABOWO5RIiJRuWDqlm9cQp1pAlLwnGADxkLo22qBebp8Xu43BmiyoCCoBZYPSLukpZcFYmNhKYXYtV0tukJcOP10/Oq4BLyY+e8ak2dPm6LpyLZFVUElVxE1SSSv3lZ12jutxsrLnLf1dQUCwi0I+Vbu36ptVXzK1d5qlsV0nDMbBVBILB4gvJge4dkM15jCZpvTedWVVR0tIsGvpqCQr1xw4xzR5Bi2YJAA/oEGQqkCSQiR7bTIvePBEppvVVTUPVS0I8qgZBVgDArpQmyuqJXGZJONAwS5R1byVsvHqxRKKiY5hV7pGh6fjZMgQetX8s0asyNJwqkQ2lw5aphZb089/PhpPOKfgX0XPZwUexj3Us4V4Boo84ZJmaSQiLpUiFULt11pgO/f1YBxg6egVfqAdyt35wZvLyk3Tyo56BkJLh26EW7YqpOR1W4FchbcqAEYEJXJBzgd/jwP6ffsEieepmc9T7ebFJKLGNdPGxuVQIdqqSTzvRG47DtLoxekVGD9u4eM6ziqoh2rU+P0OFfKoXjbeqkC5JGQ9F9t++zEDFuqSHLmpoRhPITkHHmD2GEmooESpgV93e6SVpD5rbt9mLh0DtUedczkpU8bTYw9LvCinDRKYeM1ya8SKQJJXOEBEy1Q6dx3bz5BuvPKM3TVYU4i1kqmp6Vj0ZK8kF3zcktfx7j58HVvVGZNaJqQjPIao3bdkIXKRsiqguLc7rCEgSG9Iua7k283ViXnKIylCl2K1VM5AVnBKrsBUXQJdUz3KguJugO4LrTLVLotHBTeHVsImokM1ZKW7VWQq1LU7FTdFKxjqH0hNgLACYJCIW7F0i1bS2ncaRneXNhPNuuwzPqOFWbvDg28a2NmlxKYpxYK332JPxERK4BHm3bPNjPFdUCi3GUrOnGa6VMpcPpXD/FnBj9krcRW77uvFYg61qSJeQZnKvnzOn3gPGceu6IkEjArtiR3AHw48NI1jrbVOZDSa0RVVc5hRYuG1TakqKR8A10IhqTJJVLcZpEBDutIt1u7ZeW3EDUklX8XIOKtqP10zWBqA8WgQJJNb7SDakRbbC5fNgpKZ1NsyMvIuSSoycYyNRTDsJ2WQjjkFQj0h3ikuk2SAyVutIbujfdyYplTVflZTVSzFZQJwzRxKqgkJE8Scv1Wt6WrcNogkRgkW3ddq7ysuDFbRutlAhVsZjJRyNb5dVbTM9U9dUNAyqMeh3TlozNi4XccoCSqXVzc2M/1LJQL2WWc0vDvIyPMQsbO19ckjt3jq27xuwTM8IGjzRb/m5RePGcZeRKi8SVb8OY3XCgG+67nL5j24DI8vmwxbbGElS73UjKJOX7XhkjEfaxWXRTCAiiua+mlybtuLYV9vPb7OI2ULihGKHcsr1YY05w0IUhntTdu9nlYkTEBXTO/vCK4hsxLwj9Z4P8LGTYQIB1dL8OI5rTTZuoJLuFFLOQR2ji1QSUI6eLM5vT01UjFBRVUhSQPmuKwS9nFb7rWPoFMGG3Q1krnRdXuaDiyrCn2FOLqGrwCraQ+tOB23aulbsSK7m8YYqNXVGtWU04m5GNYs1HBXElHtQQSH3MWhlRCI083WfxysRFuCVXSlOMSU17bdgiYpAqO3pPqxR5qNmoNQQdAxJMxuFdB4K6Re8F1nvYBbaEjkG5FOFp1L9h440llnkawQXJukZK64iQWHt68LrTyysKnCBGx6SIK6pLpNRFUj9vw7sQGqsvvFy0UI9hW/vYs0XDNn4i2Vf3OLd2gga53l0ly8uL3R6Nyoagolveq4EFX6CAmQXkukRJD7VglgvLVzR9MvHgQkxPSDMEkglJaLQQITDl5XDUTAeXmPddgYSzRan55wwsVLh1zSDiULTIOi5I+S4MSmYTkJSNF+pTjWjkQagbdoLAi9Yn1q328vyYjgAukIkrCIgEiFPPzlucvKxKp8rahEnTq9VcnbduvaB2lYSRiSXwjgduIeKVeCDr0pXOO9JVBe5LduxWCX/ki9nCjd+ildqsBXvE9pKkNvm2YbN0mLWxZxyuzS1IwUnRGV08KlPMKQzIqOoEgNe6GNnYQB1ilaZ2W+fA0qBWBCQIKfZzMe3ALVUHzoFVRV69wJBZ8GHlIV0dJOk5KOc1LHyHKTuGniYmQeG4EiwwmeDeTDpaGdyDlEz1dRc9dUj5iMlbRv3+UcWCJDjqVBEJjpV1y3zGqSGH1DHVwpT7c79VUmdwqifOKpJJEqY/FgjZg1MtWlOt4dlJU5LpsrHSSoyK6CrbbvSSSdFyl4Qt6NuAbGDVLUiNhKvkFDSMO4XITIPCVnTi1U+4kjgRof6HwZFJOC/hKQSAVRu6QXV2JDhfU0zROZqcUlS6A5RL8YxcC60QqCdUiiVVtC5qRXBy6txkO24SH28d1BFrQiyMk2YDMwrjVFgqvq6XUJbruYT3bS/dxeImgWKWWDr0z5wMr6IJVV0I/ShJdVILwErGoJK2X7BuvG73cUv0S0AU4s5jWbqBYmhZwxK8dcdvWXdfdxVLCWhMCkY6lUhQMhEyAhLwjbjokkTTEFQHZ4urHMwqHrBRZmwtamY2iRXEIdWCjTNL5QHTMLKzdat/WDt+qhItl9qTNpusVtDeZFby3jz4ucxiIkhG9ZQTOl6pkKajShGsvScizcWXoSBXaVvhI7TSLzCYnh9WDps1p9xx6NAG+MhDQacYL9Dz3bUj98i5sWBtI5KU+8fP4Zw2IiGxJN76FVQHb+qVErxO7f3vu4ptWK5fVi6KRpxH1Qs3amq6F7pJAur4EEkkvmI93hHAYkDhSimGwFThMC5fv4jZKIB0pxKR6amHAiCRbgEcJuFzXeDGoFcsrtEdo4LakJ6EM4ImOpXXJJxFMpN42XklEHyogAJkYiguH7w4MZbt4LJEIefAOkcoJRpDJv3U22Tf3h9WUK0f8AS+LF4oSGnWMYsjV3oF2pq9woquShaXhuxmr1T01Xj1xt1N7YTrQ5BCiCzfyrNZNzGyrlsSV+ko2dGJJXc9vgxeo2n4GpuIjaSzImtFqgb/6PyjUkjdB/hAJaRE3Mvc/FgPqRzHmGLTLzDftwWMuaXjXVDuPU1PC8kpiUBg/ck/FL1YyAhIzFIy727dt8uFlJASir67bNVM6SbRzhGSgZWnHLVXSX9XruG7Z6heVxgSCpaRlt6bsQc8yBlOS0bYhUbzV4dqqOklxSpq90RqqqirdpW7bC3lzYImY+UEVAyRBTHHVq0WbpGzdxrBLXSO4tXuDK+4LR23DsV5tuBbWVLv2TcZ6ZcyraFemqLfizVK1VIBvSLbYCtheb29uNK1EiikcyjNRrqRnkpAYeRilRjXrBu/fimOuuLe7eraHhMS679vmxFt4Kg3tWOo2jQZr3Mjfk5JVVVd0qFpaSAmPN+AT8NpV9vIwLpGPYU/UJLzD1fSJjpGkG/ktPn6uoPNcWLMxi1hbteFqdcZBveCto3N0PKkXX7WDyy6FruqoZVZd5eFvTb9YZWZ1wcNFb0HKYJJaR+HVDqvt5uW20MSib1ouSixPGxapmZjq8vvnj1N05Ks9SKZSjklJPuibJtxX1/wDNGJbvZxYIPs8VfUTdZxC0hNuU0DIFVBbCkCZhzXXiNm3Gfq6tqqi2RJuw31fXFQLVNusoKIuU0NUrdQldo3YMecMzFylRQcDCQjxVb6NAL9Mg0o50DUtcF2ul3qqSpid5qh1dPTQJLIdtSkI8qet5hsxY8AarAkplhe6cXbBsAiMx5r7LjtDEWNOM2bUQlmy8YsyZpOjdqvzs9Xqpd0Fx2gkJ6o2bC5ujFlIwLZS/4qisc6woOrkpVq1Zoi5bSsfwRqxaabVBmQJK84kqZXnYrcJ39Yn4sIx7pYGiYF6RbKOBAl2yFggKttxjYBWYWa0kzqVZm/bPzl2bcASVSQvVOy8twq7tIb7rObr5t+GZRrT1s6p6nJJOQbsiPikyVNVuxVHbeqqAiAcpcxjy4ausdaDKFCNO9XKRKWhwjZmWZhPP/wCDdcEnDlINXQDrIRwVGdEZUzzhvD5c0rH1LIKiZklPujjFSMAu2gBABjtIucfdwH29ETE2zcBHTbMZBleRto0xch72kWz3hxWY/wCm0HLJvGT9y2fR7i4CSdb0jwuK3utaiJHdZGo0gjBIT1csOIZylH09TkbIJKg14Gn2CSSQeMTBIlVR81/vYpIRz+UYrMJmlZd4poKhHKtNVJLVErrSAOcb7bx6cEzLmv8AtD1komiymyS9WOgVau3K+xA7Psg1S5bOm6zy4G+YUXA0vWi0JF1JLtmLILZT1ehak1NVXvWqA3WOBAyHafOezBlLIzjJBv8AZblB1YvFQLqPcv6VXcyTi/1s2I1dJJx9qkSQpEl3RpW7fGB4dSFOGwnm9bK5eyDGJdKpK6b1LuEjMb9W0LrEt13g58SEwq8Jr6ngZt85jbgdHrwaqQLmlduXSO5LZcW/pvPlxFs8yJt+izpJWrZVdq3SNq3aIS3DJIb+QRNIthXct/VhkBFjFAkK6nJlzNrPkWqLFipIWcQLSIa3EFmw7juMPdtDHm8tNpQvAJSQvlIpDcpIJC5JBLlsET2W/PivrLhFrIow02uTcPq/fs9wmBfZXAW8cedSVQ2vGyEIuLh6ekOuldrh4RsLZvHzYtKZjpVbcAPWnDxmDpisiMJBi6tNUHIpEliplDSqQjYiKl+65PF29W1UvIIowjZds8t1TQdtVUjQPr70O6MfaMfZxW1qyf6nBumCBC1VPahYPe9RbB5sBxqQHUmEmiLSq3KM5UW6n8GldbykGKojCOnKfEpaSlnMhdaQ4KadWo27ma4+yrdiEk5Kk3y3Ei4Jo7/XJiN3vDi+kq3w0G2vP0zZ6pKOgkGHob3ixJBYC3EpuLEgW4thl72GTWsk4xwKMmwaSjP9cI6auLlS9b0MDFYJTLdnLouFdVJyUku0XQ8mzYfwYjUA7KZCrGCbjESUhQdLtptitKupgSRj1bVY1JqC5kBdZCZCFvm3Hi4zEPT7pwxkmsIqzdA3BuNsi4IiMfAVxGA7uXkwtTNAw6chE1tHBTT6HB+kr6vVmblTsK4m5CqklusxG1YlJMKuknMDxkK1NdW1PVITFpfsSIUrd3LiLGM9woar9kkojI0xHFozMq+SdHfaqubci94lRMz+PHLqUp5+6TRgZhB4Nu4V0kkDH5t/tYoNeOmD1OPBq8lV5YzMXDZe9URDxJEdp+7Z72KmmQAoRqgkReEuk/ZwXKCoFuaJ0w4pJ0pY6WYvh8K6tpD7JAWz2eTFNqiJimDOPfxay6XGjubKlqkPmuxAppGqKn2Ql4SK27DqUSm2rdqjIrOSbnuSEiLS2eHoxHerWxgW5SFGzjyBqiNeRz9JsprgkSq9pJaR7TuE+nBKzEb1IgsMUykkOMj1TSVF2ZEJJcwGBHvD2R2YFdLsIqZmm8VN1ClDs3HM7US1RS927BCmItZV4p6hnoGQRa7QdsXVoqgG28h3Hv8ADtxfTFBVVwzUKzGuRuAqViJVNwNg3PCsL3jH8WGbiZqphcCtDOWzhILbmjoVQEPAVnT5cSybWoXEeiCEk5VUAjC0XRiJBds9vFbeU4/VeE2fooJODVtFyquJaSvgITwwkJbRS0RLvKv1hOM5RNY/ow8jU1RA1Su/pYJ+TZioxLzSkCkvqZPrvt1yNUPhxYpJJ5GuFgeGgkSWwiEgs+IMNZB/Sq/D+qTXfODENcdIdp+1hhTVhBtFUP0wx3KYja/q0U7FYGMVIC/RN/u2FiaUzLrBdNEPoelppDs0xVs+9irt42rXqJHTkC5KwdmoCRAJ/wCdxaqMgczXqyKMjTTRj6FVbQXFrppe2ZpFh4xU1NQXrEscbYAdqZvs3Z5UtF/Atki/aKqj9zDdeXkKnYk2XioN3ttSudWmHxjggSjCYalwy4cgbxSdEqPz4h1KfRLvijV0iD9Kgkl+6ODCYuXekgw6n3UIXWWVbahHwAin06KolhidHVIzLvfQoAh0lbgqPG9QstQIueIRPlSXa/zsRZT1f6xMyOPkCAPsiDfhYVJWcwo7PpuUlR04SbEu6BVIvKdv3MSTNKuUtiEkv7OviwfS2eQuNeiUFSDmJA+X3Qw1UzaBmpY4ptJIvCptwMTDoblaLrR7U4ZlmEPM8u/zuJZq8rMd7pyXwCWI9POmKAR42HJIT6kFRLD5vm1R7obD10C8JBjw+JeNVmXCp44uDSRSIfEJgr812zEO6YTDAU3Mpoaiu7aVxfJi2MZd3Gt1EXnDKtzDukiEhJXylZiLlqjBViozaxUZHkfPpCZK/EZbMUWiudB+Ir1cwOVJWmgK6pOGnWqshSShOvSqkDVaPMtUju67i3e7jaUpVFJxFBy8lXb+SVhCEEF0EzIlRBXaBCJ+YvDtxiPJ6nl5GoEp1F0KYQ5gRCoB977JCJWYMGe8MWYlFspNksTdeAuIkVWTwUHI7bh1SEUg3eIRLzY5/wAcWaiq781TtkQjhuL04/8A1XS+Fa2uCxOPODLu6ehCyhDi6dzTdSVLMagXpk3jiOZkL9Bm6VSO4d5qgSXt7erByl6YpWsZGPrCXPNqN9MKgEcCkTT4CqXjPjLxHdcVoiHVir5O1ojKNnleQVawdDrQrUGC8avDKyQg32iJCSqRgapldt3Hi+n2uMwpOFFtE0zPC3b2CqosOgaiu3ckLcRLpxdWHUFU5gN6h0/n+yz7UMqJbST6mctuzgSZBB5EV/U8hzaks8BdUvCRJJF5cXccoMqUJB1JVXledFKGgAxfq1qLxIlRS36+2y267qHFSis3szpFvLTq8LKzDForpIIOXHQAiRgXEJG4HcJDzjituu01MVjIOopxSUYgo4bpNTYu4yUknv1crktoGkF13VtwD7uqD9H2ld2AI9yeZGVlDMWtPVRTFHLt49I9yapSAc2xXg0hV4c7du5xtLqxgDMjOSo1agnI2l/QzgYN6uek0j2CTYib33AKpBvPp68bClq+zXjcpZCVrSHiKTgXrfh1/wC00nJLpGWwSFV4Vlx+XqDHzyllWarpQ2zkl93MQ2jZhxYaUcJEWpLLg7DalW7eSnn9qCRLuFS3EO0R8xF0Di+xeWjikV4upq7FAY9B4HGRqR6jwm9xdG3adlt1/KYFgbM3TtgoRtnq6BH1JFb93BlpGRy+TcR7mWzrqRDikA9bJFGERiI86QkKu/cRiPxey6rCcaHTt8OP3IWmie5aNR4WYYsJeCh4S13qpNUJtLQsblaKEcgu3dcx8pkY/BjP1WZb1tQ1XSEO9AYO95oPWSSu1nfaVvMQbb/lxKRDfK+YWTnIzO6KjXnEKpAxqOJdCkg0E+6EjSEy5C5hO/mHF6OlEItnD1TUGekQTedQNuq9EDcmmF9wi2auG14DtDvyIevGZpxO3lu3eyScPe6hQGGmJduPdVkTlZwZ2poCPhtvIjLFqb5iZp043TZsK2kHLNuJ3JpCzIB2W8ur4MTdTBQDyYF4kchJNXB6SSgtQX1TtuIPst/wDisySLBKQTOLjSYiaqSRL/VS0AMLguQSuVDZh6063UNydFKCAmiiKiyqh/PJvDJtOL8RzrtASQG/xGVpffwzTiWDovrE8qg6AO6IXBr2/ANnzjgv0/G083jpSbjZVSo1oRuC5aEMuIJBeIh9qV3OWKpXS4PXgopMAS1UNfUQcCgfkuSVtO3Hxl9vaKi427zKBFJtCCitCNBVUbq38WoOlaG0evn5cOpSoISGaptn56ne6qBCqRGQH12HyfLiuozZtFFjKBSeKHtFy5XArT9z9/DFaLWfaxy8WTRRwrak9LkI/aMuXF0QVQqImJb1o7UMLkm4GegmW7SSuxasmMwUcqsyILMFeCZy4w7oHBtF+QvMPgV8BdJ4pTxg5i3ijN4ApOEuYbxL5gwozcrNVkXLe3URIFRuASC8fKfPibrYuNk2W0lISiUl9aqybUf2gsuGE4hmzGU+2eNWqizRR81X0DVLV0lS1REFS5fw4EeZfY4nYF41WoE5mQjXFgJJoK8S4HbcSpCkIhbePN82M70R2rc05GeiYGr/AKNT1KA6BV9CvYdg2aqpBzbgSDSttu2e9tx9Pcus04DMuJ4mjJRVBEEkjD6ukn3R8pCPR73w245PcKGr4awEQ2rRC+NVqWEKmyFYU64TGrUajEXeq3Fd6gqgugdmwxE9hjf4D5MC/M7Jmey+as3Mo5JJF2kBgnqpauw7TLm8fmK3Grs+X2ddOzrd3mA/GQpviDcM03egukNu0dcUkEg9kcZbzYr6EzGkBWYHqyipAkDFkhoJeSwbcN7I/XOujqkKHqxYhrQnE2zNq4W9duRUOzu7bfmw1jePVIXjDXUIOoQLBSpfISs55qpJCEezsLY0knWkqv7PQHvmOL1TuR1TvSIJKbiIxukNlos1Vzv8A2fex0Fq31LulpuSzxVzDW4kHafpSoZYU3iCzW4D266ulpbvDi1M6UknC3BsJ6FXfGraIkaoiR+HlxoCByHoxhrBIysg5JIQ1RVZLtt5+Au62mHnK3CMHlBlvDSS0lL1hGOWLsrkGi8iaRpBb/1rfzD8eKHLRcDGUVaN0o5Rkga5yvzidagIBFkjYIloSKSQ7it5jIcMo3Iqu6gdLMJF/DR5MjBIicug0kj6RIg5OUvaxpVxlQ8akxWoie9WMwV4gRUdLikJ+PeqRmdnnHyYtlO5WsKacKTESiz9dGRuCeqqvCIjM/5Xl6Q+fFbFgvLpSy9Kk5e7YGnM1LKKNIOaVJwwm6hQeE3PS+pCqIF8t54lEaPp6Sb8Ycbrp9IrjbgvVNQE8lIeuKrlYoWoF/GVEnSoWGfJckhYfx4HMgki/kE1j0mwt96WgHdCAF4T3+HAT9I7Sl24xJFMVLVQPZaknD5fRqRC8a0Mq+ZhsNdMbQv9q0scxdIQ4uHC30Vn1SSv1SUYONJAP5W2w/dxWXkHApSzh+1pJV5xF5Ol00pHVI/GI8h78XJjIsFWqMb6qlxbgltTXZqoJCf73tYtImxGKhE5qYa09AnFlJC24FEORRdwQ3B47THD5vDQjxFFZ4ik+R6CErrsRt6LpjwxANtu4SsLS+P7uI+QnHMcmKIgqQmPMPJZ8NgYDBXygmteU1TYRLpEeOZrK38ApFtbtBxZs17O9MT+DGf5SlKqKYaw82s2QfKjfc7epDz+YyxohRVg3iVH/caz1I7BQXHVI7dhb8AiioFm1qT11mVR8rMRKSpmu048Wyrn2lee32cFs4E2GtRExI04qLKKpKah1p6UlWI6X2oqK7i6REfEXlwfOy5A56R0a1PLV/TRNyEpF5Fx88lHy0gBfZCur+q9nFJzCz6ox8inGw3Z0y1Qi7R0NcF13RB4iXSVSMS2+8J9RbsWrImmHebUshPZeRMbTXqdUV5RhHwzhVh1bV3Th0ekNgdZpddglgOoJwqeRijWxGS1GtVFJV1DvDzFyUp6beItQ+vLSzB4ZHu5iBXVMdv60rvLiDhaOo+LolTQgWNOMZNUzlOCjklUlbTvSFIuKOzaNvIR4qb6mMrcravqCuGIjKyCo6Dx2lwDaBbAf2uk1DVVcbt3SZW4kIPNyblKbIFX8GUTGBtfRscrc8O7uh0EhKzz7EuXGcdkGgNqICPKqXVR8Y6YhSkC8SUBuqTx25cC24oB3GuCBjftAbdoePbfgD1BR9APdaVlmzliV5qru0CX73f/ANIEsGin6veMlnk8/oliu6dmGkhwCSB7N20XCt+7xCGKtVVS5g1tHuI2RyaZpx8m3tak7BBtpWdaQ7j6h5jLl2eDDyjImtKDcEEPYimEaKRcZi5X5uOWikaqqCBcOqJ8o3gJ8h83hs9nBkyBzcz0qWVQXmVjGhjP+FpuSi9VukaQEW1dIB3EXSNx+XAvyxy8a0o+F5mhl2rVThwlfFxY1G1Qa+EyXsIlbri2CNp39OPoBlg8fNMq3tPTOVlN0VSirdwklGyEmq7D02H3oihpCWkXPduPxYquVU3hh+v2lY2JAOlDyqO0dli4eRMxGtqikqhZJBFwLQUnTaLvL9Orqr6W247SVHoxSX1QZayM7IQtVZr1G8bvWoKkpCRyrkeIPcrqqpEqJ2lbfYqkdl49W2Lp/IpnKSjjNCYimKVNqyPcSksLhs/Kw7b2bVurvK8tlySQCAcmFpyZRYOChKfOo141V1xAIOX4JIJGG24mod0BH5g5wuM778AxaCMVOEFXVobLWkodabSzul0lDcesWDtKnH6TO9K7h9DVV0rvMd3tjiJns2qBrElHlRrTFaqJXrqtm0WuRkr0WqmuqAefb7OLUm/zOrCLTRiJKpXyjIW6STZNvakNoWmApBsNKzybejFZTy+npkibQ1Ny7Zw3V3rsYviXQ9NpDyJXnd0Ee3pwSwIO63VEnSBDGUf5hSya0rRGUsZBwri9UfqAkqIddyrjn5ekbMFTsW05R9RS8xWFTovI+QMuFSktJg0iY5IUriV1XCSoavJZaOJB9QeaisSjGpIvk1FUuFeetGSG0Nw8tw34rLPsfRREQMK/eetmhHYxKGSVAlQG63V1SStPdYRnZt3YNeeaNqBFFQEDRZnYXJdmfoTpzNllUTqK2/wNSarwkCI7bgJugSQbuoSG7EjMTPFSbejyoyeXR4M124yjhKIIdIO9NJBw6EzIPY6uXFIaUrX2YLhaloHO2oqgdRgAcyxSeNWkcgiBW/a7Ujtut2AQj4seZ5bZfZbywvoT0uaqq4EODOUlHhLtWypXXqtdUA1StuEDV2eETMsLRwZw2q9wob1MzWZK1KEidPuaqcrAGqqo2m7QXPlC5ILTV8Owy5OfAUzMKjX6gzWarCYQlpDfqaBoOlbLu6V3EFvLyYJ6zdnDMU0SmEIhNJJVDQSSIhIObaKqRX83NZZgS5szUPTklA1y1qSabVdHpfUCVYJEIAHJckqI9BbCwfRMfOQhOqGnjqmZj2tMxLZemoePFJ6r67aghpWGOlaRjquC3DttLxcgliz5hZN0rR9QN5uvpspqDdukg12ircTJvddeSDfvdUkrStMUg3c5YXym7SMjTThTNCufV9fTsgkrEpRPqJJJcUjtIHCrwErDHaYaBFf5duI/NTMSsJergzWpf0VZAvqnEZFJV7KJIRbZuZEhoCJpClbtIbiPk+UrofF2G0VIYmpTOKm2FR0RD1fQ7yKSpKJarJQjBRImzo2mqQq3GqQgZCqKpaQDq7995FeQxy8y7msw5BRhAgIi3sJdQkiLSAitErQuMvc8WHleUVO05GxM9VU80fS06q7cLoIOgX0gv2K6t1iomeruS2XhiKoumqnqWaasKVBUXhq6STnXFAUj8yp/Zcpc54HPS3pJaOjGDUpLTUzlg/pqkY9hBTb76OxQmrx2qAqulVSHiNhj3Q327iLaHNduPAja5UVU6kHHq0IxyiBqqtyXnmthX27vt7DI9onafu40pPJZejKIxUpQ05OPEmqST+3jVUCVBukJkhpDeY33fa3Xc12AvmI9B5IJsGtMTVExrUNUhaIaQOVRO7vSVG/pHbePtYXW103jjilFT3iVRlKam6ZeKM6tYSDN1vV+omlpcg7CG0g+C7EfMPGzpG9qzkLQHSBIlevzCA4s3ryNfvhOZCc4dULQXQe6ur4NqqBWfHhZvVqLBuizYBLi3aEfClxR2X2FuG/GlbbIBSMikWpDMSkmqwopNlxLnNLh99+2wbfexAuG6zuQsQR1CVLuk0iErQ8GzFkqZ+sBDxj9eQJUTb2quh7gwLyeHb7W/mtwTuyVDvEqzWq8njRKLh2pg/bCu1F0vcO1IUlVRO0iHeQ9I24V1z+UJGtFa2cprNVpysgVsoINSSSCVjZh6INZFNQgJLVHvdpJKjeNnSPjsO67EnF0hmobx0j6JgVGLtVWUYJNkkhVXSVVIVbb7Urr9p8x34Y5hZkv5lFnK1HkvHqDr/wdLLG/VCwVekTVsu5hO4/d5cVdbtD5nMFiZ0VNzKTFuJggMgDV8qgBK3HauaAmA+W4sIGWX3izXeZWvVY8qdVBkjU4zy0qrUKUY1cACqqs294l0lYdpDckPL7OHELkzx7xuf0nXkIv7JVzHxDhJvfdvIlTIQ97FZZ9ofOyUeIotawtWtDclGoape0OlZi9VNXWbQpqQ89WwzxO0m6uukggINT67kNAQMeUcNW23R8SXk/NVd1lLT0cTd5E1OxinwLmICKS7ZVJW8r7SusOwLdt95B0cuB7VENR8ao3h42VfTUpYZru2yGkkO7fckZEapea9L2MEJ1mNWETNOJh5WxSHe6rpJzGteFXO232w2CO4fDzYp9bZmrVGLcEmDZsm323NENh38+5W7BUjH1imwJS7AlQ32jcpwSwqot7EiLQ0Dvt37bi6rhweMiMu2FVUc+fL5hNopFVwk3VTVZ6oIJbrzK8RA+j7JUrQLf04qmRtIU3mHVDj6ZNkl2bQUu7J+SGuqZFsFJukThUrB5UrbbN3TjUSY0xHQqcRCZejHqNBuZlLs3TZgqlcRfb6VnV4BPnIxwtrnhllCm5G6DUS3IRS1F5dNXgtnk3FVAnqgwSJlHKsXCCvXuAi1fDzjzW4a1QrTc4opoSqqTcB4XQXal3oWWgdwK81l/R8eJKtqSgZ58o/BnEeuEnQCqk2f6CSSviHVJL7hXHiizyEqy1OP8AWA6qt6qipaACfw2fD4sFU1M2YCUklcqX5Jw1njiBlHKVQvIxvIDwHDJMhEibnzpd0QnaZ28uOaVZVshUTqNTlY+KlpATVQaVE3NiciFuxIeIGwxLbz+HFVKObSTH1OqcY5bu3XFAIySRK6oDb7fi2+bEpT8NJU9UiLxVZ9GNUknGqo0tSVFIEiI+nfsErx3fMGDHqZqJRJVt1b4FqFU2tJGSfVVKHLoqJuknSrUkFVbjQtMh0ruU7eXb4cDx+613Smqalt20S6cEavKgp6ckkU6UjXLaLaJaQE7FDXXMi3qqkkA+Xbut+LFPJk3QbrBeQiruLy4FYIWi1LQVbRVDQqGHcPmxvzKbJyiaxyfgZ7L/ANdSTiKE0nQvmptgkXFm80Nt6oXdN5fLj5+pkfRg85E5iZm5XUxNVZSlTS8Qz9JAqkkaTNVk6tK5Xa4K66z9QF+LK9onGtKQMlqRNqjJutqBarTzWB13Btb12S7UF1VeokFRNUjOwx6UsWjK9WkoaFTq1KEa048VJJ0/4t1FoAklbaqgkgqQgZGAlu59+GIdrqHz1gmVD19FUnEcEvYb+WlHg3gQbzSsAhA/MZ/exRa4yqZhAIyLVgUvGuDBD16ylDVNKPJUb1WrU1SvSsL9LbgHACjlP6VOUNaMFWZx0BmzPHQMvl7WsfH+rgSjo2QlPVjVUr+ZJAN7oiMebd72A7m08BJFSqgp5BdaMS4d60dukhcM242iCSQNyvCwLucLxxqzLPK2hBYKRuW+fTmcFowBu1RcvwXeRViVu0gLYPkINl3lxkyrsnGdVzEhPQOaBPFOKV9aO5Jmgq1VMDt2kGw7j3AQ82JUkMXY8qgUYaUC3asJUdRJosG0uhDuO6VbIPBXXE+ouUb/AGfnxI1dJ0q1hfoxDVbNS6IbkkCjhYpJH+170r7fYHDzNinIqLkODhJuFkdLvVUmTMxVSDxqlbZ7t12B2jZ7uHQ7UOrjlzlPXGaDh19F6eeO2sYAKyLlIh7gPFvIby/ZDvLGscgckW1LpkjHUq5fVBGXm8llXTIuFV5gtQ0FXCWy33792Jbssdnv6LxjOuGeabaQ9cRwE8iWKrVVJAzC6xXcd5dO0L8XCfYZesMxKiRqDN5mktUSCQOId+yu0EhDYSQpcl3sF0YzddcHKhwmGtqZMMCAyVTzUsjiROUo+FF0kqAq6uq5dKn+qu4UvatwnLOKezO9WxVUUMqPdAJerXsSg4Xst2qq6W/wgNiR4JUhTkqlxkIVbM3ibs7Gsku41+FS27UhMtW4usgu5cU+laPq2erKSgYnMgYpnDuDcGMe4FXQPaVwqqpEqZH+qvwKw/oivE3DUh3QlDVHW0tJelhDw0e1evAQZqfSBVXgxvIfrVxby9i0cR89l9DxFQN20y/avlG7g0knzZ1rgJgfMIhyDf48XSUq02H0iihcoKzEhYISS7BLXS3d6NwDZv5rhSFUOW7FHknT81HBvVnnDk30uLbaRKkqP60VeQfYw4pjITmSBqYmelDvNiUCIiSRpep2a6gOgJ0PG70DDckSSW0LvLz4CLx6b9Ynh3ayt5LkVnemXlARswbq8pWerx43cupIm0Skqdy+uSokZdWgA2AXmArPewNakyyqGmivVRJyiAGqaiVllg9d12G3TJUCSg4iXWhpJvKtUWyqzc7wFy3BdIvaA9h40/TXalQXhW1GZt0YdNRbtJuTWQpeO4FVyyIbTSLVuuQMOpK3k5TxlBMjNTbuv5RwcZPs95lU/wDVnk3GPkeFSarpoES5NQV3AkJOEhBL4x5ubAVW2weGAvoxuZ7UVKky2yX9EC0rvJypJn1LKuCb9+4XbOlXSRbxSStFJwIjb0lbipI1LCJVdG1VW89PRTVukrwDljGt3L1cw2264W6Su4d263Fr+hcXA5HRtPZyyCaFTQ7rhafj2zqLVQ4dUhISFcBVVSLVvLVM0g3Yhk5GhsvKyFglGy9WTTUL9CPmTXS3/olSSXvVEDuK0CK67AbeuWqSs2LQDmUygnnC0JH1nNPlncJcwhG1UOEF3iph3pqvjdEltG7YKW2w+bkxmFnTLZCWeBPZwJsUW5d0oRvzVJULh0h4hLf1cvnxqjMGl8wcz4mmFqEpptGx7dUzcOfUyEKAJGAd0QPxVMzu6gCzzYBecGYNMU4s1h6cpiMk02Suk8LgzJAXAc5IFpAHh3cPpF0YoaJzaK9oVdqh7TzVs1qF5F0nISkakkkr62gTJu8DoVGwhVu3dAWbcAvMR4we1e+WYGzttSNUY8EhairaN4paQiHy4J9RV42iHEfULeu6gYjwqTVJkWgRklcV+1vpBaJ+O0/awE5N+zeyciswcu9Nw61VRXG3VPdut3ebqLDWjaMQ1qtw+6u03TlJrwwuVdFVXVJDV23+K3Hhstw3uPr3YlKfVgUphmdUNpBeLBUOKSj1QScEl5SMSC73MWIZW/LuZzObsZqHy8bOV256UlKaDVJUkgb3CBXGJWW6pe9gwZPV88lFIWNmcwaKpOOkDD13KDJLoTLkyPvVVVVSIBX8xAQYmsr0MtYSDWncvoGVKWlmvCgghVDWXekB890cCQ96NvKdvlxbXjA12pLU+4g5Bi6jjjkE3NIWuGapgQ6qtjMnAFz7iVt8PmUP1AEUCFGthpVTmKwlaafPAppy5F89kXbAJd6/VkOOC3S1RG7Sb3pGI3WldceBTmpGzFNUrelJGXrB1wskopt19pKgKV+8xvG4/cw8rd+5b8ZSsjKwL5RVI2aCrRVAUu6u3kSvIO3lMdXYHKe/AuqSBZwKLdudYR8u7NIDJGPI1UmwFutIjEQu8oXYMpWo+lUOkvyiX9Mx9RMnlaQ7uXiElbnTJo6FsquHh1TErN9vuX41XTuc1H9ousGdEVHk0kziTZqpCswaqycyqrZa3EnSSQqikJdXNt3FjHAqndz4MfZtzep7KOrpSSq9tIPIWTizZuGjEBI1TuEkuchs3dXmx9qm5jLmVTZK8Zz9m+r8siZzGV7GqUIQ1QQfr6qqApPbrQ7rnDm8au7rxS8saefnmTIKV5Sr6ekga8U8VevEklUgv+3IXolxFwW8viu8mD3Q/axrDNOpCyxobKlJ1DytzNBd3xT5wxSVStvVO4gAObdyDiBzIazFGvFIRk/kBqRJ0bNJJJlaCCQXd0leRHoGZX3CBb7+XC7CofaDId3EjAETKSu2VtS5I0vKTUXTmZYx6zv6xwEbqxiqppXXpFfal1bN/j2Ypsa1boTX8BZXsacYqq2pTJcU2Xc37kiBfVQvK668RAgx6pq2Z0gxY1IlAvmzULASdu0ieCkqCW9fVbkO0+YwVS6cUyPgqSlm8bNvc05CeqaTdE8dC0qAEG4t+YBJABFUD5hsvSIejEAEoSx2/OVpRkm85VtQRrxwjE1kvVT5v3pS0yKTxVBIOcBSNBVVL/S2eXH5XXazqmoECYGw0iZWC1kBQatnWwt1xAhuDcr0deCBLZSU5FQ7ebexrSDfOBEo1SJASXV2XXqvNVVK7cN9x3buccAmey+c1vVTVaGqEWzWQG/TkFVSJq4Mi7pK/eY/vYJpMp3HUqnyjtUXmVX8lVSzdgq2Qj26QAubRi8SXakqQfa90PN7RFaZHy8mK3TdMz1ZSycDS8I+lZBxeaTZolqqlbz8mJWnaHpuUayxzOZ0HBqRrokNNy3dES4Dt1REAvMbvJePXbiyZd0RVhF6yhKPYrx8mzMkF5pUkl1UgMRPQFItXn23AJfeweWItChhGZLWdPMMysvKEoqAkZiXhghycN360WweChw9wkgWgaRGquKpq3qikIkVgYpLd+3zBqgQpyYjazUu/htNcDEDO7SvITSHhx5C+y+18WLFmpX08lkwxYBJPoGWmF0td2LqSuTAPslUiV0gt5RtFIjLw9eKOjUFZykpE+sYdmvPTDVu3jkGgJEku0S5F9c9LcZiZHdv8Z7bASC0ToE7zIwNGlROYVDZfTLOSm6c+iaqeuq3dMWOqku1cAYjzKiNnL71x2DZgU1pl3TEJSaNSJOZCIfGFwMna6DlJ8F47mqoWmFgFcYkBe1gpVlG0q1pvj3k8U1KMnSrd1GuWBquEubZxQarcxIx2W+O7z4ztVDripRw5dQjmNJxYTVoS5qgg36Eh1bjMfBvw1pvSKGdJRFxkJbBHwFiCI5Ri/JFA9RRxuut3EGJe7/JiNllWxDuAVCttDy4Z0+PQSDd76lk73pi5B4kSaXSPMPtYnHTdgMWxcoP9V444jXQt2oWls3fFipRMs0bCLNUBTH9YPKR+bFspNVgvPMVVXDTRBUCEnJdwR+EtpbcDvgQl0prTOiYyUvx9APW4+soeeSdN2AJJaD1raqqHLd3A2D8R+1irrcIqRXatplsEt2CcnRdNt5KybbJE3dq6DMY+RDb1ERKnalbuHdtwO5iOOOknTA0UiUbmeroKiuIe8Gw/cLA7Zz2q19MxFuOxK0RPwhbjkuDJMT1h1L9o2bLPau/Bjzxm5StvWERt/QLgX3MN2qQMxUAkdQjHaRdPnwWIzQMoJ2NpLbzG4txEStol72JAZy1w4bXrlHneHCIOtoh4RI7vu4apw56ica/BJNSQSSVSVJ0kIoBcV1/gut5TtLkLqxZ3EszpKVb0O/y6pxySRpLkorrqm8AkrkrlW6+y4VRLurTLZivKRIFp1KnVhTkC3ho1/BHudEeuJieql71ogY+YRxTOC0rrjtLpGznxecyIyLhJggKBexThXvSad/pCBbtvECJgPtkWKcSsbp39+Knm3AWGdORRWerWxzCTPQ3bbfjwsmk5FMjD0r3By6e4LMF/K+l8hJRFMK+qCqmxONiUoyQS4Bq460lRcCV+wukr/JhrmhSuT1KzzX81tefS5mBGLpN6wVbEJh4StEDE8exqhxcyol81eapNEkK1VbzvNw5UR5txbiwZqboaoYSiWOYsTOwKrGFcAqq2SmdB0oZWlYW4dX/ADW7n82KEmkwf1BeyjVUmbhWwEB71VLyCXXgs5py9JQtExdE0vULtV4k6D1oyfM10HBBpXAY3kq30hK/cJifkwNUOmeItNphQ0sZESqOZVaNq3nk5JkwkGyelvQeyhviFX9KQKmI2Cfh3Yhll2A0yQJOUBkNezQ4XmS5r9W7x9OEZSWkpFFu2VWtTbpAAiltHZ1fzsRIi8G65xcPhUHA7Y6UxcJNU0NUVOMRV5e6tVD93DfSci4sSWEt/dJ37sWFnT7N43JZ5UMU2UO/aqkvds6diRBuwwRZsEnArFq2iXMJXEPs+bBguigSYJWqjaqqYmbij0kRcjIKhYxXElUtUP0ttwhf7YbrenCUrC1M4cFJOo5VyIHw+ughsKzb0bMPHEJlfwZOY3MRymsCWqDJ3EGKpH4RsIkvevHFSFdZBT6uRCmBXCQlaeBC1YyHSixk0GpIvF9DuuUj6cMVkkVSHijIhPz4fOFdpLEjcWIf1kaQukVWbZQXVu5UN6Vv6oujBVOCGfKO5XOPzaqenk0UQcoSTQBAQFYe9s9rqxeafzS+lD5No1gV+IMbhG4h+bHFGw1Nx8UkcYzbLkXe66lq6o+W4duLlCPGaUsxOdTNeLScATpJsekWldvt/wB3GXuD9GZEIs6u9tT6kaqQGROJnTVOvPTKmzgqTlXL6UXAuGQV4klVbekQwasu6YaUhXZxdYOakaT7VveMXDR3GEuBtyJVJcdUSuEC5RweKfYUBlvlCpXNLtI1Jq7V1VXrGGdO3hR+7ulb1SVDlIDV223XWBjHGrFVzJPI2Oqd9FIyss4dJLkC6qq7fVKwVVQVKwRSuv5t/P5KWacaks11UP1xYiTYohTTg2pSkwzg4qBnoxdI0GTuEbs9eKPked7akB323iX60LbLSxQcyM2gq2Ya0tVTOPqONb8ztpEiPCqq7TNIQEQVHaHWOKskmhDt3jR/UaUrGyCWlpFJJLumzgCLvbgt1R3ct9xeLrw3tqZ/OQLGeoyIazCpt0lHPrHTHfbpEd5FZcBdRWWYdNUoAcktdfM9KjJgfzaOGMqxhKMd96qrt3Om24hAjHnArd1p+TFgh45nVDOPcwzyKXkpBC5xGpSKGqkqJFfakat9u27Dycty3KpGCSLtJbjD0mxCS66rhW4eIFILNvLtPbv2jik5Zw1PQzr6Tx025TWSScRyqDuOtXSVNIh22Xct3Ngt9tuoY6XFUw4607pVoSljiXAmr6VxdMlQMLUrrTHcGDVX/axCoHTWNCo6pfQZR2hIthJJjxLjS5xsSI7fKZlgFwbpFdupxTlCP4c7SuSO9U/LZdiYj4ybfxDyoxjXKsayVBJd3pd0kRfZCRclxYyeLeFOUsVpdNRvUq3nMmmUpLOYKKKKkjZn6rnWksaWkekV9t7Wy7cSX2Q7y2EGKpD1dTDdrJST8JCXqJ6z4f1hNv8AjBJI7UtIUgt/RXDvPq5duC1V1Rm6yqp+m3TxB4zbswmV3qbUCVjANUkNBIQSG8t2qevq7LCHFD9GT09Uab6YVkmcutIIA4F2vJMBBqkYiWrpJd7d0W2jv229GHlM6OVqJKHxKSp9K1bN087YszkkigmqoG1i3rN0IJHuICEujeVx2nuvPd4ayjlpVVKyj5aUcvIyPvueJQj0kgIC6Ei3AfNb1W9eLjNVflM1TYxTymySJGwRcslXiSry0BFXVEx/W3FsAcV7QcrprSUdKpcCkkauurpdHl1bzL2gw5bcdHal5NtcydUAdB0NxT9dFB8+702rkVe9sMLdBW+0PeHm8uHy0zCSk8pFMGHqqQBLVVYkYCkRgP6DxkY7rR9zDqJZVJLrQ7Zdz9Vd2PQGwGxLpGPP3RX/AO+eIupKLjY54J/SFiOqfeiqrc4E/CkP3L/ixU8IvjF9SYcOnKTSulCZ51blNJKOaRqRSPJUwNdCy5JezoIcW53mlSoqSWbrqKeDTdQPzavIiwHgpPbOciOw7e9vAiuuvMSwC5CBRfutbidIrLd24j85HdzYf0jTLkZjg0p5izTcJGkuS4qkBAe0x+H7vThI0FIx6RJN3Add1R1Kfa1lCVRUDhWORSeDuImyEWFxbd5igkI9fhtPw4YuGFQuo8ZhrTy6qIKgBaCREV9xWESF2r081lmE8wsnahpCv5DL6LcoSqiQpOmrkVRElW5Ja+qVmzYF1+7pwzZ0lPOLp6LRbSbWMat1ZFynIgOkdwidxa4nbftu/wB/DJtimLUJIIql1fjWKiKlnBYS1IMYgt6oKL3s0lbOcLju3e5fhWsqtgX7NvTASS4tWWzUTfk5b2eDZ+LEfVxrS8iTNJy2kI+03De1/cKBmO5LmVV2ncPPu2bsQbiLbL0+Uk3jVUnjSwHSZHz/ALUR5/ve7gzLER0oeUzXm7KHXTsZTyqe/lJxaHw4dDTUOqW47i6y1efFfFJnb36LlLy24UGObEjeEkhddtErx++P48CkwR7XEYJCHKu51OChx0UjXUW8JFsxQHg8U8sSDcqfKJ82LUsyhDIuMlEECDpXVO8vZsGz4sQb8Ifhy0Fu+Dl33YaUjeWPSg6kpKdpqjHa+o2fwqiDhLcJOUiESwbMtezTmfX0aUrQzCn3iKRmkqK79IDE/MkdphgD0fLy6vEArIr6aXLceCDSbivEHnrumpRdms3A1QdqOhQH3SPn9kcAVmFQTscCR1MTGRIVdG/q+Eg1qGmG2lLRkoquDuEPXSXM0rTb23Ffy8w8uK26qqlWD5P1lG1KTczDau4SK4PLekOLFT9ZVVWEks5zNq2MXZpAaC7Ze0XS4eQm4iB+K8zsxByCFHuniyKDwXSKXepCu4C4faG77mL6YY6SSupkZSUgxQZ5iOnn0BpuTVjWi6SCqTl+1vvMCs5x38pcp/BiuuqVeNXws0AZqrB9qIs7Q93cV/tbcWRjF2w4opSTFs1ej37QXrVAy8BmG32gxy4jVoh44bMKtkF2pntJB0JexcKXJiwvZUBIoyJV9SG4dRMJSno9VFUbtRM7vuYavmDZuSyJ0egPD33qJuLhV/p5MWCQE3gprLv1yLSsO5JLd8GIdFnKqvODBghaF6pOR1bhDxF5cVCLqtzWjVdqKIbayPqRmqAmHejq3CPx78IwbAGs8xWmQfIM+IAHSjQh1RDrtLHUnOEhIOGzU010UisEt27DuKrCsklk/UeufD7wTQQ1bPvYowJ+W1NYsRRJlH9B04UtFC5qOTUAABuq7FIiSPaQKiqlzifmDqwO5JhSUy+veRqbl0qJmVwmJF48W6eSB5S7eVlmcqMhJ3kguLBmhaYWid1ne+7ihs0psVBeRz9cVm5/p1dIh/0o4Y0hngKR1LaeKRtDR0enbqtnh7yFXQctbPfG/wCfEeUlTYraKtKwL4d/eIL8Mez3rMPHUQ8XTGSVYNrgVDuONSt5h6fPjlw1p5+1U+ppMyO89rMy0tvOJdY4YdZIENliaTa1Ll71UYqlf/0j8V2LE19SKt9aLpWo0B6/VsiZW+6krgTuDRQTcGR3Cl1CPNjzVeSqMk9JnJuVFRBJJyqOkKQdHehg6kfddLaqKlppoUVFJ6Naloqs69QLzcQR/PhFSsqYASA65qCOv/521Ev/AAsMWNDZkRaInA1gvqdaS6prpfdxYk0K2cCITiyBKW8qRjZ8+NKww6WmUUjcfANUZKrrfRWRUvLOB5cfiEbPu46b05GkV7PNFir5tJK/EpKM+Fb6zo2e/pVQSxWXSUC6TsVRhVfhEsWlSP7hcUBqWy5VKFR7nWJZnX8Qqsf6xukR/exDzGVtSTYaTmpY9dPo7oRwx+jlPKiX8DoEQdSTot3zYZrUywS3szk0i8IvbsVdWqTGMvpK3MYDVFeHJaeZjopSTMv87hi4yqqpuV4M2y/slhZRg8akJpTcqPm1bvw4cN5mqmexCoVVR8K6V2BCtT/dV/W21Fs5nhVBWb6ShAIJFqJCWzy34bySqL1YX7juCtAbeb5cMdJYlh1do+EufDdwg/eKFpPLSDZpIXYlQjTNFKmbIiFUVJPmMXCiKuVA5myuXkss8jQcrpuB3J8VoAXtYs1Y9oWs81Em9IAshBR7okWq7ZovpNV932q5eLzYoNGUZTtQSvoYT9XjDXCRelZZISAbR9rmxZp3LKhoKrOBUzBcyNKt2zdV5OR8Wa4g4VC7QEb7SLpuIunGUudPRPXMnqlv3Rh7Jf8Ar71q6CprgtotNl2KOEtTuSdOykdTNK50wdNRKTWPeyKIOHTnUeil3parcTK7m2iYhgj1E6yWp8eDyzz0BnMTjNJ1BOVEFyZs9IbTFW+77W0rCILvEXLjMFMtezeDnjJGn69l2gd0ZE+asxI/Z3l8+L0hT1MqTLVXJzs7TU8iH2r31m/fAN3TckgAh82MzUW/AyETNwsR70f69KOaf07RTets16VeUNGt6alK1QqhV4Yyki7d3MHm3cqkO2wv6bsUiGzGrWnAEI3MR8z4tIxXWj3Bpn727fyjiUrbJfNxV2pJTNEuaaj1SJVq2kpZJAQS/ZcQYGeKG4y9fpWtpKpKdSTSLl9ctyLf7BFhtS01MLcMC/5Je+6/KaUlpyoajU4adrty7bneQi5kVVR+EfdxW1oNf063AKC5Fulqq27dmCFl/kjH1pMKM/TmbSsaLUNUt7pyRB5dJI92LZJZZZV0T6weTuZTlcgE0Eo9swV1V/KZKilZ8GC8aptgsofsobIcdGRIN01OMI141Geik5eIBwDhdlfpEuA9Iq84e6WFqvqGHmagfStJ0ylTUW7EEhjUHSqopAIj1nvO4xuwnPvKYIllo5keoqXcDftSDlsKy24+rEANnpIT24OgPTNUS0xU/SIg6m27Bdmbz0Pe4tFAV1d/hE+rG2MmirbJnJ1GVzBkibRLtJV1HRc+cX9caB+gSFxruN/hBIQ3Yzx2YVTCu4/0QtCvpaaSV1UpJBl6w4OwelrcCR9G5UtvhxO5yOp5nXMtD1EbaZljLilfqoCrvDktSu0rbuUSxnbt7te6jjt3fn9Sa0fudrNVUzMm6YqWdeVJT/0ihmpugVYIIN0k2LULiuFIbuXwYrDZrIx2pJHWApiRWpE5E1VTMLbdu6wuXdidiZGNYEi2lgk0CdK6qTQnQrt1THbcaRj97ElGv6YnppZH1IlrOCDXcuRFcL/h2fH04Yt44tjl8qEc1lJVyopKSluHeDV8lMk6SDilnIqiKXgArStLlxGOIN4kTc5QEGybggEXaipWF58FqpCrCXFvTxyUQu3je9btlyV1R5ebV32+DFX+lDBugXr2nqY4hL7LiW9x/FaP3cfWzLFQcJD+WSNkRIk5bKppbElUlztIPFh88i3MSxj5heoWK/ECaoig61VUj8BD4sNa4qYKglNZAEBT0gE9BC0CP4t+K2BafLtwVBVq1zq8bKNUZsZtM31woLtlECFVX9rdyYhEy2jhuJbcKJnt8WPkVFS8Q1kJGUZx8WGo+drgk1EStuVM7Q3e1j6Udn7JTtDUVBKVDVWcsrTb5J0DiRi6hatZJguAjzCqKpEA2cvLaXTjMvZLySp/NZNaGqqnoNyk6VFVu74wifi31bVStSdCSVtuwjSK4jx9IaMoam6LopOhvWT6QhW6HCj64ea5cPZbpXF0AHRjnnF1/CmLqbW7m0yT+30hRzCWT+1R2laSqN2tQcNCRkhFtCIwkl2pEa5nz2EY3gN5Fy81vPjNtG1BQ0M8bz02CS9l4E2TQ1T8hcyVn+lK7rwfs0MqMhJ6vNGiM3Y+Bi1Q0ngqJOnwJW7T0rBst2+PADzOygh6NdkjRGZ1MVO1s1ddsrpLpH4bT8GGnDFbTUQCLQ6vaFBXJgn9JK6I5q5DqrEwa5boMUzXBUX0gOlwe+7bwpE4P3cXCez4RaxY/Q/MVV84SABBp9HjIefqXdKmf3sZPRYGSxJOn48ReHNyEHXuxMJwwMBRkm/2fKKpJXD593vY2b93fIpDp8OlJmrawAwLV4tSLTrO6oXUoTkaGpxy6OzVknLIV7T8ofZXbfBiyU3mNPVU4Fs4qR9HkaoXE2ZGk1QvHoQajfdftuv/ABYG8bS8lCLcAlFPHKzgAVBIgO+xUrgvHaYc1uDVl7kS8YVA1qSeiufcTZ2/IW4/+y6RAfsmYhgFpquujuUxJWPuUdAOa4ppvVteN3S0VTNKjIEkQB65fNTXP3iVVVMB/ptxeqddVU9RL6YU9NNZZqgfDvk3qqSSt6u8LeKEPdO7ZtxGy1fStLvnDBvTEq0j26pgLkUAFur5hFJCzFXUzuZsJh0sFHiLeze5FfQVL2ht2Y1VMNHTtCNwqi8MUhc64RZlDTj4pKxVlTT+biW7BhApJKJHcSZKtY9UvN9VSILPaVvxRyy3rMniJ/RVdBEDACFJ+gqXnISuxJf1wkVrE2b0qquokXepFIjeP+qxyjnq5VkFuKp4eBOzQ03ttvNzXpF8uJVLXDT5aqgvmrzDnELQ6WR+cqDONcyI2rlmbCj6hShbLwclHa7jl37g2B712E6oy3jXkg3mKqjZcStAkkFSVQS9orOr38XRTPhZd0SMSs2uS5k0HALl/ssQbXPitmDhQ/pa5G8LAaOVbgHz+ACxn6ti1AXuZwvmp5TP3CPbiPzlDw509T7UUUH6CCapWmKCVxkfmsuP3sTScawtUfmCSpBekZK6q5+zce/ETKP2dUTyNWy0wu6kErC1WhgIewVgjs8eOvXcPDd8Uk+Jxft13CpfLcQYzxDq0pqBadSeVEC1PtfXFRoqxkekPdLuW+2zy34AFfZmvJt86YU5Kvk4Ux0iFcRElfGXjDBJzKlHNdwfqdlVSrFmqvxCqC5WpKhYO3Zz7/F4sVl1lzQbhn6tiWzzUS3m7E+9Pm6eTd7PTgxoQ3qqaHEO0ptaLcPHc2aUkkqANY8WGqK4dZkrd3XwkWNYMc6uzPlvl76IWHjfpVNTrO1+ScCKaUcqQfZJE4t+MRIsZgnnVNxbV1TcdSqfGJd0Uku6IldpCVwjyeLEbG0jVsvEvp2OhFVYuNs4x3bakkZcgXHsu8vPiuppgqNTpIlt8wCIrV85nDkp+bVYJBmugs6YcKgjTcslxhHaImS95JWeGzSVAQx+ZYRuYlX0eiDXLqX1Lz9VuXsGuu1VaGPMS7cNUyC67nsK/kwIMm8sJ7Man6kjWL+kYxOMEHDx3OxxEuklb0L6RmHs4MWVr+sqIccBRqLZCnYpcTVevalVeMlHAfpxFqkBgVl3dEG7CepYaaDKa3CjmplqU+8rypKBdKM46YERaKt2pOV6SXZpFuITJItC8Onntw3qSZzIrDTnqXfqrvGQWA2cvCQt6r/sgBUR3WYNn0gpitUnzqLziUp9jIGl60TbURwyTxUyuAdV1cCqo8weG3FVrytKhpCWlKem37l8syaqrpOWmlFOGbS4RMlwus3GQ8h9XJgHVIYjqUdPMsjO6aqTM9834x/EMXDJqYC7VcEqRmJdZe31fFiTyFzNqnK7MsXzqmH1dPI9BwkhHpODcikqY2mqA2kJeH93CjWR/OVmEjQauaERSsHJkKryW19JBsH6ohEgBUuXaNuC9UmSjykqR4DIdnPJxr1UEpmrVJwmasx3oilpaRcOCRGey4iuHDl42wDKd5kK3IdSvVEVjKPakkP66Gmm1KoySHGsJBtNvOKvv5ASSNVK0fCYW4skpnDk7TMdD03lvVkhM3uFVxZca44obdW8u6V2dd4WDcRX4AmTmVbasK2Y09WLNquximZulXqkj6yS1Uh+yVHVEEtx2bRLf7WCTUHZirar64ZsJHMt8KIJGrFthXdMxamkGy68lwCwOmwbvLhVi2AnuijJT1ojMc38wkoFilRGT68kzNLiF3t12hers7q5JXw9Ze1gd19nJnA1UURi40WaZifEepokBVJUxK8VdUiv5R3Yiaky+zapeqHDAnIziiSXFespJdIhX2Dut73b5S2Ygczq8raBZi2q1GmiTbpACSaZqkKQHd3RCAjYPuYkwMyGOpVmh3UvaYzRqF03ol62k2bzigDhJB/waRKntA1UgFIA5h5sSKmVcouopNZudoOnIxiZE6VjabX4x0qr+qtbpC3u85GQ7urAUrDMmVq+WYuXTONJvDkZNUyS7og8Np79Lye3gnZUZn5Qesafis1sr3lQIWA3KQe1AuuDUP2DXSIdLyYcPtk0MmxVTcTVleZ4ZJ0NClQNG0bU8hAi4vf8S94YHyo/pTHn5OgtuI388FPSlMupgKBnmaZmqk3XZTKot0j22d7rjYQ+CzGvqayxyWzQFqvlAu3Ss79JhGtUibxh23CS6qVpgR24AVYU+hT1RyQMKHgalizSNwq/QeERIbrjtSNLouHqs8+FFM607joApK4h7yzeeasqrxAEc053XoKKyyquh4SxT5Cbl5Rw4WYsCeOnAXOl3P1tX2xNXk923BezFVq1JiicIw9WNXbozXTFwgLddUB6Cust28tvVgCrP1uMW9aa5KXby1flxpKYe6lzpQVzy1qDMGLkr6Iq9KPdAgrqtOKFAhS23EOqOlqncNlm/BedRNJthRmVcypmaeNIsHsistFg8es4oVbLEjVVIRIdW6y1LYJ3Fy4z3MSi1SuEQjqbZoJot7NCPa23WcxkXOZW9RYM0t6aOpA6XTjIp00pqbZgvVDRk9/hFffdwp6oCaSVppbiGxXnDlx8qW/jVlGUiiqa4Xj31QKXzDw4019IXrlC5wLe/m0rvluxobLPNmjWZReXFHUtUrxi3eKqqu7GouOHK0jXK7w81pW2+PGapgooph4tT7ZdrEmr9TbOVbjSDzFgr5RV0GVbh1FSlOOUnlSo8L6wQAV10mStt6XCnzido8pgdmElW1g6GOG5anlRzzDqiNFSQZ5eUnVVSPntmlqKnw6CVm8isVsuHwjs82BDWXrWmFlJWo4hfTVVBmkvGq6CRhYJAWkatgc3iv240tMTJsKfJmlW0eoUguZJJoOLXSDdW6wx1R828efzbcDOqKcpWUnBbMKqZrtUkjMU51wkq3SDdeelrjZ/otu878LrfUA0kVS0Rkg/xWva8eTzxJO3XBsLctwWdVhffw3eVGzYLKLFMJCsAbEi57/ENn9BwQqgplF5OE2Vm4EW7gtVJWESZpNSOzZsSVIwIjG37LA3lKAhGUkswqNtLs5A3QWubCVQVAi5y7ofiC72MPevCqGLfMpEqzIP4164KVXZkqSpXKqlduPrMi6y8eGwzcI8qRjJS0URRYOEiesm3dXNxV3gl7m27m3Ymaspqkoh4mzSlbbN56TU0gLm3CkqV/z+7iOoemYir6jThJOp2NOImBkk5ciZARgNwJe0dvx24qNwT1p5TME0O5G6KzQ7P1byCMJVVByFLQcag4VYNmky6JL7xCBbeezd5cXejaNyNQ06hbBUM0m7ZGv6tUuXHddt1TSELxt6THFmicisjYSk+9gZNAjVSVN87cfWkrAuA9UNge5h5HusqJuYkEYueiplrwphpPqgSJIT297sIjMrbrCMNuEBuifqJLz4iXKhnPP8sacWRbMqMbU8tIIGbVXilVbjvHVQXEy38wltuDEK6zEikGazOj6eFCScCBqvh4VsKVl1g7xL5A3YKDikslqg4yBgY1m+WbgYmvJPw2uAL495lzbeTFZcZFUqyj5CoRh2yqLgwSQ9XmkuaB7rLbCsPl6jv58MG3Q/SJYQl+iQJms5KzqHiKYeyTEmof4SO7ZYWwto3ifLyYiVGsC/TUbK1mkzdaoHwnBrizHpO0gH90MEyroGlYZiL+heBlUUhSbv5RyqgIX7istAdl/QO3kP28BmWVZnLLLbUrNoi2a6VvVt3cuGsWCGQKLDtXKKseWqWYRVE4bUDxKb7hVUnVpCl9X6xIj5Lrfb27cajp2i37CiVKbL10z9eifrEk5RVVkgZbd6pjqh0+TfgOdn2n8+n48HSDOQj6b3yL92LBIisPnJI9IjMj0rQ5t4eXGkYuUioSLiwhma7lq9b8Y6fJKpOQdKjtNIlTL7Xy+xy22YQVrvQ5BOXyQ7qijWzCl+GlM2kmzFvekkSfe2q7bwFJIhMOUfZPkwN1HTxg8JmwkpMUW99jkm+gkrq89wXd6VniwWK+zLfm+4CInqVZs7u9XbKi8X3910CVheXpuD28A+cdGq4vcOZN5qlvULuiwzt7AnuSKpqSDanU84OoBUeP6kVfN6aZBqlwor8Lq8lqHJdt3qlb47twYo1XV+/qiNYwotkmrOP37TO5VXl1fAHsgIjiy0zOM459ozbAHTdokqTVMlwuScOBETMh2mrekNtt477CuxXKqoH1DDx83E1ClPIuDVBxwjNceBsIbNXVC7fds5eQ8fahjLdTa1VIutRJUR9IuUC7hmXtFiJXkn6496fuieJxwuikj3/L97EC6XNdYj5U79o4Jpo91RuUh5l4TMd+JSmpaSi5pjJRaxIPGit6RaAubfNpHsPEOJbb+UcE/Kel6wY5hoxzVF9ESyTPjxEm7oXBJWiQDalarv2jdy2li0yiKUCMzUbF0BmXmCo6qen6AfSrdJW50TFn3AH4Cs5LsGVKmqMSyIj6qXjaajahkJFUV02U2qk/QC4iAtK1XSS2ctw82G9XV/IpNXkCzqoYiCN+Dh5TaSDqx4qBbyO8i3ePxdePVpSdYLyEXVU3TFMTzxXh3DV3CU+6IEg6El0rUm6vT4vbwARk7gOBaUTslFWTJevMy8slEZui2CS8HGuteZ1HiqqDkDC21VVVLZ0/Zb8XCQy5ks16VqTNd0/XJ5GFrwzlkqIjw4XWNdLuLEry5rL9l2Ldl7UHawOHKiVaAg3MO4YGugMpT6sU1ELd6FrcSC4r8Z2zGzhzNjnz6mK0oFemm6TfQZRrSGQ0mu7YQ6o3+Ll34Cg+8fZRUREeZO5ibYN3EhD5pNoxsm1YaXdJcY9kTMSstV1SAPaJUT8uAVVCtBoEo2peFl2LpJUNVVzJJLpFy/qh83jxcW83Ukk3In8lU5R6oGAiQquQK67cSGqX83DmoqyYQOXKlOQT2XZuJggQdIJtV2LdIA2mSobUjuDwiXNhtTgQIcoqzdk/NTLrLCefStbA5ZuHAaTOSQBJXQv57kjLYHmFIjxsBw/pehIp5XNH0UK6k0gkuEg9jDXXtK+1X60qXdEO4AS6S5cYT7O9OZVylSlUOa1cRURCwpJOBYLtTX9and9laHT4y8Vo24LyNW5RVpXvqTI3IhOsag4dUxkXpG2ZoaXXoGRbBtHmNLCuutwvPkQSRjDmmBq31YwmM18woOSbvJDhTkUly04TVS4f7I1SFugJmIhu34nJqhsn8wZSaWqOEQpxZo3PSm3K7ojV0jEQO1IktXbu7273sc0XTXaEbovKwXolmgTJrqj6rQ0CS2kRjcboRO4C3iGKvPJLBbXczkFLzU9IKmKorxzpyuJlzireqqlbcOy0MDNDCIjy91TIiJTVXZWxVLx7V5SlSU4uzSepG1UbNY7jV3FvPel9YS5i29OKjVlTPH8a+WqVFfinvdFGsidJKiqVg3ErckFllpbzL2MdULlpVDKQ+m1DUM8inyK6pvxXvQAknG0ABfaYeQbMFyYpRmzdTVVVki8nn0Pw/rRy7mV+4Stt0hEGontMRs3ldi4X2gLVqVRCay/KS9SU+zThIFFixIO/1HLMF0iSDn1VbjC75MCeoq6lXTyQRVCMcunY6Tp6TW5VX2RVuBL/NW40oNUP2VUN4qhWbt3erpN1xSFI+95EC4i1x4LL8CWuMsTmaueA/rMkp43CpPI2QK5dmAdJF/M5MOmHx2kgSHmQpgnTaPlmbx03SXbt1wVVTUS1RIAPkILhvHy3429R2f9DSkeMPRtGVK+j51Xhfou9qNLQXMQ5kkDSXVaj4NBUbfcxiWoINanH3ALv2LwbztVaOAVH98PeAcX/J+jagVZrZm01V6UU6pp6lpNkXSrZ4udhF3CoCQBsuxVWsA8EjV7Bcq0zU2VtQ1DSrqUaylVNkXpGkzpxf64hGAPKBPDQuVSvHmSK/Ee3y5ksnm8PmFTxi8lDQNJ1KQjN++Va91v2qkAbgO3l5x6cPKn7TLWZoSOfz+sM0kRNfVJVsgoqVwWkvsSGxUvFd4/YxS29a5iRFONQp/L2Tcxb0zJw5SXVtdb+64pdJLhzIPFuwjxCq2cqOwiG9XBPOXNypYNOk6vivpLTks3BVi79YtUNdIyuDX4gV9JXm/exU8wKNknrV1K0NSVK7GoaTFB0kvaqPOaSqqAhf4xC3yYq1RUXmFF1O+kcw6gkKMfSyTdwzhBS1/XCXLt0rUj94r92KhnNVElHvBh0qZKPZmgAtZR3BpR78lQ5tJVJVX/a4ZUlMGboQrjulQlRZvz09ArUlNwMQkol3XFsm4oKl4tWzYeKB6PRaQ7OfCYksZXqrEoofOSh3FhUenDGMdIoddkuAlbcI46FXd+LCZHq23AJe7joj3YjHBQkrplfmD+bWpk6yZg+9dRtisXoaGkKt24VRVErxs8O7GksqXU7mpSlQVO6m6cinLp6DpJpw6Ug4dJBqkaqrMCSsFLd3tl9l+Mmw1N1DUPoIKfhZKSs2mLJma/wAoY0G2oapsjEUVVc/4uk05VBI38fTuq+dNldLYKoqkkAKkJFf3o24BrGmnPEiWDIFIV1lo2koFmrT9FLytSmqa6pCwjmjIElfEQOlTO24bBVu8vLgE1tQsxRpN1plk8ak6vv1EASa6t+9JIklVQP5fZwflM35h1HqRU/2j3xCreq3cxYoR5JHZ9qrw6velttt599123EE4zL+jTOQcuKkqyoUQO7XczzyxyBjaBmgZEBiXiv6g8WPUxOtaDU3IGs6iYePFsy9pymKqqBOKq2vG1IxppGr6yXYKvAvDptS34aylWnOJrR0WwiINiaRgqIoAOvYd3NbfddiPpeBlawmGNPQjbiZKQVBJJNQgEfiPBhBpkWlB82hayyc7OOZTBvV9VZTZySsQm3QVbsrYlePcVC3BIVS0hVIbN+wSxd8rqEzHnYFZnnBIPlSin9rAl62VGUVArtqpG6JuCXSdoEflwHst6goN6owyXzIpzMr6cIuji+PiZYVzFxr7ASSMhAQHm6vL047zGyybKzDxKqq7lZCQSeWD62lhcmqAmW1ez6w3Vst2qgXtYSVE8Sy3SR7Xsog1BWtGLwUhQkXKs4Fqk4d6rZpPaTJ0e69KxqqkZgfLcfLeGzmwFJClsr3ijf8AN2weSrr1cBOI9sROUiVJUvtVQLSbhYAluuIrvaxaqcrjItClpCn06Zp9NaQdAwda7o0EEgC4tckrr1S5husL58RtSP8AKNvwtTUDRjaHLjEkmsgK79dqCQauqrfbYfTt8N3L1faZkqfSMlcRCepIVBF0zEKKHJeo6fZqtVX7Js0mSFVsBgVm0N5lclbbf7eCVl1mXCMqLUkqXbTkYzj2+g/XUi2SV3UBEq4SV1btvOd/tYANeZl0fPVAnN6L58+ZEGgo0EmKWzqSLVvD/RYHkpUs3NiISMk5VbgZqpIEvsSu8I8vSPwYNaoyNoc3cgyfGSlJ1I6jkJqp4GEXaw6S4GqJOALS1fFYIie4SLYG3BEjO1LmiMuM3PVfJG8SJIkPUzdhH3W9KtiG8eXb5jw8y5mcl6PpCmp6WyzGp6m4l0bxCUlGvq5VuKpCPdArqpEPnAvfxcagzwoCNhXTBenIxm8ZKm6awycSweRdiqu8ebvbN3Nb8uPr7nSUMuSk0PNJRMdWNGVoLqpqgRhWLp26VcELt4kVrcR3pCgCRaW+6ywB58C+QzhqwiTRhngx7VpeLe0bldK7Z3p7w2+DS9nHdXVvllJOni8Bl8gIuEktBHS4YUFf0twpFvHadnlPy4pDhLjSdSTBsQsUt38lf082LmaYGxVbjs1ODmHPRwvAjTZs28gYGqlwor3GH7Vxcr5ufEPJSj+XcE/knJLrH1F932cMURWdLJtkAJVYzsFIdxe5iUmqZqGnG7VzPRDlinICZoa4W3W2/vD4cXRFUSUO6bm6GxK748QbhkCTgW3GJj5i2hicWVMB7oxS8xYhZQWwiRisSix+EtuDGFQ6nTGnwXDWVc92fLpnze9i0RNGyUkjos2Ai3/WqqgkBH4LjxXYIwFheaw/a3F5cX9iTgYFE/oku5TO8+JQVV3BdykO4BEcDVLjoEmdM01CSbRkNUMco1RXYTiTMFQvFNBVUhAytMgHaN3vDdjupl410+TbRE9OSZAOkQyjcUFUju5LdVUenDBvLzYEp6rlZBmLfeSSTwht9ndj0lMzcs3cGvPPngqqhqpOXRKkqfjLdv8AaxREpSVhOCGlR6wrN1CRcI2qAe4SEMIqEZjt+7jq14Y6PT4Rx03avHDhNs1bKrrKnaKaQXGXu4tiYoaU06cTMw/J08eOV3aioALhRUdW49ojd0e8WF1J4Jl+3CRp9JWU1UklZAnDonSohtELjVIOS0doXY7bsJSLauHjxdVmnpH3SBircr4VQ1RMPhxFvnj9V8m5da4ugFLcuqRGXm348JdCJVwryjodq8jTqaqnYx7hqeg5Yr+stJUdukSCukqly77vnwJSa2kQJHqlycuCPnZHOn4xOYLoI9JSoErVUGjrXFI0hHn6AI7rrRPq6OXA6i5x/Fu03LXQXUtNIE3LVJyFhfslRIMG0glljqSS4eviibSuXNDKuCOps1makTHoA/dIwyREqV9u1IXGgJq9J81uHmdFP5P0cLWBo45d9IA3BfiScNyS3/rdJdcLrekdLA6XeP5HjAkY2Fj3jf613iXBql5EhDZ8uIsfrCe3StRHx2jj7knKREvguCAxEU8RkEWBJvEEVUnSRAaRapbcEOPrKjaqWszDjX2sYgIu4bQ1UvdV6ffHAsu1SEBMSv2CIkOFm6qzNwLmzSWSVu3IXbxx5xkSU2qt1olcaqZQMc79XRMqnKphv41PVS5/0RCY7SDy3AWI1CJePE70Ft1hnaS4CRW8/Vh8tXJzlUrTaUWxjXDhKxUm16CRH1mWHdRQcIk+arU/PRT5Jw3BVUWmqINlbfsiJW2/l6bsCRINJJuJC7qFVXgwNaxI7lua3VK7F0oucjYiQvmahnopi4INcYZASNezzGqNmKXUiCzpwOhcLdULgESuEfGOHlMuFot0QJAzeXJGAivaQCHNyni5wZtdKoEu1VrrSRp6RtWp+oZNy1Bweg0khLXSAuoiuIOkRxUHCpiN6Vt2L6pOUzPUo3pv1OIzWvqiu2SFLffy6QJFft8JpeziHrag/okozBeYbO1HDdJVVEQJJVAzG60kjETIeXdgRvoHSSMc16hVCcSLncCplb5cT9N5e/SWnHc6hKpis3IhFsR28u7qxFv9hJXNiUbgQGqIlbcHtYtlKy7aSlxSgmKcRFNbFVxVcbiL2rsFvuOAzNnShWG2zdi4mGXRVYT4GMDGppJ3fWnJIXWh7V1vw4NCKDkUx4gBLbzct+OWskDpHWauLh5rhO67BNypqSdpmNnqgh4Km5wUhSFVpLRKz36v1KjYJCkA+I8Yu4VhXB6UYrRsMeb2t0lI5ASVNsJCe+k6LlON9SPQdOb7ktE0vsOW8CLeIFeJ7sV2kXpiTGVpyBgWLyPLSbtlRJBLSPd9v+lLmExVOwg8eImr65qavvqUpWaMYmHELshaJCm1EyC0ErRtFITttvHyYnouSjQqJ05ohnKquFYtIEm0eegaEmXOdzdXk5uU1fdwSwOU1uQL3auyTFbJF+1iXGbqTOMhR49VwVPaCBN0Gm3vUiMTAxvVttLd5bMD9ZnT0jqLPXK6T5JLSuhkEkkiDx/Yc3jO7E86lH89NIyqskqUgAmkk5XfqiaSvNbcrcd3lExxJVFM1hJTAhVDkl1o9INVCbaocaIcx2XiR27tnNgkat1UdTBVl4k/jIlP1pWqq8TUSvqtBg9BLhxMRSK5VIEtlm0rg39Q9WK3MPAoiQWjamtl0ydG612jAmxEdu+4jtvvDd+LBYrCo6YdMVAi6SjysEEhRj41Jc1TvuvIdJA7ve8GA26a1bUDh5CU82jXKYNUnTgeD4EkLC2fa9W0ern8mG1IfWB1Je+OUpxFvxSLF4bbhllUtfTvL7I/suffdzfJ4sXxGvjQyxdZdDHOR/hT1y1dtHukQq6WlYQmNhjZ04oZShulFnjpbVWMrlSV3GJ9QEV3Ty+6GOweHaNp7Tu3CW3GXq3Cz5itHTMCbAiSuNM0BVVSxMpJQlHyE4PdGqugvvQAC6kAIQPlHoIsVhFldVv0EeU9UDF44vVVIrWaSAdOqOl9kR7buXF/DPfNNeCjKQiJgWKKFiSAxbYUF17OQSJIbixYnkNmjm1UkBBVTULanasi4k4thG1IwcIeuklVSVIbrebkH3ebBFHU6u32oWpYNoZCgfWTCj5eoE4RdyhTjUBAX5SDwHJxzgNplcA6p382zVuu8u1PMCnlqfjUY1VzKycS3aguzkE2qSrVfaJWiRpCqCu7lIh5cV19AwsRVkgwlAZqugdKpEmQuhQFW609Ikttu3YWJptl1Ss411qVeVGxkkr1SJ6kqTUrbiAVXm28tpfoh9/GoAhAR1aUk1GSrdKzKyQvGa83JJJ6SQME3yWkQnfypH0bb9pW82Jxi1hEpJRm6RSJ0ruSXJUC0lfaNUdp4TnElm8561lERmiV7hVPjxImqu7uuUg0uoLdlnhISAYv1CzeSziKYIoOY1IrClLDFLluPbdvG/aHuFj6UXTzBUmiIAiphuJquCZqhpOP0Qp3EBB5lTEQDEl6K+YKpwyyDlONeQSWk1dxZ8IurcqRXqmG8y3W3c1m3FDGnpJUiWaooJInZ3ZK9GHjGg6klBeLRrASbx7c3i5CW1BIOoi+X3sKnGKYjmJRTMSfhqFF55mNWbBRrUL/ADCSkFjiXC7NddVJzaCtzVXdpF3oARc3iu6cU2qKyYJPmb+IlRYt3TUG6SjQjFBU7R23JWhd47gxF1dl2tS8S3lWDkXTjVSFVy5dJIAQGF1iTU/rBiG4dXaHlwzeQcxFsUWCppkoqkDpeN1dXefjHotC1W4g6rcGMMNCMpIFx0pbUoM9FMHRIyjxpqAkAfWQFW7l3l+Drsw+eKw6TcpJdGIQa2h3iQOEhG/kIsVuSi0XTx8b+KKQkHquqlINHGxUzPmstG+7lt6cSCMDUj+DdU9JSsq2j0iC1ouR8ORh1aRkNntCGCsgO8hs0kmoXeI2PEtN0kCqQ+LDhmOvqIk/Ytlg+yQVV71XyiOPQOYLmkm6LZxFISDqM+rsyVa7Ukv5W78GK6pUyIzw1MEauq4SVNxa5XFUBO0rN1t+27A/UWjKUkWNS6A7U2rdCOcRfEG3Q4tIg3cqo+1iu0w1pmWkE2Ewiqgsd1pIK2pF7uPLSLFxqarlMiVIzL3sQAiDeUTNDVciJco82GVKyYNE3JVOPjmi7FGmOpun4xuTdCLHTIryIiK7Bgy6p+ja4o8qQXOSj6gheIfs3apuCi+H2kYqk3LVS5SK60g5RxmhFdyY3lqpl7eDPk3VFVU3CzDxw/KKpt61Nk6ImRfwnfzoJLnyF1W8mEB01QJSFzUnD77BNRimUDTlTy808hPQDNOy/SXbPVVUlbOjqPd7GJBag8wknnDfR5DUPn+tJCKXn1T2e6WIVwDBd9fGvF3xXatybfePj5MOBnJ5KHsjcy5WKFXVBVim9XSPz3coGJYZjmpCRNcq8MSjxDUHRs5B1pGJJa9zUbC5BsG/d5cRr4OFbptl41mmi7s1Ut5EIXdRWj8uGZPG0WKLl08bOZC/V+ycNrPB3qRe10Yrq1WoqkszawMYSipX8Smq4VV9neWLIGpCWmCmFpF4wRsjQZpOAcGNyqVwklZ58Rr6qqwNuoirwaQqjaaiDVITIPbAcctZGSBFZFu8QSTcGCpoKtS5/Fvwxnmr8ItvUIyrFXiy0lUGhWqpGPiHHyLqvbyuYUzj4SVkluGi41y7U/VNkiVKzBQpd/VuQ5DKmjICtMCFjYSS4JdLzbr9UfDtPAlYy8lHOBeMJJy2cByqIKkJj7wYvjXN/MhVEo2oJIpNqAHc2khSICAwt6/vc+PCJSUnS0q1S2czmuXSKNR0fFINQvMVCdEOkfj2b8V9u/p6S1r6tSQddCa6S4pF57krt3uYa+q5J/C+tSptmCKpAI6DgyAfaHwl7eFn1KsF0ycv2yUeKu9BiQGJKgHWIWkHz4JEWktIiNM31TIpLaOs5UWS70FGz0RC/oO7YYF7mKvIVBMINytePEkTvSIVFQVAvJiS+irMiU4MFRUtt1BdJCXwmQnjl9QrZBuLl1KthU/UEuGr5Pd9/FikJKhqQjCZUWWdOQYqH7Vpe6GHkfKSUD/BSD8XLMOpsRJH7t+JxSjXK7UnLK0SDcJEXdK+yV2wsV94udP+lbjI3iVgH7NVLkwU067tVRA0epWSLzG4VZRF08l2yJjaWuJqpe1sL7oYfDKRUyisihmXFMXB7RUJqrq/PbiHpNhMVQsm5i6VjCEyv/j9t3ugWJCeoiqidCt6nSMQCwxFUFbvBtP72HjDT8ZRSpwmtslCzVByq4p8fmQzVHoUVuS+bDGPyyW1tFKp4Mk/1mqZfcxNI0zUjdMg4Z4kmfOKQKj9y7Eenl5CaKxv+JbKH4kl1fwjhkLGbyoEiEOZIlREqwIgD1Q+G7qVIbvjtxynArJEXFUSuQ+Jo6/nYat0DgbgazbxIekSC4MclNv243m5SVUDlV0rceKkYHdpXhdNTCLKiQ2SkJONi/agrt+DCajOhh2ITcq298vx4Yp1K8eW3rKiXhLbdiUGo1tOziS9kixMbeJjJpxeKp5YrzqjeFfOAGNfKpm3MAUUS2D5d44rso1WiBFFK1ArrLRVErgxM5jycka2kcg5IPD6VS9Po/8AkflxU2ojorbfRy/8mF9pcJuoDHD4l9rPS0i7kPlq8q+Wb1JJwSb6JbmaSSKm3ilfJ47cXLtBT8XN0gzpRlLMYooN4qTpgivr8c6vtH7IbA0hu5jw+ouPYabNLgm9iYjYOmP5B/yej8n9jBByKhYYpiK9JRLL03PX/wCX8qAf2e6L/Fjmd2uDtbczuj3pyto/F8f595dNpqdqgtAUbQ+t3Y/Gq5RGdU/mK2a0nQmT6gMW7A2CsoSSTu4BEiIjLhdvshbiRjc4O1XT9P6yNJ1T6tSMEklGzVIVUtv2QpWK2ezbixZnv31N5Ms/o69Xi+KcDr8Ep6UNX2rPT6Lv/j4yxVVX1ZIgCMhVEs6T73Ys9VP0cpf3vSWAaE2al7EWmhHCX7cfvwQJYHH0ki6Xagmnk+mzqirMzkG4K8K8QJ61SNI+obdAfw4rtVZtZBM2jhtA5bS6r8yVEpR2kgS65n1Gq417vdAcBRu4cLvViXXUU9Nv90y9Pp/+vhsCypt1hNUy9GkX9j0l6fTjZN0LLZ6cEjcqDU0jX8rIqqQgT08nEuPsmQv9BIT8RCFoH1dGK7KOnKTolmznVv6S78kveLEYn9mWFGPp9Omt/Z9PJhlg2Le1Lswly1brPHCbZuFyyp2iPLceCVlxFQUFUzqHrHL6o6inG/8AF2ES4SIP86OkqRj7BYF4/wB73MTcDIP412utHPnDVTS/JeiqQen/AOT6PTimq9WWGKuptwr6G5eQOYNA5MyyrOi06EcKkS8a0RXNd+6cHaQXEKSu7b9kKXUfJz4C+YbrtLZiwjqn6woIUFgsN1LeinVWzpVJLlI11SuH3hwc4CTkv63+IdesHOt6h9PeapXdP9/8v5cEanJiWd1FTHodSjtb0OYciX9Ci5Fq+nb/AGS/L6d3/wAfHGGb8VG86/lDiUvz+tbM6aYCOJLAdTZQL0pSMfVk9m9AyrdJcP4N9cKquEFesdIQLwiN+KeVZU26T9VPlnxRaqvGcFGnoDq22pXEYleQ3eAcHztmen0+rlEvy+mwpA1fSP8Ae9J7t35P+X/HjM2Xv8Ykv+oK46baKgrjR9ae3LOVrY0rsAUn9NGcC4FgwWleHbuLiQRX0kFfaDxYcSldMKykFmy8Uxj25JaTXVSAiEQHlVV2meB4p9th+1ATWG8fQX+X0fl6cOerN9PSl2eXR0KRbwMCYlxVUppraV6Q8OdpeXDwaG4gVlmUqBNW5bl1AtCzx/zQuxLOkkvpA87oPskun0fssOatcOEFWSSK6iYJgFgiXp9HoH/J6PR/cxQbxSX3oQ+cAik4UBByK6YHYKojbdhZHlHw4RU5vRhZH7IvZxcS+LZ/9TerL1ZWlQ0YrHpfw21B0k7SYkSoml0Evyil1Wl141n2haVzEmKXKSoZyzBNJL68m2Znx66XLaKoFy7t+0cVPs5ej0MshKYWZej0N1FY8LzS2EW7+/6fR/dxWM8qsqlCmnKSFSyqYEj/AGRB4p6PR6d//J6PTjil3fwrr/i4Ixxw9H6/e9C2NOGAUQjgshV4vNspAmwyTkUw6RX/AKfDivxaEIQ609ULxijbuUQhiXP4rhDDidXXN36PQayhbP75en046YOHHog10fQup6E7+S702/8AyMdXtjeAtCsrVaiV0hac7OTfh3M5N1m8IyAtexJBKz2QEj+fBQh5nIql7QYMyfJ7FQTUZEufhASIx5ebw4zZDIIelZx+VEPT7voxbEfT6fQ4/sen0+jcGG7d16tsbFAO0AP7iL+a07G5oZY05pw8W/QjNUQVBpDNTIiMguMVVbbLvKOHimaqItb4unpIWqt/12UNVLzbdvm8HgwD4WPYeo2DvgW+uL1x+RXSG/0b1f7/AOT8uL1lX9WSaJNu6BU1bxDb6C5f7vo9H93EXeIq6nbgyUV8xstI4fS6Ml08rIFW+irmXKsWOrqul2zziXFl+wdILTS9okixSyKia8nk2CGXUvILGuaXrKdqFdJBLwWl3QFv6fNi5ZXQkM6p+WXdRDJZT1s73qNwIub/AJfT6MPMpY9g7UccUybrWuB/JqJiX5N5f8vowqwdfqTwAzx9KP6ApR6QFUuPyyRgZ5RgUPGS6JjYC68p6sEjC4VbRAvHyXHu97EgnkTMSkgo5YQ7NNjfs13SS5c/tK4PayKX5WzvSDXFuHo9Ctvov9HN/f8A7uHo/wBlQfy/2cb60cD0jrcqhwi/osfeOK6ijKLQYIGqdnZ4KLhaBkmJOtX7CQaqpNyC8do4g6qoN/QyzNF/TaDwpAjAFGI7BDxER40RJIpanpW0g1EwOw7fRcP+T0/3sDulJybdVGKTmYfLBbyqODL0chf3vT6cMbvwlb6cYMyH+KW2vimsfwm9hgSz2tmlTbCYUgZSNVYpte6InJDuP2rrMWiPCHqVim5SZybkXF6SQpNwH5j9rByrCPYPW6wvGLdf0flP+wqkJ/8A1/RgeU2Ag0Q9AD6B/IH970fk6Rxzu7UA0JdDeK31DU9aGR4KqPqIYU/Ei/kZVnGikX265CO/zF+7gX19VoQiybOGqpKTeKpXqkgh3SXvGXN7mChn6kl9AlldIL9dLdb6Py8w/wB/GWB+3wvpccXtRIwtK05kDkPkJmLwa1eZ7klLOLHTqJbN9A95fZa6vOr7AFjU9WZeZE9nqLgXETl3KqqGqYs5IOFJ0gfMWqR2q3W/pRC0PNj5sRgjd/c9H9CxsSFXXd5P5dNHSxrIDByCnoSUL0kHoPjR3fk9P9j8v+PGfu4ui5gRHjiOPL8SaNhhgPoVnq30s2tTQtVZn5WC5jZsUl2pVCaC8iV3P3WkCpluGy8LMWCl555VcC6bS03T3Cx4Gqyi0kFWySoJBd+lIgS5enz7d2AJTTt1JO5J3IuVXS/fd6ufpM+UP7/p/s4TzLm5los0Ray71FP02+mxNwYjzf8AJ6PTgfAcCxEPiX3MJFfN6o4FhSLNtS8ClBzxq6oKC/SK1uYb0tLS5TvSIFbNwdXXjMuYBQ8iotMVHG1dKqJbnS6SugwJUz59VVIucv8AewnFLKmp6FTVMj1EBu9Jen0+n8lo/wBj8v8AyYfZ0uF/TTMel6VlPSHodF+QbvT+T0bf+TGgo2hYw6BQTrhEaiqf7OeddeRylQUXk3UBRoCFqhAXe3ctpK26vuYvT3K2qsv6aZ0M8c1g0fVA8BWbiGFOqkvs+yLVHnt5rLefB2yFq+rKgpmRjp6p5aSaIw6BJoPHqqyYem/+76BIvT6PR6cWHKeenHjt00dzT5dAWpuPQmo5Mg9Curz/AJPT6fyXf4/7uFD94cwLoijGWBwWcpDLmey5gpSr5RgxBG3h27SrzJtMkGr/ABpBqdulcVo7gIfNiQo6tq/rRq8cTeaz6DpSPGx6Ue/HXS22gqCWv9YG8Q5Tts5QsxPdrAy9Gc7ovQXp9Hpct2pL+n8v2vp3f2S8X/x8anyLpamQyVp2RCnIsXbkiTWX9DNP0KKhfykX5Pyl6P8AF6cE4HmNZuPvqrp1LHlX1lmhPIxNPPsy4aSiQQSSCb9ZALxVLdbroKvLeUt5WX7Qw0h5QIZNFm6rChV1AcGk4XTdOLxv57iC4FRH2yD2sF/tPNGsO2FKJbJMg4ZLa2D0J+j/AOQP5MBp59iz9v8ADgxjDMb9Kpc3Kl1RMv8A1pwlJU8hUDE1TS4tKB0GrpW0h2/F5cRmUH0yiKoUeQVVQ1OSUegqq8KfsSQEBIe6tVErzK7kHfghxJkg/TJAvSn6dX+6Hp/J/wDWwEaiMjrGWIy9Jenj1f7Pp9P5evBXT0tFgqg0kvoPHF2iXEdHs5p5GqLzSGqk2gpl42MTVu0jXJwRWJdVm3m5cUCs8mc4GLooqsjjKajW6oL68W6Sci5OwRPcYh7NvTv9vBD7KwDLZBVilKj6HgJNlVQFx6NT0CfCnu9HoL8v5PT/AI8QdbR7D17AK8C3vJBv6fSWkP5fTzf3/wAmM3TOY4ESZPihZ+bmmIlGBpganl9aQcGqgL025NSO60LSNLvbreYfmwJ8zGsw9byDOSgYhs1jHXB8WkkkSt9++5UB3j5gDF3rCXlpaf0pWUdvAbEPoRFwuSnoS29PoL0+m3/42K7Viijqgpv0OlCW0XQaep6brNg/3Py/3MNmnSkKBJsUJ1JlzRrWQpn1bEET1VJVJ2ukC7pqY2kBoOgt0sFKXhFpekWsrPNoaqaney1rqYhqojhJANw/WkkkiM99papkQfFjPT/+yC35f7O4vx4I/ocOGbWiPS0XUQtYcT6NMvSP5FuKX7z+x1eb+7hu4OERJUU3v9CvGb2SLnLJONqFhUbOSg5MeHSLjxVMnaVwuLe6SvEDH3bgvxUaJplar6ga081RdkTgtyjZqq50g8RJJCRn8OJatTL6MUyN3p/JxEmX5Py/370f7P8AlxbshRE0arRMfQSZMA/KHp9H5R9Pepf3sJX3cQbktOw4UEbl4KmIVqxo91mbBpDDoGwVKSkTJdBUC3hqgqkBjuKwSSI+i7Asmpx43qZRmeZ0mlGoqgDWSZQwuW6XUJD3pXCA+HBBhWzf0OY30ehBP0fUW6n9gfRz7N3+X/Hge5+PnvpinaXpeL+kBfN/yDqen8no2f8AJhZSYakBUPkKZTETRPC8TGz0VKvnYnc7bM3Alv5i3urLvLgcuKVWGQsjdV83337dI9m4wu3Bd+7hs2fPfRUDP8jxf0bkv0npwdnDVt6aXWd+lul6V9RXvbPRf0/3/wC7h4DA4CluFc7gSAz6mn7UhcpRr5BuZ8q6SpaXtK2jf8GEI2ZfwyxOYh4SCl+1dPafu9Y4ucksr6XYj6VT9Po1Q/sekvT48UiV9HovT9P5PRyYpdwTmkqjd99aEp/M2uKghKVpXKtF88dRDBVxPCkgWlIO1VS+370bx0iAbvbLFZqKlM0fTBuH9czwpRaToGrhkU4k8cc3Kk11yM+nb4sRGUcewfO3HGsm7i0EvyaqYn+Td/j9GCVUkPERsvCqx0UzamLgC9BIICHp9HptH+z+X0ejCwehpyIolxgVV6JBhGt3DB/AvnWlekzQkEEmYpBzbyVQK8vMNuLBS7BtJPHTkcpZMW+kb8F05dUkl0gu7q5ukPWXNt68X+IlJJzQsWu5kXKqlyu81iIub/l9PpwDq/XX9UOy1j/KR/2fTd6f7OL6bDreBY+8ljp4gUcE8mEpWUp1FzUtQwrNqrfakm4SF+gCRFZdeWrzcm+/yYFE5MStWywuVeLfODEEErr11SAOTDXnVbie70a4/wBj0/2caCzQkH9I+n0NKTeuIVDgVO6jlCbByD/eT9Po9GPssnD0Jmzqxkkco8mXb6lHzaraedx7qSO1mv6xQbK2W7krDSXMC6uQTswW5aOqeNp1rFOpXg2MI1BJJBoKC6BtAH/qY2HzFq2FvwBsqZiX9MrTa3plHnpUcvnCa565flVC30bS9P5d3o/xenBSzFQRCHkkgRAQRbq+hMfQPo9HoDf/AHvR/ewAR4uOdBKiodIVHVUMDMprPFQj2KgK7EBIh4xIw2GI+HzAA3+TA3qCLbC6E0H5Fers0EtIS99X8WIma/sgPp9P9n8gpfk/xcuIdmZHFF6TL0l3/wDf9P5erD2kaxZDTikVRjmFqU5RMazcSArSk9C04zJ/3ruSJJygIECtpigl3plePTsxFZiS0aUgj9Gq/kJxE0NJ1cq60hVC37Ild5pFcRAJDePJu5yJdRb55BEv7KfoaMk7PTy2cPy/k/5P8WBhWaKX01dJaQWalttvo/J+Tb/Y/J/yYoNzF09Se21gWh0qlKXW2Dbd5sRL5mskRKijt6rcWupkUkJddJBIEw1T2gPo9Ho/+R6MRTj7MsTZKJImrpweHUq7cY9do4MeQuVVa1tUKdQtXklAxLVJUlZpJ0k2LZttSNUgAywIPR9sn7eLpSVSVEcO0p056RKK9Mr/ABH0uj9Lf/R/lt/+pi2rPFtrSs8xhqR1jezfRj95NIxNZVBIMWhhYLRdJ8ZH4lVUkiapcxc7genBdUzlzTygkXDeMr/6WRbdq3B5HDYKrU7OjVIhMx2/ZHYWy3DSia1rJeoYiEXq2ZUjvSp+ThDfq+lH8lvg9JW//UwDs65GQObavzfOCdesm3p1vSqXpU/sK+L8v5cKAccec6CxRkBxWnMgMzq2zMJ1AtQl2KbIDfvNiEQToCL7JACu3ct6t/w4j+0pSFH01WEPMN5iQQWlWpm6Qj4sXgpaXUquaoBuuK/f+iuwAaprGrnbumWjqqphZBNIyBJR8qQD6b/7vo9HpL8noxA5jVDPy1Ul61nJB5aiafo4hyan5AtLbu9Pp/sf4sU4sjgcsFDFwsRV4bvUUqknoSRzCjHLcNnDRrNkuFhBsVF0ZOg9u0/BgN57IPGc4zbN6hUlYVVvxTAVTSI0jMBFW7SGwN44gRlJNmo24SRdIWvP7GmsQ/k/+R6cR9Xy8q7asEXUm7WTFx/YBRYiH0f/ABvT6cPqfDoQOOMlsLst9n6gPTl0Vd1Q0p+rFpUm/CrEZEhD+MFUiLerbdts5erFuzSy/wAi0KjjHMzmJEM0I9IhVfxpk0eaVmxJLS+yGz2sDalVlXeWLXilTW0nJiGoXpK30X/3PR+X+56MSfquMXdtlVo5qoeke4kR9Pp5S/v+n0YzxOuHUl0kmuDIiKhM0pns50ul6ny+m5ODnG6AAq+ZLvGhuUvARh3RFbbvISwrlLm0/lHSiNPsHjtuCXDqrtkH7wy86ukr4urSL3cQOYTduDikkAQTFN0qrrh6B9HoFXvR5vR1f/HwY83qRpOK9J+iLpiJZ6oHfw7JJO7b/ftH0flwa4OGQqm9Rq3x+Zv0DoNabqbLuGVfU0RvElHM8qkSqpd6B6SqQ97YVodeM/5o9ruOzIYs3kohLuW7QjSEkmAJCN53WkJqkF1vUFuDFnfFxjVKmI5rHNUWhU+RelBNERT9Pp3f2bfR6PyYAclT8D6I5ZL0Qkf6AL0anpHhg/J6T8X5Pyf3f8eJ0PQW5Vut4Em9L54UTT8l6xmYF8bMwNIfWzVhICkB9BMzIdu72y8uE5L6PKxryVhmxpo6Gqq7ko5JiqkCpjpK9O3d0mOzD70U3Toej0iEBGj6NNL0/k9DVP0f/qwlBxkaDsvQEe2H6ut/cSH0dJf4sFutj0yQ4+90Ics4TKCZbyUpM1On6y0rG7YtJBVU+bXu1bD97w4otOyjaUeRtISThJKHORAlXLZJuK4Xlbdr28vluswzkUk+LfFpj+XVP+z+T9qWG0SInOMkjH0EBKh+UfT6Py+j0/8AxsMcMIiqh3I2tMgq4evJJGGcw0vTsIuq39fqSiUe3VVSV5QVVuvL2eYOXHKgPnlYsZWLZuWMSaSLWRV4VVsGke0y2W6oj4rhuxZs/U045aj4SPTFrHehiop6GiPosR9B+kEvylZ6Nv5f8f5MS2TPp9Ielf0h6fSOqy3/AJP7F3N/d/5cInKgiw6cUaGHp6EV2Ux2dq+gL37Ov5x9TrNWLi0lXDotXlE+FVtVbgJW9auKjXTylctyRo+LyZqpmUg1P1i7nZQySQAtwGNlyRlZdzhZhhFSD8IJykD1wIaXL6FC9Ho/+R+XAg7RX/pZ6fT4mLT8v+PYWKKXDAn4rzo6ZKkZoMqSayxfRCBqOM3WuhlLLdXwpCA7fexUhILekvHgvsPT6V6YlmC/p9KjVsbT0ooH/ZTS/jPKPp/sD/8AGw+zIg4VrlVEPGsQyRceknHeptwE/wBF1ej0flw7zMccYoToQejUGz2SasDfoMU3CoJE5Xu0kAMtxlZ4ebGgY3s30eVJM6qi81qTqB8yEH8pFpvdVIWRnaJmLdUXSX2qQmNnXzjjOHUPs40V2Nm6DqRrpJ0gmsH0VT2qD6C9H/GLP+96cU1xm21IcfeX2n7QugkYKfqumJCkyy+Qp5tEUsyI3T8oIHDMXThIrgV1TFU96QFtVuu3WHgTvJ6hvrT9/FSEq3bvwsdvSapJFbcWkkRjeA2dO7o8mJepQBBeZ9CA+hO1q9/JZ6Pyfk2l/wAmGpIpO8g5TikgW0Ww6eoPoKzuh/ufl/uYXUjQ444/tRTmKrFP1lQ8ZVy008RjWLdW+wmLVkvYXTaDjq283PihZhSkC+btTgpsl0wM0Fx5dW0rgVMA6t1vOXLifygQQUh5e9FMu6cf3R9Hp6CxZoWHiXlLu3buLaLr+gFe8UQEj5f+X0+j8uGYjgBehCkgpT/qoJhmc42JzHorgbpBNfQJVIecBK0rCIMaqzI7PEVKRsPV+RDCTpqDl41Un6Ugg84x4krbyikS56RgVtpCPv8ATktL0ejWL+x6OYPv4nCqOoTYpwhzsiUdpj9U9Lo/Sj1dH5bf/qYhWTExxwxX2mHAvfWz8vMlJ6hqOJzlXlNKSEtItQbyMpKOmBXBbdck1VQV4cS8Ktp7cVmeZ5kUQopA1rRMCzWqBJxwrtSOYJCht5fqpJWFtLn8fJgL5Q1bVcHStSIwlTS0emRpen0g1eqJD6fT/kH0+jBmdd/S2U1Qr95KuZG1d8f9lwr6NL+4Snp3F/8AH9OEL/TIsD9KPDRj04Ku5c9n2eqig1mAVgzjqVcPwSdC9fkI8Qkat9qWrZdyldYOJZnl9A5X1InSVOIx7qUVZG44b143IFdUhS2rmQgA2FqgNl/mw77QUPEceqr6rZ3+sEd2gP5f/k/kxnyWcOPpk9aa6mhql3V3ps5h/vf3MFATlSMjLcvY6PeV0zQoPLqJTcP55/Kx8g1jQQFkhFkgK7vzq6Wkd13T8WKVlI4ymaPnDzM9vIOVElUjYICJEzLdv4qzvT6doW4d1Ysr6Mv0EvQqfoD0yKv5Ru9P5OUf72B2p9oOGlOOLrXQWKAcwiS05MyTprHs5Kgatg3zCbSN16vgI7S9XWFaGuglydXMF+PTEvSFR06zp6o4KjmssqaSq8sCCCDwEg2kkXe8xfyXL8hny4oOhnmUtBKu6MglzdOB9K5KRyJelXuh5vT6R3f/AB8VWtYSGjcg30jHRDJq7aTGm3XRbgCiIXF6LQL0ej8o+j8n9j8no/vYT9IifThgjuhZ1kKJy+evlHLJ82bMz3EqpKIFpdIgSVwmAkXVu5t+HEtlVQ7+oiRYZg0jGM0gBJJs0kVXjp0rbddsuACL5caNysj2Ekyp1aRYt3Sl3OskJlzl/f8AT6MD6Uj2H0ukHfBN9dKaVUBTTG8T8Xo9P5Py+j0/48FU9ebp4hj8Sg5TiKqUDF0hlq1dPJR/FICSACrHqOklZRcFRuG0tJUNmwrbBPz4H1YcfM06irHUwuhGxhmuL12ff6SpbBESK/S5enDzMdu3ZyKTpogmgsqS5GomPoEi9Nn930+n0f2fT6cVqtZGQdvEeKfOFvqQfaKkX/1/Tg5nDAsZY++hXfeiqbJL3DwwgREfUI8uGgoMGtxrhcVmzXK0cSK3JiJqD+4n7OG7XdQZe/JWuDYMHsa6dvJJjGWJAQJkBka+/kCwfN1Hj9ZoOSdJhHLdX2o4j2n9mPD8v9naOHbT+wRfk/sbcL3k1a2op1Rk9mELP6QyMwvOEYgk1JBUny7kBHpsIuQLdt+3A51TFZQDRErNv2Vp/Djr0uFz9CLUl1PSgK5F6E/SXpt9Hp/5fyf3MJNfT6fQRf2fTyYppixxx6MVTWgI+8vwi5jALfLZjpq9NJNbiopm8FULB17xNL2bCH5rsceki27vT/8AJwmXVgs/ShgLoSSiQJCOqiPtF+9j9fSbxdwi5ABSJukCSRD3VoAOz/e8WLNHgPopBg69A+jW9Et9p+Tdy/8AL/dw4y9jo+Re1l6wYt3XDRjhVHWSE9I7x3D+X0bfT/j9GKhx6ffRbSYwMHUOZU4nRki/kHTp6ka7VJ28IfrGlcBWmJXbMDx5EvI58szdXIPGippKiQWmkYFiRkDL0rB+UvT6dof3/IOGLkit5vT/APJwWweIpZX6iVtY0lWeZbNvKNawTnphuRoJQz1+qq/FIBu7rV2GFngP3cO5qLdr0aVSSLmjmbyQXND1S0SJJ/sLcqSSWxLm6rbreXFEDku/v6v93Fvy2bt5VeVVlEE3hizVL0E4H0Ken0en/l/KX5f7OJuGSHbUTOUzJUkzjX6srDLqPQ1QFk/BVdr4dUegtuOEVX9ZTwvKoqRzIOCHc5kHtx2D51S/HiPW/uiP97/kxKRf9gS/J/Y71L72PYnjgKJbbEnI4ogvmFQ0dSt6/onGMC6ExQcuYFBVqqqYXWCrusu8W7A+Fw507CcqkiZARjyh8OLHULhf0xSKXpXU9Ia4bfSXp/J/8jERxDg4XRNdQk9dvs9Jen0j/wDIwvZxkKduacI4JGSSWhhFsaIqvHA2mntsQA/EV2xX2uXH5VEM/pp4LB5JRrpTSFXUj3gPEt/TcHVhoXp9Oop6fy/2bw/s4THlT9/BI47UGav+T9BhmAUwBtl5J1GszXQYJPQYrr2lvIVVRJLZt5t2/FZnqflIsyeOI140bquDSS4s7j2e6N/tW2Y/KX/43Yl/f1Uv7Pvjh6ikl6avIfSkHp9HH/3LfR48DkeOYSvb1NKsvk1HAjpjcPixMZf0WjUjtwtIh9XZEAqojtJUz82LPmNHsGrsOFYt0brvy6aQj+X/AOR6MVCIcOGsnIcKuoj+UQ/Lpl6R/wDrY866eFMWXjFfG28CfHpRnbMxjUk2jNIWzdIbRERtEcXbKqpVqXqZw/8Ao2U41dxrtm/ZC6FAlWqoWq2kQlut8G/FBh1VV45H0rKEp6dIP7Jen0+n/wCvh8l/Z9P5PT/c/wCTGEJwhOS1WLYkzHFFgcxqMmY1jR7aSqGmmbcAas15Dg5JuklyiK4gkkekN3TvxA1hlYw9W+voaYSGSZcQUvG8KYiJgqVhihcqqCRhbuvsLmAx5Bb5ZopHV8b6TSAtvpL+yPo9P9n8hf2cLouXB1TLvzXUJ1xCKmt6S9PpUvuLdd/d/L/jw2onyc3JPWMCztVGqSNl38e1mKaBiMelFtzeFdcrxpluEkjK8B3bCPZYGIduE2gJGK0YqoZm13K91fZ5Nnz4J1DOHESnKu4pdRmvx7fvG5elM+Uv74/k9OA/WXfyUw6X7xe8+8P+yf8A8n0/2cOmwbIoxQJkYj76mk42YeKRMU1ftnyyqug4ciqIoMwvLutl142WldybrcTEpT8JEIkZVnTjpqfdJaCoquP9EHJgSVSutxEd3x/xdv1enwpYuyCKS8S510gUts/JePo9P5N/+PBDtM0Q9PQqWn3ZdEkunokWjZt6beQsOBQ6BtHy4qBJJegvT+RIPRu8Pow1SM/QsP5C9Po/+PjOO0nTzLSMuY4CtH5PydBtUXQOX0DH1Qqg4apPpaZVj+FBVK3VQK0guG7mPFPHNOuaDbPqSQraVZs1UFY5UQV9atV0tUiIkry6uW4S5MDlNdfhfR3ynxenD+j0kl38ykumKgeqzK0/R+X0fl/L/d/J6cEUbeA4RwQNX7/SrvR7rJCLhWrmvkWj6B3tSTQjjYymrzAY/XC28w36RB04rtVTyLxwnKupJNsjJrm8ZpqKqi1SSBIhAbTEryNXn27bLevCdTxsc1nSFqwbI+jhR/sJpCP/ANb0Yo8/IP10/S0XfOFEBd/2EjVL0h6P/jen0/kw5bZEy9KUzxU83rerXUfG0w+Bsui9X4hrwjrvS3EO0DtA944dTyWq1Zv3xsWpJDwugu9uV2DzERiIB1fvYrD5ZX1pB96f1ZXuN3p7r2fD/wDGxXpQykZb0+sC9Lr8jpX8mt6b/wAn/wAnBuNG24PQhhfID6cERISSc09MRs22RQVWj3CTxJJylckrYQlaQ9YlgjVBm5VTxEan+g1JvI9V4q4tbMLuDPl0FQ5A5hICIN13MXIASqj0egI6ASD0Wh6Gh/kH0f2PR6P/AI2EYBZZB4egqaeqj+Q7C9Pou3/3/wAn93CfCkwEvfTbF6eHTjgjvOZbVYLWLkqcpKgxcSqQPEoZCS4yRSSMLrjQNX7g34pdYQddz0hwcpl7EQajJK9dePQMeQecx1SC7lv6/LhzlzKSXpg36XpkXPpBH7MdYvyB/k9H5f7GK7ULhw0zWnPS1XUR/LEvPy6Zekfy91/ix6nxxxlgqHMYiq88jphgSiJnrqAOwrhK0Lrthe9h4+lJtWHT1VmZKJWFxbTS1wv6VbPe6PexUYhdZ449KTtY1w4hX02qF6S9HL/yenEg1cOEF2TtBdRNciVT9KgF6fQfpC8dv5fR/Z/J/iw5BrGPvoCeMk8jxck4sSWVcqK7jG3r8WE5tB5JxzhmgBJuOXdtw8k5GQCX9CQPnAgI/wBgfQqXo9Ho3f8AJ+XDau1lSYxzslT9K6qW9T0l6by/y+n+76cL8rAXZ4Ji29iQdC5p1anG7NvBuWaSDtEe9TcpD3p9e7lLEpF0dHIOzSiYvXWkDAEkR3by5AEcUJ137MNbvPa/s/8A18M6ecL+h0Xo9C6no9H/ACXenE36com4J4+n30bTP4EQDiPvLSE9FzeWsGjR8plMlByyS5unUymGq6IC5Bv3glb1jzYpbqem5KSTmJap5dy8SSNuko++sgkkY7wET2B7uK3DSUjJPGPpkX7l16RQ/selZUj/ACbv8fpxeJ1u3BkyIEEx9JIB+X0+gfR6Py97gdnAhx3KioxFzdgo+FlI2ETcM0ERVRkGuk8X0AFwV36IL7gAfcvxJQsXRi7N42N42j72pqpKLxYfahuBK+7ff7uOKNVU9CTgfQoXo9GsH9j0eny4aDvlllT3Hfzen+z6f/k4lg444XRiSpNptsfQKTcNaekkSWYP3zF4q6sSQaKm2SVv67VbgD3T+HFfdU9U8opeLNR8t1ErKNVTG3y3X4tdIIpetH6ukF4tnHp9BW+j8vo73/lxAJ/xV5g3B4hNBG0OKYrKtl0W7aUiij3CX1fVXvIL/ZDeHzYg1HTxVcoooECU1bbU0jIlTHEq2WVB0ZAqY+kSS/J6fQXp9Hp9G/EvVsnJG1G+Qcl3X99UvT/+vFj7uPR0KVMGHT0qNWYHB02Kzw/V7x66/wCLxSEl9IAuuIrb0t/T+7ivqIOV1h0EUlyusEVEsSFxeki/KXp9Pdf8uKtILKhIN7FTHaH9wvT6OrFzGHSKqfx1KdKem4tb6rDsUFktgq8KkRj7JW34bvKhklWd794QkBbBJue/3wLCGsr6Wa35VT9PvenDcfT6fSiX5fT6fTi7oVfSu0aokmo6zVZVIvEmraeJDVCZZqGvWwpX86DtVUbj+YMVmQ/sf3P7GHMEikYL3pAX5A/vj6PT04+ivdC7mHQJNU2DNZUW995pkYlv8pBiLEkduqBfHhu4/sLl7eJGMETcp3j6C5P7vo/Lia+pzGzLaLbuAbthXUceJICtMOu7aYe4eHkfUdWjKCDpyvENTG5K47klQ8t+CbUUZG+gE/yR7b0fV0v0Q+H/ACYG9VJJAmxsTEfyEf8Ac9H5MNaKtcDDowSuopQIkW4GchFWog9qGPXI9m1UBL4bscrQNPKqLGgzXuVGwCQVAcBD0LK6n2p/F6cPEFlfSmt+VU/i9ONK1XYn74pZjbxDHpwxV7lm5xYleiKqYfrBDVxElJU9d3rYRLw6WKW4cONP7dTo6vTiUjN/puPd6bv7vp/s4Zg7iYelADhAvQrFoQjob0mzb3gtxEvo0GoqLIQ6TkfCKtp4hni63odD3x83i9OFEV19Mu+P4vTjyuX/2QplbmRzdHJlYW0KZW5kb2JqCgoyNiAwIG9iago8PAovTGVuZ3RoIDI1OTYKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL04gMwo+PgpzdHJlYW0KeJydlndUU9kWh8+9N71QkhCKlNBraFICSA29SJEuKjEJEErAkAAiNkRUcERRkaYIMijggKNDkbEiioUBUbHrBBlE1HFwFBuWSWStGd+8ee/Nm98f935rn73P3Wfvfda6AJD8gwXCTFgJgAyhWBTh58WIjYtnYAcBDPAAA2wA4HCzs0IW+EYCmQJ82IxsmRP4F726DiD5+yrTP4zBAP+flLlZIjEAUJiM5/L42VwZF8k4PVecJbdPyZi2NE3OMErOIlmCMlaTc/IsW3z2mWUPOfMyhDwZy3PO4mXw5Nwn4405Er6MkWAZF+cI+LkyviZjg3RJhkDGb+SxGXxONgAoktwu5nNTZGwtY5IoMoIt43kA4EjJX/DSL1jMzxPLD8XOzFouEiSniBkmXFOGjZMTi+HPz03ni8XMMA43jSPiMdiZGVkc4XIAZs/8WRR5bRmyIjvYODk4MG0tbb4o1H9d/JuS93aWXoR/7hlEH/jD9ld+mQ0AsKZltdn6h21pFQBd6wFQu/2HzWAvAIqyvnUOfXEeunxeUsTiLGcrq9zcXEsBn2spL+jv+p8Of0NffM9Svt3v5WF485M4knQxQ143bmZ6pkTEyM7icPkM5p+H+B8H/nUeFhH8JL6IL5RFRMumTCBMlrVbyBOIBZlChkD4n5r4D8P+pNm5lona+BHQllgCpSEaQH4eACgqESAJe2Qr0O99C8ZHA/nNi9GZmJ37z4L+fVe4TP7IFiR/jmNHRDK4ElHO7Jr8WgI0IABFQAPqQBvoAxPABLbAEbgAD+ADAkEoiARxYDHgghSQAUQgFxSAtaAYlIKtYCeoBnWgETSDNnAYdIFj4DQ4By6By2AE3AFSMA6egCnwCsxAEISFyBAVUod0IEPIHLKFWJAb5AMFQxFQHJQIJUNCSAIVQOugUqgcqobqoWboW+godBq6AA1Dt6BRaBL6FXoHIzAJpsFasBFsBbNgTzgIjoQXwcnwMjgfLoK3wJVwA3wQ7oRPw5fgEVgKP4GnEYAQETqiizARFsJGQpF4JAkRIauQEqQCaUDakB6kH7mKSJGnyFsUBkVFMVBMlAvKHxWF4qKWoVahNqOqUQdQnag+1FXUKGoK9RFNRmuizdHO6AB0LDoZnYsuRlegm9Ad6LPoEfQ4+hUGg6FjjDGOGH9MHCYVswKzGbMb0445hRnGjGGmsVisOtYc64oNxXKwYmwxtgp7EHsSewU7jn2DI+J0cLY4X1w8TogrxFXgWnAncFdwE7gZvBLeEO+MD8Xz8MvxZfhGfA9+CD+OnyEoE4wJroRIQiphLaGS0EY4S7hLeEEkEvWITsRwooC4hlhJPEQ8TxwlviVRSGYkNimBJCFtIe0nnSLdIr0gk8lGZA9yPFlM3kJuJp8h3ye/UaAqWCoEKPAUVivUKHQqXFF4pohXNFT0VFysmK9YoXhEcUjxqRJeyUiJrcRRWqVUo3RU6YbStDJV2UY5VDlDebNyi/IF5UcULMWI4kPhUYoo+yhnKGNUhKpPZVO51HXURupZ6jgNQzOmBdBSaaW0b2iDtCkVioqdSrRKnkqNynEVKR2hG9ED6On0Mvph+nX6O1UtVU9Vvuom1TbVK6qv1eaoeajx1UrU2tVG1N6pM9R91NPUt6l3qd/TQGmYaYRr5Grs0Tir8XQObY7LHO6ckjmH59zWhDXNNCM0V2ju0xzQnNbS1vLTytKq0jqj9VSbru2hnaq9Q/uE9qQOVcdNR6CzQ+ekzmOGCsOTkc6oZPQxpnQ1df11Jbr1uoO6M3rGelF6hXrtevf0Cfos/ST9Hfq9+lMGOgYhBgUGrQa3DfGGLMMUw12G/YavjYyNYow2GHUZPTJWMw4wzjduNb5rQjZxN1lm0mByzRRjyjJNM91tetkMNrM3SzGrMRsyh80dzAXmu82HLdAWThZCiwaLG0wS05OZw2xljlrSLYMtCy27LJ9ZGVjFW22z6rf6aG1vnW7daH3HhmITaFNo02Pzq62ZLde2xvbaXPJc37mr53bPfW5nbse322N3055qH2K/wb7X/oODo4PIoc1h0tHAMdGx1vEGi8YKY21mnXdCO3k5rXY65vTW2cFZ7HzY+RcXpkuaS4vLo3nG8/jzGueNueq5clzrXaVuDLdEt71uUnddd457g/sDD30PnkeTx4SnqWeq50HPZ17WXiKvDq/XbGf2SvYpb8Tbz7vEe9CH4hPlU+1z31fPN9m31XfKz95vhd8pf7R/kP82/xsBWgHcgOaAqUDHwJWBfUGkoAVB1UEPgs2CRcE9IXBIYMj2kLvzDecL53eFgtCA0O2h98KMw5aFfR+OCQ8Lrwl/GGETURDRv4C6YMmClgWvIr0iyyLvRJlESaJ6oxWjE6Kbo1/HeMeUx0hjrWJXxl6K04gTxHXHY+Oj45vipxf6LNy5cDzBPqE44foi40V5iy4s1licvvj4EsUlnCVHEtGJMYktie85oZwGzvTSgKW1S6e4bO4u7hOeB28Hb5Lvyi/nTyS5JpUnPUp2Td6ePJninlKR8lTAFlQLnqf6p9alvk4LTduf9ik9Jr09A5eRmHFUSBGmCfsytTPzMoezzLOKs6TLnJftXDYlChI1ZUPZi7K7xTTZz9SAxESyXjKa45ZTk/MmNzr3SJ5ynjBvYLnZ8k3LJ/J9879egVrBXdFboFuwtmB0pefK+lXQqqWrelfrry5aPb7Gb82BtYS1aWt/KLQuLC98uS5mXU+RVtGaorH1futbixWKRcU3NrhsqNuI2ijYOLhp7qaqTR9LeCUXS61LK0rfb+ZuvviVzVeVX33akrRlsMyhbM9WzFbh1uvb3LcdKFcuzy8f2x6yvXMHY0fJjpc7l+y8UGFXUbeLsEuyS1oZXNldZVC1tep9dUr1SI1XTXutZu2m2te7ebuv7PHY01anVVda926vYO/Ner/6zgajhop9mH05+x42Rjf2f836urlJo6m06cN+4X7pgYgDfc2Ozc0tmi1lrXCrpHXyYMLBy994f9Pdxmyrb6e3lx4ChySHHn+b+O31w0GHe4+wjrR9Z/hdbQe1o6QT6lzeOdWV0iXtjusePhp4tLfHpafje8vv9x/TPVZzXOV42QnCiaITn07mn5w+lXXq6enk02O9S3rvnIk9c60vvG/wbNDZ8+d8z53p9+w/ed71/LELzheOXmRd7LrkcKlzwH6g4wf7HzoGHQY7hxyHui87Xe4Znjd84or7ldNXva+euxZw7dLI/JHh61HXb95IuCG9ybv56Fb6ree3c27P3FlzF3235J7SvYr7mvcbfjT9sV3qID0+6j068GDBgztj3LEnP2X/9H686CH5YcWEzkTzI9tHxyZ9Jy8/Xvh4/EnWk5mnxT8r/1z7zOTZd794/DIwFTs1/lz0/NOvm1+ov9j/0u5l73TY9P1XGa9mXpe8UX9z4C3rbf+7mHcTM7nvse8rP5h+6PkY9PHup4xPn34D94Tz+wplbmRzdHJlYW0KZW5kb2JqCgozMiAwIG9iago8PAovRmlsdGVyIC9GbGF0ZURlY29kZQovVHlwZSAvT2JqU3RtCi9OIDIxCi9GaXJzdCAxNTEKL0xlbmd0aCAxMTQzCj4+CnN0cmVhbQp4nNVW224bNxB936/gY4pAu7xfAsOALlEq1GkN2WmDBnlYr1hZrbwrrFax/fc9s5RsuY3htkAeaoM75MyQHA7PGVEwziTThinmAjPMKMUsvp455p1igQluFBOCpGdCQlp8oDJK48OEI6MjiQ/8nRRMkkoaJuHnFLYgP/hL8tOwe5KWSfgHzhm5cBOYgklik5OTrLi830RWnJfLuM2KH1aLLftEds7m7HNWjJtd3TGRnZ5mj87jsivXzTJLs1jvfPA4b5vFrootO5m+nU45d5xzq9Es53ICOUZDLFZiDJv06KM5vW/Q4ShcDWGbpmZdmkP23tfs57+FhK8ln0ny1T6NH/alvd6mNeRL8YTTrHjfLCZlF9mryRvJpeZOKhiF5L9+h3S0seya/+/h+vhXTf3sCXGL0Imjy542dZcVF7urrh9etrtIhqwYldtIRoDn4xB/r99jsI1tW3aDUbNeZMV01W678XXZAkDFWbnva5sVv6wW3TUhTUrJHAjghGU2oG8hnWGWO+a0YsaCHCow56EHkp1GX4EZAtywXsNRQIJLoIv1DmPFVCBnj4UI6vAD25QEjbiCg8MkEI8maRDCgE+a9FYzg50DeGPBNYPFHcduWND2zTEJBktERRLkoNNP4rZqVxsChet5UFw2H+pV1Swi9jtmxmM6H+ekNX4sb2D5W/qG2yoivcH6rKApNBhIg1zOwL9VNayX68g4LqeLNz9TZ1xuvo+r5XWHqOE2XZfLLdNpk9GouUPCBwZFY6ANUmioPAjjDkeZrtZRMn+I2aogMi3Nf8DC5PUZaDKYx+VuXbbPAcGLIyCIgDtCaumiKeXAJMpValSqlHZJAizG8xebxAmpgVLAAq7XG+YMzcXVAmRUJp2xWB/XrwEJ0gvNguS93gXfw8DCZggmAXpIWk9wFGCLYC0K6yFIg4UMaqu2SRoATgFXhrCEBWXfdK+nvpdJn5pMc3FwjcD6Q5JeJEYYrvu+BsjlwYb9+zH0xlGA+iuYBPr/Ckr7b0D59B4PiPTuGJFC/RNECq3UM5BE5APhe1JbFoR/Ckhcyj5goZCEzFiRSWUyaZzLcD2Z5V4CqtIEe3SmYV03AOs8Vh32sDyXAbflbK40ykOwOX45Aws8dzTGjqOmXeB36xPj/f/nI6Cfreo/cPqj38thRWUULqz4MJ9l9GGvrrtu86Yobm9v80V7vy6v8rop+pr6JNtPI/My1xJ1xoTcUCTIQS5lX+by8C1C27Sruop3N+u8am5eDE9IkXOvj+KzLg/Gfpv46vJLvYz11/NGrw38PsfFqkzAob1MMLkkwnotcu+DT6+WugM2AbSE/nncNru2wluFVusLVd8BvZPDVNObaw+z4uNPV7/T6clnhqdVKonFDMR9wCI9dKqLSCkqzidTFMN4h/I3u0GQ4xTDumkvNmUV+3Um8bdyt+7m70Y0YzYeU8lc4Dm2f2mlwxbv2ma36SdcUH0t6+2mbGNd3WPBi2dnpjvrf0/7WOnBR0IdfJC7lsj68FT7E8+njv4KZW5kc3RyZWFtCmVuZG9iagoKMzMgMCBvYmoKPDwKL1NpemUgMzQKL1Jvb3QgMiAwIFIKL0luZm8gMyAwIFIKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL1R5cGUgL1hSZWYKL0xlbmd0aCAxMTkKL1cgWyAxIDMgMiBdCi9JbmRleCBbIDAgMzQgXQo+PgpzdHJlYW0KeJw1zS0OwlAYRNE7LdA+ftvCAiBoLJZtkBRP0mVgEawCg0XXoNlTSSYf5uRmzAAMQwZbsLKZoIoltyM7FuUp9onYPaILW9ok9rfYp+L8jJ6J9v8yF5dv9EJcD9FL0bXRK6X3MbqytW3s2m6U+hcofe7wA1lbDwQKZW5kc3RyZWFtCmVuZG9iagoKc3RhcnR4cmVmCjYzOTYyNwolJUVPRg=="}],{TabPane}=Tabs,SignInput=({onSelect:it,onClickbtn:qe})=>{const Qe=useSelector(selectEmail);reactExports.useRef(null);const[ye,Ue]=reactExports.useState(!1),[Xe,Fe]=reactExports.useState(null),[D,se]=reactExports.useState(null),[i,w]=reactExports.useState([]),[P,e]=reactExports.useState(null),[t,o]=reactExports.useState(!1),K=useSelector(selectFullName),[j,C]=reactExports.useState("1"),O=f=>{o(!1),e(f),Fe(null)},d=f=>{se(f.target.value)},A=()=>rt(void 0,null,function*(){const f={signature_data:P||Xe,signature_name:D,user_full_name:K,user_email:Qe};try{const E=yield(yield fetch("/api/method/esign_app.api.save_signature",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(f)})).json();E.message.status<300?(B.success("Sign Created Successfully",{position:"top-right",autoClose:500,hideProgressBar:!1,closeOnClick:!0,pauseOnHover:!0,draggable:!0,progress:void 0,theme:"dark",transition:Y}),Fe(null),e(null),se(""),o(!0)):alert("Error saving signature: "+E.message)}catch(R){console.error("Error:",R),alert("An error occurred while saving the signature")}C("1")}),n=f=>{o(!1),Fe(f),e(null)};reactExports.useEffect(()=>{(Qe||t)&&rt(void 0,null,function*(){try{const R=yield fetch(`/api/method/esign_app.api.get_signatures?user_mail=${Qe}`,{method:"GET",headers:{"Content-Type":"application/json"}}),E=yield R.json();R.status===200&&w(E.message.data)}catch(R){}})},[Qe,t]);const I=()=>{Ue(!0),qe()},k=()=>{Ue(!1)},y=f=>{it(f),k()};return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[jsxRuntimeExports.jsx("button",{className:"bg-[#283C42] w-full text-white px-4 py-2 rounded border-2 border-transparent hover:border-[#283C42] hover:bg-white hover:text-[#283C42] transition-colors duration-300",onClick:I,children:"Sign"}),jsxRuntimeExports.jsx(Modal,{title:"Signature List",open:ye,onCancel:k,footer:[,],width:"70vw",children:jsxRuntimeExports.jsx("div",{className:"min-h-[60vh]",children:jsxRuntimeExports.jsxs(Tabs,{activeKey:j,onChange:C,children:[jsxRuntimeExports.jsx(TabPane,{tab:"All Signatures",children:jsxRuntimeExports.jsx("div",{className:"all-sign-div",children:i.map((f,R)=>jsxRuntimeExports.jsxs("div",{className:"card",onClick:()=>y(f.sign_blob),children:[jsxRuntimeExports.jsx("img",{alt:`Signature ${R}`,src:f.sign_blob,className:"card__image"}),jsxRuntimeExports.jsxs("div",{className:"card__content",children:[jsxRuntimeExports.jsx("p",{className:"card__title",children:f.sign_name}),jsxRuntimeExports.jsx("p",{className:"card__description",children:new Date(f.creation).toLocaleString()})]})]},R))})},"1"),jsxRuntimeExports.jsxs(TabPane,{tab:"New Signature",children:[jsxRuntimeExports.jsx(SignPad,{onSave:O,onUpload:n}),P&&jsxRuntimeExports.jsxs("div",{className:"bg-gray-200 p-4 mt-4",children:[jsxRuntimeExports.jsx("h2",{className:"text-lg font-semibold mb-2",children:"Signature Preview"}),jsxRuntimeExports.jsx("img",{src:P,alt:"Signature",style:{maxWidth:"100%",height:"90px"},className:"border border-gray-300 rounded"}),jsxRuntimeExports.jsxs("div",{className:"flex items-center space-x-2 mt-2 gap-1",children:[jsxRuntimeExports.jsx("input",{type:"text",className:"border rounded px-4 py-2 h-10 focus:outline-none",placeholder:"Name of Signature",value:D||"",onChange:d}),jsxRuntimeExports.jsx("button",{onClick:A,className:"bg-white text-[#283C42] px-4 py-2 rounded border-2 border-[#283C42] hover:bg-[#283C42] hover:text-white hover:border-transparent transition-colors duration-300",children:"Save Signature"})]})]}),Xe&&!P&&jsxRuntimeExports.jsxs("div",{className:"bg-gray-200 p-4 mt-4",children:[jsxRuntimeExports.jsx("h2",{className:"text-lg font-semibold mb-2",children:"Uploaded Image Preview"}),jsxRuntimeExports.jsx("img",{src:Xe,alt:"Uploaded Image",style:{maxWidth:"100%",height:"auto"},className:"border border-gray-300 rounded"}),jsxRuntimeExports.jsxs("div",{className:"flex items-center space-x-2 mt-2 gap-1",children:[jsxRuntimeExports.jsx("input",{type:"text",className:"border rounded px-4 py-2 focus:outline-none",placeholder:"Name of Signature",onChange:d}),jsxRuntimeExports.jsx("button",{onClick:A,className:"bg-white text-[#283C42] px-4 py-2 rounded border-2 border-[#283C42] hover:bg-[#283C42] hover:text-white hover:border-transparent transition-colors duration-300",children:"Save Signature"})]})]})]},"2")]})})})]})};export{PdfRenderer as P,SignInput as S,datapdfDemo as d};
